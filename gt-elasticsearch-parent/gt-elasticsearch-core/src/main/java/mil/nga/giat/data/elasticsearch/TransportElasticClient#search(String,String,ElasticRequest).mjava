    @Override
    public ElasticResponse search(String searchIndices, String type, ElasticRequest request) {
        final SearchRequestBuilder searchRequest = client.prepareSearch(searchIndices)
                .setTypes(type)
                .setSearchType(SearchType.DFS_QUERY_THEN_FETCH);

        if (request.getSize() != null) {
            searchRequest.setSize(request.getSize());
        }

        if (request.getFrom() != null) {
            searchRequest.setFrom(request.getFrom());
        }

        if (request.getScroll() != null) {
            searchRequest.setScroll(TimeValue.timeValueSeconds(request.getScroll()));
        }

        final List<String> sourceIncludes = request.getSourceIncludes();
        if (sourceIncludes.size() == 1) {
            searchRequest.setFetchSource(sourceIncludes.get(0), null);
        } else if (!sourceIncludes.isEmpty()) {
            searchRequest.setFetchSource(sourceIncludes.toArray(new String[sourceIncludes.size()]), null);
        }

        request.getFields().stream().forEach(field -> ElasticCompatLoader.getCompat(null).addField(searchRequest, field));

        request.getSorts().stream().forEach(entry -> {
            final String key = entry.keySet().iterator().next();
            final String value = entry.values().iterator().next();
            searchRequest.addSort(key, SortOrder.valueOf(value.toUpperCase()));
        });

        if (request.getQuery() != null) {
            searchRequest.setQuery(request.getQuery());
        }

        if (LOGGER.isLoggable(Level.FINE)) {
            LOGGER.fine("Request: " + System.lineSeparator() + searchRequest);
        }

        try {
            return new TransportElasticResponse(searchRequest.execute().get());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

