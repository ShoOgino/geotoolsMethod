    private static void connect() throws Exception {
        Path baseDir = Paths.get("target" + File.separator + "elasticsearch");
        baseDir.toFile().mkdirs();
        dataPath = Files.createTempDirectory(baseDir, null).toAbsolutePath().toString();
        
        LOGGER.info("Creating local test Elasticsearch cluster (path.home=" + dataPath + ")");
        final ElasticCompat compat = ElasticCompatLoader.getCompat(null);
        
        Settings settings = compat.createSettings("path.home", dataPath, "http.enabled", false);
        node = nodeBuilder()
                .settings(settings)
                .local(true)
                .clusterName(clusterName)
                .node();
        Client client = node.client();
        
        // create index and add mappings
        Settings indexSettings = compat.createSettings("number_of_shards", numShards, 
                "number_of_replicas", numReplicas);
        CreateIndexRequestBuilder builder = client.admin().indices().prepareCreate(indexName);
        Settings createSettings = Settings.settingsBuilder().put("number_of_shards", 1)
				.put("number_of_replicas", 0).build();
        builder.setSettings(createSettings);
        try (Scanner s = new Scanner(ClassLoader.getSystemResourceAsStream(ACTIVE_MAPPINGS_FILE))) {
            s.useDelimiter("\\A");
            builder.addMapping("active", s.next());
        }
        try (Scanner s = new Scanner(ClassLoader.getSystemResourceAsStream(INACTIVE_MAPPINGS_FILE))) {
            s.useDelimiter("\\A");
            builder.addMapping("not-active", s.next());
        }
        builder.execute().actionGet();

        // index documents
        InputStream inputStream = ClassLoader.getSystemResourceAsStream(TEST_FILE);
		BulkRequestBuilder bulkRequestBuilder = client.prepareBulk();

        try (Scanner scanner = new Scanner(inputStream)) {
        	String eol = System.getProperty(LINE_SEPARATOR);
            scanner.useDelimiter(eol);
            while (scanner.hasNext()) {
                final String line = scanner.next();
                if (!line.startsWith("#")) {
                    final Matcher idMatcher = ID_PATTERN.matcher(line);
                    final String id;
                    if (idMatcher.matches()) {
                        id = idMatcher.group(1);
                    } else {
                        id = null;
                    }
                    final String layerName;
                    final Matcher statusMatcher = STATUS_PATTERN.matcher(line);
                    if (statusMatcher.matches()) {
                        layerName = statusMatcher.group(1);
                    } else {
                        layerName = null;
                    }
                    
	                    bulkRequestBuilder.add(client.prepareIndex(indexName, layerName).setSource(line).setId(id));
	                    
//	                    IndexResponse response = client.prepareIndex(indexName, layerName)
//	                    .setSource(line)
//	                    .setId(id)
//	                    .execute().actionGet();
                    
                }
            }
            BulkResponse bulkresp = bulkRequestBuilder.execute().actionGet();
            
//            NodesStatsRequestBuilder nrbld = new NodesStatsRequestBuilder(client, NodesStatsAction.INSTANCE);
//            NodesStatsResponse nsrep = nrbld.all().execute().actionGet();
//            for (NodeStats nstat: nsrep.getNodes()){
//            	System.out.println("total index count: " + nstat.getIndices().getIndexing().getTotal().getIndexCount());
//            	System.out.println("total doc count: " + nstat.getIndices().getDocs().getCount());
//            	System.out.println("total size in bytes: " + nstat.getIndices().getStore().getSizeInBytes());            	
//            }
          
            
            RefreshResponse refreshresp = client.admin().indices().refresh(new RefreshRequest(indexName)).actionGet();
        }
        LOGGER.info("Done setting up Elasticsearch");
    }

