    protected void visitBinaryComparisonOperator(BinaryComparisonOperator filter, Object extraData) {
        super.visitBinaryComparisonOperator(filter, extraData);

        if (type.equals("=")) {
            filterBuilder = QueryBuilders.termQuery(key, field);
//            filterBuilder = FilterBuilders.termFilter(key, field);
        } else if (type.equals("!=")) {
            filterBuilder = QueryBuilders.boolQuery().mustNot(QueryBuilders.termQuery(key, field));
//            TermFilterBuilder equalsFilter;
//            equalsFilter = FilterBuilders.termFilter(key, field);
//            filterBuilder = FilterBuilders.notFilter(equalsFilter);
        } else if (type.equals(">")) {
            filterBuilder = QueryBuilders.rangeQuery(key).gt(field);
//            filterBuilder = FilterBuilders.rangeFilter(key).gt(field);
        } else if (type.equals(">=")) {
            filterBuilder = QueryBuilders.rangeQuery(key).gte(field);
//            filterBuilder = FilterBuilders.rangeFilter(key).gte(field);
        } else if (type.equals("<")) {
            filterBuilder = QueryBuilders.rangeQuery(key).lt(field);
//            filterBuilder = FilterBuilders.rangeFilter(key).lt(field);
        } else if (type.equals("<=")) {
            filterBuilder = QueryBuilders.rangeQuery(key).lte(field);
//            filterBuilder = FilterBuilders.rangeFilter(key).lte(field);
        }

        if (nested) {
            filterBuilder = QueryBuilders.nestedQuery(path,filterBuilder);
        }
    }

