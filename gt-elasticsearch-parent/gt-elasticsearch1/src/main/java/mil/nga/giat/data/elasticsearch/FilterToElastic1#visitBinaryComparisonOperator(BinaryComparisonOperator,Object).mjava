    protected void visitBinaryComparisonOperator(BinaryComparisonOperator filter, Object extraData) {
        super.visitBinaryComparisonOperator(filter, extraData);
        
        if (type.equals("=")) {
            filterBuilder = FilterBuilders.termFilter(key, field);
        } else if (type.equals("!=")) {
            TermFilterBuilder equalsFilter;
            equalsFilter = FilterBuilders.termFilter(key, field);
            filterBuilder = FilterBuilders.notFilter(equalsFilter);
        } else if (type.equals(">")) {
            filterBuilder = FilterBuilders.rangeFilter(key).gt(field);
        } else if (type.equals(">=")) {
            filterBuilder = FilterBuilders.rangeFilter(key).gte(field);
        } else if (type.equals("<")) {
            filterBuilder = FilterBuilders.rangeFilter(key).lt(field);
        } else if (type.equals("<=")) {
            filterBuilder = FilterBuilders.rangeFilter(key).lte(field);
        }
        if (nested) {
            filterBuilder = FilterBuilders.nestedFilter(path,filterBuilder);
        }
    }

