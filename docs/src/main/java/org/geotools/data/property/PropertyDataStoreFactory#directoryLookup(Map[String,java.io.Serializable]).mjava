    /**
     * Lookups the directory containing property files in the params argument, and returns the
     * corresponding <code>java.io.File</code>.
     * <p>
     * The file is first checked for existence as an absolute path in the filesystem. If such a
     * directory is not found, then it is treated as a relative path, taking Java system property
     * <code>"user.dir"</code> as the base.
     * </p>
     * 
     * @param params
     * @throws IllegalArgumentException if directory is not a directory.
     * @throws FileNotFoundException if directory does not exists
     * @throws IOException if {@linkplain #DIRECTORY} doesn't find parameter in <code>params</code>
     *         file does not exists.
     */
    private File directoryLookup(Map<String, java.io.Serializable> params) throws IOException,
            FileNotFoundException, IllegalArgumentException {
        File file = (File) DIRECTORY.lookUp(params);
        if (!file.exists()) {
            File currentDir = new File(System.getProperty("user.dir"));
            String path = DIRECTORY.lookUp(params).toString();
            file = new File(currentDir, path);
            if (!file.exists()) {
                throw new FileNotFoundException(file.getAbsolutePath());
            }
        }
        if (file.isDirectory()) {
            return file;
        } else {
            // check if they pointed to a properties file; and use the parent directory
            if (file.getPath().endsWith(".properties")) {
                return file.getParentFile();
            } else {
                throw new IllegalArgumentException(file.getAbsolutePath() + " is not a directory");
            }
        }
    }

