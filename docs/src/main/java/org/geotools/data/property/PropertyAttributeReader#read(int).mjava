    /**
     * Read attribute in position marked by <code>index</code>.
     * 
     * @param index Attribute position to read
     * 
     * @return Value for the attribtue in position <code>index</code>
     * 
     * @throws IOException
     * @throws ArrayIndexOutOfBoundsException
     */
    public Object read(int index) throws IOException, ArrayIndexOutOfBoundsException {
        if (line == null) {
            throw new IOException("No content available - did you remeber to call next?");
        }

        AttributeDescriptor attType = type.getDescriptor(index);

        String stringValue = null;
        try {
            // read the value
            stringValue = text[index];

            // trim off any whitespace
            if (stringValue != null) {
                stringValue = stringValue.trim();
            }
            if ("".equals(stringValue)) {
                stringValue = null;
            }
        } catch (RuntimeException e1) {
            e1.printStackTrace();
            stringValue = null;
        }

        // check for special <null> flag
        if ("<null>".equals(stringValue)) {
            stringValue = null;
        }
        if (stringValue == null) {
            if (attType.isNillable()) {
                return null;
            }
        }
        // Use of Converters to convert from String to requested java binding
        Object value = Converters.convert(stringValue, attType.getType().getBinding());

        if (attType.getType() instanceof GeometryType) {
            // this is to be passed on in the geometry objects so the srs name gets encoded
            CoordinateReferenceSystem crs = ((GeometryType) attType.getType())
                    .getCoordinateReferenceSystem();
            if (crs != null) {
                // must be geometry, but check anyway
                if (value != null && value instanceof Geometry) {
                    ((Geometry) value).setUserData(crs);
                }
            }
        }
        return value;
    }
    // implementation end

