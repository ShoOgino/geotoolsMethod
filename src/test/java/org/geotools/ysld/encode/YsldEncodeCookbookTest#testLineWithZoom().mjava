    @Test
    public void testLineWithZoom() throws Exception {
        //    <UserStyle>
        //      <Title>SLD Cook Book: Zoom-based line</Title>
        //      <FeatureTypeStyle>
        //        <Rule>
        //          <Name>Large</Name>
        //          <MaxScaleDenominator>180000000</MaxScaleDenominator>
        //          <LineSymbolizer>
        //            <Stroke>
        //              <CssParameter name="stroke">#009933</CssParameter>
        //              <CssParameter name="stroke-width">6</CssParameter>
        //            </Stroke>
        //          </LineSymbolizer>
        //        </Rule>
        //        <Rule>
        //          <Name>Medium</Name>
        //          <MinScaleDenominator>180000000</MinScaleDenominator>
        //          <MaxScaleDenominator>360000000</MaxScaleDenominator>
        //          <LineSymbolizer>
        //            <Stroke>
        //              <CssParameter name="stroke">#009933</CssParameter>
        //              <CssParameter name="stroke-width">4</CssParameter>
        //            </Stroke>
        //          </LineSymbolizer>
        //        </Rule>
        //        <Rule>
        //          <Name>Small</Name>
        //          <MinScaleDenominator>360000000</MinScaleDenominator>
        //          <LineSymbolizer>
        //            <Stroke>
        //              <CssParameter name="stroke">#009933</CssParameter>
        //              <CssParameter name="stroke-width">2</CssParameter>
        //            </Stroke>
        //          </LineSymbolizer>
        //        </Rule>
        //      </FeatureTypeStyle>
        //    </UserStyle>

        YamlMap style = encode("line", "zoom.sld");

        YamlMap rule = style.seq("feature-styles").map(0).seq("rules").map(0);
        assertEquals("Large", rule.str("name"));

        Matcher m = Pattern.compile("\\(,(.*)\\)").matcher(rule.str("scale"));
        assertTrue(m.matches());
        assertEquals(1.8E8, Double.parseDouble(m.group(1)), 0.1);

        YamlMap line = rule.seq("symbolizers").map(0).map("line");
        assertEquals("009933", line.str("stroke-color"));
        assertEquals(6, line.integer("stroke-width").intValue());

        rule = style.seq("feature-styles").map(0).seq("rules").map(1);
        assertEquals("Medium", rule.str("name"));
        m = Pattern.compile("\\((.*),(.*)\\)").matcher(rule.str("scale"));
        assertTrue(m.matches());
        assertEquals(1.8E8, Double.parseDouble(m.group(1)), 0.1);
        assertEquals(3.6E8, Double.parseDouble(m.group(2)), 0.1);

        line = rule.seq("symbolizers").map(0).map("line");
        assertEquals("009933", line.str("stroke-color"));
        assertEquals(4, line.integer("stroke-width").intValue());

        rule = style.seq("feature-styles").map(0).seq("rules").map(2);
        assertEquals("Small", rule.str("name"));

        m = Pattern.compile("\\((.*),\\)").matcher(rule.str("scale"));
        assertTrue(m.matches());
        assertEquals(3.6E8, Double.parseDouble(m.group(1)), 0.1);

        line = rule.seq("symbolizers").map(0).map("line");
        assertEquals("009933", line.str("stroke-color"));
        assertEquals(2, line.integer("stroke-width").intValue());
    }

