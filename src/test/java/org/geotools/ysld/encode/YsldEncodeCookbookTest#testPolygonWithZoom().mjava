    @Test
    public void testPolygonWithZoom() throws Exception {
        //    <UserStyle>
        //      <Title>SLD Cook Book: Zoom-based polygon</Title>
        //      <FeatureTypeStyle>
        //        <Rule>
        //          <Name>Large</Name>
        //          <MaxScaleDenominator>100000000</MaxScaleDenominator>
        //          <PolygonSymbolizer>
        //            <Fill>
        //              <CssParameter name="fill">#0000CC</CssParameter>
        //            </Fill>
        //            <Stroke>
        //              <CssParameter name="stroke">#000000</CssParameter>
        //              <CssParameter name="stroke-width">7</CssParameter>
        //            </Stroke>
        //          </PolygonSymbolizer>
        //          <TextSymbolizer>
        //            <Label>
        //              <ogc:PropertyName>name</ogc:PropertyName>
        //            </Label>
        //            <Font>
        //              <CssParameter name="font-family">Arial</CssParameter>
        //              <CssParameter name="font-size">14</CssParameter>
        //              <CssParameter name="font-style">normal</CssParameter>
        //              <CssParameter name="font-weight">bold</CssParameter>
        //            </Font>
        //            <LabelPlacement>
        //              <PointPlacement>
        //                <AnchorPoint>
        //                  <AnchorPointX>0.5</AnchorPointX>
        //                  <AnchorPointY>0.5</AnchorPointY>
        //                </AnchorPoint>
        //              </PointPlacement>
        //            </LabelPlacement>
        //            <Fill>
        //              <CssParameter name="fill">#FFFFFF</CssParameter>
        //            </Fill>
        //          </TextSymbolizer>
        //        </Rule>
        //        <Rule>
        //          <Name>Medium</Name>
        //          <MinScaleDenominator>100000000</MinScaleDenominator>
        //          <MaxScaleDenominator>200000000</MaxScaleDenominator>
        //          <PolygonSymbolizer>
        //            <Fill>
        //              <CssParameter name="fill">#0000CC</CssParameter>
        //            </Fill>
        //            <Stroke>
        //              <CssParameter name="stroke">#000000</CssParameter>
        //              <CssParameter name="stroke-width">4</CssParameter>
        //            </Stroke>
        //          </PolygonSymbolizer>
        //        </Rule>
        //        <Rule>
        //          <Name>Small</Name>
        //          <MinScaleDenominator>200000000</MinScaleDenominator>
        //          <PolygonSymbolizer>
        //            <Fill>
        //              <CssParameter name="fill">#0000CC</CssParameter>
        //            </Fill>
        //            <Stroke>
        //              <CssParameter name="stroke">#000000</CssParameter>
        //              <CssParameter name="stroke-width">1</CssParameter>
        //            </Stroke>
        //          </PolygonSymbolizer>
        //        </Rule>
        //      </FeatureTypeStyle>
        //    </UserStyle>

        YamlMap obj = encode("poly", "zoom.sld");

        YamlMap rule = obj.seq("feature-styles").map(0).seq("rules").map(0);
        assertThat(rule, yHasEntry("name", equalTo("Large")));
        assertThat(rule, yHasEntry("scale", yTuple(lexEqualTo(""), numEqualTo(1.0E8, 0.1))));

        YamlMap poly = rule.seq("symbolizers").map(0).map("polygon");
        assertThat(poly.get("fill-color"), isColor("0000CC"));
        assertThat(poly.get("stroke-color"), isColor("000000"));
        assertEquals(7, poly.integer("stroke-width").intValue());

        YamlMap text = rule.seq("symbolizers").map(1).map("text");
        assertEquals("${name}", text.str("label"));
        assertEquals("Arial", text.str("font-family"));
        assertEquals(14, text.integer("font-size").intValue());
        assertEquals("normal", text.str("font-style"));
        assertEquals("bold", text.str("font-weight"));

        assertEquals("point", text.str("placement"));
        assertThat(text, yHasEntry("anchor", yTuple(numEqualTo(0.5, 0.0001), numEqualTo(0.5, 0.0001))));

        assertThat(text.get("fill-color"), isColor("FFFFFF"));

        rule = obj.seq("feature-styles").map(0).seq("rules").map(1);
        assertThat(rule, yHasEntry("name", equalTo("Medium")));
        assertThat(rule, yHasEntry("scale", yTuple(numEqualTo(1.0E8, 0.1), numEqualTo(2.0E8, 0.1))));

        poly = rule.seq("symbolizers").map(0).map("polygon");
        assertThat(poly.get("fill-color"), isColor("0000CC"));
        assertThat(poly.get("stroke-color"), isColor("000000"));
        assertEquals(4, poly.integer("stroke-width").intValue());

        rule = obj.seq("feature-styles").map(0).seq("rules").map(2);
        assertThat(rule, yHasEntry("name", equalTo("Small")));
        assertThat(rule, yHasEntry("scale", yTuple(numEqualTo(2.0E8, 0.1), lexEqualTo(""))));

        poly = rule.seq("symbolizers").map(0).map("polygon");
        poly = rule.seq("symbolizers").map(0).map("polygon");
        assertThat(poly.get("fill-color"), isColor("0000CC"));
        assertThat(poly.get("stroke-color"), isColor("000000"));
        assertEquals(1, poly.integer("stroke-width").intValue());
    }

