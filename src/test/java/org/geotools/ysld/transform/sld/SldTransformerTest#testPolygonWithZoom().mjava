    @Test
    public void testPolygonWithZoom() throws Exception {
        //    <UserStyle>
        //      <Title>SLD Cook Book: Zoom-based polygon</Title>
        //      <FeatureTypeStyle>
        //        <Rule>
        //          <Name>Large</Name>
        //          <MaxScaleDenominator>100000000</MaxScaleDenominator>
        //          <PolygonSymbolizer>
        //            <Fill>
        //              <CssParameter name="fill">#0000CC</CssParameter>
        //            </Fill>
        //            <Stroke>
        //              <CssParameter name="stroke">#000000</CssParameter>
        //              <CssParameter name="stroke-width">7</CssParameter>
        //            </Stroke>
        //          </PolygonSymbolizer>
        //          <TextSymbolizer>
        //            <Label>
        //              <ogc:PropertyName>name</ogc:PropertyName>
        //            </Label>
        //            <Font>
        //              <CssParameter name="font-family">Arial</CssParameter>
        //              <CssParameter name="font-size">14</CssParameter>
        //              <CssParameter name="font-style">normal</CssParameter>
        //              <CssParameter name="font-weight">bold</CssParameter>
        //            </Font>
        //            <LabelPlacement>
        //              <PointPlacement>
        //                <AnchorPoint>
        //                  <AnchorPointX>0.5</AnchorPointX>
        //                  <AnchorPointY>0.5</AnchorPointY>
        //                </AnchorPoint>
        //              </PointPlacement>
        //            </LabelPlacement>
        //            <Fill>
        //              <CssParameter name="fill">#FFFFFF</CssParameter>
        //            </Fill>
        //          </TextSymbolizer>
        //        </Rule>
        //        <Rule>
        //          <Name>Medium</Name>
        //          <MinScaleDenominator>100000000</MinScaleDenominator>
        //          <MaxScaleDenominator>200000000</MaxScaleDenominator>
        //          <PolygonSymbolizer>
        //            <Fill>
        //              <CssParameter name="fill">#0000CC</CssParameter>
        //            </Fill>
        //            <Stroke>
        //              <CssParameter name="stroke">#000000</CssParameter>
        //              <CssParameter name="stroke-width">4</CssParameter>
        //            </Stroke>
        //          </PolygonSymbolizer>
        //        </Rule>
        //        <Rule>
        //          <Name>Small</Name>
        //          <MinScaleDenominator>200000000</MinScaleDenominator>
        //          <PolygonSymbolizer>
        //            <Fill>
        //              <CssParameter name="fill">#0000CC</CssParameter>
        //            </Fill>
        //            <Stroke>
        //              <CssParameter name="stroke">#000000</CssParameter>
        //              <CssParameter name="stroke-width">1</CssParameter>
        //            </Stroke>
        //          </PolygonSymbolizer>
        //        </Rule>
        //      </FeatureTypeStyle>
        //    </UserStyle>

        YamlMap obj = transform("poly", "zoom.sld");

        YamlMap rule = obj.seq("feature-styles").map(0).seq("rules").map(0);
        assertEquals("Large", rule.str("name"));
        assertEquals("(,100000000)", rule.str("scale"));

        YamlMap poly = rule.seq("symbolizers").map(0).map("polygon");
        assertEquals("#0000CC", poly.map("fill").str("color"));
        assertEquals("#000000", poly.map("stroke").str("color"));
        assertEquals(7, poly.map("stroke").integer("width").intValue());

        YamlMap text = rule.seq("symbolizers").map(1).map("text");
        assertEquals("[name]", text.str("label"));
        assertEquals("Arial", text.map("font").str("family"));
        assertEquals(14, text.map("font").integer("size").intValue());
        assertEquals("normal", text.map("font").str("style"));
        assertEquals("bold", text.map("font").str("weight"));

        assertEquals("point", text.map("placement").str("type"));
        assertEquals("(0.5,0.5)", text.map("placement").str("anchor"));

        assertEquals("#FFFFFF", text.map("fill").str("color"));

        rule = obj.seq("feature-styles").map(0).seq("rules").map(1);
        assertEquals("Medium", rule.str("name"));
        assertEquals("(100000000,200000000)", rule.str("scale"));

        poly = rule.seq("symbolizers").map(0).map("polygon");
        assertEquals("#0000CC", poly.map("fill").str("color"));
        assertEquals("#000000", poly.map("stroke").str("color"));
        assertEquals(4, poly.map("stroke").integer("width").intValue());

        rule = obj.seq("feature-styles").map(0).seq("rules").map(2);
        assertEquals("Small", rule.str("name"));
        assertEquals("(200000000,)", rule.str("scale"));

        poly = rule.seq("symbolizers").map(0).map("polygon");
        poly = rule.seq("symbolizers").map(0).map("polygon");
        assertEquals("#0000CC", poly.map("fill").str("color"));
        assertEquals("#000000", poly.map("stroke").str("color"));
        assertEquals(1, poly.map("stroke").integer("width").intValue());
    }

