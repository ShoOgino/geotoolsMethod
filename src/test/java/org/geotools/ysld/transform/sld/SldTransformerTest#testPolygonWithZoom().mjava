    @Test
    public void testPolygonWithZoom() throws Exception {
        //    <UserStyle>
        //      <Title>SLD Cook Book: Zoom-based polygon</Title>
        //      <FeatureTypeStyle>
        //        <Rule>
        //          <Name>Large</Name>
        //          <MaxScaleDenominator>100000000</MaxScaleDenominator>
        //          <PolygonSymbolizer>
        //            <Fill>
        //              <CssParameter name="fill">#0000CC</CssParameter>
        //            </Fill>
        //            <Stroke>
        //              <CssParameter name="stroke">#000000</CssParameter>
        //              <CssParameter name="stroke-width">7</CssParameter>
        //            </Stroke>
        //          </PolygonSymbolizer>
        //          <TextSymbolizer>
        //            <Label>
        //              <ogc:PropertyName>name</ogc:PropertyName>
        //            </Label>
        //            <Font>
        //              <CssParameter name="font-family">Arial</CssParameter>
        //              <CssParameter name="font-size">14</CssParameter>
        //              <CssParameter name="font-style">normal</CssParameter>
        //              <CssParameter name="font-weight">bold</CssParameter>
        //            </Font>
        //            <LabelPlacement>
        //              <PointPlacement>
        //                <AnchorPoint>
        //                  <AnchorPointX>0.5</AnchorPointX>
        //                  <AnchorPointY>0.5</AnchorPointY>
        //                </AnchorPoint>
        //              </PointPlacement>
        //            </LabelPlacement>
        //            <Fill>
        //              <CssParameter name="fill">#FFFFFF</CssParameter>
        //            </Fill>
        //          </TextSymbolizer>
        //        </Rule>
        //        <Rule>
        //          <Name>Medium</Name>
        //          <MinScaleDenominator>100000000</MinScaleDenominator>
        //          <MaxScaleDenominator>200000000</MaxScaleDenominator>
        //          <PolygonSymbolizer>
        //            <Fill>
        //              <CssParameter name="fill">#0000CC</CssParameter>
        //            </Fill>
        //            <Stroke>
        //              <CssParameter name="stroke">#000000</CssParameter>
        //              <CssParameter name="stroke-width">4</CssParameter>
        //            </Stroke>
        //          </PolygonSymbolizer>
        //        </Rule>
        //        <Rule>
        //          <Name>Small</Name>
        //          <MinScaleDenominator>200000000</MinScaleDenominator>
        //          <PolygonSymbolizer>
        //            <Fill>
        //              <CssParameter name="fill">#0000CC</CssParameter>
        //            </Fill>
        //            <Stroke>
        //              <CssParameter name="stroke">#000000</CssParameter>
        //              <CssParameter name="stroke-width">1</CssParameter>
        //            </Stroke>
        //          </PolygonSymbolizer>
        //        </Rule>
        //      </FeatureTypeStyle>
        //    </UserStyle>

        YamlObj obj = transform("poly", "zoom.sld");

        YamlObj rule = obj.o("feature-styles", 0).o("rules", 0);
        assertEquals("Large", rule.s("name"));
        assertEquals("(,100000000)", rule.s("scale"));

        YamlObj poly = rule.o("symbolizers",0).o("polygon");
        assertEquals("#0000CC", poly.o("fill").s("color"));
        assertEquals("#000000", poly.o("stroke").s("color"));
        assertEquals(7, poly.o("stroke").i("width").intValue());

        YamlObj text = rule.o("symbolizers",1).o("text");
        assertEquals("[name]", text.s("label"));
        assertEquals("Arial", text.o("font").s("family"));
        assertEquals(14, text.o("font").i("size").intValue());
        assertEquals("normal", text.o("font").s("style"));
        assertEquals("bold", text.o("font").s("weight"));

        assertEquals("point", text.o("placement").s("type"));
        assertEquals("(0.5,0.5)", text.o("placement").s("anchor"));

        assertEquals("#FFFFFF", text.o("fill").s("color"));

        rule = obj.o("feature-styles", 0).o("rules", 1);
        assertEquals("Medium", rule.s("name"));
        assertEquals("(100000000,200000000)", rule.s("scale"));

        poly = rule.o("symbolizers",0).o("polygon");
        assertEquals("#0000CC", poly.o("fill").s("color"));
        assertEquals("#000000", poly.o("stroke").s("color"));
        assertEquals(4, poly.o("stroke").i("width").intValue());

        rule = obj.o("feature-styles", 0).o("rules", 2);
        assertEquals("Small", rule.s("name"));
        assertEquals("(200000000,)", rule.s("scale"));

        poly = rule.o("symbolizers",0).o("polygon");
        poly = rule.o("symbolizers",0).o("polygon");
        assertEquals("#0000CC", poly.o("fill").s("color"));
        assertEquals("#000000", poly.o("stroke").s("color"));
        assertEquals(1, poly.o("stroke").i("width").intValue());
    }

