    /**
     * Given an array of {@code Tag}s representing this custom tag, return its string
     * representation.
     *
     * @param tags The tags to format.
     * @return A string representation of the given tags.
     */
    public String toString(final Tag[] tags) {
        // there should be a single tag
        if (tags == null || tags.length != 1) {
            return "";
        }

        StringBuilder sb = new StringBuilder();

        sb.append("\n<DT><B>Module:</B></DT>");

        String tagText = tags[0].text();
        final Matcher matchURL = findURL.matcher(tagText);
        if (!matchURL.matches()) {
            return ""; // continue;
        }
        final String url = matchURL.group(URL_CAPTURE_GROUP).trim();
        final Matcher matchModule = findModule.matcher(url);
        if (!matchModule.matches()) {
            return ""; // continue;
        }

        final String modulePath = matchModule.group(6);
        int pos = modulePath.indexOf('/');
        final String module;
        if (pos == -1) {
            module = modulePath;
        } else {
            module = modulePath.substring(pos + 1);
        }

        final String group, category;
        if (matchModule.group(2).equals("demo")) {
            group = matchModule.group(2);
            category = null;

        } else {
            group = matchModule.group(4);
            category = matchModule.group(5);
        }

        /*
         * Module path e.g. modules/library/main
         */
        sb.append("\n<DD><CODE><B>");
        sb.append(group).append('/');
        if (category != null) {
            sb.append(category).append('/');
        }
        sb.append(module);

        /*
         * Jar name in brackets e.g. (gt-main.jar)
         */
        sb.append(" (gt-").append(module).append(".jar)");

        sb.append("</B></CODE>");

        sb.append("</DD>\n");
        sb.append("\n<DT><B>Source repository:</B></DT>").append('\n');
        sb.append("<DD>   <CODE>").append(url).append("</CODE></DD>\n");

        return sb.toString();
    }

