    /**
     * Generates the Geotools schema from the XML schema.
     */
    public void generate() throws Exception {
        List typeDefs = GeneratorUtils.types( schema, includes );

        //process simple types
        if (simpleTypes) {
            logger.fine("Generating simple types");
            for (Object typeDef : typeDefs) {
                XSDTypeDefinition xsdType = (XSDTypeDefinition) typeDef;

                if (xsdType.getName() == null) {
                    continue;
                }

                if (!xsdType.getTargetNamespace()
                        .equals(schema.getTargetNamespace())) {
                    continue;
                }

                if (xsdType instanceof XSDSimpleTypeDefinition) {
                    logger.fine(xsdType.getName());
                    createType((XSDSimpleTypeDefinition) xsdType, 0);
                }
            }
        }

        //process complex types
        if (complexTypes) {
            logger.fine("Generating complex types");
            for (Object typeDef : typeDefs) {
                XSDTypeDefinition xsdType = (XSDTypeDefinition) typeDef;

                if (xsdType.getName() == null) {
                    continue;
                }

                if (!xsdType.getTargetNamespace()
                        .equals(schema.getTargetNamespace())) {
                    continue;
                }

                if (xsdType instanceof XSDComplexTypeDefinition) {
                    logger.fine(xsdType.getName());
                    try {
                        createType((XSDComplexTypeDefinition) xsdType, 0);
                    } catch (Exception e) {
                        logger.warning("XERRORX generating " + xsdType);
                        e.printStackTrace();
                    }
                }
            }
        }

        Schema gtSchema = new SchemaImpl(schema.getTargetNamespace());

        for (AttributeType gtType : types.values()) {
            if (gtType.getName().getLocalPart() == null) {
                throw new NullPointerException();
            }
            gtSchema.put(gtType.getName(), gtType);
        }

        Object[] input = {
                gtSchema, Schemas.getTargetPrefix(schema), this
            };
        String result = execute(getSchemaClassTemplateName(), input);
        String className = Schemas.getTargetPrefix(schema).toUpperCase()
            + "Schema";

        write(result, className, sourceLocation);
    }

