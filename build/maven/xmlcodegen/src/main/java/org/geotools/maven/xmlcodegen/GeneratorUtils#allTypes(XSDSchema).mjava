	/**
	 * Returns all the types defined in <param>schema</param>, including anonymous complex
	 * types.
	 * 
	 * @param schema the schema.
	 * 
	 * @return A list of types, including anonymous complex types.
	 */
	public static List allTypes( XSDSchema schema ) {
		//get the named types
		List<XSDTypeDefinition> types = new ArrayList<>( schema.getTypeDefinitions() );
    	
		//get anonymous types
		List<XSDTypeDefinition> anonymous = new ArrayList<>();
		
		//add any anonymous types of global elements + attributes
        for (XSDElementDeclaration element : schema.getElementDeclarations()) {
            if (element.getAnonymousTypeDefinition() != null) {
                element.getAnonymousTypeDefinition().setName("_" + element.getName());
                anonymous.add(element.getAnonymousTypeDefinition());
            }
        }
        for (XSDAttributeDeclaration attribute : schema.getAttributeDeclarations()) {
            if (attribute.getAnonymousTypeDefinition() != null) {
                attribute.getAnonymousTypeDefinition().setName("_" + attribute.getName());
                anonymous.add(attribute.getAnonymousTypeDefinition());
            }
        }
    	//add any anonymous types foudn with type definitions
        for (XSDTypeDefinition type : types) {
            List particles = Schemas.getChildElementParticles(type, false);
            for (Object o : particles) {
                XSDParticle particle = (XSDParticle) o;
                XSDElementDeclaration element = (XSDElementDeclaration) particle.getContent();

                //ignore element references, caught in teh above loop
                if (element.isElementDeclarationReference())
                    continue;

                if (element.getAnonymousTypeDefinition() != null) {
                    element.getAnonymousTypeDefinition().setName(type.getName() + "_" + element.getName());
                    anonymous.add(element.getAnonymousTypeDefinition());
                }
            }
        }
    	
    	types.addAll( anonymous );
    	return types;
	}

