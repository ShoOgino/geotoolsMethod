    public void generate(XSDSchema schema)  {
        List<File> includes = new ArrayList<>();
        List<String> namespaces = new ArrayList<>();

        File file = null;
        try {
        	file = findSchemaFile( schema.getSchemaLocation() );	
        }
        catch( Exception e ) {
        	logger.log( Level.SEVERE, "", e );
        }
        
        if ( file != null ) {
        	includes.add(file);
        	namespaces.add(schema.getTargetNamespace());
        }
        else {
        	logger.log( Level.SEVERE, "Could not find: " + schema.getSchemaLocation() + " to copy." );
        }
        
        List included = Schemas.getIncludes(schema);

        for (Object o : included) {
            XSDInclude include = (XSDInclude) o;

            file = null;
            try {
                file = findSchemaFile(include.getSchemaLocation());
            } catch (Exception e) {
                logger.log(Level.SEVERE, "", e);
            }

            if (file != null) {
                includes.add(file);
                if (include.getSchema() != null) {
                    namespaces.add(include.getSchema().getTargetNamespace());
                } else {
                    namespaces.add(schema.getTargetNamespace());
                }
            } else {
                logger.log(Level.SEVERE, "Could not find: " + include.getSchemaLocation() + " to copy.");
            }

        }

        try {
//			String result = execute("SchemaLocationResolverTemplate",
//			        new Object[] { schema, includes, namespaces });
//			String prefix = Schemas.getTargetPrefix(schema).toUpperCase();
//			write(result, prefix + "SchemaLocationResolver");

			//copy over all the schemas
            for (File include : includes) {
                copy(include, resourceLocation);
            }
		}
        catch( Exception e ) {
        	logger.log( Level.SEVERE, "Error generating resolver", e );
        }
    }

