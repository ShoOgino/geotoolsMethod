    @Override
    public void execute() throws MojoExecutionException, MojoFailureException {
		
    	XSDSchema xsdSchema = schema();
    	if ( xsdSchema == null ) {
    		return;
    	}
		
		BindingGenerator generator = new BindingGenerator();
		generator.setGenerateAttributes( generateAttributeBindings );
		generator.setGenerateElements( generateElementBindings );
		generator.setGenerateTypes( generateTypeBindings );
		generator.setGenerateConfiguration( generateConfiguration );
                generator.setGenerateXsd(generateXsd);
		generator.setGenerateTests(generateTests);
		generator.setOverwriting( overwriteExistingFiles );
		//generator.setLocation( outputDirectory.getAbsolutePath() );
		generator.setSourceLocation(sourceOutputDirectory.getAbsolutePath());
		generator.setTestLocation(testOutputDirectory.getAbsolutePath());
		generator.setResourceLocation(((Resource)project.getBuild().getResources().get( 0 )).getDirectory());
		generator.setSchemaSourceDirectory(schemaSourceDirectory);
		
		try {
		    Class c = Class.forName(complexBindingBaseClass);
		    generator.setComplexBindingBaseClass(c);
		}
		catch( ClassNotFoundException e ) {
		    getLog().error("Could not load class: " + complexBindingBaseClass);
		    return;
		}
		try {
            Class c = Class.forName(simpleBindingBaseClass);
            generator.setSimpleBindingBaseClass(c);
        }
        catch( ClassNotFoundException e ) {
            getLog().error("Could not load class: " + simpleBindingBaseClass);
            return;
        }
		
		if ( schemaLookupDirectories != null ) {
		    generator.setSchemaLookupDirectories(schemaLookupDirectories);
		}
	
		if ( destinationPackage != null ) {
			generator.setPackageBase( destinationPackage );
		}
		
		//list of urls to use as class loading locations
		Set<URL> urls = new HashSet<>();
		
		try {
		    //get the ones from the project
			List l = project.getCompileClasspathElements();
            for (Object item : l) {
                String element = (String) item;
                File d = new File(element);

                if (d.exists() && d.isDirectory()) {
                    urls.add(d.toURI().toURL());
                }
            }
			
			//get the ones from project dependencies
			List d = project.getDependencies();

            for (Object value : d) {
                Dependency dep = (Dependency) value;
                if ("jar".equals(dep.getType())) {
                    Artifact artifact = artifactFactory.createArtifact(
                            dep.getGroupId(), dep.getArtifactId(), dep.getVersion(),
                            dep.getScope(), dep.getType()
                    );
                    Set artifacts = project.createArtifacts(artifactFactory, null, null);
                    ArtifactResolutionResult result =
                            artifactResolver.resolveTransitively(artifacts, artifact,
                                    remoteRepositories, localRepository, artifactMetadataSource);
                    artifacts = result.getArtifacts();
                    for (Object o : artifacts) {
                        Artifact dartifact = (Artifact) o;
                        urls.add(dartifact.getFile().toURI().toURL());
                    }

                }
            }
			
		} catch (Exception e) {
			getLog().error( e );
			return;
		}
		
		ClassLoader cl = new URLClassLoader(urls.toArray( new URL[ urls.size() ] ));
		if ( bindingConstructorArguments != null ) {
			HashMap map = new HashMap();

            for (BindingConstructorArgument bindingConstructorArgument :
                    bindingConstructorArguments) {
                String name = bindingConstructorArgument.getName();
                String type = bindingConstructorArgument.getType();

                try {
                    bindingConstructorArgument.clazz = cl.loadClass(type);
                } catch (ClassNotFoundException e) {
                    getLog().error("Could not locate class:" + type);
                    return;
                }
            }
			
			generator.setBindingConstructorArguments( bindingConstructorArguments );
		}
		
		if ( includes != null && includes.length > 0 ) {
			Set<String> included = new HashSet<>( Arrays.asList( includes ) );
			getLog().info( "Including: " + included ); 
			generator.setIncluded( included );
		}
		
		getLog().info( "Generating bindings...");
		generator.generate( xsdSchema );
	}

