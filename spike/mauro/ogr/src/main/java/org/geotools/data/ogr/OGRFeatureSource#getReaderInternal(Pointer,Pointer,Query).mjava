    protected FeatureReader<SimpleFeatureType, SimpleFeature> getReaderInternal(Pointer dataSource,
            Pointer layer, Query query) throws IOException {
        // check how much we can encode
        OGRFilterTranslator filterTx = new OGRFilterTranslator(getSchema(), query.getFilter());
        if (Filter.EXCLUDE.equals(filterTx.getFilter())) {
            return new EmptyFeatureReader<SimpleFeatureType, SimpleFeature>(getSchema());
        }

        // encode and count
        boolean cleanup = false;
        try {
            // grab the data source
            String typeName = getEntry().getTypeName();
            if (dataSource == null) {
                dataSource = getDataStore().openOGRDataSource(false);
                cleanup = true;
            }

            // extract the post filter
            Filter postFilter = null;
            if (!filterTx.isFilterFullySupported()) {
                postFilter = filterTx.getPostFilter();
            }

            // prepare the target schema
            SimpleFeatureType sourceSchema = getSchema();
            SimpleFeatureType querySchema = sourceSchema;
            SimpleFeatureType targetSchema = sourceSchema;
            String[] properties = query.getPropertyNames();
            if (properties != null && properties.length > 0) {
                targetSchema = SimpleFeatureTypeBuilder.retype(sourceSchema, properties);
                querySchema = targetSchema;
                // if we have a post filter we have to include in the queried features also the
                // attribute needed to evaluate the post-filter
                if (postFilter != null) {
                    Set<String> queriedAttributes = new HashSet<String>(Arrays.asList(properties));
                    FilterAttributeExtractor extraAttributeExtractor = new FilterAttributeExtractor();
                    postFilter.accept(extraAttributeExtractor, null);
                    Set<String> extraAttributeSet = new HashSet<String>(
                            extraAttributeExtractor.getAttributeNameSet());
                    extraAttributeSet.removeAll(queriedAttributes);
                    if (extraAttributeSet.size() > 0) {
                        String[] queryProperties = new String[properties.length
                                + extraAttributeSet.size()];
                        System.arraycopy(properties, 0, queryProperties, 0, properties.length);
                        String[] extraAttributes = (String[]) extraAttributeSet
                                .toArray(new String[extraAttributeSet.size()]);
                        System.arraycopy(extraAttributes, 0, queryProperties, properties.length,
                                extraAttributes.length);
                        querySchema = SimpleFeatureTypeBuilder
                                .retype(sourceSchema, queryProperties);
                    }
                }
            }

            // build the layer query and execute it
            if (layer == null) {
                String sql = getLayerSql(querySchema == sourceSchema ? null : querySchema,
                        filterTx.getAttributeFilter(), query.getSortBy());
                Pointer spatialFilterPtr = null;
                Geometry spatialFilter = filterTx.getSpatialFilter();
                if (spatialFilter != null) {
                    spatialFilterPtr = new GeometryMapper.WKB(new GeometryFactory())
                            .parseGTGeometry(spatialFilter);

                }
                layer = OGR_DS_ExecuteSQL(dataSource, pointerToCString(sql), spatialFilterPtr, null);
                if (layer == null) {
                    throw new IOException("Failed to query the source layer with SQL: " + sql);
                }
            } else {
                setLayerFilters(layer, filterTx);
                // would be nice, but it's not really working...
                // setIgnoredFields(layer, querySchema, sourceSchema);
            }

            // see if we have a geometry factory to use
            GeometryFactory gf = getGeometryFactory(query);

            // build the reader
            FeatureReader<SimpleFeatureType, SimpleFeature> reader = new OGRFeatureReader(
                    dataSource, layer, querySchema, sourceSchema, gf);
            cleanup = false;

            // do we have to post-filter?
            if (!filterTx.isFilterFullySupported()) {
                reader = new FilteringFeatureReader<SimpleFeatureType, SimpleFeature>(reader,
                        filterTx.getPostFilter());
                if (targetSchema != querySchema) {
                    reader = new ReTypeFeatureReader(reader, targetSchema);
                }
            }

            return reader;
        } finally {
            if (cleanup) {
                OGRUtils.releaseLayer(layer);
                OGRUtils.releaseDataSource(dataSource);
            }
        }
    }

