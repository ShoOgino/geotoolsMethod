    /**
     * Parses the Geotools filter and tries to extract an intersecting geometry that can be used as
     * the OGR spatial filter
     * 
     * @param schema
     * @param filter
     * @return
     */
    public Geometry getSpatialFilter() {
        // TODO: switch to the non deprecated splitter (that no one seems to be using)
        PostPreProcessFilterSplittingVisitor visitor = new PostPreProcessFilterSplittingVisitor(
                GEOMETRY_FILTER_CAPABILITIES, schema, null);
        filter.accept(visitor, null);
        Filter preFilter = visitor.getFilterPre();
        if (preFilter instanceof BinarySpatialOperator) {
            BinarySpatialOperator bso = ((BinarySpatialOperator) preFilter);
            Expression geomExpression = null;
            if (bso.getExpression1() instanceof PropertyName
                    && bso.getExpression2() instanceof Literal) {
                geomExpression = bso.getExpression2();
            } else if (bso.getExpression1() instanceof Literal
                    && bso.getExpression2() instanceof PropertyName) {
                geomExpression = bso.getExpression1();
            }
            if (geomExpression != null) {
                Geometry geom = geomExpression.evaluate(null, Geometry.class);
                return geom;
            }
        }
        return null;
    }

