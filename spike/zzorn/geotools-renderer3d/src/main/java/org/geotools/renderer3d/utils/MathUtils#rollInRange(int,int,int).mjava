    /**
     * Rolls the specified integer number, by adding some offset to it, and wrapping the number around to start from
     * the beginning of the range if it grew past the end of the range.
     * <p/>
     * E.g. with a rangeEnd of 10, and a start value of 7, if the rollOffset is 5, the result will be 2.
     *
     * @param originalValue the value to start from when adding the rollOffset.
     * @param rangeEnd      maximum value, non inclusive.
     * @param rollOffset    an offset added to the originalValue.  Can be any positive or negative integer.
     *
     * @return the rolled value.  Will be in the range [0, rangeEnd - 1].
     */
    public static int rollInRange( final int originalValue, final int rangeEnd, final int rollOffset )
    {
        if ( rangeEnd <= 0 )
        {
            throw new IllegalArgumentException( "The rangeEnd parameter (" + rangeEnd + ") should not be smaller than the range start (0)" );
        }

        final int rolledValue = ( originalValue + rangeEnd + ( rollOffset % rangeEnd ) ) % rangeEnd;

        assert rolledValue >= 0 && rolledValue < rangeEnd : "Rolled value out of permitted range. " + rolledValue;

        return rolledValue;
    }

