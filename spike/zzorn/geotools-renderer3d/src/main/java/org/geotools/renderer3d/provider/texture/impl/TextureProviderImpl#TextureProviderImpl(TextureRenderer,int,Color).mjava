    /**
     * @param textureRenderer the renderer to use for rendering the textures.
     */
    public TextureProviderImpl( final TextureRenderer textureRenderer, int textureSize, Color backgroundColor )
    {
        ParameterChecker.checkNotNull( textureRenderer, "textureRenderer" );
        ParameterChecker.checkPositiveNonZeroInteger( textureSize, "textureSize" );
        ParameterChecker.checkNotNull( backgroundColor, "backgroundColor" );

        myTextureSize = textureSize;
        myTextureRenderer = textureRenderer;
        myBackgroundColor = backgroundColor;

        myRenderBufer = new BufferedImage( textureSize, textureSize, BufferedImage.TYPE_4BYTE_ABGR );

        // Start a thread that handles texture painting jobs
        final Thread renderThread = new Thread( new Runnable()
        {

            public void run()
            {
                while ( true )
                {
                    final TextureJob paintJob = getNextJob();

                    clearToColor( paintJob.getBuffer(), myBackgroundColor );
                    myTextureRenderer.renderArea( paintJob.getArea(), myRenderBufer );

                    synchronized ( myTextureJobs )
                    {
                        if ( !myCurrentJobWasCanceled )
                        {
                            // Copy image from the render buffer to the final desination
                            final Graphics graphics = paintJob.getBuffer().getGraphics();
                            graphics.drawImage( myRenderBufer, 0, 0, null );

                            notifyListener( paintJob );
                        }
                        myCurrentJobWasCanceled = false;
                    }
                }
            }

        } );
        renderThread.setDaemon( true );
        renderThread.start();
    }

