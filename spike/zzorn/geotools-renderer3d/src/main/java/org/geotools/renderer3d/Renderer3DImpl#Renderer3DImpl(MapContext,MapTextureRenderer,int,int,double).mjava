    /**
     * Creates a new Renderer3D.
     *
     * @param mapContextToRender      the map context that is used to get the layers to render in the 3D view.
     * @param textureRenderer         the renderer that renders chunks of the ground texture on request.
     * @param terrainBlockSizeInGrids number of grid cells along the side of a TerrainBlock.
     * @param textureSize             the size to use for the texture for each terrain block, per side, in pixels.
     * @param visibilityDistance_m    distance that there should be terrain visible in each direction from the camera,
     *                                in display units (TODO: CHECK: meters?).
     */
    public Renderer3DImpl( final MapContext mapContextToRender,
                           final MapTextureRenderer textureRenderer,
                           final int terrainBlockSizeInGrids,
                           final int textureSize, final double visibilityDistance_m )
    {
        ParameterChecker.checkNotNull( mapContextToRender, "mapContextToRender" );
        ParameterChecker.checkPositiveNonZeroInteger( terrainBlockSizeInGrids, "terrainBlockSizeInGrids" );
        ParameterChecker.checkPositiveNonZeroInteger( textureSize, "textureSize" );
        ParameterChecker.checkPositiveNonZeroNormalNumber( visibilityDistance_m, "visibilityDistance_m" );

        myTextureSize = textureSize;
        myVisibilityDistance = visibilityDistance_m;

        myCanvas3D.setViewDistance( (float) myVisibilityDistance );

        final TextureProvider mapTextureProvider = new TextureProviderImpl( textureRenderer,
                                                                            textureSize,
                                                                            Color.WHITE );

/*
        // DEBUG
        final TextureProvider mapTextureProvider = new TextureProviderImpl( new DummyTextureRenderer(),
                                                                            textureSize,
                                                                            Color.GRAY );
*/

        myTerrainBlockFactory = new TerrainBlockFactory( terrainBlockSizeInGrids,
                                                         mapTextureProvider,
                                                         myTextureSize );

        setMapContext( mapContextToRender );

        myQuadTree.addQuadTreeListener( new QuadTreeListener<TerrainBlock>()
        {

            public void onRootChanged( final QuadTreeNode<TerrainBlock> newRoot )
            {
                if ( myTerrainNode != null )
                {
                    update3DModel();
                }
            }

        } );

        // Filter out internal trace info and debug data from JME (for some reason they use INFO level for that)
        LoggingSystem.getLoggingSystem().setLevel( Level.WARNING );

        initExpansionAndCollapsionHandler();
    }

