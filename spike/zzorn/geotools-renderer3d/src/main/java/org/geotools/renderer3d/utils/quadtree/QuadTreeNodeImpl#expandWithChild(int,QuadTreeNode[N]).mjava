    public void expandWithChild( final int childSubquadrant, final QuadTreeNode<N> childNode )
    {
        checkNodeIsAttached();

        if ( !myExpanded )
        {
            myExpanded = true;

            // Create the child array if needed
            if ( myChildren == null )
            {
                //noinspection unchecked
                myChildren = new QuadTreeNode[NUMBER_OF_SUBNODES];
            }

            // Create child nodes
            for ( int i = 0; i < NUMBER_OF_SUBNODES; i++ )
            {
                if ( myChildren[ i ] != null )
                {
                    throw new IllegalStateException( "A newly expanded node should not have any children" );
                }

                if ( i == childSubquadrant )
                {
                    myChildren[ i ] = childNode;
                }
                else
                {
                    final BoundingRectangle rectangle = myBoundingRectangle.createSubquadrantBoundingRectangle( i );
                    myChildren[ i ] = myQuadTree.createQuadTreeNode( rectangle, this );
                }
            }

            // Init node data for the other children
            for ( int i = 0; i < myChildren.length; i++ )
            {
                if ( i != childSubquadrant )
                {
                    myQuadTree.initnodedata( myChildren[ i ] );
                }
            }

            for ( NodeListener<N> nodeListener : myNodeListeners )
            {
                nodeListener.onExpanded( this );
            }
        }
    }

