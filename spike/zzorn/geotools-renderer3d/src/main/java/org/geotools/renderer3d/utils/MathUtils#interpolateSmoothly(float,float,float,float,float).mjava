    /**
     * Calculates a smoothly (cosine) interpolated value, given a start value, an end value,
     * and the position to get the value at.
     *
     * @param position
     * @param startPosition
     * @param endPosition
     * @param startValue
     * @param endValue
     */
    public static float interpolateSmoothly( final float position,
                                             final float startPosition,
                                             final float endPosition,
                                             final float startValue,
                                             final float endValue )
    {
        final float relativePosition = ( position - startPosition ) / ( endPosition - startPosition );

        // Clamp values at edges
        float result;
        if ( relativePosition <= 0 )
        {
            result = startValue;
        }
        else if ( relativePosition >= 1 )
        {
            result = endValue;
        }
        else
        {
            // Cosine interpolation
            final double relativeSmoothPosition = ( 1.0 - Math.cos( relativePosition * Math.PI ) ) / 2.0;
            result = (float) ( startValue * ( 1.0 - relativeSmoothPosition ) + endValue * relativeSmoothPosition );
        }

        return result;
    }

