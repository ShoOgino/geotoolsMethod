        /**
         * Creates a new renderer that renders the specified spatial in a 3D canvas.
         *
         * @param width          initial size of the canvas.  Should be larger than 0.
         * @param height         initial size of the canvas.  Should be larger than 0.
         * @param canvasRootNode the 3D object to render.
         *                       May be null, in which case nothing is rendered (black area)
         * @param canvas         the canvas we are rendering to.  Needed for listening to resize events.
         */
        public MyCanvasRenderer( final int width,
                                 final int height,
                                 final Spatial canvasRootNode,
                                 final Canvas canvas )
        {
            super( width, height );

            ParameterChecker.checkPositiveNonZeroInteger( width, "width" );
            ParameterChecker.checkPositiveNonZeroInteger( height, "height" );
            ParameterChecker.checkNotNull( canvas, "canvas" );

            myCanvasRootNode = canvasRootNode;
            myCanvas = canvas;

            // When the component is resized, adjust the size of the 3D viewport too.
            myCanvas.addComponentListener( new ComponentAdapter()
            {

                public void componentResized( ComponentEvent ce )
                {
                    resizeCanvas( myCanvas.getWidth(), myCanvas.getHeight() );
                    myAspectRatioNeedsCorrecting = true;
                }

            } );
        }

