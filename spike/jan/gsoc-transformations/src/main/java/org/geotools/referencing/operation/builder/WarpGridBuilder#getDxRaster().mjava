	/**
	 * Recalculates Deltas to Warp Positions (target position of each grid cell)
	 * 
	 * @param xStart
	 * @param xStep
	 * @param xNumCells
	 * @param yStart
	 * @param yStep
	 * @param yNumCells
	 * @param yDeltas
	 * @param xDeltas
	 * @return
	 */
	/*
	 * public static float[] deltasToWarpPos(int xStart, int xStep, int
	 * xNumCells, int yStart, int yStep, int yNumCells, float[][] yDeltas,
	 * float[][] xDeltas) { float[] warpPos = new float[(xNumCells + 1) *
	 * (yNumCells + 1) * 2];
	 * 
	 * for (int i = 0; i < yNumCells; i++) { for (int j = 0; j < xNumCells; j++) {
	 * warpPos[(2 * j) + (xNumCells * i * 2)] = xStart + (j * xStep) +
	 * xDeltas[i][j]; warpPos[(2 * j) + (xNumCells * i * 2) + 1] = yStart + (i *
	 * yStep) + yDeltas[i][j]; } }
	 * 
	 * return warpPos; }
	 */

	public WritableRaster getDxRaster() throws FactoryException {
		float[][] values;
		values = getDxGrid();
		WritableRaster raster = RasterFactory.createBandedRaster(
				DataBuffer.TYPE_FLOAT, values[0].length, values.length, 1,
				new Point(0, 0));
		for (int i = 0; i < values.length; i++) {
			for (int j = 0; j < values[0].length; j++) {

				raster.setSample(j, i, 0, values[i][j]);

			}
		}

		return raster;
	}

