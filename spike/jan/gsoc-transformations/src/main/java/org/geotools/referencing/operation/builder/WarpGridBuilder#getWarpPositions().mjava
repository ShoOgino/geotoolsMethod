	/**
	 * Returns array of warp grid positions. The array contains target positions
	 * to original grid. The cells are enumerated in row-major order, that is,
	 * all the grid points along a row are enumerated first, then the grid
	 * points for the next row are enumerated, and so on. As an example, suppose
	 * xNumCells is equal to 2 and yNumCells is equal 1. Then the order of the
	 * data in table would be: x00, y00, x10, y10, x20, y20, x01, y01, x11, y11,
	 * x21, y21
	 * 
	 * @see <A
	 *      HREF="http://java.sun.com/products/java-media/jai/forDevelopers/jai-apidocs/javax/media/jai/WarpGrid.html">warpPositions
	 *      at WarpGrid constructor at JAI </A>
	 * @return warp positions
	 * 
	 */
	private float[] getWarpPositions() throws FactoryException {
		if (warpPositions == null) {
			try {
				warpPositions = computeWarpGrid(gridParameters);
			} catch (TransformException e) {
				throw new FactoryException(Errors
						.format(ErrorKeys.CANT_TRANSFORM_VALID_POINTS), e);
			}

			return warpPositions;
		} else {
			return warpPositions;
		}
	}

