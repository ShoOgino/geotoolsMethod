	/**
	 * Returns array of Shifts. This method is useful to create Coverage2D
	 * object.
	 * 
	 * @return array of Shifts
	 */
	public float[][] getDyGrid() throws FactoryException {
		if ((dygrid == null) || (dygrid.length == 0)) {
			/*
			 * ParameterValueGroup WarpParams =
			 * gridParameters.getWarpGridParameters(); final int xNumCells =
			 * WarpParams.parameter("xNumCells").intValue(); final int yNumCells =
			 * WarpParams.parameter("yNumCells").intValue(); final int xStep =
			 * WarpParams.parameter("xStep").intValue(); final int yStep =
			 * WarpParams.parameter("yStep").intValue(); final int xStart =
			 * WarpParams.parameter("xStart").intValue(); final int yStart =
			 * WarpParams.parameter("yStart").intValue();
			 */
			final int xNumCells = gridParameters.getXNumber();// WarpParams.parameter("xNumCells").intValue();
			final int yNumCells = gridParameters.getYNumber();// WarpParams.parameter("yNumCells").intValue();
			final double xStep = gridParameters.getXStep();// WarpParams.parameter("xStep").intValue();
			final double yStep = gridParameters.getYStep();// WarpParams.parameter("yStep").intValue();
			final double xStart = gridParameters.getXStart();// WarpParams.parameter("xStart").intValue();
			final double yStart = gridParameters.getYStart();// WarpParams.parameter("yStart").intValue();

			final float[] warpPositions;

			warpPositions = getWarpPositions();

			dygrid = new float[yNumCells + 1][xNumCells + 1];

			for (int i = 0; i <= yNumCells; i++) {
				for (int j = 0; j <= xNumCells; j++) {
					dygrid[yNumCells - i][j] = new Double(
							warpPositions[(int) ((i * (1 + xNumCells) * 2)
									+ (2 * j) + 1)]
									- (i * yStep) - yStart).floatValue();
				}
			}
		}

		return dygrid;
	}

