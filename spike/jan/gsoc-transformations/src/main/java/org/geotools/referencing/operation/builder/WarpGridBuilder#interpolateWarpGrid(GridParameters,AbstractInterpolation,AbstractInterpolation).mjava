	/**
	 * Convenience method for generating the grid by interpolation. This method
	 * should be called from implementation of computeWarpGrid.
	 * 
	 * @param WarpParams
	 * @param dxInterp
	 * @param dyInterp
	 * @return
	 * @throws TransformException
	 */
	protected float[] interpolateWarpGrid(GridParameters gridParams,
			AbstractInterpolation dxInterp, AbstractInterpolation dyInterp)
			throws TransformException {
		float[] warpPositions = (float[]) gridParams.getWarpPositions();// .parameter("warpPositions").getValue();

		for (int i = 0; i <= gridParams.getYNumber(); i++) {
			for (int j = 0; j <= gridParams.getXNumber(); j++) {
				DirectPosition2D dp = new DirectPosition2D(gridParams
						.getXStart()
						+ (j * gridParams.getXStep()), gridParams.getYStart()
						+ (i * gridParams.getYStep()));

				double x = -dxInterp.getValue(dp) + (j * gridParams.getXStep())
						+ gridParams.getXStart();
				double y = -dyInterp.getValue(dp) + (i * gridParams.getYStep())
						+ gridParams.getYStart();

				warpPositions[(i * ((1 + gridParams.getXNumber()) * 2))
						+ (2 * j)] = (float) x;

				warpPositions[(i * ((1 + gridParams.getXNumber()) * 2))
						+ (2 * j) + 1] = (float) y;
			}
		}

		return warpPositions;
	}

