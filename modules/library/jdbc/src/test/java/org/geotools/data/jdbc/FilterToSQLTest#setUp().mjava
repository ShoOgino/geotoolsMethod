    public void setUp() throws Exception {
        Level debugLevel = Level.FINE;
        Locale.setDefault(new Locale("en", "US"));
        Logger log = LOGGER;
        while (log != null) {
            log.setLevel(debugLevel);
            for (int i = 0; i < log.getHandlers().length; i++) {
                Handler h = log.getHandlers()[i];
                h.setLevel(debugLevel);
            }
            log = log.getParent();
        }

        SimpleFeatureTypeBuilder ftb = new SimpleFeatureTypeBuilder();
        ftb.setName("testFeatureType");
        ftb.add("testAttr", Integer.class);
        integerFType = ftb.buildFeatureType();

        ftb = new SimpleFeatureTypeBuilder();
        ftb.setName("testFeatureType");
        ftb.add("testAttr", java.sql.Date.class);
        sqlDateFType = ftb.buildFeatureType();

        ftb = new SimpleFeatureTypeBuilder();
        ftb.setName("testFeatureType");
        ftb.add("testAttr", java.sql.Timestamp.class);
        timestampFType = ftb.buildFeatureType();

        ftb = new SimpleFeatureTypeBuilder();
        ftb.setName("testFeatureType");
        ftb.add("testAttr", Date.class);
        dateFType = ftb.buildFeatureType();

        ftb.setName("testFeatureType");
        ftb.add("testAttr", String.class);
        stringFType = ftb.buildFeatureType();

        output = new StringWriter();
        encoder = new FilterToSQL(output);
        encoder.setPrimaryKey(
                new PrimaryKey(
                        "foobar",
                        Collections.singletonList(
                                new NonIncrementingPrimaryKeyColumn("id", String.class))));
    }

