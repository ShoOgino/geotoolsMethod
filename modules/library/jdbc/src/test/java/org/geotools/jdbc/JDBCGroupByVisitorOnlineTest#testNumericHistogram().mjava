    public void testNumericHistogram() throws Exception {
        // buckets with a size of 100, the function returns an integer from 0 onwards, which
        // is a zero based bucket number in the bucket sequence 
        FilterFactory ff = dataStore.getFilterFactory();
        PropertyName pn = ff.property(aname("energy_consumption"));
        Expression expression = ff.function("floor", ff.divide(pn, ff.literal(100)));

        boolean expectOptimized = dataStore.getFilterCapabilities().supports(FilterFunction_floor.class);
        List<Object[]> value  = genericGroupByTestTest(Query.ALL, Aggregate.COUNT, expectOptimized, expression);
        assertNotNull(value);

        assertEquals(value.size(), 3);
        checkValueContains(value, "0", "10");
        checkValueContains(value, "1", "1");
        checkValueContains(value, "5", "1");
    }

