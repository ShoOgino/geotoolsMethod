    /** Integration test checking that a CQL IN filter goes back being a IN in SQL */
    public void testSimpleEncodeIn() throws Exception {
        FilterFactory ff = dataStore.getFilterFactory();
        String property = aname("stringProperty");
        PropertyName p = ff.property(property);
        Or orFilter =
                ff.or(
                        Arrays.asList(
                                ff.equal(p, ff.literal("zero"), true),
                                ff.equal(p, ff.literal("one"), true),
                                ff.equal(p, ff.literal("two"), true)));
        Filter[] filters = featureSource.getFeatureSource().splitFilter(orFilter);
        // nothing to be post-filtered
        assertEquals(filters[1], Filter.INCLUDE);
        SQLDialect dialect = featureSource.getDataStore().getSQLDialect();
        if (dialect instanceof BasicSQLDialect) {
            FilterToSQL filterToSQL = ((BasicSQLDialect) dialect).createFilterToSQL();
            String sql = filterToSQL.encodeToString(filters[0]);
            String escapedProperty = filterToSQL.escapeName(property);
            assertEquals(
                    "WHERE ("
                            + escapedProperty
                            + " IN ('zero', 'one', 'two') AND "
                            + escapedProperty
                            + " IS NOT NULL )",
                    sql);
        } else if (dialect instanceof PreparedStatementSQLDialect) {
            PreparedFilterToSQL filterToSQL =
                    ((PreparedStatementSQLDialect) dialect).createPreparedFilterToSQL();
            filterToSQL.setFeatureType(featureSource.getSchema());
            String sql = filterToSQL.encodeToString(filters[0]);
            String escapedProperty = filterToSQL.escapeName(property);
            assertEquals(
                    "WHERE ("
                            + escapedProperty
                            + " IN (?, ?, ?) AND "
                            + escapedProperty
                            + " IS NOT NULL )",
                    sql);
            List<Object> literals = filterToSQL.getLiteralValues();
            assertEquals(Arrays.asList("zero", "one", "two"), literals);
        } else {
            fail("Unexpected dialect type: " + dialect);
        }
    }

