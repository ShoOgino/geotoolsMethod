    public final JDBCDataStore createDataStore(Map params)
        throws IOException {
        JDBCDataStore dataStore = new JDBCDataStore();
        
        // dialect
        final SQLDialect dialect = createSQLDialect(dataStore);
        dataStore.setSQLDialect(dialect);

        // datasource 
        // check if the DATASOURCE parameter was supplied, it takes precendence
        DataSource ds = (DataSource) DATASOURCE.lookUp( params );
        if ( ds != null ) {
            dataStore.setDataSource(ds);
        }
        else {
            dataStore.setDataSource(createDataSource(params, dialect));
        }
        
        // fetch size
        Integer fetchSize = (Integer) FETCHSIZE.lookUp(params);
        if(fetchSize != null && fetchSize > 0)
            dataStore.setFetchSize(fetchSize);

        // namespace
        String namespace = (String) NAMESPACE.lookUp(params);

        if (namespace != null) {
            dataStore.setNamespaceURI(namespace);
        }

        //database schema
        String schema = (String) SCHEMA.lookUp(params);

        if (schema != null) {
            dataStore.setDatabaseSchema(schema);
        }
        
        // primary key finder lookup table location, if any
        String metadataTable = (String) PK_METADATA_TABLE.lookUp(params);
        if(metadataTable != null)  {
            MetadataTablePrimaryKeyFinder tableFinder = new MetadataTablePrimaryKeyFinder();
            if(metadataTable.contains(".")) {
                String[] parts = metadataTable.split("\\.");
                if(parts.length > 2) 
                    throw new IllegalArgumentException("The primary key metadata table format " +
                    		"is either 'name' or 'schema.name'");
                tableFinder.setTableSchema(parts[0]);
                tableFinder.setTableName(parts[1]);
            } else {
                tableFinder.setTableSchema(metadataTable);
            }
            dataStore.setPrimaryKeyFinder(new CompositePrimaryKeyFinder(tableFinder, 
                    new HeuristicPrimaryKeyFinder()));
        }
        
        // expose primary keys
        Boolean exposePk = (Boolean) EXPOSE_PK.lookUp(params);
        if(exposePk != null) {
            dataStore.setExposePrimaryKeyColumns(exposePk);
        }
        
        // session startup and teardown
        String sqlOnBorrow = (String) SQL_ON_BORROW.lookUp(params);
        String sqlOnRelease = (String) SQL_ON_RELEASE.lookUp(params);
        if(sqlOnBorrow != null || sqlOnRelease != null) {
            SessionCommandsListener listener = new SessionCommandsListener(sqlOnBorrow, sqlOnRelease);
            dataStore.getConnectionLifecycleListeners().add(listener);
        }
        
        // factories
        dataStore.setFilterFactory(CommonFactoryFinder.getFilterFactory(null));
        dataStore.setGeometryFactory(new GeometryFactory());
        dataStore.setFeatureTypeFactory(new FeatureTypeFactoryImpl());
        dataStore.setFeatureFactory(CommonFactoryFinder.getFeatureFactory(null));
        dataStore.setDataStoreFactory(this);
        
        //call subclass hook and return
        return createDataStoreInternal(dataStore, params);
    }

