	/**
	 * Gets a connection for the provided transaction.
	 *
	 * @param transaction
	 * @return A single use connection.
	 *
	 * @throws IOException
	 * @throws DataSourceException
	 *             If the connection can not be obtained.
	 */
     public Connection getConnection(Transaction transaction)
            throws IOException {
        if (transaction != Transaction.AUTO_COMMIT) {
            // we will need to save a JDBC connection is
            // transaction.putState( connectionPool, JDBCState )
            // throw new UnsupportedOperationException("Transactions not
            // supported yet");
            
            JDBCTransactionState state;
            synchronized (transaction) {
                
                state = (JDBCTransactionState) transaction
    					.getState(this);
                
                if (state == null) {
                    try {
                        Connection conn = createConnection();
                        conn.setAutoCommit(requireAutoCommit());
                        if (getTransactionIsolation() != Connection.TRANSACTION_NONE) {
                            // for us, NONE means use the default, which is
                            // usually READ_COMMITTED
                            conn.setTransactionIsolation(getTransactionIsolation());
                        }
                        state = new JDBCTransactionState(conn);
                        transaction.putState(this, state);
                    } catch (SQLException eep) {
                        throw new DataSourceException("Connection failed:"
                                + eep, eep);
                    }
                }
            }
            return state.getConnection();
        }

        try {
            return createConnection();
        } catch (SQLException sqle) {
            throw new DataSourceException("Connection failed:" + sqle, sqle);
        }
    }

