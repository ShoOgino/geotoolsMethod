    /**
     * Combines two filters, which may be null, into one.  If one is null and
     * the other not, it returns the one that's not.  If both are null returns
     * null.
     *
     * @param filter1 one filter to be combined.
     * @param filter2 the other filter to be combined.
     * @param splitType the short representation of the logic filter to
     *        recursively unpack.
     *
     * @return the resulting combined filter.
     */
    private Filter combineFilters(Filter filter1, Filter filter2,
        short splitType) {
        Filter retFilter;

        if (filter1 != null) {
            if (filter2 != null) {
                if (splitType == AbstractFilter.LOGIC_AND) {
                    retFilter = Filters.and( ff, filter1, filter2 );
                } else { //OR and AND only split types, this must be or.
                    retFilter = Filters.or( ff, filter1, filter2 );
                }
            } else {
                retFilter = filter1;
            }
        } else {
            if (filter2 != null) {
                retFilter = filter2;
            } else {
                retFilter = null;
            }
        }

        return retFilter;
    }

