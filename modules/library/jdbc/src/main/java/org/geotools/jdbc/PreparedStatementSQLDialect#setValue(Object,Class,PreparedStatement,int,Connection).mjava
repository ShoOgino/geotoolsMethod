    /**
     * Sets a value in a prepared statement, for "basic types" (non-geometry).
     *
     * <p>Subclasses should override this method if they need to do something custom or they wish to
     * support non-standard types.
     *
     * @param value the value.
     * @param binding The class of the value.
     * @param ps The prepared statement.
     * @param column The column the value maps to.
     * @param cx The database connection.
     */
    public void setValue(
            Object value, Class binding, PreparedStatement ps, int column, Connection cx)
            throws SQLException {

        // get the sql type
        Integer sqlType = dataStore.getMapping(binding);

        // handle null case
        if (value == null) {
            ps.setNull(column, sqlType);
            return;
        }

        switch (sqlType) {
            case Types.VARCHAR:
                ps.setString(column, convert(value, String.class));
                break;
            case Types.BOOLEAN:
                ps.setBoolean(column, convert(value, Boolean.class));
                break;
            case Types.SMALLINT:
                ps.setShort(column, convert(value, Short.class));
                break;
            case Types.INTEGER:
                ps.setInt(column, convert(value, Integer.class));
                break;
            case Types.BIGINT:
                ps.setLong(column, convert(value, Long.class));
                break;
            case Types.REAL:
                ps.setFloat(column, convert(value, Float.class));
                break;
            case Types.DOUBLE:
                ps.setDouble(column, convert(value, Double.class));
                break;
            case Types.NUMERIC:
                ps.setBigDecimal(column, (BigDecimal) convert(value, BigDecimal.class));
                break;
            case Types.DATE:
                ps.setDate(column, convert(value, Date.class));
                break;
            case Types.TIME:
                ps.setTime(column, convert(value, Time.class));
                break;
            case Types.TIMESTAMP:
                ps.setTimestamp(column, convert(value, Timestamp.class));
                break;
            case Types.BLOB:
                ps.setBytes(column, convert(value, byte[].class));
                break;
            case Types.CLOB:
                String string = convert(value, String.class);
                ps.setCharacterStream(column, new StringReader(string), string.length());
                break;
            default:
                ps.setObject(column, value, Types.OTHER);
        }
    }

