    /**
     * Common implementation for BinaryComparisonOperator filters.  This way
     * they're all handled centrally.
     *
     *  DJB: note, postgis overwrites this implementation because of the way
     *       null is handled.  This is for <PropertyIsNull> filters and <PropertyIsEqual> filters
     *       are handled.  They will come here with "property = null".
     *       NOTE:
     *        SELECT * FROM <table> WHERE <column> isnull;  -- postgresql
     *        SELECT * FROM <table> WHERE isnull(<column>); -- oracle???
     *
     * @param filter the comparison to be turned into SQL.
     *
     * @throws RuntimeException for io exception with writer
     */
    protected void visitBinaryComparisonOperator(BinaryComparisonOperator filter, Object extraData)
            throws RuntimeException {
        LOGGER.finer("exporting SQL ComparisonFilter");

        Expression left = filter.getExpression1();
        Expression right = filter.getExpression2();

        // shortcut for IN case, to have a more natural encoding for the common/sane case of
        // "in(property, v1, v2, ... vn) = true" into "property in (v1, v2, ..., vn)
        if (inEncodingEnabled && ("=".equals(extraData) || "!=".equals(extraData))) {
            if (right instanceof Literal
                    && InFunction.isInFunction(left)
                    && right.evaluate(null, Boolean.class) != null) {
                encodeInComparison((Function) left, (Literal) right, extraData);
                return;
            } else if (left instanceof Literal
                    && InFunction.isInFunction(right)
                    && left.evaluate(null, Boolean.class) != null) {
                encodeInComparison((Function) right, (Literal) left, extraData);
                return;
            }
        }

        Class rightContext = getExpressionType(left);
        Class leftContext = getExpressionType(right);

        encodeBinaryComparisonOperator(filter, extraData, left, right, leftContext, rightContext);
    }

