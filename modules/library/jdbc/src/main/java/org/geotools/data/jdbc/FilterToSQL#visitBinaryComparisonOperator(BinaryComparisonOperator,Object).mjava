    /**
     * Common implementation for BinaryComparisonOperator filters.  This way
     * they're all handled centrally.
     *
     *  DJB: note, postgis overwrites this implementation because of the way
     *       null is handled.  This is for <PropertyIsNull> filters and <PropertyIsEqual> filters
     *       are handled.  They will come here with "property = null".
     *       NOTE:
     *        SELECT * FROM <table> WHERE <column> isnull;  -- postgresql
     *        SELECT * FROM <table> WHERE isnull(<column>); -- oracle???
     *
     * @param filter the comparison to be turned into SQL.
     *
     * @throws RuntimeException for io exception with writer
     */
    protected void visitBinaryComparisonOperator(BinaryComparisonOperator filter, Object extraData)
            throws RuntimeException {
        LOGGER.finer("exporting SQL ComparisonFilter");

        Expression left = filter.getExpression1();
        Expression right = filter.getExpression2();

        // shortcut for IN case, to have a more natural encoding for the common/sane case of
        // "in(property, v1, v2, ... vn) = true" into "property in (v1, v2, ..., vn)
        if (inEncodingEnabled && ("=".equals(extraData) || "!=".equals(extraData))) {
            if (right instanceof Literal
                    && InFunction.isInFunction(left)
                    && right.evaluate(null, Boolean.class) != null) {
                encodeInComparison((Function) left, (Literal) right, extraData);
                return;
            } else if (left instanceof Literal
                    && InFunction.isInFunction(right)
                    && left.evaluate(null, Boolean.class) != null) {
                encodeInComparison((Function) right, (Literal) left, extraData);
                return;
            }
        }

        Class rightContext = getExpressionType(left);
        Class leftContext = getExpressionType(right);

        // case sensitivity
        boolean matchCase = true;
        if (!filter.isMatchingCase()) {
            // we only do for = and !=
            if (filter instanceof PropertyIsEqualTo || filter instanceof PropertyIsNotEqualTo) {
                // and only for strings
                if (String.class.equals(leftContext) || String.class.equals(rightContext)) {
                    matchCase = false;
                }
            }
        }

        String type = (String) extraData;

        try {
            // for comparisons with enumerated types, back-map the values to numbers, to allow
            // database index usage
            if (isEnumerated(right) || isEnumerated(left)) {
                encodeEnumeratedComparison(right, left, type, matchCase);
                return;
            }

            if (matchCase) {
                writeBinaryExpressionMember(left, leftContext);
                out.write(" " + type + " ");
                writeBinaryExpressionMember(right, rightContext);
            } else {
                // wrap both sides in "lower"
                FunctionImpl f =
                        new FunctionImpl() {
                            {
                                functionName =
                                        new FunctionNameImpl(
                                                "lower",
                                                parameter("lowercase", String.class),
                                                parameter("string", String.class));
                            }
                        };
                f.setName("lower");

                f.setParameters(Arrays.asList(left));
                f.accept(this, Arrays.asList(leftContext));

                out.write(" " + type + " ");

                f.setParameters(Arrays.asList(right));
                f.accept(this, Arrays.asList(rightContext));
            }

        } catch (java.io.IOException ioe) {
            throw new RuntimeException(IO_ERROR, ioe);
        }
    }

