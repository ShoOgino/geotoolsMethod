    /**
     * Performs the class "create [unique] indexName on tableName(att1, att2, ..., attN)" call.
     * 
     * Subclasses can override to handle special indexes (like spatial ones) and/or the hints
     * 
     * @param schema
     * @param index
     * @throws SQLException
     */
    public void createIndex(Connection cx, SimpleFeatureType schema, String databaseSchema,
            Index index) throws SQLException {
        StringBuffer sql = new StringBuffer();
        String escape = getNameEscape();
        sql.append("CREATE ");
        if (index.isUnique()) {
            sql.append("UNIQUE ");
        }
        sql.append("INDEX ");
        if (databaseSchema != null) {
            encodeSchemaName(databaseSchema, sql);
            sql.append(".");
        }        
        sql.append(escape).append(index.getIndexName()).append(escape);
        sql.append(" ON ");
        if (databaseSchema != null) {
            encodeSchemaName(databaseSchema, sql);
            sql.append(".");
        }
        sql.append(escape).append(index.getTypeName()).append(escape).append("(");
        for (String attribute : index.getAttributes()) {
            sql.append(escape).append(attribute).append(escape).append(", ");
        }
        sql.setLength(sql.length() - 2);
        sql.append(")");

        Statement st = null;
        try {
            st = cx.createStatement();
            st.execute(sql.toString());
            if(!cx.getAutoCommit()) {
                cx.commit();
            }
        } finally {
            dataStore.closeSafe(cx);
        }
    }

