    protected FeatureWriter<SimpleFeatureType, SimpleFeature> getWriterInternal(
            Query query, int flags) throws IOException {

        if (flags == 0) {
            throw new IllegalArgumentException("no write flags set");
        }

        // get connection from current state
        Connection cx = getDataStore().getConnection(getState());

        Filter postFilter;
        // check for update only case
        FeatureWriter<SimpleFeatureType, SimpleFeature> writer;
        try {
            // check for insert only
            if ((flags | WRITER_ADD) == WRITER_ADD) {
                Query queryNone = new Query(query);
                queryNone.setFilter(Filter.EXCLUDE);
                if (getDataStore().getSQLDialect() instanceof PreparedStatementSQLDialect) {
                    PreparedStatement ps = getDataStore().selectSQLPS(getSchema(), queryNone, cx);
                    return new JDBCInsertFeatureWriter(ps, cx, delegate, query);
                } else {
                    // build up a statement for the content, inserting only so we dont want
                    // the query to return any data ==> Filter.EXCLUDE
                    String sql = getDataStore().selectSQL(getSchema(), queryNone);
                    getDataStore().getLogger().fine(sql);

                    return new JDBCInsertFeatureWriter(sql, cx, delegate, query);
                }
            }

            // split the filter
            Filter[] split = delegate.splitFilter(query.getFilter());
            Filter preFilter = split[0];
            postFilter = split[1];

            // build up a statement for the content
            Query preQuery = new Query(query);
            preQuery.setFilter(preFilter);
            if (getDataStore().getSQLDialect() instanceof PreparedStatementSQLDialect) {
                PreparedStatement ps = getDataStore().selectSQLPS(getSchema(), preQuery, cx);
                if ((flags | WRITER_UPDATE) == WRITER_UPDATE) {
                    writer = new JDBCUpdateFeatureWriter(ps, cx, delegate, query);
                } else {
                    // update insert case
                    writer =
                            new JDBCUpdateInsertFeatureWriter(
                                    ps, cx, delegate, query.getPropertyNames(), query);
                }
            } else {
                String sql = getDataStore().selectSQL(getSchema(), preQuery);
                getDataStore().getLogger().fine(sql);

                if ((flags | WRITER_UPDATE) == WRITER_UPDATE) {
                    writer = new JDBCUpdateFeatureWriter(sql, cx, delegate, query);
                } else {
                    // update insert case
                    writer = new JDBCUpdateInsertFeatureWriter(sql, cx, delegate, query);
                }
            }
        } catch (Throwable e) { // NOSONAR
            // close the connection
            getDataStore().closeSafe(cx);
            // safely rethrow
            if (e instanceof Error) {
                throw (Error) e;
            } else {
                throw (IOException) new IOException().initCause(e);
            }
        }

        // check for post filter and wrap accordingly
        if (postFilter != null && postFilter != Filter.INCLUDE) {
            writer = new FilteringFeatureWriter(writer, postFilter);
        }
        return writer;
    }

