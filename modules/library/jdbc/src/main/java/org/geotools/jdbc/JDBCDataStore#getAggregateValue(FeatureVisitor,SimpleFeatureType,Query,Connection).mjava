    /**
     * Results the value of an aggregate function over a query.
     * @return generated result, or null if unsupported
     */
    protected Object getAggregateValue(FeatureVisitor visitor, SimpleFeatureType featureType, Query query, Connection cx ) 
        throws IOException {
        
        // get the name of the function
        String function = getAggregateFunctions().get( visitor.getClass() );
        if ( function == null ) {
            //try walking up the hierarchy
            Class clazz = visitor.getClass();
            while( clazz != null && function == null ) {
                clazz = clazz.getSuperclass();
                function = getAggregateFunctions().get( clazz );
            }
            
            if ( function == null ) {
                //not supported
                LOGGER.info( "Unable to find aggregate function matching visitor: " + visitor.getClass());
                return null;
            }
        }
        
        AttributeDescriptor att = null;
        Expression expression = getExpression(visitor);
        if (expression != null) {
            att = (AttributeDescriptor) expression.evaluate( featureType );
        }
        if(att == null && !(visitor instanceof CountVisitor)){
            return null; // aggregate function optimization only supported for PropertyName expression
        }
        // if the visitor is limiting the result to a given start - max, we will
        // try to apply limits to the aggregate query
        LimitingVisitor limitingVisitor = null;
        if(visitor instanceof LimitingVisitor) {
            limitingVisitor = (LimitingVisitor) visitor;
        }
        //result of the function
        try {
            Object result = null;
            List results = new ArrayList();
            Statement st = null;
            ResultSet rs = null;
            
            try {
                if ( dialect instanceof PreparedStatementSQLDialect ) {
                    st = selectAggregateSQLPS(function, att, featureType, query, limitingVisitor,  cx);
                    rs = ((PreparedStatement)st).executeQuery();
                } 
                else {
                    String sql = selectAggregateSQL(function, att, featureType, query, limitingVisitor);
                    LOGGER.fine( sql );
                    
                    st = cx.createStatement();
                    st.setFetchSize(fetchSize);
                    rs = st.executeQuery( sql );
                }
             
                while(rs.next()) {
                    Object value = rs.getObject(1);
                    result = value;
                    results.add(value);
                }
            } finally {
                closeSafe( rs );
                closeSafe( st );
            }
            
            if ( setResult(visitor, results.size() > 1 ? results : result) ){
                return result;    
            }
            
            return null;
        }
        catch( SQLException e ) {
            throw (IOException) new IOException().initCause(e);
        }
    }

