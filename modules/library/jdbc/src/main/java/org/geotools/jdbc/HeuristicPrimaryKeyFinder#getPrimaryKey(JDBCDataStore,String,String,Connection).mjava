    @Override
    public PrimaryKey getPrimaryKey(
            JDBCDataStore store, String databaseSchema, String tableName, Connection cx)
            throws SQLException {
        DatabaseMetaData metaData = cx.getMetaData();
        LOGGER.log(Level.FINE, "Getting information about primary keys of {0}", tableName);
        ResultSet primaryKey = metaData.getPrimaryKeys(null, databaseSchema, tableName);

        try {
            /*
             * <LI><B>TABLE_CAT</B> String => table catalog (may be <code>null</code>)
             * <LI><B>TABLE_SCHEM</B> String => table schema (may be <code>null</code>)
             * <LI><B>TABLE_NAME</B> String => table name <LI><B>COLUMN_NAME</B> String => column
             * name <LI><B>KEY_SEQ</B> short => sequence number within primary key
             * <LI><B>PK_NAME</B> String => primary key name (may be <code>null</code>)
             */
            PrimaryKey pkey =
                    createPrimaryKey(store, primaryKey, metaData, databaseSchema, tableName, cx);
            if (pkey == null) {
                // No known database supports unique indexes on views and this check
                // causes problems with Oracle, so we skip it
                if (!store.isView(metaData, databaseSchema, tableName)
                        && store.getVirtualTables().get(tableName) == null) {
                    // no primary key, check for a unique index
                    LOGGER.log(
                            Level.FINE,
                            "Getting information about unique indexes of {0}",
                            tableName);
                    ResultSet uniqueIndex =
                            metaData.getIndexInfo(null, databaseSchema, tableName, true, true);
                    try {
                        pkey =
                                createPrimaryKey(
                                        store,
                                        uniqueIndex,
                                        metaData,
                                        databaseSchema,
                                        tableName,
                                        cx);
                    } finally {
                        store.closeSafe(uniqueIndex);
                    }
                }
            }

            return pkey;
        } finally {
            store.closeSafe(primaryKey);
        }
    }

