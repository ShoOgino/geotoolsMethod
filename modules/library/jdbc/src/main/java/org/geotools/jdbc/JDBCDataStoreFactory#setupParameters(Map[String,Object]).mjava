    /**
     * Sets up the database connection parameters.
     *
     * <p>Subclasses may extend, but should not override. This implementation registers the
     * following parameters.
     *
     * <ul>
     *   <li>{@link #HOST}
     *   <li>{@link #PORT}
     *   <li>{@link #DATABASE}
     *   <li>{@link #SCHEMA}
     *   <li>{@link #USER}
     *   <li>{@link #PASSWD}
     * </ul>
     *
     * Subclass implementation may remove any parameters from the map, or may overrwrite any
     * parameters in the map.
     *
     * @param parameters Map of {@link Param} objects.
     */
    protected void setupParameters(Map<String, Object> parameters) {
        // remember: when adding a new parameter here that is not connection related,
        // add it to the JDBCJNDIDataStoreFactory class
        parameters.put(
                DBTYPE.key,
                new Param(
                        DBTYPE.key,
                        DBTYPE.type,
                        DBTYPE.description,
                        DBTYPE.required,
                        getDatabaseID()));
        parameters.put(HOST.key, HOST);
        parameters.put(PORT.key, PORT);
        parameters.put(DATABASE.key, DATABASE);
        parameters.put(SCHEMA.key, SCHEMA);
        parameters.put(USER.key, USER);
        parameters.put(PASSWD.key, PASSWD);
        parameters.put(NAMESPACE.key, NAMESPACE);
        parameters.put(EXPOSE_PK.key, EXPOSE_PK);
        parameters.put(MAXCONN.key, MAXCONN);
        parameters.put(MINCONN.key, MINCONN);
        parameters.put(FETCHSIZE.key, FETCHSIZE);
        parameters.put(BATCH_INSERT_SIZE.key, BATCH_INSERT_SIZE);
        parameters.put(MAXWAIT.key, MAXWAIT);
        if (getValidationQuery() != null) parameters.put(VALIDATECONN.key, VALIDATECONN);
        parameters.put(TEST_WHILE_IDLE.key, TEST_WHILE_IDLE);
        parameters.put(TIME_BETWEEN_EVICTOR_RUNS.key, TIME_BETWEEN_EVICTOR_RUNS);
        parameters.put(MIN_EVICTABLE_TIME.key, MIN_EVICTABLE_TIME);
        parameters.put(EVICTOR_TESTS_PER_RUN.key, EVICTOR_TESTS_PER_RUN);
        parameters.put(PK_METADATA_TABLE.key, PK_METADATA_TABLE);
        parameters.put(SQL_ON_BORROW.key, SQL_ON_BORROW);
        parameters.put(SQL_ON_RELEASE.key, SQL_ON_RELEASE);
        parameters.put(CALLBACK_FACTORY.key, CALLBACK_FACTORY);
    }

