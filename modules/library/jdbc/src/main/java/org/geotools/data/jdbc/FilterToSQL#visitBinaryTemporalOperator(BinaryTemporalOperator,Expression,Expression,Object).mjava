    /**
     * Handles the general case of two expressions in a binary temporal filter.
     *
     * <p>Subclasses should override if they support more temporal operators than what is handled in
     * this base class.
     */
    protected Object visitBinaryTemporalOperator(
            BinaryTemporalOperator filter, Expression e1, Expression e2, Object extraData) {

        if (!(filter instanceof After || filter instanceof Before || filter instanceof TEquals)) {
            throw new IllegalArgumentException(
                    "Unsupported filter: " + filter + ". Only After,Before,TEquals supported");
        }

        String op = filter instanceof After ? ">" : filter instanceof Before ? "<" : "=";

        try {
            e1.accept(this, extraData);
            out.write(" " + op + " ");
            e2.accept(this, extraData);
        } catch (IOException e) {
            return new RuntimeException("Error encoding temporal filter", e);
        }
        return extraData;
    }

