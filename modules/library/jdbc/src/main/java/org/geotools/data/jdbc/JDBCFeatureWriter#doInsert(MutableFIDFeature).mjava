    /**
     * Inserts a feature into the database.
     * 
     * <p>
     * This method should both insert a Feature, and update its FID in case the
     * FIDMapper works over database generated ids like  autoincrement fields,
     * sequences, and object ids.
     * </p>
     * 
     * <p>
     * Postgis needs to do this seperately.  With updates it can just override
     * the geometry stuff, using a direct sql update statement, but for
     * inserts it can't update a row that doesn't exist yet.
     * </p>
     *
     * @param mutable
     *
     * @throws IOException
     * @throws SQLException
     */
    protected void doInsert(MutableFIDFeature mutable)
        throws IOException, SQLException {
        queryData.startInsert();

        // primary key generation            
        FIDMapper mapper = queryData.getMapper();

        // read the new fid into the Feature 
        Set autoincrementColumns = null;
        if ((mapper.getColumnCount() > 0)
                && !mapper.returnFIDColumnsAsAttributes()) {
            autoincrementColumns = Collections.EMPTY_SET;
            String ID = mapper.createID(queryData.getConnection(), mutable, null);
            fidAttributes = mapper.getPKAttributes(ID);

            if (fidAttributes != null) {
                mutable.setID(ID);

                for (int i = 0; i < fidAttributes.length; i++) {
                    Object fidAttribute = fidAttributes[i];

                    // if a column is of type auto increment, we should not update it
                    if (!mapper.isAutoIncrement(i)) {
                        queryData.writeFidColumn(i, fidAttribute);
                    }
                }
            }
        } else {
            autoincrementColumns = new HashSet();
            for (int i = 0; i < mapper.getColumnCount(); i++) {
                if (mapper.isAutoIncrement(i)) {
                    autoincrementColumns.add(mapper.getColumnName(i));
                }
            }
        }

        // set up attributes and write row
        for (int i = 0; i < current.getAttributeCount(); i++) {
            Object currAtt = current.getAttribute(i);
            String attName = current.getFeatureType().getDescriptor(i).getLocalName();
            if(!autoincrementColumns.contains(attName)) 
                queryData.write(i, currAtt);
        }

        queryData.doInsert();

        // should the ID be generated during an insert, we need to read it back
        // and set it into the feature
        if (((mapper.getColumnCount() > 0) && mapper.hasAutoIncrementColumns())) {
            fidAttributes = new Object[mapper.getColumnCount()];

            for (int i = 0; i < fidAttributes.length; i++) {
                fidAttributes[i] = queryData.readFidColumn(i);
            }

            mutable.setID(mapper.getID(fidAttributes));
        }
    }

