    /**
     * Generates a 'INSERT INFO' sql statement.
     * @throws IOException 
     */
    protected String insertSQL(SimpleFeatureType featureType, SimpleFeature feature, 
            List keyValues, Connection cx) throws SQLException {
        BasicSQLDialect dialect = (BasicSQLDialect) getSQLDialect();
        
        // grab the primary key and collect the pk column names 
        PrimaryKey key = null; 
        try {
            key = getPrimaryKey(featureType);
        } catch (IOException e) {
            throw new RuntimeException( e );
        }
        Set<String> pkColumnNames = getColumnNames(key);
       
        StringBuffer sql = new StringBuffer();
        sql.append("INSERT INTO ");
        encodeTableName(featureType.getTypeName(), sql, null);

        //column names
        sql.append(" ( ");

        for (int i = 0; i < featureType.getAttributeCount(); i++) {
            String colName = featureType.getDescriptor(i).getLocalName();
            // skip the pk columns in case we have exposed them
            if(pkColumnNames.contains(colName)) {
                continue;
            }
            dialect.encodeColumnName(colName, sql);
            sql.append(",");
        }

        //primary key values
        boolean useExisting = Boolean.TRUE.equals(feature.getUserData().get(Hints.USE_PROVIDED_FID));
        for (PrimaryKeyColumn col : key.getColumns() ) {
            //only include if its non auto generating
            if ( !(col instanceof AutoGeneratedPrimaryKeyColumn )  || useExisting) {
                dialect.encodeColumnName(col.getName(), sql);
                sql.append( ",");
            }
        } 
        sql.setLength(sql.length() - 1);

        //values
        sql.append(" ) VALUES ( ");

        for (int i = 0; i < featureType.getAttributeCount(); i++) {
            AttributeDescriptor att = featureType.getDescriptor(i);
            String colName = att.getLocalName();
            // skip the pk columns in case we have exposed them, we grab the
            // value from the pk itself
            if(pkColumnNames.contains(colName)) {
                continue;
            }
            
            Class binding = att.getType().getBinding();

            Object value = feature.getAttribute(colName);

            if (value == null) {
                if (!att.isNillable()) {
                    //TODO: throw an exception    
                }

                sql.append("null");
            } else {
                if (Geometry.class.isAssignableFrom(binding)) {
                    try {
                        Geometry g = (Geometry) value;
                        int srid = getGeometrySRID(g, att);
                        dialect.encodeGeometryValue(g, srid, sql);
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                } else {
                    dialect.encodeValue(value, binding, sql);
                }
            }

            sql.append(",");
        }
        // handle the primary key
        for ( int i = 0; i < key.getColumns().size(); i++ ) {
            PrimaryKeyColumn col = key.getColumns().get( i );
            
            //only include if its non auto generating
            if (!(col instanceof AutoGeneratedPrimaryKeyColumn ) || useExisting) {
                try {
                    //Object value = getNextValue(col, key, cx);
                    Object value = keyValues.get( i );
                    dialect.encodeValue( value, col.getType(), sql );
                    sql.append( "," );
                } 
                catch( Exception e ) {
                    throw new RuntimeException( e );
                }
            }
        }
        sql.setLength(sql.length() - 1);

        sql.append(")");

        return sql.toString();
    }

