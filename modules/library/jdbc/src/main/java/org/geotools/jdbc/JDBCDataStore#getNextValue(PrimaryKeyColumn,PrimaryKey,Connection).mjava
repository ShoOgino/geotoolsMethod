    /**
     * Gets the next value for the column of a primary key.
     */
    protected Object getNextValue( PrimaryKeyColumn col, PrimaryKey pkey, Connection cx ) throws SQLException, IOException {
        Object next = null;
        
        if ( col instanceof AutoGeneratedPrimaryKeyColumn ) {
            next = dialect.getNextAutoGeneratedValue(databaseSchema, pkey.getTableName(), col.getName(), cx );
        }
        else if ( col instanceof SequencedPrimaryKeyColumn ) {
            String sequenceName = ((SequencedPrimaryKeyColumn)col).getSequenceName();
            next = dialect.getNextSequenceValue(databaseSchema, sequenceName, cx );
        }
        else {
            //try to calculate
            Class t =  col.getType();
          
          //is the column numeric?
          if ( Number.class.isAssignableFrom( t ) ) {
              //is the column integral? 
              if ( t == Short.class || t == Integer.class || t == Long.class 
                  || BigInteger.class.isAssignableFrom( t ) || BigDecimal.class.isAssignableFrom(t) ) {
                  
                  StringBuffer sql = new StringBuffer();
                  sql.append( "SELECT MAX(");
                  dialect.encodeColumnName( col.getName() , sql );
                  sql.append( ") + 1 FROM ");
                  encodeTableName(pkey.getTableName(), sql, null);
                  
                  LOGGER.log(Level.FINE, "Getting next FID: {0}", sql);
                  
                  Statement st = cx.createStatement();
                  try {
                      ResultSet rs = st.executeQuery( sql.toString() );
                      try {
                          rs.next();
                          next = rs.getObject( 1 );
                          
                          if ( next == null ) {
                              //this probably means there was no data in the table, set to 1
                              //TODO: probably better to do a count to check... but if this 
                              // value already exists the db will throw an error when it tries
                              // to insert
                              next = new Integer(1);
                          }
                      }
                      finally {
                          closeSafe( rs );
                      }
                  }
                  finally {
                      closeSafe( st );
                  }
              }
          }
          else if ( CharSequence.class.isAssignableFrom( t ) ) {
              //generate a random string
              next = SimpleFeatureBuilder.createDefaultFeatureId();
          }
          
          if ( next == null ) {
              throw new IOException( "Cannot generate key value for column of type: " + t.getName() );    
          }
        }
        
        return next;
    }

