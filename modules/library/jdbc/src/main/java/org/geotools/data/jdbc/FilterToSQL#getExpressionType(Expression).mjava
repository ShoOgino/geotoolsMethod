    /**
     * Returns the expression type, if can be found, or null otherwise. Based on feature type
     * inspection for attribute references, and function return types otherwise. Cannot yet handle
     * arithmetics or literals (the latter are actually not useful and should be ignored, expression
     * in geotools are free to use a string where a number is needed due to the on the fly
     * conversion, here we are concerned only with types that are a reliable reference).
     *
     * @param expression
     * @return The expression return type, or null if cannot be computed
     */
    public Class getExpressionType(Expression expression) {
        Class binding = null;
        if (expression instanceof PropertyName) {
            // aha!  It's a propertyname, we should get the class and pass it in
            // as context to the tree walker.
            AttributeDescriptor attType = (AttributeDescriptor) expression.evaluate(featureType);
            if (attType != null) {
                binding = attType.getType().getBinding();
            }
        } else if (expression instanceof Function) {
            // check for a function return type
            Class ret = getFunctionReturnType((Function) expression);
            if (ret != null) {
                binding = ret;
            }
        }
        return binding;
    }

