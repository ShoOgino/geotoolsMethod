    /**
     * Registers the java type to sql type mappings that the datastore uses when reading and writing
     * objects to and from the database. *
     *
     * <p>Subclasses should extend (not override) this method to provide additional mappings, or to
     * override mappings provided by this implementation. This implementation provides the following
     * mappings:
     */
    public void registerClassToSqlMappings(Map<Class<?>, Integer> mappings) {
        mappings.put(String.class, Integer.valueOf(Types.VARCHAR));

        mappings.put(Boolean.class, Integer.valueOf(Types.BOOLEAN));
        mappings.put(boolean.class, Integer.valueOf(Types.BOOLEAN));

        mappings.put(Short.class, Integer.valueOf(Types.SMALLINT));
        mappings.put(short.class, Integer.valueOf(Types.SMALLINT));

        mappings.put(Integer.class, Integer.valueOf(Types.INTEGER));
        mappings.put(int.class, Integer.valueOf(Types.INTEGER));
        mappings.put(Long.class, Integer.valueOf(Types.BIGINT));
        mappings.put(long.class, Integer.valueOf(Types.BIGINT));

        mappings.put(Float.class, Integer.valueOf(Types.REAL));
        mappings.put(float.class, Integer.valueOf(Types.REAL));
        mappings.put(Double.class, Integer.valueOf(Types.DOUBLE));
        mappings.put(double.class, Integer.valueOf(Types.DOUBLE));

        mappings.put(BigDecimal.class, Integer.valueOf(Types.NUMERIC));

        mappings.put(Date.class, Integer.valueOf(Types.DATE));
        mappings.put(Time.class, Integer.valueOf(Types.TIME));
        mappings.put(java.util.Date.class, Integer.valueOf(Types.TIMESTAMP));
        mappings.put(Timestamp.class, Integer.valueOf(Types.TIMESTAMP));

        mappings.put(byte[].class, Integer.valueOf(Types.BLOB));

        // subclasses should extend and provide additional
    }

