	/**
	 * Provides the default implementation of determining the FID column.
	 *
	 * <p>
	 * The default implementation of determining the FID column name is to use
	 * the primary key as the FID column. If no primary key is present, null
	 * will be returned. Sub classes can override this behaviour to define
	 * primary keys for vendor specific cases.
	 * </p>
	 *
	 * <p>
	 * There is an unresolved issue as to what to do when there are multiple
	 * primary keys. Maybe a restriction that table much have a single column
	 * primary key is appropriate.
	 * </p>
	 *
	 * <p>
	 * This should not be called by subclasses to retreive the FID column name.
	 * Instead, subclasses should call getFeatureTypeInfo(String) to get the
	 * FeatureTypeInfo for a feature type and get the fidColumn name from the
	 * fidColumn name memeber.
	 * </p>
	 *
	 * @param typeName
	 *            The name of the table to get a primary key for.
	 *
	 * @return The name of the primay key column or null if one does not exist.
	 *
	 * @throws IOException
	 *             This will only occur if there is an error getting a
	 *             connection to the Database.
	 */
	protected String determineFidColumnName(String typeName) throws IOException {
		final int NAME_COLUMN = 4;
		String fidColumnName = null;
		ResultSet rs = null;
		Connection conn = null;

		try {
			conn = getConnection(Transaction.AUTO_COMMIT);

			DatabaseMetaData dbMetadata = conn.getMetaData();
			rs = dbMetadata.getPrimaryKeys(null, null, typeName);

			if (rs.next()) {
				fidColumnName = rs.getString(NAME_COLUMN);
			}
		} catch (SQLException sqlException) {
			JDBCUtils.close(conn, Transaction.AUTO_COMMIT, sqlException);
			conn = null; // prevent finally block from reclosing
			LOGGER
					.warning("Could not find the primary key - using the default");
		} finally {
			JDBCUtils.close(rs);
			JDBCUtils.close(conn, Transaction.AUTO_COMMIT, null);
		}

		return fidColumnName;
	}

