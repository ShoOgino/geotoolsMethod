    @Override
    public void removeFeatures(Filter filter) throws IOException {
        Filter[] splitted = delegate.splitFilter(filter);
        Filter preFilter = splitted[0];
        Filter postFilter = splitted[1];

        if (postFilter != null && !Filter.INCLUDE.equals(postFilter)) {
            // we don't have a fast way to perform this delete, let's do it the
            // feature by feature way then
            super.removeFeatures(filter);
        } else {
            // let's grab the connection
            @SuppressWarnings("PMD.CloseResource") // transaction closing managed elsewhere
            Transaction tx = getState().getTransaction();
            Connection cx = null;

            try {
                cx = getDataStore().getConnection(tx);

                // we want to support a "batch" delete, but we need to be weary of locks
                SimpleFeatureType featureType = getSchema();
                try {
                    getDataStore()
                            .ensureAuthorization(featureType, preFilter, getTransaction(), cx);
                } catch (SQLException e) {
                    throw (IOException) new IOException().initCause(e);
                }
                ContentState state = getEntry().getState(transaction);
                ReferencedEnvelope bounds =
                        ReferencedEnvelope.create(getSchema().getCoordinateReferenceSystem());
                if (state.hasListener()) {
                    // gather bounds before modification
                    ReferencedEnvelope before =
                            getBounds(new Query(getSchema().getTypeName(), preFilter));
                    if (before != null && !before.isEmpty()) {
                        bounds = before;
                    }
                }
                getDataStore().delete(featureType, preFilter, cx);
                if (state.hasListener()) {
                    // issue notification
                    FeatureEvent event = new FeatureEvent(this, Type.REMOVED, bounds, preFilter);
                    state.fireFeatureEvent(event);
                }
            } finally {
                if (tx == null || tx == Transaction.AUTO_COMMIT) {
                    getDataStore().closeSafe(cx);
                }
            }
        }
    }

