    /**
     * Creates the datasource for the data store.
     * <p>
     * This method creates a {@link BasicDataSource} instance and populates it
     * as follows:
     * <ul>
     *  <li>poolPreparedStatements -> false
     *  <li>driverClassName -> {@link #getDriverClassName()}
     *  <li>url -> 'jdbc:&lt;{@link #getDatabaseID()}>://&lt;{@link #HOST}>/&lt;{@link #DATABASE}>'
     *  <li>username -> &lt;{@link #USER}>
     *  <li>password -> &lt;{@link #PASSWD}>
     * </ul>
     * If different behaviour is needed, this method should be extended or
     * overridden.
     * </p>
     */
    protected DataSource createDataSource(Map params, SQLDialect dialect) throws IOException {
        BasicDataSource dataSource = createDataSource(params);

        // some default data source behaviour
        if(dialect instanceof PreparedStatementSQLDialect) {
            dataSource.setPoolPreparedStatements(true);
            
            // check if the dialect exposes the max prepared statements param 
            Map<String, Serializable> testMap = new HashMap<String, Serializable>();
            setupParameters(testMap);
            if(testMap.containsKey(MAX_OPEN_PREPARED_STATEMENTS.key)) {
                Integer maxPreparedStatements = (Integer) MAX_OPEN_PREPARED_STATEMENTS.lookUp(params);
                // limit prepared statements
                if(maxPreparedStatements != null && maxPreparedStatements > 0)
                    dataSource.setMaxOpenPreparedStatements(maxPreparedStatements);
                // disable statement caching fully if necessary
                if(maxPreparedStatements != null && maxPreparedStatements < 0)
                    dataSource.setPoolPreparedStatements(false);
            }
        }

        return new DBCPDataSource(dataSource);
    }

