    /**
     * Registers the set of aggregate functions the dialect is capable of handling.
     *
     * <p>Aggregate functions are handled via visitors of special types. The
     * <param>aggregates</param> maps the class of the visitor to the associated function name. This
     * base implementation handles some of the well known mappings:
     *
     * <ul>
     *   <li>{@link UniqueVisitor} -> "unique"
     *   <li>{@link CountVisitor} -> "count"
     *   <li>{@link MaxVisitor} -> "max"
     *   <li>{@link MinVisitor} -> "min"
     *   <li>{@link SumVisitor} -> "sum"
     *   <li>{@link AverageVisitor} -> "avg"
     *   <li>{@link StandardDeviationVisitor} -> "stddev_pop"
     *   <li>
     * </ul>
     *
     * Subclasses should extend (not override) to provide additional functions.
     */
    public void registerAggregateFunctions(
            Map<Class<? extends FeatureVisitor>, String> aggregates) {
        // register the well known functions, from the SQL standard
        aggregates.put(UniqueVisitor.class, "distinct");
        aggregates.put(CountVisitor.class, "count");
        aggregates.put(MinVisitor.class, "min");
        aggregates.put(MaxVisitor.class, "max");
        aggregates.put(SumVisitor.class, "sum");
        aggregates.put(AverageVisitor.class, "avg");
        aggregates.put(StandardDeviationVisitor.class, "stddev_pop");
    }

