    /**
     * Registers the set of aggregate functions the dialect is capable of handling.
     * <p>
     * Aggregate functions are handled via visitors of special types. The <param>aggregates</param>
     * maps the class of the visitor to the associated function name. This base implementation 
     * handles some of the well known mappings:
     * <ul>
     * <li>{@link CountVisitor} -> "count" <li>
     * <li>{@link MaxVisitor} -> "max" <li>
     * <li>{@link MinVisitor} -> "min" <li>
     * <li>{@link SumVisitor} -> "sum" <li>
     *  </ul>
     *  Subclasses should extend (not override) to provide additional functions.
     * </p>
     */
    public void registerAggregateFunctions(Map<Class<? extends FeatureVisitor>,String> aggregates) {
        //register the well known
        aggregates.put( CountVisitor.class, "count" );
        aggregates.put( MinVisitor.class, "min");
        aggregates.put( MaxVisitor.class, "max");
        aggregates.put( SumVisitor.class, "sum");
    }

