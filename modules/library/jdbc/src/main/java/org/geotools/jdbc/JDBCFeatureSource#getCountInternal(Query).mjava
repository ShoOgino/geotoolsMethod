    protected int getCountInternal(Query query) throws IOException {
        JDBCDataStore store = getDataStore();

        // split the filter
        Filter[] split = splitFilter(query.getFilter());
        Filter preFilter = split[0];
        Filter postFilter = split[1];

        boolean manual = (postFilter != null) && (postFilter != Filter.INCLUDE);
        if (!manual && !query.getJoins().isEmpty()) {
            // check any join post filters as well
            JoinInfo join = JoinInfo.create(query, this);
            manual = join.hasPostFilters();
        }
        if (manual) {
            try {
                // calculate manually, dont use datastore optimization
                getDataStore().getLogger().fine("Calculating size manually");

                int count = 0;

                // grab a reader
                Query preQuery = new Query(query);
                query.setFilter(preFilter);
                try (FeatureReader<SimpleFeatureType, SimpleFeature> preReader =
                        getReader(preQuery)) {
                    // wrap with post filter
                    try (FilteringFeatureReader<SimpleFeatureType, SimpleFeature> reader =
                            new FilteringFeatureReader<>(preReader, postFilter)) {
                        while (reader.hasNext()) {
                            reader.next();
                            count++;
                        }
                    }
                }

                return count;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        } else {
            // no post filter, we have a preFilter, or preFilter is null..
            // either way we can use the datastore optimization
            Connection cx = store.getConnection(getState());
            try {
                Query q = new Query(query);
                q.setFilter(preFilter);
                int count = store.getCount(getSchema(), q, cx);
                // if native support for limit and offset is not implemented, we have to ajust the
                // result
                if (!store.getSQLDialect().isLimitOffsetSupported()) {
                    if (query.getStartIndex() != null && query.getStartIndex() > 0) {
                        if (query.getStartIndex() > count) count = 0;
                        else count -= query.getStartIndex();
                    }
                    if (query.getMaxFeatures() > 0 && count > query.getMaxFeatures())
                        count = query.getMaxFeatures();
                }
                return count;
            } finally {
                store.releaseConnection(cx, getState());
            }
        }
    }

