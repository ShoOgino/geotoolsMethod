    /**
     * Writes the SQL for the attribute Expression.
     * 
     * @param expression the attribute to turn to SQL.
     *
     * @throws RuntimeException for io exception with writer
     */
    public Object visit(PropertyName expression, Object extraData) throws RuntimeException {
        LOGGER.finer("exporting PropertyName");
        
        Class target = null;
        if(extraData instanceof Class) {
            target = (Class) extraData;
        }
        try {
            //first evaluate expression against feautre type get the attribute, 
            //  this handles xpath
            AttributeDescriptor attribute = null;
            try {
                attribute = (AttributeDescriptor) expression.evaluate(featureType);
            }
            catch( Exception e ) {
                //just log and fall back on just encoding propertyName straight up
                String msg = "Error occured mapping " + expression + " to feature type";
                LOGGER.log( Level.WARNING, msg, e );
            }
            String encodedField; 
            if ( attribute != null ) {
                encodedField = fieldEncoder.encode(escapeName(attribute.getLocalName()));
                if(target != null && target.isAssignableFrom(attribute.getType().getBinding())) {
                    // no need for casting, it's already the right type
                    target = null;
                }
            } else {
                // fall back to just encoding the property name
                encodedField = fieldEncoder.encode(escapeName(expression.getPropertyName()));
            }
            
            // handle destination type if necessary
            if(target != null) {
                out.write(cast(encodedField, target));
            } else {
                out.write(encodedField);
            }
    		
        } catch (java.io.IOException ioe) {
            throw new RuntimeException("IO problems writing attribute exp", ioe);
        }
        return extraData;
    }

