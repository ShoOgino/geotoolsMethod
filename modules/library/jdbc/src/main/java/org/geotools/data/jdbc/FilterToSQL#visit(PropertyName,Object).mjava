    /**
     * Writes the SQL for the attribute Expression.
     *
     * @param expression the attribute to turn to SQL.
     * @throws RuntimeException for io exception with writer
     */
    public Object visit(PropertyName expression, Object extraData) throws RuntimeException {
        LOGGER.finer("exporting PropertyName");

        Class target = null;
        if (extraData instanceof Class) {
            target = (Class) extraData;
        }

        try {
            SimpleFeatureType featureType = this.featureType;

            // check for join
            if (expression instanceof JoinPropertyName) {
                // encode the prefix
                out.write(escapeName(((JoinPropertyName) expression).getAlias()));
                out.write(".");
            }

            // first evaluate expression against feautre type get the attribute,
            //  this handles xpath
            AttributeDescriptor attribute = null;
            EnumMapper mapper = null;
            try {
                attribute = (AttributeDescriptor) expression.evaluate(featureType);
                mapper = (EnumMapper) attribute.getUserData().get(JDBCDataStore.JDBC_ENUM_MAP);
            } catch (Exception e) {
                // just log and fall back on just encoding propertyName straight up
                String msg = "Error occured mapping " + expression + " to feature type";
                LOGGER.log(Level.WARNING, msg, e);
            }

            // handle integer mapped enumerations
            if (mapper != null) {
                out.write("CASE ");
            }

            writeEncodedField(target, expression, attribute);

            // If we got here, it means the property is used inside some expression or function,
            // for this case we expand the property. For comparisons instead, the literal is
            // backmapped to an integer when possible, to allow index usage
            if (mapper != null) {
                out.write("\n ");
                for (Map.Entry<Integer, String> entry : mapper.getIntegerToString().entrySet()) {
                    out.write("WHEN " + entry.getKey() + " THEN '" + entry.getValue() + "'\n");
                }
                out.write("END");
            }

        } catch (java.io.IOException ioe) {
            throw new RuntimeException("IO problems writing attribute exp", ioe);
        }
        return extraData;
    }

