	/**
	 * Converts an object of a particular type into an object of a differnt type.
	 * <p>
	 * This method uses the {@link ConverterFactory} extension point to find a converter capable
	 * of performing the conversion. The first converter found is the one used. Using this class
	 * there is no way to guarantee which converter will be used.
	 * </p>
	 * @param source The object to convert.
	 * @param target The type of the converted value.
	 * @param hints Any hints for the converter factory.
	 *
	 * @return The converted value as an instance of target, or <code>null</code> if a converter
	 * could not be found.
	 *
	 * @since 2.4
	 */
	public static <T> T convert( Object source, Class<T> target, Hints hints ) {
		//can't convert null
        if ( source == null )
			return null;
        
        // handle case of source being an instance of target up front
        final Class sourceClass = source.getClass();
        if (sourceClass == target ||  sourceClass.equals( target ) 
                || target.isAssignableFrom(sourceClass) ) {
            return (T) source;
        }

		for (ConverterFactory factory : factories()) {
			Converter converter = factory.createConverter( sourceClass, target, hints );
			if ( converter != null ) {
				try {
					T converted = converter.convert( source, target );
					if ( converted != null ) {
						return converted;
					}
				} catch (Exception e) {
				    if(LOGGER.isLoggable(Level.FINER))
				        LOGGER.log(Level.FINER, "Error applying the converter " + converter.getClass() + " on (" + source + "," + target + ")", e);
				}
			}
		}

		//a couple of final tries
		if ( String.class.equals( target ) ) {
			return (T) source.toString();
		}
		return null;
	}

