    /**
     * Transform the provided 2D direct position into 3D (0 Ellipsoidal height assumed when
     * converting from {@link DefaultGeographicCRS#WGS84} to {@link DefaultGeographicCRS#WGS84_3D}).
     * 
     * @param srcPosition Source 2D position
     * @param transform1 From source CRS to To WGS84
     * @param transform2 From WGS84_3D to target CRS
     * @return Position in target CRS as calculated by transform2
     * @throws TransformException 
     * @throws MismatchedDimensionException 
     */
    private static DirectPosition transformUp(GeneralDirectPosition srcPosition, MathTransform transform1,
            MathTransform transform2) throws MismatchedDimensionException, TransformException {
        DirectPosition world2D = transform1.transform(srcPosition, null );
        
        DirectPosition world3D = new GeneralDirectPosition( DefaultGeographicCRS.WGS84_3D);
        world3D.setOrdinate(0, world2D.getOrdinate(0));
        world3D.setOrdinate(1, world2D.getOrdinate(1));
        world3D.setOrdinate(2, 0.0 ); // 0 elliposial height is assumed 
        
        DirectPosition targetPosition = transform2.transform(world3D, null );
        return targetPosition;
    }

