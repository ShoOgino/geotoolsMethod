    /**
     * Creates a smoothed copy of the input Geometry. This is only useful
     * for polygonal and lineal geometries. Point objects will be returned
     * unchanged. The smoothing algorithm inserts new vertices which are 
     * positioned using Bezier splines. All vertices of the input Geometry 
     * will be present in the output Geometry.
     * <p>
     * The {@code fit} parameter controls how tightly the smoothed lines 
     * conform to the input line segments, with a value of 1 being tightest
     * and 0 being loosest. Values outside this range will be adjusted up
     * or down as required.
     * <p>
     * The input Geometry can be a simple type (e.g. LineString, Polygon),
     * a multi-type (e.g. MultiLineString, MultiPolygon) or a GeometryCollection.
     * The returned object will be of the same type.
     * 
     * @param geom the input geometry
     * @param fit tightness of fit from 0 (loose) to 1 (tight)
     * 
     * @return a new Geometry object of the same class as {@code geom}
     * @throws IllegalArgumentException if {@code geom} is {@code null}
     */
    public static Geometry smooth(final Geometry geom, double fit) {
        return smooth(geom, fit, new GeometryFactory());
    }

