    /**
     * Transform the provided 3D direct position into 2D (Ellipsoidal height is ignored when
     * converting from {@link DefaultGeographicCRS#WGS84_3D} to {@link DefaultGeographicCRS#WGS84}).
     * 
     * @param srcPosition Source 3D position
     * @param transform1 From source CRS to To WGS84_3D
     * @param transform2 From WGS84 to target CRS
     * @return Position in target CRS as calculated by transform2
     * @throws TransformException 
     * @throws MismatchedDimensionException 
     */
    private static DirectPosition transformDown(GeneralDirectPosition srcPosition, MathTransform transform1,
            MathTransform transform2) throws MismatchedDimensionException, TransformException {
        DirectPosition world3D = transform1.transform(srcPosition, null );
        
        DirectPosition world2D = new GeneralDirectPosition( DefaultGeographicCRS.WGS84);
        world2D.setOrdinate(0, world3D.getOrdinate(0));
        world2D.setOrdinate(1, world3D.getOrdinate(1));
        
        DirectPosition targetPosition = transform2.transform(world2D, null );
        return targetPosition;
    }

