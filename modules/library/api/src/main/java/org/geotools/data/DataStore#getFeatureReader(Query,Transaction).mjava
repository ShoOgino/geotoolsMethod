    /**
     * Gets a {@code FeatureReader} for features selected by the given
     * {@code Query}.  {@code FeatureReader} provies an iterator-style
     * API to feature data.
     * <p>
     * The {@code Query} provides the schema for the form of the returned
     * features as well as a {@code Filter} to constrain the features
     * available via the reader.
     * <p>
     * The {@code Transaction} can be used to externalize the state of the
     * {@code DataStore}. Examples of this include a {@code JDBCDataStore}
     * sharing a connection for use across several {@code FeatureReader} requests;
     * and a {@code ShapefileDataStore} redirecting requests to an alternate file
     * during the course of a {@code Transaction}.
     *
     * @param query a query providing the schema and constraints for
     *        features that the reader will return
     *
     * @param transaction a transaction that this reader will operate against
     *
     * @throws IOException if data access errors occur
     *
     * @return an instance of {@code FeatureReader}
     */
    FeatureReader<SimpleFeatureType, SimpleFeature> getFeatureReader(Query query,
            Transaction transaction) throws IOException;

