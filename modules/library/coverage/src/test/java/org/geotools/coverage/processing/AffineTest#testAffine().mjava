    /**
     * Tests the "Scale" operation.
     *
     * @todo Disabled for now because seems to be trapped in a never ending loop.
     */
    @Test
    public void testAffine() {
        final GridCoverage2D originallyIndexedCoverage = EXAMPLES.get(0);
        final GridCoverage2D indexedCoverage = EXAMPLES.get(2);
        final GridCoverage2D indexedCoverageWithTransparency = EXAMPLES.get(3);
        final GridCoverage2D floatCoverage = EXAMPLES.get(4);

        ///////////////////////////////////////////////////////////////////////
        //
        // Nearest neighbor interpolation
        //
        ///////////////////////////////////////////////////////////////////////
        Interpolation interp = Interpolation.getInstance(Interpolation.INTERP_NEAREST);
        affine(originallyIndexedCoverage, interp, null, null);
        affine(indexedCoverage, interp, null, null);
        affine(indexedCoverageWithTransparency, interp, null, null);

        ///////////////////////////////////////////////////////////////////////
        //
        // Nearest neighbor interpolation and ROI / NoData.
        //
        ///////////////////////////////////////////////////////////////////////
        RenderedImage src = originallyIndexedCoverage.getRenderedImage();
        ROI roi =
                new ROIShape(
                        new Rectangle(
                                src.getMinX() + 1,
                                src.getMinY() + 1,
                                src.getWidth() / 2,
                                src.getHeight() / 2));
        Range nodata = RangeFactory.create(12, 12);
        affine(originallyIndexedCoverage, interp, roi, null);
        affine(originallyIndexedCoverage, interp, null, nodata);

        ///////////////////////////////////////////////////////////////////////
        //
        // Bilinear interpolation
        //
        ///////////////////////////////////////////////////////////////////////
        interp = Interpolation.getInstance(Interpolation.INTERP_BILINEAR);
        affine(indexedCoverage, interp, null, null);
        affine(indexedCoverageWithTransparency, interp, null, null);

        ///////////////////////////////////////////////////////////////////////
        //
        // Nearest neighbor  interpolation  for a float coverage
        //
        ///////////////////////////////////////////////////////////////////////
        interp = Interpolation.getInstance(Interpolation.INTERP_NEAREST);
        affine(floatCoverage, interp, null, null);

        // Play with a rotated coverage
        affine(rotate(floatCoverage, Math.PI / 4), null, null, null);
    }

