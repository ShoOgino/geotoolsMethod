    @Test
    public void testPolygonLocalStats() throws Exception {
        // Input data
        final File tiff = TestData.file(this, "test.tif");
        final File tfw = TestData.file(this, "test.tfw");

        // Reading of the input image
        final TIFFImageReader reader = (it.geosolutions.imageioimpl.plugins.tiff.TIFFImageReader) new TIFFImageReaderSpi()
                .createReaderInstance();
        reader.setInput(ImageIO.createImageInputStream(tiff));
        final BufferedImage image = reader.read(0);
        reader.dispose();

        // Transformation from the Raster space to the Model space
        final MathTransform transform = new WorldFileReader(tfw).getTransform();
        // Creation of the input coverage
        final GridCoverage2D coverage2D = CoverageFactoryFinder.getGridCoverageFactory(null)
                .create("coverage",
                        image,
                        new GridGeometry2D(new GridEnvelope2D(PlanarImage.wrapRenderedImage(image)
                                .getBounds()), transform, DefaultGeographicCRS.WGS84),
                        new GridSampleDimension[] { new GridSampleDimension("coverage") }, null,
                        null);

        // Selection of the input geometries and creation of the related list.
        List<SimpleFeature> polygonList = new ArrayList<SimpleFeature>();
        FeatureIterator<SimpleFeature> featureIterator = ZonalStasTest.testPolygons.features();
        while (featureIterator.hasNext()) {
            SimpleFeature feature = featureIterator.next();
            polygonList.add(feature);
        }
        featureIterator.close();

        // choose the stats
        Set<StatsType> statsSet = new LinkedHashSet<StatsType>();
        statsSet.add(StatsType.MIN);
        statsSet.add(StatsType.MAX);
        statsSet.add(StatsType.MEAN);
        statsSet.add(StatsType.VARIANCE);
        statsSet.add(StatsType.DEV_STD);

        // Selection of the range where the calculations are performed
        List<Range> includedRanges = new ArrayList<Range>();
        includedRanges.add(RangeFactory.create(0f, false, 1300f, true, false));
        includedRanges.add(RangeFactory.create(1370f, true, 1600f, true, false));

        // select the bands to work on
        int[] bands = new int[] { 0 };

        // create the proper instance
        StatisticsTool statisticsTool = new StatisticsTool(statsSet, coverage2D, bands,
                polygonList, includedRanges, true);

        // do analysis
        statisticsTool.run();

        // get the results for the first polygon
        String id = "testpolygon.1";

        // First Range

        Map<StatsType, Object> statistics0 = statisticsTool.getStatistics(id).get(0);
        LOGGER.info(id + statistics0.toString());
        double sdev0 = (Double) statistics0.get(StatsType.DEV_STD);
        double min0 = (Double) statistics0.get(StatsType.MIN);
        double mean0 = (Double) statistics0.get(StatsType.MEAN);
        double var0 = (Double) statistics0.get(StatsType.VARIANCE);
        double max0 = (Double) statistics0.get(StatsType.MAX);

        // Percentual variation between the correct statistics and the calculated
        double minResult0 = Math.abs(1355d - min0) / 1355d * 100;
        double varResult0 = Math.abs(139.1754d - var0) / 139.1754d * 100;
        double maxResult0 = Math.abs(1300d - max0) / 1300d * 100;
        double meanResult0 = Math.abs(1283.1634d - mean0) / 1283.1634d * 100;
        double dev_stdResult0 = Math.abs(11.7972d - sdev0) / 11.7972d * 100;

        assertTrue(minResult0 < 10);
        assertTrue(varResult0 < 10);
        assertTrue(maxResult0 < 10);
        assertTrue(meanResult0 < 10);
        assertTrue(dev_stdResult0 < 10);

        // Second Range

        Map<StatsType, Object> statistics1 = statisticsTool.getStatistics(id).get(1);
        LOGGER.info(id + statistics1.toString());
        double sdev1 = (Double) statistics1.get(StatsType.DEV_STD);
        double min1 = (Double) statistics1.get(StatsType.MIN);
        double mean1 = (Double) statistics1.get(StatsType.MEAN);
        double var1 = (Double) statistics1.get(StatsType.VARIANCE);
        double max1 = (Double) statistics1.get(StatsType.MAX);

        // Percentual variation between the correct statistics and the calculated
        double minResult1 = Math.abs(1376d - min1) / 1376d * 100;
        double varResult1 = Math.abs(4061.9665d - var1) / 4061.9665d * 100;
        double maxResult1 = Math.abs(1598d - max1) / 1598d * 100;
        double meanResult1 = Math.abs(1433.8979d - mean1) / 1433.8979d * 100;
        double dev_stdResult1 = Math.abs(63.7335d - sdev1) / 63.7335d * 100;

        assertTrue(minResult1 < 10);
        assertTrue(varResult1 < 10);
        assertTrue(maxResult1 < 10);
        assertTrue(meanResult1 < 10);
        assertTrue(dev_stdResult1 < 10);

        reader.dispose();
        coverage2D.dispose(true);
        image.flush();
    }

