    private GridCoverage2D simpleMosaic(GridCoverage2D coverage1, GridCoverage2D coverage2) {
        /*
         * Do the crop without conserving the envelope.
         */
        ParameterValueGroup param = processor.getOperation("Mosaic").getParameters();

        // Creation of a List of the input Sources
        List<GridCoverage2D> sources = new ArrayList<GridCoverage2D>(2);
        sources.add(coverage1);
        sources.add(coverage2);
        // Setting of the sources
        param.parameter("Sources").setValue(sources);
        // RenderingHints
        Hints hints = new Hints();
        // Ensure No Layout is set
        Assert.assertTrue(!hints.containsKey(JAI.KEY_IMAGE_LAYOUT));
        // Add a fake Layout for the operation
        ImageLayout il = new ImageLayout();
        hints.put(JAI.KEY_IMAGE_LAYOUT, il);
        il.setTileHeight(TILE_SIZE);
        il.setTileWidth(TILE_SIZE);
        // Mosaic operation
        GridCoverage2D mosaic = (GridCoverage2D) processor.doOperation(param, hints);

        // Check that the final GridCoverage BoundingBox is equal to the union of the separate coverages bounding box
        Envelope2D expected = coverage1.getEnvelope2D();
        expected.include(coverage2.getEnvelope2D());
        // Mosaic Envelope
        Envelope2D actual = mosaic.getEnvelope2D();

        // Check the same Bounding Box
        assertEqualBBOX(expected, actual);

        // Check that Tiling has been defined correctly
        RenderedImage renderedImage = mosaic.getRenderedImage();
        assertEquals(TILE_SIZE, renderedImage.getTileHeight());
        assertEquals(TILE_SIZE, renderedImage.getTileWidth());

        // Check that the final Coverage resolution is equal to that of the first coverage
        double initialRes = calculateResolution(coverage1);
        double finalRes = calculateResolution(mosaic);
        double percentual = Math.abs(initialRes - finalRes) / initialRes;
        Assert.assertTrue(percentual < TOLERANCE);

        // Check that on the center of the image there are nodata
        DirectPosition point = new DirectPosition2D(mosaic.getCoordinateReferenceSystem(),
                actual.getCenterX(), actual.getCenterY());
        double nodata = CoverageUtilities.getBackgroundValues(coverage1)[0];
        double result = ((int[]) mosaic.evaluate(point))[0];
        Assert.assertEquals(nodata, result, TOLERANCE);

        // Check that on the Upper Left border pixel there is valid data
        point = new DirectPosition2D(mosaic.getCoordinateReferenceSystem(), actual.getMinX()
                + finalRes, actual.getMinY() + finalRes);
        result = ((int[]) mosaic.evaluate(point))[0];
        Assert.assertNotEquals(nodata, result, TOLERANCE);

        // Ensure the Layout is already present after the mosaic
        Assert.assertTrue(hints.containsKey(JAI.KEY_IMAGE_LAYOUT));
        // Ensure no additional bound parameter is set
        ImageLayout layout = (ImageLayout) hints.get(JAI.KEY_IMAGE_LAYOUT);
        Assert.assertTrue(!layout.isValid(ImageLayout.MIN_X_MASK));
        Assert.assertTrue(!layout.isValid(ImageLayout.MIN_Y_MASK));
        Assert.assertTrue(!layout.isValid(ImageLayout.WIDTH_MASK));
        Assert.assertTrue(!layout.isValid(ImageLayout.HEIGHT_MASK));
        Assert.assertTrue(layout.isValid(ImageLayout.TILE_HEIGHT_MASK));
        Assert.assertTrue(layout.isValid(ImageLayout.TILE_WIDTH_MASK));
        return mosaic;
    }

