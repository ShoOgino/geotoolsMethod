        private void processPolygonMode() throws TransformException {

            final StatsType[] statistis =
                    statisticsSet.toArray(new StatsType[statisticsSet.size()]);

            // final OperationJAI op = new ZonalStatistics();
            ParameterValueGroup params = PROCESSOR.getOperation("Zonal").getParameters();
            params.parameter("Source").setValue(gridCoverage2D);
            params.parameter("stats").setValue(statistis);
            params.parameter("bands").setValue(bands);
            params.parameter("roilist").setValue(featureList);
            params.parameter("rangeData").setValue(ranges);
            params.parameter("localStats").setValue(localStats);
            // Execution of the operation
            final GridCoverage2D coverage =
                    (GridCoverage2D)
                            ((ZonalStatistics) PROCESSOR.getOperation("Zonal"))
                                    .doOperation(params, null);
            // Results for each geometry
            final List<ZoneGeometry> zoneList =
                    (List<ZoneGeometry>) coverage.getProperty(ZonalStatsDescriptor.ZS_PROPERTY);

            int zoneNum = zoneList.size();
            // For each input geometry the statistics are stored inside a Map
            for (int i = 0; i < zoneNum; i++) {
                // Selection of the geometry
                ZoneGeometry geom = zoneList.get(i);

                SimpleFeature feature = featureList.get(i);

                final String fid = feature.getID();
                // Creation of a Map associated with each range
                final Map<Integer, Map<StatsType, Object>> rangeMap =
                        new HashMap<Integer, Map<StatsType, Object>>();

                int count = 0;
                // If local statistics are requested, then the results are stored for each range
                if (localStats) {
                    // Cycle on all the ranges
                    for (Range range : ranges) {
                        // Selection of the statistics for the selected range
                        final Map<StatsType, Object> statsMap = new HashMap<StatsType, Object>();

                        Statistics[] stats = geom.getStatsPerBandPerClassPerRange(0, 0, range);

                        int statNum = stats.length;

                        for (int j = 0; j < statNum; j++) {

                            Statistics singleStat = stats[j];

                            StatsType type = statistis[j];

                            statsMap.put(type, singleStat.getResult());
                        }
                        // Insertion of the results
                        rangeMap.put(count, statsMap);

                        count++;
                    }
                } else {
                    // If Range statistics are not local then all the results are stored into only
                    // one
                    // map.
                    final Map<StatsType, Object> statsMap = new HashMap<StatsType, Object>();

                    Statistics[] stats = geom.getStatsPerBandNoClassifierNoRange(0);

                    int statNum = stats.length;

                    for (int j = 0; j < statNum; j++) {

                        Statistics singleStat = stats[j];

                        StatsType type = statistis[j];

                        statsMap.put(type, singleStat.getResult());
                    }

                    rangeMap.put(count, statsMap);

                    count++;
                }

                feature2StatisticsMap.put(fid, rangeMap);
            }
        }

