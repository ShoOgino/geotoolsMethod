    /**
     * Tests the "SubsampleAverage" operation.
     */
    @Test
    public void testSubsampleAverage() {
        final GridCoverage2D originallyIndexedCoverage       = EXAMPLES.get(0);
        final GridCoverage2D indexedCoverage                 = EXAMPLES.get(2);
        final GridCoverage2D indexedCoverageWithTransparency = EXAMPLES.get(3);
        final GridCoverage2D floatCoverage                   = EXAMPLES.get(4);

        // On this one the Subsample average should do an RGB expansion
        float[] filter = new float[] {1};
        Interpolation interp = Interpolation.getInstance(Interpolation.INTERP_NEAREST);
        filteredSubsample(indexedCoverage, interp, filter);

        // On this one the Subsample average should do an RGB expansion preserving alpha.
        filteredSubsample(indexedCoverageWithTransparency, interp, filter);
        filteredSubsample(originallyIndexedCoverage, interp, filter);

        // On this one the Subsample average should do an RGB expansion.
        interp = Interpolation.getInstance(Interpolation.INTERP_BILINEAR);
        filteredSubsample(indexedCoverage, interp, filter);

        // On this one the Subsample average should do an RGB expansion preserving alpha.
        filteredSubsample(indexedCoverageWithTransparency, interp, filter);
        filteredSubsample(originallyIndexedCoverage, interp, filter);

        // On this one the Subsample average should do an RGB expansion.
        filter = new float[] { 0.5F,  1.0F /  3.0F,
                               0.0F, -1.0F / 12.0F };
        interp = Interpolation.getInstance(Interpolation.INTERP_NEAREST);
        filteredSubsample(indexedCoverage, interp, filter);

        // On this one the Subsample average should do an RGB expansion
        // preserving alpha.
        filteredSubsample(indexedCoverageWithTransparency, interp, filter);
        filteredSubsample(originallyIndexedCoverage, interp, filter);

        // On this one the Subsample average should do an RGB expansion.
        interp = Interpolation.getInstance(Interpolation.INTERP_BILINEAR);
        filteredSubsample(indexedCoverage, interp, filter);

        // On this one the Subsample average should do an RGB expansion
        // preserving alpha.
        filteredSubsample(indexedCoverageWithTransparency, interp, filter);

        // On this one the subsample average should go back to the geophysiscs
        // view before being applied.
        filteredSubsample(originallyIndexedCoverage, interp, filter);

        // On this one the subsample average should go back to the
        // geophysics view before being applied.
        filteredSubsample(floatCoverage, interp, new float[]{1});

        // Play with a rotated coverage.
        filteredSubsample(rotate(floatCoverage, Math.PI/4), interp, filter);
    }

