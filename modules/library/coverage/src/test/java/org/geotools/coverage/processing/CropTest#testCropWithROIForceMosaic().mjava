    /** Tests the "Crop" operation with a ROI set. */
    @Test
    public void testCropWithROIForceMosaic()
            throws TransformException, InterruptedException, FactoryException {
        final CoverageProcessor processor = CoverageProcessor.getInstance();

        /*
         * Get the source coverage and build the cropped envelope.
         */
        final GridCoverage2D source = coverage;
        final Envelope oldEnvelope = source.getEnvelope();
        final GeneralEnvelope cropEnvelope =
                new GeneralEnvelope(
                        new double[] {
                            oldEnvelope.getMinimum(0) /*+ oldEnvelope.getSpan(0) * 3 / 8*/,
                            oldEnvelope.getMinimum(1) /*+ oldEnvelope.getSpan(1) * 3 / 8*/
                        },
                        new double[] {
                            oldEnvelope.getMinimum(0) + oldEnvelope.getSpan(0), // * 5 / 8,
                            oldEnvelope.getMinimum(1) + oldEnvelope.getSpan(1) // * 5 / 8
                        });
        cropEnvelope.setCoordinateReferenceSystem(oldEnvelope.getCoordinateReferenceSystem());

        GeometryFactory geometryFactory =
                JTSFactoryFinder.getGeometryFactory(JTSFactoryFinder.EMPTY_HINTS);

        // Use this crop ROI
        //   (E) *---------* (A)
        //      /          |
        // (D) *           |
        //     |           |
        //     |           |
        //     |           |
        // (C) *-----------* (B)
        double min0 = cropEnvelope.getMinimum(0);
        double min1 = cropEnvelope.getMinimum(1);

        double max0 = cropEnvelope.getMaximum(0);
        double max1 = cropEnvelope.getMaximum(1);

        double mid0_E = min0 + cropEnvelope.getSpan(0) / 16;
        double mid1_D = max1 - cropEnvelope.getSpan(1) / 16;

        CoordinateSequence cs1 = new CoordinateArraySequence(6);
        // A
        cs1.setOrdinate(0, 0, max0);
        cs1.setOrdinate(0, 1, max1);

        // B
        cs1.setOrdinate(1, 0, max0);
        cs1.setOrdinate(1, 1, min1);

        // C
        cs1.setOrdinate(2, 0, min0);
        cs1.setOrdinate(2, 1, min1);

        // D
        cs1.setOrdinate(3, 0, min0);
        cs1.setOrdinate(3, 1, mid1_D);

        // E
        cs1.setOrdinate(4, 0, mid0_E);
        cs1.setOrdinate(4, 1, max1);

        // Close
        cs1.setOrdinate(5, 0, max0);
        cs1.setOrdinate(5, 1, max1);

        LinearRing shape1 = geometryFactory.createLinearRing(cs1);
        org.locationtech.jts.geom.Polygon mask = geometryFactory.createPolygon(shape1, null);

        ParameterValueGroup param = processor.getOperation("CoverageCrop").getParameters();
        param.parameter("Source").setValue(source);
        param.parameter("Envelope").setValue(cropEnvelope);
        param.parameter("ROI").setValue(mask);

        GridCoverage2D cropped = (GridCoverage2D) processor.doOperation(param);
        cropped = (GridCoverage2D) processor.doOperation(param);
        RenderedImage raster = cropped.getRenderedImage();

        // The value should be zero since we have cut away the corner
        assertEquals(0, raster.getTile(0, 0).getSample(0, 0, 0));
        assertEquals(cropEnvelope, cropped.getEnvelope());
    }

