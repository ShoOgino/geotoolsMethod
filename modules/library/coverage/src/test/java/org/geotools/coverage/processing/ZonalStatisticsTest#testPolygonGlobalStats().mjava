    @Test
    public void testPolygonGlobalStats() throws Exception {
        // Input data
        final File tiff = TestData.file(this, "test.tif");
        final File tfw = TestData.file(this, "test.tfw");

        // Reading of the input image
        final TIFFImageReader reader =
                (it.geosolutions.imageioimpl.plugins.tiff.TIFFImageReader)
                        new TIFFImageReaderSpi().createReaderInstance();
        reader.setInput(ImageIO.createImageInputStream(tiff));
        final BufferedImage image = reader.read(0);
        reader.dispose();

        // Transformation from the Raster space to the Model space
        final MathTransform transform = new WorldFileReader(tfw).getTransform();
        // Creation of the input coverage
        final GridCoverage2D coverage2D =
                CoverageFactoryFinder.getGridCoverageFactory(null)
                        .create(
                                "coverage",
                                image,
                                new GridGeometry2D(
                                        new GridEnvelope2D(
                                                PlanarImage.wrapRenderedImage(image).getBounds()),
                                        transform,
                                        DefaultGeographicCRS.WGS84),
                                new GridSampleDimension[] {new GridSampleDimension("coverage")},
                                null,
                                null);

        // Selection of the input geometries and creation of the related list.
        List<SimpleFeature> polygonList = new ArrayList<SimpleFeature>();
        FeatureIterator<SimpleFeature> featureIterator = ZonalStasTest.testPolygons.features();
        while (featureIterator.hasNext()) {
            SimpleFeature feature = featureIterator.next();
            polygonList.add(feature);
        }
        featureIterator.close();

        // choose the stats
        Set<StatsType> statsSet = new LinkedHashSet<StatsType>();
        statsSet.add(StatsType.MIN);
        statsSet.add(StatsType.MAX);
        statsSet.add(StatsType.MEAN);
        statsSet.add(StatsType.VARIANCE);
        statsSet.add(StatsType.DEV_STD);

        // Selection of the range where the calculations are performed
        List<Range> includedRanges = new ArrayList<Range>();
        includedRanges.add(RangeFactory.create(0f, false, 1300f, true, false));
        includedRanges.add(RangeFactory.create(1370f, true, 1600f, true, false));

        // select the bands to work on
        int[] bands = new int[] {0};

        // create the proper instance
        StatisticsTool statisticsTool =
                new StatisticsTool(statsSet, coverage2D, bands, polygonList, includedRanges, false);

        // do analysis
        statisticsTool.run();

        // get the results for the first polygon
        String id = "testpolygon.1";
        Map<StatsType, Object> statistics = statisticsTool.getStatistics(id).get(0);
        LOGGER.info(id + statistics.toString());
        double sdev1 = (Double) statistics.get(StatsType.DEV_STD);
        double min1 = (Double) statistics.get(StatsType.MIN);
        double mean1 = (Double) statistics.get(StatsType.MEAN);
        double var1 = (Double) statistics.get(StatsType.VARIANCE);
        double max1 = (Double) statistics.get(StatsType.MAX);

        // Percentual variation between the correct statistics and the calculated
        double minResult1 = Math.abs(1255d - min1) / 1255d * 100;
        double varResult1 = Math.abs(7874.6598d - var1) / 7874.6598d * 100;
        double maxResult1 = Math.abs(1598d - max1) / 1598d * 100;
        double meanResult1 = Math.abs(1380.5423d - mean1) / 1380.5423d * 100;
        double dev_stdResult1 = Math.abs(88.7357d - sdev1) / 88.7357d * 100;

        assertTrue(minResult1 < 10);
        assertTrue(varResult1 < 10);
        assertTrue(maxResult1 < 10);
        assertTrue(meanResult1 < 10);
        assertTrue(dev_stdResult1 < 10);

        // get the results for the second polygon
        id = "testpolygon.2";
        statistics = statisticsTool.getStatistics(id).get(0);
        LOGGER.info(id + statistics.toString());
        double sdev2 = (Double) statistics.get(StatsType.DEV_STD);
        double min2 = (Double) statistics.get(StatsType.MIN);
        double mean2 = (Double) statistics.get(StatsType.MEAN);
        double var2 = (Double) statistics.get(StatsType.VARIANCE);
        double max2 = (Double) statistics.get(StatsType.MAX);

        // Percentual variation between the correct statistics and the calculated
        double minResult2 = Math.abs(1192d - min2) / 1192d * 100;
        double varResult2 = Math.abs(1354.21d - var2) / 1354.21d * 100;
        double maxResult2 = Math.abs(1408d - max2) / 1408d * 100;
        double meanResult2 = Math.abs(1248.38d - mean2) / 1248.38d * 100;
        double dev_stdResult2 = Math.abs(36.7996d - sdev2) / 36.7996d * 100;

        assertTrue(minResult2 < 10);
        assertTrue(varResult2 < 10);
        assertTrue(maxResult2 < 10);
        assertTrue(meanResult2 < 10);
        assertTrue(dev_stdResult2 < 10);

        // get the results for the third polygon
        id = "testpolygon.3";
        statistics = statisticsTool.getStatistics(id).get(0);
        LOGGER.info(id + statistics.toString());
        double sdev3 = (Double) statistics.get(StatsType.DEV_STD);
        double min3 = (Double) statistics.get(StatsType.MIN);
        double mean3 = (Double) statistics.get(StatsType.MEAN);
        double var3 = (Double) statistics.get(StatsType.VARIANCE);
        double max3 = (Double) statistics.get(StatsType.MAX);

        // Percentual variation between the correct statistics and the calculated
        double minResult3 = Math.abs(1173d - min3) / 1173d * 100;
        double varResult3 = Math.abs(957.3594d - var3) / 957.3594d * 100;
        double maxResult3 = Math.abs(1300d - max3) / 1300d * 100;
        double meanResult3 = Math.abs(1266.3876d - mean3) / 1266.3876d * 100;
        double dev_stdResult3 = Math.abs(30.9411d - sdev3) / 30.9411d * 100;

        assertTrue(minResult3 < 10);
        assertTrue(varResult3 < 10);
        assertTrue(maxResult3 < 10);
        assertTrue(meanResult3 < 10);
        assertTrue(dev_stdResult3 < 10);

        reader.dispose();
        coverage2D.dispose(true);
        image.flush();
    }

