    /**
     * Tests the "SubsampleAverage" operation.
     */
    @Test
    public void testSubsampleAverage() {
        final GridCoverage2D originallyIndexedCoverage       = EXAMPLES.get(0);
        final GridCoverage2D indexedCoverage                 = EXAMPLES.get(2);
        final GridCoverage2D indexedCoverageWithTransparency = EXAMPLES.get(3);
        final GridCoverage2D floatCoverage                   = EXAMPLES.get(4);

        // On this one the Subsample average should do an RGB expansion.
        subsampleAverage(indexedCoverage.view(GEOPHYSICS), false);

        // On this one the Subsample average should do an RGB expansion preserving alpha.
        subsampleAverage(indexedCoverageWithTransparency.view(GEOPHYSICS), false);

        // On this one the subsample average should go back to the geophysics
        // view before being applied.
        subsampleAverage(originallyIndexedCoverage.view(GEOPHYSICS), false);

        // On this one the Subsample average should do an RGB expansion.
        subsampleAverage(indexedCoverage.view(PACKED), false);

        // On this one the Subsample average should do an RGB expansion preserving alpha.
        subsampleAverage(indexedCoverageWithTransparency.view(PACKED), false);

        // On this one the subsample average should go back to the geophysics
        // view before being applied.
        subsampleAverage(originallyIndexedCoverage.view(PACKED), false);

        // On this one the subsample average should NOT go back to the
        // geophysics view before being applied.
        subsampleAverage(floatCoverage.view(PACKED), true);

        // On this one the subsample average should go back to the
        // geophysiscs view before being applied.
        subsampleAverage(floatCoverage.view(PACKED), true);

        // On this one the subsample average should go back to the
        // geophysiscs view before being applied.
        subsampleAverage(floatCoverage.view(PACKED), true);

        // Play with a rotated coverage.
        subsampleAverage(rotate(floatCoverage.view(GEOPHYSICS), Math.PI/4), false);
    }

