    @Test
    public void testPolygonZoneLocalStats() throws Exception {
        final File tiff = TestData.file(this, "test.tif");
        final File tfw = TestData.file(this, "test.tfw");

        final TIFFImageReader reader =
                (it.geosolutions.imageioimpl.plugins.tiff.TIFFImageReader)
                        new TIFFImageReaderSpi().createReaderInstance();
        reader.setInput(ImageIO.createImageInputStream(tiff));
        final BufferedImage image = reader.read(0);
        reader.dispose();

        final MathTransform transform = new WorldFileReader(tfw).getTransform();
        final GridCoverage2D coverage2D =
                CoverageFactoryFinder.getGridCoverageFactory(null)
                        .create(
                                "coverage",
                                image,
                                new GridGeometry2D(
                                        new GridEnvelope2D(
                                                PlanarImage.wrapRenderedImage(image).getBounds()),
                                        transform,
                                        DefaultGeographicCRS.WGS84),
                                new GridSampleDimension[] {new GridSampleDimension("coverage")},
                                null,
                                null);

        List<SimpleFeature> polygonList = new ArrayList<>();
        try (FeatureIterator<SimpleFeature> featureIterator = testPolygons.features()) {
            while (featureIterator.hasNext()) {
                SimpleFeature feature = featureIterator.next();
                polygonList.add(feature);
            }
        }

        // choose the stats
        Set<Statistic> statsSet = new LinkedHashSet<>();
        statsSet.add(Statistic.MIN);
        statsSet.add(Statistic.MAX);
        statsSet.add(Statistic.MEAN);
        statsSet.add(Statistic.VARIANCE);
        statsSet.add(Statistic.SDEV);
        statsSet.add(Statistic.RANGE);

        // select the bands to work on
        Integer[] bands = {0};
        List<Range<Double>> inclusionRanges = new ArrayList<>();
        inclusionRanges.add(new Range<>(Double.valueOf(0), false, Double.valueOf(1300), true));
        inclusionRanges.add(new Range<>(Double.valueOf(1370), true, Double.valueOf(1600), true));

        // create the proper instance
        StatisticsTool statisticsTool =
                new StatisticsTool(
                        statsSet,
                        coverage2D,
                        bands,
                        polygonList,
                        inclusionRanges,
                        Range.Type.INCLUDE,
                        true);

        // do analysis
        statisticsTool.run();

        // get the results
        String id = "testpolygon.1";
        Map<Statistic, List<Result>> statistics = statisticsTool.getStatistics(id);
        LOGGER.info(id + statistics.toString());
        Assert.assertEquals(
                statistics.get(Statistic.RANGE).get(0).getValue().doubleValue(), 45.0, DELTA);
        Assert.assertEquals(
                statistics.get(Statistic.RANGE).get(1).getValue().doubleValue(), 228.0, DELTA);
        Assert.assertEquals(
                statistics.get(Statistic.SDEV).get(0).getValue().doubleValue(), 11.7972, DELTA);
        Assert.assertEquals(
                statistics.get(Statistic.SDEV).get(1).getValue().doubleValue(), 63.7335, DELTA);
        Assert.assertEquals(
                statistics.get(Statistic.MIN).get(0).getValue().doubleValue(), 1255.0, DELTA);
        Assert.assertEquals(
                statistics.get(Statistic.MIN).get(1).getValue().doubleValue(), 1370.0, DELTA);
        Assert.assertEquals(
                statistics.get(Statistic.MEAN).get(0).getValue().doubleValue(), 1283.1634, DELTA);
        Assert.assertEquals(
                statistics.get(Statistic.MEAN).get(1).getValue().doubleValue(), 1433.8979, DELTA);
        Assert.assertEquals(
                statistics.get(Statistic.VARIANCE).get(0).getValue().doubleValue(),
                139.1754,
                DELTA);
        Assert.assertEquals(
                statistics.get(Statistic.VARIANCE).get(1).getValue().doubleValue(),
                4061.9665,
                DELTA);
        Assert.assertEquals(
                statistics.get(Statistic.MAX).get(0).getValue().doubleValue(), 1300.0, DELTA);
        Assert.assertEquals(
                statistics.get(Statistic.MAX).get(1).getValue().doubleValue(), 1598.0, DELTA);

        reader.dispose();
        coverage2D.dispose(true);
        image.flush();
    }

