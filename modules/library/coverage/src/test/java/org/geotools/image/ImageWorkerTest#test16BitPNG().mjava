    @Test
    public void test16BitPNG() throws Exception {
        // the resource has been compressed since the palette is way larger than the image itself,
        // and the palette does not get compressed
        InputStream gzippedStream =
                ImageWorkerTest.class.getResource("test-data/sf-sfdem.tif.gz").openStream();
        GZIPInputStream is = new GZIPInputStream(gzippedStream);
        ImageInputStream iis = null;
        try {
            iis = ImageIO.createImageInputStream(is);
            ImageReader reader = new TIFFImageReaderSpi().createReaderInstance(iis);
            reader.setInput(iis);
            BufferedImage bi = reader.read(0);
            reader.dispose();
            IndexColorModel icm = (IndexColorModel) bi.getColorModel();
            assertEquals(65536, icm.getMapSize());

            final File outFile = TestData.temp(this, "temp.png");
            ImageWorker worker = new ImageWorker(bi);
            worker.writePNG(outFile, "FILTERED", 0.75f, true, false);
            worker.dispose();

            // make sure we can read it
            BufferedImage back = ImageIO.read(outFile);

            // we expect a RGB one
            ComponentColorModel ccm = (ComponentColorModel) back.getColorModel();
            assertEquals(3, ccm.getNumColorComponents());

            // now ask to write paletted
            worker = new ImageWorker(bi);
            worker.writePNG(outFile, "FILTERED", 0.75f, true, true);
            worker.dispose();

            // make sure we can read it
            back = ImageIO.read(outFile);

            // we expect a RGB one
            icm = (IndexColorModel) back.getColorModel();
            assertEquals(3, icm.getNumColorComponents());
            assertTrue(icm.getMapSize() <= 256);
        } finally {
            IOUtils.closeQuietly(is);
            IOUtils.closeQuietly(iis);
        }
    }

