    /**
     * Constructs a grid coverage from the specified {@linkplain WritableRaster raster} and
     * "{@linkplain GridGeometry2D#getGridToCoordinateSystem grid to CRS}" transform.
     *
     * @param name The grid coverage name.
     * @param raster The data (may be floating point numbers). {@linkplain Float#NaN NaN} values are
     *     mapped to a transparent color.
     * @param crs The coordinate reference system. This specifies the CRS used when accessing a grid
     *     coverage with the {@code evaluate} methods.
     * @param gridToCRS The math transform from grid to coordinate reference system.
     * @param minValues The minimal value for each band in the raster, or {@code null} for computing
     *     it automatically.
     * @param maxValues The maximal value for each band in the raster, or {@code null} for computing
     *     it automatically.
     * @param units The units of sample values, or {@code null} if unknow.
     * @param colors The colors to use for values from {@code minValues} to {@code maxValues} for
     *     each bands, or {@code null} for a default color palette. If non-null, each arrays {@code
     *     colors[b]} may have any length; colors will be interpolated as needed.
     * @param hints An optional set of rendering hints, or {@code null} if none. Those hints will
     *     not affect the grid coverage to be created. However, they may affect the grid coverage to
     *     be returned by <code>{@link GridCoverage2D#geophysics
     *                    geophysics}(false)</code>, i.e. the view to be used at rendering time. The
     *     optional {@link Hints#SAMPLE_DIMENSION_TYPE SAMPLE_DIMENSION_TYPE} hint specifies the
     *     {@link SampleDimensionType} to be used at rendering time, which can be one of {@link
     *     SampleDimensionType#UNSIGNED_8BITS UNSIGNED_8BITS} or {@link
     *     SampleDimensionType#UNSIGNED_16BITS UNSIGNED_16BITS}.
     * @return The new grid coverage.
     */
    public GridCoverage2D create(
            final CharSequence name,
            final WritableRaster raster,
            final CoordinateReferenceSystem crs,
            final MathTransform gridToCRS,
            final double[] minValues,
            final double[] maxValues,
            final Unit<?> units,
            final Color[][] colors,
            final RenderingHints hints) {
        final GridSampleDimension[] bands =
                RenderedSampleDimension.create(
                        name, raster, minValues, maxValues, units, colors, hints);
        final ColorModel model =
                bands[0].getColorModel(0, bands.length, raster.getDataBuffer().getDataType());
        final RenderedImage image = new BufferedImage(model, raster, false, null);
        return create(name, image, crs, gridToCRS, bands, null, null);
    }

