    /**
     * Wrap the src coverage in the dst layout. <br>
     * The resulting RenderedImage will contain the data in src, and will be accessible via the grid
     * specs of dst,
     *
     * @param src the data coverage to be remapped on dst grid
     * @param dst the provider of the final grid
     * @param nodata the nodata values to set for cells not covered by src but included in dst. All
     *     bands will use the related nodata value.
     * @param roi
     * @return an instance of Coverage2RenderedImageAdapter
     */
    public static GridCoverage2DRIA create(
            final GridCoverage2D src,
            final GridCoverage2D dst,
            final double[] nodata,
            Hints hints,
            ROI roi) {

        // === Create Layout
        final ImageLayout imageLayout = new ImageLayout(dst.getRenderedImage());

        //
        // SampleModel and ColorModel are related to data itself, so we
        // copy them from the source

        imageLayout.setColorModel(src.getRenderedImage().getColorModel());
        imageLayout.setSampleModel(src.getRenderedImage().getSampleModel());

        // === BorderExtender
        //
        // We have yet to check for it usefulness: it might be more convenient
        // to check for region overlapping and return a nodata value by hand,
        // so to avoid problems with interpolation at source raster borders.
        //
        BorderExtender extender =
                new BorderExtenderConstant(new double[] {nodata != null ? nodata[0] : 0d});

        // Check if the input coverage contains a ROI
        ROI property = CoverageUtilities.getROIProperty(src);
        if (property != null) {
            roi = roi != null ? roi.intersect(property) : property;
        }

        return new GridCoverage2DRIA(
                src,
                dst.getGridGeometry(),
                vectorize(src.getRenderedImage()),
                imageLayout,
                null,
                false,
                extender,
                Interpolation.getInstance(Interpolation.INTERP_NEAREST),
                nodata,
                roi,
                hints);
    }

