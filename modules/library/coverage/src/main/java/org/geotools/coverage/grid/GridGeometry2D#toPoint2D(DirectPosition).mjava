    /**
     * Converts the specified point into a two-dimensional one.
     *
     * @param  point The point to transform into a {@link Point2D} object.
     * @return The specified point as a {@link Point2D} object.
     * @throws CannotEvaluateException if a reprojection was required and failed.
     * @throws MismatchedDimensionException if the point doesn't have the expected dimension.
     */
    Point2D toPoint2D(final DirectPosition point)
            throws CannotEvaluateException, MismatchedDimensionException
    {
        /*
         * If the point contains a CRS, transforms the point on the fly
         */
        final CoordinateReferenceSystem sourceCRS = point.getCoordinateReferenceSystem();
        if (sourceCRS != null) {
            synchronized (this) {
                if (arbitraryToInternal == null) {
                    final CoordinateReferenceSystem targetCRS = getCoordinateReferenceSystem2D();
                    arbitraryToInternal = new TransformedDirectPosition(sourceCRS, targetCRS, null);
                }
                try {
                    arbitraryToInternal.transform(point);
                } catch (TransformException exception) {
                    throw new CannotEvaluateException(Errors.format(
                            ErrorKeys.CANT_EVALUATE_$1, 
                            AbstractGridCoverage.toString(point, Locale.getDefault())), exception);
                }
                return arbitraryToInternal.toPoint2D();
            }
        }

        /*
         * If the point did not contains any CRS, take only the axis specified by the grid
         * geometry and copy in a new Point2D instance.
         *
         * Note: this method was previously in GridCoverage2D and, at this point, there was
         * a check that the number of point dimensions were the same as that of the coverage's
         * CRS. Here this is modified to just check that the point is at least 2D - mbedward
         */
        if (point.getDimension() < 2) {
            throw new MismatchedDimensionException(Errors.format(
                    ErrorKeys.MISMATCHED_DIMENSION_$2, point.getDimension(), 2));
        }

        if (point instanceof Point2D) {
            return (Point2D) point;
        }
        assert axisDimensionX < axisDimensionY;
        return new Point2D.Double(point.getOrdinate(axisDimensionX),
                                  point.getOrdinate(axisDimensionY));
    }

