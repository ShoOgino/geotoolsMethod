    /**
     * Creates a new instance of {@link GTCropOpImage} in the rendered layer.
     * 
     * @param paramBlock
     *            parameter block with parameters minx, miny, width height
     * 
     * @param renderHints
     *            optional rendering hints which may be used to pass down a tile scheduler and tile
     *            cache
     */
    public RenderedImage create(ParameterBlock paramBlock, RenderingHints renderingHints) {
        RenderedImage image = (RenderedImage) paramBlock.getSource(0);
        float x = paramBlock.getFloatParameter(GTCropDescriptor.X_ARG);
        float y = paramBlock.getFloatParameter(GTCropDescriptor.Y_ARG);
        float width = paramBlock.getFloatParameter(GTCropDescriptor.WIDTH_ARG);
        float height = paramBlock.getFloatParameter(GTCropDescriptor.HEIGHT_ARG);

        // only leave tile cache and tile scheduler (we can't instantiate directly RenderingHints
        // as it won't allow for a null tile cache, even if the rest of JAI handles that peachy
        Map<Key, Object> tmp = new HashMap<RenderingHints.Key, Object>();
        for (Object key : renderingHints.keySet()) {
            if (key == JAI.KEY_TILE_CACHE || key == JAI.KEY_TILE_SCHEDULER) {
                tmp.put((Key) key, renderingHints.get(key));
            }
        }
        RenderingHints local = new RenderingHints(tmp);
        

        return new GTCropOpImage(image, x, y, width, height, local);
    }

