	/**
	 * Parses an "UNIT" element. This element has the following pattern:
	 * 
	 * <blockquote><code>
	 * UNIT["<name>", <conversion factor> {,<authority>}]
	 * </code></blockquote>
	 * 
	 * @param unit
	 *            The parent element.
	 * @param unit
	 *            The contextual unit. Usually {@link SI#METRE} or
	 *            {@link SI#RADIAN}.
	 * @param metadata
	 * @return The "UNIT" element as an {@link Unit} object.
	 * @todo Authority code is currently ignored. We may consider to create a
	 *       subclass of {@link Unit} which implements {@link IdentifiedObject}
	 *       in a future version.
	 */
	private void parseUnit(Unit unit, int model,
			GeoTiffIIOMetadataEncoder metadata) {

		// final UnitFormat unitFormat = UnitFormat.getStandardInstance();
		// user defined
		metadata.addGeoShortParam(
				model == 0 ? GeoTiffGCSCodes.GeogAngularUnitsGeoKey
						: GeoTiffPCSCodes.ProjLinearUnitsGeoKey, 32767);

		// preparing the string to write here

		// citation
//		metadata.addGeoAscii(GeoTiffGCSCodes.GeogCitationGeoKey, unit
//				.toString());// unitFormat.labelFor(unit)

		Unit base = null;
		if (SI.METER.isCompatible(unit)) {
			base = SI.METER;
		} else if (SI.SECOND.isCompatible(unit)) {
			base = SI.SECOND;
		} else if (SI.RADIAN.isCompatible(unit)) {
			if (!Unit.ONE.equals(unit)) {
				base = SI.RADIAN;
			}
		}
		if (base != null) {
			metadata.addGeoDoubleParam(
					model == 0 ? GeoTiffGCSCodes.GeogAngularUnitSizeGeoKey
							: GeoTiffGCSCodes.GeogLinearUnitSizeGeoKey, unit
							.getConverterTo(base).convert(1));
		} else
			metadata.addGeoDoubleParam(
					model == 0 ? GeoTiffGCSCodes.GeogAngularUnitSizeGeoKey
							: GeoTiffGCSCodes.GeogLinearUnitSizeGeoKey, 1);
	}

