    /**
     * Specifies that the image should be tiled. The <code>tileWidth</code> and <code>tileHeight
     * </code> parameters specify the width and height of the tiles in memory. If the tile width or
     * height is greater than the width or height of the image, the image is not tiled in that
     * dimension.
     *
     * @param tileWidth the width of each tile.
     * @param tileHeight the height of each tile.
     * @exception IllegalArgumentException if the tile size is not within one of the allowable
     *     ranges returned by <code>getPreferredTileSizes</code>.
     * @exception IllegalArgumentException if <code>tileWidth</code> or <code>tileHeight</code> is
     *     less than or equal to 0.
     * @see #canWriteTiles
     * @see #canOffsetTiles
     * @see #getTileWidth()
     * @see #getTileHeight()
     * @see #getTileGridXOffset()
     * @see #getTileGridYOffset()
     */
    public void setTiling(int tileWidth, int tileHeight) {

        if (tileWidth <= 0 || tileHeight <= 0) {
            throw new IllegalArgumentException("tile dimensions are non-positive!");
        }

        if (preferredTileSizes != null) {
            boolean ok = true;
            final int length = preferredTileSizes.length;
            for (int i = 0; i < length; i += 2) {
                Dimension min = preferredTileSizes[i];
                Dimension max = preferredTileSizes[i + 1];
                if ((tileWidth < min.width)
                        || (tileWidth > max.width)
                        || (tileHeight < min.height)
                        || (tileHeight > max.height)) {
                    ok = false;
                    break;
                }
            }
            if (!ok) {
                throw new IllegalArgumentException("Illegal tile size!");
            }
        }

        this.tilingSet = true;
        this.tileWidth = tileWidth;
        this.tileHeight = tileHeight;
    }

