    /**
     * Extraction of the sources from the parameter called SOURCES. The sources are stored inside a List. The output of the method is an ViewType to
     * use in post processing.
     * 
     * @param parameters
     * @param sources
     * @return
     * @throws ParameterNotFoundException
     * @throws InvalidParameterValueException
     */
    private ViewType extractSources(final ParameterValueGroup parameters,
            final Collection<GridCoverage2D> sources) throws ParameterNotFoundException,
            InvalidParameterValueException {
        Utilities.ensureNonNull("parameters", parameters);
        Utilities.ensureNonNull("sources", sources);

        // Extraction of the sources from the parameters
        Object srcCoverages = parameters.parameter("sources").getValue();

        if (!(srcCoverages instanceof Collection) || ((Collection) srcCoverages).isEmpty()
                || !(((Collection) srcCoverages).iterator().next() instanceof GridCoverage2D)) {
            throw new InvalidParameterValueException(Errors.format(ErrorKeys.ILLEGAL_ARGUMENT_$1,
                    "sources"), "sources", srcCoverages);
        }
        // Collection of the sources to use
        Collection<GridCoverage2D> sourceCoverages = (Collection<GridCoverage2D>) srcCoverages;
        // ViewType object
        ViewType type = null;
        // Check if the operation must be computed on GeoPhysical values
        final boolean computeOnGeophysicsValues = computeOnGeophysicsValues(parameters);
        // Counter for the coverages
        int i = 0;
        // Cycle on all the Sources
        for (GridCoverage2D source : sourceCoverages) {
            if (source != null) {
                // Add the view type to the coverage
                if (computeOnGeophysicsValues) {
                    final GridCoverage2D old = source;
                    source = source.view(ViewType.GEOPHYSICS);
                    if (i == PRIMARY_SOURCE_INDEX) {
                        type = (old == source) ? ViewType.GEOPHYSICS : ViewType.PACKED;
                    }
                }
                // Store the i-th source
                sources.add(source);
            }
            // Counter update
            i++;
        }
        return type;
    }

