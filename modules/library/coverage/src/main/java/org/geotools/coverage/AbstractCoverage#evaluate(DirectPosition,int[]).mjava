    /**
     * Returns a sequence of integer values for a given point in the coverage. A value for each
     * {@linkplain SampleDimension sample dimension} is included in the sequence. The default
     * interpolation type used when accessing grid values for points which fall between grid cells
     * is {@linkplain javax.media.jai.InterpolationNearest nearest neighbor}, but it can be changed
     * by some {@linkplain org.geotools.coverage.grid.Interpolator2D subclasses}. The CRS of the
     * point is the same as the grid coverage {@linkplain #getCoordinateReferenceSystem coordinate
     * reference system}.
     *
     * @param coord The coordinate point where to evaluate.
     * @param dest An array in which to store values, or {@code null} to create a new array.
     * @return The {@code dest} array, or a newly created array if {@code dest} was null.
     * @throws PointOutsideCoverageException if the evaluation failed because the input point has
     *     invalid coordinates.
     * @throws CannotEvaluateException if the values can't be computed at the specified coordinate
     *     for an other reason. It may be thrown if the coverage data type can't be converted to
     *     {@code int} by an identity or widening conversion. Subclasses may relax this constraint
     *     if appropriate.
     */
    @Override
    public int[] evaluate(final DirectPosition coord, int[] dest)
            throws PointOutsideCoverageException, CannotEvaluateException {
        final Object array = evaluate(coord);
        try {
            final int length = Array.getLength(array);
            if (dest == null) {
                dest = new int[length];
            }
            for (int i = 0; i < length; i++) {
                dest[i] = Array.getInt(array, i);
            }
        } catch (IllegalArgumentException exception) {
            throw new CannotEvaluateException(formatErrorMessage(array), exception);
        }
        return dest;
    }

