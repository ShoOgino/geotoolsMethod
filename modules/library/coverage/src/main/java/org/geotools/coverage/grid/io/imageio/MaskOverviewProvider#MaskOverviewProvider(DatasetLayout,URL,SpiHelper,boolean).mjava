    public MaskOverviewProvider(
            DatasetLayout layout, URL inputFile, SpiHelper spiHelper, boolean skipExternalLookup)
            throws IOException {

        sourceSpiProvider = spiHelper.getSourceSpiProvider();
        ImageReaderSpi readerSpi = sourceSpiProvider.getReaderSpi();
        ImageInputStreamSpi streamSpi = sourceSpiProvider.getStreamSpi();
        this.fileURL = (URL) sourceSpiProvider.getSource();
        this.layout = layout;

        // Handling Overviews
        hasDatasetLayout = layout != null;
        boolean hasExternalOverviews = false;
        if (!skipExternalLookup) {
            ovrURL = new URL(inputFile.toString() + OVR_EXTENSION);
            if (hasDatasetLayout && layout.getExternalOverviews() != null) {
                ovrURL = URLs.fileToUrl(layout.getExternalOverviews());
            }
            // Creating overview file URL
            overviewStreamSpi = streamSpi == null ? getInputStreamSPIFromURL(ovrURL) : streamSpi;
            ImageInputStream ovrStream = null;
            try {
                ovrStream =
                        overviewStreamSpi.createInputStreamInstance(
                                ovrURL, ImageIO.getUseCache(), ImageIO.getCacheDirectory());
                if (ovrStream == null) {
                    // No Overview file so we fall back to the original file spis
                    overviewStreamSpi = streamSpi;
                    overviewReaderSpi = readerSpi;
                } else {
                    overviewReaderSpi = getReaderSpiFromStream(null, ovrStream);
                    hasExternalOverviews = true;
                }
            } catch (Exception e) {
                if (LOGGER.isLoggable(Level.WARNING)) {
                    LOGGER.log(Level.WARNING, "Unable to create a Reader for File: " + ovrURL, e);
                }
                throw new IllegalArgumentException(e);
            } finally {
                if (ovrStream != null) {
                    try {
                        ovrStream.close();
                    } catch (Exception e) {
                        if (LOGGER.isLoggable(Level.SEVERE)) {
                            LOGGER.log(Level.SEVERE, e.getMessage(), e);
                        }
                    }
                }
            }
        }
        // Getting number of Overviews
        int numOverviews = 0;
        if (hasDatasetLayout) {
            numInternalOverviews = layout.getNumInternalOverviews();
            // layout.getNumExternalOverviews() may return -1 when no external file is present
            numExternalOverviews =
                    layout.getNumExternalOverviews() > 0 ? layout.getNumExternalOverviews() : 0;
        } else if (!spiHelper.isMultidim()) {
            // Reading image number
            numInternalOverviews = getNumOverviews(inputFile, streamSpi, readerSpi);
            numExternalOverviews = 0;
            if (hasExternalOverviews) {
                // adding +1 since the base level of the external overview is an overview in itself
                numExternalOverviews =
                        getNumOverviews(ovrURL, this.overviewStreamSpi, this.overviewReaderSpi) + 1;
            }
        }
        numOverviews = numInternalOverviews + numExternalOverviews;
        if (numOverviews < 0) {
            numOverviews = 0;
        }
        // Setting overviews Number
        this.numOverviews = numOverviews;

        // Mask Management
        if (layout != null) {
            numInternalMasks = layout.getNumInternalMasks();
            numExternalMasks = layout.getNumExternalMasks() > 0 ? layout.getNumExternalMasks() : 0;
            numExternalMasksOverviews =
                    layout.getNumExternalMaskOverviews() > 0
                            ? layout.getNumExternalMaskOverviews()
                            : 0;
            hasExternalMasks = numExternalMasks > 0;
            hasExternalMasksOverviews = hasExternalMasks && numExternalMasksOverviews > 0;
            if (hasExternalMasks) {
                // Mask URL
                maskURL = URLs.fileToUrl(layout.getExternalMasks());
                // Creating cached SPIs
                maskStreamSpi = getInputStreamSPIFromURL(maskURL);
                ImageInputStream maskStream = null;
                try {
                    maskStream =
                            maskStreamSpi.createInputStreamInstance(
                                    maskURL, ImageIO.getUseCache(), ImageIO.getCacheDirectory());
                    maskReaderSpi = getReaderSpiFromStream(readerSpi, maskStream);
                } catch (Exception e) {
                    if (LOGGER.isLoggable(Level.WARNING)) {
                        LOGGER.log(
                                Level.WARNING, "Unable to create a Reader for File: " + maskURL, e);
                    }
                    throw new IllegalArgumentException(e);
                } finally {
                    if (maskStream != null) {
                        try {
                            maskStream.close();
                        } catch (Exception e) {
                            if (LOGGER.isLoggable(Level.SEVERE)) {
                                LOGGER.log(Level.SEVERE, e.getMessage(), e);
                            }
                        }
                    }
                }
                // Handling external mask overviews
                if (hasExternalMasksOverviews) {
                    // Mask URL
                    maskOvrURL = URLs.fileToUrl(layout.getExternalMaskOverviews());
                    // Creating cached SPIs
                    maskOvrStreamSpi = getInputStreamSPIFromURL(maskOvrURL);
                    ImageInputStream maskOvrStream = null;
                    try {
                        maskOvrStream =
                                maskOvrStreamSpi.createInputStreamInstance(
                                        maskOvrURL,
                                        ImageIO.getUseCache(),
                                        ImageIO.getCacheDirectory());
                        maskOvrReaderSpi = getReaderSpiFromStream(readerSpi, maskOvrStream);
                    } catch (Exception e) {
                        if (LOGGER.isLoggable(Level.WARNING)) {
                            LOGGER.log(
                                    Level.WARNING,
                                    "Unable to create a Reader for File: " + maskOvrURL,
                                    e);
                        }
                        throw new IllegalArgumentException(e);
                    } finally {
                        if (maskOvrStream != null) {
                            try {
                                maskOvrStream.close();
                            } catch (Exception e) {
                                if (LOGGER.isLoggable(Level.SEVERE)) {
                                    LOGGER.log(Level.SEVERE, e.getMessage(), e);
                                }
                            }
                        }
                    }
                } else {
                    // No Mask Overview file so we fall back to the original mask spis
                    maskOvrStreamSpi = maskStreamSpi;
                    maskOvrReaderSpi = maskReaderSpi;
                }
            } else {
                // No Mask file so we fall back to the original file spis
                maskStreamSpi = streamSpi;
                maskReaderSpi = readerSpi;
            }
        }
    }

