    /**
     * Parsing ProjectionGeoKey 3074 for a <code>ProjectedCRS</code>.
     *
     * @param projectedCRS The <code>ProjectedCRS</code> to parse.
     * @param metadata
     */
    private void parseProjection(
            final ProjectedCRS projectedCRS, final GeoTiffIIOMetadataEncoder metadata) {
        // getting the conversion
        final Conversion conversion = projectedCRS.getConversionFromBase();
        final int code = getEPSGCode(conversion);
        if (GeoTiffIIOMetadataEncoder.isTiffUShort(code)) {
            metadata.addGeoShortParam(GeoTiffPCSCodes.ProjectionGeoKey, code);
            return;
        }

        // user defined projection
        // key 3074
        metadata.addGeoShortParam(
                GeoTiffPCSCodes.ProjectionGeoKey, GeoTiffConstants.GTUserDefinedGeoKey);

        final OperationMethod method = conversion.getMethod();
        // looking for the parameters
        String name = method.getName().getCode();
        name = name.trim();
        name = name.replace(' ', '_');
        final MathTransform mt = conversion.getMathTransform();
        final MapProjection projTransf;
        if (!(mt instanceof ConcatenatedTransform)) projTransf = (MapProjection) mt;
        else {
            final ConcatenatedTransform tr = (ConcatenatedTransform) mt;
            final MathTransform m1 = tr.transform1, m2 = tr.transform2;
            if (m1 instanceof MapProjection) projTransf = (MapProjection) m1;
            else projTransf = (MapProjection) m2;
        }

        // key 3075 and parameters
        parseCoordinateProjectionTransform(projTransf, name, metadata);

        // parse linear unit
        parseLinearUnit(projectedCRS, metadata);
    }

