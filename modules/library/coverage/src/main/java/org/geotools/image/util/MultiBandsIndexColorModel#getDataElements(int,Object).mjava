    /**
     * Returns a data element array representation of a pixel in this color model, given an integer
     * pixel representation in the default RGB color model.
     *
     * <p>This method returns an array with a length equals to the number of bands specified to the
     * constructor ({@code IndexColorModel} would returns an array of length 1). All array elements
     * are set to the same value. Replicating the pixel value is a somewhat arbitrary choice, but
     * this choice make this image appears as a gray scale image if the underlying {@link
     * DataBuffer} were displayed again with a RGB color model instead of this one. Such a gray
     * scale image seems more neutral than an image where only the Red component would vary.
     *
     * <p>All other {@code getDataElement} methods in this color model are ultimately defined in
     * terms of this method, so overriding this method should be enough.
     */
    public Object getDataElements(final int RGB, Object pixel) {
        if (pixel == null) {
            switch (transferType) {
                case DataBuffer.TYPE_SHORT: // fall through
                case DataBuffer.TYPE_USHORT:
                    pixel = new short[numBands];
                    break;
                case DataBuffer.TYPE_BYTE:
                    pixel = new byte[numBands];
                    break;
                case DataBuffer.TYPE_INT:
                    pixel = new int[numBands];
                    break;
                default:
                    throw new UnsupportedOperationException(unsupported());
            }
        }
        pixel = super.getDataElements(RGB, pixel);
        switch (transferType) {
            case DataBuffer.TYPE_SHORT: // fall through
            case DataBuffer.TYPE_USHORT:
                {
                    final short[] array = (short[]) pixel;
                    Arrays.fill(array, 1, numBands, array[0]);
                    break;
                }
            case DataBuffer.TYPE_BYTE:
                {
                    final byte[] array = (byte[]) pixel;
                    Arrays.fill(array, 1, numBands, array[0]);
                    break;
                }
            case DataBuffer.TYPE_INT:
                {
                    final int[] array = (int[]) pixel;
                    Arrays.fill(array, 1, numBands, array[0]);
                    break;
                }
            default:
                throw new UnsupportedOperationException(unsupported());
        }
        return pixel;
    }

