	/**
	 * Converts a JTS {@link Polygon}, which represents a ROI, int an AWT
	 * {@link java.awt.Polygon} by means of the provided {@link MathTransform}.
	 *
	 * <p>
	 * It also stores the points for this polygon into the provided {@link List}.
	 *
	 * @param roiInput
	 *            the input ROI as a JTS {@link Polygon}.
	 * @param worldToGridTransform
	 *            the {@link MathTransform} to apply to the input ROI.
	 * @param points
	 *            a {@link List} that should hold the transformed points.
	 * @return an AWT {@link java.awt.Polygon}.
	 * @throws TransformException
	 *             in case the provided {@link MathTransform} chokes.
	 */
	public static java.awt.Polygon convertPolygonToPointArray(final Polygon roiInput,
			MathTransform worldToGridTransform, List<Point2D> points)
			throws TransformException {
		final boolean isIdentity = worldToGridTransform.isIdentity();
		final double coords[] = new double[2];
		final LineString exteriorRing = roiInput.getExteriorRing();
		final CoordinateSequence exteriorRingCS = exteriorRing
				.getCoordinateSequence();
		final int numCoords = exteriorRingCS.size();
		final java.awt.Polygon retValue = new java.awt.Polygon();
		for (int i = 0; i < numCoords; i++) {
			// get the actual coord
			coords[0] = exteriorRingCS.getX(i);
			coords[1] = exteriorRingCS.getY(i);

			// transform it
			if (!isIdentity)
				worldToGridTransform.transform(coords, 0, coords, 0, 1);

			// send it back to the returned polygon
			final int x = (int) (coords[0] + 0.5d);
			final int y = (int) (coords[1] + 0.5d);
			if (points != null)
				points.add(new Point2D.Double(coords[0],coords[1]));

			// send it back to the returned polygon
			retValue.addPoint(x, y);

		}

		// return the created polygon.
		return retValue;
	}

