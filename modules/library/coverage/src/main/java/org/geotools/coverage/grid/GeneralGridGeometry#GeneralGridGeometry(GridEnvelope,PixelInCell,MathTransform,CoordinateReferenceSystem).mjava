    /**
     * Constructs a new grid geometry from a grid range and a {@linkplain MathTransform math
     * transform} mapping pixel {@linkplain PixelInCell#CELL_CENTER center} or {@linkplain
     * PixelInCell#CELL_CORNER corner}. This is the most general constructor, the one that gives the
     * maximal control over the grid geometry to be created.
     *
     * @param gridRange The valid coordinate range of a grid coverage, or {@code null} if none.
     * @param anchor {@link PixelInCell#CELL_CENTER CELL_CENTER} for OGC conventions or {@link
     *     PixelInCell#CELL_CORNER CELL_CORNER} for Java2D/JAI conventions.
     * @param gridToCRS The math transform which allows for the transformations from grid
     *     coordinates to real world earth coordinates. May be {@code null}, but this is not
     *     recommended.
     * @param crs The coordinate reference system for the "real world" coordinates, or {@code null}
     *     if unknown. This CRS is given to the {@linkplain #getEnvelope envelope}.
     * @throws MismatchedDimensionException if the math transform and the CRS don't have consistent
     *     dimensions.
     * @throws IllegalArgumentException if the math transform can't transform coordinates in the
     *     domain of the specified grid range.
     * @since 2.5
     */
    public GeneralGridGeometry(
            final GridEnvelope gridRange,
            final PixelInCell anchor,
            final MathTransform gridToCRS,
            final CoordinateReferenceSystem crs)
            throws MismatchedDimensionException, IllegalArgumentException {

        this.gridRange = clone(gridRange);
        this.gridToCRS = PixelTranslation.translate(gridToCRS, anchor, PixelInCell.CELL_CENTER);
        if (PixelInCell.CELL_CORNER.equals(anchor)) {
            cornerToCRS = gridToCRS;
        }
        if (gridRange != null && gridToCRS != null) {
            envelope = new GeneralEnvelope(gridRange, anchor, gridToCRS, crs);
        } else if (crs != null) {
            envelope = new GeneralEnvelope(crs);
            envelope.setToNull();
        } else {
            envelope = null;
        }
    }

