	/**
	 * Creates a {@link CartesianCS} for a {@link ProjectedCRS} given the
	 * provided {@link Unit}.
	 * 
	 * @todo consider caching this items
	 * @param linearUnit
	 *            to be used for building this {@link CartesianCS}.
	 * @return an instance of {@link CartesianCS} using the provided
	 *         {@link Unit},
	 */
	private DefaultCartesianCS createProjectedCS(Unit<?> linearUnit) {
		if (linearUnit == null)
			throw new NullPointerException(
					"Error when trying to create a PCS using this linear UoM ");
		if (!linearUnit.isCompatible(SI.METRE))
			throw new IllegalArgumentException(
					"Error when trying to create a PCS using this linear UoM "
							+ linearUnit.toString());
		final Map<String,String> props= new HashMap<String, String>();
		props.put("name", Vocabulary.formatInternational(VocabularyKeys.PROJECTED).toString());
		props.put("alias", Vocabulary.formatInternational(VocabularyKeys.PROJECTED).toString());
		return new DefaultCartesianCS(
		                props,
				new DefaultCoordinateSystemAxis(Vocabulary
						.formatInternational(VocabularyKeys.EASTING), "E",
						AxisDirection.EAST, linearUnit),
				new DefaultCoordinateSystemAxis(Vocabulary
						.formatInternational(VocabularyKeys.NORTHING), "N",
						AxisDirection.NORTH, linearUnit));
	}

