    /**
     * Prepare the {@link javax.media.jai.Histogram} property for this histogram operation.
     *
     * <p>See <a
     * href="http://download.java.net/media/jai/javadoc/1.1.3/jai-apidocs/javax/media/jai/operator/HistogramDescriptor.html">HistogramDescriptor</a>
     * for more info.
     *
     * @see OperationJAI#getProperties(RenderedImage, CoordinateReferenceSystem,
     *     InternationalString, MathTransform, GridCoverage2D[],
     *     org.geotools.coverage.processing.OperationJAI.Parameters),
     */
    protected Map<String, ?> getProperties(
            RenderedImage data,
            CoordinateReferenceSystem crs,
            InternationalString name,
            MathTransform toCRS,
            GridCoverage2D[] sources,
            Parameters parameters) {
        // /////////////////////////////////////////////////////////////////////
        //
        // If and only if data is a RenderedOp we prepare the properties for
        // histogram as the output of the histogram operation.
        //
        // /////////////////////////////////////////////////////////////////////
        if (data instanceof RenderedOp) {
            // XXX remove me with 1.5
            final RenderedOp result = (RenderedOp) data;

            final Map<String, Object> synthProp = new HashMap<>();

            if (JAIExt.isJAIExtOperation(STATS)) {
                // get the properties
                Statistics[][] results =
                        ((Statistics[][]) result.getProperty(Statistics.STATS_PROPERTY));
                // Extracting the bins
                int numBands = result.getNumBands();
                int[][] bins = new int[numBands][];

                // Cycle on the bands
                for (int i = 0; i < results.length; i++) {
                    Statistics stat = results[i][0];
                    double[] binsDouble = (double[]) stat.getResult();
                    bins[i] = new int[binsDouble.length];
                    for (int j = 0; j < binsDouble.length; j++) {
                        bins[i][j] = (int) binsDouble[j];
                    }
                }
                // Getting numBins, LowBounds, MaxBounds parameters
                ParameterBlock parameterBlock = result.getParameterBlock();
                double[] lowValues = (double[]) parameterBlock.getObjectParameter(7);
                double[] highValues = (double[]) parameterBlock.getObjectParameter(8);
                int[] numBins = (int[]) parameterBlock.getObjectParameter(9);

                HistogramWrapper wrapper =
                        new HistogramWrapper(numBins, lowValues, highValues, bins);

                // return the map
                synthProp.put(GT_SYNTHETIC_PROPERTY_HISTOGRAM, wrapper);
            } else {

                final javax.media.jai.Histogram hist =
                        (javax.media.jai.Histogram)
                                result.getProperty(GT_SYNTHETIC_PROPERTY_HISTOGRAM);

                // return the map
                synthProp.put(GT_SYNTHETIC_PROPERTY_HISTOGRAM, hist);
            }
            // Addition of the ROI property and NoData property
            GridCoverage2D source = sources[0];
            CoverageUtilities.setROIProperty(synthProp, CoverageUtilities.getROIProperty(source));
            CoverageUtilities.setNoDataProperty(
                    synthProp, CoverageUtilities.getNoDataProperty(source));
            return Collections.unmodifiableMap(synthProp);
        }
        return super.getProperties(data, crs, name, toCRS, sources, parameters);
    }

