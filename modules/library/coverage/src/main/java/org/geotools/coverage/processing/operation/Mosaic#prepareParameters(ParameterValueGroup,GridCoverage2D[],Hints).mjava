    /**
     * Prepares the parameters to store in the {@link ParameterBlockJAI} object and resample the
     * input {@link GridCoverage2D}.
     */
    private Params prepareParameters(
            final ParameterValueGroup parameters, GridCoverage2D[] sources, Hints hints) {
        final ImagingParameters copy = (ImagingParameters) descriptor.createValue();
        final ParameterBlockJAI block = (ParameterBlockJAI) copy.parameters;

        // Object indicating the policy to use for resampling all the GridCoverages to the same
        // GridGeometry
        GridGeometryPolicy policy = null;

        // Check if the External GridGeometry is present
        Object externalGG = parameters.parameter(GEOMETRY).getValue();
        GridGeometry2D gg = null;
        if (externalGG != null && externalGG instanceof GridGeometry2D) {
            gg = (GridGeometry2D) externalGG;
            policy = GridGeometryPolicy.EXTERNAL;
        } else {
            // Check if the GridGeometry selection policy is present
            Object ggPolicy = parameters.parameter(POLICY).getValue();
            if (ggPolicy != null && ggPolicy instanceof String) {
                policy = GridGeometryPolicy.getPolicyFromString((String) ggPolicy);
            }
        }
        // No policy defined, the first GridCoverage is used.
        if (policy == null) {
            policy = GridGeometryPolicy.FIRST;
        }

        // Getting Alpha bands if present
        Object alphaBandList = parameters.parameter(ALPHA_NAME).getValue();
        GridCoverage2D[] alphaCovs = null;
        if (alphaBandList != null && alphaBandList instanceof Collection) {
            @SuppressWarnings("unchecked")
            Collection<GridCoverage2D> alphas = (Collection<GridCoverage2D>) alphaBandList;
            alphaCovs = new GridCoverage2D[alphas.size()];
            alphas.toArray(alphaCovs);
        }

        // Resample to the defined GridGeometry
        ResampledRasters rr =
                policy.resampleGridGeometry(sources, alphaCovs, gg, parameters, hints);
        // Get the resampled RenderedImages
        RenderedImage[] rasters = rr.getRasters();
        // Get returnedROIs
        ROI[] newRois = rr.getRois();

        // Setting of the final GridGeometry
        GridGeometry2D finalGeometry = rr.getFinalGeometry();
        if (finalGeometry == null) {
            throw new CoverageProcessingException("No final GridGeometry found");
        }

        int numSources = rasters.length;
        // Setting the source rasters for the mosaic
        if (Boolean.TRUE.equals(hints.get(JAI.KEY_REPLACE_INDEX_COLOR_MODEL))) {
            // the mosaic operation will blow up in this case, internally the Raster accessors
            // are not getting configured to do expansion as needed. Work around it.
            for (int i = 0; i < numSources; i++) {
                RenderedImage source = rasters[i];
                if (source.getColorModel() instanceof IndexColorModel) {
                    source = new ImageWorker(source).forceComponentColorModel().getRenderedImage();
                }
                block.setSource(source, i);
            }

            hints = new Hints(hints);
            hints.add(new RenderingHints(JAI.KEY_REPLACE_INDEX_COLOR_MODEL, Boolean.FALSE));
            hints.add(new RenderingHints(JAI.KEY_TRANSFORM_ON_COLORMAP, Boolean.TRUE));
        } else {
            for (int i = 0; i < numSources; i++) {
                block.setSource(rasters[i], i);
            }
        }
        // Setting the nodata values for the areas not covered by any GridCoverage.
        double[] nodata = null;
        // Check if the output nodata value is present
        Object outputNodata = parameters.parameter(OUTNODATA_NAME).getValue();
        if (outputNodata != null && outputNodata instanceof double[]) {
            nodata = ((double[]) outputNodata);
        } else {
            nodata = CoverageUtilities.getBackgroundValues(sources[PRIMARY_SOURCE_INDEX]);
        }
        // Setting of the output nodata
        block.set(nodata, BACKGROUND_PARAM);

        // Setting of the ROI associated to each GridCoverage
        // We need to add its roi in order to avoid problems with the mosaics sources overlapping
        ROI[] rois = new ROI[numSources];
        // Cycle on each coverage in order to add the associated ROI
        for (int i = 0; i < numSources; i++) {
            if (newRois != null && newRois[i] != null) {
                rois[i] = newRois[i];
            } else {
                rois[i] = new ROIShape(PlanarImage.wrapRenderedImage(rasters[i]).getBounds());
            }
        }
        block.set(rois, ROI_PARAM);
        // If at least one image contains Alpha channel, it is used for the mosaic
        if (rr.getAlphas() != null) {
            block.set(rr.getAlphas(), ALPHA_PARAM);
        }

        // Setting of the Threshold to use
        double threshold =
                CoverageUtilities.getMosaicThreshold(
                        rasters[PRIMARY_SOURCE_INDEX].getSampleModel().getDataType());
        // Setting of the Threshold object to use for the mosaic
        block.set(new double[][] {{threshold}}, THRESHOLD_PARAM);

        // Setting of the Mosaic type as Overlay
        block.set(MosaicDescriptor.MOSAIC_TYPE_OVERLAY, MOSAIC_TYPE_PARAM);

        // Check if it is a JAI-Ext operation
        if (JAIExt.isJAIExtOperation("Mosaic")) {
            // Get the nodata values
            double[] nodatas = rr.getBackgrounds();
            if (nodatas != null && rr.hasNoData()) {
                Range[] ranges = new Range[numSources];
                for (int i = 0; i < numSources; i++) {
                    double value = nodatas[i];
                    ranges[i] = RangeFactory.create(value, value);
                }
                block.set(ranges, NODATA_RANGE_PARAM);
            }
        }

        // Creation of the finel Parameters
        Params params = new Params(block, hints, finalGeometry);
        params.rr = rr;
        return params;
    }

