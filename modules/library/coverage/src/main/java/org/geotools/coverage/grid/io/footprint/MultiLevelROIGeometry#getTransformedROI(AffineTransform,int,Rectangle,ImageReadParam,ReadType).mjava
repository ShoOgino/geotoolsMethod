    public ROIGeometry getTransformedROI(
            AffineTransform at,
            int imageIndex,
            Rectangle imgBounds,
            ImageReadParam params,
            ReadType readType) {
        if (empty) {
            return null;
        }
        if (at == null) {
            at = new AffineTransform();
        }
        ROIGeometry roiGeometry = roiCache.get(at);
        if (roiGeometry == null) {
            Geometry rescaled;
            AffineTransformation geometryAT =
                    new AffineTransformation(
                            at.getScaleX(),
                            at.getShearX(),
                            at.getTranslateX(),
                            at.getShearY(),
                            at.getScaleY(),
                            at.getTranslateY());
            if (inset > 0) {
                double scale = Math.min(Math.abs(at.getScaleX()), Math.abs(at.getScaleY()));
                double rescaledInset = scale * inset;
                if (rescaledInset < 1) {
                    // just apply a 1 pixel inset on the rescaled geometry
                    Geometry cloned = (Geometry) originalFootprint.clone();
                    cloned.apply(geometryAT);
                    Geometry bounds = (Geometry) granuleBounds.clone();
                    bounds.apply(geometryAT);
                    rescaled = insetPolicy.applyInset(cloned, bounds, 1.5);
                } else {
                    // use the original footprint
                    rescaled = (Geometry) insetFootprint.clone();
                    rescaled.apply(geometryAT);
                }
            } else {
                rescaled = (Geometry) originalFootprint.clone();
                rescaled.apply(geometryAT);
            }

            if (!rescaled.isEmpty()) {

                // the geometry is likely to have way more precision than needed, simplify it
                // so that the error is significantly less than one pixel
                Geometry simplified = TopologyPreservingSimplifier.simplify(rescaled, 0.333);
                // build a ROI geometry optimized for rectangle clipping
                roiGeometry = new FastClipROIGeometry(simplified);
                roiCache.put(at, roiGeometry);
            } else {
                return null;
            }
        }

        return roiGeometry;
    }

