    /**
     * Prepare the minimum and maximum properties for this extream operation.
     *
     * <p>See <a
     * href="http://download.java.net/media/jai/javadoc/1.1.3/jai-apidocs/javax/media/jai/operator/ExtremaDescriptor.html">ExtremaDescriptor</a>
     * for more info.
     *
     * @see OperationJAI#getProperties(RenderedImage, CoordinateReferenceSystem,
     *     InternationalString, MathTransform, GridCoverage2D[],
     *     org.geotools.coverage.processing.OperationJAI.Parameters),
     */
    @Override
    @SuppressWarnings("unchecked")
    protected Map<String, ?> getProperties(
            RenderedImage data,
            CoordinateReferenceSystem crs,
            InternationalString name,
            MathTransform toCRS,
            GridCoverage2D[] sources,
            Parameters parameters) {
        // /////////////////////////////////////////////////////////////////////
        //
        // If and only if data is a RenderedOp we prepare the properties for
        // minimum and maximum as the output of the extrema operation.
        //
        // /////////////////////////////////////////////////////////////////////
        if (data instanceof RenderedOp) {
            final RenderedOp result = (RenderedOp) data;
            final Map<String, Object> synthProp = new HashMap<>();

            if (JAIExt.isJAIExtOperation(STATS)) {
                // get the properties
                Statistics[][] results =
                        ((Statistics[][]) result.getProperty(Statistics.STATS_PROPERTY));
                // Extracting the bins
                int numBands = result.getNumBands();
                double[] maximums = new double[numBands];
                double[] minimums = new double[numBands];

                // Cycle on the bands
                for (int i = 0; i < results.length; i++) {
                    Statistics stat = results[i][0];
                    double[] binsDouble = (double[]) stat.getResult();
                    minimums[i] = binsDouble[0];
                    maximums[i] = binsDouble[1];
                }
                // return the map
                synthProp.put(GT_SYNTHETIC_PROPERTY_MINIMUM, minimums);
                synthProp.put(GT_SYNTHETIC_PROPERTY_MAXIMUM, maximums);
            } else {
                // get the properties
                final double[] maximums =
                        (double[]) result.getProperty(GT_SYNTHETIC_PROPERTY_MAXIMUM);
                final double[] minimums =
                        (double[]) result.getProperty(GT_SYNTHETIC_PROPERTY_MINIMUM);
                Object property = result.getProperty(GT_SYNTHETIC_PROPERTY_MIN_LOCATIONS);
                if ((property instanceof List[]))
                    synthProp.put(GT_SYNTHETIC_PROPERTY_MIN_LOCATIONS, property);
                property = result.getProperty(GT_SYNTHETIC_PROPERTY_MAX_LOCATIONS);
                if ((property instanceof List[]))
                    synthProp.put(GT_SYNTHETIC_PROPERTY_MAX_LOCATIONS, property);

                // return the map
                synthProp.put(GT_SYNTHETIC_PROPERTY_MINIMUM, minimums);
                synthProp.put(GT_SYNTHETIC_PROPERTY_MAXIMUM, maximums);
            }
            // Addition of the ROI property and NoData property
            GridCoverage2D source = sources[0];
            CoverageUtilities.setROIProperty(synthProp, CoverageUtilities.getROIProperty(source));
            CoverageUtilities.setNoDataProperty(
                    synthProp, CoverageUtilities.getNoDataProperty(source));
            return Collections.unmodifiableMap(synthProp);
        }
        return super.getProperties(data, crs, name, toCRS, sources, parameters);
    }

