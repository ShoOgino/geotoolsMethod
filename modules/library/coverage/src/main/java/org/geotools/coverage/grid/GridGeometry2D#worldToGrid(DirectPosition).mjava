    /**
     * Transforms a point represented by a DirectPosition object from world to grid coordinates. If
     * the point contains a {@code CoordinateReferenceSystem}, and it differs from that of the
     * coverage, it will be reprojected on the fly. The the nearest grid cell centre to the input
     * point is found.
     *
     * <p>Users needing more control over the nature of the conversion can access the {@linkplain
     * MathsTransform} provided by {@linkplain GridGeometry2D#getCRSToGrid2D(PixelOrientation) }
     * which is accessed via {@linkplain #getGridGeometry()}.
     *
     * @param point The point in world coordinate system.
     * @return A new point in the grid coordinate system as a GridCoordinates2D object
     * @throws InvalidGridGeometryException if a two-dimensional inverse transform is not available.
     * @throws TransformException if the transformation failed.
     * @since 2.6
     */
    public final GridCoordinates2D worldToGrid(final DirectPosition point)
            throws InvalidGridGeometryException, TransformException {

        final double TOL = 1.0E-6;

        Point2D trPoint = toPoint2D(point);

        if (gridFromCRS2D != null) {
            if (Math.abs(trPoint.getX() - getEnvelope2D().getMaxX()) <= TOL) {
                trPoint.setLocation(trPoint.getX() - TOL, trPoint.getY());
            }

            if (Math.abs(trPoint.getY() - getEnvelope2D().getMinY()) <= TOL) {
                trPoint.setLocation(trPoint.getX(), trPoint.getY() + TOL);
            }

            if (Math.abs(trPoint.getX() - getEnvelope2D().getMinX()) <= TOL) {
                trPoint.setLocation(trPoint.getX() + TOL, trPoint.getY());
            }

            if (Math.abs(trPoint.getY() - getEnvelope2D().getMaxY()) <= TOL) {
                trPoint.setLocation(trPoint.getX(), trPoint.getY() - TOL);
            }

            GridCoordinates2D gc2D = new GridCoordinates2D();
            gridFromCRS2D.transform(trPoint, gc2D);
            return gc2D;
        }

        throw new InvalidGridGeometryException(ErrorKeys.NONINVERTIBLE_TRANSFORM);
    }

