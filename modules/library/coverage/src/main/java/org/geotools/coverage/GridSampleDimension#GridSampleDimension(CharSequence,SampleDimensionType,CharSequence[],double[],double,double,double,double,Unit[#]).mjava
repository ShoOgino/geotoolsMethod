    /**
     * Constructs a sample dimension with the specified properties. For convenience, any argument
     * which is not a {@code double} primitive can be {@code null}, and any {@linkplain CharSequence
     * char sequence} can be either a {@link String} or {@link InternationalString} object.
     *
     * <p>This constructor allows the construction of a {@code GridSampleDimension} without explicit
     * construction of {@link Category} objects. An heuristic approach is used for dispatching the
     * informations into a set of {@link Category} objects. However, this constructor still less
     * general and provides less fine-grain control than the constructor expecting an array of
     * {@link Category} objects.
     *
     * @param description The sample dimension title or description, or {@code null} for the default
     *     (the name of what looks like the "main" category). This is the value to be returned by
     *     {@link #getDescription}.
     * @param type The grid value data type (which indicate the number of bits for the data type),
     *     or {@code null} for computing it automatically from the range {@code [minimum..maximum]}.
     *     This is the value to be returned by {@link #getSampleDimensionType}.
     * @param categories A sequence of category names for the values contained in the sample
     *     dimension, or {@code null} if none. This is the values to be returned by {@link
     *     #getCategoryNames}.
     * @param nodata the values to indicate "no data", or {@code null} if none. This is the values
     *     to be returned by {@link #getNoDataValues}.
     * @param minimum The lower value, inclusive. The {@code [minimum..maximum]} range may or may
     *     not includes the {@code nodata} values; the range will be adjusted as needed. If {@code
     *     categories} was non-null, then {@code minimum} is usually 0. This is the value to be
     *     returned by {@link #getMinimumValue}.
     * @param maximum The upper value, <strong>inclusive</strong> as well. The {@code
     *     [minimum..maximum]} range may or may not includes the {@code nodata} values; the range
     *     will be adjusted as needed. If {@code categories} was non-null, then {@code maximum} is
     *     usually equals to {@code categories.length-1}. This is the value to be returned by {@link
     *     #getMaximumValue}.
     * @param scale The value which is multiplied to grid values, or 1 if none. This is the value to
     *     be returned by {@link #getScale}.
     * @param offset The value to add to grid values, or 0 if none. This is the value to be returned
     *     by {@link #getOffset}.
     * @param unit The unit information for this sample dimension, or {@code null} if none. This is
     *     the value to be returned by {@link #getUnits}.
     * @throws IllegalArgumentException if the range {@code [minimum..maximum]} is not valid.
     */
    @SuppressWarnings("deprecation")
    public GridSampleDimension(
            final CharSequence description,
            final SampleDimensionType type,
            final CharSequence[] categories,
            final double[] nodata,
            final double minimum,
            final double maximum,
            final double scale,
            final double offset,
            final Unit<?> unit) {
        // TODO: 'list(...)' should be inlined there if only Sun was to fix RFE #4093999
        //       ("Relax constraint on placement of this()/super() call in constructors").
        this(
                description,
                list(description, type, null, null, categories, nodata, minimum, maximum, unit),
                scale,
                offset);
    }

