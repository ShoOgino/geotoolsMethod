    /**
     * Applies a process operation with six parameters. This is a helper method for implementation
     * of various convenience methods in this class.
     *
     * @param operationName Name of the operation to be applied to the coverage.
     * @param source The source coverage.
     * @return The result as a coverage.
     * @throws OperationNotFoundException if there is no operation named {@code operationName}.
     * @throws InvalidParameterNameException if there is no parameter with the specified name.
     * @throws CoverageProcessingException if the operation can't be applied.
     * @since 2.3
     */
    protected final Coverage doOperation(
            final String operationName,
            final Coverage source,
            final String argumentName1,
            final Object argumentValue1,
            final String argumentName2,
            final Object argumentValue2,
            final String argumentName3,
            final Object argumentValue3,
            final String argumentName4,
            final Object argumentValue4,
            final String argumentName5,
            final Object argumentValue5,
            final String argumentName6,
            final Object argumentValue6)
            throws OperationNotFoundException, InvalidParameterNameException,
                    CoverageProcessingException {
        final Operation operation = processor.getOperation(operationName);
        final ParameterValueGroup parameters = operation.getParameters();
        addSources(operationName, parameters, source);
        setParameterValue(parameters, argumentName1, argumentValue1);
        setParameterValue(parameters, argumentName2, argumentValue2);
        setParameterValue(parameters, argumentName3, argumentValue3);
        setParameterValue(parameters, argumentName4, argumentValue4);
        setParameterValue(parameters, argumentName5, argumentValue5);
        setParameterValue(parameters, argumentName6, argumentValue6);
        return processor.doOperation(parameters);
    }

