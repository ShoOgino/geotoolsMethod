    public MaskOverviewProvider(DatasetLayout layout, File inputFile, ImageReaderSpi suggestedSPI)
            throws IOException {
        this.fileURL = DataUtilities.fileToURL(inputFile);
        this.layout = layout;
        // Creating cached SPIs
        streamSpi = getInputStreamSPIFromURL(fileURL);
        ImageInputStream stream = null;
        try {
            stream = streamSpi.createInputStreamInstance(fileURL, ImageIO.getUseCache(),
                    ImageIO.getCacheDirectory());
            readerSpi = getReaderSpiFromStream(suggestedSPI, stream);
        } catch (Exception e) {
            if (LOGGER.isLoggable(Level.WARNING)) {
                LOGGER.log(Level.WARNING,
                        "Unable to create a Reader for File: " + inputFile.getCanonicalPath(), e);
            }
            throw new IllegalArgumentException(e);
        } finally {
            if (stream != null) {
                try {
                    stream.close();
                } catch (Exception e) {
                    if (LOGGER.isLoggable(Level.SEVERE)) {
                        LOGGER.log(Level.SEVERE, e.getMessage(), e);
                    }
                }
            }
        }
        // Handling Overviews
        File overviewFile = new File(inputFile.getAbsolutePath() + OVR_EXTENSION);
        hasDatasetLayout = layout != null;
        if (hasDatasetLayout && layout.getExternalOverviews() != null) {
            overviewFile = layout.getExternalOverviews();
        }
        if (overviewFile.exists() && overviewFile.canRead()) {
            // Creating overview file URL
            ovrURL = DataUtilities.fileToURL(overviewFile);
            // Creating cached SPIs
            overviewStreamSpi = getInputStreamSPIFromURL(ovrURL);
            ImageInputStream ovrStream = null;
            try {
                ovrStream = overviewStreamSpi.createInputStreamInstance(ovrURL,
                        ImageIO.getUseCache(), ImageIO.getCacheDirectory());
                overviewReaderSpi = getReaderSpiFromStream(null, ovrStream);
            } catch (Exception e) {
                if (LOGGER.isLoggable(Level.WARNING)) {
                    LOGGER.log(
                            Level.WARNING,
                            "Unable to create a Reader for File: "
                                    + overviewFile.getCanonicalPath(), e);
                }
                throw new IllegalArgumentException(e);
            } finally {
                if (ovrStream != null) {
                    try {
                        ovrStream.close();
                    } catch (Exception e) {
                        if (LOGGER.isLoggable(Level.SEVERE)) {
                            LOGGER.log(Level.SEVERE, e.getMessage(), e);
                        }
                    }
                }
            }
        } else {
            // No Overview file so we fall back to the original file spis
            overviewStreamSpi = streamSpi;
            overviewReaderSpi = readerSpi;
        }

        // Getting number of Overviews
        int numOverviews = 0;
        if (hasDatasetLayout) {
            numInternalOverviews = layout.getNumInternalOverviews();
            // layout.getNumExternalOverviews() may return -1 when no external file is present
            numExternalOverviews = layout.getNumExternalOverviews() > 0 ? layout
                    .getNumExternalOverviews() : 0;
            numOverviews = numInternalOverviews + numExternalOverviews;
        } else {
            // Reading image number
            ImageInputStream imageStream = null;
            ImageReader reader = null;
            try {
                // Creating stream
                imageStream = streamSpi.createInputStreamInstance(fileURL, ImageIO.getUseCache(),
                        ImageIO.getCacheDirectory());
                // Creating reader
                reader = readerSpi.createReaderInstance();
                // Setting input
                reader.setInput(imageStream, false, false);
                // Getting number of images
                numOverviews = reader.getNumImages(true) - 1;
                // Setting numInternalOverviews
                numInternalOverviews = numOverviews;
            } catch (Exception e) {
                if (LOGGER.isLoggable(Level.WARNING)) {
                    LOGGER.log(Level.WARNING,
                            "Unable to create a Reader for File: " + inputFile.getCanonicalPath(),
                            e);
                }
                throw new IllegalArgumentException(e);
            } finally {
                if (imageStream != null) {
                    try {
                        imageStream.close();
                    } catch (Exception e) {
                        if (LOGGER.isLoggable(Level.SEVERE)) {
                            LOGGER.log(Level.SEVERE, e.getMessage(), e);
                        }
                    } finally {
                        if (reader != null) {
                            reader.dispose();
                        }
                    }
                }
            }
        }
        if (numOverviews < 0) {
            numOverviews = 0;
        }
        // Setting overviews Number
        this.numOverviews = numOverviews;

        // Mask Management
        if (layout != null) {
            numInternalMasks = layout.getNumInternalMasks();
            numExternalMasks = layout.getNumExternalMasks() > 0 ? layout.getNumExternalMasks() : 0;
            numExternalMasksOverviews = layout.getNumExternalMaskOverviews() > 0 ? layout
                    .getNumExternalMaskOverviews() : 0;
            hasExternalMasks = numExternalMasks > 0;
            hasExternalMasksOverviews = hasExternalMasks && numExternalMasksOverviews > 0;
            if (hasExternalMasks) {
                // Mask URL
                maskURL = DataUtilities.fileToURL(layout.getExternalMasks());
                // Creating cached SPIs
                maskStreamSpi = getInputStreamSPIFromURL(maskURL);
                ImageInputStream maskStream = null;
                try {
                    maskStream = maskStreamSpi.createInputStreamInstance(maskURL,
                            ImageIO.getUseCache(), ImageIO.getCacheDirectory());
                    maskReaderSpi = getReaderSpiFromStream(suggestedSPI, maskStream);
                } catch (Exception e) {
                    if (LOGGER.isLoggable(Level.WARNING)) {
                        LOGGER.log(Level.WARNING, "Unable to create a Reader for File: " + maskURL,
                                e);
                    }
                    throw new IllegalArgumentException(e);
                } finally {
                    if (maskStream != null) {
                        try {
                            maskStream.close();
                        } catch (Exception e) {
                            if (LOGGER.isLoggable(Level.SEVERE)) {
                                LOGGER.log(Level.SEVERE, e.getMessage(), e);
                            }
                        }
                    }
                }
                // Handling external mask overviews
                if (hasExternalMasksOverviews) {
                    // Mask URL
                    maskOvrURL = DataUtilities.fileToURL(layout.getExternalMaskOverviews());
                    // Creating cached SPIs
                    maskOvrStreamSpi = getInputStreamSPIFromURL(maskOvrURL);
                    ImageInputStream maskOvrStream = null;
                    try {
                        maskOvrStream = maskOvrStreamSpi.createInputStreamInstance(maskOvrURL,
                                ImageIO.getUseCache(), ImageIO.getCacheDirectory());
                        maskOvrReaderSpi = getReaderSpiFromStream(suggestedSPI, maskOvrStream);
                    } catch (Exception e) {
                        if (LOGGER.isLoggable(Level.WARNING)) {
                            LOGGER.log(Level.WARNING, "Unable to create a Reader for File: "
                                    + maskOvrURL, e);
                        }
                        throw new IllegalArgumentException(e);
                    } finally {
                        if (maskOvrStream != null) {
                            try {
                                maskOvrStream.close();
                            } catch (Exception e) {
                                if (LOGGER.isLoggable(Level.SEVERE)) {
                                    LOGGER.log(Level.SEVERE, e.getMessage(), e);
                                }
                            }
                        }
                    }
                } else {
                    // No Mask Overview file so we fall back to the original mask spis
                    maskOvrStreamSpi = maskStreamSpi;
                    maskOvrReaderSpi = maskReaderSpi;
                }
            } else {
                // No Mask file so we fall back to the original file spis
                maskStreamSpi = streamSpi;
                maskReaderSpi = readerSpi;
            }
        }
    }

