    /**
     * Returns the index of the specified color, excluding the specified one. If the color is not
     * explicitly found, a close color is returned. This method never returns a negative value (0 is
     * returned if the color model has no colors).
     *
     * @param colors The color model in which to look for a color index.
     * @param color The color to search for.
     * @param exclude An index to exclude from the search (usually the background or the {@linkplain
     *     #getTransparentPixel transparent} pixel), or -1 if none.
     * @return The index of the color, or 0.
     */
    public static int getColorIndex(
            final IndexColorModel colors, final Color color, final int exclude) {
        final ColorSpace space = colors.getColorSpace();
        final float[] RGB = {
            color.getRed() / 255f, color.getGreen() / 255f, color.getBlue() / 255f
        };
        final float[] REF = XYZtoLAB(space.toCIEXYZ(RGB));
        float delta = Float.POSITIVE_INFINITY;
        int index = 0;
        assert REF != RGB;
        for (int i = colors.getMapSize(); --i >= 0; ) {
            if (i != exclude) {
                RGB[0] = colors.getRed(i) / 255f;
                RGB[1] = colors.getGreen(i) / 255f;
                RGB[2] = colors.getBlue(i) / 255f;
                final float d = colorDistance(XYZtoLAB(space.toCIEXYZ(RGB)), REF);
                assert d >= 0 : i; // Check mostly for NaN value
                if (d <= delta) {
                    delta = d;
                    index = i;
                }
            }
        }
        return index;
    }

