    /**
     * Writes outs the image contained into this {@link ImageWorker} as a GIF
     * using the provided destination, compression and compression rate.
     * <p>
     * It is worth to point out that the only compressions algorithm availaible
     * with the jdk {@link GIFImageWriter} is "LZW" while the compression rates
     * have to be confined between 0 and 1. AN acceptable values is usally 0.75f.
     * <p>
     * The destination object can be anything providing that we have an
     * {@link ImageOutputStreamSpi} that recognizes it.
     *
     * @param destination
     *            where to write the internal {@link #image} as a gif.
     * @param compression
     *            The name of compression algorithm.
     * @param compressionRate
     *            percentage of compression, as a number between 0 and 1.
     * @return this {@link ImageWorker}.
     * @throws IOException
     *             In case an error occurs during the search for an
     *             {@link ImageOutputStream} or during the eoncding process.
     *
     * @see #forceIndexColorModelForGIF(boolean)
     */
    public final ImageWorker writeGIF(final Object destination,
                                      final String compression,
                                      final float  compressionRate)
            throws IOException
    {
        forceIndexColorModelForGIF(true);
        final IIORegistry registry = IIORegistry.getDefaultInstance();
        Iterator<ImageWriterSpi> it = registry.getServiceProviders(ImageWriterSpi.class, true);
        ImageWriterSpi spi = null;
        while (it.hasNext()) {
            final ImageWriterSpi candidate = it.next();
            if (containsFormatName(candidate.getFormatNames(), "gif")) {
                if (spi == null) {
                    spi = candidate;
                } else {
                    final String name = candidate.getClass().getName();
                    if (name.equals("com.sun.media.imageioimpl.plugins.gif.GIFImageWriterSpi")) {
                        spi = candidate;
                        break;
                    }
                }
            }
        }
        if (spi == null) {
            throw new IIOException(Errors.format(ErrorKeys.NO_IMAGE_WRITER));
        }
        final ImageOutputStream stream = ImageIO.createImageOutputStream(destination);
        if(stream==null)
        	throw new IIOException(Errors.format(ErrorKeys.NULL_ARGUMENT_$1,"stream"));
        final ImageWriter       writer = spi.createWriterInstance();
        final ImageWriteParam   param  = writer.getDefaultWriteParam();
        param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT);
        param.setCompressionType(compression);
        param.setCompressionQuality(compressionRate);

        try{
	        writer.setOutput(stream);
	        writer.write(null, new IIOImage(image, null, null), param);
        }finally{
        	try{
        		stream.close();
        	}catch (Throwable e) {
				if(LOGGER.isLoggable(Level.FINEST))
					LOGGER.log(Level.FINEST,e.getLocalizedMessage(),e);
			}
        	try{
    	        writer.dispose();
        	}catch (Throwable e) {
				if(LOGGER.isLoggable(Level.FINEST))
					LOGGER.log(Level.FINEST,e.getLocalizedMessage(),e);
			}        	
        }
        return this;
    }

