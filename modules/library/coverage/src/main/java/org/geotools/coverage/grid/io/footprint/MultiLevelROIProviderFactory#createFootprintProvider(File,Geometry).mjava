    /**
     * Builds a footprint provider from file location
     *
     * @param It can be: - a folder containing the footprint config files (if any) OR the footprint
     *     itself. - the data file for which we are looking for a footprint.
     * @param The optional granuleBounds geometry. if not null, it will be used as data's reference
     *     geometry.
     * @return
     * @throws Exception
     */
    public static MultiLevelROIProvider createFootprintProvider(
            final File referenceFile, Geometry granuleBounds) {
        Utilities.ensureNonNull("referenceFile", referenceFile);
        File configDirectory =
                referenceFile.isDirectory() ? referenceFile : referenceFile.getParentFile();
        File configFile = new File(configDirectory, "footprints.properties");
        if (!configFile.exists()) {
            configFile = SidecarFootprintProvider.getAlternativeFile(configFile);
        }
        final Properties properties = initProperties(configFile);

        // load the type of config file
        // Only sidecar footprints are currently supported
        String source = (String) properties.get(SOURCE_PROPERTY);
        FootprintGeometryProvider provider = null;
        if (source == null || TYPE_SIDECAR.equals(source)) {
            provider = new SidecarFootprintProvider(referenceFile);
        } else {
            throw new IllegalArgumentException(
                    "Invalid source type, it should be a reference "
                            + "to a 'sidecar', but was '"
                            + source
                            + "' instead");
        }
        // Create the provider
        return createProvider(provider, properties, granuleBounds);
    }

