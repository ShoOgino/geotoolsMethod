    /**
     * Converte a JTS {@link Polygon}, which represents a ROI, into an AWT {@link java.awt.Polygon}
     * by means of the provided {@link MathTransform}.
     *
     * @param roiInput the input ROI as a JTS {@link Polygon}.
     * @param worldToGridTransform the {@link MathTransform} to apply to the input ROI.
     * @return an AWT {@link java.awt.Polygon}.
     * @throws TransformException in case the provided {@link MathTransform} chokes.
     */
    protected static java.awt.Polygon convertPolygon(
            final Polygon roiInput, MathTransform worldToGridTransform) throws TransformException {
        final boolean isIdentity = worldToGridTransform.isIdentity();
        final java.awt.Polygon retValue = new java.awt.Polygon();
        final double[] coords = new double[2];
        final LineString exteriorRing = roiInput.getExteriorRing();
        final CoordinateSequence exteriorRingCS = exteriorRing.getCoordinateSequence();
        final int numCoords = exteriorRingCS.size();
        for (int i = 0; i < numCoords; i++) {
            // get the actual coord
            coords[0] = exteriorRingCS.getX(i);
            coords[1] = exteriorRingCS.getY(i);

            // transform it
            if (!isIdentity) worldToGridTransform.transform(coords, 0, coords, 0, 1);

            // send it back to the returned polygon
            retValue.addPoint((int) (coords[0] + 0.5d), (int) (coords[1] + 0.5d));
        }

        // return the created polygon.
        return retValue;
    }

