    /**
     * Returns a math transform for the two dimensional part. This method is similar
     * to {@link #getCRSToGrid2D()} except that the transform may map a pixel corner
     * instead of pixel center.
     *
     * @param  orientation The pixel part to map. The default value is
     *         {@link PixelOrientation#CENTER CENTER}.
     * @return The transform which allows for the transformations from world coordinates
     *         to grid coordinates.
     * @throws InvalidGridGeometryException if a two-dimensional transform is not available
     *         for this grid geometry.
     *
     * @since 2.6
     */
    public MathTransform2D getCRSToGrid2D(final PixelOrientation orientation) {
        if (gridToCRS2D == null) {
            throw new InvalidGridGeometryException(ErrorKeys.NO_TRANSFORM2D_AVAILABLE);
        }

        if (!PixelOrientation.UPPER_LEFT.equals(orientation)) {
            try {
                return computeGridToCRS2D(orientation).inverse();
            } catch (NoninvertibleTransformException nte) {
                throw new InvalidGridGeometryException(ErrorKeys.NONINVERTIBLE_TRANSFORM);
            }
        }

        if (crsToCorner2D == null) {
            try {
                crsToCorner2D = getGridToCRS2D(PixelOrientation.UPPER_LEFT).inverse();
            } catch (NoninvertibleTransformException nte) {
                throw new InvalidGridGeometryException(ErrorKeys.NONINVERTIBLE_TRANSFORM);
            }
        }

        return crsToCorner2D;
    }

