    /**
     * Crops the image to the specified bounds. Will use an internal operation that ensures the tile
     * cache and tile scheduler hints are used, and will perform operation elimination in case the
     * crop is doing nothing, or in case the crop is performed over another crop
     * 
     * @param x
     * @param y
     * @param width
     * @param height
     * @return
     */
    public ImageWorker crop(float x, float y, float width, float height) {
        // no op elimination
        if(image.getMinX() == x && image.getMinY() == y 
                && image.getWidth() == width && image.getHeight() == height) {
            return this;
        }
        
        // crop over crop
        RenderedImage source = image;
        if(image instanceof RenderedOp) {
            RenderedOp op = (RenderedOp) image;
            if("Crop".equals(op.getOperationName()) || "GTCrop".equals(op.getOperationName())) {
                ParameterBlock paramBlock = op.getParameterBlock();
                source = paramBlock.getRenderedSource(0);

                float sx = (float) paramBlock.getFloatParameter(0);
                float sy = (float) paramBlock.getFloatParameter(1);
                float sWidth = (float) paramBlock.getFloatParameter(2);
                float sHeight = (float) paramBlock.getFloatParameter(3);
                
                // merge the two (just need to sum the two origins)
                if(sx > 0) {
                    x = sx + x;
                }
                if(sy > 0) {
                    y = sy + y;
                }
                
            }
        }
        
        image = GTCropDescriptor.create(source, x, y, width, height, commonHints);

        return this;
    }

