    /**
     * Crops the image to the specified bounds. Will use an internal operation that ensures the tile cache and tile scheduler hints are used, and will
     * perform operation elimination in case the crop is doing nothing, or in case the crop is performed over another crop
     * 
     * @param x
     * @param y
     * @param width
     * @param height
     * @return
     */
    public ImageWorker crop(float x, float y, float width, float height) {
        // no op elimination
        if (image.getMinX() == x && image.getMinY() == y && image.getWidth() == width
                && image.getHeight() == height) {
            return this;
        }

        // crop over crop
        RenderedImage source = image;
        if (image instanceof RenderedOp) {
            RenderedOp op = (RenderedOp) image;
            if ("Crop".equals(op.getOperationName()) || "GTCrop".equals(op.getOperationName())) {
                ParameterBlock paramBlock = op.getParameterBlock();
                source = paramBlock.getRenderedSource(0);

                float sx = paramBlock.getFloatParameter(0);
                float sy = paramBlock.getFloatParameter(1);
                float sWidth = paramBlock.getFloatParameter(2);
                float sHeight = paramBlock.getFloatParameter(3);

                // merge the two (just need to sum the two origins)
                if (sx > 0) {
                    x = sx + x;
                }
                if (sy > 0) {
                    y = sy + y;
                }

            }
        }

        ParameterBlock pb = new ParameterBlock();
        pb.setSource(source, 0);
        pb.set(x, 0);
        pb.set(y, 1);
        pb.set(width, 2);
        pb.set(height, 3);
        pb.set(roi, 4);
        pb.set(nodata, 5);
        if (isNoDataNeeded()) {
            if (background != null && background.length > 0) {
                pb.set(background, 6);
                // We must set the new NoData value
                setNoData(RangeFactory.create(background[0], background[0]));
            }
        }
        
        image = JAI.create("Crop", pb, commonHints);

        // image = GTCropDescriptor.create(source, x, y, width, height, commonHints);

        return this;
    }

