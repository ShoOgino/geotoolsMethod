    /** Returns a {@link ROI} object based on the input {@link RenderedImage} representing ROI */
    public static ROI scaleROI(RenderedImage roiRaster, Rectangle bounds) {
        if (roiRaster == null) {
            return null;
        }
        int x = bounds.x;
        int y = bounds.y;
        int w = bounds.width;
        int h = bounds.height;
        // Scale factors for input data
        final double scaleX = w / (1.0 * roiRaster.getWidth());
        final double scaleY = h / (1.0 * roiRaster.getHeight());
        AffineTransform tr = AffineTransform.getScaleInstance(scaleX, scaleY);
        // Translation Factors
        final int transX = x;
        final int transY = y;
        tr.concatenate(AffineTransform.getTranslateInstance(transX, transY));
        // Log the Scale/Translate operation
        if (!tr.isIdentity()) {
            LOGGER.fine("Scaling ROI");
        }
        // Input Mask is scaled to the image size, rescaled to Bytes and then used as ROI
        return new ImageWorker(roiRaster).affine(tr, null, null).binarize(1).getImageAsROI();
    }

