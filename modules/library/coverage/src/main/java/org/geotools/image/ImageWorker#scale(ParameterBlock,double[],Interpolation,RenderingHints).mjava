    /**
     * Perform scaling
     *
     * @param pb
     * @param scalingParams
     * @param interpolation
     * @param hints
     */
    private void scale(
            ParameterBlock pb,
            double[] scalingParams,
            Interpolation interpolation,
            RenderingHints hints) {
        for (int i = 0; i < 4; i++) {
            if (USE_JAI_SCALE2) {
                pb.set(scalingParams[i], i);
            } else {
                pb.set((float) scalingParams[i], i);
            }
        }
        RenderedImage sourceImage = pb.getRenderedSource(0);
        ColorModel cm = sourceImage.getColorModel();
        SampleModel sm = sourceImage.getSampleModel();
        final int numBands = sm.getNumBands();
        RenderedImage alphaChannel = null;

        // When interpolation is not nearest, Alpha should not be interpolated the same way
        // as normal bands to avoid partial transparencies
        if (cm.hasAlpha()
                && (numBands == 2 || numBands == 4)
                && (interpolation != null
                        && (interpolation.getWidth() > 1 || interpolation.getHeight() > 1))) {

            // Extract Alpha for future re-attach
            ImageWorker noAlpha =
                    new ImageWorker(sourceImage).setRenderingHints(hints).retainBands(numBands - 1);
            alphaChannel =
                    new ImageWorker(sourceImage)
                            .setRenderingHints(hints)
                            .retainLastBand()
                            .getRenderedImage();
            pb.setSource(noAlpha.getRenderedImage(), 0);
        }

        pb.set(interpolation, 4);
        pb.set(roi, 5);
        pb.set(nodata, 7);
        if (isNoDataNeeded()) {
            if (background != null && background.length > 0) {
                pb.set(background, 8);
            }
        }
        RenderedImage scaledImage = JAI.create(SCALE_OP_NAME, pb, hints);
        image = scaledImage;
        if (alphaChannel != null) {
            // Need to scale alpha separately (with nearest interpolation)
            // to avoid partial transparency
            ParameterBlock pb2 = new ParameterBlock();
            pb2.setSource(alphaChannel, 0);
            for (int i = 0; i < 4; i++) {
                if (USE_JAI_SCALE2) {
                    pb2.set(scalingParams[i], i);
                } else {
                    pb2.set((float) scalingParams[i], i);
                }
            }
            pb2.set(Interpolation.getInstance(Interpolation.INTERP_NEAREST), 4);
            pb2.set(roi, 5);
            pb2.set(nodata, 7);
            alphaChannel = JAI.create(SCALE_OP_NAME, pb2, hints);

            // Now, re-attach the scaled alpha to the scaled image
            ImageWorker merged = new ImageWorker(scaledImage);
            Object candidate = hints.get(JAI.KEY_IMAGE_LAYOUT);
            if (candidate instanceof ImageLayout) {
                ImageLayout layout = (ImageLayout) candidate;
                ImageLayout layout2 =
                        new ImageLayout2(
                                layout.getTileGridXOffset(null),
                                layout.getTileGridYOffset(null),
                                layout.getTileWidth(null),
                                layout.getTileHeight(null),
                                sm,
                                cm);
                merged.setRenderingHints(new RenderingHints(JAI.KEY_IMAGE_LAYOUT, layout2));
            }
            image = merged.addBand(alphaChannel, false, true, null).getRenderedImage();
        }
    }

