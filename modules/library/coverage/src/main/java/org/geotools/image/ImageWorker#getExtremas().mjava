    /**
     * Returns the minimums and maximums values found in the image. Those extremas are returned as an array of the form {@code double[2][#bands]}.
     */
    private double[][] getExtremas() {
        Object extrema = getComputedProperty(EXTREMA);
        if (!(extrema instanceof double[][])) {
            final Integer ONE = 1;
            // Create the parameterBlock
            ParameterBlock pb = new ParameterBlock();
            pb.setSource(image, 0);
            if (JAIExt.isJAIExtOperation("Stats")) {
                StatsType[] stats = new StatsType[] { StatsType.EXTREMA };
                // Band definition
                int numBands = getNumBands();
                int[] bands = new int[numBands];
                for (int i = 0; i < numBands; i++) {
                    bands[i] = i;
                }

                // Image parameters
                pb.set(ONE, 0); // xPeriod
                pb.set(ONE, 1); // yPeriod
                pb.set(roi, 2); // ROI
                pb.set(nodata, 3); // NoData
                pb.set(bands, 5); // band indexes
                pb.set(stats, 6); // statistic operation
                image = JAI.create("Stats", pb, getRenderingHints());
                // Retrieving the statistics
                Statistics[][] results = (Statistics[][]) getComputedProperty(Statistics.STATS_PROPERTY);
                double[][] ext = new double[2][numBands];
                for (int i = 0; i < numBands; i++) {
                    double[] extBand = (double[]) results[i][0].getResult();
                    ext[0][i] = extBand[0];
                    ext[1][i] = extBand[1];
                }
                // Setting the property
                if (image instanceof PlanarImage) {
                    ((PlanarImage) image).setProperty(EXTREMA, ext);
                } else {
                    PlanarImage p = getPlanarImage();
                    p.setProperty(EXTREMA, ext);
                    image = p;
                }
            } else {
                pb.set(roi, 0); // The region of the image to scan. Default to all.
                pb.set(ONE, 1); // The horizontal sampling rate. Default to 1.
                pb.set(ONE, 2); // The vertical sampling rate. Default to 1.
                pb.set(ONE, 4); // Maximum number of run length codes to store. Default to 1.
                image = JAI.create("Extrema", pb, getRenderingHints());
            }
            extrema = getComputedProperty(EXTREMA);
        }
        return (double[][]) extrema;
    }

