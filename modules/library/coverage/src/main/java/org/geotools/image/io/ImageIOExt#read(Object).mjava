    /**
     * Reads an image from the given input, working around some JDK reader issues. At the time of
     * writing, this applies a work around for PNGs with RGB (no alpha) and a transparent color
     * configured in the header, that the JDK reader cannot handle.
     *
     * @param input A non null image source, like a {@link File}, {@link java.net.URL}, or {@link
     *     java.io.InputStream}
     * @return A image
     */
    public static RenderedImage read(Object input) throws IOException {
        if (input == null) {
            throw new IllegalArgumentException("input == null!");
        }

        // build an image input stream
        try (ImageInputStream stream = getImageInputStream(input)) {
            // get the readers
            Iterator iter = ImageIO.getImageReaders(stream);
            if (!iter.hasNext()) {
                return null;
            }

            ImageReader reader = (ImageReader) iter.next();
            // work around PNG with transparent RGB color if needed
            // we can remove it once we run on JDK 11, see
            // https://bugs.openjdk.java.net/browse/JDK-6788458
            boolean isJdkPNGReader =
                    "com.sun.imageio.plugins.png.PNGImageReader"
                            .equals(reader.getClass().getName());
            // if it's the JDK PNG reader, we cannot skip the metadata, the tRNS section will be in
            // there
            reader.setInput(stream, true, !isJdkPNGReader);

            BufferedImage bi;
            try {
                ImageReadParam param = reader.getDefaultReadParam();
                bi = reader.read(0, param);
            } finally {
                reader.dispose();
            }

            // apply transparency in post-processing if needs be
            if (isJdkPNGReader
                    && bi.getColorModel() instanceof ComponentColorModel
                    && !bi.getColorModel().hasAlpha()
                    && bi.getColorModel().getNumComponents() == 3) {
                IIOMetadata imageMetadata = reader.getImageMetadata(0);
                Node tree = imageMetadata.getAsTree(imageMetadata.getNativeMetadataFormatName());
                Node trns_rgb = getNodeFromPath(tree, Arrays.asList("tRNS", "tRNS_RGB"));
                if (trns_rgb != null) {
                    NamedNodeMap attributes = trns_rgb.getAttributes();
                    Integer red = getIntegerAttribute(attributes, "red");
                    Integer green = getIntegerAttribute(attributes, "green");
                    Integer blue = getIntegerAttribute(attributes, "blue");

                    if (red != null && green != null && blue != null) {
                        Color color = new Color(red, green, blue);
                        ImageWorker iw = new ImageWorker(bi);
                        iw.makeColorTransparent(color);
                        return iw.getRenderedImage();
                    }
                }
            }
            return bi;
        }
    }

