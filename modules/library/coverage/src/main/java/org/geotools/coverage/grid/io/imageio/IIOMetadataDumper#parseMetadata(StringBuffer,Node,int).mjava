    /**
     * Builds a graphical representation of a certain XML tree.
     *
     * @param buff
     * @param node
     * @param level
     */
    private void parseMetadata(StringBuffer buff, Node node, int level) {
        indent(buff, level); // emit open tag
        buff.append("<").append(node.getNodeName());
        NamedNodeMap map = node.getAttributes();
        if (map != null) { // print attribute values
            int length = map.getLength();
            for (int i = 0; i < length; i++) {
                Node attr = map.item(i);
                buff.append(" ")
                        .append(attr.getNodeName())
                        .append("=\"")
                        .append(attr.getNodeValue())
                        .append("\"");
            }
        }

        Node child = node.getFirstChild();
        if (child != null) {
            buff.append(">\n"); // close current tag
            while (child != null) { // emit child tags recursively
                parseMetadata(buff, child, level + 1);
                child = child.getNextSibling();
            }
            indent(buff, level); // emit close tag
            buff.append("</").append(node.getNodeName()).append(">\n");
        } else {
            buff.append("/>\n");
        }
    }

