    /**
     * @param x0
     *            The minimum X coordinate of the destination region.
     * @param y0
     *            The minimum Y coordinate of the destination region.
     * @param width
     *            The width of the destination region.
     * @param height
     *            The height of the destination region.
     * @param periodX
     *            The horizontal sampling period.
     * @param periodY
     *            The vertical sampling period.
     * 
     * @param destRect
     *            A <code>float</code> array containing at least
     *            <code>2*((width+periodX-1)/periodX)*
     *                ((height+periodY-1)/periodY)</code> elements, or <code>null</code>. If
     *            <code>null</code>, a new array will be constructed.
     * 
     * @return A reference to the <code>destRect</code> parameter if it is non-<code>null</code>, or
     *         a new <code>float</code> array otherwise.
     */
    public float[] warpSparseRect(int x0, int y0, int width, int height, int periodX, int periodY,
            float[] destRect) {

        // XXX: This method should do its calculations in doubles
        if (destRect == null) {
            destRect = new float[((width + periodX - 1) / periodX)
                    * ((height + periodY - 1) / periodY) * 2];
        }

        width += x0;
        height += y0;
        int index = 0; // destRect index

        double[] xy = new double[2];

        for (int y = y0; y < height; y += periodY) {
            for (int x = x0; x < width; x += periodX) {
                xy[0] = x;
                xy[1] = y;
                try {
                    mapSrcPoint(xy);
                    destRect[index++] = (float) xy[0];
                    destRect[index++] = (float) xy[1];
                } catch (TransformException e) {
                    LOGGER.log(Level.WARNING, "Error transforming {0}", xy);
                    destRect[index++] = Float.NaN; // ???
                    destRect[index++] = Float.NaN; // ???
                }
            }
        }

        return destRect;
    }

