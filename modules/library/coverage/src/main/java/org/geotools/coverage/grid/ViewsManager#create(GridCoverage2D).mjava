    /**
     * Returns a shared map of views <em>or</em> constructs a new one. In order to check if we can
     * share the views with one of the sources, the source must have identical image, geometry and
     * sample dimensions. As a safety, we do not allow views sharing for arbitrary classes of
     * {@link Calculator2D} (this is checked by {@code viewClass}).
     *
     * @param coverage The coverage that wants to create a {@code ViewsManager}.
     */
    static ViewsManager create(final GridCoverage2D coverage) {
        final Class<? extends GridCoverage2D> viewClass = coverage.getViewClass();
        if (viewClass != null) {
            Collection<GridCoverage> sources = coverage.getSources();
            while (sources != null) {
                Collection<GridCoverage> next = null;
                for (final GridCoverage source : sources) {
                    if (source instanceof GridCoverage2D) {
                        final GridCoverage2D candidate = (GridCoverage2D) source;
                        if (Utilities.equals(coverage.image,            candidate.image)            &&
                            Utilities.equals(coverage.gridGeometry,     candidate.gridGeometry)     &&
                            Arrays   .equals(coverage.sampleDimensions, candidate.sampleDimensions) &&
                            viewClass.equals(candidate.getViewClass()))
                            // The CRS is checked with the GridGeometry2D.
                        {
                            return candidate.copyViewsTo(coverage);
                        }
                    }
                    if (source == null) { 
                        continue;
                    }
                    final Collection<GridCoverage> more = source.getSources();
                    if (more != null && !more.isEmpty()) {
                        if (next == null) {
                            next = new LinkedHashSet<GridCoverage>(more);
                        } else {
                            next.addAll(more);
                        }
                    }
                }
                sources = next;
            }
        }
        return new ViewsManager(coverage);
    }

