    /**
     * This method can be used for creating a property Map to set to the new coverage generated by the current operation.
     * Internally the method will search for ROI and NoData parameters set for the operation and will report them as 
     * coverage properties
     * 
     * @param properties
     * @param parameters
     * @param sourceCoverage
     * @param operationName
     * @param roiIndex
     * @param noDataIndex
     * @param backgroundIndex
     * 
     * @return A {@link Map} containing all the coverage properties and also {@link ROI} and NoData if present
     */
    protected static Map<String, Object> handleROINoDataProperties(Map<String, Object> properties,
            ParameterBlockJAI parameters, GridCoverage2D sourceCoverage, String operationName,
            int roiIndex, int noDataIndex, int backgroundIndex) {
        // Creation of the property map
        Map<String, Object> prop = new HashMap<>();
        if (properties != null) {
            prop.putAll(properties);
        }
        // Check if the operation has been executed as JAI-EXT
        if (JAIExt.isJAIExtOperation(operationName)) {
            // Selection of the ROI from the input ParameterBlock
            ROI roiParam = (ROI) parameters.getObjectParameter(roiIndex);
            // Setting of the ROI property
            CoverageUtilities.setROIProperty(properties, roiParam);
            // Searching for the nodata Range
            Range noDataParam = (Range) parameters.getObjectParameter(noDataIndex);
            // Setting of the NoData parameter only if Background is defined
            if (noDataParam != null || roiParam != null) {
                // NoData must be set
                // Background has been set?
                Object background = parameters.getObjectParameter(backgroundIndex);
                if (background != null) {
                    if (background instanceof double[] || background instanceof Number) {
                        CoverageUtilities.setNoDataProperty(properties, background);
                    }
                }
            }
        }
        return prop;
    }

