        public SpiHelper(
                URL input, ImageReaderSpi suggestedSPI, ImageInputStreamSpi suggestedStreamSpi)
                throws IOException {

            this.fileURL = input;

            // Creating cached SPIs
            ImageInputStreamSpi streamSpi = null;
            ImageInputStream stream = null;
            ImageReaderSpi readerSpi = null;
            if (suggestedStreamSpi == null) {
                streamSpi = getInputStreamSPIFromURL(fileURL);
            } else {
                streamSpi = suggestedStreamSpi;
            }

            try {
                stream =
                        streamSpi.createInputStreamInstance(
                                fileURL, ImageIO.getUseCache(), ImageIO.getCacheDirectory());
                readerSpi = getReaderSpiFromStream(suggestedSPI, stream);
                isMultidim =
                        readerSpi != null
                                && MULTIDIM_SERVICE_PROVIDERS.contains(
                                        readerSpi.getClass().getName());
                sourceSpiProvider = new SourceSPIProvider(this.fileURL, readerSpi, streamSpi);
            } catch (Exception e) {
                if (LOGGER.isLoggable(Level.WARNING)) {
                    LOGGER.log(Level.WARNING, "Unable to create a Reader for File: " + input, e);
                }
                throw new IllegalArgumentException(e);
            } finally {
                if (stream != null) {
                    try {
                        stream.close();
                    } catch (Exception e) {
                        if (LOGGER.isLoggable(Level.SEVERE)) {
                            LOGGER.log(Level.SEVERE, e.getMessage(), e);
                        }
                    }
                }
            }
        }

