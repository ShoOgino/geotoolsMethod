    /**
     * @param samples
     * @param gaps
     * @return a boolean value indicating if the samples are valid
     */
    private boolean fixNoData(int[][] samples, boolean[][] gaps) {
        // First check if NoData check must be done
        if (!hasNoData) {
            return true;
        }
        // Then check if all the data are valid
        boolean totalValid = true;
        boolean totalInvalid = false;
        // Boolean indicating which line is valid
        boolean[] validLines = new boolean[gaps.length];
        for (int i = 0; i < gaps.length; i++) {
            for (int j = 0; j < gaps[0].length; j++) {
                totalValid &= gaps[i][j];
                totalInvalid |= gaps[i][j];
                validLines[i] |= gaps[i][j];
            }
        }
        if (totalValid) {
            return true;
        }
        if (!totalInvalid) {
            return false;
        }
        // We must do nodata handling

        // First fix on the Horizontal side
        for (int i = 0; i < gaps.length; i++) {
            if (validLines[i]) {
                for (int j = 0; j < gaps[0].length; j++) {
                    if (j == 0) {
                        samples[i][j] = samples[i][searchFirstValid(gaps[i], j, true)];
                    } else if (j == (gaps[0].length - 1)) {
                        samples[i][j] = samples[i][searchFirstValid(gaps[i], j, false)];
                    } else {
                        int before = searchFirstValid(gaps[i], j, true);
                        int after = searchFirstValid(gaps[i], j, false);
                        if (before == -1) {
                            samples[i][j] = samples[i][after];
                        } else if (after == -1) {
                            samples[i][j] = samples[i][before];
                        } else {
                            // Mean value
                            samples[i][j] = (samples[i][after] + samples[i][before]) / 2;
                        }
                    }
                    gaps[i][j] = true;
                }
            }
        }

        // Then work on the Vertical side
        // Check if we have any vertical line without valid data
        boolean allValid = true;
        for (int i = 0; allValid && i < gaps.length; i++) {
            allValid &= validLines[i];
        }
        if (allValid) {
            // Work already done on the lines
            return true;
        }
        // Fix wrong lines
        for (int i = 0; i < gaps.length; i++) {
            if (!validLines[i]) {
                if (i == 0) {
                    int index = searchFirstValid(validLines, i, true);
                    samples[i] = samples[index];
                } else if (i == (gaps.length - 1)) {
                    int index = searchFirstValid(validLines, i, false);
                    samples[i] = samples[index];
                } else {
                    int indexAfter = searchFirstValid(validLines, i, true);
                    int indexBefore = searchFirstValid(validLines, i, false);
                    if (indexAfter == -1) {
                        samples[i] = samples[indexBefore];
                    } else if (indexBefore == -1) {
                        samples[i] = samples[indexAfter];
                    } else {
                        for (int j = 0; j < samples[0].length; j++) {
                            samples[i][j] = (samples[indexBefore][j] + samples[indexAfter][j]) / 2;
                        }
                    }
                }
            }
        }

        return true;
    }

