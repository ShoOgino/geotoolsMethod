	/**
	 * Parses a "GEOGCS" element. This element has the following pattern:
	 * 
	 * <blockquote><code>
	 * GEOGCS["<name>", <datum>, <prime meridian>, <angular unit>  {,<twin axes>} {,<authority>}]
	 * </code></blockquote>
	 * 
	 * @param geographicCRS
	 *            The parent element.
	 * @param metadata
	 * @return The "GEOGCS" element as a {@link GeographicCRS} object.
	 */
	private void parseGeoGCS(DefaultGeographicCRS geographicCRS,
			GeoTiffIIOMetadataEncoder metadata) {

		// is it one of the EPSG standard GCS?
		final int code = getEPSGCode(geographicCRS);
		if (GeoTiffIIOMetadataEncoder.isTiffUShort(code)) {
			metadata.addGeoShortParam(GeoTiffGCSCodes.GeographicTypeGeoKey,code);
			return;
		}

		//
		// User defined GCRS
		//
		// user defined geographic coordinate reference system.
		metadata.addGeoShortParam(GeoTiffGCSCodes.GeographicTypeGeoKey, GeoTiffConstants.GTUserDefinedGeoKey);

		// get the name of the gcs which will become a citation for the user
		// define crs
		metadata.addGeoAscii(GeoTiffGCSCodes.GeogCitationGeoKey,geographicCRS.getName().getCode());

		// geodetic datum
		final DefaultGeodeticDatum datum = (DefaultGeodeticDatum) geographicCRS.getDatum();
		parseDatum(datum, metadata);

		// angular unit
		final Unit<?> angularUnit = ((EllipsoidalCS) geographicCRS.getCoordinateSystem()).getAxis(0).getUnit();
		parseUnit(angularUnit, 0, metadata);

		// prime meridian
		parsePrimem((DefaultPrimeMeridian) datum.getPrimeMeridian(), metadata);

		// linear unit
		final Unit<?> linearUnit = datum.getEllipsoid().getAxisUnit();
		parseUnit(linearUnit, 2, metadata);

	}

