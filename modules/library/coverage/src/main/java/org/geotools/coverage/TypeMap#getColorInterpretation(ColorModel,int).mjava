    /**
     * Returns the color interpretation code for the specified color model and band number.
     *
     * @param model The color model.
     * @param band The band to query.
     * @return The code for the specified color model and band number.
     * @throws IllegalArgumentException if the band number is not in the valid range.
     */
    public static ColorInterpretation getColorInterpretation(final ColorModel model, final int band)
            throws IllegalArgumentException {
        if (model == null) {
            return ColorInterpretation.UNDEFINED;
        }
        if (band < 0 || band >= ColorUtilities.getNumBands(model)) {
            throw new IllegalArgumentException(Errors.format(ErrorKeys.BAD_BAND_NUMBER_$1, band));
        }
        if (model instanceof IndexColorModel) {
            return ColorInterpretation.PALETTE_INDEX;
        }
        switch (model.getColorSpace().getType()) {
            case ColorSpace.TYPE_GRAY:
                {
                    switch (band) {
                        case 0:
                            return ColorInterpretation.GRAY_INDEX;
                        default:
                            return ColorInterpretation.UNDEFINED;
                    }
                }
            case ColorSpace.TYPE_RGB:
                {
                    switch (band) {
                        case 0:
                            return ColorInterpretation.RED_BAND;
                        case 1:
                            return ColorInterpretation.GREEN_BAND;
                        case 2:
                            return ColorInterpretation.BLUE_BAND;
                        case 3:
                            return ColorInterpretation.ALPHA_BAND;
                        default:
                            return ColorInterpretation.UNDEFINED;
                    }
                }
            case ColorSpace.TYPE_HSV:
                {
                    switch (band) {
                        case 0:
                            return ColorInterpretation.HUE_BAND;
                        case 1:
                            return ColorInterpretation.SATURATION_BAND;
                        case 2:
                            return ColorInterpretation.LIGHTNESS_BAND;
                        default:
                            return ColorInterpretation.UNDEFINED;
                    }
                }
            case ColorSpace.TYPE_CMY:
            case ColorSpace.TYPE_CMYK:
                {
                    switch (band) {
                        case 0:
                            return ColorInterpretation.CYAN_BAND;
                        case 1:
                            return ColorInterpretation.MAGENTA_BAND;
                        case 2:
                            return ColorInterpretation.YELLOW_BAND;
                        case 3:
                            return ColorInterpretation.BLACK_BAND;
                        default:
                            return ColorInterpretation.UNDEFINED;
                    }
                }
            default:
                return ColorInterpretation.UNDEFINED;
        }
    }

