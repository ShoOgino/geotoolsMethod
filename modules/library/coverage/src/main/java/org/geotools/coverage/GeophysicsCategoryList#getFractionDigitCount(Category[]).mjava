    /**
     * Computes the smallest number of fraction digits necessary to resolve all
     * quantitative values. This method assume that geophysics values in the range
     * {@code Category.geophysics(true).getRange} are stored as integer sample
     * values in the range {@code Category.geophysics(false).getRange}.
     */
    private static int getFractionDigitCount(final Category[] categories) {
        int ndigits = 0;
        final double EPS = 1E-6;
        final int length=categories.length;
        for (int i=0; i<length; i++) {
            final Category category   = categories[i];
            final Category geophysics = category.geophysics(true);
            final Category packed     = category.geophysics(false);
            final double ln = Math.log10((geophysics.maximum - geophysics.minimum)/
                                         (    packed.maximum -     packed.minimum));
            if (!Double.isNaN(ln)) {
                final int n = -(int)(Math.floor(ln + EPS));
                if (n > ndigits) {
                    ndigits = Math.min(n, MAX_DIGITS);
                }
            }
        }
        return ndigits;
    }

