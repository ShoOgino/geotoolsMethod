    /**
     * Constructs a grid coverage from the specified {@linkplain RenderedImage image} and
     * {@linkplain Envelope envelope}. An {@linkplain AffineTransform affine transform} will be
     * computed automatically from the specified envelope using heuristic rules described below.
     *
     * <p>This convenience constructor assumes that axis order in the supplied image matches exactly
     * axis order in the supplied envelope. In other words, in the usual case where axis order in
     * the image is (<var>column</var>, <var>row</var>), then the envelope should probably have a
     * (<var>longitude</var>, <var>latitude</var>) or (<var>easting</var>, <var>northing</var>) axis
     * order.
     *
     * <p>An exception to the above rule applies for CRS using exactly the following axis order:
     * ({@link AxisDirection#NORTH NORTH}|{@link AxisDirection#SOUTH SOUTH}, {@link
     * AxisDirection#EAST EAST}|{@link AxisDirection#WEST WEST}). An example of such CRS is {@code
     * EPSG:4326}. This convenience constructor will interchange automatically the
     * (<var>y</var>,<var>x</var>) axis for such CRS.
     *
     * <p>If more control on axis order and direction reversal is wanted, use the {@linkplain
     * #create(CharSequence, RenderedImage, CoordinateReferenceSystem, MathTransform,
     * GridSampleDimension[], GridCoverage[], Map) constructor variant expecting an explicit
     * transform}.
     *
     * @param name The grid coverage name.
     * @param image The image.
     * @param envelope The grid coverage cordinates. This envelope must have at least two
     *     dimensions. The two first dimensions describe the image location along <var>x</var> and
     *     <var>y</var> axis. The other dimensions are optional and may be used to locate the image
     *     on a vertical axis or on the time axis.
     * @param bands Sample dimensions for each image band, or {@code null} for default sample
     *     dimensions. If non-null, then this array's length must matches the number of bands in
     *     {@code image}.
     * @param sources The sources for this grid coverage, or {@code null} if none.
     * @param properties The set of properties for this coverage, or {@code null} if there is none.
     * @return The new grid coverage.
     * @since 2.2
     */
    public GridCoverage2D create(
            final CharSequence name,
            final RenderedImage image,
            Envelope envelope,
            final GridSampleDimension[] bands,
            final GridCoverage[] sources,
            final Map<?, ?> properties) {
        /*
         * Makes sure that the specified envelope has a CRS.
         * If no CRS were specified, a default one is used.
         */
        if (envelope.getCoordinateReferenceSystem() == null) {
            final GeneralEnvelope e = new GeneralEnvelope(envelope);
            e.setCoordinateReferenceSystem(getDefaultCRS(e.getDimension()));
            envelope = e;
        }
        final GridGeometry2D gm =
                new GridGeometry2D(
                        new GeneralGridEnvelope(image, envelope.getDimension()), envelope);
        return create(name, image, gm, bands, sources, properties);
    }

