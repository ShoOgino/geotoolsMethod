	/**
	 * This code creates an <code>javax.Units.Unit</code> object out of the
	 * <code>ProjLinearUnitsGeoKey</code> and the
	 * <code>ProjLinearUnitSizeGeoKey</code>. The unit may either be
	 * specified as a standard EPSG recognized unit, or may be user defined.
	 * 
	 * @param key
	 * 
	 * @param userDefinedKey
	 * 
	 * @param base
	 * 
	 * @param def
	 * 
	 * 
	 * @return <code>Unit</code> object representative of the tags in the
	 *         file.
	 * 
	 * @throws IOException
	 *             if the<code>ProjLinearUnitsGeoKey</code> is not specified
	 *             or if unit is user defined and
	 *             <code>ProjLinearUnitSizeGeoKey</code> is either not defined
	 *             or does not contain a number.
	 */
	private Unit<?> createUnit(int key, int userDefinedKey, Unit<?> base, 
			final GeoTiffIIOMetadataDecoder metadata) throws IOException {
		final String unitCode = metadata.getGeoKey(key);

		// //
		//
		// if not defined, return the default unit of measure
		//
		// //
		if (unitCode == null) {
			return null;
		}
		// //
		//
		// if specified, retrieve the appropriate unit code. There are two case
		// to keep into account, first case is when the unit of measure has an
		// EPSG code, alternatively it can be instantiated as a conversion from
		// meter.
		//
		// //
		if (unitCode.equals(GeoTiffConstants.GTUserDefinedGeoKey_String)) {
			try {
				final String unitSize = metadata.getGeoKey(userDefinedKey);

				// throw descriptive exception if required key is not there.
				if (unitSize == null) {
					throw new GeoTiffException(
							metadata,
							"GeoTiffMetadata2CRSAdapter::createUnit:Must define unit length when using a user defined unit", 
							null);
				}

				double sz = Double.parseDouble(unitSize);
				return base.times(sz);
			} catch (NumberFormatException nfe) {
				final IOException ioe = new GeoTiffException(metadata, nfe
						.getLocalizedMessage(), nfe);
				throw ioe;
			}
		} else {
			try {
				// using epsg code for this unit
				return (Unit<?>) this.allAuthoritiesFactory.createUnit("EPSG:"+unitCode);
			} catch (FactoryException fe) {
				final IOException io = new GeoTiffException(metadata, fe.getLocalizedMessage(), fe);
				throw io;
			}
		}
	}

