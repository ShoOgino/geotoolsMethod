    /**
     * Wrap the src coverage in the dst layout. <BR>
     * The resulting RenderedImage will contain the data in src, and will be accessible via the grid
     * specs of dst,
     * 
     * @param src
     *            the data coverage to be remapped on dst grid
     * @param dst
     *            the provider of the final grid
     * @param nodata
     *            the nodata values to set for cells not covered by src but included in dst. All
     *            bands will use the related nodata value.
     * @param hints hints to use for the Rendering, Actually only ImageLayout is considered
     * @param roi 
     * @return an instance of Coverage2RenderedImageAdapter
     */
    public static GridCoverage2DRIA create(GridCoverage2D src, GridGeometry2D dst,
            double[] nodata, Hints hints, ROI roi) {
        
        Utilities.ensureNonNull("dst", dst);
        
        // === Create destination Layout, retaining source tiling to minimize quirks
        // TODO allow to override tiling
        final GridEnvelope2D destinationRasterDimension = dst.getGridRange2D();
        final ImageLayout imageLayout = new ImageLayout();
        imageLayout.setMinX(destinationRasterDimension.x).setMinY(destinationRasterDimension.y);
        imageLayout.setWidth(destinationRasterDimension.width).setHeight(destinationRasterDimension.height);
        
        //
        // SampleModel and ColorModel are related to data itself, so we
        // copy them from the source

        imageLayout.setColorModel(src.getRenderedImage().getColorModel());
        imageLayout.setSampleModel(src.getRenderedImage().getSampleModel());
        
        if(hints != null && hints.containsKey(JAI.KEY_IMAGE_LAYOUT)){
            ImageLayout l = (ImageLayout) hints.get(JAI.KEY_IMAGE_LAYOUT);
            if(l.isValid(ImageLayout.TILE_HEIGHT_MASK) && l.isValid(ImageLayout.TILE_WIDTH_MASK)){
                imageLayout.setTileHeight(Math.min(imageLayout.getHeight(null), l.getTileHeight(null)));
                imageLayout.setTileWidth(Math.min(imageLayout.getWidth(null), l.getTileWidth(null)));
            }
        }

        // === BorderExtender
        //
        // We have yet to check for it usefulness: it might be more convenient
        // to check for region overlapping and return a nodata value by hand,
        // so to avoid problems with interpolation at source raster borders.
        //
        BorderExtender extender = new BorderExtenderConstant(new double[] {nodata != null ? nodata[0] : 0d});
        
        // Check if the input coverage contains a ROI
        ROI property = CoverageUtilities.getROIProperty(src);
        if(property != null){
            roi = roi != null ? roi.intersect(property) : property;
        }
        return new GridCoverage2DRIA(src, dst, vectorize(src.getRenderedImage()), imageLayout,
                null, false, extender, Interpolation.getInstance(Interpolation.INTERP_NEAREST),
                nodata, roi);
    }

