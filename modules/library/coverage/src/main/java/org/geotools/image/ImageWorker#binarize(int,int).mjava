    /**
     * Binarizes the {@linkplain #image} (if not already done) and replace all 0 values by {@code
     * value0} and all 1 values by {@code value1}. If the image should be binarized using a custom
     * threshold value (instead of the automatic one), invoke {@link #binarize(double)} explicitly
     * before this method.
     *
     * @return this {@link ImageWorker}.
     * @see #isBinary
     * @see #binarize()
     * @see #binarize(double)
     * @see BinarizeDescriptor
     * @see LookupDescriptor
     */
    public final ImageWorker binarize(final int value0, final int value1) {
        tileCacheEnabled(false);
        binarize();
        tileCacheEnabled(true);
        final LookupTable table;
        final int min = Math.min(value0, value1);
        if (min >= 0) {
            final int max = Math.max(value0, value1);
            if (max < 256) {
                table =
                        LookupTableFactory.create(
                                new byte[] {(byte) value0, (byte) value1}, DataBuffer.TYPE_BYTE);
            } else if (max < 65536) {
                table =
                        LookupTableFactory.create(
                                new short[] {(short) value0, (short) value1}, true);
            } else {
                table = LookupTableFactory.create(new int[] {value0, value1});
            }
        } else {
            table = LookupTableFactory.create(new int[] {value0, value1}, DataBuffer.TYPE_BYTE);
        }
        // ParameterBlock definition
        ParameterBlock pb = new ParameterBlock();
        pb.setSource(image, 0);
        pb.set(table, 0);
        pb.set(roi, 2);
        pb.set(nodata, 3);
        if (isNoDataNeeded()) {
            if (background != null && background.length > 0) {
                pb.set(background[0], 1);
            }
        }

        image = JAI.create("Lookup", pb, getRenderingHints());
        invalidateStatistics();
        return this;
    }

