    /**
     * Returns the {@linkplain #getRenderingHints rendering hints}, but with a {@linkplain
     * ComponentColorModel component color model} of the specified data type. The data type is
     * changed only if no color model was explicitly specified by the user through {@link
     * #getRenderingHints()}.
     *
     * @param type The data type (typically {@link DataBuffer#TYPE_BYTE}).
     */
    private final RenderingHints getRenderingHints(final int type) {
        /*
         * Gets the default hints, which usually contains only informations about tiling. If the user overridden the rendering hints with an explict
         * color model, keep the user's choice.
         */
        final RenderingHints hints = getRenderingHints();
        final ImageLayout layout = getImageLayout(hints);
        if (layout.isValid(ImageLayout.COLOR_MODEL_MASK)) {
            return hints;
        }
        /*
         * Creates the new color model.
         */
        final ColorModel oldCm = image.getColorModel();
        if (oldCm != null) {
            final ColorModel newCm =
                    new ComponentColorModel(
                            oldCm.getColorSpace(),
                            oldCm.hasAlpha(), // If true, supports transparency.
                            oldCm.isAlphaPremultiplied(), // If true, alpha is premultiplied.
                            oldCm.getTransparency(), // What alpha values can be represented.
                            type); // Type of primitive array used to represent pixel.
            /*
             * Creating the final image layout which should allow us to change color model.
             */
            layout.setColorModel(newCm);
            layout.setSampleModel(
                    newCm.createCompatibleSampleModel(image.getWidth(), image.getHeight()));
        } else {
            final int numBands = image.getSampleModel().getNumBands();
            final ColorModel newCm =
                    new ComponentColorModel(
                            new BogusColorSpace(numBands),
                            false, // If true, supports transparency.
                            false, // If true, alpha is premultiplied.
                            Transparency.OPAQUE, // What alpha values can be represented.
                            type); // Type of primitive array used to represent pixel.
            /*
             * Creating the final image layout which should allow us to change color model.
             */
            layout.setColorModel(newCm);
            layout.setSampleModel(
                    newCm.createCompatibleSampleModel(image.getWidth(), image.getHeight()));
        }
        hints.put(JAI.KEY_IMAGE_LAYOUT, layout);
        return hints;
    }

