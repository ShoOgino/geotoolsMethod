    /**
     * Constructs a grid coverage from an {@linkplain ImageFunction image function}.
     *
     * @param name         The grid coverage name.
     * @param function     The image function.
     * @param gridGeometry The grid geometry. The {@linkplain GridGeometry2D#getGridRange grid
     *                     range} must contains the expected image size (width and height).
     * @param bands        Sample dimensions for each image band, or {@code null} for
     *                     default sample dimensions.
     * @param properties The set of properties for this coverage, or {@code null} if there is none.
     * @return The new grid coverage.
     *
     * @since 2.2
     */
    public GridCoverage2D create(final CharSequence          name,
                                 final ImageFunction         function,
                                 final GridGeometry2D        gridGeometry,
                                 final GridSampleDimension[] bands,
                                 final Map<?,?>              properties)
    {
        final MathTransform transform = gridGeometry.getGridToCRS2D();
        if (!(transform instanceof AffineTransform)) {
            throw new IllegalArgumentException(Errors.format(ErrorKeys.NOT_AN_AFFINE_TRANSFORM));
        }
        final AffineTransform at = (AffineTransform) transform;
        if (at.getShearX()!=0 || at.getShearY()!=0) {
            // TODO: We may support that in a future version.
            //       1) Create a copy with shear[X/Y] set to 0. Use the copy.
            //       2) Compute the residu with createInverse() and concatenate().
            //       3) Apply the residu with JAI.create("Affine").
            throw new IllegalArgumentException("Shear and rotation not supported");
        }
        final double xScale =  at.getScaleX();
        final double yScale =  at.getScaleY();
        final double xTrans = -at.getTranslateX()/xScale;
        final double yTrans = -at.getTranslateY()/yScale;
        final GridEnvelope      range = gridGeometry.getGridRange();
        final ParameterBlock param = new ParameterBlock().add(function)
                                                         .add(range.getSpan(0)) // width
                                                         .add(range.getSpan(1)) // height
                                                         .add((float) xScale)
                                                         .add((float) yScale)
                                                         .add((float) xTrans)
                                                         .add((float) yTrans);
        final PlanarImage image = JAI.create("ImageFunction", param);
        return create(name, image, gridGeometry, bands, null, properties);
    }

