    /**
     * Returns a sequence of float values for a given location (world coordinates).
     *
     * @param coord World coordinates of the location to evaluate.
     * @param dest An array in which to store values, or {@code null}.
     * @return An array containing values.
     * @throws CannotEvaluateException if the values can't be computed at the specified coordinate.
     *     More specifically, {@link PointOutsideCoverageException} is thrown if the evaluation
     *     failed because the input point has invalid coordinates.
     */
    public float[] evaluate(final Point2D coord, final float[] dest)
            throws CannotEvaluateException {
        final Point2D pixel = gridGeometry.inverseTransform(coord);
        final double fx = pixel.getX();
        final double fy = pixel.getY();
        if (!Double.isNaN(fx) && !Double.isNaN(fy)) {
            final int x = (int) Math.round(fx);
            final int y = (int) Math.round(fy);
            if (image.getBounds().contains(x, y)) { // getBounds() returns a cached instance.
                return image.getTile(image.XToTileX(x), image.YToTileY(y)).getPixel(x, y, dest);
            }
        }
        throw new PointOutsideCoverageException(formatEvaluateError(coord, true));
    }

