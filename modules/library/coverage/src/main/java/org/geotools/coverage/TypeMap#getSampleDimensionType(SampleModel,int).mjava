    /**
     * Returns the sample dimension type for the specified sample model and band number. If the
     * sample model use an undefined data type, then this method returns {@code null}.
     *
     * @param model The sample model.
     * @param band The band to query.
     * @return The sample dimension type for the specified sample model and band number.
     * @throws IllegalArgumentException if the band number is not in the valid range.
     */
    @SuppressWarnings("fallthrough")
    public static SampleDimensionType getSampleDimensionType(
            final SampleModel model, final int band) throws IllegalArgumentException {
        if (band < 0 || band >= model.getNumBands()) {
            throw new IllegalArgumentException(Errors.format(ErrorKeys.BAD_BAND_NUMBER_$1, band));
        }
        boolean signed = true;
        switch (model.getDataType()) {
            case DataBuffer.TYPE_DOUBLE:
                return REAL_64BITS;
            case DataBuffer.TYPE_FLOAT:
                return REAL_32BITS;
            case DataBuffer.TYPE_USHORT: // Fall through
            case DataBuffer.TYPE_BYTE:
                signed = false; // Fall through
            case DataBuffer.TYPE_INT:
            case DataBuffer.TYPE_SHORT:
                {
                    switch (model.getSampleSize(band)) {
                        case 1:
                            return UNSIGNED_1BIT;
                        case 2:
                            return UNSIGNED_2BITS;
                        case 4:
                            return UNSIGNED_4BITS;
                        case 5:
                            return UNSIGNED_8BITS; // for BufferedImages TYPE_USHORT_555_RGB
                            // TYPE_USHORT_565_RGB
                        case 8:
                            return signed ? SIGNED_8BITS : UNSIGNED_8BITS;
                        case 16:
                            return signed ? SIGNED_16BITS : UNSIGNED_16BITS;
                        case 32:
                            return signed ? SIGNED_32BITS : UNSIGNED_32BITS;
                    }
                }
        }
        return null;
    }

