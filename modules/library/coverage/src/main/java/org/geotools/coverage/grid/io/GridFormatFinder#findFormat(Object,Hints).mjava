    /**
     * Returns a {@link Format} that is able to read a certain object. If no {@link Format} is able
     * to read such an {@link Object} we return an {@link UnknownFormat} object.
     *
     * <p>
     * It is worth to point out that this method will try to convert each format implementation to
     * {@link AbstractGridFormat} because the original {@link Format} interface did not allow for an
     * accept method hence we had to subclass the interface to add such method and we did so by the
     * {@link AbstractGridFormat} abstract class.
     *
     * @param o the object to check for acceptance.
     * @param hints the {@link Hints} to control the format search.
     * @return an {@link AbstractGridFormat} that has stated to accept this {@link Object} o or
     *         <code>null</code> in no plugins was able to accept it.
     */
    public static synchronized AbstractGridFormat findFormat(Object o, Hints hints) {
        final Set<AbstractGridFormat> formats = findFormats(o, hints);
        // world image and geotiff can both open tif files, give priority to geotiff
        for (AbstractGridFormat f : formats) {
            if ("GeoTIFF".equals(f.getName())) {
                return f;
            }
        }

        // otherwise just pick the first
        final Iterator<AbstractGridFormat> it = formats.iterator();
        if (it.hasNext()) {
            return it.next();
        }
        return new UnknownFormat();

    }

