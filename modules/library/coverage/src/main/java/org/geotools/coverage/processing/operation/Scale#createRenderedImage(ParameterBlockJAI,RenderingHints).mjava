	@Override
	protected RenderedImage createRenderedImage(ParameterBlockJAI parameters, RenderingHints hints) {
		final RenderedImage source = (RenderedImage) parameters.getSource(0);
		final Interpolation interpolation;
		if(parameters.getObjectParameter("Interpolation")!=null)
			interpolation=(Interpolation) parameters.getObjectParameter("Interpolation");
		else
			if(hints.get(JAI.KEY_INTERPOLATION)!=null)
				interpolation=(Interpolation) hints.get(JAI.KEY_INTERPOLATION);
			else
			{
				//I am pretty sure this should not happen. However I am not sure we should throw an error
				interpolation=null;
			}
		final int transferType = source.getSampleModel().getDataType();
		final JAI processor = OperationJAI.getJAI(hints);
		PlanarImage image;
		if (interpolation!=null&&!(interpolation instanceof InterpolationNearest)
				&& (transferType == DataBuffer.TYPE_FLOAT || transferType == DataBuffer.TYPE_DOUBLE)) {

			synchronized (lock) {

				/**
				 * Disables the native acceleration for the "Scale" operation.
				 * In JAI 1.1.2, the "Scale" operation on TYPE_FLOAT datatype
				 * with INTERP_BILINEAR interpolation cause an exception in the
				 * native code of medialib, which halt the Java Virtual Machine.
				 * Using the pure Java implementation instead resolve the
				 * problem.
				 * 
				 * @todo Remove this hack when Sun will fix the medialib bug.
				 *       See
				 *       http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4906854
				 */

				Registry.setNativeAccelerationAllowed(getName(), false);
				image = processor.createNS(getName(),
						parameters, hints).getRendering();


				/**
				 * see above
				 */
				Registry.setNativeAccelerationAllowed(getName(), true);
			}

		} else
			image = processor.createNS(getName(), parameters, hints);

		return image;
	}

