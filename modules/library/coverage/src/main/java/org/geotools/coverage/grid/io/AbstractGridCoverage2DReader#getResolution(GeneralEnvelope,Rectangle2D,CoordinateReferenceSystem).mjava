    /**
     * This method is responsible for computing the resolutions in for the provided grid geometry in
     * the provided crs.
     *
     * <p>It is worth to note that the returned resolution array is of length of 2 and it always is
     * lon, lat for the moment.<br>
     * It might be worth to remove the axes reordering code when we are confident enough with the
     * code to handle the north-up crs.
     *
     * <p>TODO use orthodromic distance?
     *
     * @param envelope the GeneralEnvelope
     */
    protected static final double[] getResolution(
            GeneralEnvelope envelope, Rectangle2D dim, CoordinateReferenceSystem crs)
            throws DataSourceException {
        double[] requestedRes = null;
        try {
            if (dim != null && envelope != null && crs != null) {
                // do we need to transform the originalEnvelope?
                final CoordinateReferenceSystem envelopeCrs2D =
                        CRS.getHorizontalCRS(envelope.getCoordinateReferenceSystem());
                if (envelopeCrs2D != null && !CRS.equalsIgnoreMetadata(crs, envelopeCrs2D)) {
                    CoordinateOperationFactory operationFactory =
                            CRS.getCoordinateOperationFactory(true);
                    CoordinateOperation op = operationFactory.createOperation(envelopeCrs2D, crs);
                    envelope = CRS.transform(op, envelope);
                    envelope.setCoordinateReferenceSystem(crs);
                }
                requestedRes = new double[2];
                requestedRes[0] = envelope.getSpan(0) / dim.getWidth();
                requestedRes[1] = envelope.getSpan(1) / dim.getHeight();
            }
            return requestedRes;
        } catch (TransformException e) {
            throw new DataSourceException("Unable to get resolution", e);
        } catch (FactoryException e) {
            throw new DataSourceException("Unable to get resolution", e);
        }
    }

