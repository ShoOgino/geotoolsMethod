    /**
     * Creates a FeatureEvent indicating that the provided feature has been changed.
     * <p>
     * This method is provided to simplify event notification for implementors by constructing
     * a FeatureEvent internally (and then only if listeners are interested). You may find it
     * easier to construct your own FeatureEvent using {{@link #hasListener()} to check if
     * you need to fire events at all.
     * 
     * @param source FeatureSource responsible for the change
     * @param feature The updated feature
     * @param before the bounds of the feature before the change
     */
    public void fireFeatureUpdated(FeatureSource<?, ?> source, Feature feature,
            ReferencedEnvelope before) {
        if( feature == null){
            return; // nothing changed
        }
        if (listeners.isEmpty() && tx != Transaction.AUTO_COMMIT)
            return; // nobody is listenting

        Filter filter = idFilter(feature);
        ReferencedEnvelope bounds = ReferencedEnvelope.reference(feature.getBounds());
        if( bounds != null ){
            bounds.expandToInclude(before);
        }
        
        FeatureEvent event = new FeatureEvent(source, Type.CHANGED, bounds, filter);
        fireFeatureEvent(event);
    }

