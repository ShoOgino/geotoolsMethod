    /**
     * Locks features specified by a filter.
     */
    public final int lockFeatures(Filter filter) throws IOException {
        Logger logger = getDataStore().getLogger();
        
        String typeName = getSchema().getTypeName(); 
        
         FeatureReader<SimpleFeatureType, SimpleFeature> reader = getReader(filter);
        try {
            int locked = 0;
            while( reader.hasNext() ) {
                SimpleFeature feature = reader.next();
                try {
                    //
                    // Use native locking?
                    //
                    if(canLock()) {
                        doLockInternal(typeName,feature);
                    } else {
                        getDataStore().getLockingManager()
                            .lockFeatureID(typeName, feature.getID(), transaction, lock);
                    }
                    
                    logger.fine( "Locked feature: " + feature.getID() );
                    locked++;
                }
                catch( FeatureLockException e ) {
                    //ignore
                    String msg = "Unable to lock feature:" + feature.getID() + "." + 
                        " Change logging to FINEST for stack trace";
                    logger.fine( msg );
                    logger.log( Level.FINEST, "Unable to lock feature: " + feature.getID(), e );
                }
            }
            
            return locked;
        }
        finally {
            reader.close();
        }
    }

