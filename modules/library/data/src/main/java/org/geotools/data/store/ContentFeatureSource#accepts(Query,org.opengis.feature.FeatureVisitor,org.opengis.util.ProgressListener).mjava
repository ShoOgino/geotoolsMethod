    /**
     * Visit the features matching the provided query.
     * <p>
     * The default information will use getReader( query ) and pass each feature to the provided visitor.
     * Subclasses should override this method to optimise common visitors:
     * <ul>
     * <li> {@link Collection_AverageFunction}
     * <li> {@link Collection_BoundsFunction}
     * <li> (@link Collection_CountFunction}
     * <li> {@link Collection_MaxFunction}
     * <li> {@link Collection_MedianFunction}
     * <li> {@link Collection_MinFunction}
     * <li> {@link Collection_SumFunction}
     * <li> {@link Collection_UniqueFunction}
     * </ul>
     * Often in the case of Filter.INCLUDES the information can be determined from a file header or metadata table.
     * <p>
     * 
     * @param visitor Visitor called for each feature 
     * @param progress Used to report progress; and errors on a feature by feature basis
     * @throws IOException
     */
    public void accepts( Query query, org.opengis.feature.FeatureVisitor visitor,
            org.opengis.util.ProgressListener progress) throws IOException {
        
        if( progress == null ) {
            progress = new NullProgressListener();
        }
        

        if ( handleVisitor(query,visitor) ) {
            //all good, subclass handled
            return;
        }

        //subclass could not handle, resort to manually walkign through
        FeatureReader<SimpleFeatureType, SimpleFeature> reader = getReader(query);
        try{
            float size = progress instanceof NullProgressListener ? 0.0f : (float) getCount( query );
            float position = 0;
            progress.started();
            while( reader.hasNext() ){
                if (size > 0) progress.progress( position++/size );
                try {
                    SimpleFeature feature = reader.next();
                    visitor.visit(feature);
                }
                catch( Exception erp ){
                    progress.exceptionOccurred( erp );
                }
            }
        }
        finally {
            progress.complete();            
            reader.close();
        }
    }

