    /**
     * Returns the count of the number of features of the feature source.
     * <p>
     * This method calls through to {@link #getCount(Query)} which 
     * subclasses must implement. It also contains optimizations which check 
     * state for cached values.
     * </p>
     */
    public final int getCount(Query query) throws IOException {
        query = joinQuery( query );
        query = resolvePropertyNames( query );
        /*
        if ( query == Query.ALL ) {
            //check the cache
            if ( getState().getCount() != -1 ) {
                return getState().getCount();
            }
        }
        */
        
        //calculate the count
        //TODO: figure out if we need to calculate manually based on canFilter
        int count = getCountInternal( query );
        
        /*
        if ( query == Query.ALL ) {
            //update the cache
            synchronized (getState()) {
                getState().setCount( count );
            }
        }
        */
        
        return count;
    }
    //    return filtered(entry.getState(transaction), query.getFilter()).size();
    //}

