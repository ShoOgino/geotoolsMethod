    /**
     * Helper method to look up an entry in the datastore.
     * <p>
     * This method will create a new instance of {@link ContentEntry} if one
     * does not exist.
     * </p>
     * <p>
     * In the event that the name does not map to an entry
     * and one cannot be created <code>null</code> will be returned. Note that
     * {@link #ensureEntry(TypeName)} will throw an exception in this case.
     * </p>
     *
     * @param The name of the entry.
     *
     * @return The entry, or <code>null</code> if it does not exist.
     */
    final protected ContentEntry entry(Name name) throws IOException {
        ContentEntry entry = null;

        boolean found = entries.containsKey(name);
        if (!found && name.getNamespaceURI() == null && this.namespaceURI != null) {
            Name defaultNsName = new NameImpl(namespaceURI, name.getLocalPart());
            if (entries.containsKey(defaultNsName)) {
                name = defaultNsName;
                found = true;
            }
        }

        // try a namespace-less match next (as createTypeNames() can be expensive)
        if (!found) {
            List<Name> typeNames = createTypeNames();
            found = typeNames.contains(name);
            if (!found && name.getNamespaceURI() == null) {
                for (Name typeName : typeNames) {
                    if (typeName.getLocalPart().equals(name.getLocalPart())) {
                        name = typeName;
                        found = true;
                        break;
                    }
                }
            }
        }

        if (found) {
            // yes, create an entry for it
            synchronized (this) {
                if (!entries.containsKey(name)) {
                    entry = new ContentEntry(this, name);
                    entries.put(name, entry);
                }
            }

            entry = entries.get(name);
        }


        return entries.get(name);
    }

