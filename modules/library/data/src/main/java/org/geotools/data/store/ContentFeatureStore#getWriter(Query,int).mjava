    /**
     * Returns a writer over features specified by a query.
     * 
     * @param query The query
     * @param flags flags specifying writing mode
     */
    public final FeatureWriter<SimpleFeatureType, SimpleFeature> getWriter( Query query, int flags ) throws IOException {
        query = joinQuery( query );
        query = resolvePropertyNames(query);
        
        FeatureWriter<SimpleFeatureType, SimpleFeature> writer;

        if (!canTransact() && transaction != null && transaction != Transaction.AUTO_COMMIT) {
            DiffTransactionState state = (DiffTransactionState) getTransaction().getState(getEntry());
            FeatureReader<SimpleFeatureType, SimpleFeature> reader = getReader(query);
            writer = new DiffContentFeatureWriter(this, state.getDiff(), reader);
        } else {
            writer = getWriterInternal(query, flags);

            // events
            if (canTransact() && !canEvent()){
                writer = new EventContentFeatureWriter(this, writer );
            }
            // filtering
            if (!canFilter()) {
                if (query.getFilter() != null && query.getFilter() != Filter.INCLUDE) {
                    writer = new FilteringFeatureWriter(writer, query.getFilter());
                }
            }

            // Use InProcessLockingManager to assert write locks?
            if (!canLock()) {
                LockingManager lockingManager = getDataStore().getLockingManager();
                writer = ((InProcessLockingManager) lockingManager).checkedWriter(writer,
                        transaction);
            }
        }
        
        // Finished
        return writer;
    }

