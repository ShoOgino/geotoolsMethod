    /**
     * Performs a gamma correction operation on the input image.
     *
     * @param worker the input {@link ImageWorker} to work on.
     * @param hints {@link Hints} to control the contrast enhancement process.
     * @return a {@link RenderedImage} on which a gamma correction has been performed.
     */
    private RenderedImage performGammaCorrection(ImageWorker worker, final Hints hints) {
        worker.setRenderingHints(hints);

        // note that we should work on a single band
        RenderedImage inputImage = worker.getRenderedOperation();
        assert inputImage.getSampleModel().getNumBands() == 1 : inputImage;

        final int dataType = inputImage.getSampleModel().getDataType();
        RenderedImage result = inputImage;
        if (!Double.isNaN(gammaValue) && Math.abs(gammaValue - 1.0) > 1E-6) {
            if (dataType == DataBuffer.TYPE_BYTE) {

                // //
                //
                // Byte case, use lookup to optimize
                //
                // //
                final byte[] lut = new byte[256];
                for (int i = 1; i < lut.length; i++) {
                    lut[i] = (byte) (255.0 * Math.pow(i / 255.0, gammaValue) + 0.5d);
                }

                // apply the operation now
                LookupTable table = LookupTableFactory.create(lut, dataType);
                worker.lookup(table);
            } else {
                //
                // Generic case
                //
                //
                // STEP 1 do the extrema
                //
                final double[] minimum = worker.getMinimums();
                final double[] maximum = worker.getMaximums();

                //
                // STEP 2 do the gamma correction by using generic piecewise
                //
                final PiecewiseTransform1D<DefaultPiecewiseTransform1DElement> transform =
                        ContrastEnhancementType.generateGammaCorrectedPiecewise(
                                minimum[0], maximum[0], gammaValue);
                worker.piecewise(transform, Integer.valueOf(0));
            }
        }
        result = worker.getRenderedImage();
        assert result.getSampleModel().getNumBands() == 1 : result;
        return result;
    }

