    /**
     * Icon for grid data, small grid made up of provided colors.
     * <p>
     * Layout:<pre><code>
     *    0 1 2 3 4 5 6 7 8 9 101112131415
     *  0
     *  1   AAAAAAAAAAAAABBBBBBBBBBBBBB
     *  2   AAAAAAAAAAAAABBBBBBBBBBBBBB
     *  3   AAAAAAAAAAAAABBBBBBBBBBBBBB
     *  4   AAAAAAAAAAAAABBBBBBBBBBBBBB
     *  5   AAAAAAAAAAAAABBBBBBBBBBBBBB
     *  6   AAAAAAAAAAAAABBBBBBBBBBBBBB
     *  7   AAAAAAAAAAAAABBBBBBBBBBBBBB
     *  8   CCCCCCCCCCCCCDDDDDDDDDDDDDD
     *  9   CCCCCCCCCCCCCDDDDDDDDDDDDDD
     * 10   CCCCCCCCCCCCCDDDDDDDDDDDDDD
     * 11   CCCCCCCCCCCCCDDDDDDDDDDDDDD
     * 12   CCCCCCCCCCCCCDDDDDDDDDDDDDD
     * 13   CCCCCCCCCCCCCDDDDDDDDDDDDDD
     * 14   CCCCCCCCCCCCCDDDDDDDDDDDDDD
     * 15
     * </code><pre>
     * </p>
     * @param a
     * @param b
     * @param c
     * @param d1
     * @return Icon representing a grid
     *
     */
    public static BufferedImage grid(Color a, Color b, Color c, Color d) {
        BufferedImage bi =
                new BufferedImage(DEFAULT_WIDTH, DEFAULT_HEIGHT, BufferedImage.TYPE_INT_ARGB);

        Graphics2D gc = (Graphics2D) bi.getGraphics();
        gc.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

        if (a == null) a = Color.BLACK;
        if (b == null) b = Color.DARK_GRAY;
        if (c == null) c = Color.LIGHT_GRAY;
        if (d == null) d = Color.WHITE;

        gc.setColor(a);
        gc.fillRect(0, 0, 7, 7);

        gc.setColor(b);
        gc.fillRect(7, 0, 15, 7);

        gc.setColor(c);
        gc.fillRect(0, 7, 7, 15);

        gc.setColor(d);
        gc.fillRect(7, 7, 15, 15);

        gc.setColor(Color.BLACK);
        gc.drawRect(0, 0, 7, 7);
        gc.drawRect(0, 0, 15, 7);
        gc.drawRect(0, 7, 7, 15);
        gc.drawRect(0, 7, 15, 15);

        return bi;
    }

