    private List<LineComponent> buildLineComponents(
            String text,
            Font font,
            LabelCacheItem labelItem,
            Graphics2D graphics,
            TextLayout layout) {
        final double wordSpacing = labelItem.getWordSpacing();
        if (text.trim().indexOf(' ') == -1 || wordSpacing <= 0) {
            // no word spacing
            LineComponent component =
                    new LineComponent(
                            text, layoutSentence(text, labelItem, graphics, font), layout);
            return Arrays.asList(component);
        } else {
            // java does not support word spacing, we need to fake it. Since the machinery
            // works against LineCompoennts we'll insert extra ones between the words
            // having the right extra size
            String[] parts = WORD_SPLITTER.split(text);
            List<LineComponent> result = new ArrayList<>();
            for (int i = 0; i < parts.length; i++) {
                String part = parts[i];
                LineComponent component =
                        new LineComponent(
                                part, layoutSentence(part, labelItem, graphics, font), layout);
                result.add(component);
                if (i < parts.length - 1) {
                    // add a fake space with a tracking adjusting its size to the
                    // desired extra word spacing
                    double tracking = wordSpacing / font.getSize();
                    Font spacerFont =
                            font.deriveFont(
                                    Collections.singletonMap(TextAttribute.TRACKING, tracking));
                    TextLayout spacerLayout =
                            new TextLayout(
                                    SINGLE_CHAR_STRING,
                                    spacerFont,
                                    graphics.getFontRenderContext());
                    LineComponent spacer =
                            new LineComponent(
                                    SINGLE_CHAR_STRING,
                                    layoutSentence(
                                            SINGLE_CHAR_STRING, labelItem, graphics, spacerFont),
                                    spacerLayout);
                    result.add(spacer);
                }
            }
            return result;
        }
    }

