	/**
	 * Create a lookup table to be used in the case of byte data.
	 * @param numBands 
	 * @throws TransformException 
	 */
	private void createLUT(final int numBands) throws TransformException {
	    // Allocate memory for the data array references.
	    final byte[][] data = new byte[numBands][];
	
	    // Generate the data for each band.
	    for(int band = 0; band < numBands; band++) {
	        // Allocate memory for this band.
	        data[band] = new byte[256];
	
	        // Cache the references to avoid extra indexing.
	        final byte[] table = data[band];

	
	        // Initialize the lookup table data.
			PiecewiseTransform1DElement lastPiecewiseElement = null;
	        for(int value = 0; value < 256; value++) {
				
				
				// //
				//
				// get the correct piecewise element for this
				// transformation
				//
				// //
				final PiecewiseTransform1DElement piecewiseElement;
				if (useLast) {
					if (lastPiecewiseElement != null && lastPiecewiseElement.contains(value))
						piecewiseElement = lastPiecewiseElement;
					else {
						lastPiecewiseElement = piecewiseElement = (PiecewiseTransform1DElement) piecewise
								.findDomainElement(value);
					}
				} else
					piecewiseElement = (PiecewiseTransform1DElement) piecewise
							.findDomainElement(value);

				// //
				//
				// in case everything went fine let's apply the
				// transform.
				//
				// //
				if (piecewiseElement != null)
					table[value] =
		                ImageUtil.clampRoundByte(piecewiseElement
							.transform(value));
				else {
					// //
					//
					// if we did not find one let's try to use
					// one of the nodata ones to fill the gaps,
					// if we are allowed to (see above).
					//
					// //
					if (hasGapsValue)
						table[value] =
			                ImageUtil.clampRoundByte(gapsValue);
					else

						// //
						//
						// if we did not find one let's throw a
						// nice error message
						//
						// //
						throw new IllegalArgumentException(Errors.format(ErrorKeys.ILLEGAL_ARGUMENT_$1, Double.toString(value)));
				}
	            
	        }
	        



		      
	    }
	
	    // Construct the lookup table.
	    lut = data;
	}

