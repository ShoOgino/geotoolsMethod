	/**
	 * Abstract domain element constructor.
	 * 
	 * <p>
	 * It builds up an {@link DefaultDomainElement1D} with the provided name and input
	 * range.
	 * 
	 * @param name
	 *            for this {@link DefaultDomainElement1D}.
	 * @param range
	 *            for this {@link DefaultDomainElement1D}.
	 * @throws IllegalArgumentException
	 *             in case one of the input arguments is invalid.
	 */
	public DefaultDomainElement1D(final CharSequence name,
			final NumberRange<?> inputRange) throws IllegalArgumentException {
		// /////////////////////////////////////////////////////////////////////
		//
		// Initial checks
		//
		// /////////////////////////////////////////////////////////////////////
		PiecewiseUtilities.ensureNonNull("name", name);
		PiecewiseUtilities.ensureNonNull("range", inputRange);
		
		// /////////////////////////////////////////////////////////////////////
		//
		// Initialise fields
		//
		// /////////////////////////////////////////////////////////////////////
		this.name = SimpleInternationalString.wrap(name);
		this.range = inputRange;
		Class<? extends Number> type = inputRange.getElementClass();
		boolean minInc = inputRange.isMinIncluded();
		boolean maxInc = inputRange.isMaxIncluded();
		final double tempMin = inputRange.getMinimum();
		final double tempMax = inputRange.getMaximum();
		if (Double.isInfinite(tempMin)) {
			this.inputMinimum = tempMin;
			inputMinimumInf = true;
		} else
			this.inputMinimum = PiecewiseUtilities.doubleValue(type, inputRange
					.getMinValue(), minInc ? 0 : +1);
		if (Double.isInfinite(tempMax)) {
			this.inputMaximum = tempMax;
			inputMaximumInf = true;
		} else
			this.inputMaximum = PiecewiseUtilities.doubleValue(type, inputRange
					.getMaxValue(), maxInc ? 0 : -1);
		// /////////////////////////////////////////////////////////////////////
		//
		// Checks
		//
		// /////////////////////////////////////////////////////////////////////

		// //
		//
		// only one input values is NaN
		//
		// //
		inputMinimumNaN = Double.isNaN(inputMinimum);
		inputMaximumNaN = Double.isNaN(inputMaximum);
		if ((inputMinimumNaN && !inputMaximumNaN)
				|| (!inputMinimumNaN && inputMaximumNaN))
			throw new IllegalArgumentException(Errors.format(
					ErrorKeys.BAD_RANGE_$2, inputRange.getMinValue(),
					inputRange.getMaxValue()));

	}

