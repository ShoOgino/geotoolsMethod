    /** */
    void processFeature(
            RenderableFeature rf, LiteFeatureTypeStyle fts, ProjectionHandler projectionHandler) {
        try {
            // init the renderable feature for this fts
            rf.inMemoryGeneralization = fts.inMemoryGeneralization;
            rf.projectionHandler = projectionHandler;
            rf.setScreenMap(fts.screenMap);
            rf.layer = fts.layer;
            rf.metaBuffer = fts.metaBuffer;

            // can the rules
            boolean doElse = true;
            Rule[] elseRuleList = fts.elseRules;
            Rule[] ruleList = fts.ruleList;
            Rule r;
            Filter filter;
            Graphics2D graphics = fts.graphics;
            // applicable rules
            int paintCommands = 0;
            for (Rule value : ruleList) {
                r = value;
                filter = r.getFilter();

                if (filter == null || filter.evaluate(rf.feature)) {
                    doElse = false;
                    paintCommands += processSymbolizers(graphics, rf, r.symbolizers());

                    // bail out if we are in match first mode
                    if (fts.matchFirst) {
                        break;
                    }
                }
            }

            if (doElse) {
                for (Rule rule : elseRuleList) {
                    r = rule;

                    paintCommands += processSymbolizers(graphics, rf, r.symbolizers());
                }
            }

            // only emit a feature drawn event if we actually painted something with it,
            // if it has been clipped out or eliminated by the screenmap we won't emit the event
            // instead
            if (paintCommands > 0) {
                requests.put(new FeatureRenderedRequest(rf.feature));
            }

        } catch (Throwable tr) {
            fireErrorEvent(tr);
        }
    }

