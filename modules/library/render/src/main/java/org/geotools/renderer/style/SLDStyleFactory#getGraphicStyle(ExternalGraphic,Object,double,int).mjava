	/**
	 * Tries to parse the provided external graphic into a BufferedImage.
	 * 
	 * @param eg
	 * @param feature
	 * @param size
	 * @return the image, or null if the external graphics could not be
	 *         interpreted
	 */
	private GraphicStyle2D getGraphicStyle(ExternalGraphic eg, Object feature,
			double size, int border) {
		Icon icon = getIcon(eg, feature, toImageSize(size));
		if (icon != null) {
			// optimization, if this is an IconImage based on a BufferedImage,
			// just return the
			// wrapped one
			if (icon instanceof ImageIcon) {
				ImageIcon img = (ImageIcon) icon;
				if (img.getImage() instanceof BufferedImage) {
					// return the image as is, no border
					BufferedImage image = (BufferedImage) img.getImage();
					return new GraphicStyle2D(image, 0, 0);
				}
			}

			// otherwise have the icon draw itself on a BufferedImage
			BufferedImage result = new BufferedImage(icon.getIconWidth()
					+ border * 2, icon.getIconHeight() + border * 2,
					BufferedImage.TYPE_4BYTE_ABGR);
			Graphics2D g = (Graphics2D) result.getGraphics();
			// we paint it once, make it look good
			g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
					RenderingHints.VALUE_ANTIALIAS_ON);
			g.setRenderingHint(RenderingHints.KEY_RENDERING,
					RenderingHints.VALUE_RENDER_QUALITY);
			g.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,
					RenderingHints.VALUE_STROKE_PURE);
			icon.paintIcon(null, g, 1, 1);
			g.dispose();

			return new GraphicStyle2D(result, 0, 0, border);
		}

		return null;
	}

