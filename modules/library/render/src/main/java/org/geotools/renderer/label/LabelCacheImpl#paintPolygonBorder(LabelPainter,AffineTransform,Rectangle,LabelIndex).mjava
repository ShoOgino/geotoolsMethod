    /** Splits the polygon into its component lines and labels those, one by one */
    private boolean paintPolygonBorder(
            LabelPainter painter,
            AffineTransform tempTransform,
            Rectangle displayArea,
            LabelIndex glyphs)
            throws Exception {
        // turn the polygon in its component lines
        Geometry geometry = painter.getLabel().getGeometry();
        // for offset based labeling to make sense on polygons (controlling inside vs outside)
        // we need to normalize the geometry (it basically fixing the coordinate order of the rings,
        // shell clockwise, holes counterclockwise)
        if (painter.getLabel().getTextStyle().getPerpendicularOffset() != 0) {
            geometry.normalize();
        }
        List<LineString> lines = new ArrayList<>();
        geometry.apply(
                (GeometryComponentFilter)
                        g -> {
                            if (g instanceof LineString) {
                                lines.add((LineString) g);
                            }
                        });

        // loop over every line and draw labels on it
        boolean painted = false;
        LabelCacheItem item = painter.getLabel();
        LabelCacheItem itemCopy = new LabelCacheItem(item);
        for (LineString ls : lines) {
            itemCopy.geoms.clear();
            itemCopy.geoms.add(ls);
            painter.setLabel(itemCopy);
            if (!DISABLE_LETTER_LEVEL_CONFLICT) {
                painted |=
                        paintLineLabelsWithLetterConflict(
                                painter, tempTransform, displayArea, glyphs);
            } else {
                painted |= paintLineLabels(painter, tempTransform, displayArea, glyphs);
            }
        }

        return painted;
    }

