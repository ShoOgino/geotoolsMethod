	/**
	 * This method is responsible for performing a few checks on the provided
	 * range in order to make sure we are talking about a valid range for
	 * building an {@link IndexColorModel}.
	 * 
	 * @param numberRange
	 *            the range to use for mapping values to colors.
	 * @return the input {@link NumberRange} if everything goes well.
	 * @see IndexColorModel
	 */
	private static NumberRange<? extends Number> checkSampleRange(NumberRange<? extends Number> numberRange) {
		if (numberRange == null)
			throw new IllegalArgumentException();
		final Class<?> elementClass = numberRange.getElementClass();
		if (!elementClass.equals(Integer.class)
				&& !elementClass.equals(Byte.class)
				&& !elementClass.equals(Short.class))
			throw new IllegalArgumentException(Errors.format(ErrorKeys.ILLEGAL_ARGUMENT_$1, numberRange));
		if (numberRange.getMinimum() < 0 || numberRange.getMaximum() > 65535)
			throw new IndexOutOfBoundsException(Errors.format(ErrorKeys.ILLEGAL_ARGUMENT_$1, numberRange));
		return numberRange;
	}

