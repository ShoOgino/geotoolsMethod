        @Override
        void execute() {
            final Object grid = gridPropertyName.evaluate(content);
            if (LOGGER.isLoggable(Level.FINE))
                LOGGER.fine(new StringBuffer("rendering Raster for feature ")
                .append(content.toString()).append(" - ").append(
                        grid).toString());

            GridCoverage2D coverage=null;
            try {
                // /////////////////////////////////////////////////////////////////
                //
                // If the grid object is a reader we ask him to do its best for the
                // requested resolution, if it is a gridcoverage instead we have to
                // rely on the gridocerage renderer itself.
                //
                // /////////////////////////////////////////////////////////////////
                final GridCoverageRenderer gcr = new GridCoverageRenderer(
                        destinationCRS, originalMapExtent, screenSize, worldToScreen,java2dHints);

                // //
                // It is a grid coverage
                // //
                if (grid instanceof GridCoverage) {
                    gcr.paint(graphics, (GridCoverage2D) grid, symbolizer);
                } else if (grid instanceof AbstractGridCoverage2DReader) {
                    final Object params = paramsPropertyName.evaluate(content);
                    GridGeometry2D readGG = new GridGeometry2D(new GridEnvelope2D(screenSize), mapExtent);
                    AbstractGridCoverage2DReader reader = (AbstractGridCoverage2DReader) grid;
                    coverage = readCoverage(reader, params, readGG);
                    try {
                        if(coverage!=null)
                            gcr.paint(graphics, coverage, symbolizer);
                    }
                    finally {

                        //we need to try and dispose this coverage since it was created on purpose for rendering 
                        if(coverage!=null)
                            coverage.dispose(true);
                    }
                }
                if (LOGGER.isLoggable(Level.FINE))
                    LOGGER.fine("Raster rendered");

            } catch (FactoryException e) {
                LOGGER.log(Level.WARNING, e.getLocalizedMessage(), e);
                fireErrorEvent(e);
            } catch (TransformException e) {
                LOGGER.log(Level.WARNING, e.getLocalizedMessage(), e);
                fireErrorEvent(e);
            } catch (NoninvertibleTransformException e) {
                LOGGER.log(Level.WARNING, e.getLocalizedMessage(), e);
                fireErrorEvent(e);
            } catch (IllegalArgumentException e) {
                LOGGER.log(Level.WARNING, e.getLocalizedMessage(), e);
                fireErrorEvent(e);
            } catch (IOException e) {
                LOGGER.log(Level.WARNING, e.getLocalizedMessage(), e);
                fireErrorEvent(e);
            }


        }

