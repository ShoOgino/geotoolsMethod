    public void drawFeatures(Graphics2D graphics, final StreamingRenderer renderer, String layerId)
            throws IOException, FactoryException, NoninvertibleTransformException, SchemaException,
            TransformException {
        // 1) init all the readers and the lfts associated to them (one at a time to avoid deadlock)
        // and create one RenderableFeature for each
        // 2) process all the features one z-level at a time, backtracking if there are multiple
        // fts for a certain layer.

        // a listener passed around to stop data reading/painting if rendering stop request is
        // issued
        ProgressListener cancellationListener = new DefaultProgressListener() {
            public boolean isCanceled() {
                return renderer.renderingStopRequested;
            };
        };

        List<ZGroupLayerPainter> painters = null;
        try {
            painters = buildLayerPainters(graphics, renderer, layerId, cancellationListener);
            if (painters.isEmpty()) {
                return;
            }

            // get a comparator to find the first key to paint
            Comparator<SortKey> comparator = SortKey.buildComparator(painters.get(0).sortBy);

            // paint all the features as we can
            SortKey previousKey = null;
            while (!painters.isEmpty()) {
                SortKey smallestKey = getSmallestKey(painters, comparator);
                if (previousKey == null) {
                    previousKey = smallestKey;
                } else if(comparator.compare(previousKey, smallestKey) >= 0) {
                    throw new IllegalStateException("The sorted rendering moved from a set of "
                            + "sort attributes, to one that's equal or greater, this is unexpected, "
                            + "bailing out to avoid an infinite loop");
                } else {
                    previousKey = smallestKey;
                }

                for (Iterator it = painters.iterator(); it.hasNext();) {
                    ZGroupLayerPainter painter = (ZGroupLayerPainter) it.next();
                    painter.paintKey(smallestKey);
                    // if the painter is done, close it
                    if (painter.complete()) {
                        painter.close();
                        it.remove();
                    }
                }
            }
        } finally {
            if (painters != null) {
                for (ZGroupLayerPainter painter : painters) {
                    painter.close();
                }
            }
        }
    }

