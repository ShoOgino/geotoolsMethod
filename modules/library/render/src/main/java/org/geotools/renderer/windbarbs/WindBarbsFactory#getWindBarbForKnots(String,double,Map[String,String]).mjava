    private Shape getWindBarbForKnots(final String windBarbName, final double knots,
            Map<String, String> params) {
        // No module is signaled by NaN
        // checking the barbs using our own limits
        int index = -1;// no wind module is -1
        if (!Double.isNaN(knots)) {
            if (knots < 3) {
                index = 0;
            } else {
                index = (int) ((knots - 3.0) / 5.0 + 1);
            }
        }

        // get the barb
        if (windBarbName.equalsIgnoreCase(DEFAULT_NAME)) {

            WindBarbDefinition definition = parseWindBarbsDefinition(params);
            Map<Integer, Shape> windbarbs = null;
            synchronized (CACHE) {
                windbarbs = CACHE.get(definition);
                if (windbarbs == null) {
                    windbarbs = createWindBarbs(definition);
                    CACHE.put(definition, windbarbs);
                }
            }

            // get shape from cached definitions.
            Shape shp = windbarbs.get(index);
            if (shp == null) {
                // No definition available. build it on the fly without caching it 
                // (supposing it's a rare barb since we are caching up to MAX_SPEED)
                shp = new WindBarb(definition, (int) knots).build();
            }
            if (params == null || params.isEmpty()) {
                return shp;
            }

            if (params.containsKey("emisphere") && params.get("emisphere").equalsIgnoreCase("s")) {
                // flip shape on Y axis
                return SOUTHERN_EMISPHERE_FLIP.createTransformedShape(shp);
            }
            if (params.containsKey("hemisphere") && params.get("hemisphere").equalsIgnoreCase("s")) {
                // flip shape on Y axis
                return SOUTHERN_EMISPHERE_FLIP.createTransformedShape(shp);
            }
            return shp;
        }

        throw new IllegalArgumentException("Wrong windbard name:" + windBarbName);
    }

