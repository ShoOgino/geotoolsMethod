    private double[] buildLabelPositions(int labelDistance, final double lineStringLength) {
        // create the candidate positions for the labels over the line. If
        // we can place just one label or we're not supposed to replicate them, create the mid
        // position, otherwise create mid and then create the sequence of before and after labels
        double[] labelPositions;
        if (labelDistance > 0 && labelDistance < lineStringLength / 2) {
            // one label in the middle, plus all the labels we can fit before/after on the two half lines
            final int positionCount = (int) ((lineStringLength / 2) / labelDistance) * 2 + 1;
            labelPositions = new double[positionCount];
            labelPositions[0] = lineStringLength / 2;
            double offset = labelDistance;
            for (int i = 1; i < labelPositions.length; i++) {
                labelPositions[i] = labelPositions[i - 1] + offset;
                // this will generate a sequence like s, -2s, 3s, -4s, ...
                // which will make the cursor alternate on mid + s, mid - s,
                // mid + 2s, mid - 2s, mid + 3s, ...
                offset = nextOffset(offset, labelDistance);
            }
        } else {
            labelPositions = new double[1];
            labelPositions[0] = lineStringLength / 2;
        }
        
        return labelPositions;
    }

