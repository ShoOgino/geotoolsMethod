    /**
     * Compute next offset. It generates a sequence like s, -2s, 3s, -4s,... which will make the
     * cursor alternate on mid + s, mid - s, mid + 2s, mid - 2s, mid + 3s, ...
     *
     * @param currOffset last offset
     * @param step step between two positions
     * @return next offset
     */
    private double nextOffset(double currOffset, double step) {
        double signum = Math.signum(currOffset);
        if (signum == 0) {
            return step;
        } else {
            return -1 * signum * (Math.abs(currOffset) + step);
        }
    }

