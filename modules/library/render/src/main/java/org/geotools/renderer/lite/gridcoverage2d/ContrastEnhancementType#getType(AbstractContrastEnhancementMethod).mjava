    /**
     * Return a proper {@link ContrastEnhancementType} instance depending on the provided {@link AbstractContrastEnhancementMethod}.
     * 
     * @param method
     * @return
     */
    public static ContrastEnhancementType getType(AbstractContrastEnhancementMethod method) {
        if (method instanceof Normalize) {
            String algorithmType = parseAlgorithm(method.getAlgorithm());
            if (algorithmType == null) {
                return NORMALIZE_DEFAULT;
            } else if (NORMALIZE_STRETCH_TO_MINMAX_NAME.equals(algorithmType)) {
                return NORMALIZE_STRETCH_TO_MINMAX;
            } else if (NORMALIZE_CLIP_TO_MINMAX_NAME.equals(algorithmType)) {
                return NORMALIZE_CLIP_TO_MINMAX;
            } else if (NORMALIZE_CLIP_TO_ZERO_NAME.equals(algorithmType)) {
                return NORMALIZE_CLIP_TO_ZERO;
            }
            throw new IllegalArgumentException(Errors.format(ErrorKeys.UNSUPPORTED_ALGORITHM_$1,
                    algorithmType));
        } else if (method instanceof Logarithmic) {
            return LOGARITHMIC;
        } else if (method instanceof Exponential) {
            return EXPONENTIAL;
        } else if (method instanceof org.geotools.styling.Histogram) {
            return HISTOGRAM;
        } else {
            throw new IllegalArgumentException(Errors.format(ErrorKeys.UNSUPPORTED_METHOD_$1,
                    method));
        }
    }

