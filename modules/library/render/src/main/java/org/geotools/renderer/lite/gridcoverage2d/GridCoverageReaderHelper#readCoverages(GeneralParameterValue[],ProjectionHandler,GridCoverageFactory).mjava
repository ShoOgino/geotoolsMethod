    /**
     * Reads the data taking into account advanced projection handling in order to deal with date
     * line crossing, poles and other projection trouble areas. The result is a set of coverages
     * that can be either painted or reprojected safely
     */
    public List<GridCoverage2D> readCoverages(
            final GeneralParameterValue[] readParams,
            ProjectionHandler handler,
            GridCoverageFactory gridCoverageFactory)
            throws IOException, FactoryException, TransformException {
        if (handler == null) {
            GridCoverage2D readCoverage = readCoverage(readParams);
            GridCoverage2D cropped = cropCoverageOnRequestedEnvelope(readCoverage);
            if (cropped == null) {
                return Collections.emptyList();
            } else {
                return Arrays.asList(cropped);
            }
        }

        // get the areas that we are likely to have to read, and have the projection
        // handler also cut them
        List<GridCoverage2D> coverages = new ArrayList<GridCoverage2D>();
        List<ReferencedEnvelope> queryEnvelopes = handler.getQueryEnvelopes();
        for (ReferencedEnvelope envelope : queryEnvelopes) {
            List<GridCoverage2D> readCoverages =
                    readCoverageInEnvelope(envelope, readParams, handler, paddingRequired);
            if (readCoverages != null) {
                coverages.addAll(readCoverages);
            }
        }

        // it is not uncommon to find rasters whose coordinates are in the 0-360 range,
        // if that's the case, see if we can perform extra reads
        SingleCRS readerCRS = CRS.getHorizontalCRS(reader.getCoordinateReferenceSystem());
        if (readerCRS instanceof GeographicCRS) {
            ReferencedEnvelope readerEnvelope =
                    ReferencedEnvelope.reference(reader.getOriginalEnvelope());
            boolean northEast = CRS.getAxisOrder(readerCRS) == AxisOrder.NORTH_EAST;
            int lonAxis = northEast ? 1 : 0;
            if (readerEnvelope.getMaximum(lonAxis) > 180) {
                ReferencedEnvelope excess;
                double tx, ty;
                if (northEast) {
                    excess = new ReferencedEnvelope(-90, 90, 180, 360, readerCRS);
                    tx = 0;
                    ty = 360;
                } else {
                    excess = new ReferencedEnvelope(180, 360, -90, 90, readerCRS);
                    tx = 360;
                    ty = 0;
                }

                for (ReferencedEnvelope envelope : queryEnvelopes) {
                    // try to translate into the the excess area, and intersect
                    ReferencedEnvelope translated = new ReferencedEnvelope(envelope);
                    translated.translate(tx, ty);
                    ReferencedEnvelope intersection =
                            new ReferencedEnvelope(
                                    translated.intersection(excess),
                                    translated.getCoordinateReferenceSystem());
                    boolean isEmptyEnvelope =
                            intersection == null
                                    || intersection.isNull()
                                    || intersection.getHeight() == 0
                                    || intersection.getWidth() == 0;
                    if (isEmptyEnvelope) {
                        continue;
                    }
                    List<GridCoverage2D> readCoverages =
                            readCoverageInEnvelope(intersection, readParams, handler, false);
                    if (readCoverages != null) {
                        for (GridCoverage2D gc : readCoverages) {
                            GridCoverage2D displaced =
                                    GridCoverageRendererUtilities.displace(
                                            gc, -tx, -ty, gridCoverageFactory);
                            // add only if the already read bits of the source file
                            // do not contain the new one
                            if (!coveragesContainArea(coverages, displaced)) {
                                coverages.add(displaced);
                            }
                        }
                    }
                }
            }
        }

        return coverages;
    }

