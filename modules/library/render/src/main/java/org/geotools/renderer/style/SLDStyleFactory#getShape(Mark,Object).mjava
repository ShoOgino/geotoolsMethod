	/**
	 * Given a mark and a feature, returns the Shape provided by the first
	 * {@link MarkFactory} that was able to handle the Mark
	 * 
	 * @param mark
	 * @param feature
	 * @return
	 */
	private Shape getShape(Mark mark, Object feature) {
		if (mark == null)
			return null;
		
		// handle the TTF references in SE 1.1
		// TODO: generalize it to a pluggable ExternalMarkFactory when other types
		// of indexed marks show up in the wild
		if(mark.getExternalMark() != null) {
			Shape shape = TTFMarkFactory.INSTANCE.getShape(mark.getExternalMark());
			if(shape != null) {
				return shape;
			}
		}

		Expression name = mark.getWellKnownName();
		// expand eventual cql expressions embedded in the name
		if (name instanceof Literal) {
			String expression = evalToString(name, null, null);
			if (expression != null)
				name = ExpressionExtractor.extractCqlExpressions(expression);
		}

		Iterator<MarkFactory> it = DynamicSymbolFactoryFinder.getMarkFactories();
		while (it.hasNext()) {
			MarkFactory factory = it.next();
			try {
				Shape shape = factory.getShape(null, name, (Feature) feature);
				if (shape != null)
					return shape;
			} catch (Exception e) {
				LOGGER.log(Level.FINE, "Exception while scanning for "
						+ "the appropriate mark factory", e);
			}

		}

		return null;
	}

