	/**
	 * 
	 * @param g2d graphics context
	 * @param tx x offset
	 * @param ty y offset
	 * @param mark mark used for fill pattern
	 * @param size size of mark
	 * @param rotation rotation in radians
	 * @param feature feature used for expression evaulation
	 */
	void fillDrawMark(Graphics2D g2d, double tx, double ty, Mark mark,
			double size, double rotation, Object feature) {
		if (mark == null)
			return;

		Shape originalShape = getShape(mark, feature);

		// rescale and reposition the original shape so it's centered at tx, ty
		// and has the desired size
		AffineTransform markAT = new AffineTransform();
		markAT.translate(tx, ty);
		markAT.rotate(rotation);
		markAT.scale(size, -size);

		// resize/rotate/rescale the shape
		Shape shape = markAT.createTransformedShape(originalShape);

		// cascade the rendering hints configured in the renderer
		g2d.setRenderingHints(renderingHints);

		if (mark.getFill() != null) {
			if (LOGGER.isLoggable(Level.FINER)) {
				LOGGER.finer("applying fill to mark");
			}

			g2d.setPaint(getPaint(mark.getFill(), feature, null));
			g2d.setComposite(getComposite(mark.getFill(), feature));
			g2d.fill(shape);
		}

		if (mark.getStroke() != null) {
			if (LOGGER.isLoggable(Level.FINER)) {
				LOGGER.finer("applying stroke to mark");
			}

			g2d.setPaint(getStrokePaint(mark.getStroke(), feature));
			g2d.setComposite(getStrokeComposite(mark.getStroke(), feature));
			g2d.setStroke(getStroke(mark.getStroke(), feature));
			g2d.draw(shape);
		}

	}

