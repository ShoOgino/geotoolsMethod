    /**
     * @see org.geotools.styling.StyleVisitor#visit(org.geotools.styling.Graphic)
     */
    public void visit(Graphic gr) {
        try {
            Expression grSize = gr.getSize();
            int imageSize = -1;
            boolean isSizeLiteral = false;

            if (grSize instanceof Literal) {
                isSizeLiteral = true;
                imageSize = (int) Math.ceil(grSize.evaluate(null, Double.class));
            } else if(!(grSize == null || grSize instanceof NilExpression)) {
                estimateAccurate = false;
                return;
            }

            for (GraphicalSymbol gs : gr.graphicalSymbols()) {
                if(gs instanceof ExternalGraphic) {
                    ExternalGraphic eg = (ExternalGraphic) gs;
                    Icon icon = null;
                    if(eg.getInlineContent() != null) {
                        icon = eg.getInlineContent();
                    } else {
                        String location = eg.getLocation().toExternalForm();
                        // expand embedded cql expression
                        Expression expanded = ExpressionExtractor.extractCqlExpressions(location);
                        // if not a literal there is an attribute dependency
                        if(!(expanded instanceof Literal)) {
                            estimateAccurate = false;
                            return;
                        }
                        
                        Iterator<ExternalGraphicFactory> it  = DynamicSymbolFactoryFinder.getExternalGraphicFactories();
                        while(it.hasNext() && icon == null) {
                            try {
                                ExternalGraphicFactory factory = it.next();
                                icon = factory.getIcon(null, expanded, eg.getFormat(), imageSize);
                            } catch(Exception e) {
                                LOGGER.log(Level.FINE, "Error occurred evaluating external graphic", e);
                            }
                        }
                    }
                    // evaluate the icon if found, if not SLD asks us to go to the next one
                    if(icon != null) {
                        if(icon != null) {
                            int size = Math.max(icon.getIconHeight(), icon.getIconWidth());
                            if(size > buffer) {
                                buffer = size;
                            }
                            return;
                        }
                    }
                } else if(gs instanceof Mark) {
                    Mark mark = (Mark) gs;
                    int markSize;
                    if(isSizeLiteral) {
                        markSize = imageSize;
                    } else {
                        markSize = SLDStyleFactory.DEFAULT_MARK_SIZE;
                    }
                    if(mark.getStroke() != null) {
                        int strokeWidth = getWidth(mark.getStroke().getWidth());
                        if(strokeWidth < 0) {
                            estimateAccurate = false;
                        } else {
                            markSize += strokeWidth;
                        }
                    }
                    
                    if(markSize > buffer) {
                        this.buffer = markSize;
                    }

                    return;
                }

                // if we got here we could not find a way to actually estimate the graphic size
                estimateAccurate = false;
            }
        } catch (ClassCastException e) {
            estimateAccurate = false;
            LOGGER.info("Could not parse graphic size, " + "it's a literal but not a Number...");
        } catch (Exception e) {
            estimateAccurate = false;
            LOGGER.log(Level.INFO, "Error occured during the graphic size estimation, " +
                    "meta buffer estimate cannot be performed", e);
        }
    }

