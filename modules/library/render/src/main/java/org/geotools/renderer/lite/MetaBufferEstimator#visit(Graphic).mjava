    /**
     * @see org.geotools.styling.StyleVisitor#visit(org.geotools.styling.Graphic)
     */
    public void visit(Graphic gr) {
        try {
            Expression grSize = gr.getSize();
            if (!isNull(grSize)) {
                evaluateWidth(grSize);
            } else {
                for (GraphicalSymbol gs : gr.graphicalSymbols()) {
                    if(gs instanceof ExternalGraphic) {
                        ExternalGraphic eg = (ExternalGraphic) gs;
                        String location = eg.getLocation().toExternalForm();
                        // expand embedded cql expression
                        Expression expanded = ExpressionExtractor.extractCqlExpressions(location);
                        // if not a literal there is an attribute dependency
                        if(!(expanded instanceof Literal)) {
                            estimateAccurate = false;
                            return;
                        }
                        
                        Iterator<ExternalGraphicFactory> it  = DynamicSymbolFactoryFinder.getExternalGraphicFactories();
                        while(it.hasNext()) {
                            try {
                                Icon icon = it.next().getIcon(null, expanded, eg.getFormat(), -1);
                                if(icon != null) {
                                    int size = Math.max(icon.getIconHeight(), icon.getIconWidth());
                                    if(size > buffer) {
                                        buffer = size;
                                    }
                                    return;
                                }
                            } catch(Exception e) {
                                LOGGER.log(Level.FINE, "Error occurred evaluating external graphic", e);
                            }
                        }
                    } else if(gs instanceof Mark) {
                        // Mark is assumed to be 16 pixels by the SLD specification
                        // (although our factory traditionally used 6 pixels)
                        estimateAccurate = false;
                        return;
                    }
                } 
                // if we got here we could not find a way to actually estimate the graphic size
                estimateAccurate = false;
            }
        } catch (ClassCastException e) {
            estimateAccurate = false;
            LOGGER.info("Could not parse graphic size, " + "it's a literal but not a Number...");
        } catch (Exception e) {
            estimateAccurate = false;
            LOGGER.log(Level.INFO, "Error occured during the graphic size estimation, " +
            		"meta buffer estimate cannot be performed", e);
        }
    }

