	/**
	 * Computes one of the destination image tile.
	 * 
	 * @todo There are two optimisations we could do here:
	 *       <ul>
	 *       <li>If source and destination are the same raster, then a single
	 *       {@link WritableRectIter} object would be more efficient (the hard
	 *       work is to detect if source and destination are the same).</li>
	 *       <li>If the destination image is a single-banded, non-interleaved
	 *       sample model, we could apply the transform directly in the
	 *       {@link java.awt.image.DataBuffer}. We can even avoid to copy
	 *       sample value if source and destination raster are the same.</li>
	 *       </ul>
	 * 
	 * @param sources
	 *            An array of length 1 with source image.
	 * @param dest
	 *            The destination tile.
	 * @param destRect
	 *            the rectangle within the destination to be written.
	 */
	protected void computeRect(final PlanarImage[] sources,
			final WritableRaster dest, final Rectangle destRect) {
		final PlanarImage source = sources[0];
		WritableRectIter iterator = RectIterFactory.createWritable(dest,
				destRect);
		if (true) {
			// TODO: Detect if source and destination rasters are the same. If
			// they are the same, we should skip this block. Iteration will then
			// be faster.
			iterator = TransfertRectIter.create(RectIterFactory.create(source,
					destRect), iterator);
		}

		PiecewiseTransform1DElement last = null;
		int bandNumber=0;
		do {
			try {
				iterator.startLines();
				if (!iterator.finishedLines())
					do {
						iterator.startPixels();
						if (!iterator.finishedPixels())
							do {
								if(isByteData) 
								{
									final int in=iterator.getSample()&0xff;
									final int out=0xff&lut[bandNumber][in];
									iterator.setSample(out);
								}
								else
									last = domainSearch(iterator, last,bandNumber);

							} while (!iterator.nextPixelDone());
					} while (!iterator.nextLineDone());
			} catch (final Exception cause) {
				final RasterFormatException exception = new RasterFormatException(
						cause.getLocalizedMessage());
				exception.initCause(cause);
				throw exception;
			}
			bandNumber++;
		} while (iterator.finishedBands());
	}

