    private java.awt.Font styleFont(
            Object feature, Font curr, java.awt.Font javaFont, TextSymbolizer symbolizer) {
        String reqStyle = evalToString(curr.getFontStyle(), feature, null);

        int styleCode;

        if (FONT_STYLE_LOOKUP.containsKey(reqStyle)) {
            styleCode = ((Integer) FONT_STYLE_LOOKUP.get(reqStyle)).intValue();
        } else {
            styleCode = java.awt.Font.PLAIN;
        }

        String reqWeight = evalToString(curr.getFontWeight(), feature, null);

        if ("Bold".equalsIgnoreCase(reqWeight)) {
            styleCode = styleCode | java.awt.Font.BOLD;
        }

        float size = evalToFloat(curr.getSize(), feature, 10);

        // apply basic styling
        javaFont = javaFont.deriveFont(styleCode, size);

        // check vendor options
        boolean kerning =
                voParser.getBooleanOption(
                        symbolizer, TextSymbolizer.KERNING_KEY, TextSymbolizer.DEFAULT_KERNING);
        if (kerning) {
            javaFont = applyKerning(javaFont);
        }
        double spacing =
                voParser.getDoubleOption(
                        symbolizer,
                        TextSymbolizer.CHAR_SPACING_KEY,
                        TextSymbolizer.DEFAULT_CHAR_SPACING);
        if (spacing != 0) {
            javaFont = applySpacing(javaFont, spacing);
        }

        return javaFont;
    }

