	/**
	 * Constructor for a {@link LinearColorMapElement}. It allows users
	 * to build a category which is able to map values into integer sample
	 * values for further rendering using and {@link IndexColorModel}.
	 * 
	 * <strong>NOTE</strong> Due to the limitations of the
	 * {@link IndexColorModel} we can accept as valid ranges only those that
	 * fit between 0 -65535.
	 * 
	 * @param name
	 *            for this {@link DomainElement1D}.
	 * @param colors
	 *            to use when rendering values belonging to this
	 *            {@link DomainElement1D}
	 * @param valueRange
	 *            the input range for this category.
	 * @param sampleRange
	 *            the sample range for this category. It will be used as indexes
	 *            for the final color map.
	 * @throws IllegalArgumentException
	 *             in case the output range does not respect
	 *             {@link IndexColorModel} limitations.
	 */
	LinearColorMapElement(final CharSequence name,
			final Color[] colors, final NumberRange<? extends Number> valueRange,
			final NumberRange<? extends Number> sampleRange) throws IllegalArgumentException {
		super(name, valueRange, checkSampleRange(sampleRange));
//		//@todo check this test
//		final int inEquals = ColorMapUtilities.compare(getInputMaximum(), getInputMinimum());
//		final int outEquals = ColorMapUtilities.compare(getOutputMaximum(), getOutputMinimum());
//		if (inEquals == 0 && outEquals == 0)
//			this.type = LinearColorMap.LinearColorMapType.TYPE_VALUES;
//		else if (outEquals == 0)
//			this.type = LinearColorMap.LinearColorMapType.TYPE_INTERVALS;
//		else {
//			if (isIdentity())
//
//				this.type = LinearColorMap.LinearColorMapType.TYPE_VALUES;
//			else
//				this.type = LinearColorMap.LinearColorMapType.TYPE_RAMP;
//		}
		// /////////////////////////////////////////////////////////////////////
		//
		// Initialise fields for visualization
		//
		// /////////////////////////////////////////////////////////////////////
		this.colors = new Color[colors.length];
		System.arraycopy(colors, 0, this.colors, 0, colors.length);

	}

