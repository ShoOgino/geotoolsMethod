    /**
     * Get the bounding box of all the layers in this MapContext. If all the layers cannot determine
     * the bounding box in the speed required for each layer, then null is returned. The bounds will
     * be expressed in the MapContext coordinate system.
     * <p>
     * This implementation is more forgiving then getMaxBounds() as it is willing to consider the
     * bounds of layers that are incomplete and not record a coordinate reference system.
     * 
     * @return The bounding box of the features or null if unknown and too expensive for the method
     *         to calculate.
     * 
     * @throws IOException
     *             if an IOException occurs while accessing the FeatureSource bounds
     * 
     */
    public ReferencedEnvelope getLayerBounds() throws IOException {
        // return getMaxBounds();
        // Jody: I don't like the following implementation because it will allow a mapLayer
        // with null CRS to produce a bounds that is not transformed into the mapCRS
        // (I would prefer to skip these layers as getMaxBounds() does however some test cases
        // depend on this feature)
        ReferencedEnvelope maxBounds = null;
        CoordinateReferenceSystem mapCRS = viewport != null ? viewport.getCoordianteReferenceSystem() : null;

        for (Layer layer : layers()) {
            if (layer == null) {
                continue; // skip empty entry
            }
            ReferencedEnvelope dataBounds = layer.getBounds();
            if (dataBounds == null) {
                continue;
            } else {
                try {
                    CoordinateReferenceSystem dataCrs = dataBounds.getCoordinateReferenceSystem();
                    if ((dataCrs != null) && mapCRS != null
                            && !CRS.equalsIgnoreMetadata(dataCrs, mapCRS)) {
                        dataBounds = dataBounds.transform(mapCRS, true);
                    }
                    if (dataCrs == null && mapCRS != null) {
                        LOGGER.log(Level.SEVERE,
                                "It was not possible to get a projected bounds estimate");
                    }
                } catch (FactoryException e) {
                    LOGGER
                            .log(
                                    Level.SEVERE,
                                    "Data source and map context coordinate system differ, yet it was not possible to get a projected bounds estimate...",
                                    e);
                    continue;
                } catch (TransformException e) {
                    LOGGER
                            .log(
                                    Level.SEVERE,
                                    "Data source and map context coordinate system differ, yet it was not possible to get a projected bounds estimate...",
                                    e);
                    continue;
                }
                if (maxBounds == null) {
                    maxBounds = dataBounds;
                } else {
                    maxBounds.expandToInclude(dataBounds);
                }
                if (mapCRS == null) {
                    mapCRS = dataBounds.getCoordinateReferenceSystem();
                }
            }
        }
        return maxBounds;
    }

