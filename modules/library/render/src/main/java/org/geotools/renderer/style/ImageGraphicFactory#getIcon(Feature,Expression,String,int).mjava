    public Icon getIcon(Feature feature, Expression url, String format, int size) {
        // check we do support the format
        if (!supportedGraphicFormats.contains(format.toLowerCase())) return null;

        // evaluate the location as a URL
        URL location = url.evaluate(feature, URL.class);
        if (location == null)
            throw new IllegalArgumentException(
                    "The provided expression cannot be evaluated to a URL");

        // get the image from the cache, or load it
        BufferedImage image = imageCache.get(location);
        if (image == null) {
            try {
                image = ImageIO.read(location);
            } catch (java.io.IOException ioe) {
                LOGGER.warning("Unable to read image at " + location + " : " + ioe.getMessage());
                return null;
            }
            imageCache.put(location, image);
        }

        // if scaling is needed, perform it
        if (size > 0 && image.getHeight() != size) {
            double dsize = (double) size;

            double scaleY = dsize / image.getHeight(); // >1 if you're magnifying
            double scaleX = scaleY; // keep aspect ratio!

            AffineTransform scaleTx = AffineTransform.getScaleInstance(scaleX, scaleY);
            AffineTransformOp ato = new AffineTransformOp(scaleTx, AffineTransformOp.TYPE_BILINEAR);
            image = ato.filter(image, null);
        }

        return new ImageIcon(image);
    }

