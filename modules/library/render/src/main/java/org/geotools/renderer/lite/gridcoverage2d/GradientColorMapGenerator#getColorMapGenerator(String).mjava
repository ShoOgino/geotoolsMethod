    /**
     * Get an SVG ColorMap generator for the specified file
     *
     * @param a ";" separated list of colors in the form c1;c2;c3;... where each color can use
     *     syntaxes as rgb(r0,g0,b0), rgba(r0,g0,b0,alpha_0_to_1), #RRGGBB or 0xRRGGBB
     * @return
     * @throws SAXException
     * @throws IOException
     * @throws ParserConfigurationException
     */
    public static GradientColorMapGenerator getColorMapGenerator(String colorValues)
            throws IOException, ParserConfigurationException {
        Utilities.ensureNonNull("colorValues", colorValues);
        if (colorValues.startsWith(RGB_INLINEVALUE_MARKER)
                || colorValues.startsWith(RGBA_INLINEVALUE_MARKER)
                || colorValues.startsWith(HEX_INLINEVALUE_MARKER)
                || colorValues.startsWith(HEX2_INLINEVALUE_MARKER)) {
            String rampType = "ramp";
            if (colorValues.contains(":")) {
                final int rampTypeIndex = colorValues.indexOf(":");
                rampType = colorValues.substring(rampTypeIndex + 1);
                colorValues = colorValues.substring(0, rampTypeIndex);
            }
            String colors[] = colorValues.split(";");
            final int numEntries = colors.length;
            LinearGradientEntry[] entries = new LinearGradientEntry[numEntries];
            final double step = 1d / (numEntries - 1);
            for (int i = 0; i < numEntries; i++) {
                final Color color = createColor(colors[i]);
                final float opacity = getOpacity(colors[i]);
                entries[i] = new LinearGradientEntry(step * i, color, opacity);
            }
            GradientColorMapGenerator generator = new GradientColorMapGenerator(entries);
            return generator;

        } else {
            throw new IOException("Unable to parse the specified colors: " + colorValues);
        }
    }

