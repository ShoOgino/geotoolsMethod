    /**
     * Sets a definition query for the layer which acts as a filter for the features that the layer
     * will draw.
     * 
     * <p>
     * A consumer must ensure that this query is used in combination with the bounding box filter
     * generated on each map interaction to limit the number of features returned to those that
     * complains both the definition query and relies inside the area of interest.
     * </p>
     * <p>
     * IMPORTANT: only include attribute names in the query if you want them to be ALWAYS returned.
     * It is desirable to not include attributes at all but let the renderer
     * decide which attributes are actually needed to perform its required operation.
     * </p>
     * <p>
     * WARNING: We do not check if your query is suitable for the layer {@code FeatureSource}
     * you may accidentally return no features; resulting in an "empty" layer.
     * 
     * @param query
     *            the full filter for this layer.
     * 
     * @throws NullPointerException
     *             if no query is passed on. If you want to reset a definition query, pass it
     *             {@link Query.ALL} instead of <code>null</code>
     * 
     * @see org.geotools.map.FeatureLayer#setQuery(org.geotools.data.Query)
     */
    public void setQuery(Query query){
        if (query == null) {
            throw new NullPointerException("must provide a Query. Do you mean Query.ALL?");
        }
        if( internal instanceof FeatureLayer ){
            FeatureLayer layer = (FeatureLayer) internal;
            layer.setQuery( new Query(query));
        }
        else {
            throw new IllegalStateException("Query not supported by "+ internal );
        }
    }

