    /**
     * Changes the original query to account for the transformation altering the
     * type name and the default geometry name 
     * @param query
     * @param targetSchema
     * @param originalSchema
     * @return
     */
    Query adaptQuery(Query query, FeatureType targetSchema, FeatureType originalSchema) {
        // build the query with target schema name
        Query result = new Query(targetSchema.getName().getLocalPart());
        
        // check if the default geometry attribute name changed
        final GeometryDescriptor gdTarget = targetSchema.getGeometryDescriptor();
        final GeometryDescriptor gdSource = originalSchema.getGeometryDescriptor();
        if(gdTarget != null && gdSource != null && 
                !gdTarget.getLocalName().equals(gdSource.getLocalName())) {
            String source = gdSource.getLocalName();
            String target = gdTarget.getLocalName();
            
            // rename attributes
            List<String> attributes = new ArrayList(Arrays.asList(query.getPropertyNames()));
            for (int i = 0; i < attributes.size(); ) {
                String attribute = attributes.get(i);
                if(attribute.equals(source)){
                    attributes.set(i,  target);
                    i++;
                } else if(targetSchema.getDescriptor(attribute) == null &&
                        (attribute.equals("params") || attribute.equals("grid"))) {
                    // skip params and grid as they have been added out of the blue
                    attributes.remove(i);
                } else {
                    i++;
                }
            }
            result.setPropertyNames(attributes);
            
            // rename the filter
            AttributeRenameVisitor visitor = new AttributeRenameVisitor(source, target);
            Filter original = query.getFilter();
            Filter renamedFilter = (Filter) original.accept(visitor, null);
            result.setFilter(renamedFilter);
        } else if(originalSchema instanceof SimpleFeatureType 
                && (FeatureUtilities.isWrappedCoverage((SimpleFeatureType) originalSchema) 
                        || FeatureUtilities.isWrappedCoverageReader((SimpleFeatureType) originalSchema))) {
            // use all the properties generated by the transformation, the query normally in this
            // case contains grid/params/geom or grid/geom which have nothing to do with
            // the actual attributes we are going to use, especially in raster to vector transformations
            result.setFilter(query.getFilter());
        } else {
            result.setPropertyNames(query.getPropertyNames());
            result.setFilter(query.getFilter());
        }
        
        return result;
    }

