	/**
	 * Style used to render the provided feature as a point.
	 * <p>
	 * Depending on the symbolizers used:
	 * <ul>
	 * <li>MarkStyle2D
	 * <li>GraphicStyle2D - used to render a glymph
	 * </ul>
	 * 
	 * @param feature
	 * @param symbolizer
	 * @param scaleRange
	 * @return
	 */
	Style2D createPointStyle(Object feature, Symbolizer symbolizer, Graphic sldGraphic, Range scaleRange, boolean forceVector) {
		Style2D retval = null;

		// extract base properties
		float opacity = evalOpacity(sldGraphic.getOpacity(), feature);
		Composite composite = AlphaComposite.getInstance(
				AlphaComposite.SRC_OVER, opacity);
		float displacementX = 0;
		float displacementY = 0;
		if (sldGraphic.getDisplacement() != null) {
			displacementX = evalToFloat(sldGraphic.getDisplacement()
					.getDisplacementX(), feature, 0f);
			displacementY = evalToFloat(sldGraphic.getDisplacement()
					.getDisplacementY(), feature, 0f);
		}
		double size = 0;

		// by spec size is optional, and the default value is context dependend,
		// the natural size of the image for an external graphic is the size of
		// the raster,
		// while:
		// - for a external graphic the default size shall be 16x16
		// - for a mark such as star or square the default size shall be 6x6
		try {
			if (sldGraphic.getSize() != null
					&& !Expression.NIL.equals(sldGraphic.getSize()))
				size = evalToDouble(sldGraphic.getSize(), feature, 0);
		} catch (NumberFormatException nfe) {
			// nothing to do
		}
		
		float rotation = (float) Math.toRadians( evalToDouble(sldGraphic.getRotation(), feature, 0));

		// Extract the sequence of external graphics and symbols and process
		// them in order
		// to recognize which one will be used for rendering
		List<GraphicalSymbol> symbols = sldGraphic.graphicalSymbols();
		if (symbols == null || symbols.isEmpty()) {
			return null;
		}
		final int length = symbols.size();
		ExternalGraphic eg;
		BufferedImage img = null;
		double dsize;
		AffineTransform scaleTx;
		AffineTransformOp ato;
		BufferedImage scaledImage;
		Mark mark;
		Shape shape;
		MarkStyle2D ms2d;
		for (GraphicalSymbol symbol : symbols) {
			if (LOGGER.isLoggable(Level.FINER)) {
				LOGGER.finer("trying to render symbol " + symbol);
			}
			// try loading external graphic and creating a GraphicsStyle2D
			if (symbol instanceof ExternalGraphic) {
				if (LOGGER.isLoggable(Level.FINER)) {
					LOGGER.finer("rendering External graphic");
				}
				eg = (ExternalGraphic) symbol;

				// if the icon size becomes too big we switch to vector
				// rendering too, since
				// pre-rasterizing and caching the result will use too much
				// memory
				if (vectorRenderingEnabled || forceVector || size > MAX_RASTERIZATION_SIZE) {
					Icon icon = getIcon(eg, feature, -1);
					if (icon == null) {
						// no icon -> no image either, there is no raster
						// fallback
						continue;
					} else if(icon instanceof ImageIcon) {
					    // when the icon is an image better use the graphic style, we have
					    // better rendering code for it
					    GraphicStyle2D g2d = getGraphicStyle(eg, (Feature) feature, size, 1);
	                    if (g2d == null) {
	                        continue;
	                    } else {
	                        g2d.setRotation(rotation);
	                        g2d.setOpacity(opacity);
	                        retval = g2d;
	                        break;
	                    }
					} else {
						if (icon.getIconHeight() != size && size != 0) {
							double scale = ((double) size)
									/ icon.getIconHeight();
							icon = new RescaledIcon(icon, scale);
						}
						retval = new IconStyle2D(icon, feature, displacementX,
								displacementY, rotation, composite);
						break;
					}
				} else {
					GraphicStyle2D g2d = getGraphicStyle(eg, (Feature) feature, size, 1);
					if (g2d != null) {
						g2d.setRotation(rotation);
						g2d.setOpacity(opacity);
						retval = g2d;
						break;
					}
				}
			}
			if (symbol instanceof Mark) {
				if (LOGGER.isLoggable(Level.FINER)) {
					LOGGER.finer("rendering mark @ PointRenderer "
							+ symbol.toString());
				}
				retval = createMarkStyle((Mark) symbol, feature, symbolizer, size, rotation);
				break;
			}
		}

		if (retval != null) {
			setScaleRange(retval, scaleRange);
		} else {
            // from SLD spec:
            // The default if neither an ExternalGraphic nor a Mark is specified is to use the default
            // mark of a "square" with a 50%-gray fill and a black outline, with a size of 6 pixels,
            // unless an explicit Size is specified
            StyleFactory sf = CommonFactoryFinder.getStyleFactory();
            Mark defaultMark = sf.mark(ff.literal("square"),
                    sf.fill(null, ff.literal("#808080"), null),
                    sf.createStroke(ff.literal("#000000"), ff.literal(1))
            );
            if (size <= 0) {
                size = 6;
            }
            retval = createMarkStyle(defaultMark, feature, symbolizer, size, rotation);
        }

		return retval;
	}

