    private ProjectionHandler checkForReprojection(
            FeatureCollection features,
            RenderableFeature rf,
            List<LiteFeatureTypeStyle> lfts,
            LiteFeatureTypeStyle liteFeatureTypeStyle) {
        rf.layer = liteFeatureTypeStyle.layer;
        ProjectionHandler handler = liteFeatureTypeStyle.projectionHandler;
        // Check if a reprojection has been made, in that case, let's update the
        // projection handler
        CoordinateReferenceSystem featureCrs = features.getSchema().getCoordinateReferenceSystem();
        ScreenMap screenMap = liteFeatureTypeStyle.screenMap;
        if (handler != null
                && featureCrs != null
                && !CRS.equalsIgnoreMetadata(handler.getSourceCRS(), featureCrs)) {
            try {
                handler =
                        ProjectionHandlerFinder.getHandler(
                                mapExtent, featureCrs, isMapWrappingEnabled());
                if (screenMap != null) {
                    Envelope mapArea = mapExtent;
                    if (getRenderingBuffer() == 0) {
                        int metaBuffer = findRenderingBuffer(lfts);
                        if (metaBuffer > 0) {
                            mapArea = expandEnvelope(mapArea, worldToScreenTransform, metaBuffer);
                        }
                    }
                    ReferencedEnvelope envelope =
                            expandEnvelopeByTransformations(
                                    lfts, new ReferencedEnvelope(mapArea, destinationCrs));
                    envelope = new ReferencedEnvelope(envelope, destinationCrs);
                    SingleCRS crs2D = CRS.getHorizontalCRS(featureCrs);
                    MathTransform sourceToScreen =
                            buildFullTransform(crs2D, destinationCrs, worldToScreenTransform);
                    double[] spans =
                            getGeneralizationSpans(
                                    envelope,
                                    sourceToScreen,
                                    worldToScreenTransform,
                                    featureCrs,
                                    screenSize);
                    screenMap.setTransform(sourceToScreen);
                    screenMap.setSpans(spans[0], spans[1]);
                }
            } catch (FactoryException | TransformException e) {
                fireErrorEvent(e);
            }
        }
        rf.setScreenMap(screenMap);
        return handler;
    }

