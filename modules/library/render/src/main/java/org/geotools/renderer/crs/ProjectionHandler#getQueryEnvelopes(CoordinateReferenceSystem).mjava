    /**
     * Returns a set of envelopes that will be used to query the data given the specified rendering
     * envelope and the current query envelope
     */
    public List<ReferencedEnvelope> getQueryEnvelopes(CoordinateReferenceSystem queryCRS)
            throws TransformException, FactoryException {
        // check if we are crossing the dateline
        ReferencedEnvelope re = renderingEnvelope.transform(WGS84, true, 10);
        if (re.getMinX() >= -180.0 && re.getMaxX() <= 180)
            return Collections.singletonList(renderingEnvelope.transform(queryCRS, true, 10));

        // We need to split reprojected envelope and normalize it. To be lenient with
        // situations in which the data is just broken (people saying 4326 just because they
        // have no idea at all) we don't actually split, but add elements
        List<ReferencedEnvelope> envelopes = new ArrayList<ReferencedEnvelope>();
        envelopes.add(re);
        if (re.getMinX() < -180) {
            envelopes.add(new ReferencedEnvelope(re.getMinX() + 360, 180, re.getMinY(), re
                    .getMaxY(), re.getCoordinateReferenceSystem()));
        }
        if (re.getMaxX() > 180) {
            envelopes.add(new ReferencedEnvelope(-180, re.getMaxX() - 360, re.getMinY(), re
                    .getMaxY(), re.getCoordinateReferenceSystem()));
        }

        // the envelopes generated might overlap, check and merge if necessary, we
        // don't want the data backend to deal with ORs against the spatial index
        // unless necessary
        boolean merged = true;
        while (merged && envelopes.size() > 1) {
            merged = false;
            for (int i = 0; i < envelopes.size() - 1; i++) {
                ReferencedEnvelope curr = envelopes.get(i);
                for (int j = i + 1; j < envelopes.size();) {
                    ReferencedEnvelope next = envelopes.get(j);
                    if (curr.intersects((Envelope) next)) {
                        curr.expandToInclude(next);
                        envelopes.remove(j);
                        merged = true;
                    } else {
                        j++;
                    }
                }
            }
        }

        // reproject the surviving envelopes
        for (int i = 0; i < envelopes.size(); i++) {
            envelopes.set(i, envelopes.get(i).transform(queryCRS, true, 10));
        }

        return envelopes;
    }

