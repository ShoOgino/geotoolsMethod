	/*
	 * (non-Javadoc)
	 * 
	 * @see org.geotools.renderer.lite.gridcoverage2d.StyleVisitorAdapter#visit(org.geotools.styling.RasterSymbolizer)
	 */
	public synchronized void visit(RasterSymbolizer rs) {
	        
		ColorMapUtilities.ensureNonNull("RasterSymbolizer", rs);

		// /////////////////////////////////////////////////////////////////////
		//
		// Create the various nodes we'll use for executing this
		// RasterSymbolizer
		//
		// /////////////////////////////////////////////////////////////////////
		// the source node for the internal chains
		// final RootNode sourceNode = new RootNode(sourceCoverage, adopt,
		// hints);
		final ChannelSelectionNode csNode = new ChannelSelectionNode();
		final ColorMapNode cmNode = new ColorMapNode(this.getHints());
		final ContrastEnhancementNode ceNode = new ContrastEnhancementNode(this.getHints());
		setSink(ceNode);

		// /////////////////////////////////////////////////////////////////////
		//
		// CHANNEL SELECTION
		//
		// /////////////////////////////////////////////////////////////////////
		final ChannelSelection cs = rs.getChannelSelection();
		csNode.addSource(this.getSource(0));
		csNode.addSink(cmNode);
		csNode.visit(cs);

		// /////////////////////////////////////////////////////////////////////
		//
		// COLOR MAP
		//
		// /////////////////////////////////////////////////////////////////////
		final ColorMap cm = rs.getColorMap();
		cmNode.addSource(csNode);
		csNode.addSink(cmNode);
		cmNode.visit(cm);

		// /////////////////////////////////////////////////////////////////////
		//
		// CONTRAST ENHANCEMENT
		//
		// /////////////////////////////////////////////////////////////////////
		final ContrastEnhancement ce = rs.getContrastEnhancement();
		ceNode.addSource(cmNode);
		cmNode.addSink(ceNode);
		ceNode.visit(ce);

		//
		// //
		// /////////////////////////////////////////////////////////////////////
		// //
		// // OPACITY
		// //
		// //
		// /////////////////////////////////////////////////////////////////////
		// final Expression op = rs.getOpacity();
		// if (op != null) {
		// final Number number = (Number) op.evaluate(null, Float.class);
		// if (number != null) {
		// opacity = number.floatValue();
		// }
		// }
	}

