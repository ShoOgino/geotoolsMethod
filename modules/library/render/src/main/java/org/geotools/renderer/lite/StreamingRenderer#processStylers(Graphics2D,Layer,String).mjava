    /**
     * Applies all the styles to the features/coverages contained in the given layer.
     * 
     * @param graphics Target graphics for rendering
     * @param layer The layer being styled
     * @param layerId Handle used to identify the layer in the {@link LabelCache}
     * @throws Exception
     */
    private void processStylers(final Graphics2D graphics, final Layer layer, String layerId)
            throws Exception {
        // /////////////////////////////////////////////////////////////////////
        //
        // Preparing feature information and styles
        //
        // /////////////////////////////////////////////////////////////////////
        final FeatureSource featureSource = layer.getFeatureSource();
        if (featureSource == null) {
            throw new IllegalArgumentException(
                    "The layer does not contain a feature source: " + layer.getTitle());
        }
        final FeatureType schema = featureSource.getSchema();

        final ArrayList<LiteFeatureTypeStyle> lfts = createLiteFeatureTypeStyles(layer, graphics,
                isOptimizedFTSRenderingEnabled());
        if (lfts.isEmpty()) {
            return;
        } else {
            if (LOGGER.isLoggable(Level.FINE)) {
                LOGGER.fine("Processing " + lfts.size() + " stylers for " + schema.getName());
            }
        }
        
        // classify by sortby and transformation (aka how we produce the features to
        // be rendered)
        List<List<LiteFeatureTypeStyle>> txClassified = classifyByFeatureProduction(lfts);
        
        // render groups by uniform transformation
        for (List<LiteFeatureTypeStyle> uniform : txClassified) {
            FeatureCollection features = getFeatures(layer, schema, uniform);
            if(features == null) {
                continue;
            }

            // finally, perform rendering
            if (isOptimizedFTSRenderingEnabled() && lfts.size() > 1) {
                drawOptimized(graphics, layerId, features, uniform);
            } else {
                drawPlain(graphics, layerId, features, uniform);
            }
        }
    }

