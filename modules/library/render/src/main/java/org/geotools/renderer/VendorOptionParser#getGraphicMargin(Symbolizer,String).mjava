    /**
     * Returns a CSS margin from the options map. The result always has 4 components, in
     * top,right,bottom,left order. The syntax can follow the CSS shorthand,
     * http://www.w3schools.com/css/css_margin.asp
     *
     * @param symbolizer
     * @return
     */
    public int[] getGraphicMargin(Symbolizer symbolizer, String optionName) {
        String value = getOption(symbolizer, optionName);
        if (value == null) {
            return null;
        } else {
            String[] values = value.trim().split("\\s+");
            if (values.length == 0) {
                return null;
            } else if (values.length > 4) {
                throw new IllegalArgumentException(
                        "The graphic margin is to be specified with 1, 2 or 4 values");
            }
            int[] parsed = new int[values.length];
            boolean allZeroMargin = false;
            for (int i = 0; i < parsed.length; i++) {
                int margin = Integer.parseInt(values[i]);
                allZeroMargin = allZeroMargin && margin == 0;
                parsed[i] = margin;
            }
            // if not a single positive margin
            if (allZeroMargin) {
                return null;
            } else if (parsed.length == 4) {
                return parsed;
            } else if (parsed.length == 3) {
                return new int[] {parsed[0], parsed[1], parsed[2], parsed[1]};
            } else if (parsed.length == 2) {
                return new int[] {parsed[0], parsed[1], parsed[0], parsed[1]};
            } else {
                return new int[] {parsed[0], parsed[0], parsed[0], parsed[0]};
            }
        }
    }

