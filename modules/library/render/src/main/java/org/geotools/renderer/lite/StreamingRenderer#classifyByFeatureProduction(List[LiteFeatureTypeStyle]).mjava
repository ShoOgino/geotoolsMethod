    /**
     * Classify a List of LiteFeatureTypeStyle objects by Transformation.
     * 
     * @param lfts A List of LiteFeatureTypeStyles
     * @return A List of List of LiteFeatureTypeStyles
     */
    List<List<LiteFeatureTypeStyle>> classifyByFeatureProduction(List<LiteFeatureTypeStyle> lfts) {
        List<List<LiteFeatureTypeStyle>> txClassified = new ArrayList<List<LiteFeatureTypeStyle>>();
        txClassified.add(new ArrayList<LiteFeatureTypeStyle>());
        Expression transformation = null;
        SortBy[] sortBy = null;
        for (int i = 0; i < lfts.size(); i++) {
            LiteFeatureTypeStyle curr = lfts.get(i);
            if(i == 0) {
                transformation = curr.transformation;
                sortBy = curr.sortBy;
            } else {
                // do they have the same transformation?
                boolean differentTransformation = (transformation != curr.transformation)
                    || (transformation != null && curr.transformation != null && 
                    !curr.transformation.equals(transformation));

                // is sorting incompatible, that is, different from the one
                // we are working against? "null" means not caring about sorting,
                // it's thus compatible with whatever other sort
                boolean incompatibleSort = false;
                if (curr.sortBy != null) {
                    if (sortBy == null) {
                        // we started with "whatever sorting", from here on we have one
                        sortBy = curr.sortBy;
                    } else {
                        incompatibleSort = true;
                    }
                }
                if (differentTransformation || incompatibleSort) {
                    // create a new slot (we always add the lfts into the last one)
                    txClassified.add(new ArrayList<LiteFeatureTypeStyle>());
                    transformation = curr.transformation;
                    sortBy = curr.sortBy;
                }

            }
            txClassified.get(txClassified.size() - 1).add(curr);
        }
        return txClassified;
    }

