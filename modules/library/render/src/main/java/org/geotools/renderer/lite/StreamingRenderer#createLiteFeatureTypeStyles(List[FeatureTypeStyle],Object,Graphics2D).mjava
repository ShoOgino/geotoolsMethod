    /**
     * <p>Creates a list of <code>LiteFeatureTypeStyle</code>s with:
     * <ol type="a">
     * <li>out-of-scale rules removed</li>
     * <li>incompatible FeatureTypeStyles removed</li>
     * </ol>
     * </p>
     * 
     * <p><em><strong>Note:</strong> This method has a lot of duplication with 
     * {@link #createLiteFeatureTypeStyles(FeatureTypeStyle[], SimpleFeatureType, Graphics2D)}. 
     * </em></p>
     * 
     * @param featureStyles Styles to process
     * @param typeDescription The type description that has to be matched
     * @return ArrayList<LiteFeatureTypeStyle>
     */
    private ArrayList<LiteFeatureTypeStyle> createLiteFeatureTypeStyles(
            List<FeatureTypeStyle> featureStyles, 
            Object typeDescription, Graphics2D graphics) throws IOException {
        ArrayList<LiteFeatureTypeStyle> result = new ArrayList<LiteFeatureTypeStyle>();

        List<Rule> rules;
        List<Rule> ruleList;
        List<Rule> elseRuleList;
        LiteFeatureTypeStyle lfts;
        BufferedImage image;

        boolean foundComposite = false;
        for (FeatureTypeStyle fts : featureStyles) {
            if (typeDescription == null || typeDescription.toString().indexOf( fts.getFeatureTypeName() ) == -1) 
                continue; 

            // get applicable rules at the current scale
            rules = fts.rules();
            ruleList = new ArrayList<Rule>();
            elseRuleList = new ArrayList<Rule>();

            // gather the active rules
            for(Rule r : rules) {
                if (isWithInScale(r)) {
                    if (r.isElseFilter()) {
                        elseRuleList.add(r);
                    } else {
                        ruleList.add(r);
                    }
                }
            }
            
            // nothing to render, don't do anything!!
            if ((ruleList.isEmpty()) && (elseRuleList.isEmpty()))
                continue; 

            // get the fts level composition, if any
            Composite composite = SLDStyleFactory.getComposite(fts.getOptions());
            foundComposite |= composite != null;

            // first fts, we can reuse the graphics directly
            if (!foundComposite && (result.isEmpty() || !isOptimizedFTSRenderingEnabled())) {
                lfts = new LiteFeatureTypeStyle(graphics, ruleList, elseRuleList, fts.getTransformation());
            } else {
                lfts = new LiteFeatureTypeStyle(new DelayedBackbufferGraphic(graphics, screenSize), 
                        ruleList, elseRuleList, fts.getTransformation());
            }
            lfts.composite = composite;
            if (FeatureTypeStyle.VALUE_EVALUATION_MODE_FIRST.equals(fts.getOptions().get(
                    FeatureTypeStyle.KEY_EVALUATION_MODE))) {
                lfts.matchFirst = true;
            }
            result.add(lfts);
        }

        return result;
    }

