    private List<List<Rule>> splitRules(FeatureTypeStyle fts) {
        List<Rule> ruleList = new ArrayList<Rule>();
        List<Rule> elseRuleList = new ArrayList<Rule>();

        for (Rule r : fts.rules())
            if (isWithInScale(r)) {
                if (r.isElseFilter()) {
                    elseRuleList.add(r);
                } else {
                    // rules can have dynamic bits related to env variables that we evaluate and
                    // skip at this this time
                    if (!Filter.INCLUDE.equals(r.getFilter()) && hasEnvVariables(r.getFilter())) {
                        DuplicatingStyleVisitor cloner =
                                new DuplicatingStyleVisitor() {
                                    SimplifyingFilterVisitor simplifier =
                                            new SimplifyingFilterVisitor();

                                    @Override
                                    protected Filter copy(Filter filter) {
                                        if (filter == null) return null;
                                        return (Filter) filter.accept(simplifier, ff);
                                    }
                                };
                        r.accept(cloner);
                        Rule copy = (Rule) cloner.getCopy();
                        if (!Filter.EXCLUDE.equals(copy.getFilter())) {
                            ruleList.add(copy);
                        }
                    } else {
                        ruleList.add(r);
                    }
                }
            }

        return Arrays.asList(ruleList, elseRuleList);
    }

