    /*
     * (non-Javadoc)
     *
     * @see org.geotools.renderer.lite.gridcoverage2d.StyleVisitorCoverageProcessingNodeAdapter#execute()
     */
    @SuppressWarnings("unchecked")
    protected GridCoverage2D execute() {
        final Hints hints = getHints();

        // /////////////////////////////////////////////////////////////////////
        //
        // Get the sources and see what we got to do. Note that if we have more
        // than once source we'll use only the first one but we'll
        //
        // /////////////////////////////////////////////////////////////////////
        final List<CoverageProcessingNode> sources = this.getSources();
        if (sources != null && !sources.isEmpty()) {
            final GridCoverage2D source = (GridCoverage2D) getSource(0).getOutput();
            GridCoverageRendererUtilities.ensureSourceNotNull(source, this.getName().toString());
            GridCoverage2D output;
            if ((!Double.isNaN(gammaValue)
                            && !Double.isInfinite(gammaValue)
                            && !(Math.abs(gammaValue - 1) < 1E-6))
                    || (type != null && type.length() > 0)) {

                // /////////////////////////////////////////////////////////////////////
                //
                // We have a valid gamma value, let's go ahead.
                //
                // /////////////////////////////////////////////////////////////////////
                final RenderedImage sourceImage = source.getRenderedImage();

                // /////////////////////////////////////////////////////////////////////
                //
                // PREPARATION
                //
                // /////////////////////////////////////////////////////////////////////

                // //
                //
                // Get the ROI and NoData from the input coverageS
                //
                ////
                ROI roi = CoverageUtilities.getROIProperty(source);
                NoDataContainer noDataContainer = CoverageUtilities.getNoDataProperty(source);
                Range nodata = noDataContainer != null ? noDataContainer.getAsRange() : null;

                // //
                //
                // Get the source image and if necessary convert it to use a
                // ComponentColorModel. This way we are sure we will have a
                // visible image most part of the time.
                //
                // //
                ////
                //
                // @todo TODO HACK we need to convert to byte the image when going to
                // apply HISTOGRAM anyway
                //
                ////
                ImageWorker worker;
                if (type != null && type.equalsIgnoreCase("HISTOGRAM")) {
                    worker =
                            new ImageWorker(sourceImage)
                                    .setROI(roi)
                                    .setNoData(nodata)
                                    .setRenderingHints(hints)
                                    .forceComponentColorModel()
                                    .rescaleToBytes();
                } else {
                    worker =
                            new ImageWorker(sourceImage)
                                    .setROI(roi)
                                    .setNoData(nodata)
                                    .setRenderingHints(hints)
                                    .forceComponentColorModel();
                }
                final int numbands = worker.getNumBands();

                // //
                //
                // Save the alpha band if present, in order to put it back
                // later in the loop. We are not going to use it anyway for
                // the IHS conversion.
                //
                // //
                RenderedImage alphaBand = null;
                if (numbands % 2 == 0) {
                    // get the alpha band
                    alphaBand =
                            new ImageWorker(worker.getRenderedImage())
                                    .setRenderingHints(hints)
                                    .retainLastBand()
                                    .getRenderedImage();
                    // strip the alpha band from the original image
                    worker.setRenderingHints(hints).retainBands(numbands - 1);
                }

                // //
                //
                // Get the single band to work on, which might be the
                // intensity for RGB(A) or the GRAY channel for Gray(A)
                //
                // //
                ImageWorker intensityWorker;
                RenderedImage hChannel = null;
                RenderedImage sChannel = null;
                final boolean intensity;
                RenderedImage IHS = null;
                if (numbands > 1) {
                    // convert the prepared image to IHS colorspace to work
                    // on I band
                    IHS = worker.setRenderingHints(hints).forceColorSpaceIHS().getRenderedImage();

                    // get the various singular bands
                    intensityWorker = worker.setRenderingHints(hints).retainFirstBand();
                    sChannel =
                            new ImageWorker(IHS)
                                    .setRenderingHints(hints)
                                    .retainLastBand()
                                    .getRenderedImage();
                    hChannel =
                            new ImageWorker(IHS)
                                    .setRenderingHints(hints)
                                    .retainBands(new int[] {1})
                                    .getRenderedImage();
                    intensity = true;
                } else {
                    // //
                    //
                    // we have only one band we don't need to go to IHS
                    //
                    // //
                    intensityWorker = worker;
                    intensity = false;
                }

                // /////////////////////////////////////////////////////////////////////
                //
                // HISTOGRAM ENHANCEMENT
                //
                //
                //
                // /////////////////////////////////////////////////////////////////////
                performContrastEnhancement(intensityWorker, hints);

                // /////////////////////////////////////////////////////////////////////
                //
                // GAMMA CORRECTION
                //
                // Lookup for building the actual lut that caches the gamma
                // correction function's values.
                //
                // /////////////////////////////////////////////////////////////////////
                performGammaCorrection(intensityWorker, hints);

                // /////////////////////////////////////////////////////////////////////
                //
                // POSTPROCESSING
                //
                // Take care of the intermediated image we left back. This
                // means, handle the fact that we might have gone to IHS and
                // the alpha band.
                //
                // /////////////////////////////////////////////////////////////////////
                if (intensity) {

                    // //
                    //
                    // IHS --> RGB
                    //
                    // Let's merge the modified IHS image. The message on
                    // the mailing list (see comments for this class)
                    // mentioned that it is required to pass a RenderingHing
                    // with a ImageLayout with the IHS color
                    // model.
                    //
                    // //
                    final ImageLayout imageLayout = new ImageLayout();
                    imageLayout.setColorModel(IHS.getColorModel());
                    imageLayout.setSampleModel(IHS.getSampleModel());
                    final RenderingHints rendHints = new RenderingHints(Collections.EMPTY_MAP);
                    rendHints.add(hints);
                    rendHints.add(new RenderingHints(JAI.KEY_IMAGE_LAYOUT, imageLayout));

                    // merge and go to rgb again
                    intensityWorker
                            .setRenderingHints(rendHints)
                            .addBands(new RenderedImage[] {hChannel, sChannel}, false, null);
                    intensityWorker.setRenderingHints(hints).forceColorSpaceRGB();
                }

                // //
                //
                // ALPHA BAND
                //
                // Let's merge the alpha band with the image we have rebuilt.
                //
                // //
                if (alphaBand != null) {
                    final ColorModel cm =
                            new ComponentColorModel(
                                    numbands >= 3
                                            ? ColorSpace.getInstance(ColorSpace.CS_sRGB)
                                            : ColorSpace.getInstance(ColorSpace.CS_GRAY),
                                    numbands >= 3 ? new int[] {8, 8, 8, 8} : new int[] {8, 8},
                                    true,
                                    false,
                                    Transparency.TRANSLUCENT,
                                    DataBuffer.TYPE_BYTE);
                    final ImageLayout imageLayout = new ImageLayout();
                    imageLayout.setColorModel(cm);
                    imageLayout.setSampleModel(
                            cm.createCompatibleSampleModel(
                                    intensityWorker.getRenderedImage().getWidth(),
                                    intensityWorker.getRenderedImage().getHeight()));
                    // merge and go to rgb
                    intensityWorker
                            .setRenderingHints(hints)
                            .setRenderingHint(JAI.KEY_IMAGE_LAYOUT, imageLayout)
                            .addBand(alphaBand, false, true, null);
                }

                // /////////////////////////////////////////////////////////////////////
                //
                // OUTPUT
                //
                // /////////////////////////////////////////////////////////////////////
                final int numSourceBands = source.getNumSampleDimensions();
                final RenderedImage finalImage = intensityWorker.getRenderedImage();
                final int numActualBands = finalImage.getSampleModel().getNumBands();
                final GridCoverageFactory factory = getCoverageFactory();
                final HashMap<Object, Object> props = new HashMap<Object, Object>();
                if (source.getProperties() != null) {
                    props.putAll(source.getProperties());
                }
                // Setting ROI and NODATA
                if (intensityWorker.getNoData() != null) {
                    props.put(
                            NoDataContainer.GC_NODATA,
                            new NoDataContainer(intensityWorker.getNoData()));
                }
                if (intensityWorker.getROI() != null) {
                    props.put("GC_ROI", intensityWorker.getROI());
                }

                if (numActualBands == numSourceBands) {
                    final String name = "ce_coverage" + source.getName();
                    output =
                            factory.create(
                                    name,
                                    finalImage,
                                    (GridGeometry2D) source.getGridGeometry(),
                                    source.getSampleDimensions(),
                                    new GridCoverage[] {source},
                                    props);
                } else {
                    // replicate input bands
                    final GridSampleDimension sd[] = new GridSampleDimension[numActualBands];
                    for (int i = 0; i < numActualBands; i++)
                        sd[i] = (GridSampleDimension) source.getSampleDimension(0);
                    output =
                            factory.create(
                                    "ce_coverage" + source.getName().toString(),
                                    finalImage,
                                    (GridGeometry2D) source.getGridGeometry(),
                                    sd,
                                    new GridCoverage[] {source},
                                    props);
                }

            } else
                // /////////////////////////////////////////////////////////////////////
                //
                // We do not have a valid gamma value, let's try with a
                // conservative approach that is, let's forward the source
                // coverage intact.
                //
                // /////////////////////////////////////////////////////////////////////
                output = source;
            return output;
        }
        throw new IllegalStateException(
                Errors.format(ErrorKeys.SOURCE_CANT_BE_NULL_$1, this.getName().toString()));
    }

