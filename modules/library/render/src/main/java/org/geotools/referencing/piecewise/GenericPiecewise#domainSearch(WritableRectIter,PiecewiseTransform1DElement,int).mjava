	private PiecewiseTransform1DElement domainSearch(final WritableRectIter iterator,
			PiecewiseTransform1DElement last, final int bandNumber) throws TransformException {
		
		 
			 
		// //
		//
		// get the input value to be transformed
		//
		// //
		final double value = iterator.getSampleDouble();
		
		
		
		
		
		// //
		//
		// get the correct piecewise element for this
		// transformation
		//
		// //
		final PiecewiseTransform1DElement transformElement;
		if (useLast) {
			if (last != null && last.contains(value))
				transformElement = last;
			else {
				last = transformElement = (PiecewiseTransform1DElement) piecewise
						.findDomainElement(value);
			}
		} else
			transformElement = (PiecewiseTransform1DElement) piecewise
					.findDomainElement(value);

		// //
		//
		// in case everything went fine let's apply the
		// transform.
		//
		// //
		if (transformElement != null)
			iterator.setSample(transformElement
					.transform(value));
		else {
			// //
			//
			// if we did not find one let's try to use
			// one of the nodata ones to fill the gaps,
			// if we are allowed to (see above).
			//
			// //
			if (hasGapsValue)
				iterator.setSample(gapsValue);
			else

				// //
				//
				// if we did not find one let's throw a
				// nice error message
				//
				// //
				throw new IllegalArgumentException(Errors.format(ErrorKeys.ILLEGAL_ARGUMENT_$1, Double.toString(value)));
		}
		return last;
	}

