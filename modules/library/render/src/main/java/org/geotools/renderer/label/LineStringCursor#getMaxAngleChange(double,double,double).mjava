    /**
     * A variant of {@link #getMaxAngleChange(double, double)} taking a step and evaluating angle
     * differences at such step. This helps when a line has many little segments and chars would end
     * up showing several segments apart (so the full angle change needs to be considered)
     *
     * @param startOrdinate
     * @param endOrdinate
     * @param step
     * @return
     * @deprecated Does not work correctly, will be removed (tried too many times to fix it)
     */
    public double getMaxAngleChange(double startOrdinate, double endOrdinate, double step) {
        if (startOrdinate > endOrdinate)
            throw new IllegalArgumentException("Invalid arguments, endOrdinate < starOrdinate");

        // compute the begin and end segments
        LineStringCursor delegate = new LineStringCursor(this);
        double ordinate = startOrdinate; // center of first step
        delegate.moveTo(ordinate);
        int prevSegment = delegate.segment;
        double previousAngle = getSegmentAngle(prevSegment);
        MaxAngleDiffenceAccumulator accumulator = new MaxAngleDiffenceAccumulator(previousAngle);
        try {
            do {
                // make sure to more forward enough to both move at least to the next segment
                // but also to cover at least "step" distance (might require more than one segment)
                double distance = segmentLenghts[delegate.segment] - delegate.offsetDistance;
                delegate.offsetDistance = 0;
                while (((distance < step && ordinate + distance < endOrdinate)
                                || delegate.segment == prevSegment)
                        && delegate.segment < (delegate.segmentLenghts.length - 1)) {
                    delegate.segment++;
                    distance += segmentLenghts[delegate.segment];
                }
                ordinate += distance;

                if (delegate.segment < (delegate.segmentLenghts.length - 1)) {
                    double angle = getSegmentAngle(delegate.segment);
                    accumulator.accumulate(angle);
                }

                // move to next segment
                delegate.segment++;
            } while (ordinate < endOrdinate
                    && (delegate.segment < (delegate.segmentLenghts.length)));
        } catch (Exception e) {
            LOGGER.log(Level.INFO, "Error occurred while computing max angle change in label", e);
        }

        return accumulator.getMaxDifference();
    }

