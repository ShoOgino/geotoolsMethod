    /**
     * Creates a new instance of BoundsEvent
     * 
     * @param source
     *            the map context reporting the change
     * 
     * @param type
     *            the type of change indicated by one or both of the bit masks
     *            {@linkplain #AREA_OF_INTEREST_MASK} and {@linkplain #COORDINATE_SYSTEM_MASK}
     * 
     * @param oldAreaOfInterest
     *            the context's previous area of interest
     * 
     * @param newAreaOfInterest
     *            the context's new area of interest
     * 
     * @throws IllegalArgumentException
     *             if type is invalid
     */
    public MapBoundsEvent(MapContext source, int type, ReferencedEnvelope oldAreaOfInterest,
            ReferencedEnvelope newAreaOfInterest) {
        super(source);

        this.type = EnumSet.noneOf(Type.class);
        if ((type & AREA_OF_INTEREST_MASK) != 0) {
            this.type.add(Type.BOUNDS);
        } else if ((type & COORDINATE_SYSTEM_MASK) != 0) {
            this.type.add(Type.CRS);
        } else {
            throw new IllegalArgumentException("Type is not acceptable, maximum value is "
                    + (NEXT_FLAG - 1) + ", passed value is " + type);
        }
        this.oldAreaOfInterest = oldAreaOfInterest;
        this.newAreaOfInterest = newAreaOfInterest;
    }

