    /**
     * Creates the bounding box filters (one for each geometric attribute)
     * needed to query a <code>MapLayer</code>'s feature source to return
     * just the features for the target rendering extent
     * 
     * @param schema
     *            the layer's feature source schema
     * @param attributes
     *            set of needed attributes
     * @param bbox
     *            the expression holding the target rendering bounding box
     * @return an or'ed list of bbox filters, one for each geometric attribute
     *         in <code>attributes</code>. If there are just one geometric
     *         attribute, just returns its corresponding
     *         <code>GeometryFilter</code>.
     * @throws IllegalFilterException
     *             if something goes wrong creating the filter
     */
    private Filter createBBoxFilters(FeatureType schema, String[] attributes,
            List<ReferencedEnvelope> bboxes) throws IllegalFilterException {
        Filter filter = Filter.INCLUDE;
        final int length = attributes.length;
        PropertyDescriptor attType;

        for (int j = 0; j < length; j++) {
            attType = schema.getDescriptor(attributes[j]);

            // DJB: added this for better error messages!
            if (attType == null) {
                if (LOGGER.isLoggable(Level.FINE))
                    LOGGER.fine(new StringBuffer("Could not find '").append(
                            attributes[j]).append("' in the FeatureType (")
                            .append(schema.getName()).append(")")
                            .toString());
                throw new IllegalFilterException(new StringBuffer(
                "Could not find '").append(
                        attributes[j] + "' in the FeatureType (").append(
                                schema.getName()).append(")").toString());
            }

            if (attType instanceof GeometryDescriptor) {
                String localName = ((GeometryDescriptor) attType).getLocalName();
                Filter gfilter = new FastBBOX(localName, bboxes.get(0), filterFactory);

                if (filter == Filter.INCLUDE) {
                    filter = gfilter;
                } else {
                    filter = filterFactory.or( filter, gfilter );
                }

                if(bboxes.size() > 0) {
                    for (int k = 1; k < bboxes.size(); k++) {
                        filter = filterFactory.or( filter, new FastBBOX(localName, bboxes.get(k), filterFactory) );
                    }
                }
            }
        }

        return filter;
    }

