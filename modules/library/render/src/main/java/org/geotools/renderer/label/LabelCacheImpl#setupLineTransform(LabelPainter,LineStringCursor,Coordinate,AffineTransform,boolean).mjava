    /**
     * Sets up the transformation needed to position the label at the current location of the line
     * string, using the positioning information loaded from the text style
     */
    private void setupLineTransform(
            LabelPainter painter,
            LineStringCursor cursor,
            Coordinate centroid,
            AffineTransform tempTransform,
            boolean followLine) {
        tempTransform.translate(centroid.x, centroid.y);

        TextStyle2D textStyle = painter.getLabel().getTextStyle();
        double anchorX = textStyle.getAnchorX();
        double anchorY = textStyle.getAnchorY();

        // undo the above if its point placement!
        double rotation;
        double displacementX = 0;
        double displacementY = 0;
        Rectangle2D textBounds = painter.getLabelBounds();
        if (textStyle.isPointPlacement() && !followLine) {
            // use the one the user supplied!
            rotation = textStyle.getRotation();
        } else { // lineplacement
            if (painter.getLabel().isForceLeftToRightEnabled()) {
                rotation = cursor.getLabelOrientation();
            } else {
                rotation = cursor.getCurrentAngle();
            }
            // move it off the line. If there is a follow line enabled, the perpendicular offset
            // has been baked into the geometry, so no need to account for it here
            final int perpendicularOffset = followLine ? 0 : textStyle.getPerpendicularOffset();
            displacementY -=
                    perpendicularOffset
                            + (painter.getLineCount() - 1)
                                    * (textBounds.getHeight() / painter.getLineCount());
            anchorX = 0.5; // centered
            anchorY = painter.getLinePlacementYAnchor();
        }

        displacementX = (anchorX * (-textBounds.getWidth())) + textStyle.getDisplacementX();
        displacementY += (anchorY * (textBounds.getHeight())) - textStyle.getDisplacementY();

        if (Double.isNaN(rotation) || Double.isInfinite(rotation)) rotation = 0.0;
        tempTransform.rotate(rotation);
        tempTransform.translate(displacementX, displacementY);
    }

