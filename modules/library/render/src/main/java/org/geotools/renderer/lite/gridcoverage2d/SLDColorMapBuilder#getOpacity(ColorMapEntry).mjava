    /** */
    private static double getOpacity(ColorMapEntry entry)
            throws IllegalArgumentException, MissingResourceException {

        ColorMapUtilities.ensureNonNull("ColorMapEntry", entry);
        // //
        //
        // As stated in <a
        // href="https://portal.opengeospatial.org/files/?artifact_id=1188">
        // OGC Styled-Layer Descriptor Report (OGC 02-070) version
        // 1.0.0.</a>:
        // "Not all systems can support opacity in colormaps. The default
        // opacity is 1.0 (fully opaque)."
        //
        // //
        ColorMapUtilities.ensureNonNull("entry", entry);
        Expression opacity = entry.getOpacity();
        Double opacityValue = null;
        if (opacity != null) opacityValue = opacity.evaluate(null, Double.class);
        else return 1.0;
        if (opacityValue == null && opacity instanceof Literal) {
            String opacityExp = opacity.evaluate(null, String.class);
            opacity = ExpressionExtractor.extractCqlExpressions(opacityExp);
            opacityValue = opacity.evaluate(null, Double.class);
        }
        if (opacityValue == null) {
            throw new IllegalArgumentException(
                    "Opacity value null or could not be converted to a double" + opacity);
        }
        if ((opacityValue.doubleValue() - 1) > 0 || opacityValue.doubleValue() < 0) {
            throw new IllegalArgumentException(
                    Errors.format(ErrorKeys.ILLEGAL_ARGUMENT_$2, "Opacity", opacityValue));
        }
        return opacityValue.doubleValue();
    }

