    /**
     * Returns the first font associated to the feature that can be found on the
     * current machine
     *
     * @param feature
     *            The feature whose font is to be found
     * @param fonts
     *            An array of fonts dependent of the feature, the first that is
     *            found on the current machine is returned
     * @param vendorOptions 
     *
     * @return The first of the specified fonts found on this machine (Serif 10 if none found)
     */
    private java.awt.Font[] getFonts(Object feature, List<Font> fonts, TextSymbolizer symbolizer) {
        
        // add kerning here!
        
        List<java.awt.Font> result = new ArrayList<>();
        // try to build a font using the full spec
        if (fonts != null) {
            for (Font curr : fonts) {
                for (Expression family : curr.getFamily()) {
                    String requestedFont = evalToString(family, feature, null);
                    java.awt.Font javaFont = FontCache.getDefaultInstance().getFont(requestedFont);

                    if (javaFont != null) {
                        java.awt.Font font = styleFont(feature, curr, javaFont, symbolizer);
                        result.add(font);
                    }
                }
            }
        }

        if (result.isEmpty()) {
            java.awt.Font font = new java.awt.Font("Serif", java.awt.Font.PLAIN, 12);
            if (fonts != null && !fonts.isEmpty()) {
                font = styleFont(feature, fonts.get(0), font, symbolizer);
            } else {
                font = applyKerning(font);
            }
            result.add(font);
        }

        return result.toArray(new java.awt.Font[result.size()]);
    }

