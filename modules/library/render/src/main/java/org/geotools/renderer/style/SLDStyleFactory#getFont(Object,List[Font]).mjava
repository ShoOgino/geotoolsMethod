    /**
     * Returns the first font associated to the feature that can be found on the
     * current machine
     *
     * @param feature
     *            The feature whose font is to be found
     * @param fonts
     *            An array of fonts dependent of the feature, the first that is
     *            found on the current machine is returned
     *
     * @return The first of the specified fonts found on this machine or null if
     *         none found
     */
    private java.awt.Font getFont(Object feature, List<Font> fonts) {

        // try to build a font using the full spec
        if (fonts != null) {

            for (Font curr: fonts) {
                String requestedFont = evalToString(curr.getFontFamily(),
                        feature, null);
                java.awt.Font javaFont = FontCache.getDefaultInstance().getFont(
                        requestedFont);

                if (javaFont != null) {
                    return styleFont(feature, curr, javaFont);
                }
            }
        }

        // could not find the requested font, see if we can at least use the
        // requested styling
        java.awt.Font result = new java.awt.Font("Serif", java.awt.Font.PLAIN,
                12);

        if ((fonts != null) && (!fonts.isEmpty())) {
            return styleFont(feature, fonts.get(0), result);
        } else {
            return result;
        }
    }

