    void paintLabels(Graphics2D graphics, Rectangle displayArea) {
        if (!activeLayers.isEmpty()) {
            throw new IllegalStateException(
                    activeLayers
                            + " are layers that started rendering but have not completed,"
                            + " stop() or endLayer() must be called before end() is called");
        }
        LabelIndex glyphs = new LabelIndex();
        glyphs.reserveArea(reserved);

        // Used to check the paintLineLabel function
        int paintedLineLabels = 0;

        // Hack: let's reduce the display area width and height by one pixel.
        // If the rendered image is 256x256, proper rendering of polygons and
        // lines occurr only if the display area is [0,0; 256,256], yet if you
        // try to render anything at [x,256] or [256,y] it won't show.
        // So, to avoid labels that happen to touch the border being cut
        // by one pixel, we reduce the display area.
        // Feels hackish, don't have a better solution at the moment thought
        displayArea = new Rectangle(displayArea);
        displayArea.width -= 1;
        displayArea.height -= 1;

        // prepare the geometry clipper
        clipper =
                new GeometryClipper(
                        new Envelope(
                                displayArea.getMinX(),
                                displayArea.getMaxX(),
                                displayArea.getMinY(),
                                displayArea.getMaxY()));

        List<LabelCacheItem> items; // both grouped and non-grouped
        if (needsOrdering) {
            items = orderedLabels();
        } else {
            items = getActiveLabels();
        }
        LabelPainter painter = constructPainter.apply(graphics, labelRenderingMode);
        for (LabelCacheItem labelItem : items) {
            if (stop) return;

            paintedLineLabels =
                    paintLabel(
                            graphics, displayArea, glyphs, paintedLineLabels, painter, labelItem);
        }
        // Output for line labels
        LOGGER.log(Level.FINE, "TOTAL LINE LABELS : {0}", items.size());
        LOGGER.log(Level.FINE, "PAINTED LINE LABELS : {0}", paintedLineLabels);
        LOGGER.log(Level.FINE, "REMAINING LINE LABELS : {0}", items.size() - paintedLineLabels);
    }

