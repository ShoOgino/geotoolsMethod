	public LinearColorMap(
			final CharSequence name,
			final LinearColorMapElement[] standardElements,
			final LinearColorMapElement[] preFilteringElements,
			final Color defaultColor) {
		
		
		
		ColorMapUtilities.ensureNonNull("name", name);
		ColorMapUtilities.ensureNonNull("standardElements", standardElements);
		this.name=SimpleInternationalString.wrap(name);
		///////////////////////////////////////////////////////////////////////
		//
		// Prefiltering transformation
		//
		////
		//
		// All the prefiltering transformations must share the same color, hence
		// they must point to the same int
		//
		//	/////////////////////////////////////////////////////////////////////
		preliminarChecks(standardElements, preFilteringElements);
		
		///////////////////////////////////////////////////////////////////////
		//
		// Checking that same int in output means same color
		//
		////
		//
		//
		//
		//	/////////////////////////////////////////////////////////////////////
		if(preFilteringElements!=null&&preFilteringElements.length>0) 
		{
			this.preFilteringElements=(LinearColorMapElement[]) preFilteringElements.clone();
			Color color=this.preFilteringElements[0].getColors()[0];
			this.preFilteringColor=color;
			
		}
		else
			this.preFilteringElements=null;
		
		///////////////////////////////////////////////////////////////////////
		//
		// Standard transformation
		//
		//	/////////////////////////////////////////////////////////////////////
		this.standardElements=(LinearColorMapElement[]) standardElements.clone();
		
		///////////////////////////////////////////////////////////////////////
		//
		// Default color to fill gaps, if provided.
		//
		//	/////////////////////////////////////////////////////////////////////
		this.defaultColor=defaultColor;
		


	}

