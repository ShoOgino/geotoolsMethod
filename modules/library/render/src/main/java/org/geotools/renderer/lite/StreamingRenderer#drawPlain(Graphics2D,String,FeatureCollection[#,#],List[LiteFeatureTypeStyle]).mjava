    /**
     * Performs all rendering on the user provided graphics object by scanning the collection
     * multiple times, one for each feature type style provided
     */
    private void drawPlain(
            final Graphics2D graphics,
            String layerId,
            FeatureCollection<?, ?> features,
            final List<LiteFeatureTypeStyle> lfts) {

        // for each lite feature type style, scan the whole collection and draw
        for (LiteFeatureTypeStyle liteFeatureTypeStyle : lfts) {
            try (FeatureIterator<?> featureIterator = features.features()) {
                if (featureIterator == null) {
                    return; // nothing to do
                }
                boolean cloningRequired = isCloningRequired(lfts);
                RenderableFeature rf = createRenderableFeature(layerId, cloningRequired);
                rf.layer = liteFeatureTypeStyle.layer;

                ProjectionHandler handler = liteFeatureTypeStyle.projectionHandler;
                // Check if a reprojection has been made, in that case, let's update the projection
                // Handler
                CoordinateReferenceSystem featureCrs =
                        features.getSchema().getCoordinateReferenceSystem();
                ScreenMap screenMap = liteFeatureTypeStyle.screenMap;
                if (handler != null
                        && featureCrs != null
                        && !CRS.equalsIgnoreMetadata(handler.getSourceCRS(), featureCrs)) {
                    try {
                        handler =
                                ProjectionHandlerFinder.getHandler(
                                        mapExtent, featureCrs, isMapWrappingEnabled());
                        if (screenMap != null) {
                            Envelope mapArea = mapExtent;
                            if (getRenderingBuffer() == 0) {
                                int metaBuffer = findRenderingBuffer(lfts);
                                if (metaBuffer > 0) {
                                    mapArea =
                                            expandEnvelope(
                                                    mapArea, worldToScreenTransform, metaBuffer);
                                }
                            }
                            ReferencedEnvelope envelope =
                                    expandEnvelopeByTransformations(
                                            lfts, new ReferencedEnvelope(mapArea, destinationCrs));
                            envelope = new ReferencedEnvelope(envelope, destinationCrs);
                            SingleCRS crs2D = CRS.getHorizontalCRS(featureCrs);
                            MathTransform sourceToScreen =
                                    buildFullTransform(
                                            crs2D, destinationCrs, worldToScreenTransform);
                            double[] spans =
                                    getGeneralizationSpans(
                                            envelope,
                                            sourceToScreen,
                                            worldToScreenTransform,
                                            featureCrs,
                                            screenSize);
                            screenMap.setTransform(sourceToScreen);
                            screenMap.setSpans(spans[0], spans[1]);
                        }
                    } catch (FactoryException | TransformException e) {
                        fireErrorEvent(e);
                    }
                }

                rf.setScreenMap(screenMap);
                // loop exit condition tested inside try catch
                // make sure we test hasNext() outside of the try/cath that follows, as that
                // one is there to make sure a single feature error does not ruin the rendering
                // (best effort) whilst an exception in hasNext() + ignoring catch results in
                // an infinite loop
                while (featureIterator.hasNext() && !renderingStopRequested) {
                    rf.setFeature(featureIterator.next());
                    processFeature(rf, liteFeatureTypeStyle, handler);
                }
            }

            if (liteFeatureTypeStyle.composite != null) {
                try {
                    requests.put(
                            new MergeLayersRequest(
                                    graphics, Collections.singletonList(liteFeatureTypeStyle)));
                } catch (InterruptedException e) {
                    fireErrorEvent(e);
                }
            }
        }
    }

