    /**
     * Performs all rendering on the user provided graphics object by scanning
     * the collection multiple times, one for each feature type style provided
     */
    private void drawPlain(final Graphics2D graphics, String layerId,
            FeatureCollection<?, ?> features, final List<LiteFeatureTypeStyle> lfts) {
        
        // for each lite feature type style, scan the whole collection and draw
        for (LiteFeatureTypeStyle liteFeatureTypeStyle : lfts) {
            try (FeatureIterator<?> featureIterator = ((FeatureCollection<?, ?>) features)
                    .features()) {
                if( featureIterator == null ){
                    return; // nothing to do
                }
                RenderableFeature rf = createRenderableFeature(layerId, lfts);
                rf.layer = liteFeatureTypeStyle.layer;
                rf.setScreenMap(liteFeatureTypeStyle.screenMap);
                // loop exit condition tested inside try catch
                // make sure we test hasNext() outside of the try/cath that follows, as that
                // one is there to make sure a single feature error does not ruin the rendering
                // (best effort) whilst an exception in hasNext() + ignoring catch results in
                // an infinite loop
                while (featureIterator.hasNext() && !renderingStopRequested) {
                    rf.setFeature(featureIterator.next());
                    processFeature(rf, liteFeatureTypeStyle);
                }
            }

            if (liteFeatureTypeStyle.composite != null) {
                try {
                    requests.put(new MergeLayersRequest(graphics,
                            Collections.singletonList(liteFeatureTypeStyle)));
                } catch (InterruptedException e) {
                    fireErrorEvent(e);
                }
            }
        }
    }

