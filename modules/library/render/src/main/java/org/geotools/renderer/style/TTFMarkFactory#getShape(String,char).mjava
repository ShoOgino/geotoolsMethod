    private Shape getShape(String fontFamilyName, char character) {
        Font font = FontCache.getDefaultInstance().getFont(fontFamilyName);
        if (font == null) {
            throw new IllegalArgumentException("Unknown font " + fontFamilyName);
        }

        // handle charmap code reporting issues
        if (!font.canDisplay(character)) {
            char alternative = (char) (0xF000 | character);
            if (font.canDisplay(alternative)) {
                character = alternative;
            }
        }

        // build the shape out of the font
        GlyphVector textGlyphVector =
                font.createGlyphVector(FONT_RENDER_CONTEXT, new char[] {(char) character});
        Shape s = textGlyphVector.getOutline();

        // have the shape be centered in the origin, and sitting in a square of side 1
        Rectangle2D bounds = s.getBounds2D();
        AffineTransform tx = new AffineTransform();
        double max = Math.max(bounds.getWidth(), bounds.getHeight());
        // all shapes are defined looking "upwards" (see ShapeMarkFactory or WellKnownMarkFactory)
        // but the fonts ones are flipped to compensate for the fact the y coords grow from top
        // to bottom on the screen. We have to flip the symbol so that it conforms to the
        // other marks convention
        tx.scale(1 / max, -1 / max);
        tx.translate(-bounds.getCenterX(), -bounds.getCenterY());
        ExplicitBoundsShape shape = new ExplicitBoundsShape(tx.createTransformedShape(s));
        shape.setBounds(new Rectangle2D.Double(-0.5, 0.5, 1.0, 1.0));
        return shape;
    }

