    private LineString decimateLineString(LineString line, double step) {
        // ideally this method should use Decimator, but due to 
        // https://github.com/locationtech/jts/issues/254 that is not possible
        // LineString copy = (LineString) LiteCoordinateSequence.cloneGeometry(line, line.getCoordinateSequence().getDimension());
        // Decimator decimator = new Decimator(step, step);
        //  decimator.decimate(copy);

        Coordinate[] inputCoordinates = line.getCoordinates();
        List<Coordinate> simplified = new ArrayList<>();
        // add first
        Coordinate prev = inputCoordinates[0];
        simplified.add(prev);
        for (int i = 1; i < inputCoordinates.length - 1; i++) {
            Coordinate curr = inputCoordinates[i];
            // see if this one should be added
            if ((Math.abs(curr.x - prev.x) > step) || (Math.abs(curr.y - prev.y)) > step) {
                simplified.add(curr);
                prev = curr;
            }
        }
        // special case for closed lines, and we have not accumulated at least 3 points so far
        // the check is just first = last and at least 4 points
        if (line instanceof LinearRing) {
            while(simplified.size() < 3) {
                simplified.add(prev);
            }
        }
        // add last
        simplified.add(inputCoordinates[inputCoordinates.length - 1]);
        
        Coordinate[] newCoords = simplified
                .toArray(new Coordinate[simplified.size()]);
        // preserve close-ness if it was there
        if (line instanceof LinearRing) {
            return line.getFactory().createLinearRing(newCoords);
        } else {
            return line.getFactory().createLineString(newCoords);
        }
    }

