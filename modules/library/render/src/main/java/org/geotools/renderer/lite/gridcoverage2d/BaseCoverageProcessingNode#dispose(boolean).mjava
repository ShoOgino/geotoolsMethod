    /**
     * Disposes this {@link CoverageProcessingNode} along with all the resources it might have
     * allocated
     *
     * <p>The result for this {@link CoverageProcessingNode} is also disposed.
     *
     * @param force force the disposition of this node.
     */
    public void dispose(boolean force) {

        // /////////////////////////////////////////////////////////////////////
        //
        // Do we need to dispose this node?
        //
        // /////////////////////////////////////////////////////////////////////
        if (disposed) return;

        // /////////////////////////////////////////////////////////////////////
        //
        // Cleaning the output we have generated
        //
        // /////////////////////////////////////////////////////////////////////
        if (output != null) output.dispose(force);

        // /////////////////////////////////////////////////////////////////////
        //
        // Removing myself as a sink for my sources
        //
        // /////////////////////////////////////////////////////////////////////
        final Iterator<CoverageProcessingNode> it = sources.iterator();
        while (it.hasNext()) {
            final CoverageProcessingNode source = it.next();
            source.removeSink(this);
        }
        sources.clear();

        // /////////////////////////////////////////////////////////////////////
        //
        // Cleaning sinks
        //
        // /////////////////////////////////////////////////////////////////////
        sinks.clear();

        // /////////////////////////////////////////////////////////////////////
        //
        // Done
        //
        // /////////////////////////////////////////////////////////////////////
        disposed = true;

        if (LOGGER.isLoggable(Level.FINE)) LOGGER.fine("disposed node \n" + this.toString());
    }

