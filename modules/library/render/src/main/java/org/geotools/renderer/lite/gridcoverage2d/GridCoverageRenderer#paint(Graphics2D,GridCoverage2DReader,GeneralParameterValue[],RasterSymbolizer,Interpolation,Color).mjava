    /**
     * Paint the coverage read from the reader (using advanced projection handling). The caller must
     * ensure that <code>graphics</code> has an affine transform mapping "real world" coordinates in
     * the coordinate system given by {@link #getCoordinateSystem}.
     * 
     * @param graphics the {@link Graphics2D} context in which to paint.
     * @param metaBufferedEnvelope
     * @throws Exception
     * @throws UnsupportedOperationException if the transformation from grid to coordinate system in
     *         the GridCoverage is not an AffineTransform
     */
    public void paint(final Graphics2D graphics, final GridCoverage2DReader gridCoverageReader,
            GeneralParameterValue[] readParams, final RasterSymbolizer symbolizer,
            Interpolation interpolation, final Color background) throws Exception {

        //
        // Initial checks
        //
        if (graphics == null) {
            throw new NullPointerException(Errors.format(ErrorKeys.NULL_ARGUMENT_$1, "graphics"));
        }
        if (gridCoverageReader == null) {
            throw new NullPointerException(Errors.format(ErrorKeys.NULL_ARGUMENT_$1,
                    "gridCoverageReader"));
        }

        if (LOGGER.isLoggable(Level.FINE))
            LOGGER.fine(new StringBuilder("Drawing reader ").append(gridCoverageReader.toString())
                    .toString());

        setupInterpolationHints(interpolation);

        // Build the final image and the transformation
        RenderedImage finalImage = renderImage(gridCoverageReader, readParams, symbolizer,
                interpolation, background);
        if (finalImage != null) {
            try {
                paintImage(graphics, finalImage);
            } finally {
                if (finalImage instanceof PlanarImage) {
                    ImageUtilities.disposePlanarImageChain((PlanarImage) finalImage);
                }
            }
        }
    }

