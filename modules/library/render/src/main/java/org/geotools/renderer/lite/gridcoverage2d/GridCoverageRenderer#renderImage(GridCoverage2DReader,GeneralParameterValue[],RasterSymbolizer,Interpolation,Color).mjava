    private RenderedImage renderImage(final GridCoverage2DReader reader,
            GeneralParameterValue[] readParams, final RasterSymbolizer symbolizer,
            final Interpolation interpolation, final Color background) throws FactoryException,
            IOException, TransformException {
        // see if we have a projection handler
        CoordinateReferenceSystem sourceCRS = reader.getCoordinateReferenceSystem();
        CoordinateReferenceSystem targetCRS = destinationEnvelope.getCoordinateReferenceSystem();

        ProjectionHandler handler = null;
        List<GridCoverage2D> coverages;
        // read all the coverages we need, cut and whatnot
        GridCoverageReaderHelper rh = new GridCoverageReaderHelper(reader, destinationSize,
                ReferencedEnvelope.reference(destinationEnvelope), interpolation);
        // are we dealing with a remote service wrapped in a reader, one that can handle reprojection
        // by itself?
        if(GridCoverageReaderHelper.isReprojectingReader(reader)) {
            GridCoverage2D coverage = rh.readCoverage(readParams);
            coverages = new ArrayList<>();
            coverages.add(coverage);
        } else {
            if (advancedProjectionHandlingEnabled) {
                handler = ProjectionHandlerFinder.getHandler(rh.getReadEnvelope(), sourceCRS,
                        wrapEnabled);
                if (handler instanceof WrappingProjectionHandler) {
                    // raster data is monolithic and can cover the whole world, disable
                    // the geometry wrapping heuristic
                    ((WrappingProjectionHandler) handler).setDatelineWrappingCheckEnabled(false);
                }
            }
            coverages = rh.readCoverages(readParams, handler, gridCoverageFactory);
        }

        // check if we have to reproject
        boolean reprojectionNeeded = false;
        for (GridCoverage2D coverage : coverages) {
            if (coverage == null) {
                continue;
            }
            final CoordinateReferenceSystem coverageCRS = coverage.getCoordinateReferenceSystem();
            if (!CRS.equalsIgnoreMetadata(coverageCRS, destinationCRS)) {
                reprojectionNeeded = true;
                break;
            }
        }

        // establish the background values, and expand palettes if the bgcolor cannot be represented
        double[] bgValues = GridCoverageRendererUtilities.colorToArray(background);
        //If coverage is out of view area, coverages has size 1 but the first element is null
        if (!coverages.isEmpty() && coverages.get(0) != null) {
            ColorModel cm = coverages.get(0).getRenderedImage().getColorModel();
            if (cm instanceof IndexColorModel && background != null) {
                IndexColorModel icm = (IndexColorModel) cm;
                int idx = ColorUtilities.findColorIndex(background, icm);
                if (idx < 0) {
                    // not found, we have to expand
                    for (int i = 0; i < coverages.size(); i++) {
                        GridCoverage2D coverage = coverages.get(i);
                        ImageWorker iw = new ImageWorker(coverage.getRenderedImage());
                        iw.forceComponentColorModel();
                        GridCoverage2D expandedCoverage = gridCoverageFactory.create(
                                coverage.getName(), iw.getRenderedImage(),
                                coverage.getGridGeometry(), null, new GridCoverage2D[] { coverage },
                                coverage.getProperties());
                        coverages.set(i, expandedCoverage);

                    }
                }
            } else {
                bgValues = GridCoverageRendererUtilities.colorToArray(background);
            }
        }

        // if we need to reproject, we need to ensure that none of the pixels go out of
        // the projection valid area, not even slightly
        if (reprojectionNeeded && handler != null && handler.getValidAreaBounds() != null) {
            List<GridCoverage2D> cropped = new ArrayList<>();
            ReferencedEnvelope validArea = handler.getValidAreaBounds();
            GridGeometryReducer reducer = new GridGeometryReducer(validArea);
            for (GridCoverage2D coverage : coverages) {
                GridGeometry2D gg = coverage.getGridGeometry();
                GridGeometry2D reduced = reducer.reduce(gg);
                if (!reduced.equals(gg)) {
                    GeneralEnvelope cutEnvelope = reducer.getCutEnvelope(reduced);
                    GridCoverage2D croppedCoverage = crop(coverage,
                            cutEnvelope, false, bgValues);
                    cropped.add(croppedCoverage);
                } else {
                    cropped.add(coverage);
                }
            }
            coverages = cropped;
        }

        /////////////////////////////////////////////////////
        //
        // Check if Mosaiking and reprojection must be done,
        // if so we must add a ROIin order to avoid mosaiking issues
        //
        /////////////////////////////////////////////////////
        // TODO optimize by checking if reprojection adds rotational elements
        if (coverages.size() > 1 && reprojectionNeeded) {
            // See if we need to add a ROI to the current images
            for (int i = 0; i < coverages.size(); i++) {
                GridCoverage2D coverage = coverages.get(i);
                if (coverage == null) {
                    continue;
                }
                RenderedImage input = coverage.getRenderedImage();
                Object roiObject = input.getProperty("ROI");
                Object gcRoiObject = coverage.getProperty("GC_ROI");
                if (!(roiObject instanceof ROI) && !(gcRoiObject instanceof ROI)) {
                    Envelope env = new Envelope(input.getMinX(), input.getMinX() + input.getWidth(),
                            input.getMinY(), input.getMinY() + input.getHeight());
                    ROI roi = new ROI(new ROIGeometry(JTS.toGeometry(env)).getAsImage());
                    PlanarImage pi = PlanarImage.wrapRenderedImage(input);
                    pi.setProperty("ROI", roi);
                    Map properties = new HashMap(coverage.getProperties());
                    properties.put("GC_ROI", roi);
                    GridCoverage2D coverageWithRoi = gridCoverageFactory.create(coverage.getName(),
                            pi, coverage.getGridGeometry(), null, new GridCoverage2D[] { coverage },
                            properties);
                    coverages.set(i, coverageWithRoi);

                }
            }
        }

        // reproject if needed
        List<GridCoverage2D> reprojectedCoverages = new ArrayList<GridCoverage2D>();
        for (GridCoverage2D coverage : coverages) {
            if (coverage == null) {
                continue;
            }
            final CoordinateReferenceSystem coverageCRS = coverage.getCoordinateReferenceSystem();
            if (!CRS.equalsIgnoreMetadata(coverageCRS, destinationCRS)) {
                GridCoverage2D reprojected = reproject(coverage, true, bgValues);
                if (reprojected != null) {
                    reprojectedCoverages.add(reprojected);
                }
            } else {
                reprojectedCoverages.add(coverage);
            }
        }

        // displace them if needed via a projection handler
        List<GridCoverage2D> displacedCoverages = new ArrayList<GridCoverage2D>();
        if (handler != null) {
            Envelope testEnvelope = ReferencedEnvelope.reference(destinationEnvelope);
            MathTransform mt = CRS.findMathTransform(sourceCRS, targetCRS);
            PolygonExtractor polygonExtractor = new PolygonExtractor();
            for (GridCoverage2D coverage : reprojectedCoverages) {
                // Check on the alpha band
                Polygon polygon = JTS.toGeometry((BoundingBox) coverage.getEnvelope2D());
                Geometry postProcessed = handler.postProcess(mt, polygon);
                // extract sub-polygons and displace
                List<Polygon> polygons = polygonExtractor.getPolygons(postProcessed);
                for (Polygon displaced : polygons) {
                    // check we are really inside the display area before moving one
                    Envelope intersection = testEnvelope.intersection(displaced
                            .getEnvelopeInternal());
                    if (intersection == null || intersection.isNull()
                            || intersection.getArea() == 0) {
                        continue;
                    }
                    if (displaced.equals(polygon)) {
                        displacedCoverages.add(coverage);
                    } else {
                        double[] tx = getTranslationFactors(polygon, displaced);
                        if (tx != null) {
                            GridCoverage2D displacedCoverage = GridCoverageRendererUtilities
                                    .displace(coverage, tx[0], tx[1], gridCoverageFactory);
                            displacedCoverages.add(displacedCoverage);
                        }
                    }
                }
            }
        } else {
            displacedCoverages.addAll(reprojectedCoverages);
        }
        
        // after reprojection and displacement we could have some coverage
        // that are completely out of the destination area (due to numerical issues 
        // their source bbox was interesting the request area, but their reprojected version does not
        for (Iterator<GridCoverage2D> it = displacedCoverages.iterator(); it.hasNext();) {
            GridCoverage2D coverage = it.next();
            ReferencedEnvelope re = ReferencedEnvelope.reference(coverage.getEnvelope2D());
            MathTransform2D gridToWorld = coverage.getGridGeometry().getGridToCRS2D();
            if(gridToWorld instanceof AffineTransform2D) {
                double[] resolutions = CoverageUtilities.getResolution((AffineTransform2D) gridToWorld);
                if(resolutions != null) {
                    // make sure the coverage contributes at least one pixel... we could use / 2, but
                    // being a bit extra cautious
                    re.expandBy(-resolutions[0] / 2, -resolutions[1] / 2);
                }
            }
            if(!destinationEnvelope.intersects(re, false)) {
                it.remove();
            }
        }
        
        RasterSymbolizer finalSymbolizer = symbolizer;
        
        // Check if reader supports band selection, and rearrange raster channels order in
        // symbolizer. Reader should have taken care o proper channel order, based on initial
        // symbolizer channel definition
        if (isBandsSelectionApplicable(reader, symbolizer)){
            applyBandsSelectionParameter(reader, readParams, symbolizer);
            finalSymbolizer = setupSymbolizerForBandsSelection(symbolizer);
        }

        // symbolize each bit (done here to make sure we can perform the warp/affine reduction)
        List<GridCoverage2D> symbolizedCoverages = new ArrayList<>();
        int ii = 0;
        for (GridCoverage2D displaced : displacedCoverages) {
            GridCoverage2D symbolized = symbolize(displaced, finalSymbolizer,
                    bgValues);
            symbolizedCoverages.add(symbolized);
            ii++;
        }

        // Parameters used for taking into account an optional removal of the alpha band 
        // and an optional reindexing after color expansion

        // if more than one coverage, mosaic
        GridCoverage2D mosaicked = null;
        if (symbolizedCoverages.size() == 0) {
            return null;
        } else if (symbolizedCoverages.size() == 1) {
            mosaicked = symbolizedCoverages.get(0);
        } else {
            // do not expand index color models, we know they are all the same
            Hints mosaicHints = new Hints(this.hints);
            mosaicHints.put(JAI.KEY_REPLACE_INDEX_COLOR_MODEL, false);
            mosaicked = GridCoverageRendererUtilities.mosaic(symbolizedCoverages,
                    new ArrayList<GridCoverage2D>(),
                    destinationEnvelope, mosaicHints, bgValues);
        }

        // the mosaicking can cut off images that are just slightly out of the
        // request (effect of the read buffer + a request touching the actual data area)
        if (mosaicked == null) {
            return null;
        }

        // at this point, we might have a coverage that's still slightly larger
        // than the one requested, crop as needed
        GridCoverage2D cropped = crop(mosaicked, destinationEnvelope, false, bgValues);
        if (cropped == null) {
            return null;
        }
        
        return cropped.getRenderedImage();

    }

