    @Test
    public final void addSource() {
        // execute
        Assert.assertNotNull(testedObject2.getOutput());
        // do nothing since we have already executed
        Assert.assertNotNull(testedObject2.getOutput());

        // add source clean output but we also create a cycle which kills our
        // small framework
        testedObject2.addSource((testedObject));
        testedObject.addSink((testedObject2));
        try {
            testedObject2.addSink((testedObject));
            Assert.assertTrue(false);
        } catch (IllegalStateException e) {
            // TODO: handle exception
        }
        // recompute
        Assert.assertNotNull(testedObject2.getOutput());

        // dispose
        testedObject2.dispose(true);
    }

