		/**
		 * Testing DefaultPassthroughPiecewiseTransform1DElement .
		 * 
		 * @throws IOException
		 * @throws TransformException
		 * @throws TransformationException 
		 */
		@Test
		public void passthroughTransform() throws IOException,
				TransformException, TransformationException {
			////
			//
			//testing the passthrough through direct instantion
			//
			////
			final DefaultPassthroughPiecewiseTransform1DElement p0 = new DefaultPassthroughPiecewiseTransform1DElement(
					"p0", RangeFactory.create(0.0, true, 1.0, true));
			Assert.assertEquals(p0.getTargetDimensions(), 1);
			Assert.assertEquals(p0.getSourceDimensions(), 1);
			Assert.assertTrue(p0.isIdentity());
			Assert.assertEquals(p0.inverse(), SingleDimensionTransformation.IDENTITY);
			Assert.assertEquals(p0.transform(0.5), 0.5, 0.0);
			Assert.assertEquals(p0.transform(
					new Position( 0.5), null)
					.getOrdinatePosition(), 0.5, 0.0);
			Assert.assertEquals(p0.inverse().transform(
					new Position( 0.5 ), null)
					.getOrdinatePosition(), 0.5, 0.0);
			//Assert.assertEquals(p0.derivative(1.0), 1.0, 0.0);
			final Position inDP = new Position(0.6);
			final Position outDP= p0.transform(inDP, null);
			Assert.assertTrue(outDP.getOrdinatePosition()==0.6);
			
//			Matrix m= p0.derivative(inDP);
//			Assert.assertTrue(m.getNumCol()==1);
//			Assert.assertTrue(m.getNumRow()==1);
//			Assert.assertTrue(m.getElement(0, 0)==1);
			
			////
			//
			//testing the transform 
			//
			////
			final DefaultPiecewiseTransform1D<DefaultPiecewiseTransform1DElement> piecewise = 
			    new DefaultPiecewiseTransform1D<DefaultPiecewiseTransform1DElement>(new DefaultPiecewiseTransform1DElement[] { p0 },11);
		
			Assert.assertEquals(piecewise.getApproximateDomainRange().getMin().doubleValue(), 0.0, 0.0);
			Assert.assertEquals(piecewise.getApproximateDomainRange().getMax().doubleValue(), 1.0, 0.0);
			Assert.assertEquals(piecewise.transform(0.5), 0.5, 0.0);
			Assert.assertEquals(piecewise.transform(
					new Position(0.5), null)
					.getOrdinatePosition(), 0.5, 0.0);
			Assert.assertEquals(piecewise.transform(1.5), 0.0, 11.0);
			
			
			////
			//
			//testing the passthrough through indirect instantion
			//
			////
			final DefaultPassthroughPiecewiseTransform1DElement p1 = new DefaultPassthroughPiecewiseTransform1DElement(
					"p1");
			Assert.assertEquals(p1.getTargetDimensions(), 1);
			Assert.assertEquals(p1.getSourceDimensions(), 1);
			Assert.assertTrue(p1.isIdentity());
			Assert.assertEquals(p1.inverse(), SingleDimensionTransformation.IDENTITY);
			Assert.assertEquals(p1.transform(0.5), 0.5, 0.0);
			Assert.assertEquals(p1.transform(111.5), 111.5, 0.0);
			Assert.assertEquals(p1.transform(
					new Position( 123.5 ), null)
					.getOrdinatePosition(), 123.5, 0.0);
			Assert.assertEquals(p1.inverse().transform(
					new Position( 657.5 ), null)
					.getOrdinatePosition(), 657.5, 0.0);
			//Assert.assertEquals(p1.derivative(1.0), 1.0, 0.0);
			final Position inDP1 = new Position(0.6);
			final Position outDP1= p1.transform(inDP1, null);
			Assert.assertTrue(outDP1.getOrdinatePosition()==0.6);

//			Matrix m1= p1.derivative(inDP1);
//			Assert.assertTrue(m1.getNumCol()==1);
//			Assert.assertTrue(m1.getNumRow()==1);
//			Assert.assertTrue(m1.getElement(0, 0)==1);
		
		}

