    public void testHarvestSpatialTwoReaders() throws Exception {
        File source = TestData.file(GridCoverageReaderHelperTest.class, "red_footprint_test");
        File testDataDir = org.geotools.test.TestData.file(this, ".");
        File directory1 = new File(testDataDir, "redHarvest1");
        File directory2 = new File(testDataDir, "redHarvest2");
        if (directory1.exists()) {
            FileUtils.deleteDirectory(directory1);
        }
        if (directory2.exists()) {
            FileUtils.deleteDirectory(directory1);
        }
        FileUtils.copyDirectory(source, directory1);
        // move all files except red3 to the second dir
        directory2.mkdirs();
        for (File file : FileUtils.listFiles(directory1, new RegexFileFilter("red[^3].*"), null)) {
            assertTrue(file.renameTo(new File(directory2, file.getName())));
        }

        // crate the first reader
        URL harvestSingleURL = URLs.fileToUrl(directory1);
        ImageMosaicReader reader = new ImageMosaicReader(directory1, null);

        // now create a second reader that won't be informed of the harvesting changes
        // (simulating changes over a cluster, where the bbox information won't be updated from one
        // node to the other)
        ImageMosaicReader reader2 = new ImageMosaicReader(directory1, null);

        try {
            // harvest the other files with the first reader
            for (File file : directory2.listFiles()) {
                assertTrue(file.renameTo(new File(directory1, file.getName())));
            }
            reader.harvest(null, directory1, null);

            // now render an image directly
            ReferencedEnvelope readEnvelope =
                    new ReferencedEnvelope(
                            991000, 992000, 216000, 217000, reader2.getCoordinateReferenceSystem());
            Rectangle rasterArea = new Rectangle(0, 0, 10, 10);
            GridToEnvelopeMapper mapper =
                    new GridToEnvelopeMapper(new GridEnvelope2D(rasterArea), readEnvelope);
            AffineTransform affineTransform = mapper.createAffineTransform();
            GridCoverageRenderer renderer =
                    new GridCoverageRenderer(
                            reader2.getCoordinateReferenceSystem(),
                            readEnvelope,
                            rasterArea,
                            affineTransform);
            StyleBuilder sb = new StyleBuilder();
            RasterSymbolizer symbolizer = sb.createRasterSymbolizer();
            RenderedImage image =
                    renderer.renderImage(
                            reader2,
                            null,
                            symbolizer,
                            Interpolation.getInstance(Interpolation.INTERP_NEAREST),
                            Color.BLACK,
                            256,
                            256);

            File reference =
                    new File(
                            "src/test/resources/org/geotools/renderer/lite/gridcoverage2d/red.png");
            ImageAssert.assertEquals(reference, image, 0);

            // and render it also as streaming renderer
            MapContent mc = new MapContent();
            mc.addLayer(new GridReaderLayer(reader2, sb.createStyle(symbolizer)));
            StreamingRenderer sr = new StreamingRenderer();
            sr.setMapContent(mc);
            BufferedImage bi =
                    new BufferedImage(
                            rasterArea.width, rasterArea.height, BufferedImage.TYPE_3BYTE_BGR);
            Graphics2D graphics = bi.createGraphics();
            sr.paint(graphics, rasterArea, readEnvelope);
            graphics.dispose();

            ImageAssert.assertEquals(reference, bi, 0);
        } finally {
            reader.dispose();
            reader2.dispose();
        }
    }

