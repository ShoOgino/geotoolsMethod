    @Test
    public void testDelegate_AllMethods() {
        try {
            Shape shape = createMock(Shape.class);

            reset(shape);

            expect(shape.contains((Point2D) null)).andReturn(false);
            expect(shape.contains((Rectangle2D) null)).andReturn(false);
            expect(shape.contains(0.0, 0.0)).andReturn(false);
            expect(shape.contains(0.0, 0.0, 0.0, 0.0)).andReturn(false);
            expect(shape.getBounds()).andReturn(null);
            expect(shape.getBounds2D()).andReturn(null);
            expect(shape.getPathIterator(null)).andReturn(null);
            expect(shape.getPathIterator(null, 0.0)).andReturn(null);
            expect(shape.intersects(null)).andReturn(false);
            expect(shape.intersects(0.0, 0.0, 0.0, 0.0)).andReturn(false);

            replay(shape);

            ExplicitBoundsShape target = new ExplicitBoundsShape(shape);

            Assert.assertFalse(target.contains((Point2D) null));
            Assert.assertFalse(target.contains((Rectangle2D) null));
            Assert.assertFalse(target.contains(0.0, 0.0));
            Assert.assertFalse(target.contains(0.0, 0.0, 0.0, 0.0));
            Assert.assertNull(target.getBounds());
            Assert.assertNull(target.getBounds2D());
            Assert.assertNull(target.getPathIterator(null));
            Assert.assertNull(target.getPathIterator(null, 0.0));
            Assert.assertFalse(target.intersects(null));
            Assert.assertFalse(target.intersects(0.0, 0.0, 0.0, 0.0));

            verify(shape);
        } catch (Throwable e) {
            java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e);
            Assert.fail("Should not throw " + e.getClass().getSimpleName());
        }
    }

