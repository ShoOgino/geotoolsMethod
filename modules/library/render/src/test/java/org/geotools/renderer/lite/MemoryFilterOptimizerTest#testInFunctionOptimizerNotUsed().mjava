    @Test
    public void testInFunctionOptimizerNotUsed() throws Exception {
        String name = "name";
        PropertyName property = ff.property(name);
        PropertyName property2 = ff.property("other");
        SimpleFeatureType subtype1 = SimpleFeatureTypeBuilder.retype(roadType, new String[] {name});
        Filter nameR1 = ff.equal(property, ff.literal("r1"), true);
        Filter nameR2 = ff.equal(property2, ff.literal("r2"), true);
        Filter nameR3 = ff.equal(property, ff.literal("r3"), true);
        List<Filter> filters = Arrays.asList(nameR1, nameR2, nameR3);
        Or or = ff.or(filters);
        MemoryFilterOptimizer optimizer =
                new MemoryFilterOptimizer(subtype1, Collections.singleton(name));
        Object object = or.accept(optimizer, null);
        assertTrue(object instanceof Or);
    }

