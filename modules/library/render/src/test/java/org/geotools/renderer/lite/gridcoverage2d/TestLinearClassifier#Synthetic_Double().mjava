	/**
	 * Synthetic with Double Sample Model!
	 * 
	 * @throws IOException
	 */
	@Test
	public void Synthetic_Double() throws IOException {

		// /////////////////////////////////////////////////////////////////////
		//
		// This test is interesting since it can be used to force the
		// creation of a sample model that uses a USHORT datatype since the
		// number of requested colors is pretty high. We are also using some
		// synthetic data where there is no NoData.
		//
		// /////////////////////////////////////////////////////////////////////

		// /////////////////////////////////////////////////////////////////////
		//
		// Set the pixel values. Because we use only one tile with one band,
		// the
		// code below is pretty similar to the code we would have if we were
		// just setting the values in a matrix.
		//
		// /////////////////////////////////////////////////////////////////////
		final BufferedImage image = getSynthetic_Double();
		for (int i = 0; i < TEST_NUM; i++) {
			// /////////////////////////////////////////////////////////////////////
			//
			// Build the categories
			//
			// /////////////////////////////////////////////////////////////////////
			final LinearColorMapElement c0 = LinearColorMapElement
					.create("c0", Color.BLACK, RangeFactory.create(
							Double.NEGATIVE_INFINITY, false, 10, true), 0);

			final LinearColorMapElement c1 = LinearColorMapElement
					.create("c2", Color.blue, RangeFactory.create(10.0, false,
							100.0, true), 1);

			final LinearColorMapElement c3 = LinearColorMapElement
					.create("c3", Color.green, RangeFactory.create(100.0, false,
							300.0, true), 2);

			final LinearColorMapElement c4 = LinearColorMapElement
					.create("c4", new Color[] { Color.green, Color.red },
							RangeFactory.create(300.0, false, 400, true),
							RangeFactory.create(3, 1000));

			final LinearColorMapElement c5 = LinearColorMapElement
					.create("c5", new Color[] { Color.red, Color.white },
							RangeFactory.create(400.0, false, 1000, true),
							RangeFactory.create(1001, 2000));

			final LinearColorMapElement c6 = LinearColorMapElement
					.create("c6", Color.red, 1001.0, 2001);

			final LinearColorMapElement c7 = LinearColorMapElement
					.create("nodata", new Color(0, 0, 0, 0), RangeFactory.create(
							Double.NaN, Double.NaN), 2201);

			final LinearColorMap list = new LinearColorMap("",
					new LinearColorMapElement[] { c0, c1, c3, c4, c5, c6 },
					new LinearColorMapElement[] { c7 });

			ImageWorker w = new ImageWorker(image);
			//final ParameterBlockJAI pbj = new ParameterBlockJAI(
					//RasterClassifierOpImage.OPERATION_NAME);
			//pbj.addSource(image);
			//pbj.setParameter("Domain1D", list);
			final RenderedOp finalimage = w.classify(list, null).getRenderedOperation();
			        //JAI.create(
			        //RasterClassifierOpImage.OPERATION_NAME, pbj);

			if (TestData.isInteractiveTest())
			    ImageIOUtilities.visualize(finalimage, "synthetic");
			else
				finalimage.getTiles();
			finalimage.dispose();
		}

	}

