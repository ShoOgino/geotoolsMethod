    /**
     * Test number 12 broken out of the ContrastEnhancementMethods test above
     * to facilitate debugging.
     */
	@Test
    public void test12() throws URISyntaxException, FileNotFoundException {
        GridCoverage2D gc;
        SubchainStyleVisitorCoverageProcessingAdapter rsh_StyleBuilder;
        StyleBuilder sldBuilder;
        GridCoverage2D output;
        ImageWorker worker;
        double[] min;
        double[] max;
        double minClampValue;
        double maxClampValue;
        // ////////////////////////////////////////////////////////////////////
        //
        // Test #12: [StyleBuilder]
        //    - Opacity: 1.0
        //    - ChannelSelection: Gray {Contrast Enh: Normalize-ClipZeroMax}
        //
        // ////////////////////////////////////////////////////////////////////
        gc = CoverageFactoryFinder.getGridCoverageFactory(null)
        .create(
                        "name",
                        JAI.create("ImageRead", new File(TestData.url(this, "test_ushort.tif").toURI())),
                        new GeneralEnvelope(new double[] { -90, -180 },
                                        new double[] { 90, 180 }),new GridSampleDimension[]{new GridSampleDimension("test1BandByte_SLD")},null,null);
        // build the RasterSymbolizer
        sldBuilder = new StyleBuilder();
        // the RasterSymbolizer Helper
        rsh_StyleBuilder = new RasterSymbolizerHelper(gc, null);

        final RasterSymbolizer rsb_7 = sldBuilder.createRasterSymbolizer();
        final ChannelSelection chSel_7 = new ChannelSelectionImpl();
        final SelectedChannelType chTypeGray_7 = new SelectedChannelTypeImpl();
        final ContrastEnhancement cntEnh_7 = new ContrastEnhancementImpl();
        final AbstractContrastMethodStrategy method_7 = new NormalizeContrastMethodStrategy();

        minClampValue = 50;
        maxClampValue = 100;
        method_7.setAlgorithm(sldBuilder.literalExpression(ContrastEnhancementType.NORMALIZE_CLIP_TO_ZERO_NAME));
        method_7.addParameter("minValue", sldBuilder.literalExpression(minClampValue));
        method_7.addParameter("maxValue", sldBuilder.literalExpression(maxClampValue));
        cntEnh_7.setMethod(method_7);

        chTypeGray_7.setChannelName("1");
        chTypeGray_7.setContrastEnhancement(cntEnh_7);
        chSel_7.setGrayChannel(chTypeGray_7);
        rsb_7.setChannelSelection(chSel_7);
        rsb_7.setOpacity(sldBuilder.literalExpression(1.0));
        rsb_7.setContrastEnhancement(cntEnh_7);
        // visit the RasterSymbolizer
        rsh_StyleBuilder.visit(rsb_7);
        output = (GridCoverage2D)rsh_StyleBuilder.getOutput();
        worker = new ImageWorker(output.getRenderedImage());
        min = worker.getMinimums();
        max = worker.getMaximums();

        // Clip to Minimum Maximum does a Clamp by forcing
        // values outside the specified range to be clamped
        // to the range bounds
        assertEquals(0,  min[0], DELTA);
        assertEquals(255,  max[0], DELTA);
        testRasterSymbolizerHelper(rsh_StyleBuilder);
    }

