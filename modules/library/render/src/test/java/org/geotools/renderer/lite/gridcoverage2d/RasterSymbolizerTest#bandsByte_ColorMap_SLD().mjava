	@org.junit.Test
	public void bandsByte_ColorMap_SLD() throws IOException, TransformerException, FactoryRegistryException, IllegalArgumentException, URISyntaxException {
		// the GridCoverage
	    GeneralEnvelope envelope = new GeneralEnvelope(new double[] { -180,-90 },new double[] { 180,90 });
            envelope.setCoordinateReferenceSystem(DefaultGeographicCRS.WGS84);  	    
		final GridSampleDimension[] gsd={
				new GridSampleDimension("test1BandByte_SLD1"),
				new GridSampleDimension("test1BandByte_SLD2"),
				new GridSampleDimension("test1BandByte_SLD3")
		};
		GridCoverage2D gc = CoverageFactoryFinder.getGridCoverageFactory(null)
				.create(
						"name",
						JAI.create("ImageRead", new File(TestData.url(this, "small_3bands_Byte.tif").toURI())),
						envelope,gsd,null,null);

		// ////////////////////////////////////////////////////////////////////
		//
		// Test #1: [SLD]
		//    - Opacity: 1.0
		//    - ChannelSelection: RGB
		//    - Contrast Enh: Histogram
		//
		// ////////////////////////////////////////////////////////////////////
		java.net.URL surl = TestData.url(this, "3bands_Byte_test2.sld");
		SLDParser stylereader = new SLDParser(sf, surl);
		StyledLayerDescriptor sld = stylereader.parseSLD();
		// the RasterSymbolizer Helper
		SubchainStyleVisitorCoverageProcessingAdapter rsh = new RasterSymbolizerHelper(gc, null);

		// build the RasterSymbolizer
		final RasterSymbolizer rs_1 = extractRasterSymbolizer(sld);

		// visit the RasterSymbolizer
		rsh.visit(rs_1);
		
		testRasterSymbolizerHelper(rsh);
		


		// ////////////////////////////////////////////////////////////////////
		//
		// Test #2: [StyleBuilder]
		//    - Opacity: 1.0
		//    - ChannelSelection: RGB
		//	  - Contrast Enh: Histogram
		//
		// ////////////////////////////////////////////////////////////////////
		// the GridCoverage
		gc = CoverageFactoryFinder.getGridCoverageFactory(null)
				.create(
						"name",
						JAI.create("ImageRead", new File(TestData.url(this, "small_3bands_Byte.tif").toURI())),
						new GeneralEnvelope(new double[] { -90, -180 },
								new double[] { 90, 180 }));
		
		// the RasterSymbolizer Helper
		rsh = new RasterSymbolizerHelper(gc, null);
		// build the RasterSymbolizer
		StyleBuilder sldBuilder = new StyleBuilder();
		// the RasterSymbolizer Helper
		rsh = new RasterSymbolizerHelper(gc, null);

		final RasterSymbolizer rsb_1 = sldBuilder.createRasterSymbolizer();
		final ChannelSelection chSel = new ChannelSelectionImpl();
		final SelectedChannelType chTypeGray  	= new SelectedChannelTypeImpl();
		final ContrastEnhancement cntEnh = new ContrastEnhancementImpl();

		cntEnh.setMethod(ContrastMethod.HISTOGRAM);;
		//cntEnh.setGammaValue(sldBuilder.literalExpression(0.50));
		
		chTypeGray.setChannelName("1");		
		chSel.setGrayChannel(chTypeGray);

		rsb_1.setChannelSelection(chSel);
		rsb_1.setOpacity(sldBuilder.literalExpression(1.0));
		rsb_1.setContrastEnhancement(cntEnh);
		rsb_1.setOverlap(sldBuilder.literalExpression("AVERAGE"));

		final ColorMap cm = sldBuilder.createColorMap(
				new String[] { // labels
					"category",
					"category",
					"category"
				},
				new double[] { // quantities
					0.1,
					50.0,
					200.0
				},
				new Color[] { // colors with alpha
					new Color(255,0,0,255),
					new Color(0,255,0,40),
					new Color(0,0,255,125)
				},
				ColorMap.TYPE_RAMP);
		
		rsb_1.setColorMap(cm);
		
		// visit the RasterSymbolizer
		rsh.visit(rsb_1);
		
		testRasterSymbolizerHelper(rsh);

	}

