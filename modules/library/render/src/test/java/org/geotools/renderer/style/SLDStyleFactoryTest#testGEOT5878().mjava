    /**
     * A very large symbol can cause an Integer overflow in the renderer. The SLDFactory should give
     * a warning instead and try again with out meta tiling.
     */
    @Test
    public void testGEOT5878() {
        String[] wkt = {
            "Polygon ((6438348.98000000044703484 4962869.70000000018626451, 6438348.88999999966472387 4962867.28000000026077032, 6438343.53000000026077032 4962867.28000000026077032, 6438343.53000000026077032 4962869.76999999955296516, 6438343.61000000033527613 4962870.17999999970197678, 6438348.90000000037252903 4962870.0400000000372529, 6438348.98000000044703484 4962869.70000000018626451))",
            "Polygon ((6438339.7099999999627471 4962870.38999999966472387, 6438339.94000000040978193 4962873.86000000033527613, 6438346.65000000037252903 4962873.61000000033527613, 6438346.62999999988824129 4962870.38999999966472387, 6438339.7099999999627471 4962870.38999999966472387))"
        };
        double naglib = 1.5707964;
        // build two features
        SimpleFeatureTypeBuilder ftb = new SimpleFeatureTypeBuilder();
        ftb.setName("test");
        CoordinateReferenceSystem crs = null;
        try {
            crs = CRS.decode("EPSG:31276");
        } catch (FactoryException e1) {
            Assert.fail(e1.getMessage());
        }
        ftb.add("the_geom", Polygon.class, crs);
        ftb.add("Nagib", Double.class);
        SimpleFeatureType schema = ftb.buildFeatureType();
        WKTReader reader = new WKTReader();
        SimpleFeatureBuilder fb = new SimpleFeatureBuilder(schema);
        List<SimpleFeature> features = new ArrayList<>();
        for (String w : wkt) {
            Geometry geom = null;
            try {
                geom = reader.read(w);
            } catch (ParseException e) {
                Assert.fail(e.getMessage());
            }
            fb.set("the_geom", geom);
            fb.set("Nagib", naglib);
            features.add(fb.buildFeature(null));
        }
        StyleBuilder sb = new StyleBuilder();
        Mark mark =
                sb.createMark(
                        "wkt://LINESTRING(0 0, ${sin(Nagib) * 20000} ${cos(Nagib) * 20000} )",
                        Color.red);
        Graphic graphic = sb.createGraphic(null, mark, null);
        graphic.setSize(ff.literal("40px"));
        Fill fill = sf.createFill(null, null, null, graphic);
        PolygonSymbolizer symb = sb.createPolygonSymbolizer();
        symb.setFill(fill);

        Style style = sb.createStyle();
        style.featureTypeStyles().add(sb.createFeatureTypeStyle(symb));
        Layer layer = new FeatureLayer(DataUtilities.collection(features), style);
        MapContent content = new MapContent();
        content.addLayer(layer);
        StreamingRenderer renderer = new StreamingRenderer();
        renderer.addRenderListener(
                new RenderListener() {

                    @Override
                    public void featureRenderer(SimpleFeature feature) {
                        // TODO Auto-generated method stub

                    }

                    @Override
                    public void errorOccurred(Exception e) {
                        Assert.fail("an error occured");
                    }
                });
        renderer.setMapContent(content);
        BufferedImage img = new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB);
        Rectangle paintArea = new Rectangle(0, 0, 100, 100);

        renderer.paint(
                img.createGraphics(),
                paintArea,
                layer.getBounds(),
                RendererUtilities.worldToScreenTransform(layer.getBounds(), paintArea));
    }

