    /** SWAN test-case. */
    @Test
    public void SWANLOGARITHMIC() throws IOException {
        // /////////////////////////////////////////////////////////////////////
        //
        //
        // /////////////////////////////////////////////////////////////////////
        final RenderedImage image = getSWAN();
        if (TestData.isInteractiveTest()) ImageIOUtilities.visualize(image, "testSWANLOGARITHMIC");
        ImageWorker w =
                new ImageWorker(image)
                        .setROI(new ROI(new ImageWorker(image).binarize(0).getRenderedImage()));
        // final RenderedOp statistics = ExtremaDescriptor.create(image, new ROI(new
        // ImageWorker(image).binarize(0).getRenderedImage()),
        // Integer.valueOf(1), Integer.valueOf(1), Boolean.FALSE, Integer.valueOf(1),
        // null);
        // final double[] minimum=(double[]) statistics.getProperty("minimum");
        // final double[] maximum=(double[]) statistics.getProperty("maximum");
        final double[] minimum = w.getMinimums();
        final double[] maximum = w.getMaximums();

        final DefaultPiecewiseTransform1DElement mainElement =
                new DefaultPiecewiseTransform1DElement(
                        "natural logarithm",
                        RangeFactory.create(minimum[0], maximum[0]),
                        new MathTransformationAdapter() {

                            @Override
                            public double derivative(double arg0) throws TransformException {

                                return 1 / arg0;
                            }

                            @Override
                            public double transform(double arg0) {

                                return minimum[0]
                                        + 1.2
                                                * Math.log(arg0 / minimum[0])
                                                * ((maximum[0] - minimum[0])
                                                        / (Math.log(maximum[0] / minimum[0])));
                            }

                            @Override
                            public boolean isIdentity() {
                                return false;
                            }
                        });
        DefaultPiecewiseTransform1D<DefaultPiecewiseTransform1DElement> transform =
                new DefaultPiecewiseTransform1D<>(
                        new DefaultPiecewiseTransform1DElement[] {mainElement}, 0);

        // final ParameterBlockJAI pbj = new ParameterBlockJAI(
        // GenericPiecewiseOpImage.OPERATION_NAME);
        // pbj.addSource(image);
        // pbj.setParameter("Domain1D", transform);
        boolean exceptionThrown = false;
        try {
            // //
            // forcing a bad band selection ...
            // //
            // pbj.setParameter("bandIndex", Integer.valueOf(2));
            // final RenderedOp d = JAI.create(
            // GenericPiecewiseOpImage.OPERATION_NAME, pbj);
            final RenderedOp d = w.piecewise(transform, Integer.valueOf(2)).getRenderedOperation();
            d.getTiles();
            // we should not be here!
        } catch (Exception e) {
            // //
            // ... ok, Exception wanted!
            // //
            exceptionThrown = true;
        }
        Assert.assertTrue(exceptionThrown);

        // pbj.setParameter("bandIndex", Integer.valueOf(0));
        // final RenderedOp finalImage = JAI.create(
        // GenericPiecewiseOpImage.OPERATION_NAME, pbj);
        final RenderedOp finalImage =
                w.piecewise(transform, Integer.valueOf(0)).getRenderedOperation();
        if (TestData.isInteractiveTest())
            ImageIOUtilities.visualize(finalImage, "testSWANLOGARITHMIC");
        else finalImage.getTiles();
        finalImage.dispose();
    }

