	/**
	 * Testing {@link DefaultConstantPiecewiseTransformElement}.
	 * 
	 * @throws IOException
	 * @throws TransformException
	 */
	@Test
	public void constantTransform() throws IOException, TransformException {

		// /////////////////////////////////////////////////////////////////////
		//
		// byte
		//
		// /////////////////////////////////////////////////////////////////////
		DefaultPiecewiseTransform1DElement e0 = 
		    DefaultPiecewiseTransform1DElement.create(
		            "zero", 
		            NumberRange.create(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY),
		            ((byte) 0));
		Assert.assertTrue(e0 instanceof DefaultConstantPiecewiseTransformElement);
		// checks
		Assert.assertEquals(0.0, e0.transform(0),0.0);
		Assert.assertEquals(e0.transform(Double.POSITIVE_INFINITY),0.0,0.0);
		try{
			e0.inverse();
			Assert.assertTrue(false);
		}catch (Exception e) {
			
		}
		
		
		DefaultPiecewiseTransform1D<DefaultPiecewiseTransform1DElement> transform = 
		    new DefaultPiecewiseTransform1D<DefaultPiecewiseTransform1DElement>(new DefaultPiecewiseTransform1DElement[] {e0});
		// checks
		Assert.assertEquals(0.0, transform.transform(0),0);
		Assert.assertEquals( transform.transform(Double.POSITIVE_INFINITY),0.0,0.0);
		try{
			transform.inverse();
			Assert.assertTrue(false);
		}catch (Exception e) {
			// TODO: handle exception
		}

		// /////////////////////////////////////////////////////////////////////
		//
		// int
		//
		// /////////////////////////////////////////////////////////////////////
		e0 = DefaultPiecewiseTransform1DElement.create(
		        "zero", 
		        NumberRange.create(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY),
		        0);
		Assert.assertTrue(e0 instanceof DefaultConstantPiecewiseTransformElement);
		// checks
		Assert.assertEquals(0.0, e0.transform(0),0.0);
		Assert.assertEquals(e0.transform(Double.POSITIVE_INFINITY),0.0,0.0);
		try{
			e0.inverse();
			Assert.assertTrue(false);
		}catch (Exception e) {
			// TODO: handle exception
		}
		
		
		DefaultPiecewiseTransform1D<DefaultPiecewiseTransform1DElement> transform1 = new DefaultPiecewiseTransform1D<DefaultPiecewiseTransform1DElement>(new DefaultPiecewiseTransform1DElement[] {e0});

		// checks
		Assert.assertEquals(0.0, transform1.transform(0),0);
		Assert.assertEquals( transform1.transform(Double.POSITIVE_INFINITY),0.0,0.0);
		try{
			transform1.inverse();
			Assert.assertTrue(false);
		}catch (Exception e) {
			// TODO: handle exception
		}
		
		//hashcode and equals
		Assert.assertFalse(transform.equals(transform1));
		Assert.assertFalse(transform1.equals(transform));
		Assert.assertFalse(transform.equals(transform));
		Assert.assertFalse(transform1.equals(transform1));
		Assert.assertEquals(transform1.hashCode(), transform.hashCode());
		
		// /////////////////////////////////////////////////////////////////////
		//
		// double
		//
		// /////////////////////////////////////////////////////////////////////
		e0 = DefaultPiecewiseTransform1DElement.create(
		        "zero", 
		        NumberRange.create(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY), 
		        0.0);
		Assert.assertTrue(e0 instanceof DefaultConstantPiecewiseTransformElement);
		// checks
		Assert.assertEquals(0.0, e0.transform(0),0.0);
		Assert.assertEquals(e0.transform(Double.POSITIVE_INFINITY),0.0,0.0);
		try{
			e0.inverse();
			Assert.assertTrue(false);
		}catch (Exception e) {
			// TODO: handle exception
		}
		
		
		transform = new DefaultPiecewiseTransform1D<DefaultPiecewiseTransform1DElement>(new DefaultPiecewiseTransform1DElement[] {e0});

		// checks
		Assert.assertEquals(0.0, transform.transform(0),0);
		Assert.assertEquals( transform.transform(Double.POSITIVE_INFINITY),0.0,0.0);
		try{
			transform.inverse();
			Assert.assertTrue(false);
		}catch (Exception e) {
			// TODO: handle exception
		}
		
		
		// /////////////////////////////////////////////////////////////////////
		//
		// invertible
		//
		// /////////////////////////////////////////////////////////////////////
		e0 = DefaultPiecewiseTransform1DElement
				.create("zero", NumberRange.create(3, 3), 0.0);
		Assert.assertTrue(e0 instanceof DefaultConstantPiecewiseTransformElement);
		// checks
		Assert.assertEquals(0.0, e0.transform(3),0.0);
		Assert.assertEquals(3, e0.inverse().transform(new DirectPosition1D(0),null).getOrdinate(0),0);
		
		
		transform = new DefaultPiecewiseTransform1D<DefaultPiecewiseTransform1DElement>(new DefaultPiecewiseTransform1DElement[] {e0});

		// checks
		Assert.assertEquals(0.0, e0.transform(3),0);
		Assert.assertEquals( transform.transform(3),0.0,0.0);



		
	}

