    /**
     * Computes the overlap between labels and obstacles, returning the extrema of 
     * the binary overlap
     * @param labels
     * @param obstacles
     * @return
     */
    RenderedImage intersectionExtrema(BufferedImage labels, BufferedImage obstacles) {
        // from 4 bands to 1 band averaging the pixel values
        RenderedImage labelsCombine = BandCombineDescriptor.create(labels, new double[][] { {
                1 / 3.0, 1 / 3.0, 1 / 3.0, 0, 0 } }, null);
        RenderedImage pointsCombine = BandCombineDescriptor.create(obstacles, new double[][] { {
                1 / 3.0, 1 / 3.0, 1 / 3.0, 0, 0 } }, null);
        // get only pitch black
        RenderedImage binaryLabel = BinarizeDescriptor.create(labelsCombine, 1.0, null);
        // get anything that is not fully white
        RenderedImage binaryObstacles = BinarizeDescriptor.create(pointsCombine, 250.0, null);
        // combine the two, only pixels that are both black in both images will be black (0)
        RenderedImage and = OrDescriptor.create(binaryObstacles, binaryLabel, null);
        // get the extrema
        RenderedImage extrema = ExtremaDescriptor.create(and, null, 1, 1, false, 1, null);
        return extrema;
    }

