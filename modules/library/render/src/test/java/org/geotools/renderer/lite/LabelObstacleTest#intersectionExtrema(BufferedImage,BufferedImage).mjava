    /**
     * Computes the overlap between labels and obstacles, returning the extrema of the binary
     * overlap
     *
     * @param labels
     * @param obstacles
     * @return
     */
    ImageWorker intersectionExtrema(BufferedImage labels, BufferedImage obstacles) {
        // from 4 bands to 1 band averaging the pixel values
        ImageWorker w = new ImageWorker(labels);
        ImageWorker w1 = new ImageWorker(obstacles);
        // RenderedImage labelsCombine = w.bandCombine(new double[][] { {
        // 1 / 3.0, 1 / 3.0, 1 / 3.0, 0, 0 } }).getRenderedImage();
        w.bandCombine(new double[][] {{1 / 3.0, 1 / 3.0, 1 / 3.0, 0, 0}});
        w1.bandCombine(new double[][] {{1 / 3.0, 1 / 3.0, 1 / 3.0, 0, 0}});
        // RenderedImage pointsCombine = w1.bandCombine(new double[][] { {
        //    1 / 3.0, 1 / 3.0, 1 / 3.0, 0, 0 } }).getRenderedImage();
        // RenderedImage labelsCombine = BandCombineDescriptor.create(labels, new double[][] { {
        // 1 / 3.0, 1 / 3.0, 1 / 3.0, 0, 0 } }, null);
        // RenderedImage pointsCombine = BandCombineDescriptor.create(obstacles, new double[][] { {
        // 1 / 3.0, 1 / 3.0, 1 / 3.0, 0, 0 } }, null);
        // get only pitch black
        w.binarize(1).getRenderedImage();
        // RenderedImage binaryLabel =
        // w.binarize(1).getRenderedImage();//BinarizeDescriptor.create(labelsCombine, 1.0, null);
        // get anything that is not fully white
        RenderedImage binaryObstacles =
                w1.binarize(250)
                        .getRenderedImage(); // BinarizeDescriptor.create(pointsCombine, 250.0,
        // null);

        // combine the two, only pixels that are both black in both images will be black (0)
        w.or(binaryObstacles);
        // RenderedImage or =
        // w.or(binaryObstacles).getRenderedImage();//OrDescriptor.create(binaryObstacles,
        // binaryLabel, null);
        // get the extrema
        // RenderedImage extrema = ExtremaDescriptor.create(or, null, 1, 1, false, 1, null);
        w.getMinimums();
        return w;
    }

