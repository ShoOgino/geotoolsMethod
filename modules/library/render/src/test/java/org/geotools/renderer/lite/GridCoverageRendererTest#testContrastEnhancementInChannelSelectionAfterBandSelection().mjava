    @Test
    public void testContrastEnhancementInChannelSelectionAfterBandSelection() throws Exception {
        ReferencedEnvelope mapExtent = new ReferencedEnvelope(0, 90, 0, 90, DefaultGeographicCRS.WGS84);

        GridCoverage2DReader reader = new TestMultiBandReader(0,2,4);

        GridCoverageRenderer renderer = new GridCoverageRenderer(DefaultGeographicCRS.WGS84, mapExtent,
                new Rectangle(0, 0, 255, 255), null);

        StyleBuilder sldBuilder = new StyleBuilder();

        RasterSymbolizer symbolizer = sldBuilder.createRasterSymbolizer();
        final ChannelSelection chSel = new ChannelSelectionImpl();
        final SelectedChannelType chTypeRed = new SelectedChannelTypeImpl();
        final SelectedChannelType chTypeBlue = new SelectedChannelTypeImpl();
        final SelectedChannelType chTypeGreen = new SelectedChannelTypeImpl();

        SelectedChannelType[] channels = new SelectedChannelType[] { chTypeRed, chTypeGreen,
                chTypeBlue };

        // Assign a different contrast method for each channel
        // by offsetting min and max of 20 on each channel
        // and assigning channels number with increments of 2
        int min = 10;
        int max = 100;
        for (int i = 0; i < 3; i++) {
            final ContrastEnhancement cntEnh = new ContrastEnhancementImpl();
            final ContrastMethodStrategy method = new NormalizeContrastMethodStrategy();
            method.addOption("algorithm", sldBuilder
                    .literalExpression(ContrastEnhancementType.NORMALIZE_CLIP_TO_ZERO_NAME));
            method.addOption("minValue", sldBuilder.literalExpression(min + (20 * i)));
            method.addOption("maxValue", sldBuilder.literalExpression(max + (20 * i)));
            cntEnh.setMethod(method);
            channels[i].setChannelName(Integer.toString((i * 2) + 1));
            channels[i].setContrastEnhancement(cntEnh);
        }
        chSel.setRGBChannels(chTypeRed, chTypeGreen, chTypeBlue);

        symbolizer.setChannelSelection(chSel);
        symbolizer.setOpacity(sldBuilder.literalExpression(1.0));

        RenderedImage image = renderer.renderImage(reader, null, symbolizer, Interpolation.getInstance(Interpolation.INTERP_NEAREST), Color.BLACK, 256, 256);
        assertEquals(3, image.getSampleModel().getNumBands());

        // Make sure clip occurred even with optimized band selection
        ImageWorker worker = new ImageWorker(image);
        
        double[] maximums = worker.getMaximums();
        assertEquals(max, maximums[0], 0d);
        assertEquals(max + 20, maximums[1], 0d);
        assertEquals(max + 40, maximums[2], 0d);
        ImageUtilities.disposeImage(image);
        
    }

