    /**
     * Test to check the case where a {@link org.geotools.coverage.grid.io.AbstractGridFormat#BANDS} reading parameter is passed to a coverage reader
     * that does not support it.Reader should ignore it, resulting coverage should not be affected.
     */
    @Test
    public void testBandSelectionOnNonSupportingReader() throws Exception {
        // Create a solid color coverage
        BufferedImage bi = new BufferedImage(100, 100, BufferedImage.TYPE_INT_RGB);
        Graphics2D graphics = bi.createGraphics();
        graphics.setColor(Color.BLUE);
        graphics.fillRect(0, 0, bi.getWidth(), bi.getHeight());
        graphics.dispose();

        CoordinateReferenceSystem nativeCrs = CRS.decode("EPSG:4326", true);
        ReferencedEnvelope mapExtent = new ReferencedEnvelope(0, 90, 0, 90, nativeCrs);
        GridCoverage2D coverage = CoverageFactoryFinder.getGridCoverageFactory(null).create("test",
                bi, new ReferencedEnvelope(0, 90, 0, 90, nativeCrs));

        assertEquals(coverage.getNumSampleDimensions(), 3);

        // Write out as a geotiff
        File coverageFile = new File("./target/blue.tiff");
        GeoTiffWriter writer = new GeoTiffWriter(coverageFile);
        final GeoTiffFormat format = new GeoTiffFormat();
        final GeoTiffWriteParams wp = new GeoTiffWriteParams();

        // setting compression to LZW
        wp.setCompressionMode(GeoTiffWriteParams.MODE_EXPLICIT);
        wp.setCompressionType("LZW");
        wp.setCompressionQuality(0.75F);

        final ParameterValueGroup params = format.getWriteParameters();
        List<GeneralParameterValue> paramsValues = params.values();
        writer.write(coverage,
                params.values().toArray(new GeneralParameterValue[paramsValues.size()]));

        // Get the reader, read with band selection
        assertTrue(coverageFile.exists());
        GridCoverage2DReader reader = new GeoTiffReader(coverageFile);
        ParameterValue<int[]> bandSelectionParam = AbstractGridFormat.BANDS.createValue();
        // Try to produce a coverage containing bands in reverse order, so, resulting image
        // should be red instead of blue, and different from the original one
        bandSelectionParam.setValue(new int[] { 3, 2, 1 });
        GridCoverage nCoverage = reader.read(new GeneralParameterValue[] { bandSelectionParam });

        StyleBuilder sb = new StyleBuilder();
        RasterSymbolizer symbolizer = sb.createRasterSymbolizer();

        // Render the image
        GridCoverageRenderer renderer = new GridCoverageRenderer(nativeCrs, mapExtent,
                new Rectangle(0, 0, 100, 100), null);

        // Image should be same as original, i.e. no flipping of channels
        RenderedImage image = renderer.renderImage(coverage, symbolizer, null);

        ImageAssert.assertEquals(coverageFile, image, 0);

    }

