    /**
     * Creates a derived coordinate reference system. If the transform is an affine map performing a
     * rotation, then any mixed axes must have identical units. For example, a (<var>lat_deg</var>,
     * <var>lon_deg</var>, <var>height_feet</var>) system can be rotated in the (<var>lat</var>,
     * <var>lon</var>) plane, since both affected axes are in degrees. But the transform should not
     * rotate this coordinate system in any other plane.
     *
     * <p>The {@code conversionFromBase} shall contains the {@linkplain
     * Conversion#getParameterValues parameter values} required for the conversion. It may or may
     * not contain the corresponding "{@linkplain Conversion#getMathTransform base to derived}"
     * transform, at user's choice. If a transform is provided, this method may or may not use it at
     * implementation choice. Otherwise it shall creates the transform from the parameters.
     *
     * <p>It is the user's responsability to ensure that the conversion performs all required steps,
     * including unit conversions and change of axis order, if needed. Note that this behavior is
     * different than {@link #createProjectedCRS createProjectedCRS} because transforms other than
     * <cite>cartographic projections</cite> are not standardized.
     *
     * @param properties Name and other properties to give to the new object. Available properties
     *     are {@linkplain ObjectFactory listed there}.
     * @param baseCRS Coordinate reference system to base the projection on. The number of axes must
     *     matches the {@linkplain OperationMethod#getSourceDimensions source dimensions} of the
     *     conversion from base.
     * @param conversionFromBase The {@linkplain CoordinateOperationFactory#createDefiningConversion
     *     defining conversion}.
     * @param derivedCS The coordinate system for the derived CRS. The number of axes must matches
     *     the {@linkplain OperationMethod#getTargetDimensions target dimensions} of the conversion
     *     from base.
     * @return The coordinate reference system for the given properties.
     * @throws FactoryException if the object creation failed.
     * @see CoordinateOperationFactory#createDefiningConversion
     * @see MathTransformFactory#createBaseToDerived
     * @since GeoAPI 2.1
     */
    @UML(identifier = "createFittedCoordinateSystem", specification = OGC_01009)
    DerivedCRS createDerivedCRS(
            Map<String, ?> properties,
            CoordinateReferenceSystem baseCRS,
            Conversion conversionFromBase,
            CoordinateSystem derivedCS)
            throws FactoryException;

