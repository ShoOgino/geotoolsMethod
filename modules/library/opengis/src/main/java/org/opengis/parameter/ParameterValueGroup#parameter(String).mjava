    /**
     * Returns the value in this group for the specified {@linkplain Identifier#getCode identifier
     * code}. If no {@linkplain ParameterValue parameter value} is found but a {@linkplain
     * ParameterDescriptor parameter descriptor} is found (which may occurs if the parameter is
     * optional, i.e. <code>{@linkplain ParameterDescriptor#getMinimumOccurs
     * minimumOccurs} == 0</code>), then a {@linkplain ParameterValue parameter value} is
     * automatically created and initialized to its {@linkplain ParameterDescriptor#getDefaultValue
     * default value} (if any).
     *
     * <p>This convenience method provides a way to get and set parameter values by name. For
     * example the following idiom fetches a floating point value for the {@code "false_easting"}
     * parameter:
     *
     * <blockquote>
     *
     * <code>
     * double value = parameter("false_easting").{@linkplain ParameterValue#doubleValue() doubleValue()};
     * </code>
     *
     * </blockquote>
     *
     * This method do not search recursively in subgroups. This is because more than one subgroup
     * may exist for the same {@linkplain ParameterDescriptorGroup descriptor}. The user must
     * {@linkplain #groups query all subgroups} and select explicitly the appropriate one to use.
     *
     * @param name The case insensitive {@linkplain Identifier#getCode identifier code} of the
     *     parameter to search for.
     * @return The parameter value for the given identifier code.
     * @throws ParameterNotFoundException if there is no parameter value for the given identifier
     *     code.
     */
    @Extension
    ParameterValue<?> parameter(String name) throws ParameterNotFoundException;

