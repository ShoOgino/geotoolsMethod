    /**
     * Creates a projected coordinate reference system from a defining conversion. The {@code
     * conversionFromBase} shall contains the {@linkplain Conversion#getParameterValues parameter
     * values} required for the projection. It may or may not contain the corresponding "{@linkplain
     * Conversion#getMathTransform base to derived}" transform, at user's choice. If a transform is
     * provided, this method may or may not use it at implementation choice. Otherwise it shall
     * creates the transform from the parameters.
     *
     * <p>The supplied conversion should <strong>not</strong> includes the operation steps for
     * performing {@linkplain CoordinateSystemAxis#getUnit unit} conversions and change of
     * {@linkplain CoordinateSystem#getAxis axis} order; those operations shall be inferred by this
     * constructor by some code equivalent to:
     *
     * <blockquote>
     *
     * <code>
     * MathTransform baseToDerived = {@linkplain MathTransformFactory#createBaseToDerived
     * MathTransformFactory.createBaseToDerived}(baseCRS, parameters, derivedCS)
     * </code>
     *
     * </blockquote>
     *
     * This behavior is different than {@link #createDerivedCRS createDerivedCRS} because
     * parameterized transforms are standardized for projections. See the {@linkplain
     * MathTransformFactory#createParameterizedTransform note on cartographic projections}.
     *
     * @param properties Name and other properties to give to the new object. Available properties
     *     are {@linkplain ObjectFactory listed there}.
     * @param baseCRS Geographic coordinate reference system to base the projection on. The number
     *     of axes must matches the {@linkplain OperationMethod#getSourceDimensions source
     *     dimensions} of the conversion from base.
     * @param conversionFromBase The {@linkplain CoordinateOperationFactory#createDefiningConversion
     *     defining conversion}.
     * @param derivedCS The coordinate system for the projected CRS. The number of axes must matches
     *     the {@linkplain OperationMethod#getTargetDimensions target dimensions} of the conversion
     *     from base.
     * @return The coordinate reference system for the given properties.
     * @throws FactoryException if the object creation failed.
     * @see CoordinateOperationFactory#createDefiningConversion
     * @see MathTransformFactory#createBaseToDerived
     * @since GeoAPI 2.1
     */
    @UML(identifier = "createProjectedCoordinateSystem", specification = OGC_01009)
    ProjectedCRS createProjectedCRS(
            Map<String, ?> properties,
            GeographicCRS baseCRS,
            Conversion conversionFromBase,
            CartesianCS derivedCS)
            throws FactoryException;

