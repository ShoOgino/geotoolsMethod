    /**
     * Creates a transform from a group of parameters. The method name is inferred from the
     * {@linkplain ParameterDescriptorGroup#getName parameter group name}. Example:
     *
     * <blockquote>
     *
     * <pre>
     * ParameterValueGroup p = factory.getDefaultParameters("Transverse_Mercator");
     * p.parameter("semi_major").setValue(6378137.000);
     * p.parameter("semi_minor").setValue(6356752.314);
     * MathTransform mt = factory.createParameterizedTransform(p);
     * </pre>
     *
     * </blockquote>
     *
     * <b>Note on cartographic projections:</b>
     *
     * <p>Cartographic projection transforms are used by {@linkplain ProjectedCRS projected
     * coordinate reference systems} to map geographic coordinates (e.g. <var>longitude</var> and
     * <var>latitude</var>) into (<var>x</var>,<var>y</var>) coordinates. These
     * (<var>x</var>,<var>y</var>) coordinates can be imagined to lie on a plane, such as a paper
     * map or a screen. All cartographic projection transforms created through this method will have
     * the following properties:
     *
     * <UL>
     *   <LI>Converts from (<var>longitude</var>,<var>latitude</var>) coordinates to
     *       (<var>x</var>,<var>y</var>).
     *   <LI>All angles are assumed to be degrees, and all distances are assumed to be meters.
     *   <LI>The domain should be a subset of {[-180,180)&times;(-90,90)}.
     * </UL>
     *
     * <p>Although all cartographic projection transforms must have the properties listed above,
     * many projected coordinate reference systems have different properties. For example, in Europe
     * some projected CRSs use grads instead of degrees, and often the {@linkplain
     * ProjectedCRS#getBaseCRS base geographic CRS} is (<var>latitude</var>, <var>longitude</var>)
     * instead of (<var>longitude</var>, <var>latitude</var>). This means that the cartographic
     * projected transform is often used as a single step in a series of transforms, where the other
     * steps change units and swap ordinates.
     *
     * @param parameters The parameter values.
     * @return The parameterized transform.
     * @throws NoSuchIdentifierException if there is no transform registered for the method.
     * @throws FactoryException if the object creation failed. This exception is thrown if some
     *     required parameter has not been supplied, or has illegal value.
     * @see #getDefaultParameters
     * @see #getAvailableMethods
     */
    @UML(
        identifier = "createParameterizedTransform",
        obligation = MANDATORY,
        specification = OGC_01009
    )
    MathTransform createParameterizedTransform(ParameterValueGroup parameters)
            throws NoSuchIdentifierException, FactoryException;

