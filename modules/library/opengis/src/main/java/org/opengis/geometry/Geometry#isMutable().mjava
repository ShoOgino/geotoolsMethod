    /**
     * Returns {@code false} if this geometry is immutable. Immutable geometries are guarantee to
     * never change their state, neither directly (through a change in this object) or indirectly
     * (through a change in an other object this geometry depends upon). Immutable geometries avoid
     * the need for {@linkplain #clone cloning them}. More specifically:
     *
     * <UL>
     *   <LI>
     *       <p>If {@code false}, then this geometry is <cite>immutable</cite>. It is guarantee that
     *       a call to any {@code setFoo(...)} method will throws an {@link
     *       UnmodifiableGeometryException} (that said, <cite>immutable</cite> geometries are
     *       necessarily <cite>unmodifiable</cite>. The converse is not true, see next point below).
     *       This geometry will never change its state, and there is no need for {@linkplain #clone
     *       cloning it}.
     *   <LI>
     *       <p>If {@code true}, then this geometry is <cite>mutable</cite>. Note that
     *       <cite>mutable</cite> geometry is not synonymous of <cite>modifiable</cite> geometry.
     *       The nuance lays in whatever the geometry may changes its state directly (as of user
     *       request) or indirectly:
     *       <p>
     *       <UL>
     *         <LI>
     *             <p>This geometry may be <cite>modifiable</cite>, in which case invoking {@code
     *             setFoo(...)} methods is legal and will not throws exception.
     *         <LI>
     *             <p>This geometry may still <cite>unmodifiable</cite>. User is not allowed to
     *             modify it himself and invoking any {@code setFoo(...)} method will throws an
     *             {@link UnmodifiableGeometryException}. However, the implementation may change the
     *             geometry itself (for example a time-varying geometry).
     *       </UL>
     * </UL>
     *
     * @return {@code true} if this geometry is mutable.
     */
    @Extension
    boolean isMutable();

