    /**
     * Gets the derivative of this transform at a point. The derivative is the matrix of the
     * non-translating portion of the approximate affine map at the point. The matrix will have
     * dimensions corresponding to the source and target coordinate systems. If the input dimension
     * is <var>M</var>, and the output dimension is <var>N</var>, then the matrix will have size
     * <code>N&times;M</code>. The elements of the matrix <code>{e<sub>n,m</sub> : n=0..(N-1)}
     * </code> form a vector in the output space which is parallel to the displacement caused by a
     * small change in the <var>m</var>'th ordinate in the input space.
     *
     * <p>For example, if the input dimension is 4 and the output dimension is 3, then a small
     * displacement <code>
     * (x<sub>0</sub>,&nbsp;x<sub>1</sub>,&nbsp;x<sub>2</sub>,&nbsp;x<sub>3</sub>)</code> in the
     * input space will result in a displacement <code>
     * (y<sub>0</sub>,&nbsp;y<sub>1</sub>,&nbsp;y<sub>2</sub>)</code> in the output space computed
     * as below (<code>e<sub>n,m</sub></code> are the matrix's elements):
     *
     * <pre>
     * [ y<sub>0</sub> ]     [ e<sub>00</sub>  e<sub>01</sub>  e<sub>02</sub>  e<sub>03</sub> ] [ x<sub>0</sub> ]
     * [ y<sub>1</sub> ]  =  [ e<sub>10</sub>  e<sub>11</sub>  e<sub>12</sub>  e<sub>13</sub> ] [ x<sub>1</sub> ]
     * [ y<sub>2</sub> ]     [ e<sub>20</sub>  e<sub>21</sub>  e<sub>22</sub>  e<sub>23</sub> ] [ x<sub>2</sub> ]
     *    <sub> </sub>          <sub>  </sub>   <sub>  </sub>   <sub>  </sub>   <sub>  </sub>   [ x<sub>3</sub> ]
     * </pre>
     *
     * @param point The coordinate point where to evaluate the derivative. Null value is accepted
     *     only if the derivative is the same everywhere. For example affine transform accept null
     *     value since they produces identical derivative no matter the coordinate value. But most
     *     map projection will requires a non-null value.
     * @return The derivative at the specified point (never {@code null}). This method never returns
     *     an internal object: changing the matrix will not change the state of this math transform.
     * @throws NullPointerException if the derivative dependents on coordinate and {@code point} is
     *     {@code null}.
     * @throws MismatchedDimensionException if {@code point} doesn't have the expected dimension.
     * @throws TransformException if the derivative can't be evaluated at the specified point.
     */
    @UML(identifier = "derivative", specification = OGC_01009)
    Matrix derivative(final DirectPosition point)
            throws MismatchedDimensionException, TransformException;

