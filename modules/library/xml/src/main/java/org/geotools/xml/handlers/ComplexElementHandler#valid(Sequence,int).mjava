    /*
     * Validates a Sequence tag
     * @see valid(ElementGrouping)
     */
    private int[] valid(Sequence seq, int index) throws SAXException {
        ElementGrouping[] eg = seq.getChildren();

        if (eg == null) {
            return new int[] {index, 1};
        }

        int tIndex = index; // top of element matching list
        int t = 0; // top of child list

        int count = 0; // used for n-ary at a single spot
        int i2[] = new int[2];
        while (t < eg.length && tIndex < elements.size()) {
            i2 = valid(eg[t], tIndex); // new top element
            if (i2[1] == 1) { // they matched
                if (tIndex == i2[0]) {
                    // didn't more ahead ...
                    t++; // force next spot
                    count = 0; // reset
                } else {
                    count++;
                    if (count <= eg[t].getMaxOccurs()) {
                        tIndex = i2[0]; // store index
                    } else {
                        // error, so redo
                        if (eg[t].getMinOccurs() > count) {
                            // not good
                            // System.out.println("Seq Failed");
                            return new int[] {index, 0}; // not whole sequence
                        }
                        t++;
                        count = 0; // next defined type
                    }
                }
            } else {
                // didn't match

                // move along and retest that spot
                if (eg[t].getMinOccurs() > count) {
                    // not good
                    // System.out.println("Seq Failed");
                    return new int[] {index, 0}; // not whole sequence
                }
                t++;
                count = 0; // next defined type
            }
        }
        // System.out.println("Seq index = "+tIndex+" Matched");
        return new int[] {tIndex, 1};
    }

