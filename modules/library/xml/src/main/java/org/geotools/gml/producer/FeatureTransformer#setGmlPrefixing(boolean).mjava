    /**
     * If Gml Prefixing is enabled then attributes with names that could be prefixed with gml, such
     * as description, pointProperty, and name, will be. So if an attribute called name is
     * encountered, instead of prepending the default prefix (say gt2:name), it will turn out as
     * gml:name. Right now this is fairly hacky, as the gml:name, gml:description, ect., should be
     * in the first attributes by default. The actualy geometry encodings will always be prefixed
     * with the proper gml, like gml:coordinates. This only applies to attributes, that could also
     * be part of the features normal schema (for example a pointProperty could be declared in the
     * gt2 namespace, instead of a gml:pointProperty it would be a gt2:pointProperty.
     *
     * @param prefixGml <tt>true</tt> if prefixing gml should be enabled. Default is disabled, no
     *     gml prefixing.
     * @task REVISIT: only prefix name, description, and boundedBy if they occur in their proper
     *     places. Right now names always get gml prefixed if the gmlPrefixing is on, which is less
     *     than ideal.
     * @task REVISIT: The other approach is to allow for generic mapping, users would set which
     *     attributes they wanted to have different prefixes.
     */
    public void setGmlPrefixing(boolean prefixGml) {
        this.prefixGml = prefixGml;

        if (prefixGml && (gmlAtts == null)) {
            gmlAtts = new HashSet<>();
            loadGmlAttributes(gmlAtts);
        }
    }

