    /**
     * @see org.geotools.xml.XSIElementHandler#getHandler(java.lang.String,
     *      java.lang.String)
     */
    public XSIElementHandler getHandler(String namespaceURI, String localName)
        throws SAXException {
        if (SchemaHandler.namespaceURI.equalsIgnoreCase(namespaceURI)) {
            // child types
            //
            // simpleType
            if (SimpleTypeHandler.LOCALNAME.equalsIgnoreCase(localName)) {
                SimpleTypeHandler sch = new SimpleTypeHandler();

                if (child == null) {
                    child = sch;
                } else {
                    throw new SAXNotRecognizedException(getLocalName()
                        + " may only have one '" + SimpleTypeHandler.LOCALNAME
                        + "' declaration.");
                }

                return sch;
            }

            // enumeration
            if (EnumerationHandler.LOCALNAME.equalsIgnoreCase(localName)) {
                if (constraints == null) {
                    constraints = new LinkedList();
                }

                EnumerationHandler eh = new EnumerationHandler();
                constraints.add(eh);

                return eh;
            }

            // fractionDigits
            if (FractionDigitsHandler.LOCALNAME.equalsIgnoreCase(localName)) {
                if (constraints == null) {
                    constraints = new LinkedList();
                }

                FractionDigitsHandler eh = new FractionDigitsHandler();
                constraints.add(eh);

                return eh;
            }

            // length
            if (LengthHandler.LOCALNAME.equalsIgnoreCase(localName)) {
                if (constraints == null) {
                    constraints = new LinkedList();
                }

                LengthHandler eh = new LengthHandler();
                constraints.add(eh);

                return eh;
            }

            // minInclusive
            if (MinInclusiveHandler.LOCALNAME.equalsIgnoreCase(localName)) {
                if (constraints == null) {
                    constraints = new LinkedList();
                }

                MinInclusiveHandler eh = new MinInclusiveHandler();
                constraints.add(eh);

                return eh;
            }

            // maxInclusive
            if (MaxInclusiveHandler.LOCALNAME.equalsIgnoreCase(localName)) {
                if (constraints == null) {
                    constraints = new LinkedList();
                }

                MaxInclusiveHandler eh = new MaxInclusiveHandler();
                constraints.add(eh);

                return eh;
            }

            // minExclusive
            if (MinExclusiveHandler.LOCALNAME.equalsIgnoreCase(localName)) {
                if (constraints == null) {
                    constraints = new LinkedList();
                }

                MinExclusiveHandler eh = new MinExclusiveHandler();
                constraints.add(eh);

                return eh;
            }

            // maxExclusive
            if (MaxExclusiveHandler.LOCALNAME.equalsIgnoreCase(localName)) {
                if (constraints == null) {
                    constraints = new LinkedList();
                }

                MaxExclusiveHandler eh = new MaxExclusiveHandler();
                constraints.add(eh);

                return eh;
            }

            // maxLength
            if (MaxLengthHandler.LOCALNAME.equalsIgnoreCase(localName)) {
                if (constraints == null) {
                    constraints = new LinkedList();
                }

                MaxLengthHandler eh = new MaxLengthHandler();
                constraints.add(eh);

                return eh;
            }

            // minLength
            if (MinLengthHandler.LOCALNAME.equalsIgnoreCase(localName)) {
                if (constraints == null) {
                    constraints = new LinkedList();
                }

                MinLengthHandler eh = new MinLengthHandler();
                constraints.add(eh);

                return eh;
            }

            // pattern
            if (PatternHandler.LOCALNAME.equalsIgnoreCase(localName)) {
                if (constraints == null) {
                    constraints = new LinkedList();
                }

                PatternHandler eh = new PatternHandler();
                constraints.add(eh);

                return eh;
            }

            // totalDigits
            if (TotalDigitsHandler.LOCALNAME.equalsIgnoreCase(localName)) {
                if (constraints == null) {
                    constraints = new LinkedList();
                }

                TotalDigitsHandler eh = new TotalDigitsHandler();
                constraints.add(eh);

                return eh;
            }

            // all
            if (AllHandler.LOCALNAME.equalsIgnoreCase(localName)) {
                AllHandler sch = new AllHandler();

                if (child == null) {
                    child = sch;
                } else {
                    throw new SAXNotRecognizedException(getLocalName()
                        + " may only have one '" + AllHandler.LOCALNAME
                        + "' declaration.");
                }

                return sch;
            }

            // choice
            if (ChoiceHandler.LOCALNAME.equalsIgnoreCase(localName)) {
                ChoiceHandler sch = new ChoiceHandler();

                if (child == null) {
                    child = sch;
                } else {
                    throw new SAXNotRecognizedException(getLocalName()
                        + " may only have one '" + ChoiceHandler.LOCALNAME
                        + "' declaration.");
                }

                return sch;
            }

            // group
            if (GroupHandler.LOCALNAME.equalsIgnoreCase(localName)) {
                GroupHandler sch = new GroupHandler();

                if (child == null) {
                    child = sch;
                } else {
                    throw new SAXNotRecognizedException(getLocalName()
                        + " may only have one '" + GroupHandler.LOCALNAME
                        + "' declaration.");
                }

                return sch;
            }

            // sequence
            if (SequenceHandler.LOCALNAME.equalsIgnoreCase(localName)) {
                SequenceHandler sch = new SequenceHandler();

                if (child == null) {
                    child = sch;
                } else {
                    throw new SAXNotRecognizedException(getLocalName()
                        + " may only have one '" + SequenceHandler.LOCALNAME
                        + "' declaration.");
                }

                return sch;
            }

            // attribute
            if (AttributeHandler.LOCALNAME.equalsIgnoreCase(localName)) {
                if (attrDecs == null) {
                    attrDecs = new LinkedList();
                }

                AttributeHandler ah = new AttributeHandler();
                attrDecs.add(ah);

                return ah;
            }

            // attributeGroup
            if (AttributeGroupHandler.LOCALNAME.equalsIgnoreCase(localName)) {
                if (attrDecs == null) {
                    attrDecs = new LinkedList();
                }

                AttributeGroupHandler ah = new AttributeGroupHandler();
                attrDecs.add(ah);

                return ah;
            }

            // anyAttribute
            if (AnyAttributeHandler.LOCALNAME.equalsIgnoreCase(localName)) {
                AnyAttributeHandler sch = new AnyAttributeHandler();

                if (anyAttribute == null) {
                    anyAttribute = sch;
                } else {
                    throw new SAXNotRecognizedException(getLocalName()
                        + " may only have one '"
                        + AnyAttributeHandler.LOCALNAME + "' declaration.");
                }

                return sch;
            }
        }

        return null;
    }

