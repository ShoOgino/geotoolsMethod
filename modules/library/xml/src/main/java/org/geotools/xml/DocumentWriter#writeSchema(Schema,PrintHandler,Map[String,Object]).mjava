    private static void writeSchema(Schema schema, PrintHandler ph, Map<String, Object> hints)
            throws IOException {
        if (schema == null) {
            return;
        }

        AttributesImpl ai = new AttributesImpl();

        ai.addAttribute(
                "", "targetNamespace", "", "anyUri", schema.getTargetNamespace().toString());
        ai.addAttribute("", "xmlns", "", "anyUri", XSISimpleTypes.NAMESPACE.toString());
        ai.addAttribute(
                "",
                "xmlns:" + schema.getPrefix(),
                "",
                "anyUri",
                schema.getTargetNamespace().toString());

        Schema[] imports = schema.getImports();

        for (Schema value : imports) {
            ai.addAttribute(
                    "",
                    "xmlns:" + value.getPrefix(),
                    "",
                    "anyUri",
                    value.getTargetNamespace().toString());
        }

        if ((schema.getId() != null) && (!schema.getId().isEmpty())) {
            ai.addAttribute("", "id", "", "ID", schema.getId());
        }

        if ((schema.getVersion() != null) && (!schema.getVersion().isEmpty())) {
            ai.addAttribute("", "version", "", "String", schema.getVersion());
        }

        if (schema.isAttributeFormDefault()) {
            ai.addAttribute("", "attributeFormDefault", "", "NMTOKEN", "qualified");
        }

        if (schema.isElementFormDefault()) {
            ai.addAttribute("", "elementFormDefault", "", "NMTOKEN", "qualified");
        }

        if (schema.getBlockDefault() != Schema.NONE) {
            ai.addAttribute(
                    "",
                    "blockDefault",
                    "",
                    "NMTOKENS",
                    ComplexTypeHandler.writeBlock(schema.getBlockDefault()));
        }

        if (schema.getFinalDefault() != Schema.NONE) {
            ai.addAttribute(
                    "",
                    "finalDefault",
                    "",
                    "NMTOKENS",
                    ComplexTypeHandler.writeFinal(schema.getFinalDefault()));
        }

        ph.startElement(XSISimpleTypes.NAMESPACE, "schema", ai);

        for (Schema anImport : imports) writeImport(anImport, ph);

        Element[] elems = schema.getElements();

        if (elems != null) {
            for (Element elem : elems) writeElement(elem, schema, ph, hints);
        }

        ComplexType[] cts = schema.getComplexTypes();

        if (elems != null) {
            for (ComplexType ct : cts) writeComplexType(ct, schema, ph, hints);
        }

        SimpleType[] sts = schema.getSimpleTypes();

        if (elems != null) {
            for (SimpleType st : sts) writeSimpleType(st, schema, ph, hints);
        }

        Group[] groups = schema.getGroups();

        if (elems != null) {
            for (Group group : groups) writeGroup(group, schema, ph, hints);
        }

        Attribute[] attrs = schema.getAttributes();

        if (elems != null) {
            for (Attribute attr : attrs) writeAttribute(attr, schema, ph, hints);
        }

        AttributeGroup[] attrgrps = schema.getAttributeGroups();

        if (elems != null) {
            for (AttributeGroup attrgrp : attrgrps) writeAttributeGroup(attrgrp, schema, ph, hints);
        }

        ph.endElement(XSISimpleTypes.NAMESPACE, "schema");
    }

