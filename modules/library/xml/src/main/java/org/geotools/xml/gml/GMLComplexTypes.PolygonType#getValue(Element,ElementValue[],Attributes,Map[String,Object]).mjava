        /** @see schema.Type#getValue(java.util.List) */
        @Override
        public Object getValue(
                Element element, ElementValue[] value, Attributes attrs, Map<String, Object> hints)
                throws OperationNotSupportedException, SAXException {
            Element e = value[0].getElement();

            if (e == null) {
                if (!element.isNillable())
                    throw new SAXException(
                            "Internal error, ElementValues require an associated Element.");
                return null;
            }

            GeometryFactory gf = new GeometryFactory(CoordinateArraySequenceFactory.instance());

            LinearRing outerLR = null;
            LinearRing[] innerLR = new LinearRing[(value.length > 1) ? (value.length - 1) : 0];
            int innerIndex = 0;

            for (ElementValue elementValue : value) {
                if (elements[0].getName().equalsIgnoreCase(elementValue.getElement().getName())) {
                    outerLR = (LinearRing) elementValue.getValue();
                } else {
                    innerLR[innerIndex++] = (LinearRing) elementValue.getValue();
                }
            }

            Polygon p = gf.createPolygon(outerLR, innerLR);

            ElementValue[] ev = new ElementValue[1];
            ev[0] = new DefaultElementValue(element, p);

            return AbstractGeometryType.getInstance().getValue(element, ev, attrs, hints);
        }

