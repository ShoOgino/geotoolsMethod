        /**
         * @see org.geotools.xml.schema.Type#getValue(org.geotools.xml.schema.Element,
         *     org.geotools.xml.schema.ElementValue[], org.xml.sax.Attributes, java.util.Map)
         */
        @Override
        public Object getValue(
                Element element, ElementValue[] value, Attributes attrs, Map<String, Object> hints)
                throws SAXException {
            FilterFactory2 factory = FilterSchema.filterFactory(hints);

            try {
                short type = SpatialOpsType.findFilterType(element.getName());

                Expression geometry1 = (Expression) value[0].getValue();
                Expression geometry2 = (Expression) value[1].getValue();

                // GeometryFilter filter = factory.createGeometryFilter( type );
                switch (type) {
                    case FilterType.GEOMETRY_EQUALS:
                        return factory.equal(geometry1, geometry2);

                    case FilterType.GEOMETRY_DISJOINT:
                        return factory.disjoint(geometry1, geometry2);

                    case FilterType.GEOMETRY_INTERSECTS:
                        return factory.intersects(geometry1, geometry2);

                    case FilterType.GEOMETRY_CROSSES:
                        return factory.crosses(geometry1, geometry2);

                    case FilterType.GEOMETRY_WITHIN:
                        return factory.within(geometry1, geometry2);

                    case FilterType.GEOMETRY_CONTAINS:
                        return factory.contains(geometry1, geometry2);

                    case FilterType.GEOMETRY_OVERLAPS:
                        return factory.overlaps(geometry1, geometry2);

                    case FilterType.GEOMETRY_TOUCHES:
                        return factory.touches(geometry1, geometry2);

                    default:
                        throw new SAXException("Illegal filter for " + element);
                }
            } catch (ClassCastException filterRequired) {
                throw new SAXException("Illegal filter for " + element, filterRequired);
            } catch (IllegalFilterException e) {
                throw new SAXException("Illegal filter for " + element);
            }
        }

