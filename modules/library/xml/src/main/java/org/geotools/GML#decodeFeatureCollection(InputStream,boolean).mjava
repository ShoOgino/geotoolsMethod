    /**
     * Decodes a feature collection from the stream provided.
     *
     * @param in
     * @param computeFullFeatureType When true, all features are parsed and then a global feature
     *     type is determined that has attributes covering all feature needs, when false, the first
     *     feature attributes
     * @return
     * @throws IOException
     * @throws SAXException
     * @throws ParserConfigurationException
     */
    public SimpleFeatureCollection decodeFeatureCollection(
            InputStream in, boolean computeFullFeatureType)
            throws IOException, SAXException, ParserConfigurationException {
        if (Version.GML2 == version
                || Version.WFS1_0 == version
                || Version.GML2 == version
                || Version.GML3 == version
                || Version.WFS1_0 == version
                || Version.WFS1_1 == version) {
            Configuration cfg = gmlConfiguration;
            Parser parser = new Parser(cfg);
            DynamicFeatureTypeCacheCustomizer customizer = null;
            if (computeFullFeatureType) {
                customizer = new DynamicFeatureTypeCacheCustomizer();
                parser.setContextCustomizer(customizer);
            }
            Object obj = parser.parse(in);
            SimpleFeatureCollection collection = toFeatureCollection(obj);
            // have we figured out the schema feature by feature? If so, harmonize
            if (computeFullFeatureType && customizer.isDynamicTypeFound()) {
                SimpleFeatureType harmonizedType = getCompleteFeatureType(collection);
                collection = new ReTypingFeatureCollection(collection, harmonizedType);
            }

            return collection;
        }
        return null;
    }

