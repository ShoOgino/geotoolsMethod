    /*
     * Generic validation method which simulates recursion, and avoids casting :)
     * The index is the starting index in the list of elements, for the particular
     * ElementGrouping. The last index matched is returned.
     */
    private int[] valid(ElementGrouping eg, int index) throws SAXException {
        if (eg == null) {
            return new int[] {index, 1};
        }

        switch (eg.getGrouping()) {
            case ElementGrouping.SEQUENCE:
                int[] tmp = valid((Sequence) eg, index);
                return tmp;

            case ElementGrouping.ALL:
                return valid((All) eg, index);

            case ElementGrouping.ANY:
                return valid((Any) eg, index);

            case ElementGrouping.CHOICE:
                return valid((Choice) eg, index);

            case ElementGrouping.GROUP:
                return valid((Group) eg, index);

            case ElementGrouping.ELEMENT:
                tmp = valid((Element) eg, index);
                return tmp;
        }

        return new int[] {index, 1};
    }

