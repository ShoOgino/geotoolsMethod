        /**
         * This completes the merge of two schemas, s1 and s2. When there is a conflict in data
         * between the two schemas, s1 is assumed to be correct.
         *
         * @param s1 Schema (Tie Winner)
         * @param s2 Schema (Tie Loser)
         * @throws SAXException When some thing bad happens (for example merging two
         *     targetNamespaces)
         */
        public MergedSchema(Schema s1, Schema s2) throws SAXException {
            if ((s1.getId() == null) || s1.getId().equals("")) {
                id = s2.getId();
            } else {
                id = s1.getId();
            }

            if ((s1.getVersion() == null) || s1.getVersion().equals("")) {
                version = s2.getVersion();
            } else {
                version = s1.getVersion();
            }

            if ((s1.getTargetNamespace() == null) || s1.getTargetNamespace().toString().isEmpty()) {
                targetNamespace = s2.getTargetNamespace();
            } else {
                if ((s2.getTargetNamespace() != null)
                        && !s1.getTargetNamespace().equals(s2.getTargetNamespace())) {
                    throw new SAXException(
                            "cannot merge two target namespaces. "
                                    + s1.getTargetNamespace()
                                    + " "
                                    + s2.getTargetNamespace());
                }

                targetNamespace = s1.getTargetNamespace();
            }

            aForm = s1.isAttributeFormDefault() || s2.isAttributeFormDefault();
            eForm = s1.isElementFormDefault() || s2.isElementFormDefault();

            Map<Object, Object> m = new HashMap<>();

            AttributeGroup[] ag1 = s1.getAttributeGroups();

            if (ag1 == null) {
                ag1 = new AttributeGroup[0];
            }

            AttributeGroup[] ag2 = s2.getAttributeGroups();

            if (ag2 == null) {
                ag2 = new AttributeGroup[0];
            }

            for (AttributeGroup attributeGroup1 : ag1)
                m.put(attributeGroup1.getName(), attributeGroup1);

            for (AttributeGroup attributeGroup : ag2)
                if (!m.containsKey(attributeGroup.getName())) {
                    m.put(attributeGroup.getName(), attributeGroup);
                }

            attributeGroups = new AttributeGroup[m.size()];

            Object[] obj = m.values().toArray();

            for (int i = 0; i < obj.length; i++) attributeGroups[i] = (AttributeGroup) (obj[i]);

            m = new HashMap<>();

            Attribute[] a1 = s1.getAttributes();

            if (a1 == null) {
                a1 = new Attribute[0];
            }

            Attribute[] a2 = s2.getAttributes();

            if (a2 == null) {
                a2 = new Attribute[0];
            }

            for (Attribute attribute1 : a1) m.put(attribute1.getName(), attribute1);

            for (Attribute attribute : a2)
                if (!m.containsKey(attribute.getName())) {
                    m.put(attribute.getName(), attribute);
                }

            attributes = new Attribute[m.size()];
            obj = m.values().toArray();

            for (int i = 0; i < obj.length; i++) attributes[i] = (Attribute) (obj[i]);

            block = s1.getBlockDefault() | s2.getBlockDefault();
            finaL = s1.getFinalDefault() | s2.getFinalDefault();

            m = new HashMap<>();

            ComplexType[] c1 = s1.getComplexTypes();

            if (c1 == null) {
                c1 = new ComplexType[0];
            }

            ComplexType[] c2 = s2.getComplexTypes();

            if (c2 == null) {
                c2 = new ComplexType[0];
            }

            for (ComplexType complexType1 : c1) m.put(complexType1.getName(), complexType1);

            for (ComplexType complexType : c2)
                if (!m.containsKey(complexType.getName())) {
                    m.put(complexType.getName(), complexType);
                }

            complexTypes = new ComplexType[m.size()];
            obj = m.values().toArray();

            for (int i = 0; i < obj.length; i++) complexTypes[i] = (ComplexType) (obj[i]);

            m = new HashMap<>();

            SimpleType[] ss1 = s1.getSimpleTypes();

            if (ss1 == null) {
                ss1 = new SimpleType[0];
            }

            SimpleType[] ss2 = s2.getSimpleTypes();

            if (ss2 == null) {
                ss2 = new SimpleType[0];
            }

            for (SimpleType type : ss1) m.put(type.getName(), type);

            for (SimpleType simpleType : ss2)
                if (!m.containsKey(simpleType.getName())) {
                    m.put(simpleType.getName(), simpleType);
                }

            simpleTypes = new SimpleType[m.size()];
            obj = m.values().toArray();

            for (int i = 0; i < obj.length; i++) simpleTypes[i] = (SimpleType) (obj[i]);

            m = new HashMap<>();

            Element[] e1 = s1.getElements();

            if (e1 == null) {
                e1 = new Element[0];
            }

            Element[] e2 = s2.getElements();

            if (e2 == null) {
                e2 = new Element[0];
            }

            for (Element element1 : e1) m.put(element1.getName(), element1);

            for (Element element : e2)
                if (!m.containsKey(element.getName())) {
                    m.put(element.getName(), element);
                }

            elements = new Element[m.size()];
            obj = m.values().toArray();

            for (int i = 0; i < obj.length; i++) elements[i] = (Element) (obj[i]);

            m = new HashMap<>();

            Group[] g1 = s1.getGroups();

            if (g1 == null) {
                g1 = new Group[0];
            }

            Group[] g2 = s2.getGroups();

            if (g2 == null) {
                g2 = new Group[0];
            }

            for (Group item : g1) m.put(item.getName(), item);

            for (Group group : g2)
                if (!m.containsKey(group.getName())) {
                    m.put(group.getName(), group);
                }

            groups = new Group[m.size()];
            obj = m.values().toArray();

            for (int i = 0; i < obj.length; i++) groups[i] = (Group) (obj[i]);

            m = new HashMap<>();

            Schema[] i1 = s1.getImports();

            if (i1 == null) {
                i1 = new Schema[0];
            }

            Schema[] i2 = s2.getImports();

            if (i2 == null) {
                i2 = new Schema[0];
            }

            for (Schema value : i1) m.put(value.getTargetNamespace(), value);

            for (Schema schema : i2)
                if (!m.containsKey(schema.getTargetNamespace())) {
                    m.put(schema.getTargetNamespace(), schema);
                }

            imports = new Schema[m.size()];
            obj = m.values().toArray();

            for (int i = 0; i < obj.length; i++) imports[i] = (Schema) (obj[i]);

            URI u1 = s1.getURI();

            URI u2 = s2.getURI();

            if (u1 == null) {
                uri = u2;
            } else {
                if (u2 == null) {
                    uri = u1;
                } else {
                    uri = u2.relativize(u1);
                }
            }

            if ((s1.getPrefix() == null) || s1.getPrefix().equals("")) {
                prefix = s2.getPrefix();
            } else {
                prefix = s1.getPrefix();
            }
        }

