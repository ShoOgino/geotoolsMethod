    /**
     * Calls the appropriate type for encoding.
     * <p>
     * This mapping from filter to Type is a bit tricky since the filter hierarchy has changed.
     * <p>
     * <ul>
     * <li>LOGIC_TYPE: includes BinaryLogicOperator and Not</li>
     * <li>COMPARE_TYPE: includes BinaryComparisonOperator and PropertyIsBetween</li>
     * <p>
     * 
     * 
     * @param filter
     * @param output
     * @param hints
     * @throws OperationNotSupportedException
     * @throws IOException
     */
    
    protected static void encodeFilter(org.opengis.filter.Filter filter, PrintHandler output, Map hints) throws OperationNotSupportedException, IOException{
        if (filter instanceof BinaryLogicOperator) {
            FilterType.elems[LOGIC_TYPE].getType().encode(FilterType.elems[LOGIC_TYPE], filter,
                    output, hints);
        } else if (filter instanceof Not) {
            FilterType.elems[LOGIC_TYPE].getType().encode(FilterType.elems[LOGIC_TYPE], filter, output,
                    hints);
        } else if (filter instanceof BinaryComparisonOperator) {
            FilterType.elems[COMPARE_TYPE].getType().encode(FilterType.elems[COMPARE_TYPE], filter, output,
                    hints);
        } else if (filter instanceof PropertyIsBetween) {
            FilterType.elems[COMPARE_TYPE].getType().encode(FilterType.elems[COMPARE_TYPE], filter, output,
                    hints);
        } else if (filter instanceof Id) {
            // deal with multi instance inside the type-writer
            FilterType.elems[FID_TYPE].getType().encode(FilterType.elems[FID_TYPE], filter, output, hints);
        } else if (filter instanceof BinarySpatialOperator) {
            FilterType.elems[SPATIAL_TYPE].getType().encode(FilterType.elems[SPATIAL_TYPE], filter, output,
                    hints);
        } else if (filter instanceof PropertyIsLike) {
            FilterType.elems[COMPARE_TYPE].getType().encode(FilterType.elems[COMPARE_TYPE], filter, output,
                    hints);
        } else if (filter instanceof PropertyIsNull) {
            FilterType.elems[COMPARE_TYPE].getType().encode(FilterType.elems[COMPARE_TYPE], filter, output,
                    hints);
        } else {
            throw new OperationNotSupportedException(
                    "The Filter type is not known: please try again. " + filter == null ? "null"
                            : filter.getClass().getName());
        }
    }

