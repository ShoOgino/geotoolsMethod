    private static AttributeDescriptor getAttribute(String name, Choice eg) {

        List<AttributeDescriptor> l = new LinkedList<>();
        ElementGrouping[] children = eg.getChildren();
        if (children != null)
            for (int i = 0; i < children.length; i++) {
                l.addAll(getAttributes(name, children[i]));
            }

        if (l.isEmpty()) {
            // who knows ... this really shouldn't happen
            return null;
        }
        if (l.size() == 1) {
            return l.iterator().next();
        }
        // Do some magic to find the type
        Class<?> type = getCommonType(l);
        if (type == null) type = Object.class;
        // Take the first name ... cause we need one anyways
        // nillable should really be nillable, but in gt2.X nillable in an attribute is equivalent
        // to minOccurs == 0 as well
        boolean nillable = eg.getMinOccurs() == 0;
        if (!nillable && children != null) {
            for (int i = 0; i < children.length && !nillable; i++) {
                if (eg.getMinOccurs() == 0) nillable = true;
            }
        }
        Class[] choices = collectionChoices(l);
        NameImpl typeName = new NameImpl(name);
        if (Geometry.class.isAssignableFrom(type)) {
            return new ChoiceGeometryTypeImpl(
                    typeName, choices, type, nillable, 1, 1, null, null, Collections.emptyList());
        } else {
            return new ChoiceAttributeTypeImpl(
                    typeName, choices, type, nillable, 1, 1, null, Collections.emptyList());
        }
    }

