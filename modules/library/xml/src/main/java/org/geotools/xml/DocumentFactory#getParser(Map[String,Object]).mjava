    /*
     * Convenience method to create an instance of a SAXParser if it is null.
     */
    private static SAXParser getParser(Map<String,Object> hints) throws SAXException {
        SAXParserFactory spf = null;
        if(hints != null && hints.containsKey(XMLHandlerHints.SAX_PARSER_FACTORY)) {
            spf = (SAXParserFactory) hints.get(XMLHandlerHints.SAX_PARSER_FACTORY);
        } else {
            spf = SAXParserFactory.newInstance();
        }
        spf.setNamespaceAware(true);
        spf.setValidating(false);
        
        try {
            // Extra precaution to reduce/prevent XXE attacks
            //
            // For more info: https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing
            // https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Prevention_Cheat_Sheet
            
            
            // Step 1 distable DTD support - not needed for schema driven parser
            // 
            // Note: XMLSaxHandler will reject all DTD references - but we may as well avoid early
            // spf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
            spf.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
   
            // Step 2 optionally disable external entities
            //
            if (hints != null && hints.containsKey(DISABLE_EXTERNAL_ENTITIES)
                    && Boolean.TRUE.equals(hints.get(DISABLE_EXTERNAL_ENTITIES))) {
                spf.setFeature("http://xml.org/sax/features/external-general-entities", false);
                spf.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
            }
            SAXParser sp = spf.newSAXParser();
            return sp;
        } catch (ParserConfigurationException e) {
            throw new SAXException(e);
        }
    }

