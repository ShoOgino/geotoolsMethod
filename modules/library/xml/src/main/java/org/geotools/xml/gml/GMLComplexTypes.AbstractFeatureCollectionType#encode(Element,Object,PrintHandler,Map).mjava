        /**
         * @see org.geotools.xml.schema.Type#encode(org.geotools.xml.schema.Element,
         *     java.lang.Object, org.geotools.xml.PrintHandler, java.util.Map)
         */
        public void encode(Element element, Object value, PrintHandler output, Map hints)
                throws IOException, OperationNotSupportedException {
            if ((value == null) || (!(value instanceof FeatureCollection))) {
                return;
            }

            if (element == null) {
                output.startElement(GMLSchema.NAMESPACE, "_featureCollection", null);
            } else {
                output.startElement(element.getNamespace(), element.getName(), null);
            }

            SimpleFeatureCollection fc = (SimpleFeatureCollection) value;

            if (fc.getBounds() != null) {
                BoundingShapeType.getInstance().encode(null, fc.getBounds(), output, hints);
            } else {
                throw new IOException("Bounding box required for the FeatureCollection");
            }

            SimpleFeatureIterator i = fc.features();
            Element e = null;

            while (i.hasNext()) {
                SimpleFeature f = i.next();
                output.startElement(GMLSchema.NAMESPACE, "featureMember", null);

                if (e == null) { // first time
                    e = output.findElement(f.getFeatureType().getTypeName());
                    // should go to an abstract FT eventually
                    ComplexType t =
                            e.getType() instanceof ComplexType ? (ComplexType) e.getType() : null;
                    while (t != null && t != AbstractFeatureType.getInstance())
                        t =
                                t.getParent() instanceof ComplexType
                                        ? (ComplexType) t.getParent()
                                        : null;
                    if (t != AbstractFeatureType.getInstance()) {
                        // not the right element ... try by type
                        e = output.findElement(value);
                        // should go to an abstract FT eventually
                        t = e.getType() instanceof ComplexType ? (ComplexType) e.getType() : null;
                        while (t != null && t != AbstractFeatureType.getInstance())
                            t =
                                    t.getParent() instanceof ComplexType
                                            ? (ComplexType) t.getParent()
                                            : null;
                        if (t != AbstractFeatureType.getInstance()) {
                            throw new OperationNotSupportedException(
                                    "Could not find a correct Element for FeatureType "
                                            + f.getFeatureType().getTypeName());
                        }
                    }
                }

                if (e == null) {
                    throw new NullPointerException(
                            "Feature Definition not found in Schema " + element.getNamespace());
                }

                AbstractFeatureType.getInstance().encode(e, f, output, hints);
                output.endElement(GMLSchema.NAMESPACE, "featureMember");
            }

            if (element == null) {
                output.endElement(GMLSchema.NAMESPACE, "_featureCollection");
            } else {
                output.endElement(element.getNamespace(), element.getName());
            }
        }

