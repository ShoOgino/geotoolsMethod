    private static void writeSequence(
            Sequence sequence, Schema schema, PrintHandler ph, Map<String, Object> hints)
            throws IOException {
        AttributesImpl ai = new AttributesImpl();

        if ((sequence.getId() != null) && (!sequence.getId().isEmpty())) {
            ai.addAttribute("", "id", "", "ID", sequence.getId());
        }

        if (sequence.getMaxOccurs() != 1) {
            ai.addAttribute(
                    "",
                    "maxOccurs",
                    "",
                    "Union",
                    (sequence.getMaxOccurs() == ElementGrouping.UNBOUNDED)
                            ? "unbounded"
                            : ("" + sequence.getMaxOccurs()));
        }

        if (sequence.getMinOccurs() != 1) {
            ai.addAttribute("", "minOccurs", "", "ID", "" + sequence.getMinOccurs());
        }

        ph.startElement(XSISimpleTypes.NAMESPACE, "sequence", ai);

        ElementGrouping[] egs = sequence.getChildren();

        if (egs != null) {
            for (ElementGrouping eg : egs)
                if (eg != null) {
                    switch (eg.getGrouping()) {
                        case ElementGrouping.ANY:
                            writeAny((Any) eg, ph);

                            break;

                        case ElementGrouping.CHOICE:
                            writeChoice((Choice) eg, schema, ph, hints);

                            break;

                        case ElementGrouping.ELEMENT:
                            writeElement((Element) eg, schema, ph, hints);

                            break;

                        case ElementGrouping.GROUP:
                            writeGroup((Group) eg, schema, ph, hints);

                            break;

                        case ElementGrouping.SEQUENCE:
                            writeSequence((Sequence) eg, schema, ph, hints);

                            break;
                    }
                }
        }

        ph.endElement(XSISimpleTypes.NAMESPACE, "sequence");
    }

