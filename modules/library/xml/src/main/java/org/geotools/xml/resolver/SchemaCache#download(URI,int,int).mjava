    /**
     * Retrieve the contents of a remote URL.
     *
     * @param location and absolute http/https URL.
     * @param blockSize download block size
     * @param redirectionCount the number of redirection attempts already performed while
     *     downloading
     * @return the bytes contained by the resource, or null if it could not be downloaded
     */
    static byte[] download(URI location, int blockSize, int redirectionCount) {
        try {
            URL url = location.toURL();
            String protocol = url.getProtocol();
            if (protocol == null || !(protocol.equals("http") || protocol.equals("https"))) {
                LOGGER.warning("Unexpected download URL protocol: " + protocol);
                return null;
            }
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setConnectTimeout(downloadTimeout);
            connection.setReadTimeout(downloadTimeout);
            connection.setUseCaches(false);
            connection.connect();
            int responseCode = connection.getResponseCode();
            if (responseCode != HttpURLConnection.HTTP_OK) {
                if (hasRedirect(responseCode))
                    return followRedirect(connection, blockSize, redirectionCount);
                LOGGER.warning(
                        String.format(
                                "Unexpected response \"%d %s\" while downloading %s",
                                connection.getResponseCode(),
                                connection.getResponseMessage(),
                                location.toString()));
                return null;
            }

            // read all the blocks into a list
            List<byte[]> blocks = new LinkedList<>();
            try (InputStream input = connection.getInputStream()) {
                while (true) {
                    byte[] block = new byte[blockSize];
                    int count = input.read(block);
                    if (count == -1) {
                        // end-of-file
                        break;
                    } else if (count == blockSize) {
                        // full block
                        blocks.add(block);
                    } else {
                        // short block
                        byte[] shortBlock = new byte[count];
                        System.arraycopy(block, 0, shortBlock, 0, count);
                        blocks.add(shortBlock);
                    }
                }
            }
            // concatenate all the blocks
            int totalCount = 0;
            for (byte[] b : blocks) {
                totalCount += b.length;
            }
            byte[] bytes = new byte[totalCount];
            int position = 0;
            for (byte[] b : blocks) {
                System.arraycopy(b, 0, bytes, position, b.length);
                position += b.length;
            }
            return bytes;
        } catch (Exception e) {
            throw new RuntimeException("Error downloading location: " + location.toString(), e);
        }
    }

