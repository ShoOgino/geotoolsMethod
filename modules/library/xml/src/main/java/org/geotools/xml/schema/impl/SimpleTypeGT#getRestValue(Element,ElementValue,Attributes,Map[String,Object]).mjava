    /*
     * Helper for getValue(Element,ElementValue[])
     */
    private Object getRestValue(
            Element element, ElementValue value, Attributes attrs, Map<String, Object> hints)
            throws OperationNotSupportedException, SAXException {
        if ((parents == null) || (parents[0] == null)) {
            return null;
        }

        if (constraints == null) {
            return null;
        }

        if (constraints.length == 0) {
            ElementValue[] t = new ElementValue[1];
            t[0] = value;

            return parents[0].getValue(element, t, attrs, hints);
        }

        String val = (String) value.getValue();

        if (val != null && constraints[0].getFacetType() == Facet.ENUMERATION) {
            for (Facet constraint : constraints) {
                if (val.equalsIgnoreCase(constraint.getValue())) {
                    ElementValue[] t = new ElementValue[1];
                    t[0] = value;

                    return parents[0].getValue(element, t, attrs, hints);
                }
            }

            return null;
        }

        Number nval = null;
        Date dval = null;

        ElementValue[] t = new ElementValue[1];
        t[0] = value;

        Object o = parents[0].getValue(element, t, attrs, hints);

        if (o instanceof Number) {
            nval = (Number) o;
        }

        if (o instanceof Date) {
            dval = (Date) o;
        }

        // check each constraint
        for (Facet constraint : constraints) {
            switch (constraint.getFacetType()) {
                case Facet.ENUMERATION:
                    /*throw new SAXException(
                    "cannot have enumerations mixed with other facets.");*/
                    break;

                case Facet.FRACTIONDIGITS:
                    int decimals = val.length() - val.indexOf(".");
                    int maxDec = Integer.parseInt(constraint.getValue());

                    if (decimals > maxDec) {
                        throw new SAXException("Too many decimal places");
                    }

                    break;

                case Facet.LENGTH:
                    int maxLength = Integer.parseInt(constraint.getValue());

                    if (val.length() != maxLength) {
                        throw new SAXException("Too long places");
                    }

                    break;

                case Facet.MAXEXCLUSIVE:
                    if (nval != null) {
                        Double max = Double.valueOf(constraint.getValue());

                        if (nval.doubleValue() > max.doubleValue()) {
                            throw new SAXException("Too large a value");
                        }
                    }

                    if (dval != null) {
                        Date max;

                        try {
                            max = DateFormat.getDateTimeInstance().parse(constraint.getValue());
                        } catch (ParseException e) {
                            throw new SAXException(e);
                        }

                        if (dval.after(max)) {
                            throw new SAXException("Too large a value");
                        }
                    }

                    break;

                case Facet.MAXINCLUSIVE:
                    if (nval != null) {
                        Double max = Double.valueOf(constraint.getValue());

                        if (nval.doubleValue() >= max.doubleValue()) {
                            throw new SAXException("Too large a value");
                        }
                    }

                    if (dval != null) {
                        Date max;

                        try {
                            max = DateFormat.getDateTimeInstance().parse(constraint.getValue());
                        } catch (ParseException e) {
                            throw new SAXException(e);
                        }

                        if (dval.compareTo(max) > 0) {
                            throw new SAXException("Too large a value");
                        }
                    }

                case Facet.MAXLENGTH:
                    maxLength = Integer.parseInt(constraint.getValue());

                    if (val.length() > maxLength) {
                        throw new SAXException("Too long places");
                    }

                    break;

                case Facet.MINEXCLUSIVE:
                    if (nval != null) {
                        Double max = Double.valueOf(constraint.getValue());

                        if (nval.doubleValue() < max.doubleValue()) {
                            throw new SAXException("Too large a value");
                        }
                    }

                    if (dval != null) {
                        Date max;

                        try {
                            max = DateFormat.getDateTimeInstance().parse(constraint.getValue());
                        } catch (ParseException e) {
                            throw new SAXException(e);
                        }

                        if (dval.before(max)) {
                            throw new SAXException("Too large a value");
                        }
                    }

                case Facet.MININCLUSIVE:
                    if (nval != null) {
                        Double max = Double.valueOf(constraint.getValue());

                        if (nval.doubleValue() <= max.doubleValue()) {
                            throw new SAXException("Too large a value");
                        }
                    }

                    if (dval != null) {
                        Date max;

                        try {
                            max = DateFormat.getDateTimeInstance().parse(constraint.getValue());
                        } catch (ParseException e) {
                            throw new SAXException(e);
                        }

                        if (dval.compareTo(max) < 0) {
                            throw new SAXException("Too large a value");
                        }
                    }

                case Facet.MINLENGTH:
                    maxLength = Integer.parseInt(constraint.getValue());

                    if (val.length() < maxLength) {
                        throw new SAXException("Too short places");
                    }

                    break;

                case Facet.PATTERN:
                    if (val.split(constraint.getValue()).length != 0) {
                        throw new SAXException("Does not match pattern");
                    }

                    break;

                case Facet.TOTALDIGITS:
                    maxLength = Integer.parseInt(constraint.getValue()) + 1;

                    if (val.length() > maxLength) {
                        throw new SAXException("Too many digits");
                    }

                    break;
            }
        }

        return o;
    }

