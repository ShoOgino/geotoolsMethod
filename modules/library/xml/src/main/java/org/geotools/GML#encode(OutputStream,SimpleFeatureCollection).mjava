    @SuppressWarnings("unchecked")
    public void encode(OutputStream out, SimpleFeatureCollection collection) throws IOException {

        if (version == Version.GML2) {
            if (legacy) {
                encodeLegacyGML2(out, collection);
            } else {
                throw new IllegalStateException(
                        "Cannot encode a feature collection using GML2 (only WFS)");
            }
        } else if (version == Version.WFS1_0) {
            org.geotools.wfs.v1_0.WFSConfiguration configuration =
                    new org.geotools.wfs.v1_0.WFSConfiguration();
            configuration.getProperties().add(GMLConfiguration.OPTIMIZED_ENCODING);
            Encoder e = new Encoder(configuration);
            e.getNamespaces().declarePrefix(prefix, namespace);
            e.setIndenting(true);

            FeatureCollectionType featureCollectionType =
                    WfsFactory.eINSTANCE.createFeatureCollectionType();
            featureCollectionType.getFeature().add(collection);

            e.encode(featureCollectionType, org.geotools.wfs.WFS.FeatureCollection, out);
        } else if (version == Version.WFS1_1) {
            org.geotools.wfs.v1_1.WFSConfiguration configuration =
                    new org.geotools.wfs.v1_1.WFSConfiguration();
            configuration.getProperties().add(GMLConfiguration.OPTIMIZED_ENCODING);
            Encoder e = new Encoder(configuration);
            e.getNamespaces().declarePrefix(prefix, namespace);
            e.setIndenting(true);

            FeatureCollectionType featureCollectionType =
                    WfsFactory.eINSTANCE.createFeatureCollectionType();
            featureCollectionType.getFeature().add(collection);

            e.encode(featureCollectionType, org.geotools.wfs.WFS.FeatureCollection, out);
        } else {
            throw new IllegalStateException("Unable to handle requested version");
        }
    }

