    /**
     * Resolve an absolute or relative URL to a local file or jar URL. Relative URLs are resolved
     * against a context schema URL if provided.
     *
     * @param location an absolute or relative URL for a schema
     * @param context an absolute URL specifying the context schema of a relative location, or null
     *     if none
     * @return the string representation of a file or jar URL
     * @throws RuntimeException if a local resource could not be found
     */
    public String resolve(String location, String context) {
        URI locationUri;
        try {
            locationUri = new URI(location);
        } catch (URISyntaxException e) {
            throw new RuntimeException(e);
        }
        if (!locationUri.isAbsolute()) {
            // Location is relative, so need to resolve against context.
            if (context == null) {
                throw new RuntimeException(
                        "Could not determine absolute schema location for "
                                + location
                                + " because context schema location is unknown");
            }
            // Find the original absolute http/https (canonical) URL used to obtain the
            // context schema, so relative imports can be honoured across resolution source
            // boundaries or jar file boundaries.
            String originalContext = resolvedLocationToOriginalLocationMap.get(context);
            if (originalContext == null) {
                // Do not know any better context, so treat as original.
                originalContext = context;
            }
            // Resolve the location URI against the context URI to make it absolute.
            URI contextUri;
            try {
                contextUri = new URI(originalContext);
            } catch (URISyntaxException e) {
                throw new RuntimeException(e);
            }
            locationUri = contextUri.resolve(locationUri);
        }
        return resolve(locationUri.toString());
    }

