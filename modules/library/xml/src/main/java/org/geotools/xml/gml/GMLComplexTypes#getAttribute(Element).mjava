    private static AttributeDescriptor getAttribute(Element eg){
    	if(eg.getNamespace() == GMLSchema.NAMESPACE && (AbstractFeatureType.getInstance().getChildElements()[0] == eg || AbstractFeatureType.getInstance().getChildElements()[1] == eg || AbstractFeatureType.getInstance().getChildElements()[2] == eg))
    		return null;

        Class<?> type = Object.class;
    	if(eg.getType() != null){
	        if(eg.getType() instanceof SimpleType){
	            type = eg.getType().getInstanceType();
	        }else{
	            if(Object.class.equals(eg.getType().getInstanceType()) || Object[].class.equals(eg.getType().getInstanceType())){
	                // some work now
	                ElementGrouping child = ((ComplexType)eg.getType()).getChild();
	                if(child != null){
	                    List l = getAttributes(eg.getName(),child);
	                    if(l.isEmpty()){
	                        // who knows ... this really shouldn't happen
	                        type = eg.getType().getInstanceType();
	                    }else{
	                        if(l.size() == 1){
	                            return (AttributeDescriptor)l.iterator().next();
	                        }
	                        // Do some magic to find the type
	                        type = getCommonType(l);
	                    }
	                }else{
	                    // who knows ... this really shouldn't happen
	                    type = eg.getType().getInstanceType();
	                }
	            }else{
	                // we have a real type
	                type = eg.getType().getInstanceType();
	            }
	        }
    	}
        if(type == null)
            type = Object.class;
        
        // nillable should really be nillable, but in gt2.X nillable
        // in an attribute is equivalent to minOccurs == 0 as well
		boolean nillable = eg.isNillable()||eg.getMinOccurs() == 0;
        if( !nillable ){
            try{
                Object defaultValue = DataUtilities.defaultValue(type);
                AttributeTypeBuilder build = new AttributeTypeBuilder();
                build.setName( eg.getName() );
                build.setBinding( type );
                build.setNillable( nillable );
                build.setDefaultValue( defaultValue );

                return build.buildDescriptor(eg.getName());
                               
//                return AttributeTypeFactory.newAttributeDescriptor(
//                        eg.getName(),
//                        type,
//                        nillable,
//                        Filter.INCLUDE,
//                        defaultValue,
//                        null);
            } catch( IllegalArgumentException e ){
                // can happen if the type is not supported by the method.  
                // in this case I'm taking the easy way out and just not 
                // having a default value.
                logger.warning("Don't know how to make a default value for: "+type
                        +". Consider making it nillable.");
                
                AttributeTypeBuilder build = new AttributeTypeBuilder();
                build.setName( eg.getName() );
                build.setBinding( type );
                build.setNillable( nillable );
                return build.buildDescriptor(eg.getName());
//                return AttributeTypeFactory.newAttributeType(
//                        eg.getName(),
//                        type,
//                        nillable);
            }
        }
        AttributeTypeBuilder build = new AttributeTypeBuilder();
        build.setName( eg.getName() );
        build.setBinding( type );
        build.setNillable( nillable );
        return build.buildDescriptor(eg.getName());
        //return AttributeTypeFactory.newAttributeType(eg.getName(),type,(nillable));
    }

