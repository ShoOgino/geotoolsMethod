        /**
         * @see org.geotools.xml.schema.Type#encode(org.geotools.xml.schema.Element,
         *     java.lang.Object, org.geotools.xml.PrintHandler, java.util.Map)
         */
        @Override
        public void encode(
                Element element, Object value, PrintHandler output, Map<String, Object> hints)
                throws IOException, OperationNotSupportedException {
            if (!canEncode(element, value, hints)) {
                return;
            }

            Filter lf = (Filter) value;

            if (lf instanceof PropertyIsEqualTo) {
                BinaryComparisonOpType.getInstance()
                        .encode(
                                new FilterElement(
                                        "PropertyIsEqualTo",
                                        BinaryComparisonOpType.getInstance(),
                                        element),
                                value,
                                output,
                                hints);
            } else if (lf instanceof PropertyIsGreaterThan) {
                BinaryComparisonOpType.getInstance()
                        .encode(
                                new FilterElement(
                                        "PropertyIsGreaterThan",
                                        BinaryComparisonOpType.getInstance(),
                                        element),
                                value,
                                output,
                                hints);
            } else if (lf instanceof PropertyIsGreaterThanOrEqualTo) {
                BinaryComparisonOpType.getInstance()
                        .encode(
                                new FilterElement(
                                        "PropertyIsGreaterThanOrEqualTo",
                                        BinaryComparisonOpType.getInstance(),
                                        element),
                                value,
                                output,
                                hints);
            } else if (lf instanceof PropertyIsLessThan) {
                BinaryComparisonOpType.getInstance()
                        .encode(
                                new FilterElement(
                                        "PropertyIsLessThan",
                                        BinaryComparisonOpType.getInstance(),
                                        element),
                                value,
                                output,
                                hints);
            } else if (lf instanceof PropertyIsLessThanOrEqualTo) {
                BinaryComparisonOpType.getInstance()
                        .encode(
                                new FilterElement(
                                        "PropertyIsLessThanOrEqualTo",
                                        BinaryComparisonOpType.getInstance(),
                                        element),
                                value,
                                output,
                                hints);
            } else if (lf instanceof PropertyIsNotEqualTo) {
                BinaryComparisonOpType.getInstance()
                        .encode(
                                new FilterElement(
                                        "PropertyIsNotEqualTo",
                                        BinaryComparisonOpType.getInstance(),
                                        element),
                                value,
                                output,
                                hints);
            } else if (lf instanceof PropertyIsLike) {
                PropertyIsLikeType.getInstance()
                        .encode(
                                new FilterElement(
                                        "PropertyIsLike",
                                        PropertyIsLikeType.getInstance(),
                                        element),
                                value,
                                output,
                                hints);
            } else if (lf instanceof PropertyIsNull) {
                PropertyIsNullType.getInstance()
                        .encode(
                                new FilterElement(
                                        "PropertyIsNull",
                                        PropertyIsNullType.getInstance(),
                                        element),
                                value,
                                output,
                                hints);
            } else if (lf instanceof PropertyIsBetween) {
                PropertyIsBetweenType.getInstance()
                        .encode(
                                new FilterElement(
                                        "PropertyIsBetween",
                                        PropertyIsBetweenType.getInstance(),
                                        element),
                                value,
                                output,
                                hints);
            } else {
                throw new OperationNotSupportedException(
                        "Unknown filter type in ComparisonFilter: " + lf.getClass().getName());
            }
        }

