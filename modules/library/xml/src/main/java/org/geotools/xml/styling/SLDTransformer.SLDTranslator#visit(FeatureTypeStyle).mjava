        @Override
        public void visit(FeatureTypeStyle fts) {
            start("FeatureTypeStyle");

            if ((fts.getName() != null) && (fts.getName().length() > 0)) {
                element("Name", fts.getName());
            }

            if (fts.getDescription() != null && fts.getDescription().getTitle() != null)
                element("Title", fts.getDescription().getTitle());
            if (fts.getDescription() != null && fts.getDescription().getAbstract() != null)
                element("Abstract", fts.getDescription().getAbstract());

            if ((fts.featureTypeNames() != null) && (fts.featureTypeNames().size() > 0)) {
                element("FeatureTypeName", fts.featureTypeNames().iterator().next().toString());
            }

            if (fts.getTransformation() != null) {
                element("Transformation", fts.getTransformation());
            }

            List<SemanticType> sti = new ArrayList<>(fts.semanticTypeIdentifiers());

            if (sti.size() != 1 || !sti.get(0).equals(SemanticType.ANY)) {
                for (SemanticType semanticType : sti) {
                    element("SemanticTypeIdentifier", semanticType.name());
                }
            }

            for (Rule rule : fts.rules()) {
                rule.accept(this);
            }

            encodeVendorOptions(fts.getOptions());

            end("FeatureTypeStyle");
        }

