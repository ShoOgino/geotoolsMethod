        /**
         * @see org.geotools.xml.schema.Type#encode(org.geotools.xml.schema.Element,
         *     java.lang.Object, org.geotools.xml.PrintHandler, java.util.Map)
         */
        @Override
        public void encode(
                Element element, Object value, PrintHandler output, Map<String, Object> hints)
                throws IOException, OperationNotSupportedException {
            if (!canEncode(element, value, hints)) {
                return;
            }

            BinarySpatialOperator lf = (BinarySpatialOperator) value;

            if (lf instanceof BBOX) {
                BBOXType.getInstance()
                        .encode(
                                new FilterElement("BBOX", BBOXType.getInstance(), element),
                                value,
                                output,
                                hints);
            } else if (lf instanceof Beyond) {
                DistanceBufferType.getInstance()
                        .encode(
                                new FilterElement(
                                        "Beyond", DistanceBufferType.getInstance(), element),
                                value,
                                output,
                                hints);
            } else if (lf instanceof Contains) {
                BinarySpatialOpType.getInstance()
                        .encode(
                                new FilterElement(
                                        "Contains", BinarySpatialOpType.getInstance(), element),
                                value,
                                output,
                                hints);
            } else if (lf instanceof Crosses) {
                BinarySpatialOpType.getInstance()
                        .encode(
                                new FilterElement(
                                        "Crosses", BinarySpatialOpType.getInstance(), element),
                                value,
                                output,
                                hints);
            } else if (lf instanceof Disjoint) {
                BinarySpatialOpType.getInstance()
                        .encode(
                                new FilterElement(
                                        "Disjoint", BinarySpatialOpType.getInstance(), element),
                                value,
                                output,
                                hints);
            } else if (lf instanceof DWithin) {
                DistanceBufferType.getInstance()
                        .encode(
                                new FilterElement(
                                        "DWithin", DistanceBufferType.getInstance(), element),
                                value,
                                output,
                                hints);
            } else if (lf instanceof Equals) {
                BinarySpatialOpType.getInstance()
                        .encode(
                                new FilterElement(
                                        "Equals", BinarySpatialOpType.getInstance(), element),
                                value,
                                output,
                                hints);
            } else if (lf instanceof Intersects) {
                BinarySpatialOpType.getInstance()
                        .encode(
                                new FilterElement(
                                        "Intersects", BinarySpatialOpType.getInstance(), element),
                                value,
                                output,
                                hints);
            } else if (lf instanceof Overlaps) {
                BinarySpatialOpType.getInstance()
                        .encode(
                                new FilterElement(
                                        "Overlaps", BinarySpatialOpType.getInstance(), element),
                                value,
                                output,
                                hints);
            } else if (lf instanceof Touches) {
                BinarySpatialOpType.getInstance()
                        .encode(
                                new FilterElement(
                                        "Touches", BinarySpatialOpType.getInstance(), element),
                                value,
                                output,
                                hints);
            } else if (lf instanceof Within) {
                BinarySpatialOpType.getInstance()
                        .encode(
                                new FilterElement(
                                        "Within", BinarySpatialOpType.getInstance(), element),
                                value,
                                output,
                                hints);
            } else {

                throw new OperationNotSupportedException(
                        "Unknown filter type in ComparisonFilter: " + lf.getClass().getName());
            }
        }

