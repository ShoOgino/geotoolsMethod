        /**
         * @see org.geotools.xml.schema.Type#encode(org.geotools.xml.schema.Element,
         *     java.lang.Object, org.geotools.xml.PrintHandler, java.util.Map)
         */
        public void encode(Element element, Object value, PrintHandler output, Map hints)
                throws IOException, OperationNotSupportedException {
            if (!canEncode(element, value, hints)) {
                return;
            }

            BinarySpatialOperator lf = (BinarySpatialOperator) value;

            output.startElement(element.getNamespace(), element.getName(), null);
            short TYPE1 = Filters.getExpressionType(lf.getExpression1());
            short TYPE2 = Filters.getExpressionType(lf.getExpression2());
            if (TYPE1 == org.geotools.filter.ExpressionType.LITERAL_GEOMETRY) {
                elems[0].getType()
                        .encode(elems[0], lf.getExpression2(), output, hints); // prop name

                Geometry g = ((Geometry) ((Literal) lf.getExpression1()).getValue()).getEnvelope();
                elems[1].getType().encode(elems[1], g, output, hints); // geom
            } else {
                if (TYPE2 == org.geotools.filter.ExpressionType.LITERAL_GEOMETRY) {
                    elems[0].getType()
                            .encode(elems[0], lf.getExpression1(), output, hints); // prop name

                    ReferencedEnvelope re =
                            ((ReferencedEnvelope) ((Literal) lf.getExpression2()).getValue());
                    elems[1].getType().encode(elems[1], re, output, hints); // geom
                } else {
                    throw new OperationNotSupportedException(
                            "Either the left or right expr must be a literal for the property name : BBOXType");
                }
            }
            output.endElement(element.getNamespace(), element.getName());
        }

