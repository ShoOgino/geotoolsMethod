    @Test
    public void testMergeSchema() {
        // will load a doc that includes two schema docs which duplicate definitions

        File f;
        try {
            f = TestData.file(this, "merge.xsd");
            URI u = f.toURI();
            XSISAXHandler contentHandler = new XSISAXHandler(u);
            XSISAXHandler.setLogLevel(Level.WARNING);

            try {
                parser.parse(f, contentHandler);
            } catch (Exception e) {
                java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e);
                Assert.fail(e.toString());
            }

            try {
                Assert.assertNotNull("Schema missing", contentHandler.getSchema());
                // System.out.println(contentHandler.getSchema());

                Schema schema = contentHandler.getSchema();

                Assert.assertEquals(
                        "Should only have 2 elements, had " + schema.getElements().length,
                        2,
                        schema.getElements().length);
                Assert.assertEquals(
                        "Should only have 1 complexType, had " + schema.getComplexTypes().length,
                        1,
                        schema.getComplexTypes().length);

            } catch (Exception e) {
                java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e);
                Assert.fail(e.toString());
            }
        } catch (IOException e1) {
            java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e1);
            Assert.fail(e1.toString());
        }
    }

