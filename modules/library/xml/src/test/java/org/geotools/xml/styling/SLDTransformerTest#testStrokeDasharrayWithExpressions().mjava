    /** Test the transformation of a stroke-dasharray element that contains expressions. */
    @Test
    public void testStrokeDasharrayWithExpressions() throws Exception {

        String originalStyleXml =
                "<?xml version=\"1.0\" encoding=\"utf-8\"?>"
                        + "<sld:StyledLayerDescriptor xmlns=\"http://www.opengis.net/sld\""
                        + "                           xmlns:sld=\"http://www.opengis.net/sld\""
                        + "                           xmlns:ogc=\"http://www.opengis.net/ogc\""
                        + "                           xmlns:gml=\"http://www.opengis.net/gml\" version=\"1.0.0\">"
                        + "	<sld:NamedLayer>"
                        + "		<sld:Name>test</sld:Name>"
                        + "		<sld:UserStyle>"
                        + "			<sld:Name>test</sld:Name>"
                        + "			<sld:FeatureTypeStyle>"
                        + "				<sld:Name>name</sld:Name>"
                        + "				<sld:Rule>"
                        + "					 <LineSymbolizer>"
                        + "                     <Stroke>"
                        + "                         <CssParameter name=\"stroke\">#0000FF</CssParameter>"
                        + "                         <CssParameter name=\"stroke-dasharray\">"
                        + "                             <PropertyName>stroke1</PropertyName>"
                        + "                             1.0"
                        + "                             <PropertyName>stroke2</PropertyName>"
                        + "                             <![CDATA[2.0]]>"
                        + "                         </CssParameter>"
                        + "                     </Stroke>"
                        + "                 </LineSymbolizer>"
                        + "				</sld:Rule>"
                        + "			</sld:FeatureTypeStyle>"
                        + "		</sld:UserStyle>"
                        + "	</sld:NamedLayer>"
                        + "</sld:StyledLayerDescriptor>";

        SLDTransformer styleTransform = new SLDTransformer();
        styleTransform.setIndentation(2);
        StringWriter writerWriter = new StringWriter();
        styleTransform.transform(parseStyles(originalStyleXml), writerWriter);
        String transformedStyleXml = writerWriter.toString();

        Style style = parseStyles(transformedStyleXml)[0];

        assertNotNull("style is null", style);
        assertNotNull("feature type styles are null", style.featureTypeStyles());
        assertEquals(
                "more or less that one feature type style is available",
                1,
                style.featureTypeStyles().size());
        assertNotNull("rules are null", style.featureTypeStyles().get(0).rules());
        assertEquals(
                "more or less that one rule is available",
                1,
                style.featureTypeStyles().get(0).rules().size());

        Rule rule = style.featureTypeStyles().get(0).rules().get(0);
        assertNotNull("rule is null", rule);

        List<? extends Symbolizer> symbolizers = rule.symbolizers();
        assertNotNull("symbolizers are null", symbolizers);
        assertEquals("more or less that one symbolizer is available", 1, symbolizers.size());

        LineSymbolizer lineSymbolizer = (LineSymbolizer) symbolizers.get(0);
        assertNotNull("line symbolizer is null", lineSymbolizer);

        Stroke stroke = lineSymbolizer.getStroke();
        assertNotNull("stroke is null", stroke);
        assertNotNull("stroke dasharray is null", stroke.dashArray());

        List<Expression> expressions = stroke.dashArray();
        assertEquals("more or less expressions available", 4, expressions.size());
        assertEquals("not expected expression", expressions.get(0), ff.property("stroke1"));
        assertEquals("not expected expression", expressions.get(1), ff.literal(1.0));
        assertEquals("not expected expression", expressions.get(2), ff.property("stroke2"));
        assertEquals("not expected expression", expressions.get(3), ff.literal(2.0));
    }

