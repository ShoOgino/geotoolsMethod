    private Style validateWellKnownNameWithExpressionStyle(String xmlStyle) {

        StringReader stringReader = new StringReader(xmlStyle);
        SLDParser sldParser = new SLDParser(sf, stringReader);
        Style[] parsedStyles = sldParser.readXML();
        assertNotNull("parsing xml style returns null", parsedStyles);
        assertEquals("more or less that one style is available", 1, parsedStyles.length);
        Style style = parsedStyles[0];

        assertNotNull("style is null", style);
        assertNotNull("feature type styles are null", style.featureTypeStyles());
        assertEquals(
                "more or less that one feature type style is available",
                1,
                style.featureTypeStyles().size());
        assertNotNull("rules are null", style.featureTypeStyles().get(0).rules());
        assertEquals(
                "more or less that one rule is available",
                1,
                style.featureTypeStyles().get(0).rules().size());
        Rule rule = style.featureTypeStyles().get(0).rules().get(0);
        assertNotNull("rule is null", rule);

        List<? extends Symbolizer> symbolizers = rule.symbolizers();
        assertNotNull("symbolizers are null", symbolizers);
        assertEquals("more or less that one symbolizer is available", 1, symbolizers.size());
        PointSymbolizer pointSymbolizer = (PointSymbolizer) symbolizers.get(0);
        assertNotNull("point symbolizer is null", pointSymbolizer);

        Graphic graphic = pointSymbolizer.getGraphic();
        assertNotNull("graphic is null", graphic);
        assertNotNull("graphic symbols are null", graphic.graphicalSymbols());
        assertEquals(
                "more or less that one graphic symbol is available",
                1,
                graphic.graphicalSymbols().size());

        Mark mark = (Mark) graphic.graphicalSymbols().get(0);
        assertNotNull("mark is null", mark);
        assertNotNull("mark wellKnownName is null", mark.getWellKnownName());
        assertTrue("wellKnownName is not a function", mark.getWellKnownName() instanceof Function);

        Function function = (Function) mark.getWellKnownName();
        assertEquals("wellKnownName function is not strConcat", "strConcat", function.getName());
        assertEquals(
                "wellKnownName function have a wrong number of parameters",
                2,
                function.getParameters().size());

        Expression firstParameter = function.getParameters().get(0);
        assertNotNull("first parameter is null", firstParameter);
        assertTrue("first parameter is not a literal", firstParameter instanceof Literal);

        Literal literal = (Literal) firstParameter;
        assertEquals("literal value is different of 'mark-'", "mark-", literal.getValue());

        Expression secondParameter = function.getParameters().get(1);
        assertNotNull("second parameter is null", secondParameter);
        assertTrue("second parameter is", secondParameter instanceof PropertyName);

        PropertyName propertyName = (PropertyName) secondParameter;
        assertEquals(
                "property name is different of 'MARK_NAME'",
                "MARK_NAME",
                propertyName.getPropertyName());

        return style;
    }

