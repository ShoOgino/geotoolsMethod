    /**
     * Test of parseSLD method to ensure NamedLayer/Name and NamedLayer/NamedStyle are parsed
     * correctly
     *
     * @throws Exception boom
     */
    @Test
    public void testParseSLDNamedLayersOnly() throws Exception {
        StyleFactory factory = CommonFactoryFinder.getStyleFactory(null);
        java.net.URL surl = TestData.getResource(this, "namedLayers.sld");
        SLDParser stylereader = new SLDParser(factory, surl);

        StyledLayerDescriptor sld = stylereader.parseSLD();

        final int expectedLayerCount = 3;
        final String[] layerNames = {"Rivers", "Roads", "Houses"};
        final String[] namedStyleNames = {"CenterLine", "CenterLine", "Outline"};
        StyledLayer[] layers = sld.getStyledLayers();

        Assert.assertEquals(expectedLayerCount, layers.length);

        for (int i = 0; i < expectedLayerCount; i++) {
            Assert.assertTrue(layers[i] instanceof NamedLayer);
        }

        for (int i = 0; i < expectedLayerCount; i++) {
            Assert.assertEquals(layerNames[i], layers[i].getName());
        }

        for (int i = 0; i < expectedLayerCount; i++) {
            NamedLayer layer = (NamedLayer) layers[i];
            Assert.assertEquals(1, layer.getStyles().length);
            Assert.assertTrue(layer.getStyles()[0] instanceof NamedStyle);
            Assert.assertEquals(namedStyleNames[i], layer.getStyles()[0].getName());
        }

        // find the rivers layers and test the LayerFeatureConstraints
        for (int i = 0; i < expectedLayerCount; i++) {
            NamedLayer layer = (NamedLayer) layers[i];
            if (layer.getName().equals("Rivers")) {
                FeatureTypeConstraint[] featureTypeConstraints = layer.getLayerFeatureConstraints();
                final int featureTypeConstraintCount = 1;
                Assert.assertEquals(featureTypeConstraintCount, featureTypeConstraints.length);
                Filter filter = featureTypeConstraints[0].getFilter();
                Assert.assertTrue(filter instanceof PropertyIsEqualTo);
                PropertyIsEqualTo equal = (PropertyIsEqualTo) filter;
                Assert.assertTrue(equal.getExpression1() instanceof PropertyName);
                Assert.assertTrue(equal.getExpression2() instanceof Literal);
            }
        }
    }

