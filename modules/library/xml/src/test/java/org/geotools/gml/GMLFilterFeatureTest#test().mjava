    @Test
    public void test()
            throws TransformerException, SAXException, IOException, ParserConfigurationException {

        final String gml = createTestGMLInput();
        // System.out.format("%s\n", gml);
        final DefaultFeatureCollection featureCollection = new DefaultFeatureCollection();
        class Handler extends XMLFilterImpl implements GMLHandlerFeature {
            @Override
            public void feature(final SimpleFeature feature) {
                featureCollection.add(feature);
            }
        }
        final Handler handler = new Handler();
        final GMLFilterFeature filterFeature = new GMLFilterFeature(handler);
        final GMLFilterGeometry filterGeometry = new GMLFilterGeometry(filterFeature);
        final GMLFilterDocument filterDocument = new GMLFilterDocument(filterGeometry);
        final SAXParserFactory parserFactory = SAXParserFactory.newInstance();
        parserFactory.setNamespaceAware(true);
        final SAXParser parser = parserFactory.newSAXParser();
        final XMLReader reader = parser.getXMLReader();
        reader.setContentHandler(filterDocument);
        reader.parse(new InputSource(new StringReader(gml)));
        assertEquals(2, featureCollection.size());
        final Iterator<SimpleFeature> it = featureCollection.iterator();
        {
            final SimpleFeature feature = it.next();
            final Polygon polygon = (Polygon) feature.getAttribute("geometry");
            final String a = polygon.toString();
            final String b = polygonA().toString();
            assertEquals(a, b);
            final String value = (String) feature.getAttribute("my_string_attribute");
            assertEquals(value, helloWorldA);
        }
        {
            final SimpleFeature feature = it.next();
            final Polygon polygon = (Polygon) feature.getAttribute("geometry");
            final String a = polygon.toString();
            final String b = polygonB().toString();
            assertEquals(a, b);
            final String value = (String) feature.getAttribute("my_string_attribute");
            assertEquals(value, helloWorldB);
        }
    }

