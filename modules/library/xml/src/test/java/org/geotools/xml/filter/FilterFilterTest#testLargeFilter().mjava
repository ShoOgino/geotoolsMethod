    /**
     * As for GEOT-821, this test ensures that the filter parser makes proper use of the
     * characters(...) method in ContentHandler to not truncate the content of attribute names
     */
    @Test
    public void testLargeFilter() throws Exception {
        final int filterCount = 100;
        String filter =
                "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
                        + "<GetFeature xmlns=\"http://www.opengis.net/wfs\" xmlns:gml=\"http://www.opengis.net/gml\" xmlns:ogc=\"http://www.opengis.net/ogc\" version=\"1.0.0\" service=\"WFS\" outputFormat=\"GML2\"><Query typeName=\"topp:roadevent_pnt\"><ogc:PropertyName>roadeventid</ogc:PropertyName>"
                        + "<ogc:Filter>"
                        + "<ogc:Or>";
        for (int i = 0; i < filterCount; i++) {
            StringBuffer attName = new StringBuffer();
            for (int repCount = 0; repCount <= i; repCount++) {
                attName.append("eventtype-" + repCount + "_");
            }

            filter +=
                    "<ogc:PropertyIsEqualTo><ogc:PropertyName>"
                            + attName
                            + "</ogc:PropertyName>"
                            + "<ogc:Literal>literal-"
                            + i
                            + "</ogc:Literal>"
                            + "</ogc:PropertyIsEqualTo>";
        }
        filter += "</ogc:Or>" + "</ogc:Filter>" + "</Query>" + "</GetFeature>";

        StringReader reader = new StringReader(filter);

        InputSource requestSource = new InputSource(reader);

        //       Instantiate parsers and content handlers
        MyHandler contentHandler = new MyHandler();
        FilterFilter filterParser = new FilterFilter(contentHandler, null);
        GMLFilterGeometry geometryFilter = new GMLFilterGeometry(filterParser);
        GMLFilterDocument documentFilter = new GMLFilterDocument(geometryFilter);

        Logger logger = Logging.getLogger(FilterFilterTest.class);
        logger.setLevel(Level.INFO);
        ConsoleHandler consoleHandler = new ConsoleHandler();
        consoleHandler.setLevel(Level.INFO);
        logger.addHandler(consoleHandler);

        // read in XML file and parse to content handler
        SAXParserFactory factory = SAXParserFactory.newInstance();
        SAXParser parser = factory.newSAXParser();
        ParserAdapter adapter = new ParserAdapter(parser.getParser());
        adapter.setContentHandler(documentFilter);
        adapter.parse(requestSource);

        assertEquals(1, contentHandler.filters.size());
        Filter f = contentHandler.filters.get(0);
        assertTrue(f instanceof BinaryLogicOperator);
        assertThat(f, instanceOf(Or.class));

        int i = 0;
        Iterator<Filter> filters = ((BinaryLogicOperator) f).getChildren().iterator();
        while (filters.hasNext()) {
            BinaryComparisonOperator subFilter = (BinaryComparisonOperator) filters.next();
            StringBuffer attName = new StringBuffer();
            for (int repCount = 0; repCount <= i; repCount++) {
                attName.append("eventtype-" + repCount + "_");
            }
            String parsedName = ((PropertyName) subFilter.getExpression1()).getPropertyName();
            assertEquals("at index " + i, attName.toString(), parsedName);
            assertEquals("literal-" + i, ((Literal) subFilter.getExpression2()).getValue());
            i++;
        }
        assertEquals(filterCount, i);
    }

