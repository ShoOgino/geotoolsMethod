	/**
	 * Transforms the cqlDateTime to a literal date. 
	 * @param cqlDateTime a string with the format yyyy-MM-ddTHH:mm:ss.s[(+|-)HH:mm]
	 * @return a literal Date
	 * @throws CQLException
	 */
	private Literal asLiteralDate(final String cqlDateTime) throws CQLException {

		try {
			final String strDate = extractDate(cqlDateTime);
			final String strTime = extractTime(cqlDateTime);
			String timeZoneOffset = extractTimeZone(cqlDateTime);

			StringBuilder format = new StringBuilder("yyyy-MM-dd");
			if (!"".equals(strTime)) {
				format.append(" HH:mm:ss");
			}
			TimeZone tz = null;
			if (!"".equals(timeZoneOffset)) {
				if ("Z".equals(timeZoneOffset)) { // it is Zulu or 0000 zone (old syntax)
					timeZoneOffset = "GMT+00:00";
				}
				tz = TimeZone.getTimeZone(timeZoneOffset);
			} else { // the time zone offset wasn't specified then the time zone is that provided by the host
				tz = TimeZone.getDefault();
			}
			DateFormat formatter = new SimpleDateFormat(format.toString());
			formatter.setTimeZone(tz);

			Date date;
			if (!"".equals(strTime)) {
				date = formatter.parse(strDate + " " + strTime);
			} else {
				date = formatter.parse(strDate);
			}
			Literal literalDate = filterFactory.literal(date);

			return literalDate;
		} catch (java.text.ParseException e) {
			throw new CQLException("Unsupported date time format: "
					+ e.getMessage(), this.cqlSource);
		}
		
	}

