	/**
	 * Transforms the cqlDateTime to a literal date. 
	 * @param cqlDateTime a string with the format yyyy-MM-ddTHH:mm:ss.s[(+|-)HH:mm]
	 * @return a literal Date
	 * @throws CQLException
	 */
	private Literal asLiteralDate(final String cqlDateTime) throws CQLException {
		try {
			
			final String date = extractDate(cqlDateTime);
			final String time = extractTime(cqlDateTime);
			final String timeZone = extractTimeZone(cqlDateTime);
			
			StringBuilder format = new StringBuilder( "yyyy-MM-dd" );
			if(! "".equals(time)){
			    format.append("'T'HH:mm:ss"); 
			}
			if(! "".equals(timeZone)){
				if("Z".equals(timeZone)){ // it is Zulu or 0000 zone (old semantic)
					format.append("'Z'");
				} else { // GMT zone [+|-]0000 // new semantic
					format.append("Z");
				}
			}
			String dateTimeFormat = format.toString();
			DateFormat formatter = new SimpleDateFormat(dateTimeFormat);
			formatter.setTimeZone( TimeZone.getTimeZone("GMT") );

			Date dateTime = formatter.parse(date + "T"+ time + timeZone);
			Literal literalDate = filterFactory.literal(dateTime);

			return literalDate;
		} catch (java.text.ParseException e) {
			throw new CQLException("Unsupported date time format: "
					+ e.getMessage(), this.cqlSource);
		}
	}

