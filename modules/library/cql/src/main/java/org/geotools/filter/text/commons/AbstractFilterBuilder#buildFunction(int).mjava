    /**
     * Builds a function expression
     * 
     * @param functionNode symbol used to identify the function node in parser tree
     * @return Function
     * @throws CQLException
     */
    public Function buildFunction(final int functionNode) throws CQLException {
        
        String functionName = null; // token.image;

        // extracts the arguments from stack. Each argument in the stack
        // is preceded by an argument node. Finally extracts the function name
        List<Expression> argList = new LinkedList<Expression>();

        while (!resultStack.empty()) {
            Result node = resultStack.peek();

            if (node.getNodeType() == functionNode ) {
                // gets the function's name
                Result funcNameNode = resultStack.popResult();
                functionName = funcNameNode.getToken().toString();

                break;
            }

            // ejects the argument node
            resultStack.popResult();

            // extracts the argument value
            Expression arg = resultStack.popExpression();
            argList.add(arg);
        }

        // Puts the argument in correct order
        Collections.reverse(argList);

        
        Expression[] args = (Expression[]) argList
                .toArray(new Expression[argList.size()]);

        Function function = null;
        try{
            function = filterFactory.function(functionName, args);

            if (function == null) {
                throw new CQLException("Function not found.", this.cqlSource);
            }
        	
        } catch (Exception ex){
            throw new CQLException("Function not found.", this.cqlSource);
        }

        return function;
    }

