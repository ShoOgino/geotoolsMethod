    /**
     * Parses the input string which has to be a list of OGC CQL predicates
     * separated by "<code>;</code>" into a <code>List</code> of
     * <code>Filter</code>s, using the provided FilterFactory.
     *
     * @param cqlSequencePredicate
     *            a list of OGC CQL predicates separated by "<code>;</code>"
     *
     * @param filterFactory
     *            the {@link FilterFactory} to use for the creation of the
     *            Expression. If it is null the method finds the default implementation.
     * @return a List of {@link Filter}, one for each input CQL statement
     */
    public static List<Filter> toFilterList(final String cqlSequencePredicate, final FilterFactory filterFactory)
        throws CQLException {
        
        CQLCompilerFactory compilerFactory = new CQLCompilerFactory();

        List<Filter> filters = CompilerUtil.parseFilterList(cqlSequencePredicate, compilerFactory, filterFactory);

        return filters;
    }

