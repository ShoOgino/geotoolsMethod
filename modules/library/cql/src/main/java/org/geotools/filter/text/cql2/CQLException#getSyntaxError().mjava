    /**
     * Returns the syntax error presents in the last sequence of characters analyzed.
     *
     * @return the syntax error
     */
    public String getSyntaxError() {

        if (currentToken == null) {
            return getMessage();
        }

        // builds two lines the first has the source string, the second has
        // the pointer to syntax error.

        // First Line
        StringBuffer msg = new StringBuffer(this.cqlSource);
        msg.append('\n');

        // Second Line
        // searches the last token recognized
        IToken curToken = this.currentToken;

        while (curToken.hasNext()) curToken = curToken.next();

        // add the pointer to error
        int column = curToken.beginColumn() - 1;

        for (int i = 0; i < column; i++) {
            msg.append(' ');
        }

        msg.append('^').append('\n');
        msg.append(super.getMessage());

        return msg.toString();
    }

