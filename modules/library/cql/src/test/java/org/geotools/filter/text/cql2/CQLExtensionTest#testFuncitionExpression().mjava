    /**
     * Test Function Expression
     *
     * <p>Note: this solves the bug GEOT-1167
     */
    @Test
    public void testFuncitionExpression() throws Exception {

        final String cqlExpression = "strConcat(A, B)";

        // simple attribute as argument
        Expression resultExpr = CQL.toExpression(cqlExpression);

        Assert.assertNotNull(resultExpr);
        Assert.assertTrue(resultExpr instanceof Function);

        Function function1 = (Function) resultExpr;
        Assert.assertEquals(2, function1.getParameters().size());

        Expression arg1 = function1.getParameters().get(0);
        Assert.assertTrue(arg1 instanceof PropertyName);
        Assert.assertEquals("A", ((PropertyName) arg1).getPropertyName());

        Expression arg2 = function1.getParameters().get(1);
        Assert.assertTrue(arg2 instanceof PropertyName);
        Assert.assertEquals("B", ((PropertyName) arg2).getPropertyName());

        // compound attribute as argument
        final String arg1Name = "gmd:aa:bb.gmd:cc.gmd:dd";
        final String arg2Name = "gmd:ee:ff.gmd:gg.gmd:hh";

        final String cqlExpression2 = "strConcat(" + arg1Name + ", " + arg2Name + ")";

        resultExpr = CQL.toExpression(cqlExpression2);

        Assert.assertNotNull(resultExpr);
        Assert.assertTrue(resultExpr instanceof Function);

        Function function = (Function) resultExpr;
        Assert.assertEquals(2, function.getParameters().size());

        arg1 = function.getParameters().get(0);
        Assert.assertTrue(arg1 instanceof PropertyName);

        final String arg1Expected = arg1Name.replace('.', '/');
        Assert.assertEquals(arg1Expected, ((PropertyName) arg1).getPropertyName());

        arg2 = function.getParameters().get(1);
        Assert.assertTrue(arg2 instanceof PropertyName);

        final String arg2Expected = arg2Name.replace('.', '/');
        Assert.assertEquals(arg2Expected, ((PropertyName) arg2).getPropertyName());
    }

