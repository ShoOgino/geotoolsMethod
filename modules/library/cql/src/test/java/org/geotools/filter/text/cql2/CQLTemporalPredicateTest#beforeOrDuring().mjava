    /**
     * Test temporal predicate. This tests <b>BEFORE or DURING</b> rule[*]
     *
     * <p>
     *
     * <pre>
     *  &lt;temporal predicate  &gt;::=
     *          &lt;attribute_name &gt; BEFORE  &lt;date-time expression &gt;
     *      |   &lt;b&gt; &lt;attribute_name &gt; BEFORE OR DURING  &lt;period &gt;[*]&lt;/b&gt;
     *      |   &lt;attribute_name &gt; DURING  &lt;period &gt;
     *      |   &lt;attribute_name &gt; DURING OR AFTER  &lt;period &gt;
     *      |   &lt;attribute_name &gt; AFTER  &lt;date-time expression &gt;
     *  &lt;date-time expression &gt; ::=  &lt;date-time &gt; |  &lt;period &gt;
     *  &lt;period &gt; ::=
     *          &lt;date-time &gt; &quot;/&quot;  &lt;date-time &gt;[*]
     *      |   &lt;date-time &gt; &quot;/&quot;  &lt;duration &gt;[*]
     *      |   &lt;duration &gt; &quot;/&quot;  &lt;date-time &gt;[*]
     * </pre>
     */
    @Test
    public void beforeOrDuring() throws Exception {
        // -------------------------------------------------------------
        // <attribute_name> BEFORE OR DURING <period>
        // -------------------------------------------------------------
        // ATTR1 BEFORE OR DURING 2006-11-31T01:30:00Z/2006-12-31T01:30:00Z
        Filter resultFilter =
                CompilerUtil.parseFilter(
                        this.language,
                        FilterCQLSample.FILTER_BEFORE_OR_DURING_PERIOD_BETWEEN_DATES);

        Assert.assertNotNull("Filter expected", resultFilter);

        Filter expected =
                FilterCQLSample.getSample(
                        FilterCQLSample.FILTER_BEFORE_OR_DURING_PERIOD_BETWEEN_DATES);

        Assert.assertEquals("less than or equal the last date of period ", expected, resultFilter);

        // ATTR1 BEFORE OR DURING P10Y10M10DT5H5M5S/2006-11-30T01:30:00Z
        resultFilter =
                CompilerUtil.parseFilter(
                        this.language, FilterCQLSample.FILTER_BEFORE_OR_DURING_PERIOD_YMD_HMS_DATE);

        Assert.assertNotNull("Filter expected", resultFilter);

        expected =
                FilterCQLSample.getSample(
                        FilterCQLSample.FILTER_BEFORE_OR_DURING_PERIOD_YMD_HMS_DATE);

        Assert.assertEquals(" filter", expected, resultFilter);

        // ATTR1 BEFORE OR DURING 2006-11-30T01:30:00Z/P10Y10M10DT5H5M5S
        resultFilter =
                CompilerUtil.parseFilter(
                        this.language, FilterCQLSample.FILTER_BEFORE_OR_DURING_PERIOD_DATE_YMD_HMS);

        Assert.assertNotNull("Filter expected", resultFilter);

        expected =
                FilterCQLSample.getSample(
                        FilterCQLSample.FILTER_BEFORE_OR_DURING_PERIOD_DATE_YMD_HMS);

        Assert.assertEquals(" filter", expected, resultFilter);
    }

