    /**
     * @param result strConcat( strConcat(QS, strConcat('/', RT)), strConcat(strConcat('/', NUMB),
     *     strConcat('/', BSUFF)) )")
     */
    private void assertFunctionCompositionComplex(final Expression result) {

        Assert.assertTrue(result instanceof Function);

        Function function = (Function) result;
        Assert.assertEquals(2, function.getParameters().size());

        // asserts for strConcat(QS, strConcat('/', RT))
        Expression arg1 = function.getParameters().get(0);
        Assert.assertTrue(arg1 instanceof Function);

        Function function1 = (Function) arg1;
        Assert.assertEquals(2, function1.getParameters().size());

        Expression funcion1Arg1 = function1.getParameters().get(0);
        Assert.assertTrue(funcion1Arg1 instanceof PropertyName);
        Assert.assertEquals("QS", ((PropertyName) funcion1Arg1).getPropertyName());

        Expression arg11 = function1.getParameters().get(1);
        Assert.assertTrue(arg11 instanceof Function);
        Function function11 = (Function) arg11;

        Expression funcion11Arg1 = function11.getParameters().get(0);
        Assert.assertTrue(funcion11Arg1 instanceof Literal);
        Assert.assertEquals("/", ((Literal) funcion11Arg1).getValue());

        // asserts for strConcat(strConcat('/', NUMB), strConcat('/', BSUFF)) )"
        Expression arg2 = function.getParameters().get(1);
        Assert.assertTrue(arg2 instanceof Function);
    }

