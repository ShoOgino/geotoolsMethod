    /** Test {@link Parameter} construction. */
    @Test
    public void testParameterValue() throws IOException, ClassNotFoundException {
        Parameter<?> parameter;
        ParameterDescriptor<?> descriptor;
        Set<?> validValues;

        parameter = Parameter.create("Test", 14);
        descriptor = parameter.getDescriptor();
        assertNull("unit", parameter.getUnit());
        assertEquals("intValue", 14, parameter.intValue());
        assertEquals("doubleValue", 14, parameter.doubleValue(), 0);
        assertEquals("type", Integer.class, descriptor.getValueClass());
        assertEquals("name", "Test", descriptor.getName().getCode());
        assertEquals("defaultValue", 0, descriptor.getDefaultValue());
        assertNull("minimum", descriptor.getMinimumValue());
        assertNull("maximum", descriptor.getMaximumValue());
        assertNull("unit", descriptor.getUnit());
        assertNull("validValues", descriptor.getValidValues());
        try {
            parameter.doubleValue(SI.METRE);
            fail("doubleValue(METER)");
        } catch (IllegalStateException exception) {
            // This is the expected exception.
        }
        try {
            parameter.stringValue();
            fail("stringValue()");
        } catch (InvalidParameterTypeException exception) {
            // This is the expected exception.
            assertEquals("Test", exception.getParameterName());
        }
        serialize(parameter);

        parameter = Parameter.create("Test", 3, SI.METRE);
        descriptor = parameter.getDescriptor();
        assertEquals("intValue", 3, parameter.intValue());
        assertEquals("doubleValue", 3, parameter.doubleValue(), 0);
        assertEquals("doubleValue", 300, parameter.doubleValue(MetricPrefix.CENTI(SI.METRE)), 0);
        assertEquals("name", "Test", descriptor.getName().getCode());
        assertEquals("unit", SI.METRE, descriptor.getUnit());
        assertNull("defaultValue", descriptor.getDefaultValue());
        assertNull("minimum", descriptor.getMinimumValue());
        assertNull("maximum", descriptor.getMaximumValue());
        assertNull("validValues", descriptor.getValidValues());
        try {
            parameter.stringValue();
            fail("stringValue()");
        } catch (InvalidParameterTypeException exception) {
            // This is the expected exception.
            assertEquals("Test", exception.getParameterName());
        }
        serialize(parameter);

        parameter = Parameter.create("Test", AxisDirection.class, AxisDirection.NORTH);
        descriptor = parameter.getDescriptor();
        validValues = descriptor.getValidValues();
        assertEquals("value", AxisDirection.NORTH, parameter.getValue());
        assertEquals("name", "Test", descriptor.getName().getCode());
        assertNull("unit", descriptor.getUnit());
        assertNull("defaultValue", descriptor.getDefaultValue());
        assertNull("minimum", descriptor.getMinimumValue());
        assertNull("maximum", descriptor.getMaximumValue());
        assertTrue("validValues", validValues.contains(AxisDirection.NORTH));
        assertTrue("validValues", validValues.contains(AxisDirection.SOUTH));
        assertTrue("validValues", validValues.contains(AxisDirection.DISPLAY_LEFT));
        assertTrue("validValues", validValues.contains(AxisDirection.PAST));
        assertEquals(
                "validValues", new HashSet<>(Arrays.asList(AxisDirection.values())), validValues);
        try {
            parameter.doubleValue();
            fail("doubleValue should not be allowed on AxisDirection");
        } catch (InvalidParameterTypeException exception) {
            // This is the expected exception.
            assertEquals("Test", exception.getParameterName());
        }
        serialize(parameter);
    }

