    /** Test {@link DefaultParameterDescriptor} construction. */
    @Test
    public void testParameterDescriptor() {
        ParameterDescriptor<Double> dDescriptor;
        ParameterValue<Double> parameter;

        dDescriptor = DefaultParameterDescriptor.create("Test", 12, 4, 20, SI.METRE);
        parameter = dDescriptor.createValue();
        assertEquals("name", "Test", dDescriptor.getName().getCode());
        assertEquals("unit", SI.METRE, dDescriptor.getUnit());
        assertEquals("class", Double.class, dDescriptor.getValueClass());
        assertEquals("defaultValue", 12.0, dDescriptor.getDefaultValue().doubleValue(), 0.0);
        assertEquals("minimum", 4.0, dDescriptor.getMinimumValue());
        assertEquals("maximum", 20.0, dDescriptor.getMaximumValue());
        assertEquals("value", 12, parameter.intValue());
        assertEquals("unit", SI.METRE, parameter.getUnit());
        for (int i = 4; i <= 20; i++) {
            parameter.setValue(i);
            assertEquals("value", Double.valueOf(i), parameter.getValue());
            assertEquals("unit", SI.METRE, parameter.getUnit());
            assertEquals("value", i, parameter.doubleValue(SI.METRE), 0);
        }
        try {
            parameter.setValue(3.0);
            fail("setValue(< min)");
        } catch (InvalidParameterValueException exception) {
            // This is the expected exception.
            assertEquals("Test", exception.getParameterName());
        }
        try {
            parameter.setValue("12");
            fail("setValue(Sring)");
        } catch (InvalidParameterValueException exception) {
            // This is the expected exception.
            assertEquals("Test", exception.getParameterName());
        }
        for (int i = 400; i <= 2000; i += 100) {
            parameter.setValue(i, MetricPrefix.CENTI(SI.METRE));
            assertEquals("value", Double.valueOf(i), parameter.getValue());
            assertEquals("unit", MetricPrefix.CENTI(SI.METRE), parameter.getUnit());
            assertEquals("value", i / 100, parameter.doubleValue(SI.METRE), 0);
        }
        try {
            DefaultParameterDescriptor.create("Test", 3, 4, 20);
            fail("setValue(< min)");
        } catch (InvalidParameterValueException exception) {
            // This is the expected exception.
            assertEquals("Test", exception.getParameterName());
        }
        try {
            DefaultParameterDescriptor.create("Test", 12, 20, 4);
            fail("ParameterDescriptor(min > max)");
        } catch (IllegalArgumentException exception) {
            // This is the expected exception.
        }
    }

