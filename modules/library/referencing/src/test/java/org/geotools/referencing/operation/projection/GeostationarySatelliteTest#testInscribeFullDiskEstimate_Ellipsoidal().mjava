    @Test
    public void testInscribeFullDiskEstimate_Ellipsoidal() throws TransformException, FactoryException {

        final Envelope2D inscribed = GeostationarySatellite.inscribeFullDiskEstimate(ellipsoidalGeosCRS);
        assertThat(inscribed, is(notNullValue()));

        final DirectPosition2D p = new DirectPosition2D();

        p.setLocation(inscribed.getMaxX(), inscribed.getMaxY());
        ellipsoidalGeosToGeog.transform(p, p);
        assertThat(p, is(notNullValue()));
        geogToEllipsoidalGeos.transform(p, p);
        assertThat(p, is(notNullValue()));

        p.setLocation(inscribed.getMaxX(), inscribed.getMinY());
        ellipsoidalGeosToGeog.transform(p, p);
        assertThat(p, is(notNullValue()));
        geogToEllipsoidalGeos.transform(p, p);
        assertThat(p, is(notNullValue()));

        p.setLocation(inscribed.getMinX(), inscribed.getMaxY());
        ellipsoidalGeosToGeog.transform(p, p);
        assertThat(p, is(notNullValue()));
        geogToEllipsoidalGeos.transform(p, p);
        assertThat(p, is(notNullValue()));

        p.setLocation(inscribed.getMinX(), inscribed.getMinY());
        ellipsoidalGeosToGeog.transform(p, p);
        assertThat(p, is(notNullValue()));
        geogToEllipsoidalGeos.transform(p, p);
        assertThat(p, is(notNullValue()));

        // Inscribed rectangle is smaller than largest inscribing rectangle, hence ESTIMATE
//        final double tickle = 1;
//        expectProjectionException(new Testable() { public void test() throws Exception {
//            p.setLocation(inscribed.getMaxX() + tickle, inscribed.getMaxY() + tickle);
//            ellipsoidalGeosToGeog.transform(p, p);
//        }});
//        expectProjectionException(new Testable() { public void test() throws Exception {
//            p.setLocation(inscribed.getMaxX() + tickle, inscribed.getMinY() - tickle);
//            ellipsoidalGeosToGeog.transform(p, p);
//        }});
//        expectProjectionException(new Testable() { public void test() throws Exception {
//            p.setLocation(inscribed.getMinX() - tickle, inscribed.getMaxY() + tickle);
//            ellipsoidalGeosToGeog.transform(p, p);
//        }});
//        expectProjectionException(new Testable() { public void test() throws Exception {
//            p.setLocation(inscribed.getMinX() - tickle, inscribed.getMinY() - tickle);
//            ellipsoidalGeosToGeog.transform(p, p);
//        }});
    }

