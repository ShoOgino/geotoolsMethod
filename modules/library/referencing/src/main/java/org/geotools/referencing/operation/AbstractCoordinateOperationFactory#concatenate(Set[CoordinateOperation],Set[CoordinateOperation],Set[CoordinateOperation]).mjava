    /**
     * Concatenate two sets of operation steps. The result is the concatenation of all the steps on
     * the firt set with all the steps on the second set (cartesian product), which will be then
     * concatenated with all the steps on the third step.
     *
     * <p>If an operation is an {@link #AXIS_CHANGES}, it will be included as part of the second
     * operation instead of creating an {@link ConcatenatedOperation}. If a concatenated operation
     * is created, it will get an automatically generated name.
     *
     * @param candidatesStep1 The first set of candidate steps
     * @param candidatesStep2 The second set of candidate steps
     * @param candidatesStep3 The third step of candidate steps
     * @return A set of operations
     * @throws FactoryException if any of the concatenated operations couldn't be constructed.
     * @see #concatenate(CoordinateOperation, CoordinateOperation, CoordinateOperation)
     */
    protected Set<CoordinateOperation> concatenate(
            final Set<CoordinateOperation> candidatesStep1,
            final Set<CoordinateOperation> candidatesStep2,
            final Set<CoordinateOperation> candidatesStep3)
            throws FactoryException {
        HashSet<CoordinateOperation> result = new HashSet<CoordinateOperation>();
        for (CoordinateOperation step1 : candidatesStep1) {
            for (CoordinateOperation step2 : candidatesStep2) {
                for (CoordinateOperation step3 : candidatesStep3) {
                    result.add(concatenate(step1, step2, step3));
                }
            }
        }
        return result;
    }

