    /**
     * Constructs a parameter group from a set of properties. The properties map is given unchanged
     * to the {@linkplain AbstractIdentifiedObject#AbstractIdentifiedObject(Map) super-class
     * constructor}.
     *
     * @param properties Set of properties. Should contains at least {@code "name"}.
     * @param minimumOccurs The {@linkplain #getMinimumOccurs minimum number of times} that values
     *     for this parameter group are required.
     * @param maximumOccurs The {@linkplain #getMaximumOccurs maximum number of times} that values
     *     for this parameter group are required.
     * @param parameters The {@linkplain #descriptors() parameter descriptors} for this group.
     */
    public DefaultParameterDescriptorGroup(
            final Map<String, ?> properties,
            final int minimumOccurs,
            final int maximumOccurs,
            GeneralParameterDescriptor[] parameters) {
        super(properties, minimumOccurs, maximumOccurs);
        this.maximumOccurs = maximumOccurs;
        ensureNonNull("parameters", parameters);
        this.parameters = new GeneralParameterDescriptor[parameters.length];
        for (int i = 0; i < parameters.length; i++) {
            this.parameters[i] = parameters[i];
            ensureNonNull("parameters", parameters, i);
        }
        /*
         * Ensure there is no conflict in parameter names.
         */
        parameters = this.parameters;
        for (int i = 0; i < parameters.length; i++) {
            final String name = parameters[i].getName().getCode();
            for (int j = 0; j < parameters.length; j++) {
                if (i != j) {
                    if (nameMatches(parameters[j], name)) {
                        throw new InvalidParameterNameException(
                                Errors.format(
                                        ErrorKeys.PARAMETER_NAME_CLASH_$4,
                                        parameters[j].getName().getCode(),
                                        j,
                                        name,
                                        i),
                                name);
                    }
                }
            }
        }
    }

