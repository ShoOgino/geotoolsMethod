        protected void initUnits() {
            /**
             * Labels and alias are only defined on the DEFAULT format instance, so these definitions are not inherited by subclassing DefaultFormat.
             * Therefore, we need to clone these definitions in our GT formats
             */
            DefaultFormat base = (DefaultFormat) Units.getDefaultFormat();
            try {

                java.lang.reflect.Field nameToUnitField = DefaultFormat.class
                        .getDeclaredField("_nameToUnit");
                nameToUnitField.setAccessible(true);
                HashMap<String, Unit<?>> nameToUnitMap = (HashMap<String, Unit<?>>) nameToUnitField
                        .get(base);

                java.lang.reflect.Field unitToNameField = DefaultFormat.class
                        .getDeclaredField("_unitToName");
                unitToNameField.setAccessible(true);
                HashMap<String, Unit<?>> unitToNameMap = (HashMap<String, Unit<?>>) unitToNameField
                        .get(base);
                for (Map.Entry<String, Unit<?>> entry : nameToUnitMap.entrySet()) {
                    String name = entry.getKey();
                    Unit<?> unit = entry.getValue();
                    if (unitToNameMap.containsKey(unit)
                            && name.equals(unitToNameMap.get(unit))) {
                        label(unit, name);
                        addUnit(unit);
                    } else {
                        alias(unit, name);
                    }
                }
            } catch (Throwable t) {
                // we tried...
            }
        }

