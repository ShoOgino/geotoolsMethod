    /**
     * Returns all available operations from a compound to a single coordinate reference system.
     *
     * @param sourceCRS Input coordinate reference system.
     * @param targetCRS Output coordinate reference system.
     * @param limit The maximum number of operations to be returned. Use -1 to return all the available operations. Use 1 to return just one
     *        operations. Currently, the behavior for other values of {@code limit} is undefined.
     * @return A {@code Set} of coordinate operations from {@code sourceCRS} to {@code targetCRS}.
     * @throws FactoryException If the operation can't be constructed.
     *
     * @todo (GEOT-401) This method works for some simple cases (e.g. no datum change), and gives up otherwise. Before to give up at the end of this
     *       method, we should try the following:
     *       <ul>
     *       <li>Maybe {@code sourceCRS} uses a non-ellipsoidal height. We should replace the non-ellipsoidal height by an ellipsoidal one, create a
     *       transformation step for that (to be concatenated), and then try again this operation step.</li>
     *
     *       <li>Maybe {@code sourceCRS} contains some extra axis, like a temporal CRS. We should revisit this code in other to lets supplemental
     *       ordinates to be pass through or removed.</li>
     *       </ul>
     */
    protected Set<CoordinateOperation> findOperationSteps(final CompoundCRS sourceCRS,
            final SingleCRS targetCRS, int limit)
            throws FactoryException
    {
        final List<SingleCRS> sources = DefaultCompoundCRS.getSingleCRS(sourceCRS);
        if (sources.size() == 1) {
            return findOperations(sources.get(0), targetCRS, limit);
        }
        if (!needsGeodetic3D(sources, targetCRS)) {
            // No need for a datum change (see 'needGeodetic3D' javadoc).
            final List<SingleCRS> targets = Collections.singletonList(targetCRS);
            return Collections
                    .singleton(createOperationStep(sourceCRS, sources, targetCRS, targets));
        }
        /*
         * There is a change of datum.  It may be a vertical datum change (for example from
         * ellipsoidal to geoidal height), in which case geographic coordinates are usually
         * needed. It may also be a geodetic datum change, in which case the height is part
         * of computation. Try to convert the source CRS into a 3D-geodetic CRS.
         */
        final CoordinateReferenceSystem source3D = getFactoryContainer().toGeodetic3D(sourceCRS);
        if (source3D != sourceCRS) {
            return findOperations(source3D, targetCRS, limit);
        }
        /*
         * TODO: Search for non-ellipsoidal height, and lets supplemental axis (e.g. time)
         *       pass through. See javadoc comments above.
         */
        return Collections.emptySet();
    }

