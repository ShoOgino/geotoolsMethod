    /**
     * Returns the <cite>Spatial Reference System</cite> identifier, or {@code null} if none. OGC
     * Web Services have the concept of a Spatial Reference System identifier used to communicate
     * CRS information between systems.
     * <p>
     * Spatial Reference System (ie SRS) values:
     * <ul>
     *   <li>{@code EPSG:4326} - this is the usual format understood to mean <cite>forceXY</cite>
     *       order. Note that the axis order is <em>not necessarly</em> (<var>longitude</var>,
     *       <var>latitude</var>), but this is the common behavior we observe in practice.</li>
     *   <li>{@code AUTO:43200} - </li>
     *   <li>{@code ogc:uri:.....} - understood to match the EPSG database axis order.</li>
     *   <li>Well Known Text (WKT)</li>
     * </ul>
     *
     * @param  crs The coordinate reference system, or {@code null}.
     * @return SRS represented as a string for communication between systems, or {@code null}.
     *
     * @since 2.5
     */
    public static String toSRS(final CoordinateReferenceSystem crs) {
        boolean forcedLonLat = false;
        try {
            forcedLonLat = Boolean.getBoolean("org.geotools.referencing.forceXY") || 
                Boolean.TRUE.equals(Hints.getSystemDefault(Hints.FORCE_LONGITUDE_FIRST_AXIS_ORDER));
        } catch(Exception e) {
            // all right it was a best effort attempt
            LOGGER.log(Level.FINE, "Failed to determine if we are in forced lon/lat mode", e);
        }
        if (forcedLonLat && CRS.getAxisOrder(crs, false) == AxisOrder.NORTH_EAST) {
            try {
                // not usual axis order, check if we can have a EPSG code
                Integer code = CRS.lookupEpsgCode(crs, false);
                if (code != null) {
                    return "urn:ogc:def:crs:EPSG::" + code;
                }
            } catch (Exception e) {
                // all right it was a best effort attempt
                LOGGER.log(Level.FINE, "Failed to determine EPSG code", e);
            }
        }
        
        // fall back on simple lookups
        if( crs == null ){
            return null;
        }
        final Set<ReferenceIdentifier> identifiers = crs.getIdentifiers();
        if (identifiers.isEmpty()) {
            // fallback unfortunately this often does not work
            final ReferenceIdentifier name = crs.getName();
            if (name != null) {
                return name.toString();
            }
        } else {
            return identifiers.iterator().next().toString();
        }
        return null;
    }

