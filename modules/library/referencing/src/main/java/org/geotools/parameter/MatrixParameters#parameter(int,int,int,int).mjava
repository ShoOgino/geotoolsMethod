    /**
     * Implementation of {@link #parameter(int,int)}.
     *
     * @param row The row indice.
     * @param column The column indice
     * @param numRow The maximum number of rows.
     * @param numCol The maximum number of columns.
     * @return The parameter value for the specified matrix element.
     * @throws IndexOutOfBoundsException if {@code row} or {@code column} is out of bounds.
     */
    @SuppressWarnings("unchecked") // Because of array creation
    private ParameterValue<Double> parameter(
            final int row, final int column, final int numRow, final int numCol)
            throws IndexOutOfBoundsException {
        MatrixParameterDescriptors.checkIndice("row", row, numRow);
        MatrixParameterDescriptors.checkIndice("column", column, numCol);
        if (matrixValues == null) {
            matrixValues = new ParameterValue[numRow][];
        }
        if (row >= matrixValues.length) {
            matrixValues = XArray.resize(matrixValues, numRow);
        }
        ParameterValue<Double>[] rowValues = matrixValues[row];
        if (rowValues == null) {
            matrixValues[row] = rowValues = new ParameterValue[numCol];
        }
        if (column >= rowValues.length) {
            matrixValues[row] = rowValues = XArray.resize(rowValues, numCol);
        }
        ParameterValue<Double> param = rowValues[column];
        if (param == null) {
            rowValues[column] =
                    param =
                            new FloatParameter(
                                    ((MatrixParameterDescriptors) descriptor)
                                            .descriptor(row, column, numRow, numCol));
        }
        return param;
    }

