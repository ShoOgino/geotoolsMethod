    /**
     * Inverse transforms a point using the {@link #global} affine transform, and
     * make sure that the result point is outside the grid. This method is used
     * for the transformation of a point which shouldn't be found in the grid.
     *
     * @param  source The source coordinate point.
     * @param  target The target coordinate point (should not be {@code null}).
     * @throws NoninvertibleTransformException if the transform is non-invertible.
     *
     * @todo Current implementation project an inside point on the nearest border.
     *       Could we do something better?
     */
    private void inverseTransform(final Point2D source, final Point2D.Double target)
            throws NoninvertibleTransformException
    {
        if (global.inverseTransform(source, target) != target) {
            throw new AssertionError(); // Should not happen.
        }
        double x = target.x;
        double y = target.y;
        if (x>=0 && x<width && y>=0 && y<height) {
            // Project on the nearest border. TODO: Could we do something better here?
            x -= 0.5 * width;
            y -= 0.5 * height;
            if (Math.abs(x) < Math.abs(y)) {
                target.x = x>0 ? width  : -1;
            } else {
                target.y = y>0 ? height : -1;
            }
        }
    }

