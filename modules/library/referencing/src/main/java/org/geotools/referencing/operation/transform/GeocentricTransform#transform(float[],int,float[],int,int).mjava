    /**
     * Converts geodetic coordinates (longitude, latitude, height) to geocentric coordinates (x, y,
     * z) according to the current ellipsoid parameters.
     */
    @Override
    public void transform(
            float[] srcPts, int srcOff, final float[] dstPts, int dstOff, int numPts) {
        final int dimSource = getSourceDimensions();
        final boolean hasHeight = (dimSource >= 3);
        if (srcPts == dstPts && needCopy(srcOff, dimSource, dstOff, 3, numPts)) {
            // Source and destination arrays overlaps: copy in a temporary buffer.
            final float[] old = srcPts;
            srcPts = new float[numPts * dimSource];
            System.arraycopy(old, srcOff, srcPts, 0, srcPts.length);
            srcOff = 0;
        }
        while (--numPts >= 0) {
            final double L = Math.toRadians(srcPts[srcOff++]); // Longitude
            final double P = Math.toRadians(srcPts[srcOff++]); // Latitude
            final double h = hasHeight ? srcPts[srcOff++] : 0; // Height above the ellipsoid (m)

            final double cosLat = Math.cos(P);
            final double sinLat = Math.sin(P);
            final double rn = a / Math.sqrt(1 - e2 * (sinLat * sinLat));

            dstPts[dstOff++] =
                    (float) ((rn + h) * cosLat * Math.cos(L)); // X: Toward prime meridian
            dstPts[dstOff++] = (float) ((rn + h) * cosLat * Math.sin(L)); // Y: Toward East
            dstPts[dstOff++] = (float) ((rn * (1 - e2) + h) * sinLat); // Z: Toward North
        }
    }

