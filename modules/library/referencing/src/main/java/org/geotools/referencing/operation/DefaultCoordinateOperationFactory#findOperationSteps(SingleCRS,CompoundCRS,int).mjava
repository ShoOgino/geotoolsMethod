    /**
     * Returns all available operations from a single to a compound coordinate reference system.
     *
     * @param sourceCRS Input coordinate reference system.
     * @param targetCRS Output coordinate reference system.
     * @param limit The maximum number of operations to be returned. Use -1 to return all the
     *     available operations. Use 1 to return just one operations. Currently, the behavior for
     *     other values of {@code limit} is undefined.
     * @return A {@code Set} of coordinate operations from {@code sourceCRS} to {@code targetCRS}.
     * @throws FactoryException If the operation can't be constructed.
     */
    protected Set<CoordinateOperation> findOperationSteps(
            final SingleCRS sourceCRS, final CompoundCRS targetCRS, int limit)
            throws FactoryException {
        final List<SingleCRS> targets = DefaultCompoundCRS.getSingleCRS(targetCRS);
        if (targets.size() == 1) {
            return findOperations(sourceCRS, targets.get(0), limit);
        }
        /*
         * This method has almost no chance to succeed (we can't invent ordinate values!) unless
         * 'sourceCRS' is a 3D-geodetic CRS and 'targetCRS' is a 2D + 1D one. Test for this case.
         * Otherwise, the 'createOperationStep' invocation will throws the appropriate exception.
         */
        final CoordinateReferenceSystem target3D = getFactoryContainer().toGeodetic3D(targetCRS);
        if (target3D != targetCRS) {
            return findOperations(sourceCRS, target3D, limit);
        }
        final List<SingleCRS> sources = Collections.singletonList(sourceCRS);
        return Collections.singleton(createOperationStep(sourceCRS, sources, targetCRS, targets));
    }

