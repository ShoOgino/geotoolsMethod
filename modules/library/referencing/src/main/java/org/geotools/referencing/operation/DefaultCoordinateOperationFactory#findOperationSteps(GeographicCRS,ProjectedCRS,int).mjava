    /**
     * Returns all available operations from a geographic to a projected coordinate reference
     * system. The default implementation constructs the following operation chain:
     *
     * <blockquote>
     *
     * <pre>
     * sourceCRS  &rarr;  {@linkplain ProjectedCRS#getBaseCRS baseCRS}  &rarr;  targetCRS
     * </pre>
     *
     * </blockquote>
     *
     * where the conversion from {@code baseCRS} to {@code targetCRS} is obtained from <code>
     * targetCRS.{@linkplain ProjectedCRS#getConversionFromBase
     * getConversionFromBase()}</code>.
     *
     * @param sourceCRS Input coordinate reference system.
     * @param targetCRS Output coordinate reference system.
     * @param limit The maximum number of operations to be returned. Use -1 to return all the
     *     available operations. Use 1 to return just one operations. Currently, the behavior for
     *     other values of {@code limit} is undefined.
     * @return A {@code Set} of coordinate operations from {@code sourceCRS} to {@code targetCRS}.
     * @throws FactoryException If the operation can't be constructed.
     */
    protected Set<CoordinateOperation> findOperationSteps(
            final GeographicCRS sourceCRS, final ProjectedCRS targetCRS, int limit)
            throws FactoryException {
        GeographicCRS base = targetCRS.getBaseCRS();
        CoordinateOperation step2 = targetCRS.getConversionFromBase();
        HashSet<CoordinateOperation> result = new HashSet<>();
        Set<CoordinateOperation> step1Candidates = tryDB(sourceCRS, base, limit);
        if (step1Candidates.isEmpty()) {
            CoordinateOperation step1 = createOperationStep(sourceCRS, base);
            step1Candidates = Collections.singleton(step1);
        }
        for (CoordinateOperation step1 : step1Candidates) {
            result.add(concatenate(step1, step2));
        }
        return result;
    }

