    /**
     * Adds an envelope object to this envelope. The resulting envelope is the union of the two
     * {@code Envelope} objects.
     *
     * <p>This method assumes that the specified envelope uses the same CRS than this envelope. For
     * performance reason, it will no be verified unless J2SE assertions are enabled.
     *
     * @param envelope the {@code Envelope} to add to this envelope.
     * @throws MismatchedDimensionException if the specified envelope doesn't have the expected
     *     dimension.
     */
    public void add(final Envelope envelope) throws MismatchedDimensionException {
        ensureNonNull("envelope", envelope);
        final int dim = ordinates.length / 2;
        AbstractDirectPosition.ensureDimensionMatch("envelope", envelope.getDimension(), dim);
        assert equalsIgnoreMetadata(crs, envelope.getCoordinateReferenceSystem()) : envelope;
        for (int i = 0; i < dim; i++) {
            final double min = envelope.getMinimum(i);
            final double max = envelope.getMaximum(i);
            if (min < ordinates[i]) ordinates[i] = min;
            if (max > ordinates[i + dim]) ordinates[i + dim] = max;
        }
        assert isEmpty() || contains(envelope, true);
    }

