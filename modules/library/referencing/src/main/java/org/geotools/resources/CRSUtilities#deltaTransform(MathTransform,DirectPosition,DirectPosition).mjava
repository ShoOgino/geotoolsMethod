    /**
     * Transforms the relative distance vector specified by {@code source} and stores the result in
     * {@code dest}. A relative distance vector is transformed without applying the translation
     * components.
     *
     * @param transform The transform to apply.
     * @param origin The position where to compute the delta transform in the source CS.
     * @param source The distance vector to be delta transformed
     * @return The result of the transformation.
     * @throws TransformException if the transformation failed.
     * @since 2.3
     */
    public static DirectPosition deltaTransform(
            final MathTransform transform, final DirectPosition origin, final DirectPosition source)
            throws TransformException {
        final int sourceDim = transform.getSourceDimensions();
        final int targetDim = transform.getTargetDimensions();
        DirectPosition P1 = new GeneralDirectPosition(sourceDim);
        DirectPosition P2 = new GeneralDirectPosition(sourceDim);
        for (int i = 0; i < sourceDim; i++) {
            final double c = origin.getOrdinate(i);
            final double d = source.getOrdinate(i) * 0.5;
            P1.setOrdinate(i, c - d);
            P2.setOrdinate(i, c + d);
        }
        P1 = transform.transform(P1, (sourceDim == targetDim) ? P1 : null);
        P2 = transform.transform(P2, (sourceDim == targetDim) ? P2 : null);
        for (int i = 0; i < targetDim; i++) {
            P2.setOrdinate(i, P2.getOrdinate(i) - P1.getOrdinate(i));
        }
        return P2;
    }

