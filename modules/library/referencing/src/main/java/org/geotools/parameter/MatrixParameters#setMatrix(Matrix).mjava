    /**
     * Sets all parameter values to the element value in the specified matrix. After this method
     * call, {@link #values} will returns only the elements different from the default value.
     *
     * @param matrix The matrix to copy in this group of parameters.
     */
    @SuppressWarnings("unchecked") // Because of array creation
    public void setMatrix(final Matrix matrix) {
        final MatrixParameterDescriptors matrixDescriptor =
                ((MatrixParameterDescriptors) this.descriptor);
        final int numRow = matrix.getNumRow();
        final int numCol = matrix.getNumCol();
        this.numRow.setValue(numRow);
        this.numCol.setValue(numCol);
        for (int row = 0; row < numRow; row++) {
            for (int col = 0; col < numCol; col++) {
                final double element = matrix.getElement(row, col);
                ParameterDescriptor<Double> descriptor = matrixDescriptor.descriptor(row, col);
                final double value = descriptor.getDefaultValue();
                if (Double.doubleToLongBits(element) == Double.doubleToLongBits(value)) {
                    /*
                     * Value matches the default value, so there is no need to keep it.
                     * Remove entry to keep things sparse.
                     */
                    if (matrixValues != null && matrixValues[row] != null) {
                        matrixValues[row][col] = null;
                    }
                    continue;
                }
                if (matrixValues == null) {
                    matrixValues = new ParameterValue[numRow][];
                }
                if (matrixValues[row] == null) {
                    matrixValues[row] = new ParameterValue[numCol];
                }
                matrixValues[row][col] = new FloatParameter(descriptor, element);
            }
        }
    }

