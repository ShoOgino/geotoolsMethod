    /**
     * Returns the must common source and target dimensions for the specified method. Source
     * dimension is encoded in the 16 highest bits and target dimension is encoded in the 16 lowest
     * bits. If this method can't infers the dimensions from the "Coordinate Operation" table, then
     * the operation method is probably a projection, which always have (2,2) dimensions in the EPSG
     * database.
     */
    private int getDimensionsForMethod(final String code) throws SQLException {
        final PreparedStatement stmt;
        stmt =
                prepareStatement(
                        "MethodDimensions",
                        "SELECT SOURCE_CRS_CODE,"
                                + " TARGET_CRS_CODE"
                                + " FROM [Coordinate_Operation]"
                                + " WHERE COORD_OP_METHOD_CODE = ?"
                                + " AND SOURCE_CRS_CODE IS NOT NULL"
                                + " AND TARGET_CRS_CODE IS NOT NULL");
        stmt.setString(1, code);
        final Map<Dimensions, Dimensions> dimensions = new HashMap<>();
        final Dimensions temp = new Dimensions((2 << 16) | 2); // Default to (2,2) dimensions.
        Dimensions max = temp;
        try (ResultSet result = stmt.executeQuery()) {
            while (result.next()) {
                final short sourceDimensions = getDimensionForCRS(result.getString(1));
                final short targetDimensions = getDimensionForCRS(result.getString(2));
                temp.encoded = (sourceDimensions << 16) | (targetDimensions);
                Dimensions candidate = dimensions.get(temp);
                if (candidate == null) {
                    candidate = new Dimensions(temp.encoded);
                    dimensions.put(candidate, candidate);
                }
                if (++candidate.occurences > max.occurences) {
                    max = candidate;
                }
            }
        }
        return max.encoded;
    }

