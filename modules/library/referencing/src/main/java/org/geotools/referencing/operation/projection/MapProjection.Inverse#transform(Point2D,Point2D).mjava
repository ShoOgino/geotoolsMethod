        /**
         * Inverse transforms the specified {@code ptSrc} and stores the result in {@code ptDst}.
         *
         * <p>This method standardizes the {@code ptSrc} by removing the {@link #falseEasting} and
         * {@link #falseNorthing} and dividing by {@link #globalScale} before invoking <code>
         * {@link #inverseTransformNormalized inverseTransformNormalized}(x, y, ptDst)</code>. It
         * then adds the {@link #centralMeridian} to the {@code x} of the point returned by the
         * {@code inverseTransformNormalized} call.
         *
         * @param ptSrc the specified coordinate point to be transformed. Ordinates must be in
         *     metres.
         * @param ptDst the specified coordinate point that stores the result of transforming {@code
         *     ptSrc}, or {@code null}. Ordinates will be in decimal degrees.
         * @return the coordinate point after transforming {@code ptSrc} and stroring the result in
         *     {@code ptDst}.
         * @throws ProjectionException if the point can't be transformed.
         */
        @Override
        public final Point2D transform(final Point2D ptSrc, Point2D ptDst)
                throws ProjectionException {
            final double x0 = ptSrc.getX();
            final double y0 = ptSrc.getY();
            ptDst =
                    inverseTransformNormalized(
                            (x0 - falseEasting) / globalScale,
                            (y0 - falseNorthing) / globalScale,
                            ptDst);
            /*
             * Makes sure that the longitude after conversion stay within +/- PI radians. As a
             * special case, we do not check the range if no rotation were applied on the longitude.
             * This is because the user may have a big area ranging from -180° to +180°. With the
             * slight rounding errors related to map projections, the 180° longitude may be slightly
             * over the limit. Rolling the longitude would changes its sign. For example a bounding
             * box from 30° to +180° would become 30° to -180°, which is probably not what the user
             * wanted.
             */
            final double x =
                    toDegrees(
                            centralMeridian != 0
                                    ? rollLongitude(ptDst.getX() + centralMeridian)
                                    : ptDst.getX());
            final double y = toDegrees(ptDst.getY());
            ptDst.setLocation(x, y);
            if (verifyCoordinateRanges()) {
                if (verifyGeographicRanges(this, x, y)) {
                    warningLogged();
                }
            }
            assert checkReciprocal(
                    ptDst, (ptSrc != ptDst) ? ptSrc : new Point2D.Double(x0, y0), false);
            return ptDst;
        }

