    /**
     * Transforms the specified (<var>x</var>,<var>y</var>) coordinates and stores the result in
     * {@code ptDst}.
     */
    protected Point2D inverseTransformNormalized(double x, double y, final Point2D ptDst)
            throws ProjectionException {
        final double rho = hypot(x, y);
        double sinc = rho;
        if (sinc > 1.0) {
            if ((sinc - 1.0) > EPSILON) {
                throw new ProjectionException(ErrorKeys.POINT_OUTSIDE_HEMISPHERE);
            }
            sinc = 1.0;
        }
        if (rho <= EPSILON) {
            y = latitudeOfOrigin;
            x = 0.0;
        } else {
            double phi;
            if (northPole) {
                y = -y;
                phi = acos(sinc); // equivalent to asin(cos(c)) over the range [0:1]
            } else {
                phi = -acos(sinc);
            }
            x = atan2(x, y);
            y = phi;
        }
        if (ptDst != null) {
            ptDst.setLocation(x, y);
            return ptDst;
        }
        return new Point2D.Double(x, y);
    }

