    /**
     * Transforms the specified (<var>&lambda;</var>,<var>&phi;</var>) coordinates
     * (units in radians) and stores the result in {@code ptDst} (linear distance
     * on a unit sphere).
     */
    protected Point2D transformNormalized(double x, double y, final Point2D ptDst)
            throws ProjectionException
    {
        final double cosphi = cos(y);
        final double sinphi = sin(y);
        final double rho = c - (this.isSpherical
                                ? y
                                : mlfn(y, sinphi, cosphi));

        final double x1 = rho * sin(x*=this.n);
        final double y1 = this.rho0 - rho * cos(x);

        if (ptDst != null) {
            ptDst.setLocation(x1,y1);
            return ptDst;
        }
        return new Point2D.Double(x1,y1);
    }

