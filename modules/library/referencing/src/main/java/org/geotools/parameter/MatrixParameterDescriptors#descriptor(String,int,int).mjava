    /**
     * Implementation of the {@link #descriptor(String)} method.
     *
     * @param name The case insensitive name of the parameter to search for.
     * @param numRow The maximum number of rows.
     * @param numCol The maximum number of columns.
     * @return The parameter for the given name.
     * @throws ParameterNotFoundException if there is no parameter for the given name.
     */
    final GeneralParameterDescriptor descriptor(String name, final int numRow, final int numCol)
            throws ParameterNotFoundException {
        ensureNonNull("name", name);
        name = name.trim();
        RuntimeException cause = null;
        if (name.regionMatches(true, 0, prefix, 0, prefix.length())) {
            final int split = name.indexOf(separator, prefix.length());
            if (split >= 0)
                try {
                    final int row = Integer.parseInt(name.substring(prefix.length(), split));
                    final int col = Integer.parseInt(name.substring(split + 1));
                    return descriptor(row, col, numRow, numCol);
                } catch (NumberFormatException | IndexOutOfBoundsException exception) {
                    cause = exception;
                }
        }
        /*
         * The parameter name is not a matrix element name. Search in the super
         * class for other parameters, especially "num_row" and "num_col".
         */
        try {
            return super.descriptor(name);
        } catch (ParameterNotFoundException exception) {
            if (cause != null)
                try {
                    exception.initCause(cause);
                } catch (IllegalStateException ignore) {
                    // A cause has already be given to the exception. Forget the cause then.
                }
            throw exception;
        }
    }

