    /**
     * Implementation of {@link #transform(MathTransform, Envelope)} with the opportunity to save
     * the projected center coordinate. If {@code targetPt} is non-null, then this method will set
     * it to the center of the source envelope projected to the target CRS.
     */
    private static GeneralEnvelope transform(
            final MathTransform transform, final Envelope envelope, GeneralDirectPosition targetPt)
            throws TransformException {
        if (envelope == null) {
            return null;
        }
        if (transform.isIdentity()) {
            /*
             * Slight optimisation: Just copy the envelope. Note that we need to set the CRS
             * to null because we don't know what the target CRS was supposed to be. Even if
             * an identity transform often imply that the target CRS is the same one than the
             * source CRS, it is not always the case. The metadata may be differents, or the
             * transform may be a datum shift without Bursa-Wolf parameters, etc.
             */
            final GeneralEnvelope e = new GeneralEnvelope(envelope);
            e.setCoordinateReferenceSystem(null);
            if (targetPt != null) {
                for (int i = envelope.getDimension(); --i >= 0; ) {
                    targetPt.setOrdinate(i, e.getMedian(i));
                }
            }
            return e;
        }
        /*
         * Checks argument validity: envelope and math transform dimensions must be consistent.
         */
        final int sourceDim = transform.getSourceDimensions();
        if (envelope.getDimension() != sourceDim) {
            throw new MismatchedDimensionException(
                    Errors.format(
                            ErrorKeys.MISMATCHED_DIMENSION_$2, sourceDim, envelope.getDimension()));
        }
        int coordinateNumber = 0;
        GeneralEnvelope transformed = null;
        if (targetPt == null) {
            targetPt = new GeneralDirectPosition(transform.getTargetDimensions());
        }
        /*
         * Before to run the loops, we must initialize the coordinates to the minimal values.
         * This coordinates will be updated in the 'switch' statement inside the 'while' loop.
         */
        final GeneralDirectPosition sourcePt = new GeneralDirectPosition(sourceDim);
        for (int i = sourceDim; --i >= 0; ) {
            sourcePt.setOrdinate(i, envelope.getMinimum(i));
        }
        loop:
        while (true) {
            /*
             * Transform a point and add the transformed point to the destination envelope.
             * Note that the very last point to be projected must be the envelope center.
             */
            if (targetPt != transform.transform(sourcePt, targetPt)) {
                throw new UnsupportedImplementationException(transform.getClass());
            }
            if (transformed != null) {
                transformed.add(targetPt);
            } else {
                transformed = new GeneralEnvelope(targetPt, targetPt);
            }
            /*
             * Get the next point's coordinates.  The 'coordinateNumber' variable should
             * be seen as a number in base 5 where the number of digits is equals to the
             * number of dimensions. For example, a 4-D space would have numbers ranging
             * from "0000" to "4444" (numbers in base 4). The digits are then translated
             * into minimal, central or maximal ordinates. The outer loop stops when the
             * counter roll back to "0000".  Note that 'targetPt' must keep the value of
             * the last projected point, which must be the envelope center identified by
             * "4444" in the 4-D case.
             */
            int n = ++coordinateNumber;
            for (int i = sourceDim; --i >= 0; ) {
                switch (n % 5) {
                    case 0:
                        sourcePt.setOrdinate(i, envelope.getMinimum(i));
                        n /= 5;
                        break;
                    case 1:
                        sourcePt.setOrdinate(i, envelope.getMaximum(i));
                        continue loop;
                    case 2:
                        sourcePt.setOrdinate(
                                i, (envelope.getMinimum(i) + envelope.getMedian(i)) / 2);
                        continue loop;
                    case 3:
                        sourcePt.setOrdinate(
                                i, (envelope.getMedian(i) + envelope.getMaximum(i)) / 2);
                        continue loop;
                    case 4:
                        sourcePt.setOrdinate(i, envelope.getMedian(i));
                        continue loop;
                    default:
                        throw new AssertionError(n); // Should never happen
                }
            }
            break;
        }
        return transformed;
    }

