    /**
     * Transforms the specified (<var>x</var>,<var>y</var>) coordinates and stores the result in
     * {@code ptDst}.
     */
    protected Point2D inverseTransformNormalized(double x, double y, Point2D ptDst)
            throws ProjectionException {

        double phi = aasin(y / C_y);
        double c = cos(phi);
        double lam = x / (C_x * (1. + c));
        phi = aasin((phi + sin(phi) * (c + 2.)) / C_p);

        if (ptDst == null) {
            ptDst = new Point2D.Double();
        }
        ptDst.setLocation(lam, phi);

        return ptDst;
    }

