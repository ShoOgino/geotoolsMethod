    /**
     * Wraps the specified authority factories. If the specified collection contains more than one
     * element, then a chain of {@code FallbackAuthorityFactory} instances is created.
     *
     * @param <T> The interface to implement.
     * @param type The interface to implement. Should be one of {@link DatumAuthorityFactory},
     *     {@link CSAuthorityFactory}, {@link CRSAuthorityFactory} or {@link
     *     CoordinateOperationAuthorityFactory}.
     * @param factories The factories to wrap, in iteration order.
     * @return The given factories as a chain of fallback factories.
     * @throws FactoryNotFoundException if the collection doesn't contains at least one element.
     * @throws ClassCastException if {@code type} is illegal.
     */
    public static <T extends AuthorityFactory> T create(
            final Class<T> type, final Collection<T> factories)
            throws FactoryNotFoundException, ClassCastException {
        ensureNonNull("type", type);
        ensureNonNull("factories", factories);
        if (factories.isEmpty()) {
            throw new FactoryNotFoundException(Errors.format(ErrorKeys.FACTORY_NOT_FOUND_$1, type));
        }
        return type.cast(create(false, interfaceMask(type), factories.iterator()));
    }

