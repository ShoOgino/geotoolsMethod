    /**
     * Procède à l'écriture d'un champ de l'angle.
     *
     * @param value Valeur à écrire.
     * @param toAppendTo Buffer dans lequel écrire le champs.
     * @param pos Objet dans lequel mémoriser les index des premiers
     *        et derniers caractères écrits, ou {@code null}
     *        pour ne pas mémoriser ces index.
     * @param w Nombre de minimal caractères de la partie entière.
     * @param last {@code true} si ce champs est le dernier,
     *        et qu'il faut donc écrire la partie décimale.
     * @param s Suffix à écrire après le nombre (peut être nul).
     */
    private StringBuffer formatField(double value,
                                     StringBuffer toAppendTo, final FieldPosition pos,
                                     final int w, final boolean last, final String s)
    {
        final int startPosition=toAppendTo.length();
        if (!last) {
            numberFormat.setMinimumIntegerDigits(w);
            numberFormat.setMaximumFractionDigits(0);
            toAppendTo = numberFormat.format(value, toAppendTo, dummy);

        } else {
            value = doRounding(value, widthDecimal);
            
            if (decimalSeparator) {
                numberFormat.setMinimumIntegerDigits(w);
                numberFormat.setMinimumFractionDigits(widthDecimal);
                numberFormat.setMaximumFractionDigits(widthDecimal);
                toAppendTo = numberFormat.format(value, toAppendTo, dummy);
            } else {
                value *= XMath.pow10(widthDecimal);
                numberFormat.setMaximumFractionDigits(0);
                numberFormat.setMinimumIntegerDigits(w + widthDecimal);
                toAppendTo = numberFormat.format(value, toAppendTo, dummy);
            }
        }
        if (s!=null) {
            toAppendTo.append(s);
        }
        if (pos!=null) {
            pos.setBeginIndex(startPosition);
            pos.setEndIndex(toAppendTo.length()-1);
        }
        return toAppendTo;
    }

