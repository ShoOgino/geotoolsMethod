    /** Implementation of direct transformation. */
    private void transform(
            final float[] srcPts1,
            final double[] srcPts2,
            int srcOff,
            final float[] dstPts1,
            final double[] dstPts2,
            int dstOff,
            int numPts) {
        final int minCol = 0;
        final int minRow = 0;
        final int maxCol = width - 2;
        final int maxRow = height - 2;
        int postIncrement = 0;
        if (srcOff < dstOff) {
            if ((srcPts2 != null) ? srcPts2 == dstPts2 : srcPts1 == dstPts1) {
                srcOff += (numPts - 1) * 2;
                dstOff += (numPts - 1) * 2;
                postIncrement = -4;
            }
        }
        while (--numPts >= 0) {
            final double xi, yi;
            if (srcPts2 != null) {
                xi = srcPts2[srcOff++];
                yi = srcPts2[srcOff++];
            } else {
                xi = srcPts1[srcOff++];
                yi = srcPts1[srcOff++];
            }
            final int col = Math.max(Math.min((int) xi, maxCol), minCol);
            final int row = Math.max(Math.min((int) yi, maxRow), minRow);
            final int offset00 = (col + row * width) * CP_LENGTH;
            final int offset01 = offset00 + CP_LENGTH * width; // Une ligne plus bas
            final int offset10 = offset00 + CP_LENGTH; // Une colonne à droite
            final int offset11 = offset01 + CP_LENGTH; // Une colonne à droite, une ligne plus bas
            /*
             * Interpole les coordonnées de destination        [00]--.(x0,y0)----[10]
             * sur la ligne courante (x0,y0)  ainsi que         |                  |
             * sur la ligne suivante (x1,y1).   Exemple         |    .(x,y)        |
             * ci-contre:  les coordonnées sources sont         |                  |
             * entre crochets, et les coordonnées de la        [01]--.(x1,y1)----[11]
             * sortie (à calculer) sont entre parenthèses.
             */
            final double x0 =
                    linearInterpolation(
                            col + 0,
                            grid[offset00 + X_OFFSET],
                            col + 1,
                            grid[offset10 + X_OFFSET],
                            xi);
            final double y0 =
                    linearInterpolation(
                            col + 0,
                            grid[offset00 + Y_OFFSET],
                            col + 1,
                            grid[offset10 + Y_OFFSET],
                            xi);
            final double x1 =
                    linearInterpolation(
                            col + 0,
                            grid[offset01 + X_OFFSET],
                            col + 1,
                            grid[offset11 + X_OFFSET],
                            xi);
            final double y1 =
                    linearInterpolation(
                            col + 0,
                            grid[offset01 + Y_OFFSET],
                            col + 1,
                            grid[offset11 + Y_OFFSET],
                            xi);
            /*
             * Interpole maintenant les coordonnées (x,y) entre les deux lignes.
             */
            final double xf = linearInterpolation(row, x0, row + 1, x1, yi);
            final double yf = linearInterpolation(row, y0, row + 1, y1, yi);
            if (dstPts2 != null) {
                dstPts2[dstOff++] = xf;
                dstPts2[dstOff++] = yf;
            } else {
                dstPts1[dstOff++] = (float) xf;
                dstPts1[dstOff++] = (float) yf;
            }
            srcOff += postIncrement;
            dstOff += postIncrement;
            if (false) {
                final java.io.PrintStream out = System.out;
                out.print("TD  ==> xi : ");
                out.print(xi);
                out.print(" / yi : ");
                out.print(yi);
                out.print("  --->  xo : ");
                out.print(xf);
                out.print(" / yo : ");
                out.println(yf);
            }
        }
    }

