    /**
     * Creates a derived coordinate reference system from a conversion. It is the user's
     * responsability to ensure that the conversion performs all required steps, including
     * {@linkplain AbstractCS#swapAndScaleAxis unit conversions and change of axis order}, if
     * needed.
     *
     * @param properties Name and other properties to give to the new object.
     * @param baseCRS Coordinate reference system to base projection on.
     * @param conversionFromBase The {@linkplain DefiningConversion defining conversion}.
     * @param derivedCS The coordinate system for the derived CRS.
     * @throws FactoryException if the object creation failed.
     * @since 2.5
     */
    public DerivedCRS createDerivedCRS(
            Map<String, ?> properties,
            CoordinateReferenceSystem baseCRS,
            Conversion conversionFromBase,
            CoordinateSystem derivedCS)
            throws FactoryException {
        MathTransform mt = conversionFromBase.getMathTransform();
        if (mt == null) {
            final ParameterValueGroup parameters = conversionFromBase.getParameterValues();
            final MathTransformFactory mtFactory = getMathTransformFactory();
            mt = mtFactory.createParameterizedTransform(parameters);
        }
        DerivedCRS crs;
        try {
            crs = new DefaultDerivedCRS(properties, conversionFromBase, baseCRS, mt, derivedCS);
        } catch (IllegalArgumentException exception) {
            throw new FactoryException(exception);
        }
        crs = pool.unique(crs);
        return crs;
    }

