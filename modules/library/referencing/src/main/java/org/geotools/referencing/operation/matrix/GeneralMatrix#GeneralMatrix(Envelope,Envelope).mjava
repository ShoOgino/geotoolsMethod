    /**
     * Constructs a transform that maps a source region to a destination region. Axis order and
     * direction are left unchanged.
     *
     * <p>If the source dimension is equals to the destination dimension, then the transform is
     * affine. However, the following special cases are also handled:
     *
     * <UL>
     *   <LI>If the target dimension is smaller than the source dimension, then extra dimensions are
     *       dropped.
     *   <LI>If the target dimension is greater than the source dimension, then the coordinates in
     *       the new dimensions are set to 0.
     * </UL>
     *
     * @param srcRegion The source region.
     * @param dstRegion The destination region.
     */
    public GeneralMatrix(final Envelope srcRegion, final Envelope dstRegion) {
        mat = new DMatrixRMaj(dstRegion.getDimension() + 1, srcRegion.getDimension() + 1);

        // Next lines should be first if only Sun could fix RFE #4093999 (sigh...)
        final int srcDim = srcRegion.getDimension();
        final int dstDim = dstRegion.getDimension();
        for (int i = Math.min(srcDim, dstDim); --i >= 0; ) {
            double scale = dstRegion.getSpan(i) / srcRegion.getSpan(i);
            double translate = dstRegion.getMinimum(i) - srcRegion.getMinimum(i) * scale;
            setElement(i, i, scale);
            setElement(i, srcDim, translate);
        }
        setElement(dstDim, srcDim, 1);
        assert (srcDim != dstDim) || isAffine() : this;
    }

