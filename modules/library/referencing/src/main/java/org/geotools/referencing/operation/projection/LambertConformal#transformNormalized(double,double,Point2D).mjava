    /**
     * Transforms the specified (<var>&lambda;</var>,<var>&phi;</var>) coordinates
     * (units in radians) and stores the result in {@code ptDst} (linear distance
     * on a unit sphere).
     */
    protected Point2D transformNormalized(double x, double y, Point2D ptDst)
            throws ProjectionException
    {
        double rho;
        // Snyder p. 108
        if (abs(abs(y) - PI/2) < EPSILON) {
            if (y*n <= 0) {
                throw new ProjectionException(y);
            } else {
                rho = 0;
            }
        } else if (isSpherical) {
            rho = F * pow(tan(PI/4 + 0.5*y), -n);
        } else {
            rho = F * pow(tsfn(y, sin(y)), n);
        }
        x *= n;
        if (belgium) {
            x -= BELGE_A;
        }
        y = rho0 - rho * cos(x);
        x =        rho * sin(x);
        if (ptDst != null) {
            ptDst.setLocation(x,y);
            return ptDst;
        }
        return new Point2D.Double(x,y);
    }

