    /**
     * Returns the value in this group for the specified {@linkplain Identifier#getCode identifier
     * code}. If no {@linkplain ParameterValue parameter value} is found but a {@linkplain
     * ParameterDescriptor parameter descriptor} is found (which may occurs if the parameter is
     * optional, i.e. <code>{@linkplain ParameterDescriptor#getMinimumOccurs minimumOccurs} == 0
     * </code>), then a {@linkplain ParameterValue parameter value} is automatically created and
     * initialized to its {@linkplain ParameterDescriptor#getDefaultValue default value} (if any).
     *
     * <p>This convenience method provides a way to get and set parameter values by name. For
     * example the following idiom fetches a floating point value for the <code>"false_easting"
     * </code> parameter:
     *
     * <blockquote>
     *
     * <code>
     * double value =
     * parameter("false_easting").{@linkplain ParameterValue#doubleValue() doubleValue()};
     * </code>
     *
     * </blockquote>
     *
     * <p>This method do not search recursively in subgroups. This is because more than one subgroup
     * may exist for the same {@linkplain ParameterDescriptorGroup descriptor}. The user must
     * {@linkplain #groups query all subgroups} and select explicitly the appropriate one to use.
     *
     * @param name The case insensitive {@linkplain Identifier#getCode identifier code} of the
     *     parameter to search for.
     * @return The parameter value for the given identifier code.
     * @throws ParameterNotFoundException if there is no parameter value for the given identifier
     *     code.
     */
    @Override
    public ParameterValue parameter(String name) throws ParameterNotFoundException {
        ensureNonNull("name", name);
        name = name.trim();
        for (final GeneralParameterValue value : values) {
            if (value instanceof ParameterValue) {
                if (AbstractIdentifiedObject.nameMatches(value.getDescriptor(), name)) {
                    return (ParameterValue) value;
                }
            }
        }
        /*
         * No existing parameter found. Check if an optional parameter exists.
         * If such a descriptor is found, create it, add it to the list of values
         * and returns it.
         */
        for (final GeneralParameterDescriptor descriptor : getDescriptor().descriptors()) {
            if (descriptor instanceof ParameterDescriptor) {
                if (AbstractIdentifiedObject.nameMatches(descriptor, name)) {
                    final ParameterValue value = ((ParameterDescriptor) descriptor).createValue();
                    values.add(value);
                    return value;
                }
            }
        }
        throw new ParameterNotFoundException(
                Errors.format(ErrorKeys.MISSING_PARAMETER_$1, name), name);
    }

