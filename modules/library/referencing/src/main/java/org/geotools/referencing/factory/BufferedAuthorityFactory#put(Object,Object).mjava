    /**
     * Put an element in the pool. This method is invoked everytime a {@code createFoo(...)} method
     * is invoked, even if an object was already in the pool for the given code, for the following
     * reasons: 1) Replaces weak reference by strong reference (if applicable) and 2) Alters the
     * linked hash set order, so that this object is declared as the last one used.
     */
    private void put(final Object key, final Object object) {
        assert Thread.holdsLock(this);
        pool.put(key, object);
        int toReplace = pool.size() - maxStrongReferences;
        if (toReplace > 0) {
            for (final Iterator<Map.Entry<Object, Object>> it = pool.entrySet().iterator();
                    it.hasNext(); ) {
                final Map.Entry<Object, Object> entry = it.next();
                final Object value = entry.getValue();
                if (value instanceof Reference) {
                    if (((Reference) value).get() == null) {
                        it.remove();
                    }
                    continue;
                }
                entry.setValue(new WeakReference<>(value));
                if (--toReplace == 0) {
                    break;
                }
            }
        }
    }

