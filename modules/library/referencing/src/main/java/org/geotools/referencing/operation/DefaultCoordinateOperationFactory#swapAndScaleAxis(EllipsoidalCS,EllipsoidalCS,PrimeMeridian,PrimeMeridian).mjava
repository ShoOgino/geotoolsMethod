    /**
     * Returns an affine transform between two ellipsoidal coordinate systems. Only units, axis
     * order (e.g. transforming from (NORTH,WEST) to (EAST,NORTH)) and prime meridian are taken in
     * account. Other attributes (especially the datum) must be checked before invoking this method.
     *
     * @param sourceCS The source coordinate system.
     * @param targetCS The target coordinate system.
     * @param sourcePM The source prime meridian.
     * @param targetPM The target prime meridian.
     * @return The transformation from {@code sourceCS} to {@code targetCS} as an affine transform.
     *     Only axis orientation, units and prime meridian are taken in account.
     * @throws OperationNotFoundException If the affine transform can't be constructed.
     */
    private Matrix swapAndScaleAxis(
            final EllipsoidalCS sourceCS,
            final EllipsoidalCS targetCS,
            final PrimeMeridian sourcePM,
            final PrimeMeridian targetPM)
            throws OperationNotFoundException {
        final Matrix matrix = swapAndScaleAxis(sourceCS, targetCS);
        for (int i = targetCS.getDimension(); --i >= 0; ) {
            final CoordinateSystemAxis axis = targetCS.getAxis(i);
            final AxisDirection direction = axis.getDirection();
            if (AxisDirection.EAST.equals(direction.absolute())) {
                /*
                 * A longitude ordinate has been found (i.e. the axis is oriented toward EAST or
                 * WEST). Compute the amount of angle to add to the source longitude in order to
                 * get the destination longitude. This amount is measured in units of the target
                 * axis.  The affine transform is then updated in order to take this rotation in
                 * account. Note that the resulting longitude may be outside the usual [-180..180Â°]
                 * range.
                 */
                final Unit<Angle> unit = axis.getUnit().asType(Angle.class);
                final double sourceLongitude = getGreenwichLongitude(sourcePM, unit);
                final double targetLongitude = getGreenwichLongitude(targetPM, unit);
                final int lastMatrixColumn = matrix.getNumCol() - 1;
                double rotate = sourceLongitude - targetLongitude;
                if (AxisDirection.WEST.equals(direction)) {
                    rotate = -rotate;
                }
                rotate += matrix.getElement(i, lastMatrixColumn);
                matrix.setElement(i, lastMatrixColumn, rotate);
            }
        }
        return matrix;
    }

