        /**
         * Transforms the specified (<var>x</var>,<var>y</var>) coordinates and stores the result in
         * {@code ptDst}.
         */
        @Override
        protected Point2D inverseTransformNormalized(double x, double y, Point2D ptDst)
                throws ProjectionException {
            // Compute using iteration formulas, for comparaison later.
            assert (ptDst = super.inverseTransformNormalized(x, y, ptDst)) != null;
            final double rho = hypot(x, y);
            if (southPole) {
                y = -y;
            }
            // The series form
            final double t =
                    (rho / k0)
                            * sqrt(
                                    pow(1 + excentricity, 1 + excentricity)
                                            * pow(1 - excentricity, 1 - excentricity))
                            / 2;
            final double chi = PI / 2 - 2 * atan(t);

            x = (abs(rho) < EPSILON) ? 0.0 : atan2(x, -y);

            // See Snyde P. 19, "Computation of Series"
            final double sin2chi = sin(2.0 * chi);
            final double cos2chi = cos(2.0 * chi);
            y = chi + sin2chi * (A + cos2chi * (B + cos2chi * (C + D * cos2chi)));
            y = (southPole) ? -y : y;

            assert checkInverseTransform(x, y, ptDst);
            if (ptDst != null) {
                ptDst.setLocation(x, y);
                return ptDst;
            }
            return new Point2D.Double(x, y);
        }

