    /**
     * Replaces (if needed) the specified axis by a new one. The default implementation invokes
     * {@link #replace(Unit)} and {@link #replace(AxisDirection)}.
     *
     * @param axis The coordinate system axis to replace.
     * @return The new coordinate system axis, or {@code axis} if no change were needed.
     * @throws FactoryException if an error occured while creating the new coordinate system axis.
     */
    @Override
    protected CoordinateSystemAxis replace(CoordinateSystemAxis axis) throws FactoryException {
        final AxisDirection oldDirection = axis.getDirection();
        final AxisDirection newDirection = replace(oldDirection);
        Unit<?> oldUnits = axis.getUnit();
        final Unit<?> newUnits = replace(oldUnits);
        boolean directionChanged = !oldDirection.equals(newDirection);
        if (directionChanged) {
            /*
             * Check if the direction change implies an axis renaming.  For example if the axis
             * name was "Southing" and the direction has been changed from SOUTH to NORTH, then
             * the axis should be renamed as "Northing".
             */
            final String name = axis.getName().getCode();
            for (int i = 0; i < RENAMEABLE.length; i++) {
                if (RENAMEABLE[i].nameMatches(name)) {
                    for (i = 0; i < RENAMEABLE.length; i++) {
                        final CoordinateSystemAxis candidate = RENAMEABLE[i];
                        if (newDirection.equals(candidate.getDirection())) {
                            axis = candidate; // The new axis, but may change again later.
                            oldUnits = axis.getUnit(); // For detecting change relative to new axis.
                            directionChanged = false; // The new axis has the requested direction.
                            break;
                        }
                    }
                    break;
                }
            }
        }
        if (directionChanged || !oldUnits.equals(newUnits)) {
            final ReferencingFactoryContainer factories = getFactoryContainer(false);
            final CSFactory csFactory = factories.getCSFactory();
            final Map properties = getProperties(axis);
            axis =
                    csFactory.createCoordinateSystemAxis(
                            properties, axis.getAbbreviation(), newDirection, newUnits);
            axis = (CoordinateSystemAxis) pool.unique(axis);
        }
        return axis;
    }

