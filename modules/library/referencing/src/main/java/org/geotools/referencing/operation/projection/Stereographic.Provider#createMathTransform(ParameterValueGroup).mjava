        /**
         * Creates a transform from the specified group of parameter values.
         *
         * @param  parameters The group of parameter values.
         * @return The created math transform.
         * @throws ParameterNotFoundException if a required parameter was not found.
         */
        protected MathTransform createMathTransform(final ParameterValueGroup parameters)
                throws ParameterNotFoundException
        {
            // Values here are in radians (the standard units for the map projection package)
            final double latitudeOfOrigin = abs(AbstractProvider.doubleValue(LATITUDE_OF_ORIGIN, parameters));
            final boolean     isSpherical = isSpherical(parameters);
            final ParameterDescriptorGroup descriptor = getParameters();
            // Polar case.
            if (abs(latitudeOfOrigin - PI/2) < EPSILON) {
                if (isSpherical) {
                    return new PolarStereographic.Spherical(parameters, descriptor, null);
                } else {
                    return new PolarStereographic(parameters, descriptor, null);
                }
            } else
            // Equatorial case.
            if (latitudeOfOrigin < EPSILON) {
                if (isSpherical) {
                    return new EquatorialStereographic.Spherical(parameters, descriptor);
                } else {
                    return createMathTransform(parameters, descriptor);
                }
            } else
            // Generic (oblique) case.
            if (isSpherical) {
                return new StereographicUSGS.Spherical(parameters, descriptor);
            } else {
                return createMathTransform(parameters, descriptor);
            }
        }

