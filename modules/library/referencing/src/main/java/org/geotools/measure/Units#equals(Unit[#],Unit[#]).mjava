    /**
     * Checks whether two units can be considered equivalent. TransformedUnits are
     * considered equivalent if they have the same system unit and their conversion
     * factors to the system unit produce the identity converter when the inverse of
     * the second factor is concatenated with the first factor, considering the precision
     * of a float number. For other types of units, the comparison is delegated to their
     * normal equals method.
     * 
     * @param unit1
     * @param unit2
     * @return
     */
    public static final boolean equals(Unit<?> unit1, Unit<?> unit2) {
        if (unit1 == unit2) {
            return true;
        }
        if (unit1 != null) {
            if (unit1 instanceof TransformedUnit<?> && unit2 != null
                    && unit2 instanceof TransformedUnit<?>) {
                TransformedUnit<?> tunit1 = (TransformedUnit<?>) unit1;
                TransformedUnit<?> tunit2 = (TransformedUnit<?>) unit2;
                if (unit1.getSystemUnit().equals(unit2.getSystemUnit())) {
                    try {
                        float factor = (float) tunit1.getSystemConverter()
                                .concatenate(tunit2.getSystemConverter().inverse()).convert(1.0f);
                        // NOTE: Matching old JSR-275 library practice, converting to float to compare factors to provide some tolerance
                        if (factor == 1.0f) {
                            return true;
                        }
                        return false;
                    }
                    catch (Exception e) {}
                }
            }
            return unit1.equals(unit2);
        }
        return false;
    }

