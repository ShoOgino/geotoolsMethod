    /**
     * Creates a new position which will contains the result of coordinate transformations from
     * {@code sourceCRS} to {@code targetCRS}. The {@linkplain #getCoordinateReferenceSystem CRS
     * associated with this position} will be initially set to {@code targetCRS}.
     *
     * @param sourceCRS The <strong>default</strong> CRS to be used by the <code>
     *     {@link #transform transform}(position)</code> method <strong>only</strong> when the
     *     user-supplied {@code position} has a null {@linkplain
     *     DirectPosition#getCoordinateReferenceSystem associated CRS}. This {@code sourceCRS}
     *     argument may be {@code null}, in which case it is assumed the same than {@code
     *     targetCRS}.
     * @param targetCRS The {@linkplain #getCoordinateReferenceSystem CRS associated with this
     *     position}. Used for every {@linkplain #transform coordinate transformations} until the
     *     next call to {@link #setCoordinateReferenceSystem setCoordinateReferenceSystem} or {@link
     *     #setLocation(DirectPosition) setLocation}. This argument can not be null.
     * @param hints The set of hints to use for fetching a {@link CoordinateOperationFactory}, or
     *     {@code null} if none.
     * @throws IllegalArgumentException if {@code targetCRS} was {@code null}.
     * @throws FactoryRegistryException if no {@linkplain CoordinateOperationFactory coordinate
     *     operation factory} can be found for the specified hints.
     * @since 2.3
     */
    public TransformedDirectPosition(
            final CoordinateReferenceSystem sourceCRS,
            final CoordinateReferenceSystem targetCRS,
            final Hints hints)
            throws FactoryRegistryException {
        super(targetCRS);
        ensureNonNull("targetCRS", targetCRS);
        defaultCRS = CRS.equalsIgnoreMetadata(sourceCRS, targetCRS) ? null : sourceCRS;
        factory = ReferencingFactoryFinder.getCoordinateOperationFactory(hints);
    }

