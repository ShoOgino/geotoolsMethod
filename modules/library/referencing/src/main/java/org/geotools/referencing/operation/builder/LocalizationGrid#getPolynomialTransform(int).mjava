    /**
     * Returns a math transform from grid to "real world" coordinates using a polynomial fitting of
     * the specified degree. By convention, a {@code degree} of 0 will returns the {@linkplain
     * #getMathTransform() math transform backed by the whole grid}. Greater values will use a
     * fitted polynomial ({@linkplain #getAffineTransform affine transform} for degree 1, quadratic
     * transform for degree 2, cubic transform for degree 3, etc.).
     *
     * @param degree The polynomial degree for the fitting, or 0 for a transform backed by the whole
     *     grid.
     */
    public synchronized MathTransform2D getPolynomialTransform(final int degree) {
        if (degree < 0 || degree >= WarpTransform2D.MAX_DEGREE + 1) {
            // TODO: provides a localized error message.
            throw new IllegalArgumentException();
        }
        if (transforms == null) {
            transforms = new MathTransform2D[WarpTransform2D.MAX_DEGREE + 1];
        }
        if (transforms[degree] == null) {
            final MathTransform2D tr;
            switch (degree) {
                case 0:
                    {
                        // NOTE: 'grid' is not cloned. This GridLocalization's grid will need to be
                        // cloned if a "set" method is invoked after the math transform creation.
                        tr =
                                new LocalizationGridTransform2D(
                                        width, height, grid, getAffineTransform());
                        break;
                    }
                case 1:
                    {
                        tr = (MathTransform2D) ProjectiveTransform.create(getAffineTransform());
                        break;
                    }
                default:
                    {
                        tr = fitWarps(degree);
                        break;
                    }
            }
            transforms[degree] = tr;
        }
        return transforms[degree];
    }

