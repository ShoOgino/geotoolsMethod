    /**
     * Returns the dimension of the first coordinate reference system of the given type. The {@code
     * type} argument must be a subinterface of {@link CoordinateReferenceSystem}. If no such
     * dimension is found, then this method returns {@code -1}.
     *
     * @param crs The coordinate reference system (CRS) to examine.
     * @param type The CRS type to look for. Must be a subclass of {@link
     *     CoordinateReferenceSystem}.
     * @return The dimension range of the specified CRS type, or {@code -1} if none.
     * @throws IllegalArgumentException if the {@code type} is not legal.
     */
    public static int getDimensionOf(
            final CoordinateReferenceSystem crs,
            final Class<? extends CoordinateReferenceSystem> type)
            throws IllegalArgumentException {
        if (type.isAssignableFrom(crs.getClass())) {
            return 0;
        }
        final List<CoordinateReferenceSystem> c = getComponents(crs);
        if (c != null) {
            int offset = 0;
            for (final CoordinateReferenceSystem ci : c) {
                final int index = getDimensionOf(ci, type);
                if (index >= 0) {
                    return index + offset;
                }
                offset += ci.getCoordinateSystem().getDimension();
            }
        }
        return -1;
    }

