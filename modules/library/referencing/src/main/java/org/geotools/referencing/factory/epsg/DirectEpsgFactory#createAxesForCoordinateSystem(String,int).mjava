    /**
     * Returns the coordinate system axis from an EPSG code for a {@link CoordinateSystem}.
     *
     * <p><strong>WARNING:</strong> The EPSG database uses "{@code ORDER}" as a column name. This is
     * tolerated by Access, but MySQL doesn't accept this name.
     *
     * @param code the EPSG code for coordinate system owner.
     * @param dimension of the coordinate system, which is also the size of the returned array.
     * @return An array of coordinate system axis.
     * @throws SQLException if an error occured during database access.
     * @throws FactoryException if the code has not been found.
     */
    private CoordinateSystemAxis[] createAxesForCoordinateSystem(
            final String code, final int dimension) throws SQLException, FactoryException {
        assert Thread.holdsLock(this);
        final CoordinateSystemAxis[] axis = new CoordinateSystemAxis[dimension];
        final PreparedStatement stmt;
        stmt =
                prepareStatement(
                        "AxisOrder",
                        "SELECT COORD_AXIS_CODE"
                                + " FROM [Coordinate Axis]"
                                + " WHERE COORD_SYS_CODE = ?"
                                + " ORDER BY [ORDER]");
        // WARNING: Be careful about the column name :
        //          MySQL rejects ORDER as a column name !!!
        stmt.setInt(1, Integer.parseInt(code));
        int i = 0;
        try (ResultSet result = stmt.executeQuery()) {
            while (result.next()) {
                final String axisCode = getString(result, 1, code);
                if (i < axis.length) {
                    // If 'i' is out of bounds, an exception will be thrown after the loop.
                    // We don't want to thrown an ArrayIndexOutOfBoundsException here.
                    axis[i] = buffered.createCoordinateSystemAxis(axisCode);
                }
                ++i;
            }
        }
        if (i != axis.length) {
            throw new FactoryException(
                    Errors.format(ErrorKeys.MISMATCHED_DIMENSION_$2, axis.length, i));
        }
        return axis;
    }

