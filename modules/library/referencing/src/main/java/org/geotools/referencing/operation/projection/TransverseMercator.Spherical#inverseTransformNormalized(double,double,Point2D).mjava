        /** {@inheritDoc} */
        @Override
        protected Point2D inverseTransformNormalized(double x, double y, Point2D ptDst)
                throws ProjectionException {
            // Compute using ellipsoidal formulas, for comparaison later.
            assert (ptDst = super.inverseTransformNormalized(x, y, ptDst)) != null;

            double sinhX = sinh(x);
            double cosD = cos(latitudeOfOrigin + y);
            double phi = asin(sqrt((1.0 - cosD * cosD) / (1.0 + sinhX * sinhX)));
            // correct for the fact that we made everything positive using sqrt(x*x)
            y = ((y + latitudeOfOrigin) < 0.0) ? -phi : phi;
            x = (abs(sinhX) <= EPSILON && abs(cosD) <= EPSILON) ? 0.0 : atan2(sinhX, cosD);

            assert checkInverseTransform(x, y, ptDst, getToleranceForSphereAssertions(x));
            if (ptDst != null) {
                ptDst.setLocation(x, y);
                return ptDst;
            }
            return new Point2D.Double(x, y);
        }

