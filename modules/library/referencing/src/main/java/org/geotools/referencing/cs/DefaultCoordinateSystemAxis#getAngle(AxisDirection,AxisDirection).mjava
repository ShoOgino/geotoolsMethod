    /**
     * Returns the arithmetic (counterclockwise) angle from the first direction to the second
     * direction, in decimal <strong>degrees</strong>. This method returns a value between -180° and
     * +180°, or {@link Double#NaN NaN} if no angle can be computed.
     *
     * <p>A positive angle denotes a right-handed system, while a negative angle denotes a
     * left-handed system. Example:
     *
     * <p>
     *
     * <ul>
     *   <li>The angle from {@linkplain AxisDirection#EAST EAST} to {@linkplain AxisDirection#NORTH
     *       NORTH} is 90°
     *   <li>The angle from {@linkplain AxisDirection#SOUTH SOUTH} to {@linkplain AxisDirection#WEST
     *       WEST} is -90°
     *   <li>The angle from "<cite>North along 90 deg East</cite>" to "<cite>North along 0
     *       deg</cite>" is 90°.
     * </ul>
     *
     * @param source The source axis direction.
     * @param target The target axis direction.
     * @return The arithmetic angle (in degrees) of the rotation to apply on a line pointing toward
     *     the source direction in order to make it point toward the target direction, or {@link
     *     Double#NaN} if this value can't be computed.
     * @since 2.4
     */
    public static double getAngle(final AxisDirection source, final AxisDirection target) {
        ensureNonNull("source", source);
        ensureNonNull("target", target);
        // Tests for NORTH, SOUTH, EAST, EAST-NORTH-EAST, etc. directions.
        final int compass = getCompassAngle(source, target);
        if (compass != Integer.MIN_VALUE) {
            return compass * (360.0 / COMPASS_DIRECTION_COUNT);
        }
        // Tests for "South along 90 deg East", etc. directions.
        final DirectionAlongMeridian src = DirectionAlongMeridian.parse(source);
        if (src != null) {
            final DirectionAlongMeridian tgt = DirectionAlongMeridian.parse(target);
            if (tgt != null) {
                return src.getAngle(tgt);
            }
        }
        return Double.NaN;
    }

