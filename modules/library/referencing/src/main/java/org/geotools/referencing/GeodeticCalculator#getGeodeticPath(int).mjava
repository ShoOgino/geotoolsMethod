    /**
     * Calculates the geodetic curve between two points in the referenced ellipsoid. A curve in the
     * ellipsoid is a path which points contain the longitude and latitude of the points in the
     * geodetic curve. The geodetic curve is computed from the {@linkplain
     * #getStartingGeographicPoint starting point} to the {@linkplain #getDestinationGeographicPoint
     * destination point}.
     *
     * @param numPoints The number of vertices <strong>between</strong> the start and destination
     *     points
     * @return vertices approximating the curve
     * @todo We should check for cases where the path cross the 90Â°N, 90Â°S, 90Â°E or 90Â°W
     *     boundaries.
     */
    public List<Point2D> getGeodeticPath(int numPoints) {
        if (numPoints < 0) {
            throw new IllegalArgumentException(
                    Errors.format(ErrorKeys.ILLEGAL_ARGUMENT_$2, "numPoints", numPoints));
        }

        List<Point2D> points = new ArrayList<>(numPoints + 2);

        if (!directionValid) {
            computeDirection();
        }

        if (!destinationValid) {
            computeDestinationPoint();
        }

        final double delta = distance / (numPoints + 1);

        points.add(new Point2D.Double(long1, lat1));
        GeodesicLine line = geod.Line(lat1, long1, azimuth);

        for (int i = 1; i <= numPoints + 1; i++) {
            GeodesicData g =
                    line.Position(
                            i * delta,
                            GeodesicMask.LATITUDE
                                    | GeodesicMask.LONGITUDE
                                    | GeodesicMask.LONG_UNROLL);
            points.add(new Point2D.Double(g.lon2, g.lat2));
        }

        return points;
    }

