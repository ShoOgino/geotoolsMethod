    /**
     * Transforms the specified (<var>x</var>,<var>y</var>) coordinates and stores the result in
     * {@code lp}.
     */
    protected Point2D inverseTransformNormalized(double x, double y, final Point2D lp)
            throws ProjectionException {
        double lam, phi;
        if (isSpherical) {

            double t = Math.abs(y *= scaleFactor);
            // if (t - EPS <= 1.) {//if (true) { //if ((t = fabs(xy.y *= P->k0)) - EPS <= 1.) {
            if (true) {
                if (t >= 1.) {
                    phi = y < 0. ? -HALFPI : HALFPI;
                } else {
                    phi = Math.asin(y);
                }
                lam = x / scaleFactor;
            } else {
                throw new ProjectionException();
            }
        } else {
            phi = ProjectionMath.authlat(Math.asin(2. * y * scaleFactor / qp), apa);
            lam = x / scaleFactor;
        }

        if (lp != null) {
            lp.setLocation(lam, phi);
            return lp;
        } else {
            return new Point2D.Double(lam, phi);
        }
    }

