        /**
         * Inverse transforms a list of coordinate point ordinal values. Ordinates must be
         * (<var>x</var>,<var>y</var>) pairs in metres.
         *
         * @throws ProjectionException if a point can't be transformed. This method tries to
         *     transform every points even if some of them can't be transformed. Non-transformable
         *     points will have value {@link Double#NaN}. If more than one point can't be
         *     transformed, then this exception may be about an arbitrary point.
         */
        @Override
        public final void transform(
                final double[] src, int srcOffset, final double[] dest, int dstOffset, int numPts)
                throws TransformException {
            /*
             * Vérifie s'il faudra parcourir le tableau en sens inverse.
             * Ce sera le cas si les tableaux source et destination se
             * chevauchent et que la destination est après la source.
             */
            final boolean reverse =
                    (src == dest && srcOffset < dstOffset && srcOffset + (2 * numPts) > dstOffset);
            if (reverse) {
                srcOffset += 2 * numPts;
                dstOffset += 2 * numPts;
            }
            final Point2D.Double point = new Point2D.Double();
            ProjectionException firstException = null;
            while (--numPts >= 0) {
                try {
                    point.x = src[srcOffset++];
                    point.y = src[srcOffset++];
                    transform(point, point);
                    dest[dstOffset++] = point.x;
                    dest[dstOffset++] = point.y;
                } catch (ProjectionException exception) {
                    dest[dstOffset++] = Double.NaN;
                    dest[dstOffset++] = Double.NaN;
                    if (firstException == null) {
                        firstException = exception;
                    }
                }
                if (reverse) {
                    srcOffset -= 4;
                    dstOffset -= 4;
                }
            }
            if (firstException != null) {
                throw firstException;
            }
        }

