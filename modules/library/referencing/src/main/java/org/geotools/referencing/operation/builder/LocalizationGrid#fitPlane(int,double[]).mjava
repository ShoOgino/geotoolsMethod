    /**
     * Fit a plane through the longitude or latitude values. More specifically, find coefficients
     * <var>c</var>, <var>cx</var> and <var>cy</var> for the following equation:
     *
     * <pre>[longitude or latitude] = c + cx*x + cy*y</pre>
     *
     * .
     *
     * <p>where <var>x</var> and <var>cx</var> are grid coordinates. Coefficients are computed using
     * the least-squares method.
     *
     * @param offset {@link X_OFFSET} for fitting longitude values, or {@link X_OFFSET} for fitting
     *     latitude values (assuming tha "real world" coordinates are longitude and latitude
     *     values).
     * @param coeff An array of length 6 in which to store plane's coefficients. Coefficients will
     *     be store in the following order:
     *     <p>{@code coeff[0 + offset] = cx;} {@code coeff[2 + offset] = cy;} {@code coeff[4 +
     *     offset] = c;}
     */
    private void fitPlane(final int offset, final double[] coeff) {
        /*
         * Compute the sum of x, y and z values. Compute also the sum of x*x, y*y, x*y, z*x and z*y
         * values. When possible, we will avoid to compute the sum inside the loop and use the
         * following identities instead:
         *
         *           1 + 2 + 3 ... + n    =    n*(n+1)/2              (arithmetic series)
         *        1² + 2² + 3² ... + n²   =    n*(n+0.5)*(n+1)/3
         */
        double z, zx, zy;
        z = zx = zy = 0; // To be computed in the loop.
        int n = offset;
        for (int yi = 0; yi < height; yi++) {
            for (int xi = 0; xi < width; xi++) {
                assert computeOffset(xi, yi) + offset == n : n;
                final double zi = grid[n];
                z += zi;
                zx += zi * xi;
                zy += zi * yi;
                n += CP_LENGTH;
            }
        }
        n = (n - offset) / CP_LENGTH;
        assert n == width * height : n;
        double x = (n * (double) (width - 1)) / 2;
        double y = (n * (double) (height - 1)) / 2;
        double xx = (n * (width - 0.5) * (width - 1)) / 3;
        double yy = (n * (height - 0.5) * (height - 1)) / 3;
        double xy = (n * (double) ((height - 1) * (width - 1))) / 4;
        /*
         * Solve the following equations for cx and cy:
         *
         *    ( zx - z*x )  =  cx*(xx - x*x) + cy*(xy - x*y)
         *    ( zy - z*y )  =  cx*(xy - x*y) + cy*(yy - y*y)
         */
        zx -= z * x / n;
        zy -= z * y / n;
        xx -= x * x / n;
        xy -= x * y / n;
        yy -= y * y / n;
        final double den = (xy * xy - xx * yy);
        final double cy = (zx * xy - zy * xx) / den;
        final double cx = (zy * xy - zx * yy) / den;
        final double c = (z - (cx * x + cy * y)) / n;
        coeff[0 + offset] = cx;
        coeff[2 + offset] = cy;
        coeff[4 + offset] = c;
    }

