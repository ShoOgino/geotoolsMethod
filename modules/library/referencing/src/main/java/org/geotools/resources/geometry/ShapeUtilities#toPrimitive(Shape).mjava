    /**
     * Tente de remplacer la forme géométrique {@code path} par une des formes standards
     * de Java2D. Par exemple, si {@code path} ne contient qu'un simple segment de droite
     * ou une courbe quadratique, alors cette méthode retournera un objet {@link Line2D} ou
     * {@link QuadCurve2D} respectivement.
     *
     * @param  path Forme géométrique à simplifier (généralement un objet {@link GeneralPath}).
     * @return Forme géométrique standard, ou {@code path} si aucun remplacement n'est proposé.
     */
    public static Shape toPrimitive(final Shape path) {
        final float[] buffer = new float[6];
        final PathIterator it = path.getPathIterator(null);
        if (!it.isDone() && it.currentSegment(buffer) == PathIterator.SEG_MOVETO && !it.isDone()) {
            final float x1 = buffer[0];
            final float y1 = buffer[1];
            final int code = it.currentSegment(buffer);
            if (it.isDone()) {
                switch (code) {
                    case PathIterator.SEG_LINETO:  return new       Line2D.Float(x1,y1, buffer[0],buffer[1]);
                    case PathIterator.SEG_QUADTO:  return new  QuadCurve2D.Float(x1,y1, buffer[0],buffer[1], buffer[2],buffer[3]);
                    case PathIterator.SEG_CUBICTO: return new CubicCurve2D.Float(x1,y1, buffer[0],buffer[1], buffer[2],buffer[3], buffer[4],buffer[5]);
                }
            }
        }
        return path;
    }

