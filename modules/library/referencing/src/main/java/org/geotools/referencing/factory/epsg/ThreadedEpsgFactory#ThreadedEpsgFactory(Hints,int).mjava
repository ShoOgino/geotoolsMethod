    /**
     * Constructs an authority factory using a set of factories created from the specified hints.
     * This constructor recognizes the {@link Hints#CRS_FACTORY CRS}, {@link Hints#CS_FACTORY CS},
     * {@link Hints#DATUM_FACTORY DATUM} and {@link Hints#MATH_TRANSFORM_FACTORY MATH_TRANSFORM}
     * {@code FACTORY} hints, in addition of {@link Hints#EPSG_DATA_SOURCE EPSG_DATA_SOURCE}.
     *
     * @param userHints An optional set of hints, or {@code null} if none.
     * @param priority The priority for this factory, as a number between {@link #MINIMUM_PRIORITY
     *     MINIMUM_PRIORITY} and {@link #MAXIMUM_PRIORITY MAXIMUM_PRIORITY} inclusive.
     */
    public ThreadedEpsgFactory(final Hints userHints, final int priority) {
        super(userHints, priority);

        Object hint = (userHints == null) ? null : userHints.get(Hints.EPSG_DATA_SOURCE);

        if (hint == null) {
            datasourceName = DATASOURCE_NAME;
            // datasourceName = GeoTools.fixName(DATASOURCE_NAME);
            hints.put(Hints.EPSG_DATA_SOURCE, datasourceName);
        } else if (hint instanceof String) {
            datasourceName = (String) hint;
            // datasourceName = GeoTools.fixName(datasourceName);
            hints.put(Hints.EPSG_DATA_SOURCE, datasourceName);
        } else if (hint instanceof Name) {
            Name name = (Name) hint;
            hints.put(Hints.EPSG_DATA_SOURCE, name);
            datasourceName = name.toString();
            // datasourceName = GeoTools.fixName(name.toString());
        } else if (hint instanceof DataSource) {
            datasource = (DataSource) hint;
            hints.put(Hints.EPSG_DATA_SOURCE, datasource);
            datasourceName = DATASOURCE_NAME;
            dynamicDataSource = false;
        }
        factories = ReferencingFactoryContainer.instance(userHints);
        long timeout = 30 * 60 * 1000;
        String defaultTimeout =
                System.getProperty(
                        "org.geotools.epsg.factory.timeout", String.valueOf(30 * 60 * 1000));
        try {
            timeout = Long.valueOf(defaultTimeout);
        } catch (NumberFormatException e) {
            LOGGER.log(
                    Level.WARNING,
                    "Invalid value for org.geotools.epsg.factory.timeout, "
                            + "using the default (30 minutes) instead");
        }
        // in case of negative timeout, we don't release the data source and backing store
        if (timeout > 0) {
            LOGGER.log(
                    Level.FINE,
                    "Setting the EPSG factory "
                            + getClass().getName()
                            + " to a "
                            + timeout
                            + "ms timeout");
            setTimeout(timeout); // Close the connection after 1 second of inactivity.
        } else {
            LOGGER.log(
                    Level.FINE, "The EPSG factory " + getClass().getName() + " will not timeout");
        }
    }

