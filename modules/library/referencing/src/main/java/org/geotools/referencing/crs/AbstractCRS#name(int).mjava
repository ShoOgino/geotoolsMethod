    /**
     * Creates a name for the predefined constants in subclasses. The name is an unlocalized String
     * object. However, since this method is used for creation of convenience objects only (not for
     * objects created from an "official" database), the "unlocalized" name is actually choosen
     * according the user's locale at class initialization time. The same name is also added in a
     * localizable form as an alias. Since the {@link #nameMatches} convenience method checks the
     * alias, it still possible to consider two objects are equivalent even if their names were
     * formatted in different locales.
     */
    static Map<String, ?> name(final int key) {
        final Map<String, Object> properties = new HashMap<>(4);
        final InternationalString name = Vocabulary.formatInternational(key);
        properties.put(NAME_KEY, name.toString());
        properties.put(ALIAS_KEY, name);
        return properties;
    }

