    //////////////////////////////////////////////////////////////////////////////////////////////
    //////                                                                                 ///////
    //////   HARD CODED VALUES (other than SQL statements) RELATIVE TO THE EPSG DATABASE   ///////
    //////                                                                                 ///////
    //////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * Returns a hard-coded unit from an EPSG code. We do not need to provide all units here,
     * but we must at least provide all base units declared in the [TARGET_UOM_CODE] column
     * of table [Unit of Measure]. Other units will be derived automatically if they are not
     * listed here.
     *
     * @param  code The code.
     * @return The unit, or {@code null} if the code is unrecognized.
     */
    private static Unit<?> getUnit(final int code) {
        switch (code) {
        case 9001:
            return SI.METRE;
        case 9002:
            return USCustomary.FOOT;
        case 9030:
            return USCustomary.NAUTICAL_MILE;
        case 9036:
            return MetricPrefix.KILO(SI.METRE);
        case 9101:
            return SI.RADIAN;
        case 9122: // Fall through
        case 9102:
            return NonSI.DEGREE_ANGLE;
        case 9103:
            return NonSI.MINUTE_ANGLE;
        case 9104:
            return NonSI.SECOND_ANGLE;
        case 9105:
            return USCustomary.GRADE;
            // DMS is a way to format information but not a real unit, decode towards DEGREE instead
        case 9107:
            return NonSI.DEGREE_ANGLE;// return Units.DEGREE_MINUTE_SECOND;
        case 9108:
            return NonSI.DEGREE_ANGLE; // return Units.DEGREE_MINUTE_SECOND;
        case 9109:
            return MetricPrefix.MICRO(SI.RADIAN);
        case 9110:
            return Units.SEXAGESIMAL_DMS;
        // TODO case 9111: return NonSI.SEXAGESIMAL_DM;
        case 9203: // Fall through
        case 9201:
            return AbstractUnit.ONE;
        case 9202:
            return Units.PPM;
        default:
            return null;
        }
    }

