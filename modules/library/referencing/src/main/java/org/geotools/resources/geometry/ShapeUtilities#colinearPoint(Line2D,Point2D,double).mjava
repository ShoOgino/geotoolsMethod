    /**
     * Retourne le point sur le segment de droite {@code line} qui se trouve à la
     * distance {@code distance} spécifiée du point {@code point}. Appellons
     * {@code result} le point retourné par cette méthode. Si {@code result}
     * est non-nul, alors il est garanti qu'il répond aux conditions suivantes (aux
     * erreurs d'arrondissements près):
     *
     * <ul>
     *   <li>{@code result} est un point du segment de droite {@code line}.
     *       Il ne trouve pas au delà des points extrêmes P1 et P2 de ce segment.</li>
     *   <li>La distance entre les points {@code result} et {@code point}
     *       est exactement {@code distance} (aux erreurs d'arrondissements près).
     *       Cette distance peut être calculée par {@code point.distance(result)}.</li>
     * </ul>
     *
     * Si aucun point ne peut répondre à ces conditions, alors cette méthode retourne
     * {@code null}. Si deux points peuvent répondre à ces conditions, alors par
     * convention cette méthode retourne le point le plus près du point {@code line.getP1()}.
     *
     * @param line The line on which to searh for a point.
     * @param point A point close to the given line.
     * @param distance The distance between the given point and the point to be returned.
     * @return A point on the given line located at the given distance from the given point.
     *
     * @see #nearestColinearPoint(Line2D, Point2D)
     */
    public static Point2D colinearPoint(Line2D line, Point2D point, double distance) {
        return colinearPoint(line.getX1(), line.getY1(), line.getX2(), line.getY2(),
                             point.getX(), point.getY(), distance);
    }

