    /**
     * Retourne le point sur le segment de droite {@code (x1,y1)-(x2,y2)} qui se trouve le plus près
     * du point {@code (x,y)} spécifié. Appellons {@code result} le point retourné par cette
     * méthode. Il est garanti que {@code result} répond aux conditions suivantes (aux erreurs
     * d'arrondissements près):
     *
     * <ul>
     *   <li>{@code result} est un point du segment de droite {@code (x1,y1)-(x2,y2)}. Il ne trouve
     *       pas au delà des points extrêmes {@code (x1,y1)} et {@code (x2,y2)} de ce segment.
     *   <li>La distance entre les points {@code result} et {@code (x,y)} est la plus courte
     *       distance possible pour les points qui respectent la condition précédente. Cette
     *       distance peut être calculée par <code>new&nbsp;Point2D.Double(x,y).distance(result)
     *       </code>.
     * </ul>
     *
     * @param x1 <var>x</var> value of the first point on the line.
     * @param y1 <var>y</var> value of the first point on the line.
     * @param x2 <var>x</var> value of the last point on the line.
     * @param y2 <var>y</var> value of the last point on the line.
     * @param x <var>x</var> value of a point close to the given line.
     * @param y <var>y</var> value of a point close to the given line.
     * @return The nearest point on the given line.
     * @see #colinearPoint(double,double , double,double , double,double , double)
     */
    public static Point2D nearestColinearPoint(
            final double x1,
            final double y1,
            final double x2,
            final double y2,
            double x,
            double y) {
        final double slope = (y2 - y1) / (x2 - x1);
        if (!Double.isInfinite(slope)) {
            final double y0 = (y2 - slope * x2);
            x = ((y - y0) * slope + x) / (slope * slope + 1);
            y = x * slope + y0;
        } else {
            x = x2;
        }
        if (x1 <= x2) {
            if (x < x1) x = x1;
            if (x > x2) x = x2;
        } else {
            if (x > x1) x = x1;
            if (x < x2) x = x2;
        }
        if (y1 <= y2) {
            if (y < y1) y = y1;
            if (y > y2) y = y2;
        } else {
            if (y > y1) y = y1;
            if (y < y2) y = y2;
        }
        return new Point2D.Double(x, y);
    }

