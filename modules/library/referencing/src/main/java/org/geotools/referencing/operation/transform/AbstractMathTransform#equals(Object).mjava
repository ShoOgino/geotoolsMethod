    /**
     * Compares the specified object with this math transform for equality.
     * The default implementation checks if {@code object} is an instance
     * of the same class than {@code this} and use the same parameter descriptor.
     * Subclasses should override this method in order to compare internal fields.
     *
     * @param object The object to compare with this transform.
     * @return {@code true} if the given object is a transform of the same class
     *         and if, given identical source position, the
     *         {@linkplain #transform(DirectPosition,DirectPosition) transformed}
     *         position would be the equals.
     */
    @Override
    public boolean equals(final Object object) {
        // Do not check 'object==this' here, since this
        // optimization is usually done in subclasses.
        if (object!=null && getClass().equals(object.getClass())) {
            final AbstractMathTransform that = (AbstractMathTransform) object;
            return Utilities.equals(this.getParameterDescriptors(),
                                    that.getParameterDescriptors());
        }
        return false;
    }

