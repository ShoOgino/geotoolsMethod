    /**
     * Checks if the type is compatible with the expected one. This method is used as a safety
     * by {@code getFooAuthorityFactory(String)} methods in {@link URN_AuthorityFactory}. If a
     * mismatch is found, a warning is logged but no exception is thrown since it doesn't prevent
     * the class to work in a predicable way. It is just an indication for the user that his URN
     * may be wrong.
     */
    final void logWarningIfTypeMismatch(final Class<? extends AuthorityFactory> expected) {
        if (!expected.isAssignableFrom(type.type)) {
            // Build a simplified URN, omitting "urn:ogc:def" and version number.
            final String urn = "..." + SEPARATOR + type + SEPARATOR + authority + SEPARATOR + code;
            final LogRecord record = Loggings.format(Level.WARNING,
                    LoggingKeys.MISMATCHED_URN_TYPE_$1, urn);
            // Set the source to the public or protected method.
            record.setSourceClassName(URN_AuthorityFactory.class.getName());
            record.setSourceMethodName("get" + Classes.getShortName(expected));
            final Logger logger = AbstractAuthorityFactory.LOGGER;
            record.setLoggerName(logger.getName());
            logger.log(record);
        }
    }

