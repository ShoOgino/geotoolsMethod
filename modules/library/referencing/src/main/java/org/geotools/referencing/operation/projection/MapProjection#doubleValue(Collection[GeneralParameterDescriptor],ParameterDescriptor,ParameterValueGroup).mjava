    /**
     * Returns the parameter value for the specified operation parameter. Values are automatically
     * converted into the standard units specified by the supplied {@code param} argument, except
     * {@link NonSI#DEGREE_ANGLE degrees} which are converted to {@link SI#RADIAN radians}.
     *
     * @param expected The value returned by {@code getParameterDescriptors().descriptors()}.
     * @param param The parameter to look for.
     * @param group The parameter value group to search into.
     * @return The requested parameter value, or {@code NaN} if {@code param} is {@linkplain
     *     MathTransformProvider#createOptionalDescriptor optional} and the user didn't provided any
     *     value.
     * @throws ParameterNotFoundException if the parameter is not found.
     * @see MathTransformProvider#doubleValue
     */
    final double doubleValue(
            final Collection<GeneralParameterDescriptor> expected,
            final ParameterDescriptor param,
            final ParameterValueGroup group)
            throws ParameterNotFoundException {
        if (isExpectedParameter(expected, param)) {
            /*
             * Gets the value supplied by the user. The conversion from decimal
             * degrees to radians (if needed) is performed by AbstractProvider.
             */
            return AbstractProvider.doubleValue(param, group);
        }
        /*
         * The constructor asked for a parameter value that do not apply to the type of the
         * projection to be created. Returns a default value common to all projection types,
         * but this value should not be used in projection computations.
         */
        double v;
        final Object value = param.getDefaultValue();
        if (value instanceof Number) {
            v = ((Number) value).doubleValue();
            if (NonSI.DEGREE_ANGLE.equals(param.getUnit())) {
                v = toRadians(v);
            }
        } else {
            v = Double.NaN;
        }
        return v;
    }

