    /**
     * Checks a parameter value against its {@linkplain ParameterDescriptor parameter descriptor}.
     * This method takes care of handling checking arrays and collections against parameter
     * descriptor.
     *
     * <p>When the {@linkplain ParameterDescriptor#getValueClass value class} is an array (like
     * {@code double[].class}) or a {@linkplain Collection collection} (like {@code List.class}),
     * the descriptor {@linkplain ParameterDescriptor#getMinimumValue minimum value}, {@linkplain
     * ParameterDescriptor#getMaximumValue maximum value} and {@linkplain
     * ParameterDescriptor#getValidValues valid values} will be used to check the elements.
     *
     * @param parameter The parameter to test.
     * @return true if parameter is valid.
     * @see Parameter#ensureValidValue
     */
    public static boolean isValid(final ParameterValue<?> parameter) {
        final ParameterDescriptor<?> descriptor = parameter.getDescriptor();
        final Object value = parameter.getValue();
        if (value == null) {
            // Accepts null values only if explicitly authorized.
            final Set<?> validValues = descriptor.getValidValues();
            return validValues != null && validValues.contains(value);
        }
        final Class<?> type = Classes.primitiveToWrapper(value.getClass());
        final Class<?> expected = Classes.primitiveToWrapper(descriptor.getValueClass());
        if (expected.isAssignableFrom(type)) {
            return false; // value not of the correct type
        }
        if (type.isArray()) {
            // handle checking elements in an aray
            final int length = Array.getLength(value);
            for (int i = 0; i < length; i++) {
                if (!isValidValue(Array.get(value, i), descriptor)) {
                    return false;
                }
            }
        } else if (value instanceof Collection) {
            // handle checking elements in a collection
            for (final Object element : (Collection) value) {
                if (!isValidValue(element, descriptor)) {
                    return false;
                }
            }
        } else {
            if (!isValidValue(value, descriptor)) {
                return false;
            }
        }
        return true;
    }

