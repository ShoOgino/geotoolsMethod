    /**
     * Disposes any resources hold by this object.
     *
     * @throws FactoryException if an error occured while closing the connection.
     */
    @Override
    public synchronized void dispose() throws FactoryException {
        final boolean isClosed;
        try (Connection connection = getConnection()) {
            isClosed = connection.isClosed();
            for (final Iterator<Reference<AuthorityCodes>> it = authorityCodes.values().iterator();
                    it.hasNext(); ) {
                final AuthorityCodes set = it.next().get();
                if (set != null) {
                    set.finalize();
                }
                it.remove();
            }
            for (final Iterator<PreparedStatement> it = statements.values().iterator();
                    it.hasNext(); ) {
                (it.next()).close();
                it.remove();
            }
            shutdown(true);
            dataSource = null;
        } catch (SQLException exception) {
            throw new FactoryException(exception);
        }
        super.dispose();
        try {
            shutdown(false);
        } catch (SQLException exception) {
            throw new FactoryException(exception);
        }
        if (!isClosed) {
            /*
             * The above code was run inconditionnaly as a safety, even if the connection
             * was already closed. However we will log a message only if we actually closed
             * the connection, otherwise the log records are a little bit misleading.
             */
            final LogRecord record = Loggings.format(Level.FINE, LoggingKeys.CLOSED_EPSG_DATABASE);
            record.setLoggerName(LOGGER.getName());
            LOGGER.log(record);
        }
    }

