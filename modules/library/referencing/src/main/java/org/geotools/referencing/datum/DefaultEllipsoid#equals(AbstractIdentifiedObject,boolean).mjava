    /**
     * Compare this ellipsoid with the specified object for equality.
     *
     * @param object The object to compare to {@code this}.
     * @param compareMetadata {@code true} for performing a strict comparaison, or {@code false} for
     *     comparing only properties relevant to transformations.
     * @return {@code true} if both objects are equal.
     */
    @Override
    public boolean equals(final AbstractIdentifiedObject object, final boolean compareMetadata) {
        if (object == this) {
            return true; // Slight optimization.
        }
        if (super.equals(object, compareMetadata)) {
            final DefaultEllipsoid that = (DefaultEllipsoid) object;

            if (!compareMetadata) {
                UnitConverter converter = that.unit.getConverterTo(this.unit);
                return Utilities.equals(this.semiMajorAxis, converter.convert(that.semiMajorAxis))
                        && Utilities.equals(
                                this.semiMinorAxis, converter.convert(that.semiMinorAxis));
            } else {
                return (this.ivfDefinitive == that.ivfDefinitive)
                        && Utilities.equals(this.semiMajorAxis, that.semiMajorAxis)
                        && Utilities.equals(this.semiMinorAxis, that.semiMinorAxis)
                        && Utilities.equals(this.inverseFlattening, that.inverseFlattening)
                        && Utilities.equals(this.unit, that.unit);
            }
        }
        return false;
    }

