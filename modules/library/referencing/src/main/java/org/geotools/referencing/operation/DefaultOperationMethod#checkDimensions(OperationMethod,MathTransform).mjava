    /**
     * Checks if an operation method and a math transform have a compatible number of source and
     * target dimensions. In the particular case of a {@linkplain PassThroughTransform pass through
     * transform} with more dimension than the expected number, the check will rather be performed
     * against the {@linkplain PassThroughTransform#getSubTransform sub transform}.
     *
     * <p>This convenience method is provided for argument checking.
     *
     * @param method The operation method to compare to the math transform, or {@code null}.
     * @param transform The math transform to compare to the operation method, or {@code null}.
     * @throws MismatchedDimensionException if the number of dimensions are incompatibles.
     * @todo The check for {@link ConcatenatedTransform} and {@link PassThroughTransform} works only
     *     for Geotools implementation.
     */
    public static void checkDimensions(final OperationMethod method, MathTransform transform)
            throws MismatchedDimensionException {
        if (method != null && transform != null) {
            int actual, expected = method.getSourceDimensions();
            while ((actual = transform.getSourceDimensions()) > expected) {
                if (transform instanceof ConcatenatedTransform) {
                    // Ignore axis switch and unit conversions.
                    final ConcatenatedTransform c = (ConcatenatedTransform) transform;
                    if (isTrivial(c.transform1)) {
                        transform = c.transform2;
                    } else if (isTrivial(c.transform2)) {
                        transform = c.transform1;
                    } else {
                        // The transform is something more complex than an axis switch.
                        // Stop the loop with the current illegal transform and let the
                        // exception be thrown after the loop.
                        break;
                    }
                } else if (transform instanceof PassThroughTransform) {
                    transform = ((PassThroughTransform) transform).getSubTransform();
                } else {
                    break;
                }
            }
            final String name;
            if (actual != expected) {
                name = "sourceDimensions";
            } else {
                actual = transform.getTargetDimensions();
                expected = method.getTargetDimensions();
                if (actual != expected) {
                    name = "targetDimensions";
                } else {
                    return;
                }
            }
            throw new IllegalArgumentException(
                    Errors.format(ErrorKeys.MISMATCHED_DIMENSION_$3, name, actual, expected));
        }
    }

