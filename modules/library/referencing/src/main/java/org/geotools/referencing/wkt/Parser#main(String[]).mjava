    /**
     * Read WKT strings from the {@linkplain System#in standard input stream} and reformat them to
     * the {@linkplain System#out standard output stream}. The input is read until it reach the
     * end-of-file ({@code [Ctrl-Z]} if reading from the keyboard), or until an unparsable WKT has
     * been hit. Optional arguments are:
     *
     * <TABLE CELLPADDING='0' CELLSPACING='0'>
     *   <TR><TD NOWRAP><CODE>-authority</CODE> <VAR>&lt;name&gt;</VAR></TD>
     *       <TD NOWRAP>&nbsp;The authority to prefer when choosing WKT entities names.</TD></TR>
     *   <TR><TD NOWRAP><CODE>-indentation</CODE> <VAR>&lt;value&gt;</VAR></TD>
     *       <TD NOWRAP>&nbsp;Set the indentation (0 for output on a single line)</TD></TR>
     *   <TR><TD NOWRAP><CODE>-encoding</CODE> <VAR>&lt;code&gt;</VAR></TD>
     *       <TD NOWRAP>&nbsp;Set the character encoding</TD></TR>
     *   <TR><TD NOWRAP><CODE>-locale</CODE> <VAR>&lt;language&gt;</VAR></TD>
     *       <TD NOWRAP>&nbsp;Set the language for the output (e.g. "fr" for French)</TD></TR>
     * </TABLE>
     *
     * @param args The command line arguments.
     */
    public static void main(String[] args) {
        final Arguments arguments = new Arguments(args);
        final Integer indentation = arguments.getOptionalInteger(Formattable.INDENTATION);
        final String authority = arguments.getOptionalString("-authority");
        args = arguments.getRemainingArguments(0);
        if (indentation != null) {
            Formattable.setIndentation(indentation.intValue());
        }
        final BufferedReader in = new BufferedReader(Arguments.getReader(System.in));
        try {
            final Parser parser = new Parser();
            if (authority != null) {
                parser.setAuthority(Citations.fromName(authority));
            }
            parser.reformat(in, arguments.out, arguments.err);
        } catch (Exception exception) {
            java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", exception);
        }
        // Do not close 'in', since it is the standard input stream.
    }

