    /**
     * Transforms the specified (<var>&lambda;</var>,<var>&phi;</var>) coordinates (units in
     * radians) and stores the result in {@code ptDst} (linear distance on a unit sphere).
     */
    protected Point2D transformNormalized(double x, double y, Point2D ptDst)
            throws ProjectionException {
        final double chi = 2.0 * atan(ssfn(y, sin(y))) - PI / 2;
        final double sinChi = sin(chi);
        final double cosChi = cos(chi);
        final double cosChi_cosLon = cosChi * cos(x);
        final double A = k0 / cosChi1 / (1 + sinChi1 * sinChi + cosChi1 * cosChi_cosLon);
        x = A * cosChi * sin(x);
        y = A * (cosChi1 * sinChi - sinChi1 * cosChi_cosLon);

        if (ptDst != null) {
            ptDst.setLocation(x, y);
            return ptDst;
        }
        return new Point2D.Double(x, y);
    }

