    /**
     * Transforms the specified (<var>&lambda;</var>,<var>&phi;</var>) coordinates (units in
     * radians) and stores the result in {@code ptDst} (linear distance on a unit sphere).
     *
     * @param x The longitude of the coordinate, in <strong>radians</strong>.
     * @param y The latitude of the coordinate, in <strong>radians</strong>.
     */
    protected Point2D transformNormalized(double x, double y, Point2D ptDst)
            throws ProjectionException {
        final double sinlat = sin(y);
        final double coslat = cos(y);
        final double sinlatP = sin(latitudeOfOrigin);
        final double coslatP = cos(latitudeOfOrigin);
        final double sinlon1 = sin(x);
        final double coslon1 = cos(x);

        x =
                toDegrees(
                                atan(
                                        (coslat * sinlon1)
                                                / (coslat * sinlatP * coslon1 + sinlat * coslatP)))
                        / globalScale;
        y = toDegrees(asin(sinlat * sinlatP - coslat * coslatP * coslon1)) / globalScale;

        if (ptDst != null) {
            ptDst.setLocation(x, y);
            return ptDst;
        }
        return new Point2D.Double(x, y);
    }

