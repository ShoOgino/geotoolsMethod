    /**
     * Retourne le point sur le segment de droite {@code line} qui se trouve le
     * plus près du point {@code point} spécifié. Appellons {@code result}
     * le point retourné par cette méthode. Il est garanti que {@code result}
     * répond aux conditions suivantes (aux erreurs d'arrondissements près):
     *
     * <ul>
     *   <li>{@code result} est un point du segment de droite {@code line}.
     *       Il ne trouve pas au delà des points extrêmes P1 et P2 de ce segment.</li>
     *   <li>La distance entre les points {@code result} et {@code point}
     *       est la plus courte distance possible pour les points qui respectent la
     *       condition précédente. Cette distance peut être calculée par
     *       {@code point.distance(result)}.</li>
     * </ul>
     *
     * @param segment The line on which to search for a point.
     * @param point A point close to the given line.
     * @return The nearest point on the given line.
     *
     * @see #colinearPoint(Line2D, Point2D, double)
     */
    public static Point2D nearestColinearPoint(final Line2D segment, final Point2D point) {
        return nearestColinearPoint(segment.getX1(), segment.getY1(),
                                    segment.getX2(), segment.getY2(),
                                      point.getX(),    point.getY());
    }

