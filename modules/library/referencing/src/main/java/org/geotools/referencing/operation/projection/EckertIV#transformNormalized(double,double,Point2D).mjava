    /**
     * Transforms the specified (<var>&lambda;</var>,<var>&phi;</var>) coordinates (units in
     * radians) and stores the result in {@code ptDst} (linear distance on a unit sphere).
     */
    protected Point2D transformNormalized(double lam, double phi, Point2D ptDst)
            throws ProjectionException {

        double p = C_p * sin(phi);
        double V = phi * phi;
        phi *= 0.895168 + V * (0.0218849 + V * 0.00826809);
        int i = NITER;
        for (; i > 0; --i) {
            double c = cos(phi);
            double s = sin(phi);
            phi -= V = (phi + s * (c + 2d) - p) / (1d + c * (c + 2d) - s * s);
            if (abs(V) < EPS) {
                break;
            }
        }
        if (ptDst == null) {
            ptDst = new Point2D.Double();
        }
        if (i == 0) {
            ptDst.setLocation(C_x * lam, phi < 0. ? -C_y : C_y);
        } else {
            ptDst.setLocation(C_x * lam * (1. + cos(phi)), C_y * sin(phi));
        }
        return ptDst;
    }

