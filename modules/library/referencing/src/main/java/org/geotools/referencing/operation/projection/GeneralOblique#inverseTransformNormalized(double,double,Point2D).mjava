    /**
     * Transforms the specified (<var>x</var>,<var>y</var>) coordinates (units in radians) and
     * stores the result in {@code ptDst} (linear distance on a unit sphere).
     */
    @Override
    protected Point2D inverseTransformNormalized(double x, double y, Point2D ptDst)
            throws ProjectionException {
        final double scalePI = globalScale * PI / 180;
        final double sinlat = sin(y * scalePI);
        final double coslat = cos(y * scalePI);
        final double sinlon = sin(x * scalePI);
        final double coslon = cos(x * scalePI);
        final double sinlatP = sin(latitudeOfOrigin);
        final double coslatP = cos(latitudeOfOrigin);

        x = -atan((coslat * sinlon) / (sinlat * coslatP - sinlatP * coslat * coslon));
        y = asin(sinlat * sinlatP + coslat * coslon * coslatP);

        if (ptDst != null) {
            ptDst.setLocation(x, y);
            return ptDst;
        }
        return new Point2D.Double(x, y);
    }

