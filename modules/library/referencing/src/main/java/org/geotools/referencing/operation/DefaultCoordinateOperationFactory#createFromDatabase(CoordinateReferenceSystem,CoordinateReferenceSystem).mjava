    /**
     * If the coordinate operation is explicitly defined in some database (typically EPSG), returns
     * it. Otherwise (if there is no database, or if the database doesn't contains an explicit
     * operation from {@code sourceCRS} to {@code targetCRS}, or if this method failed to create an
     * operation from the database), returns {@code null}.
     *
     * <p>The default implementation always returns {@code null}, since there is no database
     * connected to a {@code DefaultCoordinateOperationFactory} instance. In other words, the
     * default implementation is "standalone": it tries to figure out transformation paths by
     * itself. Subclasses should override this method if they can fetch a more accurate operation
     * from some database. The mean subclass doing so is {@link AuthorityBackedFactory}.
     *
     * <p>This method is invoked by <code>{@linkplain #createOperation createOperation}(sourceCRS,
     * targetCRS)</code> before to try to figure out a transformation path by itself. It is also
     * invoked by various {@code createOperationStep(...)} methods when an intermediate CRS was
     * obtained by {@link GeneralDerivedCRS#getBaseCRS()} (this case occurs especially during
     * {@linkplain GeographicCRS geographic} from/to {@linkplain ProjectedCRS projected} CRS
     * operations). This method is <strong>not</strong> invoked for synthetic CRS generated by
     * {@code createOperationStep(...)}, since those temporary CRS are not expected to exist in a
     * database.
     *
     * @param sourceCRS Input coordinate reference system.
     * @param targetCRS Output coordinate reference system.
     * @return A coordinate operation from {@code sourceCRS} to {@code targetCRS} if and only if one
     *     is explicitly defined in some underlying database, or {@code null} otherwise.
     * @since 2.3
     */
    protected CoordinateOperation createFromDatabase(
            final CoordinateReferenceSystem sourceCRS, final CoordinateReferenceSystem targetCRS) {
        return null;
    }

