    /**
     * Concatenate two operation steps. If an operation is an {@link #AXIS_CHANGES}, it will be
     * included as part of the second operation instead of creating an {@link
     * ConcatenatedOperation}. If a concatenated operation is created, it will get an automatically
     * generated name.
     *
     * @param step1 The first step, or {@code null} for the identity operation.
     * @param step2 The second step, or {@code null} for the identity operation.
     * @return A concatenated operation, or {@code null} if all arguments was nul.
     * @throws FactoryException if the operation can't be constructed.
     */
    protected CoordinateOperation concatenate(
            final CoordinateOperation step1, final CoordinateOperation step2)
            throws FactoryException {
        if (step1 == null) return step2;
        if (step2 == null) return step1;
        if (isIdentity(step1)) return step2;
        if (isIdentity(step2)) return step1;
        final MathTransform mt1 = step1.getMathTransform();
        final MathTransform mt2 = step2.getMathTransform();
        final CoordinateReferenceSystem sourceCRS = step1.getSourceCRS();
        final CoordinateReferenceSystem targetCRS = step2.getTargetCRS();
        CoordinateOperation step = null;
        if (step1.getName() == AXIS_CHANGES
                && mt1.getSourceDimensions() == mt1.getTargetDimensions()) step = step2;
        if (step2.getName() == AXIS_CHANGES
                && mt2.getSourceDimensions() == mt2.getTargetDimensions()) step = step1;
        if (step instanceof Operation) {
            /*
             * Applies only on operation in order to avoid merging with PassThroughOperation.
             * Also applies only if the transform to hide has identical source and target
             * dimensions in order to avoid mismatch with the method's dimensions.
             */
            return createFromMathTransform(
                    AbstractIdentifiedObject.getProperties(step),
                    sourceCRS,
                    targetCRS,
                    mtFactory.createConcatenatedTransform(mt1, mt2),
                    ((Operation) step).getMethod(),
                    CoordinateOperation.class);
        }
        return createConcatenatedOperation(
                getTemporaryName(sourceCRS, targetCRS), new CoordinateOperation[] {step1, step2});
    }

