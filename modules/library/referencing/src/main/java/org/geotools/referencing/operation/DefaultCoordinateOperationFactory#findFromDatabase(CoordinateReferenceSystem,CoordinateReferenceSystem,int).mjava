    /**
     * Returns a list of available coordinate operations explicitly defined in some database
     * (typically EPSG), for the provided CRS pair. Otherwise (if there is no database, or if the
     * database doesn't contains any explicit operation from {@code sourceCRS} to {@code targetCRS},
     * or if this method failed to create the operations from the database), returns an empty {@link
     * Set}.
     *
     * <p>The default implementation always returns an empty {@link Set}, since there is no database
     * connected to a {@code DefaultCoordinateOperationFactory} instance. In other words, the
     * default implementation is "standalone": it tries to figure out transformation paths by
     * itself. Subclasses should override this method if they can fetch a more accurate operation
     * from some database. The mean subclass doing so is {@link AuthorityBackedFactory}.
     *
     * <p>This method is invoked by <code>{@linkplain #findOperations findOperations}(sourceCRS,
     * targetCRS)</code> before to try to figure out a transformation path by itself. It is also
     * invoked by various {@code findOperationSteps(...)} methods when an intermediate CRS was
     * obtained by {@link GeneralDerivedCRS#getBaseCRS()} (this case occurs especially during
     * {@linkplain GeographicCRS geographic} from/to {@linkplain ProjectedCRS projected} CRS
     * operations). This method is <strong>not</strong> invoked for synthetic CRS generated by
     * {@code createOperationStep(...)}, since those temporary CRS are not expected to exist in a
     * database.
     *
     * @param sourceCRS Input coordinate reference system.
     * @param targetCRS Output coordinate reference system.
     * @param limit The maximum number of operations to be returned. Use -1 to return all the
     *     available operations. Use 1 to return just one operations. Currently, the behavior for
     *     other values of {@code limit} is undefined.
     * @return A set of coordinate operations from {@code sourceCRS} to {@code targetCRS} if and
     *     only if one is explicitly defined in some underlying database, or an empty {@link Set}
     *     otherwise.
     * @since 2.3
     */
    protected Set<CoordinateOperation> findFromDatabase(
            CoordinateReferenceSystem sourceCRS, CoordinateReferenceSystem targetCRS, int limit) {
        return Collections.emptySet();
    }

