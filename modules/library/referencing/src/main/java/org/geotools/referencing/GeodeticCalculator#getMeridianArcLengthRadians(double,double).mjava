    /**
     * Calculates the meridian arc length between two points in the same meridian
     * in the referenced ellipsoid.
     *
     * @param  P1 The latitude of the first  point (in radians).
     * @param  P2 The latitude of the second point (in radians).
     * @return Returned the meridian arc length between P1 and P2
     */
    private double getMeridianArcLengthRadians(final double P1, final double P2) {
        /*
         * Latitudes P1 and P2 in radians positive North and East.
         * Forward azimuths at both points returned in radians from North.
         *
         * Source: ftp://ftp.ngs.noaa.gov/pub/pcsoft/for_inv.3d/source/inverse.for
         *         subroutine GPNARC
         *         version    200005.26
         *         written by Robert (Sid) Safford
         *
         * Ported from Fortran to Java by Daniele Franzoni.
         */
        double S1 = abs(P1);
        double S2 = abs(P2);
        double DA = (P2-P1);
        // Check for a 90 degree lookup
        if (S1 > TOLERANCE_0 || S2 <= (PI/2 - TOLERANCE_0) || S2 >= (PI/2 + TOLERANCE_0)) {
            final double DB = sin(P2* 2.0) - sin(P1* 2.0);
            final double DC = sin(P2* 4.0) - sin(P1* 4.0);
            final double DD = sin(P2* 6.0) - sin(P1* 6.0);
            final double DE = sin(P2* 8.0) - sin(P1* 8.0);
            final double DF = sin(P2*10.0) - sin(P1*10.0);
            // Compute the S2 part of the series expansion
            S2 = -DB*B/2.0 + DC*C/4.0 - DD*D/6.0 + DE*E/8.0 - DF*F/10.0;
        } else {
            S2  = 0;
        }
        // Compute the S1 part of the series expansion
        S1 = DA * A;
        // Compute the arc length
        return abs(semiMajorAxis * (1.0-eccentricitySquared) * (S1+S2));
    }

