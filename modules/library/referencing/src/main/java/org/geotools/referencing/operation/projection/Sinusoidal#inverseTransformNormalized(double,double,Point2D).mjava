    /**
     * Transforms the specified (<var>x</var>,<var>y</var>) coordinates and stores the result in
     * {@code ptDst}.
     */
    protected Point2D inverseTransformNormalized(double x, double y, final Point2D ptDst)
            throws ProjectionException {
        double phi;
        double lam;

        if (isSpherical) {
            phi = y;
            lam = x / cos(y);
        } else {
            phi = inv_mlfn(y);
            double s = Math.abs(phi);
            double diff = Math.abs(s - HALFPI);

            if (diff < EPS10) {
                lam = 0.;
            } else if (s < HALFPI) {
                s = sin(phi);
                lam = (x * sqrt(1. - excentricitySquared * s * s) / cos(phi)) % Math.PI;
            } else {
                throw new ProjectionException(ErrorKeys.TOLERANCE_ERROR);
                // throw new ProjectionException("Tolerance error occurred appling inverse
                // Sinusoidal projection");
            }
        }

        if (ptDst != null) {
            ptDst.setLocation(lam, phi);
            return ptDst;
        } else {
            return new Point2D.Double(lam, phi);
        }
    }

