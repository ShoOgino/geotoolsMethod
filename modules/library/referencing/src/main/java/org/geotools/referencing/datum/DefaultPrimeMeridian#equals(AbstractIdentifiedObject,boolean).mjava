    /**
     * Compare this prime meridian with the specified object for equality.
     *
     * @param object The object to compare to {@code this}.
     * @param compareMetadata {@code true} for performing a strict comparaison, or {@code false} for
     *     comparing only properties relevant to transformations.
     * @return {@code true} if both objects are equal.
     */
    @Override
    public boolean equals(final AbstractIdentifiedObject object, final boolean compareMetadata) {
        if (object == this) {
            return true; // Slight optimization.
        }
        if (super.equals(object, compareMetadata)) {
            final DefaultPrimeMeridian that = (DefaultPrimeMeridian) object;
            if (compareMetadata) {
                return Utilities.equals(this.greenwichLongitude, that.greenwichLongitude)
                        && Utilities.equals(this.angularUnit, that.angularUnit);
            } else {
                return Utilities.equals(
                        this.getGreenwichLongitude(NonSI.DEGREE_ANGLE),
                        that.getGreenwichLongitude(NonSI.DEGREE_ANGLE));

                /*
                 * Note: if compareMetadata==false, we relax the unit check because EPSG uses
                 *       sexagesimal degrees for the Greenwich meridian. Requirying the same
                 *       unit prevent Geodetic.isWGS84(...) method to recognize EPSG's WGS84.
                 */
            }
        }
        return false;
    }

