    /**
     * Creates a transform which passes through a subset of ordinates to another transform. This
     * allows transforms to operate on a subset of ordinates. For example, if you have
     * (<var>Lat</var>,<var>Lon</var>,<var>Height</var>) coordinates, then you may wish to convert
     * the height values from meters to feet without affecting the (<var>Lat</var>,<var>Lon</var>)
     * values.
     *
     * @param firstAffectedOrdinate The lowest index of the affected ordinates.
     * @param subTransform Transform to use for affected ordinates.
     * @param numTrailingOrdinates Number of trailing ordinates to pass through. Affected ordinates
     *     will range from {@code firstAffectedOrdinate} inclusive to {@code
     *     dimTarget-numTrailingOrdinates} exclusive.
     * @return A pass through transform with the following dimensions:<br>
     *     <pre>
     * Source: firstAffectedOrdinate + subTransform.getSourceDimensions() + numTrailingOrdinates
     * Target: firstAffectedOrdinate + subTransform.getTargetDimensions() + numTrailingOrdinates
     *     </pre>
     *
     * @throws FactoryException if the object creation failed.
     */
    @Override
    public MathTransform createPassThroughTransform(
            final int firstAffectedOrdinate,
            final MathTransform subTransform,
            final int numTrailingOrdinates)
            throws FactoryException {
        MathTransform tr;
        try {
            tr =
                    PassThroughTransform.create(
                            firstAffectedOrdinate, subTransform, numTrailingOrdinates);
        } catch (IllegalArgumentException exception) {
            throw new FactoryException(exception);
        }
        tr = pool.unique(tr);
        return tr;
    }

