    /**
     * Returns a {@linkplain Warp image warp} for the specified transform. The {@link
     * Warp#warpPoint(int,int,float[]) Warp.warpPoint} method transforms coordinates from source to
     * target CRS. Note that JAI's {@linkplain javax.media.jai.operator.WarpDescriptor warp
     * operation} needs a warp object with the opposite semantic (i.e. the image warp must
     * transforms coordinates from target to source CRS). Consequently, consider invoking {@code
     * getWarp(transform.inverse())} if the warp object is going to be used in an image
     * reprojection.
     *
     * @param name The image or {@linkplain org.geotools.coverage.grid.GridCoverage2D coverage}
     *     name, or {@code null} in unknow. Used only for formatting error message if some {@link
     *     org.opengis.referencing.operation.TransformException} are thrown by the supplied
     *     transform.
     * @param transform The transform to returns as an image warp.
     * @return The warp for the given transform.
     * @todo We should check for {@link ConcatenatedTransform}. If we detect that a {@code
     *     WarpTransform2D} is concatenated with {@code AffineTransform} only, and if the {@code
     *     AffineTransform} has scale factors only, then we can ommit the {@code AffineTransform}
     *     and merge the scale factors with {@link WarpPolynomial} preScaleX, preScaleY, postScaleX
     *     and postScaleY. Additionnaly, the translation term for the post-AffineTransform may also
     *     be merged with the first coefficients of WarpPolynomial.xCoeffs and yCoeffs. See
     *     GEOT-521.
     * @todo Move this method in some other factory class. Use the optimization applied by
     *     Resampler2D in the case of AffineTransform, and remove that optimization from
     *     Resampler2D.
     */
    public static Warp getWarp(CharSequence name, final MathTransform2D transform) {
        if (transform instanceof WarpTransform2D) {
            return ((WarpTransform2D) transform).getWarp();
        }
        if (name == null) {
            name = Vocabulary.formatInternational(VocabularyKeys.UNKNOWN);
        }
        return new WarpAdapter(name, transform);
    }

