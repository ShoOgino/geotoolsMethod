    /**
     * Transforms the relative distance vector specified by {@code source} and stores the result in
     * {@code dest}. A relative distance vector is transformed without applying the translation
     * components.
     *
     * @param transform The transform to apply.
     * @param origin The position where to compute the delta transform in the source CS.
     * @param source The distance vector to be delta transformed
     * @param dest The resulting transformed distance vector, or {@code null}
     * @return The result of the transformation.
     * @throws TransformException if the transformation failed.
     * @see AffineTransform#deltaTransform(Point2D,Point2D)
     */
    public static Point2D deltaTransform(
            final MathTransform2D transform,
            final Point2D origin,
            final Point2D source,
            Point2D dest)
            throws TransformException {
        if (transform instanceof AffineTransform) {
            return ((AffineTransform) transform).deltaTransform(source, dest);
        }
        final double ox = origin.getX();
        final double oy = origin.getY();
        final double dx = source.getX() * 0.5;
        final double dy = source.getY() * 0.5;
        Point2D P1 = new Point2D.Double(ox - dx, oy - dy);
        Point2D P2 = new Point2D.Double(ox + dx, oy + dy);
        P1 = transform.transform(P1, P1);
        P2 = transform.transform(P2, P2);
        if (dest == null) {
            dest = P2;
        }
        dest.setLocation(P2.getX() - P1.getX(), P2.getY() - P1.getY());
        return dest;
    }

