    /**
     * Returns a coordinate reference system from a code.
     *
     * @param code Value allocated by authority.
     * @return The coordinate reference system object.
     * @throws NoSuchAuthorityCodeException if this method can't find the requested code.
     * @throws FactoryException if some other kind of failure occured in the backing store. This
     *     exception usually have {@link SQLException} as its cause.
     */
    @Override
    public synchronized CoordinateReferenceSystem createCoordinateReferenceSystem(final String code)
            throws FactoryException {
        ensureNonNull("code", code);
        CoordinateReferenceSystem returnValue = null;
        try {
            final String primaryKey = toPrimaryKeyCRS(code);
            final PreparedStatement stmt;
            stmt =
                    prepareStatement(
                            "CoordinateReferenceSystem",
                            "SELECT COORD_REF_SYS_CODE,"
                                    + " COORD_REF_SYS_NAME,"
                                    + " AREA_OF_USE_CODE,"
                                    + " CRS_SCOPE,"
                                    + " REMARKS,"
                                    + " COORD_REF_SYS_KIND,"
                                    + " COORD_SYS_CODE," // Null for CompoundCRS
                                    + " DATUM_CODE," // Null for ProjectedCRS
                                    + " SOURCE_GEOGCRS_CODE," // For ProjectedCRS
                                    + " PROJECTION_CONV_CODE," // For ProjectedCRS
                                    + " CMPD_HORIZCRS_CODE," // For CompoundCRS only
                                    + " CMPD_VERTCRS_CODE" // For CompoundCRS only
                                    + " FROM [Coordinate Reference System]"
                                    + " WHERE COORD_REF_SYS_CODE = ?");
            stmt.setInt(1, Integer.parseInt(primaryKey));
            ResultSet result = stmt.executeQuery();
            while (result.next()) {
                final String epsg = getString(result, 1, code);
                final String name = getString(result, 2, code);
                final String area = result.getString(3);
                final String scope = result.getString(4);
                final String remarks = result.getString(5);
                final String type = getString(result, 6, code);
                // Note: Do not invoke 'createProperties' now, even if we have all required
                //       informations, because the 'properties' map is going to overwritten
                //       by calls to 'createDatum', 'createCoordinateSystem', etc.
                final CRSFactory factory = factories.getCRSFactory();
                final CoordinateReferenceSystem crs;
                /* ----------------------------------------------------------------------
                 *   GEOGRAPHIC CRS
                 *
                 *   NOTE: 'createProperties' MUST be invoked after any call to an other
                 *         'createFoo' method. Consequently, do not factor out.
                 * ---------------------------------------------------------------------- */
                if (type.equalsIgnoreCase("geographic 2D")
                        || type.equalsIgnoreCase("geographic 3D")) {
                    final String csCode = getString(result, 7, code);
                    final String dmCode = result.getString(8);
                    final EllipsoidalCS cs = buffered.createEllipsoidalCS(csCode);
                    final GeodeticDatum datum;
                    if (dmCode != null) {
                        datum = buffered.createGeodeticDatum(dmCode);
                    } else {
                        final String geoCode = getString(result, 9, code, 8);
                        result.close(); // Must be close before createGeographicCRS
                        result = null;
                        final GeographicCRS baseCRS = buffered.createGeographicCRS(geoCode);
                        datum = baseCRS.getDatum(); // TODO: remove cast with J2SE 1.5.
                    }
                    final Map<String, Object> properties =
                            createProperties(name, epsg, area, scope, remarks);
                    crs = factory.createGeographicCRS(properties, datum, cs);
                }
                /* ----------------------------------------------------------------------
                 *   PROJECTED CRS
                 *
                 *   NOTE: This method invokes itself indirectly, through createGeographicCRS.
                 *         Consequently, we can't use 'result' anymore. We must close it here.
                 * ---------------------------------------------------------------------- */
                else if (type.equalsIgnoreCase("projected")) {
                    final String csCode = getString(result, 7, code);
                    final String geoCode = getString(result, 9, code);
                    final String opCode = getString(result, 10, code);
                    result.close(); // Must be close before createGeographicCRS
                    result = null;
                    final CartesianCS cs = buffered.createCartesianCS(csCode);
                    final GeographicCRS baseCRS = buffered.createGeographicCRS(geoCode);
                    final CoordinateOperation op = buffered.createCoordinateOperation(opCode);
                    if (op instanceof Conversion) {
                        final Map<String, Object> properties =
                                createProperties(name, epsg, area, scope, remarks);
                        crs = factory.createProjectedCRS(properties, baseCRS, (Conversion) op, cs);
                    } else {
                        throw noSuchAuthorityCode(Projection.class, opCode);
                    }
                }
                /* ----------------------------------------------------------------------
                 *   VERTICAL CRS
                 * ---------------------------------------------------------------------- */
                else if (type.equalsIgnoreCase("vertical")) {
                    final String csCode = getString(result, 7, code);
                    final String dmCode = getString(result, 8, code);
                    final VerticalCS cs = buffered.createVerticalCS(csCode);
                    final VerticalDatum datum = buffered.createVerticalDatum(dmCode);
                    final Map<String, Object> properties =
                            createProperties(name, epsg, area, scope, remarks);
                    crs = factory.createVerticalCRS(properties, datum, cs);
                }
                /* ----------------------------------------------------------------------
                 *   COMPOUND CRS
                 *
                 *   NOTE: This method invokes itself recursively.
                 *         Consequently, we can't use 'result' anymore.
                 * ---------------------------------------------------------------------- */
                else if (type.equalsIgnoreCase("compound")) {
                    final String code1 = getString(result, 11, code);
                    final String code2 = getString(result, 12, code);
                    result.close();
                    result = null;
                    final CoordinateReferenceSystem crs1, crs2;
                    if (!safetyGuard.add(epsg)) {
                        throw recursiveCall(CompoundCRS.class, epsg);
                    }
                    try {
                        crs1 = buffered.createCoordinateReferenceSystem(code1);
                        crs2 = buffered.createCoordinateReferenceSystem(code2);
                    } finally {
                        safetyGuard.remove(epsg);
                    }
                    // Note: Don't invoke 'createProperties' sooner.
                    final Map<String, Object> properties =
                            createProperties(name, epsg, area, scope, remarks);
                    crs =
                            factory.createCompoundCRS(
                                    properties, new CoordinateReferenceSystem[] {crs1, crs2});
                }
                /* ----------------------------------------------------------------------
                 *   GEOCENTRIC CRS
                 * ---------------------------------------------------------------------- */
                else if (type.equalsIgnoreCase("geocentric")) {
                    final String csCode = getString(result, 7, code);
                    final String dmCode = getString(result, 8, code);
                    final CoordinateSystem cs = buffered.createCoordinateSystem(csCode);
                    final GeodeticDatum datum = buffered.createGeodeticDatum(dmCode);
                    final Map<String, Object> properties =
                            createProperties(name, epsg, area, scope, remarks);
                    if (cs instanceof CartesianCS) {
                        crs = factory.createGeocentricCRS(properties, datum, (CartesianCS) cs);
                    } else if (cs instanceof SphericalCS) {
                        crs = factory.createGeocentricCRS(properties, datum, (SphericalCS) cs);
                    } else {
                        result.close();
                        throw new FactoryException(
                                Errors.format(
                                        ErrorKeys.ILLEGAL_COORDINATE_SYSTEM_FOR_CRS_$2,
                                        cs.getClass(),
                                        GeocentricCRS.class));
                    }
                }
                /* ----------------------------------------------------------------------
                 *   ENGINEERING CRS
                 * ---------------------------------------------------------------------- */
                else if (type.equalsIgnoreCase("engineering")) {
                    final String csCode = getString(result, 7, code);
                    final String dmCode = getString(result, 8, code);
                    final CoordinateSystem cs = buffered.createCoordinateSystem(csCode);
                    final EngineeringDatum datum = buffered.createEngineeringDatum(dmCode);
                    final Map<String, Object> properties =
                            createProperties(name, epsg, area, scope, remarks);
                    crs = factory.createEngineeringCRS(properties, datum, cs);
                }
                /* ----------------------------------------------------------------------
                 *   UNKNOW CRS
                 * ---------------------------------------------------------------------- */
                else {
                    result.close();
                    throw new FactoryException(Errors.format(ErrorKeys.UNKNOW_TYPE_$1, type));
                }
                returnValue = ensureSingleton(crs, returnValue, code);
                if (result == null) {
                    // Bypass the 'result.close()' line below:
                    // the ResultSet has already been closed.
                    return returnValue;
                }
            }
            result.close();
        } catch (SQLException exception) {
            throw databaseFailure(CoordinateReferenceSystem.class, code, exception);
        }
        if (returnValue == null) {
            throw noSuchAuthorityCode(CoordinateReferenceSystem.class, code);
        }
        return returnValue;
    }

