    /**
     * Generates map of source and destination triangles.
     *
     * @return Map of a source and destination triangles.
     * @throws TriangulationException thrown when the source points are outside the quad.
     */
    public HashMap<TINTriangle, Object> getTriangleMap() throws TriangulationException {
        Quadrilateral mQuad = mappedQuad(quad, vectors);

        ExtendedPosition[] vertices = new ExtendedPosition[vectors.size()];

        // converts MappedPosition to ExtendedPosition
        for (int i = 0; i < vectors.size(); i++) {
            vertices[i] =
                    new ExtendedPosition(vectors.get(i).getSource(), vectors.get(i).getTarget());
        }

        TriangulationFactory triangulator = new TriangulationFactory(mQuad, vertices);
        List<TINTriangle> taggedSourceTriangles = triangulator.getTriangulation();
        final HashMap<TINTriangle, Object> triangleMap = new HashMap<>();

        for (Object taggedSourceTriangle : taggedSourceTriangles) {
            final TINTriangle sourceTriangle = (TINTriangle) taggedSourceTriangle;
            triangleMap.put(
                    sourceTriangle,
                    new TINTriangle(
                            ((ExtendedPosition) sourceTriangle.p0).getMappedposition(),
                            ((ExtendedPosition) sourceTriangle.p1).getMappedposition(),
                            ((ExtendedPosition) sourceTriangle.p2).getMappedposition()));
        }

        return triangleMap;
    }

