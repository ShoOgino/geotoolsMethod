    /**
     * Performs the actual transformation.
     *
     * @param srcPts the array containing the source point coordinates.
     * @param srcOff the offset to the first point to be transformed in the
     *        source array.
     * @param dstPts the array into which the transformed point coordinates are
     *        returned. May be the same than {@code srcPts}.
     * @param dstOff the offset to the location of the first transformed point
     *        that is stored in the destination array.
     * @param numPts the number of point objects to be transformed.
     * @param forward {@code true} for direct transform, {@code false} for inverse transform.
     *
     * @throws TransformException if an IO error occurs reading the grid file.
     */
    private void bidirectionalTransform(double[] srcPts, int srcOff, double[] dstPts,
            int dstOff, int numPts, boolean forward) throws TransformException {

        boolean shifted;
        
        if (gridShift == null) { // Create grid when first needed.
            try {
                gridShift = FACTORY.createNTv2Grid(gridLocation);
            } catch (FactoryException e) {
                throw new TransformException("NTv2 Grid " + gridLocation +
                        " Could not be created", e);
            }
        }
        
        try {
            GridShift shift = new GridShift();
            for (int i=0; i<srcPts.length; i=i+2) {
                shift.setLonPositiveEastDegrees(srcPts[i]);
                shift.setLatDegrees(srcPts[i+1]);
                if (forward) {
                    shifted = gridShift.gridShiftForward(shift);
                } else {
                    shifted = gridShift.gridShiftReverse(shift);
                }
                if (shifted) {
                    dstPts[i]=shift.getShiftedLonPositiveEastDegrees();
                    dstPts[i+1]=shift.getShiftedLatDegrees();
                } else {
                    LOGGER.log(Level.WARNING, "Point (" + srcPts[i] + ", " + srcPts[i+1] +
                            ") is not covered by '" + this.gridShift + "' NTv2 grid, " +
            		    " it will not be shifted.");
                    dstPts[i]=srcPts[i];
                    dstPts[i+1]=srcPts[i+1];                    
                }
            }
        } catch (IOException e) {
            throw new TransformException(e.getLocalizedMessage(), e);
        }
    }

