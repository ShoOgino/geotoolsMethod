    /**
     * Search the TIN for the triangle that contains p
     *
     * @param p Point of interest
     * @return Triangle containing p
     * @throws TransformException if points are outside the area of TIN.
     */
    private TINTriangle searchTriangle(DirectPosition p) throws TransformException {
        /* Optimization for finding triangles.
         * Assuming the point are close to each other -
         * so why not to check if next point is in the same triangle as previous one.
         */

        // Take a reference to the previous triangle to avoid reentrancy
        // problems.
        TINTriangle potentialTriangle = previousTriangle;
        if (potentialTriangle != null && potentialTriangle.containsOrIsVertex(p)) {
            return potentialTriangle;
        }

        for (Iterator i = trianglesToKeysMap.keySet().iterator(); i.hasNext(); ) {
            TINTriangle triangle = (TINTriangle) i.next();

            if (triangle.containsOrIsVertex(p)) {
                previousTriangle = triangle;

                return triangle;
            }
        }
        throw (new TransformException("Points are outside the scope"));
    }

