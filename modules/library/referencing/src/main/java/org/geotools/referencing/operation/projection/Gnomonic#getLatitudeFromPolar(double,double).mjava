    /**
     * calculates, iteratively, a latitude from cylindrical polar coordinates based at the centre of
     * the spheroid.
     */
    private double getLatitudeFromPolar(double normalisedCylindricalRadius, double normalisedZ) {
        final double eccentricityRatio = excentricitySquared / sqrt(1.0 - excentricitySquared);
        final double modifiedRadiusSq =
                (normalisedCylindricalRadius * normalisedCylindricalRadius)
                        / (1.0 - excentricitySquared);

        double zExtension = 1.0;
        double estimate = 0.0;
        while (abs(estimate - zExtension) > EPSILON) {
            zExtension = estimate;
            final double producedZ = normalisedZ + zExtension;

            estimate =
                    eccentricityRatio * producedZ / sqrt(modifiedRadiusSq + producedZ * producedZ);
        }

        final double latitude;
        if (abs(normalisedCylindricalRadius) <= EPSILON) {
            // need to check whether at north or south pole
            if ((normalisedZ + estimate) > 0.0) { // north
                latitude = PI / 2;
            } else { // south
                latitude = -PI / 2;
            }
        } else {
            latitude = atan((normalisedZ + estimate) / normalisedCylindricalRadius);
        }
        return latitude;
    }

