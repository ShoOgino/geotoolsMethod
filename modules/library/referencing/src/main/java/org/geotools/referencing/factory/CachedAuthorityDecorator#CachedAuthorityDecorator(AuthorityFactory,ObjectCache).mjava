    /**
     * Constructs an instance wrapping the specified factory. The {@code maxStrongReferences}
     * argument specify the maximum number of objects to keep by strong reference. If a greater
     * amount of objects are created, then the strong references for the oldest ones are replaced by
     * weak references.
     *
     * <p>This constructor is protected because subclasses must declare which of the {@link
     * DatumAuthorityFactory}, {@link CSAuthorityFactory}, {@link CRSAuthorityFactory} {@link
     * SearchableAuthorityFactory} and {@link CoordinateOperationAuthorityFactory} interfaces they
     * choose to implement.
     *
     * @param factory The factory to cache. Can not be {@code null}.
     * @param maxStrongReferences The maximum number of objects to keep by strong reference.
     */
    protected CachedAuthorityDecorator(AuthorityFactory factory, ObjectCache cache) {
        super(((ReferencingFactory) factory).getPriority()); // TODO
        this.cache = cache;
        authority = factory;
        crsAuthority = (CRSAuthorityFactory) factory;
        csAuthority = (CSAuthorityFactory) factory;
        datumAuthority = (DatumAuthorityFactory) factory;
        operationAuthority = (CoordinateOperationAuthorityFactory) factory;
        this.delegate = (AbstractAuthorityFactory) factory;
    }

