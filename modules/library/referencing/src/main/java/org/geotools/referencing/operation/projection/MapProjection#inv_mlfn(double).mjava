    /**
     * Calculates the latitude ({@code phi}) from a meridian distance. Determines phi to TOL (1e-11)
     * radians, about 1e-6 seconds.
     *
     * @param arg meridian distance to calulate latitude for.
     * @return the latitude of the meridian distance.
     * @throws ProjectionException if the itteration does not converge.
     */
    protected final double inv_mlfn(double arg) throws ProjectionException {
        double s, t, k = 1.0 / (1.0 - excentricitySquared);
        int i;
        double phi = arg;
        for (i = MAXIMUM_ITERATIONS; true; ) { // rarely goes over 5 iterations
            if (--i < 0) {
                throw new ProjectionException(Errors.format(ErrorKeys.NO_CONVERGENCE));
            }
            s = Math.sin(phi);
            t = 1.0 - excentricitySquared * s * s;
            t = (mlfn(phi, s, Math.cos(phi)) - arg) * (t * Math.sqrt(t)) * k;
            phi -= t;
            if (Math.abs(t) < MLFN_TOL) {
                return phi;
            }
        }
    }

