    /**
     * Computes sound velocity as a function of salinity, temperature and pressure.
     *
     * @param S Salinity PSS-78.
     * @param T Temperature (Â°C).
     * @param P Pressure (dbar), not including atmospheric pressure.
     * @return Sound velocity (m/s).
     */
    public static double soundVelocity(final double S, final double T, final double P) {
        // S^0 terms
        final double CW =
                ((polynome(T, SOUND_C3) * P + polynome(T, SOUND_C2)) * P + polynome(T, SOUND_C1))
                                * P
                        + polynome(T, SOUND_C0);
        // S^1 terms
        final double A =
                ((polynome(T, SOUND_A3) * P + polynome(T, SOUND_A2)) * P + polynome(T, SOUND_A1))
                                * P
                        + polynome(T, SOUND_A0);
        // S^3/2 terms
        final double B = polynome(T, SOUND_B0) + polynome(T, SOUND_B1) * P;

        // S^2 terms
        final double D = SOUND_D0 + SOUND_D1 * P;

        // sound speed return
        return CW + (D * S + B * Math.sqrt(S) + A) * S;
    }

