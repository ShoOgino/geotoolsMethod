    /**
     * Returns the pattern used for parsing and formatting angles.
     * See class description for an explanation of how patterns work.
     *
     * @return The formatting pattern.
     */
    public synchronized String toPattern() {
        char symbol = '#';
        final StringBuilder buffer = new StringBuilder();
        for (int field=DEGREES_FIELD; field<=SYMBOLS.length; field++) {
            final String previousSuffix = getSuffix(field-1);
            int w = getWidth(field);
            if (w > 0) {
                /*
                 * Procède à l'écriture de la partie entière des degrés,
                 * minutes ou secondes. Le suffix du champs précédent
                 * sera écrit avant les degrés, minutes ou secondes.
                 */
                if (previousSuffix != null) {
                    buffer.append(previousSuffix);
                }
                symbol = SYMBOLS[field];
                do buffer.append(symbol);
                while (--w > 0);
            } else {
                /*
                 * Procède à l'écriture de la partie décimale des
                 * degrés, minutes ou secondes. Le suffix du ce
                 * champs sera écrit après cette partie fractionnaire.
                 */
                w = widthDecimal;
                if (w > 0) {
                    if (decimalSeparator) buffer.append('.');
                    symbol = Character.toLowerCase(symbol);
                    do buffer.append(symbol);
                    while (--w > 0);
                }
                if (previousSuffix != null) {
                    buffer.append(previousSuffix);
                }
                break;
            }
        }
        return buffer.toString();
    }

