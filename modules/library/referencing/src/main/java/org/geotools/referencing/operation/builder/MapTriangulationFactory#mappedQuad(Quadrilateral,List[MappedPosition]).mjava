    /**
     * Generates mapped quad from destination quad and source quad. The vertices of destination quad
     * are calculated from source quad and difference of nearest pair of identical points.
     *
     * @param sourceQuad the quad that defines the area for triangulating.
     * @param vectors of identical points (MappedCoordinates).
     * @return destination quad
     */
    private Quadrilateral mappedQuad(Quadrilateral sourceQuad, List<MappedPosition> vectors) {
        if (vectors.isEmpty()) {
            return (Quadrilateral) sourceQuad.clone();
        }

        // super.setMappedPositions(vectors);
        MappedPosition[] mappedVertices = new MappedPosition[4];

        for (int i = 0; i < mappedVertices.length; i++) {
            mappedVertices[i] = generateCoordFromNearestOne(sourceQuad.getPoints()[i], vectors);
        }

        return new Quadrilateral(
                new ExtendedPosition(mappedVertices[0].getSource(), mappedVertices[0].getTarget()),
                new ExtendedPosition(mappedVertices[1].getSource(), mappedVertices[1].getTarget()),
                new ExtendedPosition(mappedVertices[2].getSource(), mappedVertices[2].getTarget()),
                new ExtendedPosition(mappedVertices[3].getSource(), mappedVertices[3].getTarget()));
    }

