    /** Creates a factory from a mask computed by {@link #interfaceMask}. */
    private static AuthorityFactory create(
            final int mask, final AuthorityFactory primary, final AuthorityFactory fallback) {
        /*
         * The following assertion fails if we try to implements some
         * interfaces not supported by the primary or fallback factory.
         */
        assert (mask & ~(interfaceMask(primary) | interfaceMask(fallback))) == 0 : mask;
        final AuthorityFactory factory;
        /*
         * In the 'switch' statement below, we do not implement all possible combinations
         * of authority factories. Only a few common combinations are listed. Other
         * combinations will fallback on some reasonable default. We may complete the
         * list later if there is a need for that.
         */
        switch (mask) {
            case 15:
                factory = new All(primary, fallback);
                break;
            case 14:
                factory = new CRS_Datum_CS(primary, fallback);
                break;
            case 13: //      = new CRS_Datum_Operation     (primary, fallback); break;
            case 12: //      = new CRS_Datum               (primary, fallback); break;
            case 11: //      = new CRS_CS_Operation        (primary, fallback); break;
            case 10: //      = new CRS_CS                  (primary, fallback); break;
            case 9: //      = new CRS_Operation           (primary, fallback); break;
            case 8:
                factory = new CRS(primary, fallback);
                break;
            case 7: //      = new Datum_CS_Operation      (primary, fallback); break;
            case 6: //      = new Datum_CS                (primary, fallback); break;
            case 5: //      = new Datum_Operation         (primary, fallback); break;
            case 4:
                factory = new Datum(primary, fallback);
                break;
            case 3: //      = new CS_Operation            (primary, fallback); break;
            case 2:
                factory = new CS(primary, fallback);
                break;
            case 1:
                factory = new Operation(primary, fallback);
                break;
            case 0:
                factory = new FallbackAuthorityFactory(primary, fallback);
                break;
            default:
                throw new AssertionError(mask); // Should never happen.
        }
        /*
         * The following assertion fails if 'factory' implements some interfaces
         * that wasn't requested. The opposite is allowed however: 'factory' may
         * not implement every requested interfaces.
         */
        assert (interfaceMask(factory) & ~mask) == 0 : mask;
        return factory;
    }

