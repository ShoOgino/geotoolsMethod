    /**
     * Convenience method computing the zone code from the central meridian. Information about zones
     * convention must be specified in argument. Two widely set of arguments are of Universal
     * Transverse Mercator (UTM) and Modified Transverse Mercator (MTM) projections:<br>
     *
     * <p>UTM projection (zones numbered from 1 to 60):<br>
     *
     * <p>{@code getZone(-177, 6);}<br>
     *
     * <p>MTM projection (zones numbered from 1 to 120):<br>
     *
     * <p>{@code getZone(-52.5, -3);}<br>
     *
     * @param centralLongitudeZone1 Longitude in the middle of zone 1, in decimal degrees relative
     *     to Greenwich. Positive longitudes are toward east, and negative longitudes toward west.
     * @param zoneWidth Number of degrees of longitudes in one zone. A positive value means that
     *     zones are numbered from west to east (i.e. in the direction of positive longitudes). A
     *     negative value means that zones are numbered from east to west.
     * @return The zone number. First zone is numbered 1.
     */
    private int getZone(final double centralLongitudeZone1, final double zoneWidth) {
        final double zoneCount = abs(360 / zoneWidth);
        double t;
        t =
                centralLongitudeZone1
                        - 0.5 * zoneWidth; // Longitude at the beginning of the first zone.
        t =
                toDegrees(centralMeridian)
                        - t; // Degrees of longitude between the central longitude and longitude 1.
        t = floor(t / zoneWidth + EPSILON); // Number of zones between the central longitude and
        // longitude 1.
        t -= zoneCount * floor(t / zoneCount); // If negative, bring back to the interval 0
        // to (zoneCount-1).
        return ((int) t) + 1;
    }

