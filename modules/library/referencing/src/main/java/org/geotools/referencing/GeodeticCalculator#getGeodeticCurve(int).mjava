    /**
     * Calculates the geodetic curve between two points in the referenced ellipsoid.
     * A curve in the ellipsoid is a path which points contain the longitude and latitude
     * of the points in the geodetic curve. The geodetic curve is computed from the
     * {@linkplain #getStartingGeographicPoint starting point} to the
     * {@linkplain #getDestinationGeographicPoint destination point}.
     *
     * @param  numberOfPoints The number of vertex in the geodetic curve.
     *         <strong>NOTE:</strong> This argument is only a hint and may be ignored
     *         in future version (if we compute a real curve rather than a list of line
     *         segments).
     * @return The path that represents the geodetic curve from the
     *         {@linkplain #getStartingGeographicPoint starting point} to the
     *         {@linkplain #getDestinationGeographicPoint destination point}.
     *
     * @todo We should check for cases where the path cross the 90째N, 90째S, 90째E or 90째W boundaries.
     */
    public Shape getGeodeticCurve(final int numberOfPoints) {
        List<Point2D> points = getGeodeticPath(numberOfPoints);
        final GeneralPath path = new GeneralPath(GeneralPath.WIND_EVEN_ODD, numberOfPoints + 1);
        Point2D start = points.get(0);
        path.moveTo(start.getX(), start.getY());
        for (int i = 1; i < points.size(); i++) {
            Point2D p = points.get(i);
            path.lineTo(p.getX(), p.getY());
        }

        return path;
    }

