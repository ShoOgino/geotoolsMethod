    /**
     * Calculates the geodetic curve between two points in the referenced ellipsoid.
     * A curve in the ellipsoid is a path which points contain the longitude and latitude
     * of the points in the geodetic curve. The geodetic curve is computed from the
     * {@linkplain #getStartingGeographicPoint starting point} to the
     * {@linkplain #getDestinationGeographicPoint destination point}.
     *
     * @param  numberOfPoints The number of vertex in the geodetic curve.
     *         <strong>NOTE:</strong> This argument is only a hint and may be ignored
     *         in future version (if we compute a real curve rather than a list of line
     *         segments).
     * @return The path that represents the geodetic curve from the
     *         {@linkplain #getStartingGeographicPoint starting point} to the
     *         {@linkplain #getDestinationGeographicPoint destination point}.
     *
     * @todo We should check for cases where the path cross the 90째N, 90째S, 90째E or 90째W boundaries.
     */
    public Shape getGeodeticCurve(final int numberOfPoints) {
        checkNumberOfPoints(numberOfPoints);
        if (!directionValid) {
            computeDirection();
        }
        if (!destinationValid) {
            computeDestinationPoint();
        }
        final double         long2 = this.long2;
        final double          lat2 = this.lat2;
        final double      distance = this.distance;
        final double deltaDistance = distance / numberOfPoints;
        final GeneralPath     path = new GeneralPath(GeneralPath.WIND_EVEN_ODD, numberOfPoints+1);
        path.moveTo((float) toDegrees(long1), (float) toDegrees(lat1));
        for (int i=1; i<numberOfPoints; i++) {
            this.distance = i*deltaDistance;
            computeDestinationPoint();
            path.lineTo((float) toDegrees(this.long2), (float) toDegrees(this.lat2));
        }
        this.long2    = long2;
        this.lat2     = lat2;
        this.distance = distance;
        path.lineTo((float) toDegrees(long2), (float) toDegrees(lat2));
        return path;
    }

