    /**
     * Constructs a descriptor from a name and a default value.
     *
     * @param  <T> The parameter type.
     * @param name The parameter name.
     * @param remarks An optional description as a {@link String} or an {@link InternationalString}.
     * @param valueClass The parameter type.
     * @param defaultValue The default value.
     * @param required {@code true} if this parameter is required, {@code false} otherwise.
     * @return The parameter descriptor for the given default value.
     * @since 2.5
     */
    public static <T> DefaultParameterDescriptor<T> create(
            final String name,
            final CharSequence remarks,
            final Class<T> valueClass,
            final T defaultValue,
            final boolean required) {
        T[] codeList = null;
        if (CodeList.class.isAssignableFrom(valueClass)) {
            try {
                @SuppressWarnings("unchecked") // Type checked with reflection.
                final T[] tmp =
                        (T[])
                                valueClass
                                        .getMethod("values", (Class<?>[]) null)
                                        .invoke(null, (Object[]) null);
                codeList = tmp;
            } catch (Exception exception) {
                // No code list defined. Not a problem; we will just
                // not provide any set of code to check against.
            }
        }
        final Map<String, CharSequence> properties;
        if (remarks == null) {
            properties = Collections.singletonMap(NAME_KEY, name);
        } else {
            properties = new HashMap<>(4);
            properties.put(NAME_KEY, name);
            properties.put(REMARKS_KEY, remarks);
        }
        return new DefaultParameterDescriptor<>(
                properties, valueClass, codeList, defaultValue, null, null, null, required);
    }

