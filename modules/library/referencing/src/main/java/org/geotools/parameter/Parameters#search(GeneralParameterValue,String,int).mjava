    /**
     * Searchs all parameters with the specified name. The given {@code name} is compared against
     * parameter {@link GeneralParameterDescriptor#getName name} and {@link
     * GeneralParameterDescriptor#getAlias alias}. This method search recursively in subgroups up to
     * the specified depth:
     *
     * <p>
     *
     * <ul>
     *   <li>If {@code maxDepth} is equals to 0, then this method returns {@code param} if and only
     *       if it matches the specified name.
     *   <li>If {@code maxDepth} is equals to 1 and {@code param} is an instance of {@link
     *       ParameterDescriptorGroup}, then this method checks all elements in this group but not
     *       in subgroups.
     *   <li>...
     *   <li>If {@code maxDepth} is a high number (e.g. 100), then this method checks all elements
     *       in all subgroups up to the specified depth, which is likely to be never reached. In
     *       this case, {@code maxDepth} can be seen as a safeguard against never ending loops, for
     *       example if parameters graph contains cyclic entries.
     * </ul>
     *
     * @param param The parameter to inspect.
     * @param name The name of the parameter to search for. See the class javadoc for a rational
     *     about the usage of name as a key instead of {@linkplain ParameterDescriptor descriptor}.
     * @param maxDepth The maximal depth while descending down the parameter tree.
     * @return The set (possibly empty) of parameters with the given name.
     */
    public static List<Object> search(
            final GeneralParameterValue param, final String name, int maxDepth) {
        final List<Object> list = new ArrayList<>();
        search(param, name, maxDepth, list);
        return list;
    }

