    /**
     * Translates the specified math transform according the specified pixel orientations.
     *
     * @param gridToCRS A math transform from <cite>pixel</cite> coordinates to any CRS.
     * @param current The pixel orientation of the given {@code gridToCRS} transform.
     * @param expected The pixel orientation of the desired transform.
     * @param xDimension The dimension of <var>x</var> coordinates (pixel columns). Often 0.
     * @param yDimension The dimension of <var>y</var> coordinates (pixel rows). Often 1.
     * @return The translation from {@code current} to {@code expected}.
     */
    public static MathTransform translate(
            final MathTransform gridToCRS,
            final PixelOrientation current,
            final PixelOrientation expected,
            final int xDimension,
            final int yDimension) {
        if (Utilities.equals(current, expected)) {
            return gridToCRS;
        }
        if (gridToCRS == null) {
            return null;
        }
        final int dimension = gridToCRS.getSourceDimensions();
        if (xDimension < 0 || xDimension >= dimension) {
            throw illegalDimension("xDimension", xDimension);
        }
        if (yDimension < 0 || yDimension >= dimension) {
            throw illegalDimension("yDimension", yDimension);
        }
        if (xDimension == yDimension) {
            throw illegalDimension("xDimension", "yDimension");
        }
        final PixelTranslation source = getPixelTranslation(current);
        final PixelTranslation target = getPixelTranslation(expected);
        final double dx = target.dx - source.dx;
        final double dy = target.dy - source.dy;
        MathTransform mt;
        if (dimension == 2 && (xDimension | yDimension) == 1 && dx == dy && Math.abs(dx) == 0.5) {
            final int index = (dx >= 0) ? 5 : 4;
            synchronized (translations) {
                mt = translations[index];
                if (mt == null) {
                    mt = ProjectiveTransform.createTranslation(dimension, dx);
                    translations[index] = mt;
                }
            }
        } else {
            final Matrix matrix = MatrixFactory.create(dimension + 1);
            matrix.setElement(xDimension, dimension, dx);
            matrix.setElement(yDimension, dimension, dy);
            mt = ProjectiveTransform.create(matrix);
        }
        return ConcatenatedTransform.create(mt, gridToCRS);
    }

