    /**
     * Formats an angle, a latitude or a longitude and appends the resulting text to a given string
     * buffer. The string will be formatted according the pattern set in the last call to {@link
     * #applyPattern}. The argument {@code obj} shall be an {@link Angle} object or one of its
     * derived class ({@link Latitude}, {@link Longitude}). If {@code obj} is a {@link Latitude}
     * object, then a symbol "N" or "S" will be appended to the end of the string (the symbol will
     * be choosen according the angle's sign). Otherwise, if {@code obj} is a {@link Longitude}
     * object, then a symbol "E" or "W" will be appended to the end of the string. Otherwise, no
     * hemisphere symbol will be appended. <br>
     * <br>
     * Strictly speaking, formatting ordinary numbers is not the {@code AngleFormat}'s job.
     * Nevertheless, this method accept {@link Number} objects. This capability is provided only as
     * a convenient way to format altitude numbers together with longitude and latitude angles.
     *
     * @param obj {@link Angle} or {@link Number} object to format.
     * @param toAppendTo Where the text is to be appended.
     * @param pos An optional {@link FieldPosition} identifying a field in the formatted text, or
     *     {@code null} if this information is not wanted. This field position shall be constructed
     *     with one of the following constants: {@link #DEGREES_FIELD}, {@link #MINUTES_FIELD},
     *     {@link #SECONDS_FIELD} or {@link #HEMISPHERE_FIELD}.
     * @return The string buffer passed in as {@code toAppendTo}, with formatted text appended.
     * @throws IllegalArgumentException if {@code obj} if not an object of class {@link Angle} or
     *     {@link Number}.
     */
    @Override
    public synchronized StringBuffer format(
            final Object obj, StringBuffer toAppendTo, final FieldPosition pos)
            throws IllegalArgumentException {
        if (obj instanceof Latitude) {
            return format(((Latitude) obj).degrees(), toAppendTo, pos, NORTH, SOUTH);
        }
        if (obj instanceof Longitude) {
            return format(((Longitude) obj).degrees(), toAppendTo, pos, EAST, WEST);
        }
        if (obj instanceof Angle) {
            return format(((Angle) obj).degrees(), toAppendTo, pos);
        }
        if (obj instanceof Number) {
            numberFormat.setMinimumIntegerDigits(1);
            numberFormat.setMinimumFractionDigits(0);
            numberFormat.setMaximumFractionDigits(2);
            return numberFormat.format(obj, toAppendTo, (pos != null) ? pos : dummy);
        }
        throw new IllegalArgumentException(
                Errors.format(ErrorKeys.NOT_AN_ANGLE_OBJECT_$1, Classes.getClass(obj)));
    }

