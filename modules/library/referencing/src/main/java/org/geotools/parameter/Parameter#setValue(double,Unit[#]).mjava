    /**
     * Sets the parameter value as a floating point and its associated unit.
     *
     * @param  value The parameter value.
     * @param  unit The unit for the specified value.
     * @throws InvalidParameterValueException if the floating point type is inappropriate for this
     *         parameter, or if the value is illegal for some other reason (for example a value out
     *         of range).
     *
     * @see #setValue(double)
     * @see #doubleValue(Unit)
     */
    public void setValue(final double value, Unit<?> unit)
            throws InvalidParameterValueException
    {
        ensureNonNull("unit", unit);
        @SuppressWarnings("unchecked") // Checked by constructor.
        final ParameterDescriptor<T> descriptor = (ParameterDescriptor) this.descriptor;
        final Unit<?> targetUnit = descriptor.getUnit();
        if (targetUnit == null) {
            throw unitlessParameter(descriptor);
        }
        final int expectedID = getUnitMessageID(targetUnit);
        if (getUnitMessageID(unit) != expectedID) {
            throw new InvalidParameterValueException(Errors.format(expectedID, unit),
                      descriptor.getName().getCode(), value);
        }
        Double converted;
        if (Units.isDegreeAngle(unit)) {
           unit = NonSI.DEGREE_ANGLE;  // more accurate representation of PI/180
        }
        try {
            converted = unit.getConverterToAny(targetUnit).convert(value);
        } catch (UnconvertibleException | IncommensurableException e) {
            throw new IllegalArgumentException("Value can't be converted to target unit", e);
        }
        ensureValidValue(descriptor, converted);
        // Really store the original value, not the converted one,
        // because we store the unit as well.
        this.value = descriptor.getValueClass().cast(value);
        this.unit  = unit;
    }

