    /**
     * Removes every {@code *_AUTHORITY_FACTORY} hints except the specified one. The removal,
     * if needed, is performed in a copy of the supplied hints in order to keep user's map
     * unmodified.
     * <p>
     * This removal is performed because {@code *_AUTHORITY_FACTORY} hints are typically supplied
     * to the above constructor in order to initialize the {@link #crsFactory}, {@link #csFactory},
     * <cite>etc.</cite> fields. But because the same map of hints is used for every call to {@code
     * ReferencingFactoryFinder.getFooAuthorityFactory(...)}, if we don't perform this removal, then
     * the {@code CRS_AUTHORITY_FACTORY} hint is taken in account for fetching other factories like
     * {@link CSAuthorityFactory}. We may think that it is not a problem since CS authority factory
     * should not care about {@code CRS_AUTHORITY_FACTORY} hint. But... our EPSG authority factory
     * implements both {@link CRSAuthorityFactory} and {@link CSAuthorityFactory} interfaces, so
     * our {@link CSAuthorityFactory} implementation do have CRS-related hints.
     * <p>
     * Conclusion: if we do not remove those hints, it typically leads to failure to find
     * a CS authority factory using this specific CRS authority factory. We may argue that
     * this is a Geotools design problem. Maybe... this is not a trivial issue. So we are
     * better to not document that in public API for now.
     *
     * @param  userHints The user hints to trim. This map will never be modified.
     * @param  keep  The hint to <strong>not</strong> remove.
     * @return A copy of {@code userHints} without the authority hints, or {@code userHints}
     *         if no change were required.
     */
    private static Hints trim(final Hints userHints, final Hints.Key keep) {
        Hints reduced = userHints;
        if (userHints != null) {
            for (int i=0; i<TYPES.length; i++) {
                final Hints.Key key = TYPES[i];
                if (!keep.equals(key)) {
                    if (reduced == userHints) {
                        if (!userHints.containsKey(key)) {
                            continue;
                        }
                        // Copies the map only if we need to modify it.
                        reduced = new Hints(userHints);
                    }
                    reduced.remove(key);
                }
            }
        }
        return reduced;
    }

