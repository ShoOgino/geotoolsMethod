    /**
     * Called on a single {@linkplain ParameterValue parameter value}, or on elements of a parameter
     * value. This method ensures that {@linkplain ParameterDescriptor#getMinimumValue minimum
     * value}, {@linkplain ParameterDescriptor#getMaximumValue maximum value} and {@linkplain
     * ParameterDescriptor#getValidValues valid values} all think the provided value is okay.
     *
     * @param value The value to test.
     * @param descriptor The descriptor for the value.
     * @return true if parameter is valid.
     * @see Parameter#ensureValidValue
     */
    private static boolean isValidValue(
            final Object value, final ParameterDescriptor<?> descriptor) {
        final Set<?> validValues = descriptor.getValidValues();
        if (validValues != null && !validValues.contains(value)) {
            return false;
        }
        @SuppressWarnings("unchecked") // Type has been verified by the caller.
        final Comparable<Object> min = (Comparable) descriptor.getMinimumValue();
        if (min != null && min.compareTo(value) > 0) {
            return false;
        }
        @SuppressWarnings("unchecked")
        final Comparable<Object> max = (Comparable) descriptor.getMaximumValue();
        if (max != null && max.compareTo(value) < 0) {
            return false;
        }
        return true;
    }

