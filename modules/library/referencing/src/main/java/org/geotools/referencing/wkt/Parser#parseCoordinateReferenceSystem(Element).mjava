    /**
     * Parses a coordinate reference system element.
     *
     * @param  parent The parent element.
     * @return The next element as a {@link CoordinateReferenceSystem} object.
     * @throws ParseException if the next element can't be parsed.
     */
    private CoordinateReferenceSystem parseCoordinateReferenceSystem(final Element element)
            throws ParseException
    {
        final Object key = element.peek();
        if (key instanceof Element) {
            final String keyword = ((Element) key).keyword.trim().toUpperCase(symbols.locale);
            CoordinateReferenceSystem r = null;
            try {
                if (   "GEOGCS".equals(keyword)) return r=parseGeoGCS  (element);
                if (   "PROJCS".equals(keyword)) return r=parseProjCS  (element);
                if (   "GEOCCS".equals(keyword)) return r=parseGeoCCS  (element);
                if (  "VERT_CS".equals(keyword)) return r=parseVertCS  (element);
                if ( "LOCAL_CS".equals(keyword)) return r=parseLocalCS (element);
                if ( "COMPD_CS".equals(keyword)) return r=parseCompdCS (element);
                if ("FITTED_CS".equals(keyword)) return r=parseFittedCS(element);
            } finally {
                // Work around for simulating post-conditions in Java.
                assert isValid(r, keyword) : element;
            }
        }
        throw element.parseFailed(null, Errors.format(ErrorKeys.UNKNOW_TYPE_$1, key));
    }

