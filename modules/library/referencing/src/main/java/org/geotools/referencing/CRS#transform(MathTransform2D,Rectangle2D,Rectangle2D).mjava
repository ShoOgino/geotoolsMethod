    /**
     * Transforms a rectangular envelope using the given {@linkplain MathTransform math transform}.
     * The transformation is only approximative. Invoking this method is equivalent to invoking the
     * following:
     *
     * <p>
     *
     * <pre>transform(transform, new GeneralEnvelope(envelope)).toRectangle2D()</pre>
     *
     * <p>Note that this method can not handle the case where the rectangle contains the North or
     * South pole, or when it cross the &plusmn;180Â° longitude, because {@linkplain MathTransform
     * math transforms} do not carry suffisient informations. For a more robust rectangle
     * transformation, use {@link #transform(CoordinateOperation, Rectangle2D, Rectangle2D)}
     * instead.
     *
     * @param transform The transform to use. Source and target dimension must be 2.
     * @param envelope The rectangle to transform (may be {@code null}).
     * @param destination The destination rectangle (may be {@code envelope}). If {@code null}, a
     *     new rectangle will be created and returned.
     * @return {@code destination}, or a new rectangle if {@code destination} was non-null and
     *     {@code envelope} was null.
     * @throws TransformException if a transform failed.
     * @since 2.4
     * @see #transform(CoordinateOperation, Rectangle2D, Rectangle2D)
     * @see org.geotools.referencing.operation.matrix.XAffineTransform#transform(
     *     java.awt.geom.AffineTransform, Rectangle2D, Rectangle2D)
     */
    public static Rectangle2D transform(
            final MathTransform2D transform, final Rectangle2D envelope, Rectangle2D destination)
            throws TransformException {
        return transform(transform, envelope, destination, new Point2D.Double());
    }

