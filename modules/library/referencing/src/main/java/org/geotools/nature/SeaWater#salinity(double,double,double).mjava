    /**
     * Computes salinity as a function of conductivity, temperature and pressure.
     *
     * @param C Conductivity in mS/cm (millisiemens by centimeters). Multiply par {@link
     *     #STANDARD_CONDUCTIVITY} if {@code C} is not a real conductivity, but instead the ratio
     *     between the sample's conductivity and the standard sample's conductivity.
     * @param T Temperature ITS-68 (-2 to 40°C)
     * @param P Pressure in decibars (0 to 10<sup>5</sup> dbar), not including atmospheric pressure.
     * @return Salinity PSS-78.
     * @todo What to do with pression!?! Check the equation of state.
     */
    public static double salinity(double C, final double T, final double P) {
        C /= STANDARD_CONDUCTIVITY;
        if (!(C < 5E-4)) { // use '!' in order to accept NaN
            final double XR =
                    Math.sqrt(
                            C
                                    / (polynome(T, PSS78_C)
                                            * (1.0
                                                    + polynome(P, PSS78_E)
                                                            * P
                                                            / ((PSS78_D[1] * T + PSS78_D[0]) * T
                                                                    + 1.0
                                                                    + (PSS78_D[3] * T + PSS78_D[2])
                                                                            * C))));
            final double S = sal(XR, T - 15.0); // Do not use an 'assert' statement invoking 'cond'.
            if (!(S >= 42)) return S; // use '!' to accept NaN
            /*
             * Calcule la salinité pour une eau de conductivité,
             * de température et de pression données. Cet algorithme
             * doit être utilisé lorsque l'on s'attend à une salinité
             * entre 42 et 50.
             */
            return 35 * C
                    + C
                            * (C - 1)
                            * (polynome(C, PSS78_AR)
                                    + T
                                            * (polynome(T, PSS78_AT)
                                                    + C
                                                            * (PSS78_CR[0]
                                                                    + PSS78_CR[1] * C
                                                                    + PSS78_CR[2] * T)));
            // TODO: VERIFIER CE QUE DEVIENT LA PRESSION ET IMPLEMENTER L'EQUATION D'ETAT.
        } else {
            return 0; // Zero conductivity trap
        }
    }

