    /**
     * Returns a new envelope with the same values than this envelope minus the specified range of
     * dimensions.
     * 
     * @param lower
     *            The first dimension to omit, inclusive.
     * @param upper
     *            The last dimension to omit, exclusive.
     * @return The subenvelope.
     * @throws IndexOutOfBoundsException
     *             if an index is out of bounds.
     */
    public GeneralEnvelope getReducedEnvelope(final int lower, final int upper)
            throws IndexOutOfBoundsException {
        final int curDim = ordinates.length / 2;
        final int rmvDim = upper - lower;
        if (lower < 0 || lower > curDim) {
            throw new IndexOutOfBoundsException(Errors.format(ErrorKeys.ILLEGAL_ARGUMENT_$2,
                    "lower", lower));
        }
        if (rmvDim < 0 || upper > curDim) {
            throw new IndexOutOfBoundsException(Errors.format(ErrorKeys.ILLEGAL_ARGUMENT_$2,
                    "upper", upper));
        }
        final GeneralEnvelope envelope = new GeneralEnvelope(curDim - rmvDim);
        System.arraycopy(ordinates, 0, envelope.ordinates, 0, lower);
        System.arraycopy(ordinates, lower, envelope.ordinates, upper, curDim - upper);
        return envelope;
    }

