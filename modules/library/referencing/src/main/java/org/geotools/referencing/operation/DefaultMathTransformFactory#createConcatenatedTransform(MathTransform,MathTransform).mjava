    /**
     * Creates a transform by concatenating two existing transforms. A concatenated transform acts
     * in the same way as applying two transforms, one after the other.
     *
     * <p>The dimension of the output space of the first transform must match the dimension of the
     * input space in the second transform. If you wish to concatenate more than two transforms,
     * then you can repeatedly use this method.
     *
     * @param transform1 The first transform to apply to points.
     * @param transform2 The second transform to apply to points.
     * @return The concatenated transform.
     * @throws FactoryException if the object creation failed.
     */
    @Override
    public MathTransform createConcatenatedTransform(
            final MathTransform transform1, final MathTransform transform2)
            throws FactoryException {
        MathTransform tr;
        try {
            tr = ConcatenatedTransform.create(transform1, transform2);
        } catch (IllegalArgumentException exception) {
            throw new FactoryException(exception);
        }
        tr = pool.unique(tr);
        return tr;
    }

