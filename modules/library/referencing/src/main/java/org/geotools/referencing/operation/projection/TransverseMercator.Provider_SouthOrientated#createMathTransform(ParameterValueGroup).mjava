        /**
         * Creates a transform from the specified group of parameter values.
         *
         * @param parameters The group of parameter values.
         * @return The created math transform.
         * @throws ParameterNotFoundException if a required parameter was not found.
         */
        @Override
        public MathTransform createMathTransform(final ParameterValueGroup parameters)
                throws ParameterNotFoundException {
            final MapProjection projection = (MapProjection) super.createMathTransform(parameters);
            if (projection.falseEasting == 0 && projection.falseNorthing == 0) {
                return projection;
            }
            final AffineTransform step =
                    AffineTransform.getTranslateInstance(
                            -2 * projection.falseEasting, -2 * projection.falseNorthing);
            return ConcatenatedTransform.create(ProjectiveTransform.create(step), projection);
        }

