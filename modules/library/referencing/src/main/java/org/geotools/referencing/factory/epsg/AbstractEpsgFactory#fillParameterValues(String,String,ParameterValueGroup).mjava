    /**
     * Fill parameter values in the specified group.
     *
     * @param method The EPSG code for the operation method.
     * @param operation The EPSG code for the operation (conversion or transformation).
     * @param parameters The parameter values to fill.
     * @throws SQLException if a SQL statement failed.
     */
    private void fillParameterValues(
            final String method, final String operation, final ParameterValueGroup parameters)
            throws FactoryException, SQLException {
        final PreparedStatement stmt;
        stmt =
                prepareStatement(
                        "ParameterValues",
                        "SELECT CP.PARAMETER_NAME,"
                                + " CV.PARAMETER_VALUE,"
                                + " CV.PARAM_VALUE_FILE_REF,"
                                + " CV.UOM_CODE"
                                + " FROM ([Coordinate_Operation Parameter Value] AS CV"
                                + " INNER JOIN [Coordinate_Operation Parameter] AS CP"
                                + " ON CV.PARAMETER_CODE = CP.PARAMETER_CODE)"
                                + " INNER JOIN [Coordinate_Operation Parameter Usage] AS CU"
                                + " ON (CP.PARAMETER_CODE = CU.PARAMETER_CODE)"
                                + " AND (CV.COORD_OP_METHOD_CODE = CU.COORD_OP_METHOD_CODE)"
                                + " WHERE CV.COORD_OP_METHOD_CODE = ?"
                                + " AND CV.COORD_OP_CODE = ?"
                                + " ORDER BY CU.SORT_ORDER");
        stmt.setString(1, method);
        stmt.setString(2, operation);
        try (ResultSet result = stmt.executeQuery()) {
            while (result.next()) {
                final String name = getString(result, 1, operation);
                final double value = result.getDouble(2);
                final Unit unit;
                Object reference;
                if (result.wasNull()) {
                    /*
                     * If no numeric values were provided in the database, then the values must
                     * appears in some external file. It may be a file to download from FTP.
                     */
                    reference = getString(result, 3, operation);
                    try {
                        reference = new URI((String) reference);
                    } catch (URISyntaxException exception) {
                        // Ignore: we will stores the reference as a file.
                        reference = new File((String) reference);
                    }
                    unit = null;
                } else {
                    reference = null;
                    final String unitCode = result.getString(4);
                    unit = (unitCode != null) ? createUnit(unitCode) : null;
                }
                final ParameterValue param;
                try {
                    param = parameters.parameter(name);
                } catch (ParameterNotFoundException exception) {
                    /*
                     * Wraps the unchecked ParameterNotFoundException into the checked
                     * NoSuchIdentifierException, which is a FactoryException subclass.
                     * Note that in theory, NoSuchIdentifierException is for MathTransforms rather
                     * than parameters.  However, we are close in spirit here since we are setting
                     * up MathTransform's parameters. Using NoSuchIdentifierException allows users
                     * (including CoordinateOperationSet) to know that the failure is probably
                     * caused by a MathTransform not yet supported in Geotools (or only partially
                     * supported) rather than some more serious failure in the database side.
                     * CoordinateOperationSet uses this information in order to determine if it
                     * should try the next coordinate operation or propagate the exception.
                     */
                    final NoSuchIdentifierException e =
                            new NoSuchIdentifierException(
                                    Errors.format(ErrorKeys.CANT_SET_PARAMETER_VALUE_$1, name),
                                    name);
                    e.initCause(exception);
                    throw e;
                }
                try {
                    if (reference != null) {
                        param.setValue(reference);
                    } else if (unit != null) {
                        param.setValue(value, unit);
                    } else {
                        param.setValue(value);
                    }
                } catch (InvalidParameterValueException exception) {
                    throw new FactoryException(
                            Errors.format(ErrorKeys.CANT_SET_PARAMETER_VALUE_$1, name), exception);
                }
            }
        }
    }

