    /**
     * Converts geocentric coordinates (x, y, z) to geodetic coordinates (longitude, latitude,
     * height), according to the current ellipsoid parameters. The method used here is derived from
     * "An Improved Algorithm for Geocentric to Geodetic Coordinate Conversion", by Ralph Toms, Feb
     * 1996.
     *
     * @param srcPts the array containing the source point coordinates.
     * @param srcOff the offset to the first point to be transformed in the source array.
     * @param dstPts the array into which the transformed point coordinates are returned. May be the
     *     same than {@code srcPts}.
     * @param dstOff the offset to the location of the first transformed point that is stored in the
     *     destination array.
     * @param numPts the number of point objects to be transformed.
     */
    public void inverseTransform(
            float[] srcPts, int srcOff, final float[] dstPts, int dstOff, final int numPts) {
        final int dimTarget = getSourceDimensions();
        if (srcPts == dstPts && needCopy(srcOff, 3, dstOff, dimTarget, numPts)) {
            // Source and destination arrays overlaps: copy in a temporary buffer.
            final float[] old = srcPts;
            srcPts = new float[numPts * 3];
            System.arraycopy(old, srcOff, srcPts, 0, srcPts.length);
            srcOff = 0;
        }
        inverseTransform(srcPts, null, srcOff, dstPts, null, dstOff, numPts, dimTarget);
    }

