    /**
     * Determines the axis ordering of a specified crs object.
     * <p>
     * The <tt>useBaseGeoCRS</tt> parameter is used to control behaviour for 
     * projected crs. When set to <tt>true</tt> the comparison will use the 
     * coordinate system for the underlying geographic crs object for the 
     * comparison. When set to false the comparison will use the coordinate 
     * system from projected crs itself.
     * </p>
     * @param crs The coordinate reference system.
     * @param useBaseGeoCRS Controls whether the base geo crs is used for 
     *   projected crs.
     * 
     * @return One of {@link AxisOrder#EAST_NORTH}, {@link AxisOrder@NORTH_EAST}, 
     * or {@link AxisOrder#INAPPLICABLE}
     */
    public static AxisOrder getAxisOrder(CoordinateReferenceSystem crs, boolean useBaseGeoCRS) { 
        CoordinateSystem cs = null;

        if (crs instanceof ProjectedCRS) {
            cs = !useBaseGeoCRS ? crs.getCoordinateSystem() :  
                ((ProjectedCRS)crs).getBaseCRS().getCoordinateSystem();
        }
        else if (crs instanceof GeographicCRS) {
            cs = crs.getCoordinateSystem();
        }
        else {
            return AxisOrder.INAPPLICABLE;
        }

        int dimension = cs.getDimension();
        int longitudeDim = -1;
        int latitudeDim = -1;

        for (int i = 0; i < dimension; i++) {
            AxisDirection dir = cs.getAxis(i).getDirection().absolute();

            if (dir.equals(AxisDirection.EAST)) {
                longitudeDim = i;
            }

            if (dir.equals(AxisDirection.NORTH)) {
                latitudeDim = i;
            }
        }

        if ((longitudeDim >= 0) && (latitudeDim >= 0)) {
            if (longitudeDim < latitudeDim) {
                return AxisOrder.EAST_NORTH;
            } else {
                return AxisOrder.NORTH_EAST;
            }
        }

        return AxisOrder.INAPPLICABLE;
    }

