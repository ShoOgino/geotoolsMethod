    /**
     * Returns a string representation of this direction, using a syntax matching the one used by
     * EPSG. This string representation will be used for creating a new {@link AxisDirection}. The
     * generated name should be identical to EPSG name, but we use the generated one anyway (rather
     * than the one provided by EPSG) in order to make sure that we create a single {@link
     * AxisDirection} for a given direction; we avoid potential differences like lower versus upper
     * cases, amount of white space, <cite>etc</cite>.
     */
    @Override
    public String toString() {
        final StringBuilder buffer = new StringBuilder(baseDirection.name());
        toLowerCase(buffer, 0);
        buffer.append(" along ");
        final double md = Math.abs(meridian);
        final int mi = (int) md;
        if (md == mi) {
            buffer.append(mi);
        } else {
            buffer.append(md);
        }
        buffer.append(" deg");
        if (md != 0 && mi != 180) {
            buffer.append(' ');
            final int base = buffer.length();
            final AxisDirection sign = meridian < 0 ? AxisDirection.WEST : AxisDirection.EAST;
            buffer.append(sign.name());
            toLowerCase(buffer, base);
        }
        final String name = buffer.toString();
        assert EPSG.matcher(name).matches() : name;
        return name;
    }

