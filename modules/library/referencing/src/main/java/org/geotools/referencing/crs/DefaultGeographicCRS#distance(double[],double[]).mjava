    /**
     * Computes the orthodromic distance between two points. This convenience method delegates the
     * work to the underlyling {@linkplain DefaultEllipsoid ellipsoid}, if possible.
     *
     * @param coord1 Coordinates of the first point.
     * @param coord2 Coordinates of the second point.
     * @return The distance between {@code coord1} and {@code coord2}.
     * @throws UnsupportedOperationException if this coordinate reference system can't compute
     *     distances.
     * @throws MismatchedDimensionException if a coordinate doesn't have the expected dimension.
     */
    @Override
    public Measure distance(final double[] coord1, final double[] coord2)
            throws UnsupportedOperationException, MismatchedDimensionException {
        if (!(coordinateSystem instanceof DefaultEllipsoidalCS)) {
            throw new UnsupportedImplementationException(coordinateSystem.getClass());
        }
        final Ellipsoid ellipsoid = ((GeodeticDatum) datum).getEllipsoid();
        if (!(ellipsoid instanceof DefaultEllipsoid)) {
            throw new UnsupportedImplementationException(ellipsoid.getClass());
        }
        final DefaultEllipsoidalCS cs = (DefaultEllipsoidalCS) coordinateSystem;
        final DefaultEllipsoid e = (DefaultEllipsoid) ellipsoid;
        if (coord1.length != 2 || coord2.length != 2 || cs.getDimension() != 2) {
            /*
             * Not yet implemented (an exception will be thrown later).
             * We should probably revisit the way we compute distances.
             */
            return super.distance(coord1, coord2);
        }
        return new Measure(
                e.orthodromicDistance(
                        cs.getLongitude(coord1),
                        cs.getLatitude(coord1),
                        cs.getLongitude(coord2),
                        cs.getLatitude(coord2)),
                e.getAxisUnit());
    }

