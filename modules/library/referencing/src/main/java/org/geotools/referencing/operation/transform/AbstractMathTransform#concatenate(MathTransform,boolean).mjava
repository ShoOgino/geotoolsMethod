    /**
     * Concatenates in an optimized way a {@link MathTransform} {@code other} to this {@code
     * MathTransform}. A new math transform is created to perform the combined transformation. The
     * {@code applyOtherFirst} value determine the transformation order as bellow:
     *
     * <ul>
     *   <li>If {@code applyOtherFirst} is {@code true}, then transforming a point <var>p</var> by
     *       the combined transform is equivalent to first transforming <var>p</var> by {@code
     *       other} and then transforming the result by the original transform {@code this}.
     *   <li>If {@code applyOtherFirst} is {@code false}, then transforming a point <var>p</var> by
     *       the combined transform is equivalent to first transforming <var>p</var> by the original
     *       transform {@code this} and then transforming the result by {@code other}.
     * </ul>
     *
     * If no special optimization is available for the combined transform, then this method returns
     * {@code null}. In the later case, the concatenation will be prepared by {@link
     * DefaultMathTransformFactory} using a generic {@link ConcatenatedTransform}.
     *
     * <p>The default implementation always returns {@code null}. This method is ought to be
     * overridden by subclasses capable of concatenating some combination of transforms in a special
     * way. Examples are {@link ExponentialTransform1D} and {@link LogarithmicTransform1D}.
     *
     * @param other The math transform to apply.
     * @param applyOtherFirst {@code true} if the transformation order is {@code other} followed by
     *     {@code this}, or {@code false} if the transformation order is {@code this} followed by
     *     {@code other}.
     * @return The combined math transform, or {@code null} if no optimized combined transform is
     *     available.
     */
    MathTransform concatenate(final MathTransform other, final boolean applyOtherFirst) {
        return null;
    }

