    /**
     * Ensures that the given set of parameters contains only valid values. This method compares all
     * parameter names against the names declared in the {@linkplain #getParameters operation method
     * parameter descriptor}. If an unknow parameter name is found, then an {@link
     * InvalidParameterNameException} is thrown. This method also ensures that all values are
     * assignable to the {@linkplain ParameterDescriptor#getValueClass expected class}, are between
     * the {@linkplain ParameterDescriptor#getMinimumValue minimum} and {@linkplain
     * ParameterDescriptor#getMaximumValue maximum} values and are one of the {@linkplain
     * ParameterDescriptor#getValidValues set of valid values}. If the value fails any of those
     * tests, then an {@link InvalidParameterValueException} is thrown.
     *
     * @param values The parameters values to check.
     * @return The parameter values to use for {@linkplain MathTransform math transform}
     *     construction. May be different than the supplied {@code values} argument if some missing
     *     values needed to be filled with default values.
     * @throws InvalidParameterNameException if a parameter name is unknow.
     * @throws InvalidParameterValueException if a parameter has an invalid value.
     */
    protected ParameterValueGroup ensureValidValues(final ParameterValueGroup values)
            throws InvalidParameterNameException, InvalidParameterValueException {
        final ParameterDescriptorGroup parameters = getParameters();
        final GeneralParameterDescriptor descriptor = values.getDescriptor();
        if (parameters.equals(descriptor)) {
            /*
             * Since the "official" parameter descriptor was used, the descriptor should
             * have already enforced argument validity. Consequently, there is no need to
             * performs the check and we will avoid it as a performance enhancement.
             */
            return values;
        }
        /*
         * Copy the all values from the user-supplied group to the provider-supplied group.
         * The provider group should performs all needed checks. Furthermore, it is suppliers
         * responsability to know about alias (e.g. OGC, EPSG, ESRI), while the user will
         * probably use the name from only one authority. With a copy, we gives a chances to
         * the provider-supplied parameters to uses its alias for understanding the user
         * parameter names.
         */
        final ParameterValueGroup copy = parameters.createValue();
        copy(values, copy);
        return copy;
    }

