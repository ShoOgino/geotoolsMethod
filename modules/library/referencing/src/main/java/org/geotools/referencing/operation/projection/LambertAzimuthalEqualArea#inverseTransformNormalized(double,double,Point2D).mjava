    /**
     * Transforms the specified (<var>x</var>,<var>y</var>) coordinate and stores the result in
     * {@code ptDst}.
     */
    @Override
    @SuppressWarnings("fallthrough")
    protected Point2D inverseTransformNormalized(double x, double y, Point2D ptDst)
            throws ProjectionException {
        final double lambda, phi;
        switch (mode) {
            case EQUATORIAL: // Fall through
            case OBLIQUE:
                {
                    x /= dd;
                    y *= dd;
                    final double rho = hypot(x, y);
                    if (rho < FINE_EPSILON) {
                        lambda = 0.0;
                        phi = latitudeOfOrigin;
                    } else {
                        double ab;
                        double sCe = 2.0 * asin(0.5 * rho / rq);
                        double cCe = cos(sCe);
                        sCe = sin(sCe);
                        x *= sCe;
                        if (mode == OBLIQUE) {
                            ab = cCe * sinb1 + y * sCe * cosb1 / rho;
                            y = rho * cosb1 * cCe - y * sinb1 * sCe;
                        } else {
                            ab = y * sCe / rho;
                            y = rho * cCe;
                        }
                        lambda = atan2(x, y);
                        phi = authlat(asin(ab));
                    }
                    break;
                }
            case NORTH_POLE:
                {
                    y = -y;
                    // Fall through
                }
            case SOUTH_POLE:
                {
                    final double q = x * x + y * y;
                    if (q == 0) {
                        lambda = 0.;
                        phi = latitudeOfOrigin;
                    } else {
                        double ab = 1.0 - q / qp;
                        if (mode == SOUTH_POLE) {
                            ab = -ab;
                        }
                        lambda = atan2(x, y);
                        phi = authlat(asin(ab));
                    }
                    break;
                }
            default:
                {
                    throw new AssertionError(mode);
                }
        }
        if (ptDst != null) {
            ptDst.setLocation(lambda, phi);
            return ptDst;
        }
        return new Point2D.Double(lambda, phi);
    }

