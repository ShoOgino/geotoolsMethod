    /**
     * Parses the specified URN.
     *
     * @param urn The URN to parse.
     * @throws NoSuchAuthorityCodeException if the URN syntax is invalid.
     *
     * @todo Implementation should be replaced by some mechanism using {@code GenericName}
     *       (at least the call to {@code String.regionMatches}) otherwise this method will
     *       fails if there is spaces around the separator.
     */
    public URN_Parser(final String urn) throws NoSuchAuthorityCodeException {
        this.urn = urn;
        final String code = urn.trim();
        String type = urn; // To be really assigned later.
        for (int i=0; i<URN_BASES.length; i++) {
            final String urnBase = URN_BASES[i];
            final int typeStart = urnBase.length();
            if (code.regionMatches(true, 0, urnBase, 0, typeStart)) {
                final int typeEnd = code.indexOf(SEPARATOR, typeStart);
                if (typeEnd >= 0) {
                    type = code.substring(typeStart, typeEnd).trim();
                    final URN_Type candidate = URN_Type.get(type);
                    if (candidate != null) {
                        final int nameEnd = code.indexOf(SEPARATOR, typeEnd + 1);
                        if (nameEnd >= 0) {
                            final int lastEnd = code.lastIndexOf(SEPARATOR);
                            this.version   = (lastEnd <= nameEnd) ? null
                                           : new Version(code.substring(nameEnd + 1, lastEnd));
                            this.authority = code.substring(typeEnd + 1, nameEnd).trim();
                            this.code      = code.substring(lastEnd + 1).trim();
                            this.type      = candidate;
                            return;
                        }
                    }
                }
            }
        }
        throw new NoSuchAuthorityCodeException(
                Errors.format(ErrorKeys.ILLEGAL_IDENTIFIER_$1, type), "urn:ogc:def", type);
    }

