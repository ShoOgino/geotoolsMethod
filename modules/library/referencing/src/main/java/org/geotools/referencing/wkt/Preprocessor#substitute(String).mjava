    /**
     * For every definition key found in the given string, substitute the key by its value. The
     * replacement will not be performed if the key was found between two quotation marks.
     *
     * @param text The string to process.
     * @return The string with all keys replaced by their values.
     */
    private String substitute(final String text) {
        Replacement last;
        replacements = last = new Replacement(0, 0, offset);
        StringBuilder buffer = null;
        for (Map.Entry<String, Definition> stringDefinitionEntry : definitions.entrySet()) {
            final Map.Entry entry = (Map.Entry) stringDefinitionEntry;
            final String name = (String) entry.getKey();
            final Definition def = (Definition) entry.getValue();
            int index = (buffer != null) ? buffer.indexOf(name) : text.indexOf(name);
            while (index >= 0) {
                /*
                 * An occurence of the text to substitute was found. First, make sure
                 * that the occurence found is a full word  (e.g. if the occurence to
                 * search is "WGS84", do not accept "TOWGS84").
                 */
                final int upper = index + name.length();
                final CharSequence cs = (buffer != null) ? buffer : text;
                if ((index == 0 || !Character.isJavaIdentifierPart(cs.charAt(index - 1)))
                        && (upper == cs.length()
                                || !Character.isJavaIdentifierPart(cs.charAt(upper)))) {
                    /*
                     * Count the number of quotes before the text to substitute. If this
                     * number is odd, then the text is between quotes and should not be
                     * substituted.
                     */
                    int count = 0;
                    for (int scan = index; --scan >= 0; ) {
                        scan =
                                (buffer != null)
                                        ? buffer.lastIndexOf("\"", scan)
                                        : text.lastIndexOf('"', scan);
                        if (scan < 0) {
                            break;
                        }
                        count++;
                    }
                    if ((count & 1) == 0) {
                        /*
                         * An even number of quotes was found before the text to substitute.
                         * Performs the substitution and keep trace of this replacement in a
                         * chained list of 'Replacement' objects.
                         */
                        if (buffer == null) {
                            buffer = new StringBuilder(text);
                            assert buffer.indexOf(name, index) == index;
                        }
                        final String value = def.asString;
                        buffer.replace(index, upper, value);
                        final int change = value.length() - name.length();
                        last = last.next = new Replacement(index, index + value.length(), change);
                        index = buffer.indexOf(name, index + change);
                        // Note: it is okay to skip the text we just replaced, since the
                        //       'definitions' map do not contains nested definitions.
                        continue;
                    }
                }
                /*
                 * The substitution was not performed because the text found was not a word,
                 * or was between quotes. Search the next occurence.
                 */
                index += name.length();
                index = (buffer != null) ? buffer.indexOf(name, index) : text.indexOf(name, index);
            }
        }
        return (buffer != null) ? buffer.toString() : text;
    }

