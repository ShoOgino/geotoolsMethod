    /**
     * Retourne une courbe quadratique passant par les trois points spécifiés. Il peut exister une infinité de courbes
     * quadratiques passant par trois points. On peut voir les choses en disant qu'une courbe quadratique correspond à
     * une parabole produite par une équation de la forme <code>y=ax²+bx+c</code>,  mais que l'axe des <var>x</var> de
     * cette équation n'est pas nécessairement horizontal. La direction de cet axe des <var>x</var> dépend du paramètre
     * {@code orientation} spécifié à cette méthode. La valeur {@link #HORIZONTAL} signifie que l'axe des <var>x</var>
     * de la parabole sera toujours horizontal. La courbe quadratique produite ressemblera alors à une parabole classique
     * telle qu'on en voit dans les ouvrages de mathématiques élémentaires. La valeur {@link #PARALLEL} indique plutôt que
     * l'axe des <var>x</var> de la parabole doit être parallèle à la droite joignant les points {@code P0} et
     * {@code P2}. Ce dernier type produira le même résultat que {@link #HORIZONTAL} si {@code P0.y==P2.y}.
     *
     * @param  P0 Premier point de la courbe quadratique.
     * @param  P1 Point par lequel la courbe quadratique doit passer. Il n'est pas obligatoire que ce point soit situé
     *         entre {@code P0} et {@code P1}. Toutefois, il ne doit pas être colinéaire avec {@code P0}
     *         et {@code P1}.
     * @param  P2 Dernier point de la courbe quadratique.
     * @param  orientation Orientation de l'axe des <var>x</var> de la parabole: {@link #PARALLEL} ou {@link #HORIZONTAL}.
     * @return Une courbe quadratique passant par les trois points spécifiés. La courbe commencera au point {@code P0}
     *         et se terminera au point {@code P2}. Si deux points ont des coordonnées presque identiques, ou si les
     *         trois points sont colinéaires, alors cette méthode retourne {@code null}.
     * @throws IllegalArgumentException si l'argument {@code orientation} n'est pas une des constantes valides.
     */
    public static QuadCurve2D fitParabol(final Point2D P0, final Point2D P1, final Point2D P2,
                                         final int orientation) throws IllegalArgumentException
    {
        return fitParabol(P0.getX(), P0.getY(),
                          P1.getX(), P1.getY(),
                          P2.getX(), P2.getY(), orientation);
    }

