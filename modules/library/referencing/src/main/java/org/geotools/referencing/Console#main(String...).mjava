    /**
     * Run the console from the command line. Before to process all instructions from the
     * {@linkplain System#in standard input stream}, this method first process the following
     * optional command-line arguments:
     *
     * <p>
     *
     * <TABLE CELLPADDING='0' CELLSPACING='0'>
     *   <TR><TD NOWRAP><CODE>-load</CODE> <VAR>&lt;filename&gt;</VAR></TD>
     *       <TD>&nbsp;Load a definition file before to run instructions from
     *           the standard input stream.</TD></TR>
     *   <TR><TD NOWRAP><CODE>-encoding</CODE> <VAR>&lt;code&gt;</VAR></TD>
     *       <TD>&nbsp;Set the character encoding.</TD></TR>
     *   <TR><TD NOWRAP><CODE>-locale</CODE> <VAR>&lt;language&gt;</VAR></TD>
     *       <TD>&nbsp;Set the language for the output (e.g. "fr" for French).</TD></TR>
     * </TABLE>
     *
     * @param args the command line arguments
     */
    @SuppressWarnings({"PMD.SystemPrintln", "PMD.CloseResource"})
    public static void main(String... args) {
        final Arguments arguments = new Arguments(args);
        final String load = arguments.getOptionalString("-load");
        final String file = arguments.getOptionalString("-file");
        arguments.getRemainingArguments(0);
        Locale.setDefault(arguments.locale);
        final LineNumberReader input;
        final Console console;
        /*
         * The usual way to execute instructions from a file is to redirect the standard input
         * stream using the standard DOS/Unix syntax (e.g. "< thefile.txt").  However, we also
         * accept a "-file" argument for the same purpose. It is easier to debug. On DOS system,
         * it also use the system default encoding instead of the command-line one.
         */
        if (file == null) {
            input = null;
            console = new Console();
        } else
            try {
                input = new LineNumberReader(new FileReader(file));
                console = new Console(input);
                console.setPrompt(null);
            } catch (IOException exception) {
                System.err.println(exception.getLocalizedMessage());
                return;
            }
        /*
         * Load predefined shorcuts. The file must be in the form "name = WKT". An example
         * of such file is the property file used by the property-based authority factory.
         */
        if (load != null)
            try {
                final LineNumberReader in = new LineNumberReader(new FileReader(load));
                try {
                    console.loadDefinitions(in);
                } catch (ParseException exception) {
                    console.reportError(exception);
                    in.close();
                    return;
                }
                in.close();
            } catch (IOException exception) {
                console.reportError(exception);
                return;
            }
        /*
         * Run all instructions and close the stream if it was a file one.
         */
        console.run();
        if (input != null)
            try {
                input.close();
            } catch (IOException exception) {
                console.reportError(exception);
            }
    }

