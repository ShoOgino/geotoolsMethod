    /**
     * Returns the three triangles that are created by splitting this TINTriangle at a newVertex.
     *
     * @param newVertex the split point (must be inside triangle).
     * @return three Triangles created by splitting this TINTriangle at a newVertex.
     */
    public List<TINTriangle> subTriangles(DirectPosition newVertex) {
        ArrayList<TINTriangle> triangles = new ArrayList<TINTriangle>();
        TINTriangle trigA = new TINTriangle(p0, p1, newVertex);
        TINTriangle trigB = new TINTriangle(p1, p2, newVertex);
        TINTriangle trigC = new TINTriangle(p2, p0, newVertex);

        // sub triangles are adjacent to each other.
        try {
            trigA.addAdjacentTriangle(trigB);
            trigA.addAdjacentTriangle(trigC);

            trigB.addAdjacentTriangle(trigA);
            trigB.addAdjacentTriangle(trigC);

            trigC.addAdjacentTriangle(trigA);
            trigC.addAdjacentTriangle(trigB);
        } catch (TriangulationException e) {
            // should never reach here so we can ignore.
        }

        // last adjacent triangle of each sub triangle is one of adjacent triangle of this triangle.
        trigA.tryToAddAdjacent(this.getAdjacentTriangles());
        trigB.tryToAddAdjacent(this.getAdjacentTriangles());
        trigC.tryToAddAdjacent(this.getAdjacentTriangles());

        triangles.add(trigA);
        triangles.add(trigB);
        triangles.add(trigC);

        Iterator<TINTriangle> i = this.getAdjacentTriangles().iterator();

        while (i.hasNext()) {
            TINTriangle trig = (TINTriangle) i.next();
            trig.removeAdjacent(this);
        }

        return triangles;
    }

