    /**
     * Set the parameter value as a floating point and its associated unit.
     *
     * @param value The parameter value.
     * @param unit The unit for the specified value.
     * @throws InvalidParameterValueException if the value is illegal for some reason (for example a
     *     value out of range).
     */
    @Override
    public void setValue(double value, final Unit<?> unit) throws InvalidParameterValueException {
        ensureNonNull("unit", unit);
        @SuppressWarnings("unchecked") // Checked by constructor.
        final ParameterDescriptor<Double> descriptor = (ParameterDescriptor) this.descriptor;
        final Unit<?> thisUnit = descriptor.getUnit();
        if (thisUnit == null) {
            throw unitlessParameter(descriptor);
        }
        final int expectedID = Parameter.getUnitMessageID(thisUnit);
        if (Parameter.getUnitMessageID(unit) != expectedID) {
            throw new IllegalArgumentException(Errors.format(expectedID, unit));
        }
        value = Units.getConverterToAny(unit, thisUnit).convert(value);
        this.value = Parameter.ensureValidValue(descriptor, Double.valueOf(value));
    }

