    /**
     * Constructs a parameter from a set of properties. The properties map is given unchanged to the
     * {@linkplain AbstractIdentifiedObject#AbstractIdentifiedObject(Map) super-class constructor}.
     *
     * <p>This constructor assumes that minimum, maximum and default values are already replaced by
     * their cached values, if available.
     *
     * @param properties Set of properties. Should contains at least {@code "name"}.
     * @param required {@code true} if this parameter is required, or {@code false} if it is
     *     optional.
     * @param valueClass The class that describe the type of the parameter.
     * @param validValues A finite set of valid values (usually from a {linkplain
     *     org.opengis.util.CodeList code list}) or {@code null} if it doesn't apply.
     * @param defaultValue The default value for the parameter, or {@code null}.
     * @param minimum The minimum parameter value, or {@code null}.
     * @param maximum The maximum parameter value, or {@code null}.
     * @param unit The unit for default, minimum and maximum values.
     */
    private DefaultParameterDescriptor(
            final Map<String, ?> properties,
            final boolean required,
            final Class<T> valueClass,
            final T[] validValues,
            final T defaultValue,
            final Comparable<T> minimum,
            final Comparable<T> maximum,
            final Unit<?> unit) {
        super(properties, required ? 1 : 0, 1);
        this.valueClass = valueClass;
        this.defaultValue = defaultValue;
        this.minimum = minimum;
        this.maximum = maximum;
        this.unit = unit;
        ensureNonNull("valueClass", valueClass);
        AbstractParameter.ensureValidClass(valueClass, defaultValue);
        AbstractParameter.ensureValidClass(valueClass, minimum);
        AbstractParameter.ensureValidClass(valueClass, maximum);
        if (minimum != null && maximum != null) {
            if (minimum.compareTo(valueClass.cast(maximum)) > 0) {
                throw new IllegalArgumentException(
                        Errors.format(ErrorKeys.BAD_RANGE_$2, minimum, maximum));
            }
        }
        if (validValues != null) {
            final Set<T> valids = new HashSet<>(Math.max(validValues.length * 4 / 3 + 1, 8), 0.75f);
            for (final T value : validValues) {
                AbstractParameter.ensureValidClass(valueClass, value);
                valids.add(value);
            }
            this.validValues = Collections.unmodifiableSet(valids);
        } else {
            this.validValues = null;
        }
        if (defaultValue != null) {
            Parameter.ensureValidValue(this, defaultValue);
        }
    }

