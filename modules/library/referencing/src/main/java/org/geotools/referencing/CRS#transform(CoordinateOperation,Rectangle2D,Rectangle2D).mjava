    /**
     * Transforms a rectangular envelope using the given {@linkplain CoordinateOperation coordinate
     * operation}. The transformation is only approximative. Invoking this method is equivalent to
     * invoking the following:
     *
     * <p>
     *
     * <pre>transform(operation, new GeneralEnvelope(envelope)).toRectangle2D()</pre>
     *
     * <p>This method can handle the case where the rectangle contains the North or South pole, or
     * when it cross the &plusmn;180Â° longitude.
     *
     * @param operation The operation to use. Source and target dimension must be 2.
     * @param envelope The rectangle to transform (may be {@code null}).
     * @param destination The destination rectangle (may be {@code envelope}). If {@code null}, a
     *     new rectangle will be created and returned.
     * @return {@code destination}, or a new rectangle if {@code destination} was non-null and
     *     {@code envelope} was null.
     * @throws TransformException if a transform failed.
     * @since 2.4
     * @see #transform(MathTransform2D, Rectangle2D, Rectangle2D)
     * @see org.geotools.referencing.operation.matrix.XAffineTransform#transform(
     *     java.awt.geom.AffineTransform, Rectangle2D, Rectangle2D)
     */
    public static Rectangle2D transform(
            final CoordinateOperation operation,
            final Rectangle2D envelope,
            Rectangle2D destination)
            throws TransformException {
        if (envelope == null) {
            return null;
        }

        GeneralEnvelope result = transform(operation, new GeneralEnvelope(envelope));
        if (destination == null) {
            return result.toRectangle2D();
        } else {
            destination.setFrame(
                    result.getMinimum(0),
                    result.getMinimum(1),
                    result.getSpan(0),
                    result.getSpan(1));
            return destination;
        }
    }

