    /**
     * Creates a factory for the specified authorities from the specified file. More than
     * one authority may be specified when the CRS to create should have more than one
     * {@linkplain CoordinateReferenceSystem#getIdentifiers identifier}, each with the same
     * code but different namespace. For example a
     * {@linkplain org.geotools.referencing.factory.epsg.EsriExtension factory for CRS defined
     * by ESRI} uses the {@code "ESRI"} namespace, but also the {@code "EPSG"} namespace
     * because those CRS are used as extension of the EPSG database. Concequently, the same
     * CRS can be identified as {@code "ESRI:53001"} and {@code "EPSG:53001"}, where
     * {@code "53001"} is a unused code in the official EPSG database.
     *
     * @param  factories   The underlying factories used for objects creation.
     * @param  authorities The organizations or party responsible for definition
     *                     and maintenance of the database.
     * @param  definitions URL to the definition file.
     * @throws IOException if the definitions can't be read.
     *
     * @since 2.4
     */
    public PropertyAuthorityFactory(final ReferencingFactoryContainer factories,
                                    final Citation[]                  authorities,
                                    final URL                         definitions)
            throws IOException
    {
        super(factories, MINIMUM_PRIORITY + 10);
        // The following hints have no effect on this class behaviour,
        // but tell to the user what this factory do about axis order.

        // TODO: Following line should not be commented-out.
        // See http://jira.codehaus.org/browse/GEOT-1699
//      hints.put(Hints.FORCE_LONGITUDE_FIRST_AXIS_ORDER, Boolean.FALSE);
        hints.put(Hints.FORCE_STANDARD_AXIS_DIRECTIONS,   Boolean.FALSE);
        hints.put(Hints.FORCE_STANDARD_AXIS_UNITS,        Boolean.FALSE);
        ensureNonNull("authorities", authorities);
        if (authorities.length == 0) {
            throw new IllegalArgumentException(Errors.format(ErrorKeys.EMPTY_ARRAY));
        }
        this.authorities = authorities.clone();
        authority = authorities[0];
        ensureNonNull("authority", authority);
        final InputStream in = definitions.openStream();
        this.definitions.load(in);
        in.close();
        /*
         * If the WKT do not contains any AXIS[...] element, then every CRS will be created with
         * the default (longitude,latitude) axis order. In such case this factory is insensitive
         * to the FORCE_LONGITUDE_FIRST_AXIS_ORDER hint (i.e. every CRS to be created by this
         * instance are invariant under the above-cited hint value) and we can remove it from
         * the hint map. Removing this hint allow the CRS.decode(..., true) convenience method
         * to find this factory (GEOT-1175).
         */
        final Symbols s = Symbols.DEFAULT;
        for (final Object wkt : this.definitions.values()) {
            if (s.containsAxis((String) wkt)) {
                LOGGER.warning("Axis elements found in a wkt definition, the force longitude " +
                        "first axis order hint might not be respected:\n" + wkt);
                return;
            }
        }
        hints.remove(Hints.FORCE_LONGITUDE_FIRST_AXIS_ORDER);
    }

