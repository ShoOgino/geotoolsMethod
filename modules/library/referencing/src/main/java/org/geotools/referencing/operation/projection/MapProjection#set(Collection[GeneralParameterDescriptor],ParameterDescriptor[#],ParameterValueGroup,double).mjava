    /**
     * Sets the value in a parameter group. This convenience method is used
     * by subclasses for {@link #getParameterValues} implementation. Values
     * are automatically converted from radians to decimal degrees if needed.
     *
     * @param expected  The value returned by {@code getParameterDescriptors().descriptors()}.
     * @param param     One of the {@link AbstractProvider} constants.
     * @param group     The group in which to set the value.
     * @param value     The value to set.
     */
    final void set(final Collection<GeneralParameterDescriptor> expected,
                   final ParameterDescriptor<?> param,
                   final ParameterValueGroup group,
                   double value)
    {
        if (isExpectedParameter(expected, param)) {
            if (NonSI.DEGREE_ANGLE.equals(param.getUnit())) {
                /*
                 * Converts radians to degrees and try to fix rounding error
                 * (e.g. -61.500000000000014  -->  -61.5). This is necessary
                 * in order to avoid a bias when formatting a transform and
                 * parsing it again.
                 */
                value = toDegrees(value);
                double old = value;
                value = XMath.trimDecimalFractionDigits(value, 4, 12);
                if (value == old) {
                    /*
                     * The attempt to fix rounding error failed. Try again with the
                     * assumption that the true value is a multiple of 1/3 of angle
                     * (e.g. 51.166666666666664  -->  51.166666666666666), which is
                     * common in the EPSG database.
                     */
                    old *= 3;
                    final double test = XMath.trimDecimalFractionDigits(old, 4, 12);
                    if (test != old) {
                        value = test/3;
                    }
                }
            }
            group.parameter(param.getName().getCode()).setValue(value);
        }
    }

