    /**
     * Returns an arbitrary object from a code.
     *
     * @see #createCoordinateReferenceSystem
     * @see #createDatum
     * @see #createEllipsoid
     * @see #createUnit
     */
    @Override
    public IdentifiedObject createObject(final String code) throws FactoryException {
        final Set<AuthorityFactory> done = new HashSet<>();
        done.add(this); // Safety for avoiding recursive calls.
        FactoryException failure = null;
        for (Class<? extends AuthorityFactory> factoryType : FACTORY_TYPES) {
            /*
             * Try all factories, starting with the CRS factory because it is the only one most
             * users care about. If the CRS factory doesn't know about the specified object, then
             * we will try the other factories (datum, CS, ...) before to rethrow the exception.
             */
            final AuthorityFactory factory;
            try {
                factory = getAuthorityFactory(factoryType, code);
            } catch (NoSuchAuthorityCodeException exception) {
                if (failure == null) {
                    failure = exception;
                }
                continue;
            }
            if (done.add(factory))
                try {
                    return factory.createObject(code);
                } catch (FactoryException exception) {
                    /*
                     * Failed to creates an object using the current factory.  We will retain
                     * only the
                     * first exception and discart all other ones, except if the first exceptions
                     *  were
                     * due to unknown authority (we will prefer exception due to unknown code
                     * instead).
                     * The first exception is usually thrown by the CRS factory, which is the only
                     * factory most users care about.
                     */
                    if (failure == null || failure.getCause() instanceof FactoryRegistryException) {
                        failure = exception;
                    }
                }
        }
        if (failure == null) {
            failure = noSuchAuthorityCode(IdentifiedObject.class, code);
        }
        throw failure;
    }

