    /**
     * Returns the orthodromic distance (expressed in meters). This method returns the value set 
     * by the last call to <code>{@linkplain #setDirection(double,double) setDirection}(azimuth,distance)</code>,
     * <strong>except</strong> if <code>{@linkplain #setDestinationGeographicPoint(double,double)
     * setDestinationGeographicPoint}(...)</code> has been invoked after. In this later case, the
     * distance will be computed from the {@linkplain #getStartingGeographicPoint starting point}
     * to the destination point.
     *
     * @return The orthodromic distance, in the same units as the
     *         {@linkplain #getEllipsoid ellipsoid} axis.
     * @throws IllegalStateException if the destination point has not been set.
     */
    public double getOrthodromicDistance() throws IllegalStateException {
        if (!directionValid) {
            computeDirection();
            if (antipodal) {
                // If we are at antipodes, DefaultEllipsoid will provides a better estimation.
                if (ellipsoid instanceof DefaultEllipsoid) {
                    return ((DefaultEllipsoid) ellipsoid).orthodromicDistance(
                            toDegrees(long1), toDegrees(lat1), toDegrees(long2), toDegrees(lat2));
                }
            } else {
                assert checkOrthodromicDistance() : this;
            }
        }
        return distance;
    }

