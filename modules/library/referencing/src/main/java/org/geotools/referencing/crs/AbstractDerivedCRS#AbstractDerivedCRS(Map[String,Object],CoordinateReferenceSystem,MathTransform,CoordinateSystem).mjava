    /**
     * Constructs a derived CRS from a set of properties. A {@linkplain DefaultOperationMethod
     * default operation method} is inferred from the {@linkplain MathTransform math transform}.
     * This is a convenience constructor that is not garanteed to work reliably for non-GeoTools
     * implementations. Use the constructor expecting a {@linkplain DefiningConversion defining
     * conversion} for more determinist result.
     *
     * <p>The properties are given unchanged to the {@linkplain
     * org.geotools.referencing.AbstractReferenceSystem#AbstractReferenceSystem(Map) super-class
     * constructor}. The following optional properties are also understood:
     *
     * <p>
     *
     * <table border='1'>
     *   <tr bgcolor="#CCCCFF" class="TableHeadingColor">
     *     <th nowrap>Property name</th>
     *     <th nowrap>Value type</th>
     *     <th nowrap>Value given to</th>
     *   </tr>
     *   <tr>
     *     <td nowrap>&nbsp;<code>"conversion.name"</code>&nbsp;</td>
     *     <td nowrap>&nbsp;{@link String}&nbsp;</td>
     *     <td nowrap>&nbsp;<code>{@linkplain #getConversionFromBase}.getName()</code></td>
     *   </tr>
     * </table>
     *
     * <p>Additional properties for the {@link DefaultConversion} object to be created can be
     * specified with the <code>"conversion."</code> prefix added in front of property names
     * (example: <code>"conversion.remarks"</code>). The same applies for operation method, using
     * the <code>"method."</code> prefix.
     *
     * @param properties Name and other properties to give to the new derived CRS object and to the
     *     underlying {@linkplain DefaultConversion conversion}.
     * @param base Coordinate reference system to base the derived CRS on.
     * @param baseToDerived The transform from the base CRS to returned CRS.
     * @param derivedCS The coordinate system for the derived CRS. The number of axes must match the
     *     target dimension of the transform {@code baseToDerived}.
     * @throws MismatchedDimensionException if the source and target dimension of {@code
     *     baseToDerived} don't match the dimension of {@code base} and {@code derivedCS}
     *     respectively.
     * @since 2.5
     */
    protected AbstractDerivedCRS(
            final Map<String, Object> properties,
            final CoordinateReferenceSystem base,
            final MathTransform baseToDerived,
            final CoordinateSystem derivedCS)
            throws MismatchedDimensionException {
        this(properties, new DefaultOperationMethod(baseToDerived), base, baseToDerived, derivedCS);
    }

