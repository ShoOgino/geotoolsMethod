    /**
     * Parses a "FITTED_CS" element. This element has the following pattern:
     *
     * <blockquote>
     *
     * <code>
     * FITTED_CS["<name>", <to base>, <base cs>]
     * </code>
     *
     * </blockquote>
     *
     * @param parent The parent element.
     * @return The "FITTED_CS" element as a {@link CompoundCRS} object.
     * @throws ParseException if the "COMPD_CS" element can't be parsed.
     */
    private DerivedCRS parseFittedCS(final Element parent) throws ParseException {
        Element element = parent.pullElement("FITTED_CS");
        String name = element.pullString("name");
        Map<String, ?> properties = parseAuthority(element, name);
        final MathTransform toBase = parseMathTransform(element, true);
        final CoordinateReferenceSystem base = parseCoordinateReferenceSystem(element);
        final OperationMethod method = getOperationMethod();
        element.close();
        /*
         * WKT provides no informations about the underlying CS of a derived CRS.
         * We have to guess some reasonable one with arbitrary units.  We try to
         * construct the one which contains as few information as possible, in
         * order to avoid providing wrong informations.
         */
        final CoordinateSystemAxis[] axis = new CoordinateSystemAxis[toBase.getSourceDimensions()];
        final StringBuilder buffer = new StringBuilder(name);
        buffer.append(" axis ");
        final int start = buffer.length();
        try {
            for (int i = 0; i < axis.length; i++) {
                final String number = String.valueOf(i);
                buffer.setLength(start);
                buffer.append(number);
                axis[i] =
                        csFactory.createCoordinateSystemAxis(
                                singletonMap(IdentifiedObject.NAME_KEY, buffer.toString()),
                                number,
                                AxisDirection.OTHER,
                                AbstractUnit.ONE);
            }
            final Conversion conversion =
                    new DefiningConversion(
                            singletonMap(IdentifiedObject.NAME_KEY, method.getName().getCode()),
                            method,
                            toBase.inverse());
            final CoordinateSystem cs = new AbstractCS(properties, axis);
            return crsFactory.createDerivedCRS(properties, base, conversion, cs);
        } catch (FactoryException | NoninvertibleTransformException exception) {
            throw element.parseFailed(exception, null);
        }
    }

