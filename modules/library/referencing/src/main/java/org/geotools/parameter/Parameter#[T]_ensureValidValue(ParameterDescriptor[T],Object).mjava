    /**
     * Ensures that the given value is valid according the specified parameter descriptor. This
     * convenience method ensures that {@code value} is assignable to the {@linkplain
     * ParameterDescriptor#getValueClass expected class}, is between the {@linkplain
     * ParameterDescriptor#getMinimumValue minimum} and {@linkplain
     * ParameterDescriptor#getMaximumValue maximum} values and is one of the {@linkplain
     * ParameterDescriptor#getValidValues set of valid values}. If the value fails any of those
     * tests, then an exception is thrown.
     *
     * <p>This method is similar to <code>{@linkplain Parameters#isValid
     * Parameters#isValid}(descriptor, value)</code> except that the exception contains an error
     * message formatted with a description of the failure reason.
     *
     * @param  <T> The type of parameter value. The given {@code value} should typically be an
     *     instance of this class. This is not required by this method signature but is checked by
     *     this method implementation.
     * @param descriptor The parameter descriptor to check against.
     * @param value The value to check, or {@code null}.
     * @return The value casted to the descriptor parameterized type.
     * @throws InvalidParameterValueException if the parameter value is invalid.
     */
    public static <T> T ensureValidValue(
            final ParameterDescriptor<T> descriptor, final Object value)
            throws InvalidParameterValueException {
        if (value == null) {
            return null;
        }
        final String error;
        final Class<T> type = descriptor.getValueClass();
        if (!type.isInstance(value)) {
            error =
                    Errors.format(
                            ErrorKeys.ILLEGAL_OPERATION_FOR_VALUE_CLASS_$1,
                            Classes.getClass(value));
        } else {
            @SuppressWarnings("unchecked") // Type checked in the above test case.
            final Comparable<Object> minimum = (Comparable) descriptor.getMinimumValue();
            @SuppressWarnings("unchecked")
            final Comparable<Object> maximum = (Comparable) descriptor.getMaximumValue();
            if ((minimum != null && minimum.compareTo(value) > 0)
                    || (maximum != null && maximum.compareTo(value) < 0)) {
                error = Errors.format(ErrorKeys.VALUE_OUT_OF_BOUNDS_$3, value, minimum, maximum);
            } else {
                final Set<?> validValues = descriptor.getValidValues();
                if (validValues != null && !validValues.contains(value)) {
                    error =
                            Errors.format(
                                    ErrorKeys.ILLEGAL_ARGUMENT_$2, getName(descriptor), value);
                } else {
                    return type.cast(value);
                }
            }
        }
        throw new InvalidParameterValueException(error, getName(descriptor), value);
    }

