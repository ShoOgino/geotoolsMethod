    /**
     * Parse the code string to retrive the code number and central longitude / latitude. Assumed
     * format is {@code AUTO:code,lon0,lat0} where {@code AUTO} is optional.
     *
     * @param text The code in the {@code AUTO:code,lon0,lat0} format.
     * @param type The type of the CRS to be constructed (e.g. {@code GeographicCRS.class}). Used
     *     only in case of failure for constructing an error message.
     * @throws NoSuchAuthorityCodeException if the specified code can't be parsed.
     */
    public Code(final String text, final Class type) throws NoSuchAuthorityCodeException {
        String authority = "AUTO";
        int code = 0;
        double longitude = Double.NaN;
        double latitude = Double.NaN;

        // there are two syntaxes for the AUTO factory:
        // AUTO:code,unit,longitude,latitude (from WMS 1.1 spec)
        // AUTO:code,longitude,latitude (from early WMS specs)
        // here we try to support both of them

        // the AUTO prefix is optional, remove it if necessary (and support also AUTO2)
        String[] parts;
        if (text.startsWith("AUTO"))
            parts = text.replaceAll("AUTO(2)?\\s*:", "").split("\\s*,\\s*");
        else parts = text.split("\\s*,\\s*");

        // do we have enough components?
        if (parts.length < 3) {
            throw noSuchAuthorityCode(type, text);
        }

        try {
            if (parts.length < 4) {
                // code,lon,lat
                code = Integer.parseInt(parts[0]);
                longitude = Double.parseDouble(parts[1]);
                latitude = Double.parseDouble(parts[2]);
            } else {
                // code,unit,lon,lat
                code = Integer.parseInt(parts[0]);
                longitude = Double.parseDouble(parts[2]);
                latitude = Double.parseDouble(parts[3]);
            }
        } catch (NumberFormatException exception) {
            // If a number can't be parsed, then this is an invalid authority code.
            NoSuchAuthorityCodeException e = noSuchAuthorityCode(type, text);
            e.initCause(exception);
            throw e;
        }

        if (!(longitude >= Longitude.MIN_VALUE
                && longitude <= Longitude.MAX_VALUE
                && latitude >= Latitude.MIN_VALUE
                && latitude <= Latitude.MAX_VALUE)) {
            // A longitude or latitude is out of range, or was not present
            // (i.e. the field still has a NaN value).
            throw noSuchAuthorityCode(type, text);
        }
        this.authority = authority;
        this.code = code;
        this.longitude = longitude;
        this.latitude = latitude;
        this.type = type;
    }

