    /**
     * Makes sure that the specified geocentric CRS uses standard axis, prime meridian and the
     * specified datum. If {@code crs} already meets all those conditions, then it is returned
     * unchanged. Otherwise, a new normalized geocentric CRS is created and returned.
     *
     * @param crs The geocentric coordinate reference system to normalize.
     * @param datum The expected datum.
     * @return The normalized coordinate reference system.
     * @throws FactoryException if the construction of a new CRS was needed but failed.
     */
    private GeocentricCRS normalize(final GeocentricCRS crs, final GeodeticDatum datum)
            throws FactoryException {
        final CartesianCS STANDARD = DefaultCartesianCS.GEOCENTRIC;
        final GeodeticDatum candidate = crs.getDatum();
        if (equalsIgnorePrimeMeridian(candidate, datum)) {
            if (getGreenwichLongitude(candidate.getPrimeMeridian())
                    == getGreenwichLongitude(datum.getPrimeMeridian())) {
                if (hasStandardAxis(crs.getCoordinateSystem(), STANDARD)) {
                    return crs;
                }
            }
        }
        final CRSFactory crsFactory = getFactoryContainer().getCRSFactory();
        return crsFactory.createGeocentricCRS(getTemporaryName(crs), datum, STANDARD);
    }

