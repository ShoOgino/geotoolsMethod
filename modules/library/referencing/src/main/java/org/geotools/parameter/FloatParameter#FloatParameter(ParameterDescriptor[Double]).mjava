    /**
     * Constructs a parameter from the specified descriptor. The descriptor {@linkplain
     * ParameterDescriptor#getValueClass() value class} must be <code>{@linkplain Double}.class
     * </code>.
     *
     * @param descriptor The abstract definition of this parameter.
     * @throws IllegalArgumentException if the value class is not {@code Double.class}.
     */
    public FloatParameter(final ParameterDescriptor<Double> descriptor) {
        super(descriptor);
        final Class type = descriptor.getValueClass();
        final Class expected = Double.class;
        if (!expected.equals(type) && !Double.TYPE.equals(type)) {
            throw new IllegalArgumentException(
                    Errors.format(ErrorKeys.ILLEGAL_CLASS_$2, type, expected));
        }
        final Number value = descriptor.getDefaultValue();
        this.value = (value != null) ? value.doubleValue() : Double.NaN;
    }

