    /**
     * Returns the value in this group for the specified name. The name can be a matrix element if
     * it uses the following syntax: <code>"elt_<var>row</var>_<var>col</var>"</code> where <code>
     * "elt_"</code> is the {@linkplain MatrixParameterDescriptors#prefix prefix} for all matrix
     * elements, and <var>row</var> and <var>col</var> are row and column indices respectively. For
     * example <code>"elt_2_1"</code> is the element name for the value at line 2 and row 1. The row
     * and column index are 0 based.
     *
     * @param name The case insensitive name of the parameter to search for.
     * @return The parameter value for the given name.
     * @throws ParameterNotFoundException if there is no parameter for the given name.
     */
    @Override
    public ParameterValue<?> parameter(String name) throws ParameterNotFoundException {
        ensureNonNull("name", name);
        name = name.trim();
        final MatrixParameterDescriptors descriptor =
                ((MatrixParameterDescriptors) this.descriptor);
        final String prefix = descriptor.prefix;
        RuntimeException cause = null;
        if (name.regionMatches(true, 0, prefix, 0, prefix.length())) {
            final int split = name.indexOf(descriptor.separator, prefix.length());
            if (split >= 0)
                try {
                    final int row = Integer.parseInt(name.substring(prefix.length(), split));
                    final int col = Integer.parseInt(name.substring(split + 1));
                    return parameter(row, col);
                } catch (NumberFormatException exception) {
                    cause = exception;
                } catch (IndexOutOfBoundsException exception) {
                    cause = exception;
                }
        }
        /*
         * The parameter name is not a matrix element name. Search in the super
         * class for other parameters, especially "num_row" and "num_col".
         */
        try {
            return super.parameter(name);
        } catch (ParameterNotFoundException exception) {
            if (cause != null)
                try {
                    exception.initCause(cause);
                } catch (IllegalStateException ignore) {
                    // A cause has already be given to the exception. Forget the cause then.
                }
            throw exception;
        }
    }

