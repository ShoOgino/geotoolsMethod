    /**
     * Ignore le suffix d'un nombre. Cette méthode est appellée par la méthode {@link #parse} pour
     * savoir quel champs il vient de lire. Par exemple si l'on vient de lire les degrés dans
     * "48°12'", alors cette méthode extraira le "°" et retournera 0 pour indiquer que l'on vient de
     * lire des degrés.
     *
     * <p>Cette méthode se chargera d'ignorer les espaces qui précèdent le suffix. Elle tentera
     * ensuite de d'abord interpréter le suffix selon les symboles du patron (spécifié avec {@link
     * #applyPattern}. Si le suffix n'a pas été reconnus, elle tentera ensuite de le comparer aux
     * symboles standards (° ' ").
     *
     * @param source Chaîne dans laquelle on doit sauter le suffix.
     * @param pos En entré, l'index du premier caractère à considérer dans la chaîne {@code pos}. En
     *     sortie, l'index du premier caractère suivant le suffix (c'est-à-dire index à partir d'où
     *     continuer la lecture après l'appel de cette méthode). Si le suffix n'a pas été reconnu,
     *     alors cette méthode retourne par convention {@code SYMBOLS.length}.
     * @param field Champs à vérifier de préférences. Par exemple la valeur 1 signifie que les
     *     suffix des minutes et des secondes devront être vérifiés avant celui des degrés.
     * @return Le numéro du champs correspondant au suffix qui vient d'être extrait: -1 pour le
     *     préfix de l'angle, 0 pour le suffix des degrés, 1 pour le suffix des minutes et 2 pour le
     *     suffix des secondes. Si le texte n'a pas été reconnu, retourne {@code SYMBOLS.length}.
     */
    private int skipSuffix(final String source, final ParsePosition pos, int field) {
        /*
         * Essaie d'abord de sauter les suffix qui
         * avaient été spécifiés dans le patron.
         */
        final int length = source.length();
        int start = pos.getIndex();
        for (int j = SYMBOLS.length; j >= 0; j--) { // C'est bien j>=0 et non j>0.
            int index = start;
            final String toSkip = getSuffix(field);
            if (toSkip != null) {
                final int toSkipLength = toSkip.length();
                do {
                    if (source.regionMatches(index, toSkip, 0, toSkipLength)) {
                        pos.setIndex(index + toSkipLength);
                        return field;
                    }
                } while (index < length && Character.isSpaceChar(source.charAt(index++)));
            }
            if (++field >= SYMBOLS.length) field = -1;
        }
        /*
         * Le texte trouvé ne correspondant à aucun suffix du patron,
         * essaie maintenant de sauter un des suffix standards (après
         * avoir ignoré les espaces qui le précédaient).
         */
        char c;
        do {
            if (start >= length) {
                return SYMBOLS.length;
            }
        } while (Character.isSpaceChar(c = source.charAt(start++)));
        switch (c) {
            case '\u00B0':
                pos.setIndex(start);
                return DEGREES_FIELD;
            case '\'':
                pos.setIndex(start);
                return MINUTES_FIELD;
            case '"':
                pos.setIndex(start);
                return SECONDS_FIELD;
            default:
                return SYMBOLS.length; // Unknow field.
        }
    }

