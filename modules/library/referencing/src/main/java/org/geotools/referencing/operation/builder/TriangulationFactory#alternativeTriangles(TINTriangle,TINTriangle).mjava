    /**
     * Changes the diagonal of the quad generated from two adjacent triangles.
     *
     * @param ABC triangle sharing an edge with BCD
     * @param BCD triangle sharing an edge with ABC
     * @return triangles ABD and ADC, or null if ABCD is not convex
     * @throws TriangulationException if {@code ABC} and {@code BCD} are not adjacent
     */
    private List<TINTriangle> alternativeTriangles(TINTriangle ABC, TINTriangle BCD)
            throws TriangulationException {
        ArrayList<DirectPosition> ABCvertices = new ArrayList<>();
        ArrayList<DirectPosition> BCDvertices = new ArrayList<>();

        ABCvertices.add(ABC.p0);
        ABCvertices.add(ABC.p1);
        ABCvertices.add(ABC.p2);
        BCDvertices.add(BCD.p0);
        BCDvertices.add(BCD.p1);
        BCDvertices.add(BCD.p2);

        ArrayList<DirectPosition> sharedVertices = new ArrayList<>();
        ArrayList<DirectPosition> unsharedVertices = new ArrayList<>();

        // Finds shared and unshared vertices
        for (DirectPosition vertex : ABCvertices) {
            if (!BCDvertices.contains(vertex)) {
                unsharedVertices.add(vertex);
            } else if (BCDvertices.contains(vertex)) {
                sharedVertices.add(vertex);
                BCDvertices.remove(vertex);
            } else {
                throw new TriangulationException("should never reach here");
            }
        }

        unsharedVertices.addAll(BCDvertices);

        if (sharedVertices.size() < 2) {
            throw new TriangulationException("Unable to make alternative triangles");
        }

        // remove Adjacent from original triangles
        ABC.removeAdjacent(BCD);
        BCD.removeAdjacent(ABC);

        // new triangles are generated
        TINTriangle trigA =
                new TINTriangle(
                        sharedVertices.get(0), unsharedVertices.get(0), unsharedVertices.get(1));
        TINTriangle trigB =
                new TINTriangle(
                        unsharedVertices.get(0), unsharedVertices.get(1), sharedVertices.get(1));

        // Adjacent triangles are added
        trigA.addAdjacentTriangle(trigB);
        trigB.addAdjacentTriangle(trigA);
        trigA.tryToAddAdjacent(BCD.getAdjacentTriangles());
        trigA.tryToAddAdjacent(ABC.getAdjacentTriangles());
        trigB.tryToAddAdjacent(BCD.getAdjacentTriangles());
        trigB.tryToAddAdjacent(ABC.getAdjacentTriangles());

        List<TINTriangle> list = new ArrayList<>();
        list.add(trigA);
        list.add(trigB);

        // Adjacent triangles of adjacent triangles are modified.
        for (TINTriangle trig : ABC.getAdjacentTriangles()) {
            trig.removeAdjacent(ABC);
            trig.tryToAddAdjacent(list);
        }

        for (TINTriangle trig : BCD.getAdjacentTriangles()) {
            trig.removeAdjacent(BCD);
            trig.tryToAddAdjacent(list);
        }

        return list;
    }

