    /**
     * Transforms the specified (<var>&lambda;</var>,<var>&phi;</var>) coordinates (units in
     * radians) and stores the result in {@code ptDst} (linear distance on a unit sphere).
     */
    protected Point2D transformNormalized(double lam, double phi, Point2D ptDst)
            throws ProjectionException {

        double[] interruptions;
        double[] central_merids;
        double offset = computeOffset();
        int i = 0;
        Point2D p;

        lam = wrapLongitude(lam);
        phi = wrapLatitude(phi);

        if (phi >= 0) {
            interruptions = INTERRUP_NORTH;
            central_merids = CENTRAL_MERID_NORTH;
        } else {
            interruptions = INTERRUP_SOUTH;
            central_merids = CENTRAL_MERID_SOUTH;
            offset = -offset;
        }

        if (lam >= interruptions[interruptions.length - 1]) i = interruptions.length - 1;
        else while (lam >= interruptions[i]) i++;

        double central_merid = central_merids[i - 1];
        double lam_shift = lam - central_merid;

        if (phi > LAT_THRESH || phi < -LAT_THRESH) { // Mollweide
            p = moll.transformNormalized(lam_shift, phi, ptDst);
            p.setLocation(p.getX(), p.getY() - offset);
        } else { // Sinusoidal in spherical form
            p = new Point2D.Double(lam_shift * Math.cos(phi), phi);
        }

        Point2D shift = sinu.transformNormalized(central_merid, 0., null);
        p.setLocation(p.getX() + shift.getX(), p.getY());

        if (ptDst != null) {
            ptDst.setLocation(p.getX(), p.getY());
            return ptDst;
        } else {
            return p;
        }
    }

