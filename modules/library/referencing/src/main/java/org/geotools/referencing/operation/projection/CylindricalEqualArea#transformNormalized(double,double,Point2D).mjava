    /**
     * Transforms the specified (<var>&lambda;</var>,<var>&phi;</var>) coordinates (units in
     * radians) and stores the result in {@code xy} (linear distance on a unit sphere).
     */
    protected Point2D transformNormalized(double lam, double phi, final Point2D xy)
            throws ProjectionException {
        double x, y;
        if (isSpherical) {
            x = scaleFactor * lam;
            y = Math.sin(phi) / scaleFactor;
        } else {
            x = scaleFactor * lam;
            y = .5 * ProjectionMath.qsfn(Math.sin(phi), e, one_es) / scaleFactor;
        }
        if (xy != null) {
            xy.setLocation(x, y);
            return xy;
        } else {
            return new Point2D.Double(x, y);
        }
    }

