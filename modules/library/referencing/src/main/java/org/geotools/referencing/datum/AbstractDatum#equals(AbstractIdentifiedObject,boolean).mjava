    /**
     * Compares the specified object with this datum for equality.
     *
     * @param  object The object to compare to {@code this}.
     * @param  compareMetadata {@code true} for performing a strict comparaison, or
     *         {@code false} for comparing only properties relevant to transformations.
     * @return {@code true} if both objects are equal.
     */
    @Override
    public boolean equals(final AbstractIdentifiedObject object, final boolean compareMetadata) {
        if (super.equals(object, compareMetadata)) {
            if (!compareMetadata) {
                /*
                 * Tests for name, since datum with different name have completly
                 * different meaning. We don't perform this comparaison if the user
                 * asked for metadata comparaison, because in such case the names
                 * have already been compared by the subclass.
                 */
                return nameMatches(object.getName().getCode()) ||
                       object.nameMatches(getName().getCode());
            }
            final AbstractDatum that = (AbstractDatum) object;
            return this.realizationEpoch == that.realizationEpoch &&
                   Utilities.equals(this.domainOfValidity, that.domainOfValidity) &&
                   Utilities.equals(this.anchorPoint,      that.anchorPoint) &&
                   Utilities.equals(this.scope,            that.scope);
        }
        return false;
    }

