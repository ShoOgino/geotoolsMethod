    /**
     * Returns the set of authority codes of the given type. The type argument specify the base
     * class. For example if this factory is an instance of CRSAuthorityFactory, then:
     *
     * <p>
     *
     * <ul>
     *   <li>{@code CoordinateReferenceSystem.class} asks for all authority codes accepted by {@link
     *       #createGeographicCRS createGeographicCRS}, {@link #createProjectedCRS
     *       createProjectedCRS}, {@link #createVerticalCRS createVerticalCRS}, {@link
     *       #createTemporalCRS createTemporalCRS} and their friends.
     *   <li>{@code ProjectedCRS.class} asks only for authority codes accepted by {@link
     *       #createProjectedCRS createProjectedCRS}.
     * </ul>
     *
     * The default implementaiton filters the set of codes based on the {@code "PROJCS"} and {@code
     * "GEOGCS"} at the start of the WKT strings.
     *
     * @param type The spatial reference objects type (may be {@code Object.class}).
     * @return The set of authority codes for spatial reference objects of the given type. If this
     *     factory doesn't contains any object of the given type, then this method returns an empty
     *     set.
     * @throws FactoryException if access to the underlying database failed.
     */
    @Override
    public Set<String> getAuthorityCodes(final Class<? extends IdentifiedObject> type)
            throws FactoryException {
        if (type == null || type.isAssignableFrom(IdentifiedObject.class)) {
            return codes;
        }
        synchronized (filteredCodes) {
            Set<String> filtered = filteredCodes.get(type);
            if (filtered == null) {
                @SuppressWarnings("unchecked")
                final Map<String, String> map = (Map) definitions;
                filtered = new Codes(map, type);
                filteredCodes.put(type, filtered);
            }
            return filtered;
        }
    }

