    /**
     * Returns the authority for this EPSG database. This authority will contains the database
     * version in the {@linkplain Citation#getEdition edition} attribute, together with the
     * {@linkplain Citation#getEditionDate edition date}.
     */
    @Override
    public synchronized Citation getAuthority() {
        if (authority == null)
            try {
                final String query =
                        adaptSQL(
                                "SELECT VERSION_NUMBER, VERSION_DATE FROM [Version History]"
                                        + " ORDER BY VERSION_DATE DESC");
                final DatabaseMetaData metadata = getConnection().getMetaData();
                try (Statement statement = getConnection().createStatement();
                        ResultSet result = statement.executeQuery(query)) {
                    if (result.next()) {
                        final String version = result.getString(1);
                        final Date date = result.getDate(2);
                        final String engine = metadata.getDatabaseProductName();
                        final CitationImpl c = new CitationImpl(Citations.EPSG);
                        c.getAlternateTitles()
                                .add(
                                        Vocabulary.formatInternational(
                                                VocabularyKeys.DATA_BASE_$3,
                                                "EPSG",
                                                version,
                                                engine));
                        c.setEdition(new SimpleInternationalString(version));
                        c.setEditionDate(date);
                        authority = (Citation) c.unmodifiable();
                        hints.put(
                                Hints.VERSION,
                                new Version(version)); // For getImplementationHints()
                    } else {
                        authority = Citations.EPSG;
                    }
                }
            } catch (SQLException exception) {
                Logging.unexpectedException(
                        LOGGER, AbstractEpsgFactory.class, "getAuthority", exception);
                return Citations.EPSG;
            }
        return authority;
    }

