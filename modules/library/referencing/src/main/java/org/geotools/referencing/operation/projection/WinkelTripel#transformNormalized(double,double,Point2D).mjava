    /**
     * Transforms the specified (<var>&lambda;</var>,<var>&phi;</var>) coordinates (units in
     * radians) and stores the result in {@code ptDst} (linear distance on a unit sphere).
     */
    protected Point2D transformNormalized(double lam, double phi, final Point2D ptDst)
            throws ProjectionException {
        double c, d;
        double x, y;

        if ((d = acos(cos(phi) * cos(c = 0.5 * lam))) != 0) {
            /* basic Aitoff */
            x = 2. * d * cos(phi) * sin(c) * (y = 1. / sin(d));
            y *= d * sin(phi);
        } else {
            x = y = 0;
        }

        if (mode == ProjectionMode.Winkel) {
            x = (x + lam * cosphi1) * 0.5;
            y = (y + phi) * 0.5;
        }

        if (ptDst != null) {
            ptDst.setLocation(x, y);
            return ptDst;
        } else {
            return new Point2D.Double(x, y);
        }
    }

