    /**
     * Tests whether there is a alien vertex in the circumcircle of triangle. When there is, the
     * diagonal of quad made by these triangles changes.
     *
     * @param triangle to be tested
     * @return List of changed triangles
     */
    private List<TINTriangle> delaunayCircleTest(TINTriangle triangle)
            throws TriangulationException {
        List<TINTriangle> changedTriangles = new ArrayList<>();

        Iterator<TINTriangle> j = triangle.getAdjacentTriangles().iterator();
        int ct = 0;

        while (j.hasNext() && (changedTriangles.size() == ct)) {
            TINTriangle adjacent = j.next();

            // The delaunay test
            if (triangle.getCircumCicle().contains(adjacent.p1)
                    || triangle.getCircumCicle().contains(adjacent.p0)
                    || triangle.getCircumCicle().contains(adjacent.p2)) {
                triangles.remove(triangle);
                triangles.remove(adjacent);

                List<TINTriangle> NewTriangles =
                        new ArrayList<>(alternativeTriangles(triangle, adjacent));

                triangles.addAll(NewTriangles);
                changedTriangles = NewTriangles;
            } else if (!triangles.contains(triangle)) {
                triangles.add(triangle);
            }
        }

        return changedTriangles;
    }

