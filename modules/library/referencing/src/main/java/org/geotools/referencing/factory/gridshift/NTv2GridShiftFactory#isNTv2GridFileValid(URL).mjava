    /**
     * Checks if a given resource is a valid NTv2 file without fully loading it.
     * 
     * If file is not valid, the cause is logged at {@link Level#WARNING warning level}.
     * 
     * @param location the NTv2 file absolute path
     * @return true if file has NTv2 format, false otherwise
     */
    protected boolean isNTv2GridFileValid(URL url) {
        RandomAccessFile raf = null;
        InputStream is = null;
        try {

            // Loading as RandomAccessFile doesn't load the full grid
            // in memory, but is a quick method to see if file format
            // is NTv2.
            if (url.getProtocol().equals("file")) {
                File file = new File(url.getFile());

                if (!file.exists() || !file.canRead()) {
                    throw new IOException(Errors.format(ErrorKeys.FILE_DOES_NOT_EXIST_$1, file));
                }

                raf = new RandomAccessFile(file, "r");

                // will throw an exception if not a valid file
                new GridShiftFile().loadGridShiftFile(raf);
            } else {
                InputStream in = url.openConnection().getInputStream();

                // will throw an exception if not a valid file
                new GridShiftFile().loadGridShiftFile(in, false);
            }

            return true; // No exception thrown => valid file.
        } catch (IllegalArgumentException e) {
            // This usually means resource is not a valid NTv2 file.
            // Let exception message describe the cause.
            LOGGER.log(Level.WARNING, e.getLocalizedMessage(), e);
            return false;
        } catch (IOException e) {
            LOGGER.log(Level.WARNING, e.getLocalizedMessage(), e);
            return false;
        } finally {
            try {
                if (raf != null)
                    raf.close();
            } catch (IOException e) {
            }

            try {
                if (is != null)
                    is.close();
            } catch (IOException e) {
            }
        }
    }

