    /**
     * Returns {@code true} if the specified OGC descriptor is compatible with the specified JAI
     * descriptor. Note that the JAI descriptor is allowed to be less strict than the OGC one. This
     * is okay because {@link ImagingParameter} will keep a reference to the stricter OGC
     * descriptor, which can be used for performing a strict check if we wish.
     *
     * @param descriptor The OGC descriptor.
     * @param listDescriptor The JAI descriptor.
     * @param names The array returned by {@code listDescriptor.getParamNames()}, obtained once for
     *     ever by the caller for efficienty.
     * @param types The array returned by {@code listDescriptor.getParamClasses()}, obtained once
     *     for ever by the caller for efficienty.
     * @param enumerated The array returned by {@code listDescriptor.getEnumeratedParameterNames()},
     *     obtained once for ever by the caller for efficienty.
     */
    private static boolean compatible(
            final ParameterDescriptor descriptor,
            final ParameterListDescriptor listDescriptor,
            final String[] names,
            final Class<?>[] types,
            final String[] enumerated) {
        final String name = descriptor.getName().getCode().trim();
        Class<?> type = null;
        if (names != null) {
            for (int i = 0; i < names.length; i++) {
                if (name.equalsIgnoreCase(names[i])) {
                    type = types[i];
                    break;
                }
            }
        }
        if (type == null || !type.isAssignableFrom(descriptor.getValueClass())) {
            return false;
        }
        final Range range = listDescriptor.getParamValueRange(name);
        if (range != null) {
            Comparable c;
            c = descriptor.getMinimumValue();
            if (c != null && !range.contains(c)) {
                return false;
            }
            c = descriptor.getMaximumValue();
            if (c != null && !range.contains(c)) {
                return false;
            }
        }
        if (enumerated != null) {
            for (int i = 0; i < enumerated.length; i++) {
                if (name.equalsIgnoreCase(enumerated[i])) {
                    final EnumeratedParameter[] restrictions;
                    restrictions = listDescriptor.getEnumeratedParameterValues(name);
                    final Set<?> valids = descriptor.getValidValues();
                    if (valids == null || !Arrays.asList(restrictions).containsAll(valids)) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

