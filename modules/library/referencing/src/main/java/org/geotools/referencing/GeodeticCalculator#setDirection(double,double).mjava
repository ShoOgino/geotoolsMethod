    /**
     * Set the azimuth and the distance from the {@linkplain #getStartingGeographicPoint
     * starting point}. The destination point will be updated as a side effect of this call.
     * It will be recomputed the next time {@link #getDestinationGeographicPoint()} is invoked.
     *
     * @param  azimuth The azimuth in decimal degrees
     * @param  distance The orthodromic distance in the same units as the
     *         {@linkplain #getEllipsoid ellipsoid} axis (meters by default)
     * @throws IllegalArgumentException if the azimuth or the distance is out of bounds.
     *
     * @see #getAzimuth
     * @see #getOrthodromicDistance
     */
    public void setDirection(double azimuth, final double distance) throws IllegalArgumentException {
        // Check first in case an exception is raised
        // (in other words, we change all or nothing).
        checkAzimuth(azimuth);
        checkOrthodromicDistance(distance);
        // Check passed. Now performs the changes in this object.
        this.azimuth  = azimuth;
        this.distance = distance;
        destinationValid = false;
        directionValid   = true;
    }

