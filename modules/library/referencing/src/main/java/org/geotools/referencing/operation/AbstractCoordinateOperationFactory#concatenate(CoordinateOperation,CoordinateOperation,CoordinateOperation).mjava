    /**
     * Concatenate three transformation steps. If the first and/or the last operation is an {@link
     * #AXIS_CHANGES}, it will be included as part of the second operation instead of creating an
     * {@link ConcatenatedOperation}. If a concatenated operation is created, it will get an
     * automatically generated name.
     *
     * @param step1 The first step, or {@code null} for the identity operation.
     * @param step2 The second step, or {@code null} for the identity operation.
     * @param step3 The third step, or {@code null} for the identity operation.
     * @return A concatenated operation, or {@code null} if all arguments were null.
     * @throws FactoryException if the operation can't be constructed.
     */
    protected CoordinateOperation concatenate(
            final CoordinateOperation step1,
            final CoordinateOperation step2,
            final CoordinateOperation step3)
            throws FactoryException {
        if (step1 == null) return concatenate(step2, step3);
        if (step2 == null) return concatenate(step1, step3);
        if (step3 == null) return concatenate(step1, step2);
        assert equalsIgnoreMetadata(step1.getTargetCRS(), step2.getSourceCRS()) : step1;
        assert equalsIgnoreMetadata(step2.getTargetCRS(), step3.getSourceCRS()) : step3;

        if (isIdentity(step1)) return concatenate(step2, step3);
        if (isIdentity(step2)) return concatenate(step1, step3);
        if (isIdentity(step3)) return concatenate(step1, step2);
        if (step1.getName() == AXIS_CHANGES) return concatenate(concatenate(step1, step2), step3);
        if (step3.getName() == AXIS_CHANGES) return concatenate(step1, concatenate(step2, step3));
        final CoordinateReferenceSystem sourceCRS = step1.getSourceCRS();
        final CoordinateReferenceSystem targetCRS = step3.getTargetCRS();
        return createConcatenatedOperation(
                getTemporaryName(sourceCRS, targetCRS),
                new CoordinateOperation[] {step1, step2, step3});
    }

