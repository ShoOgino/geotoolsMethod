    /**
     * Adds a point to this envelope. The resulting envelope is the smallest envelope that contains
     * both the original envelope and the specified point. After adding a point, a call to {@link
     * #contains} with the added point as an argument will return {@code true}, except if one of the
     * point's ordinates was {@link Double#NaN} (in which case the corresponding ordinate have been
     * ignored).
     *
     * <p>This method assumes that the specified point uses the same CRS than this envelope. For
     * performance reason, it will no be verified unless J2SE assertions are enabled.
     *
     * @param position The point to add.
     * @throws MismatchedDimensionException if the specified point doesn't have the expected
     *     dimension.
     */
    public void add(final DirectPosition position) throws MismatchedDimensionException {
        ensureNonNull("position", position);
        final int dim = ordinates.length / 2;
        AbstractDirectPosition.ensureDimensionMatch("position", position.getDimension(), dim);
        assert equalsIgnoreMetadata(crs, position.getCoordinateReferenceSystem()) : position;
        for (int i = 0; i < dim; i++) {
            final double value = position.getOrdinate(i);
            if (value < ordinates[i] || Double.isNaN(ordinates[i])) ordinates[i] = value;
            if (value > ordinates[i + dim] || Double.isNaN(ordinates[i + dim]))
                ordinates[i + dim] = value;
        }
        assert isEmpty() || contains(position);
    }

