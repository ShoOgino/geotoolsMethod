    /**
     * Returns all subgroups with the specified name. This method do not create new groups. If the
     * requested group is optional (i.e. <code>
     * {@linkplain ParameterDescriptor#getMinimumOccurs minimumOccurs} == 0</code>) and no value
     * were set, then this method returns an empty set.
     *
     * @param name The case insensitive {@linkplain Identifier#getCode identifier code} of the
     *     parameter group to search for.
     * @return The set of all parameter group for the given identifier code.
     * @throws ParameterNotFoundException if no {@linkplain ParameterDescriptorGroup descriptor} was
     *     found for the given name.
     */
    public List<ParameterValueGroup> groups(String name) throws ParameterNotFoundException {
        ensureNonNull("name", name);
        name = name.trim();
        final List<ParameterValueGroup> groups = new ArrayList<>(Math.min(values.size(), 10));
        for (final GeneralParameterValue value : values) {
            if (value instanceof ParameterValueGroup) {
                if (AbstractIdentifiedObject.nameMatches(value.getDescriptor(), name)) {
                    groups.add((ParameterValueGroup) value);
                }
            }
        }
        /*
         * No groups were found. Check if the group actually exists (i.e. is declared in the
         * descriptor). If it doesn't exists, then an exception is thrown. If it exists (i.e.
         * it is simply an optional group not yet defined), then returns an empty list.
         */
        if (groups.isEmpty()) {
            final GeneralParameterDescriptor check =
                    ((ParameterDescriptorGroup) descriptor).descriptor(name);
            if (!(check instanceof ParameterDescriptorGroup)) {
                throw new ParameterNotFoundException(
                        Errors.format(ErrorKeys.MISSING_PARAMETER_$1, name), name);
            }
        }
        return groups;
    }

