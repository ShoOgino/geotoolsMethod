    /**
     * Returns one of the predefined axis for the given name and direction, or {@code null} if none.
     * This method searchs only in predefined constants like {@link #GEODETIC_LATITUDE}, not in any
     * custom axis instantiated by a public constructor. The name of those constants match ISO 19111
     * names or some names commonly found in <cite>Well Known Text</cite> (WKT) formats.
     *
     * <p>This method first checks if the specified name matches the {@linkplain #getAbbreviation
     * abbreviation} of a predefined axis. The comparaison is case-sensitive (for example the {@link
     * #GEOCENTRIC_X} abbreviation is uppercase {@code "X"}, while the abbreviation for the generic
     * {@link #X} axis is lowercase {@code "x"}).
     *
     * <p>If the specified name doesn't match any abbreviation, then this method compares the name
     * against predefined axis {@linkplain #getName name} in a case-insensitive manner. Examples of
     * valid names are "<cite>Geodetic latitude</cite>" and "<cite>Northing</cite>".
     *
     * <p>The direction argument is optional and can be used in order to resolve ambiguity like
     * {@link #X} and {@link #DISPLAY_X} axis. If this argument is {@code null}, then the first axis
     * with a matching name or abbreviation will be returned.
     *
     * @param name The axis name or abbreviation.
     * @param direction An optional direction, or {@code null}.
     * @return One of the constants declared in this class, or {@code null}.
     * @since 2.4
     */
    public static DefaultCoordinateSystemAxis getPredefined(String name, AxisDirection direction) {
        ensureNonNull("name", name);
        name = name.trim();
        DefaultCoordinateSystemAxis found = null;
        for (int i = 0; i < PREDEFINED_COUNT; i++) {
            final DefaultCoordinateSystemAxis candidate = PREDEFINED[i];
            if (direction != null && !direction.equals(candidate.getDirection())) {
                continue;
            }
            // Reminder: case matter for abbreviation, so 'equalsIgnoreCase' is not allowed.
            if (candidate.abbreviation.equals(name)) {
                return candidate;
            }
            if (found == null && candidate.nameMatches(name)) {
                /*
                 * We need to perform a special check for Geodetic longitude and latitude.
                 * Because of the ALIAS map, the "Geodetic latitude" and "Latitude" names
                 * are considered equivalent, while they are two distinct predefined axis
                 * constants in Geotools. Because Geodetic longitude & latitude constants
                 * are declared first, they have precedence.  So we prevent the selection
                 * of GEODETIC_LATITUDE if the user is likely to ask for LATITUDE.
                 */
                if (candidate == GEODETIC_LONGITUDE || candidate == GEODETIC_LATITUDE) {
                    if (!name.toLowerCase().startsWith("geodetic")) {
                        continue;
                    }
                }
                found = candidate;
            }
        }
        return found;
    }

