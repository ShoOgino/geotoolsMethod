    /**
     * Tests if one math transform is the inverse of the other. This implementation
     * can't detect every case. It just detect the case when {@code tr2} is an
     * instance of {@link AbstractMathTransform.Inverse}.
     *
     * @todo We could make this test more general (just compare with tr2.inverse(),
     *       no matter if it is an instance of AbstractMathTransform.Inverse or not,
     *       and catch the exception if one is thrown). Would it be too expensive to
     *       create inconditionnaly the inverse transform?
     */
    private static boolean areInverse(final MathTransform tr1, final MathTransform tr2) {
        if (tr2 instanceof AbstractMathTransform.Inverse) {
            return tr1.equals(((AbstractMathTransform.Inverse) tr2).inverse());
        }
        return false;
    }

