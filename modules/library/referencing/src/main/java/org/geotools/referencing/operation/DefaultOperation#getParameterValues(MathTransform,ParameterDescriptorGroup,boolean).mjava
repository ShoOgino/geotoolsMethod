    /**
     * Returns the parameter values for the math transform that use the specified descriptor.
     *
     * @param mt The math transform for which parameters are desired.
     * @param descriptor The descriptor to search for.
     * @param required {@code true} if an exception must be thrown if parameters are unknow.
     * @return The parameter values, or null.
     * @throws UnsupportedImplementationException if the math transform implementation do not
     *     provide information about parameters.
     */
    private static ParameterValueGroup getParameterValues(
            MathTransform mt, final ParameterDescriptorGroup descriptor, boolean required) {
        while (mt != null) {
            if (mt instanceof ConcatenatedTransform) {
                final ConcatenatedTransform ct = (ConcatenatedTransform) mt;
                final ParameterValueGroup param1 =
                        getParameterValues(ct.transform1, descriptor, false);
                final ParameterValueGroup param2 =
                        getParameterValues(ct.transform2, descriptor, false);
                if (param1 == null && param2 != null) return param2;
                if (param2 == null && param1 != null) return param1;
                required = true;
            }
            if (mt instanceof AbstractMathTransform) {
                final ParameterValueGroup param = ((AbstractMathTransform) mt).getParameterValues();
                if (param != null) {
                    return param;
                }
            }
            if (mt instanceof PassThroughTransform) {
                mt = ((PassThroughTransform) mt).getSubTransform();
            } else {
                break;
            }
        }
        if (required) {
            throw new UnsupportedImplementationException(mt.getClass());
        }
        return null;
    }

