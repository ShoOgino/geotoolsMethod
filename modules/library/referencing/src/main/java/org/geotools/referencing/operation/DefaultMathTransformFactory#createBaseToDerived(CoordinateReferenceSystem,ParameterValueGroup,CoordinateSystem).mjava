    /**
     * Creates a {@linkplain #createParameterizedTransform parameterized transform} from a base CRS
     * to a derived CS. If the {@code "semi_major"} and {@code "semi_minor"} parameters are not
     * explicitly specified, they will be inferred from the {@linkplain Ellipsoid ellipsoid} and
     * added to {@code parameters}. In addition, this method performs axis switch as needed.
     *
     * <p>The {@linkplain OperationMethod operation method} used can be obtained by a call to {@link
     * #getLastUsedMethod}.
     *
     * @param baseCRS The source coordinate reference system.
     * @param parameters The parameter values for the transform.
     * @param derivedCS the target coordinate system.
     * @return The parameterized transform.
     * @throws NoSuchIdentifierException if there is no transform registered for the method.
     * @throws FactoryException if the object creation failed. This exception is thrown if some
     *     required parameter has not been supplied, or has illegal value.
     */
    @Override
    public MathTransform createBaseToDerived(
            final CoordinateReferenceSystem baseCRS,
            final ParameterValueGroup parameters,
            final CoordinateSystem derivedCS)
            throws NoSuchIdentifierException, FactoryException {
        /*
         * If the user's parameter do not contains semi-major and semi-minor axis length, infers
         * them from the ellipsoid. This is a convenience service since the user often omit those
         * parameters (because they duplicate datum information).
         */
        final Ellipsoid ellipsoid = CRSUtilities.getHeadGeoEllipsoid(baseCRS);
        if (ellipsoid != null) {
            final Unit<Length> axisUnit = ellipsoid.getAxisUnit();
            Parameters.ensureSet(
                    parameters, "semi_major", ellipsoid.getSemiMajorAxis(), axisUnit, false);
            Parameters.ensureSet(
                    parameters, "semi_minor", ellipsoid.getSemiMinorAxis(), axisUnit, false);
        }
        MathTransform baseToDerived = createParameterizedTransform(parameters);
        final OperationMethod method = lastMethod.get();
        baseToDerived = createBaseToDerived(baseCRS, baseToDerived, derivedCS);
        lastMethod.set(method);
        return baseToDerived;
    }

