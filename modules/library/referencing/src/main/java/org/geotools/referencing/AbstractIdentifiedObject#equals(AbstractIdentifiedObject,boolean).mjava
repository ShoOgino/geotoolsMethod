    /**
     * Compares this object with the specified object for equality.
     *
     * If {@code compareMetadata} is {@code true}, then all available properties are
     * compared including {@linkplain #getName() name}, {@linkplain #getRemarks remarks},
     * {@linkplain #getIdentifiers identifiers code}, etc.
     *
     * If {@code compareMetadata} is {@code false}, then this method compare
     * only the properties needed for computing transformations. In other words,
     * {@code sourceCS.equals(targetCS, false)} returns {@code true} only if
     * the transformation from {@code sourceCS} to {@code targetCS} is
     * the identity transform, no matter what {@link #getName()} saids.
     * <P>
     * Some subclasses (especially {@link org.geotools.referencing.datum.AbstractDatum}
     * and {@link org.geotools.parameter.AbstractParameterDescriptor}) will test for the
     * {@linkplain #getName() name}, since objects with different name have completly
     * different meaning. For example nothing differentiate the {@code "semi_major"} and
     * {@code "semi_minor"} parameters except the name. The name comparaison may be loose
     * however, i.e. we may accept a name matching an alias.
     *
     * @param  object The object to compare to {@code this}.
     * @param  compareMetadata {@code true} for performing a strict comparaison, or
     *         {@code false} for comparing only properties relevant to transformations.
     * @return {@code true} if both objects are equal.
     */
    public boolean equals(final AbstractIdentifiedObject object, final boolean compareMetadata) {
        if (object!=null && object.getClass().equals(getClass())) {
            if (!compareMetadata) {
                return true;
            }
            return Utilities.equals(name,        object.name       ) &&
                   Utilities.equals(alias,       object.alias      ) &&
                   Utilities.equals(identifiers, object.identifiers) &&
                   Utilities.equals(remarks,     object.remarks    );
        }
        return false;
    }

