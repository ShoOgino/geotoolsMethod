    /**
     * Creates a coordinate operation from a math transform. If the specified math transform is
     * already a coordinate operation, and if source and target CRS match, then {@code transform} is
     * returned with no change. Otherwise, a new coordinate operation is created.
     *
     * @param properties The properties to give to the operation.
     * @param sourceCRS The source coordinate reference system.
     * @param targetCRS The destination coordinate reference system.
     * @param transform The math transform.
     * @param method The operation method, or {@code null}.
     * @param type The required super-class (e.g. <code>{@linkplain Transformation}.class</code>).
     * @return A coordinate operation using the specified math transform.
     * @throws FactoryException if the operation can't be constructed.
     */
    protected CoordinateOperation createFromMathTransform(
            final Map<String, ?> properties,
            final CoordinateReferenceSystem sourceCRS,
            final CoordinateReferenceSystem targetCRS,
            final MathTransform transform,
            final OperationMethod method,
            final Class<? extends CoordinateOperation> type)
            throws FactoryException {
        CoordinateOperation operation;
        if (transform instanceof CoordinateOperation) {
            operation = (CoordinateOperation) transform;
            if (Utilities.equals(operation.getSourceCRS(), sourceCRS)
                    && Utilities.equals(operation.getTargetCRS(), targetCRS)
                    && Utilities.equals(operation.getMathTransform(), transform)) {
                if (operation instanceof Operation) {
                    if (Utilities.equals(((Operation) operation).getMethod(), method)) {
                        return operation;
                    }
                } else {
                    return operation;
                }
            }
        }
        operation =
                DefaultOperation.create(properties, sourceCRS, targetCRS, transform, method, type);
        operation = pool.unique(operation);
        return operation;
    }

