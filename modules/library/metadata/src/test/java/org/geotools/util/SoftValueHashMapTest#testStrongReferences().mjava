    /**
     * Tests the {@link SoftValueHashMap} using strong references. The tested
     * {@link SoftValueHashMap} should behave like a standard {@link Map} object.
     */
    @Test
    public void testStrongReferences() {
        final Random random = getRandom();
        for (int pass=0; pass<4; pass++) {
            // make sure we can keep as many strong references as the sample, since there is no guarantee
            // the distribution of random.nextBoolean() is uniform in the short term 
            final SoftValueHashMap<Integer,Integer> softMap = new SoftValueHashMap<Integer,Integer>(SAMPLE_SIZE);
            final HashMap<Integer,Integer>        strongMap = new HashMap<Integer,Integer>();
            for (int i=0; i<SAMPLE_SIZE; i++) {
                Integer key   = random.nextInt(SAMPLE_SIZE);
                final Integer value = random.nextInt(SAMPLE_SIZE);
                if (random.nextBoolean()) // test from time to time with the null key
                    key = null;
                
                assertEquals("containsKey:",   strongMap.containsKey(key),
                                                 softMap.containsKey(key));
                assertEquals("containsValue:", strongMap.containsValue(value),
                                                 softMap.containsValue(value));
                assertSame  ("get:",           strongMap.get(key),
                                                 softMap.get(key));
                assertEquals("equals:", strongMap, softMap);
                if (random.nextBoolean()) {
                    // Test addition.
                    assertSame("put:", strongMap.put(key, value),
                                         softMap.put(key, value));
                } else {
                    // Test remove
                    assertSame("remove:", strongMap.remove(key),
                                            softMap.remove(key));
                }
                
                assertEquals("equals:", strongMap, softMap);
            }          
        }
    }

