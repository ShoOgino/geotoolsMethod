    /**
     * Tests the {@link SoftValueHashMap} using soft references. In this test, we have to keep in
     * mind than some elements in {@code softMap} may disappear at any time.
     */
    @Test
    public void testSoftReferences() throws InterruptedException {
        final Random random = getRandom();
        final SoftValueHashMap<UUID, UUID> softMap = new SoftValueHashMap<>();
        final HashMap<UUID, UUID> strongMap = new HashMap<>();
        for (int pass = 0; pass < 2; pass++) {
            int count = 0;
            softMap.clear();
            strongMap.clear();
            for (int i = 0; i < SAMPLE_SIZE; i++) {
                // We really want new instances below.
                UUID key = UUID.randomUUID();
                final UUID value = UUID.randomUUID();
                if (random.nextBoolean()) // test from time to time with the null key
                key = null;

                if (random.nextBoolean()) {
                    /*
                     * Test addition.
                     */
                    final UUID softPrevious = softMap.put(key, value);
                    final UUID strongPrevious = strongMap.put(key, value);
                    if (softPrevious == null) {
                        // If the element was not in the SoftValueHashMap (i.e. if the garbage
                        // collector has cleared it), then it must not been in HashMap neither
                        // (otherwise GC should not have cleared it).
                        assertNull("put:", strongPrevious);
                        count++; // Count only the new values.
                    } else {
                        assertNotSame(value, softPrevious);
                    }
                    if (strongPrevious != null) {
                        // Note: If 'strongPrevious==null', 'softPrevious' may not
                        //       be null if GC has not collected its entry yet.
                        assertSame("put:", strongPrevious, softPrevious);
                    }
                } else {
                    /*
                     * Test remove
                     */
                    final UUID softPrevious = softMap.get(key);
                    final UUID strongPrevious = strongMap.remove(key);
                    if (strongPrevious != null) {
                        assertSame("remove:", strongPrevious, softPrevious);
                    }
                }
                assertTrue("containsAll:", softMap.entrySet().containsAll(strongMap.entrySet()));
            }

            // Do our best to lets GC finish its work.
            for (int i = 0; i < 20; i++) {
                Runtime.getRuntime().gc();
                Runtime.getRuntime().runFinalization();
            }
            assertTrue(softMap.isValid());
            assertTrue("size:", softMap.size() <= count);
            /*
             * Make sure that all values are of the correct type. More specifically, we
             * want to make sure that we didn't forget to convert some Reference object.
             */
            for (Object value : softMap.values()) {
                assertTrue(value instanceof UUID);
                assertNotNull(value);
            }
        }
    }

