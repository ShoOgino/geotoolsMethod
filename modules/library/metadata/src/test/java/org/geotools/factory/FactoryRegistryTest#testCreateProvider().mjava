    /**
     * Tests the {@link FactoryCreator#getProvider} method.
     * This test tries again the cases that was expected to throws an exception in
     * {@link #testGetProvider}. But now, those cases are expected to creates automatically
     * new factory instances instead of throwing an exception.
     */
    @Test
    public void testCreateProvider() {
        final Hints.Key    key      = DummyFactory.DUMMY_FACTORY;
        final DummyFactory factory1 = new DummyFactory.Example1();
        final DummyFactory factory2 = new DummyFactory.Example2();
        final DummyFactory factory3 = new DummyFactory.Example3();
        final FactoryRegistry registry = getRegistry(true, factory1, factory2, factory3);
        Hints hints;
        DummyFactory factory;
        /*
         * Same tests than above (at least some of them).
         * See comments in 'testGetProvider()' for explanation.
         */
        hints   = new Hints(Hints.KEY_INTERPOLATION, Hints.VALUE_INTERPOLATION_BILINEAR);
        factory = registry.getServiceProvider(DummyFactory.class, null, hints, key);
        assertSame("First factory matches; it should be selected. ", factory1, factory);

        hints   = new Hints(DummyFactory.DUMMY_FACTORY, DummyFactory.Example2.class);
        factory = registry.getServiceProvider(DummyFactory.class, null, hints, key);
        assertSame("Factory of class #2 were requested. ", factory2, factory);
        /*
         * The following case was throwing an exception in testGetProvider(). It should fails again
         * here, but for a different reason. FactoryCreator is unable to creates automatically a new
         * factory instance, since we gave no implementation hint and no registered factory have a
         * constructor expecting a Hints argument.
         */
        hints = new Hints(Hints.KEY_INTERPOLATION, Hints.VALUE_INTERPOLATION_BICUBIC);
        try {
            factory = registry.getServiceProvider(DummyFactory.class, null, hints, key);
            fail("Found or created factory "+factory+", while it should not have been allowed.");
        } catch (FactoryNotFoundException exception) {
            // This is the expected exception. Continue...
        }
        /*
         * Register a DummyFactory with a constructor expecting a Hints argument, and try again
         * with the same hints. Now it should creates a new factory instance, because we are using
         * FactoryCreator instead of FactoryRegistry and an appropriate constructor is found.
         * Note that an AssertionFailedError should be thrown if the no-argument constructor of
         * Example5 is invoked, since the constructor with a Hints argument should have priority.
         */
        final DummyFactory factory5 = new DummyFactory.Example5(null);
        registry.registerServiceProvider(factory5);
        assertTrue(registry.setOrdering(DummyFactory.class, factory1, factory5));
        factory = registry.getServiceProvider(DummyFactory.class, null, hints, key);
        assertSame   ("An instance of Factory #5 should have been created.", factory5.getClass(), factory.getClass());
        assertNotSame("A NEW instance of Factory #5 should have been created", factory5, factory);
        /*
         * Tries again with a class explicitly specified as an implementation hint.
         * It doesn't matter if this class is registered or not.
         */
        hints.put(DummyFactory.DUMMY_FACTORY, DummyFactory.Example4.class);
        factory = registry.getServiceProvider(DummyFactory.class, null, hints, key);
        assertEquals("An instance of Factory #4 should have been created.", DummyFactory.Example4.class, factory.getClass());
    }

