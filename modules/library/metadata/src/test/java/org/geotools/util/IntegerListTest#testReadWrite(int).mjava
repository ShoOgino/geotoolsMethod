    /**
     * Writes values and read them again for making sure they are the expected ones.
     *
     * @param maximalValue The maximal value allowed.
     */
    private void testReadWrite(final int maximalValue) {
        final int length = 400;
        // Use half the lenght as initial capacity in order to test dynamic resizing.
        list = new IntegerList(length / 2, maximalValue);
        assertTrue(list.maximalValue() >= maximalValue);
        final List<Integer> copy = new ArrayList<>();
        for (int i = 0; i < length; i++) {
            assertEquals(i, list.size());
            final Integer value = nextInt(maximalValue);
            assertTrue(copy.add(value));
            assertTrue(list.add(value));
        }
        assertEquals(copy, list);
        assertEquals(copy.hashCode(), list.hashCode());
        for (int i = 0; i < length; i += 10) {
            final Integer value = nextInt(maximalValue);
            final Integer old = copy.set(i, value);
            assertNotNull(old);
            assertEquals(old, list.set(i, value));
        }
        for (int i = 0; i < length; i++) {
            assertEquals(String.valueOf(i), copy.get(i), list.get(i));
        }
        assertEquals(copy, list);
        assertEquals(copy.hashCode(), list.hashCode());
    }

