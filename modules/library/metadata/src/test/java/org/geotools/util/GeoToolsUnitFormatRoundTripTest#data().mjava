    @Parameterized.Parameters(name = "{index}: {0}")
    public static Collection<Object[]> data() {
        return Arrays.asList(
                new Object[][] {
                    {GRAM.divide(1_000_000)},
                    {GRAM.divide(1_000_000).divide(METRE.pow(3))},
                    {GRAM.divide(1_000_000_000).divide(METRE.pow(3))},
                    {GRAM.divide(1_000_000).divide(METRE.pow(3))},
                    {METRE.pow(2)},
                    {METRE.pow(3)},
                    {SI.MOLE.divide(1_000_000)},
                    {GRAM.multiply(METRE.pow(-3))},
                    {GRAM.divide(1_000)},
                    {SI.MOLE.multiply(METRE.pow(-2))},
                    {SI.PASCAL},
                    {AbstractUnit.ONE},
                    {METRE.divide(SI.SECOND)},
                    {WATT.multiply(METRE.pow(-2))},
                    {SI.KILOGRAM.multiply(METRE.pow(-2).multiply(SI.SECOND.pow(-1)))},
                    {
                        WATT.divide(1000)
                                .multiply(METRE.pow(-2))
                                .multiply(SI.STERADIAN.pow(-1))
                                .multiply(METRE.divide(1_000_000_000).pow(-1))
                    },
                    {
                        WATT.divide(1000)
                                .multiply(METRE.pow(-2))
                                .multiply(METRE.divide(1_000_000_000).pow(-1))
                    },
                    {MOLE.multiply(METRE.divide(100).pow(-3))},
                    {SI.PASCAL},
                    {AbstractUnit.ONE.divide(100)},
                    {METRE},
                    {NonSI.DEGREE_ANGLE},
                    {METRE.pow(2).divide(METRE.pow(2))},
                    {METRE.pow(-1).multiply(SECOND)},
                    {KILOGRAM.multiply(METRE.pow(-3))},
                    {SI.KELVIN.multiply(METRE.pow(-1))},
                    {MOLE.multiply(KILOGRAM.pow(-1))},
                    {JOULE.multiply(KILOGRAM.pow(-1))},
                    {KILOGRAM.multiply(METRE.pow(-2).multiply(SECOND.pow(-1)))},
                    {JOULE.multiply(METRE.pow(-2))},
                    {METRE.pow(2).multiply(SECOND.pow(-1))},
                    {KILOGRAM.multiply(METRE.pow(-2))},
                    {MOLE.multiply(METRE.pow(-2))},
                    {SECOND.pow(-1).multiply(METRE.pow(-3))},
                    {GRAM.multiply(KILOGRAM.pow(-1))},
                    {PASCAL.multiply(METRE)},
                    {WATT.multiply(METRE.pow(-2))},
                    {
                        MOLE.multiply(METRE.pow(-2))
                                .multiply(SECOND.pow(-1))
                                .multiply(METRE.pow(-1))
                                .multiply(SI.STERADIAN.pow(-1))
                    },
                    {
                        KELVIN.multiply(METRE.pow(2))
                                .multiply(KILOGRAM.pow(-1))
                                .multiply(SECOND.pow(-1))
                    },
                    {SI.MOLE.divide(1_000_000).multiply(SI.METRE.pow(-2)).multiply(466.2)}
                });
    }

