    /**
     * Computes the plane's coefficients from a set of points. This method use
     * a linear regression in the least-square sense. Result is undertermined
     * if all points are colinear.
     *
     * This method allows points to be provided as a series of X,Y and Z arrays:
     * <code><pre> double[] X = new double[]{ a.getX(), b.getX(), c.getX() );
     * double[] Y = new double[]{ a.getX(), b.getX(), c.getX() );
     * double[] Z = new double[]{ a.getZ(), b.getZ(), c.getZ() );
     * plane.setPlane( X, Y, Z  );</pre><code>
     *
     * @param x vector of <var>x</var> coordinates
     * @param y vector of <var>y</var> coordinates
     * @param z vector of <var>z</var> values
     *
     * @throws MismatchedSizeException if <var>x</var>, <var>y</var> and <var>z</var>
     *         don't have the same length.
     */
    public void setPlane(final double[] x, final double[] y, final double[] z)
            throws IllegalArgumentException {
        final int N = x.length;
        if (N != y.length || N != z.length) {
            throw new IllegalArgumentException(
                    "Vector x (length "
                            + N
                            + "), Vector y (length:"
                            + y.length
                            + ") and Vector (length:"
                            + z.length
                            + ") are not the same length");
        }
        double sum_x = 0;
        double sum_y = 0;
        double sum_z = 0;
        double sum_xx = 0;
        double sum_yy = 0;
        double sum_xy = 0;
        double sum_zx = 0;
        double sum_zy = 0;
        for (int i = 0; i < N; i++) {
            final double xi = x[i];
            final double yi = y[i];
            final double zi = z[i];
            sum_x += xi;
            sum_y += yi;
            sum_z += zi;
            sum_xx += xi * xi;
            sum_yy += yi * yi;
            sum_xy += xi * yi;
            sum_zx += zi * xi;
            sum_zy += zi * yi;
        }
        /*
         *    ( sum_zx - sum_z*sum_x )  =  cx*(sum_xx - sum_x*sum_x) + cy*(sum_xy - sum_x*sum_y)
         *    ( sum_zy - sum_z*sum_y )  =  cx*(sum_xy - sum_x*sum_y) + cy*(sum_yy - sum_y*sum_y)
         */
        final double ZX = sum_zx - sum_z * sum_x / N;
        final double ZY = sum_zy - sum_z * sum_y / N;
        final double XX = sum_xx - sum_x * sum_x / N;
        final double XY = sum_xy - sum_x * sum_y / N;
        final double YY = sum_yy - sum_y * sum_y / N;
        final double den = (XY * XY - XX * YY);

        cy = (ZX * XY - ZY * XX) / den;
        cx = (ZY * XY - ZX * YY) / den;
        c = (sum_z - (cx * sum_x + cy * sum_y)) / N;
    }

