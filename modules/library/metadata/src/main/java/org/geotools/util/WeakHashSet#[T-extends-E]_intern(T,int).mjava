    /**
     * Returns an object equals to {@code obj} if such an object already exist in this {@code
     * WeakHashSet}. Otherwise, add {@code obj} to this {@code WeakHashSet}. This method is
     * equivalents to the following code:
     *
     * <blockquote>
     *
     * <pre>
     * &nbsp;  if (object!=null) {
     * &nbsp;      final Object current = get(object);
     * &nbsp;      if (current != null) {
     * &nbsp;          return current;
     * &nbsp;      } else {
     * &nbsp;          add(object);
     * &nbsp;      }
     * &nbsp;  }
     * &nbsp;  return object;
     * </pre>
     *
     * </blockquote>
     */
    @SuppressWarnings("SelfEquals")
    @SuppressFBWarnings("SA_LOCAL_SELF_COMPARISON")
    final <T extends E> T intern(final T obj, final int operation) {
        assert Thread.holdsLock(this);
        assert WeakCollectionCleaner.DEFAULT.isAlive();
        assert valid() : count;
        if (obj != null) {
            assert obj.equals(obj) : obj;
            /*
             * Check if {@code obj} is already contained in this
             * {@code WeakHashSet}. If yes, returns the element.
             */
            final int hash = obj.hashCode() & 0x7FFFFFFF;
            int index = hash % table.length;
            for (Entry e = table[index]; e != null; e = e.next) {
                final E candidate = e.get();
                if (candidate != null) {
                    if (candidate.equals(obj)) {
                        if (operation == REMOVE) {
                            e.clear();
                        }
                        assert candidate.getClass().equals(obj.getClass()) : candidate;
                        @SuppressWarnings("unchecked")
                        final T result = (T) candidate;
                        return result;
                    }
                }
                // Do not remove the null element; lets ReferenceQueue do its job
                // (it was a bug to remove element here as an "optimization")
            }
            if (operation >= ADD) {
                /*
                 * Check if the table need to be rehashed,
                 * and add {@code obj} to the table.
                 */
                if (count >= threshold) {
                    rehash(true);
                    index = hash % table.length;
                }
                table[index] = new Entry(obj, table[index], index);
                count++;
            }
        }
        assert valid();
        return (operation == INTERN) ? obj : null;
    }

