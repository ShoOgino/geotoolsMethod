    /**
     * Compares this factory with the specified object for equality. The default implementation
     * returns {@code true} if and only if:
     *
     * <p>
     *
     * <ul>
     *   <li>Both objects are of the exact same class (a <cite>is instance of</cite> relationship is
     *       not enough).
     *   <li>{@linkplain #getImplementationHints implementation hints} are {@linkplain Map#equals
     *       equal}.
     * </ul>
     *
     * <p>The requirement for the <cite>exact same class</cite> is needed for consistency with the
     * {@linkplain FactoryRegistry factory registry} working, since at most one instance of a given
     * class {@linkplain FactoryRegistry#getFactoryByClass) is allowed} in a registry.
     *
     * @param object The object to compare.
     * @return {@code true} if the given object is equals to this factory.
     * @since 2.3
     */
    @Override
    public final boolean equals(final Object object) {
        if (object == this) {
            return true;
        }
        if (object != null && object.getClass().equals(getClass())) {
            final AbstractFactory that = (AbstractFactory) object;
            if (this.priority == that.priority) {
                final Set<FactoryComparator> comparators = new HashSet<FactoryComparator>();
                return new FactoryComparator(this, that).compare(comparators);
            }
        }
        return false;
    }

