    /**
     * Creates a new list with the given initial size. The value of all elements are initialized to
     * 0.
     *
     * @param initialCapacity The initial capacity.
     * @param maximalValue The maximal value to be allowed, inclusive.
     * @param fill If {@code true}, the initial {@linkplain #size} is set to the initial capacity
     *     with all values set to 0.
     */
    public IntegerList(final int initialCapacity, int maximalValue, final boolean fill) {
        if (initialCapacity <= 0) {
            throw new IllegalArgumentException(
                    Errors.format(ErrorKeys.NOT_GREATER_THAN_ZERO_$1, initialCapacity));
        }
        if (maximalValue <= 0) {
            throw new IllegalArgumentException(
                    Errors.format(ErrorKeys.NOT_GREATER_THAN_ZERO_$1, maximalValue));
        }
        int bitCount = 0;
        do {
            bitCount++;
            maximalValue >>>= 1;
        } while (maximalValue != 0);
        this.bitCount = bitCount;
        mask = (1 << bitCount) - 1;
        values = new long[length(initialCapacity)];
        if (fill) {
            size = initialCapacity;
        }
    }

