        /** Returns the previous element in the list. */
        @Override
        public V previous() {
            while (!valuesIter.hasPrevious() && base != 0) {
                /*
                 * Gets the key from the previous entry, and recreates a new entries iterator
                 * starting from this key (the assert statement ensure that). It should be the
                 * only place where this iterator needs to be recreated. Hopefully it should not
                 * happen often.
                 */
                key = map.headMap(key).lastKey();
                entriesIter = map.tailMap(key).entrySet().iterator();
                final Map.Entry<K, List<V>> entry = entriesIter.next();
                assert key == entry.getKey() : key;
                /*
                 * Updates the values list, iterator and base index. It should now reflect the
                 * content of the list in the previous entry.
                 */
                values = entry.getValue();
                final int size = values.size();
                valuesIter = values.listIterator(Math.max(size - 1, 0));
                base -= size; // Must be after 'values' new assignement.
                assert base >= 0 : base;
            }
            return valuesIter.previous();
        }

