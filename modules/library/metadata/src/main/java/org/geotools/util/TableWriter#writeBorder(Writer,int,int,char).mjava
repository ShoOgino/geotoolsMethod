    /**
     * Writes a border or a corner to the specified stream.
     *
     * @param out The destination stream.
     * @param horizontalBorder -1 for left border, +1 for right border, 0 for center.
     * @param verticalBorder -1 for top border, +1 for bottom border, 0 for center.
     * @param horizontalChar Character to use for horizontal line.
     * @throws IOException if the writting operation failed.
     */
    private void writeBorder(
            final Writer out,
            final int horizontalBorder,
            final int verticalBorder,
            final char horizontalChar)
            throws IOException {
        /*
         * Obtient les ensembles de caractères qui
         * conviennent pour la ligne horizontale.
         */
        int boxCount = 0;
        final char[][] box = new char[BOX.length][];
        for (char[] chars : BOX) {
            if (chars[9] == horizontalChar) {
                box[boxCount++] = chars;
            }
        }
        /*
         * Obtient une chaine contenant les lignes verticales à
         * dessiner à gauche, à droite ou au centre de la table.
         */
        final String border;
        switch (horizontalBorder) {
            case -1:
                border = leftBorder;
                break;
            case +1:
                border = rightBorder;
                break;
            case 0:
                border = separator;
                break;
            default:
                throw new IllegalArgumentException(String.valueOf(horizontalBorder));
        }
        if (verticalBorder < -1 || verticalBorder > +1) {
            throw new IllegalArgumentException(String.valueOf(verticalBorder));
        }
        /*
         * Remplace les espaces par la ligne horizontale,
         * et les lignes verticales par une intersection.
         */
        final int index = (horizontalBorder + 1) + (verticalBorder + 1) * 3;
        final int borderLength = border.length();
        for (int i = 0; i < borderLength; i++) {
            char c = border.charAt(i);
            if (Character.isSpaceChar(c)) {
                c = horizontalChar;
            } else {
                for (int j = 0; j < boxCount; j++) {
                    if (box[j][10] == c) {
                        c = box[j][index];
                        break;
                    }
                }
            }
            out.write(c);
        }
    }

