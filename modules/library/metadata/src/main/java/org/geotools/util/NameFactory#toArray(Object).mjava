    /**
     * Returns the specified name in an array. The {@code value} may be either a {@link String},
     * {@code String[]}, {@link GenericName} or {@code GenericName[]}. This method is used in
     * {@link org.geotools.referencing.AbstractIdentifiedObject} constructors.
     *
     * @param  value The object to cast into an array of generic names.
     * @return The generic names.
     * @throws ClassCastException if {@code value} can't be cast.
     */
    public static GenericName[] toArray(final Object value) throws ClassCastException {
        if (value instanceof GenericName[]) {
            return (GenericName[]) value;
        }
        if (value instanceof GenericName) {
            return new GenericName[] {
                (GenericName) value
            };
        }
        if (value instanceof CharSequence) {
            return new GenericName[] {
                create(value.toString())
            };
        }
        if (value instanceof CharSequence[]) {
            final CharSequence[] values = (CharSequence[]) value;
            final GenericName[] names = new GenericName[values.length];
            for (int i=0; i<values.length; i++) {
                final CharSequence v = values[i];
                names[i] = (v instanceof GenericName) ? (GenericName)v : create(v.toString());
            }
            return names;
        }
        if (value instanceof Identifier[]) {
            final Identifier[] values = (Identifier[]) value;
            final GenericName[] names = new GenericName[values.length];
            for( int i=0; i<values.length; i++) {
                final Identifier v = values[i];
                names[i] = (v instanceof GenericName) ? (GenericName)v : create(v.getCode());
            }
            return names;
        }
        // TODO: localize
        throw new ClassCastException("Cannot convert " + Classes.getShortClassName(value) + " to GenericName[]");
    }

