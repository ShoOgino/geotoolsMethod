    /**
     * Implementation of {@link #intersect(Range)} to be invoked directly by subclasses.
     * "NC" stands for "No Cast" - this method do not try to cast the value to a compatible type.
     */
    final Range<? extends T> intersectNC(final Range<? extends T> range)
            throws IllegalArgumentException
    {
        final Range<? extends T> intersect, min, max;
        min = compareMinTo(range.minValue, range.isMinIncluded ? 0 : +1) < 0 ? range : this;
        max = compareMaxTo(range.maxValue, range.isMaxIncluded ? 0 : -1) > 0 ? range : this;
        if (min == max) {
            intersect = min;
        } else {
            intersect = create(min.minValue, min.isMinIncluded, max.maxValue, max.isMaxIncluded);
        }
        assert intersect.isEmpty() == !intersects(range) : intersect;
        return intersect;
    }

