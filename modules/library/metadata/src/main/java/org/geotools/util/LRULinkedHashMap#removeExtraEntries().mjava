    /**
     * If there is more entries than the maximum amount, remove extra entries.
     *
     * <p><b>Note:</b> Invoking {@code removeExtraEntries()} after adding all entries in the {@link
     * #LRULinkedHashMap(Map,int)} constructor is less efficient than just iterating over the {@link
     * #maximumSize} first entries at construction time, but super-class constructor is more
     * efficient for maps with less than {@code maximumSize}. We assume that this is the most
     * typical case.
     */
    private void removeExtraEntries() {
        if (size() > maximumSize) {
            final Iterator<Map.Entry<K, V>> it = entrySet().iterator();
            for (int c = 0; c < maximumSize; c++) {
                it.next();
            }
            while (it.hasNext()) {
                it.remove();
            }
        }
    }

