    /**
     * Removes a single instance of the specified element from this set,
     * if it is present. If this {@code DisjointSet} has a trash set,
     * the removed element will be added to the trash set.
     *
     * @param  element Element to be removed from this set.
     * @return {@code true} if the set changed as a result of the call.
     */
    @Override
    public boolean remove(final Object element) {
        synchronized (map) {
            if (map.get(element) != this) {
                return false; // The element do not belongs to this set.
            } else if (trash != null) {
                // Do not remove. Move it to the "trash" set.
                @SuppressWarnings("unchecked")
                final DisjointSet<E> old = map.put((E) element, trash);
                return old != trash;
            } else {
                // Completly remove the element from the set.
                return map.remove(element) != null;
            }
        }
    }

