    /**
     * Returns the list of unprocessed arguments, which should not begin by the specified prefix.
     * This method invokes <code>{@linkplain #getRemainingArguments(int) getRemainingArguments}(max)
     * </code> and verifies that none of the remaining arguments start with {@code forbiddenPrefix}.
     * The forbidden prefix is usually {@code '-'}, the character used for options as in "{@code
     * -locale}", <cite>etc.</cite>
     *
     * @param max Maximum remaining arguments autorized.
     * @param forbiddenPrefix The forbidden prefix, usually {@code '-'}.
     * @return An array of remaining arguments. Will never be longer than {@code max}.
     * @since 2.4
     */
    public String[] getRemainingArguments(final int max, final char forbiddenPrefix) {
        final String[] arguments = getRemainingArguments(max);
        for (String s : arguments) {
            String argument = s;
            if (argument != null) {
                argument = argument.trim();
                if (argument.length() != 0) {
                    if (argument.charAt(0) == forbiddenPrefix) {
                        illegalArgument(
                                new IllegalArgumentException(
                                        Errors.getResources(locale)
                                                .getString(
                                                        ErrorKeys.UNKNOW_PARAMETER_$1, argument)));
                    }
                }
            }
        }
        return arguments;
    }

