    /**
     * Parses the specified string. If the string can't be parsed, then this method returns {@code
     * null}. If it can be parsed at least partially and is of the kind specified at construction
     * time, then it is returned. If the string has not been fully parsed, then a {@linkplain
     * LogRecord log record} is prepared and logged.
     *
     * @param text The text to parse, or {@code null}.
     * @return The parsed object, or {@code null} if {@code text} was null or can't be parsed.
     */
    public T parse(String text) {
        if (text == null || (text = text.trim()).length() == 0) {
            return null;
        }
        final ParsePosition position = new ParsePosition(0);
        final Object value = parseObject(text, position);
        int index = position.getIndex();
        final int error = position.getErrorIndex();
        if (error >= 0 && error < index) {
            index = error;
        }
        if (index < text.length()) {
            doLogWarning(formatUnparsable(text, 0, index, getWarningLocale(), level));
        } else if (value != null && !type.isInstance(value)) {
            doLogWarning(
                    Errors.getResources(getWarningLocale())
                            .getLogRecord(
                                    level, ErrorKeys.ILLEGAL_CLASS_$2, value.getClass(), type));
            return null;
        }
        return type.cast(value);
    }

