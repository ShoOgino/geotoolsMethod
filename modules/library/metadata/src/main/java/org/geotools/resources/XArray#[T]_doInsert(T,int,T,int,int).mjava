    /**
     * Inserts a table slice into another table. The {@code src} table will be entirely or partially
     * inserted into the {@code dst} table.
     *
     * @param src Table to insert into {@code dst}.
     * @param src_pos Index of the first data item of {@code src} to insert into {@code dst}.
     * @param dst Table in which to insert {@code src} data.
     * @param dst_pos {@code dst} index in which to insert {@code src} data. All elements of {@code
     *     dst} whose index is equal to or greater than {@code dst_pos} will be moved forward.
     * @param length Number of {@code src} data items to insert.
     * @return Table which contains the combination of {@code src} and {@code dst}. This method can
     *     directly return {@code dst}, but never {@code src}. It most often returns a newly created
     *     table.
     */
    // Returns type should be T, but it doesn't seem to work with Java 5.
    // Revisit when we will be allowed to compile for Java 6 (it does work for the later).
    private static <T> Object doInsert(
            final T src, final int src_pos, final T dst, final int dst_pos, final int length) {
        if (length == 0) {
            return dst;
        }
        final int dstLength = Array.getLength(dst);
        @SuppressWarnings("unchecked")
        final T newArray =
                (T) Array.newInstance(dst.getClass().getComponentType(), dstLength + length);
        System.arraycopy(dst, 0, newArray, 0, dst_pos);
        System.arraycopy(src, src_pos, newArray, dst_pos, length);
        System.arraycopy(dst, dst_pos, newArray, dst_pos + length, dstLength - dst_pos);
        return newArray;
    }

