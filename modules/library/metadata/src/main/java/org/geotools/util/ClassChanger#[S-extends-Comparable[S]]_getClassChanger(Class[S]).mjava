    /**
     * Returns the class changer for the specified classe.
     *
     * @param source The class.
     * @return The class changer for the specified class.
     * @throws ClassNotFoundException if {@code source} is not a registered class.
     */
    private static synchronized <S extends Comparable<S>> ClassChanger<S, ?> getClassChanger(
            final Class<S> source) throws ClassNotFoundException {
        for (int i = 0; i < changers.length; i++) {
            final ClassChanger<?, ?> candidate = changers[i];
            if (candidate.source.isAssignableFrom(source)) {
                @SuppressWarnings("unchecked")
                final ClassChanger<S, ?> c = (ClassChanger<S, ?>) candidate;
                return c;
            }
        }
        throw new ClassNotFoundException(source.getName());
    }

