    /**
     * Change a primitive class to its wrapper (e.g. {@code double} to {@link Double}). If the
     * specified class is not a primitive type, then it is returned unchanged.
     *
     * @param type The primitive type (may be {@code null}).
     * @return The type as a wrapper.
     * @deprecated Moved to {@link Classes}.
     */
    @Deprecated
    public static Class<?> primitiveToWrapper(final Class<?> type) {
        if (Character.TYPE.equals(type)) return Character.class;
        if (Boolean.TYPE.equals(type)) return Boolean.class;
        if (Byte.TYPE.equals(type)) return Byte.class;
        if (Short.TYPE.equals(type)) return Short.class;
        if (Integer.TYPE.equals(type)) return Integer.class;
        if (Long.TYPE.equals(type)) return Long.class;
        if (Float.TYPE.equals(type)) return Float.class;
        if (Double.TYPE.equals(type)) return Double.class;
        return type;
    }

