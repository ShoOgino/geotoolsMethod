        // Returns the name for the specified unit or null if product unit.
        protected String nameFor(Unit<?> unit) {
            // Searches label database.
            String label = unitToName.get(unit);
            if (label != null) return label;
            if (unit instanceof BaseUnit) return ((BaseUnit<?>) unit).getSymbol();
            if (unit instanceof AlternateUnit) return ((AlternateUnit<?>) unit).getSymbol();
            if (unit instanceof TransformedUnit) {
                TransformedUnit<?> tfmUnit = (TransformedUnit<?>) unit;
                Unit<?> baseUnit = tfmUnit.getParentUnit();
                UnitConverter cvtr = tfmUnit.getConverter(); // tfmUnit.getSystemConverter();
                StringBuilder result = new StringBuilder();
                // this is the one line that needs to be replaced
                String baseUnitName = format(baseUnit);
                String prefix = prefixFor(cvtr);
                if ((baseUnitName.indexOf('\u00b7') >= 0)
                        || (baseUnitName.indexOf('*') >= 0)
                        || (baseUnitName.indexOf('/') >= 0)) {
                    // We could use parentheses whenever baseUnits is an
                    // instanceof ProductUnit, but most ProductUnits have
                    // aliases,
                    // so we'd end up with a lot of unnecessary parentheses.
                    result.append('(');
                    result.append(baseUnitName);
                    result.append(')');
                } else {
                    result.append(baseUnitName);
                }
                if (prefix != null) {
                    result.insert(0, prefix);
                } else {
                    if (cvtr instanceof AddConverter) {
                        result.append('+');
                        result.append(((AddConverter) cvtr).getOffset());
                    } else if (cvtr instanceof RationalConverter) {
                        double dividend = ((RationalConverter) cvtr).getDividend().doubleValue();
                        if (dividend != 1) {
                            result.append('*');
                            result.append(dividend);
                        }
                        double divisor = ((RationalConverter) cvtr).getDivisor().doubleValue();
                        if (divisor != 1) {
                            result.append('/');
                            result.append(divisor);
                        }
                    } else if (cvtr instanceof MultiplyConverter) {
                        result.append('*');
                        result.append(((MultiplyConverter) cvtr).getFactor());
                    } else { // Other converters.
                        return "[" + baseUnit + "?]";
                    }
                }
                return result.toString();
            }
            return null;
        }

