    /**
     * Returns {@code true} if the specified factory is available.
     *
     * <p>Safely checks {@link OptionalFactory#isAvailable()} which can be used at runtime to allow
     * a factory to confirm its dependencies (such as a JDBC driver) are available on the CLASSPATH.
     *
     * @return true if factory instance is available for use
     */
    private boolean isAvailable(final Object factory) {
        if (!(factory instanceof OptionalFactory)) {
            return true;
        }
        final OptionalFactory optionalFactory = (OptionalFactory) factory;
        final Class<? extends OptionalFactory> type = optionalFactory.getClass();
        if (!testingAvailability.addAndCheck(type)) {
            throw new RecursiveSearchException(type);
        }
        try {
            return optionalFactory.isAvailable();
        } finally {
            testingAvailability.removeAndCheck(type);
        }
    }

