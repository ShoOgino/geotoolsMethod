    /** Converts a value from an arbitrary type to the wrapper of {@link #arrayElementClass}. */
    @SuppressWarnings("unchecked")
    private <T> Comparable<T> toArrayElement(Comparable<T> value) {
        if (!relaxedClass.isInstance(value)) {
            throw new IllegalArgumentException(
                    value == null
                            ? Errors.format(ErrorKeys.NULL_ARGUMENT_$1, "value")
                            : Errors.format(
                                    ErrorKeys.ILLEGAL_CLASS_$2, value.getClass(), elementClass));
        }
        if (useClassChanger)
            try {
                value = (Comparable) ClassChanger.toNumber(value);
            } catch (ClassNotFoundException cause) {
                /*
                 * Should not happen since the constructor should have make sure
                 * that this operation is legal for value of class 'type'.
                 */
                final ClassCastException exception =
                        new ClassCastException(
                                Errors.format(
                                        ErrorKeys.ILLEGAL_CLASS_$2,
                                        value.getClass(),
                                        elementClass));
                exception.initCause(cause);
                throw exception;
            }
        return value;
    }

