    /**
     * Returns the divisors of the specified number as positive integers. For any value other than
     * {@code O} (which returns an empty array), the first element in the returned array is always
     * {@code 1} and the last element is always the absolute value of {@code number}.
     *
     * @param number The number for which to compute the divisors.
     * @return The divisors in strictly increasing order.
     */
    public static int[] divisors(int number) {
        if (number == 0) {
            return new int[0];
        }
        number = Math.abs(number);
        int[] divisors = new int[16];
        divisors[0] = 1;
        int count = 1;
        /*
         * Searchs for the first divisors among the prime numbers. We stop the search at the
         * square root of 'n' because every values above that point can be inferred from the
         * values before that point, i.e. if n=p1*p2 and p2 is greater than 'sqrt', than p1
         * most be lower than 'sqrt'.
         */
        final int sqrt = (int) (Math.sqrt(number) + 1E-6); // Really wants rounding toward 0.
        for (int p, i = 0; (p = primeNumber(i)) <= sqrt; i++) {
            if (number % p == 0) {
                if (count == divisors.length) {
                    divisors = XArray.resize(divisors, count * 2);
                }
                divisors[count++] = p;
            }
        }
        /*
         * Completes the divisors past 'sqrt'. The numbers added here may or may not be prime
         * numbers. Side note: checking that they are prime numbers would be costly, but this
         * algorithm doesn't need that.
         */
        int source = count;
        if (count * 2 > divisors.length) {
            divisors = XArray.resize(divisors, count * 2);
        }
        int d1 = divisors[--source];
        int d2 = number / d1;
        if (d1 != d2) {
            divisors[count++] = d2;
        }
        while (--source >= 0) {
            divisors[count++] = number / divisors[source];
        }
        /*
         * Checks the products of divisors found so far. For example if 2 and 3 are divisors,
         * checks if 6 is a divisor as well. The products found will themself be used for
         * computing new products.
         */
        for (int i = 1; i < count; i++) {
            d1 = divisors[i];
            for (int j = i; j < count; j++) {
                d2 = d1 * divisors[j];
                if (number % d2 == 0) {
                    int p = org.geotools.util.Java6.binarySearch(divisors, j, count, d2);
                    if (p < 0) {
                        p = ~p; // ~ operator, not minus
                        if (count == divisors.length) {
                            divisors = XArray.resize(divisors, count * 2);
                        }
                        System.arraycopy(divisors, p, divisors, p + 1, count - p);
                        divisors[p] = d2;
                        count++;
                    }
                }
            }
        }
        divisors = XArray.resize(divisors, count);
        assert XArray.isStrictlySorted(divisors);
        return divisors;
    }

