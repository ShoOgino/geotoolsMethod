    /**
     * Initializes GeoTools for use. This convenience method performs various tasks (more may be
     * added in the future), including setting up the {@linkplain java.util.logging Java logging
     * framework} in one of the following states:
     *
     * <p>
     *
     * <ul>
     *   <li>If the <A HREF="http://jakarta.apache.org/commons/logging/">Commons-logging</A>
     *       framework is available, then every logging message in the {@code org.geotools}
     *       namespace sent to the Java {@linkplain java.util.logging.Logger logger} are redirected
     *       to Commons-logging.
     *   <li>Otherwise if the <A HREF="http://logging.apache.org/log4j">Log4J</A> framework is
     *       available, then every logging message in the {@code org.geotools} namespace sent to the
     *       Java {@linkplain java.util.logging.Logger logger} are redirected to Log4J.
     *   <li>Otherwise, the Java logging {@linkplain java.util.logging.Formatter formatter} for
     *       console output is replaced by a {@linkplain org.geotools.util.logging.MonolineFormatter
     *       monoline formatter}.
     * </ul>
     *
     * <p>Invoking this method is <strong>not</strong> required fpr the GeoTools library to
     * function. It is just a convenience method for overwriting select Java and GeoTools default
     * settings. Supplying these defaults is not desirable in all settings, such as writing test
     * cases.
     *
     * <p>
     *
     * @see Logging#setLoggerFactory(String)
     * @see Logging#forceMonolineConsoleOutput
     * @see Hints#putSystemDefault
     * @see #getDefaultHints
     */
    public static void init() {
        final Logging log = Logging.GEOTOOLS;
        try {
            log.setLoggerFactory("org.geotools.util.logging.CommonsLoggerFactory");
        } catch (ClassNotFoundException commonsException) {
            try {
                log.setLoggerFactory("org.geotools.util.logging.Log4JLoggerFactory");
            } catch (ClassNotFoundException log4jException) {
                // Nothing to do, we already tried our best.
            }
        }
        // If java logging is used, force monoline console output.
        if (log.getLoggerFactory() == null) {
            log.forceMonolineConsoleOutput();
        }
    }

