    /**
     * Setup a {@code MonolineFormatter} for the specified logger and its children. This method
     * search for all instances of {@link ConsoleHandler} using the {@link SimpleFormatter}. If such
     * instances are found, they are replaced by a single instance of {@code MonolineFormatter}. If
     * no such {@link ConsoleHandler} are found, then a new one is created with this {@code
     * MonolineFormatter}.
     *
     * <p>In addition, this method can set the handler levels. If the level is non-null, then all
     * {@link Handler}s using the monoline formatter will be set to the specified level. This is
     * provided for convenience, but non-null {@code level} argument should be avoided as much as
     * possible because it overrides user's level settings. A user trying to configure his logging
     * properties file may find confusing to see his setting ignored.
     *
     * @param logger The base logger to apply the change on.
     * @param level The desired level, or {@code null} if no level should be set.
     * @return The registered {@code MonolineFormatter} (never {@code null}). The formatter output
     *     can be configured using the {@link #setTimeFormat} and {@link #setSourceFormat} methods.
     */
    public static MonolineFormatter configureConsoleHandler(
            final Logger logger, final Level level) {
        MonolineFormatter monoline = null;
        boolean foundConsoleHandler = false;
        Handler[] handlers = logger.getHandlers();
        for (int i = 0; i < handlers.length; i++) {
            final Handler handler = handlers[i];
            if (handler.getClass().equals(ConsoleHandler.class)) {
                foundConsoleHandler = true;
                final Formatter formatter = handler.getFormatter();
                if (formatter instanceof MonolineFormatter) {
                    /*
                     * A MonolineFormatter already existed. Sets the level only for the first
                     * instance (only one instance should exists anyway) for consistency with
                     * the fact that this method returns only one MonolineFormatter for further
                     * configuration.
                     */
                    if (monoline == null) {
                        monoline = (MonolineFormatter) formatter;
                        if (level != null) {
                            handler.setLevel(level);
                        }
                    }
                } else if (formatter.getClass().equals(SimpleFormatter.class)) {
                    /*
                     * A ConsoleHandler using the SimpleFormatter has been found. Replaces
                     * the SimpleFormatter by MonolineFormatter, creating it if necessary.
                     * If the handler setting fail with an exception, then we will continue
                     * to use the old J2SE handler instead.
                     */
                    if (monoline == null) {
                        monoline = new MonolineFormatter();
                    }
                    try {
                        handler.setFormatter(monoline);
                        if (level != null) {
                            handler.setLevel(level);
                        }
                    } catch (SecurityException exception) {
                        unexpectedException(exception);
                    }
                }
            }
        }
        /*
         * If the logger uses parent handlers, copy them to the logger that we are initializing,
         * because we will not use parent handlers anymore at the end of this method.
         */
        for (Logger parent = logger; parent.getUseParentHandlers(); ) {
            parent = parent.getParent();
            if (parent == null) {
                break;
            }
            handlers = parent.getHandlers();
            for (int i = 0; i < handlers.length; i++) {
                Handler handler = handlers[i];
                if (handler.getClass().equals(ConsoleHandler.class)) {
                    if (!foundConsoleHandler) {
                        // We have already set a ConsoleHandler and we don't want a second one.
                        continue;
                    }
                    foundConsoleHandler = true;
                    final Formatter formatter = handler.getFormatter();
                    if (formatter.getClass().equals(SimpleFormatter.class)) {
                        monoline = addHandler(logger, level);
                        continue;
                    }
                }
                logger.addHandler(handler);
            }
        }
        logger.setUseParentHandlers(false);
        if (!foundConsoleHandler) {
            monoline = addHandler(logger, level);
        }
        return monoline;
    }

