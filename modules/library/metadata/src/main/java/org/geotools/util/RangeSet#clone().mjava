    /**
     * Returns a clone of this range set.
     *
     * @return A clone of this range set.
     */
    @Override
    public RangeSet clone() {
        final RangeSet set;
        try {
            set = (RangeSet) super.clone();
        } catch (CloneNotSupportedException exception) {
            // Should not happen, since we are cloneable.
            throw new AssertionError(exception);
        }
        switch (set.arrayElementCode) {
            case DOUBLE:
                set.array = ((double[]) set.array).clone();
                break;
            case FLOAT:
                set.array = ((float[]) set.array).clone();
                break;
            case LONG:
                set.array = ((long[]) set.array).clone();
                break;
            case INTEGER:
                set.array = ((int[]) set.array).clone();
                break;
            case SHORT:
                set.array = ((short[]) set.array).clone();
                break;
            case BYTE:
                set.array = ((byte[]) set.array).clone();
                break;
            case CHARACTER:
                set.array = ((char[]) set.array).clone();
                break;
            default:
                set.array = ((Object[]) set.array).clone();
                break;
        }
        return set;
    }

