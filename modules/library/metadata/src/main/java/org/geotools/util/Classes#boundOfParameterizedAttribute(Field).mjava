    /**
     * Returns the upper bounds of the parameterized type of the given attribute. If the attribute
     * does not have a parameterized type, returns {@code null}.
     *
     * <p>This method is typically used for fetching the type of elements in a collection. We do not
     * provide a method working from a {@link Class} instance because of the way parameterized types
     * are implemented in Java (by erasure).
     *
     * <p><b>Examples:</b> When invoking this method for a field of the type below:
     *
     * <ul>
     *   <li>{@code Set<Number>} returns {@code Number.class}.
     *   <li>{@code Set<? extends Number>} returns {@code Number.class} as well, since that
     *       collection can not (in theory) contain instances of super-classes; {@code Number} is
     *       the <cite>upper bound</cite>.
     *   <li>{@code Set<? super Number>} returns {@code Object.class}, because that collection is
     *       allowed to contain such elements.
     *   <li>{@code Set} returns {@code null} because that collection is un-parameterized.
     * </ul>
     *
     * @param field The field for which to obtain the parameterized type.
     * @return The upper bound of parameterized type, or {@code null} if the given field is not of a
     *     parameterized type.
     */
    public static Class<?> boundOfParameterizedAttribute(final Field field) {
        return getActualTypeArgument(field.getGenericType());
    }

