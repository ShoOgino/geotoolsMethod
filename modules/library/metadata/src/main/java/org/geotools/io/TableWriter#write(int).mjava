    /**
     * Write a single character. If {@link #isMultiLinesCells()}
     * is {@code false} (which is the default), then:
     * <ul>
     *   <li>Tabulations (<code>'\t'</code>) are replaced by {@link #nextColumn()} invocations.</li>
     *   <li>Line separators (<code>'\r'</code>, <code>'\n'</code> or <code>"\r\n"</code>)
     *       are replaced by {@link #nextLine()} invocations.</li>
     * </ul>
     *
     * @param c Character to write.
     */
    @Override
    public void write(final int c) {
        synchronized (lock) {
            if (!multiLinesCells) {
                switch (c) {
                    case '\t': {
                        nextColumn();
                        skipCR = false;
                        return;
                    }
                    case '\r': {
                        nextLine();
                        skipCR = true;
                        return;
                    }
                    case '\n': {
                        if (!skipCR) {
                            nextLine();
                        }
                        skipCR = false;
                        return;
                    }
                }
            }
            if (c<Character.MIN_VALUE || c>Character.MAX_VALUE) {
                throw new IllegalArgumentException(String.valueOf(c));
            }
            buffer.append((char)c);
            skipCR = false;
        }
    }

