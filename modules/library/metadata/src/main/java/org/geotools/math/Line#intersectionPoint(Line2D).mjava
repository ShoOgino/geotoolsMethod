    /**
     * Returns the intersection point between this line and the specified bounded line.
     * If both lines are parallel or if the specified {@code line} doesn't reach
     * this line (since {@link Line2D} do not extends toward infinities), then this
     * method returns {@code null}.
     *
     * @param  line The bounded line to intersect.
     * @return The intersection point, or {@code null}.
     */
    public Point2D intersectionPoint(final Line2D line) {
        final double x1 = line.getX1();
        final double y1 = line.getY1();
        final double x2 = line.getX2();
        final double y2 = line.getY2();
        double x,y;
        double m = (y2-y1)/(x2-x1);
        if (Double.isInfinite(slope)) {
            x = x0;
            y = x*m + (y2-m*x2);
        } else {
            if (!Double.isInfinite(m)) {
                x = (y0-(y2-m*x2)) / (m-slope);
            } else {
                x = 0.5*(x1+x2);
            }
            y = x*slope + y0;
        }
        double eps;
        /*
         * Ensures that the intersection is in the range of valid x values.
         */
        eps = EPS*Math.abs(x);
        if (x1 <= x2) {
            if (!(x>=x1-eps && x<=x2+eps)) {
                return null;
            }
        } else {
            if (!(x<=x1+eps && x>=x2-eps)) {
                return null;
            }
        }
        /*
         * Ensures that the intersection is in the range of valid y values.
         */
        eps = EPS*Math.abs(y);
        if (y1 <= y2) {
            if (!(y>=y1-eps && y<=y2+eps)) {
                return null;
            }
        } else {
            if (!(y<=y1-eps && y>=y2+eps)) {
                return null;
            }
        }
        return new Point2D.Double(x,y);
    }

