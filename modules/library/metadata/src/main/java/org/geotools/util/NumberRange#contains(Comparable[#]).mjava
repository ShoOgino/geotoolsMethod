    /**
     * Returns {@code true} if the specified value is within this range.
     * The given value must be a subclass of {@link Number}.
     *
     * @throws IllegalArgumentException if the given value is not a subclass of {@link Number}.
     */
    @Override
    public boolean contains(Comparable<?> value) throws IllegalArgumentException {
        if (value == null) {
            return false;
        }
        ensureNumberClass(value.getClass());
        /*
         * Suppress warning because we checked the class in the line just above, so we are safe.
         * We could have used Class.cast(Object) but we want an IllegalArgumentException with a
         * localized message.
         */
        @SuppressWarnings("unchecked")
        Number number = (Number) value;
        final Class<? extends Number> type = getWidestClass(elementClass, number.getClass());
        number = ClassChanger.cast(number, type);
        /*
         * The 'type' bounds should actually be <? extends Number & Comparable> since the method
         * signature expect a Comparable and we have additionnaly casted to a Number.  However I
         * have not found a way to express that safely in a local variable with Java 6.
         */
        @SuppressWarnings("unchecked")
        final boolean contains = castTo((Class) type).containsNC((Comparable) number);
        return contains;
    }

