    /**
     * Casts the specified range to the specified type. If this class is associated to a unit of
     * measurement, then this method convert the {@code range} units to the same units than this
     * instance. This method is overriden by {@link MeasurementRange} only in the way described
     * above.
     *
     * @param type The class to cast to. Must be one of {@link Byte}, {@link Short}, {@link
     *     Integer}, {@link Long}, {@link Float} or {@link Double}.
     * @return The casted range, or {@code range} if no cast is needed.
     * @throws IllegalArgumentException if the values are not convertible to the specified class.
     */
    <N extends Number & Comparable<? super N>> NumberRange<N> convertAndCast(
            final Range<? extends Number> range, final Class<N> type)
            throws IllegalArgumentException {
        if (type.equals(range.getElementClass())) {
            @SuppressWarnings({
                "unchecked",
                "rawtypes"
            }) // Safe because we checked in the line just above.
            final NumberRange<N> cast = (NumberRange) wrap((Range) range);
            return cast;
        }
        return new NumberRange<>(type, range);
    }

