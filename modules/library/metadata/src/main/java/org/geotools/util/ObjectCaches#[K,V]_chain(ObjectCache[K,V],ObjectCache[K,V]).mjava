    /**
     * Create a two level cache, operates as a level1 cache that is willing to obtain values from a
     * (usually shared) level2 cache.
     *
     * <p>This functionality is used to tie two ObjectCache implementations together (allowing them
     * to collaborate while focusing on different use cases). The real world example of chaining is
     * in {@link AbstractFindableAuthorityFactory} in which:
     *
     * <ul>
     *   <li>create uses: chain( cache, findCache )
     *   <li>find uses: chain( findCache, cache )
     * </ul>
     *
     * In this manner the find operation does not upset normal cache. It will not create any objects
     * already present in the cache.
     *
     * @return ObjectCache
     */
    public static <K, V> ObjectCache<K, V> chain(
            final ObjectCache<K, V> level1, final ObjectCache<K, V> level2) {
        if (level1 == level2) {
            return level1;
        }
        if (level1 == null) return level2;
        if (level2 == null) return level1;
        return new ObjectCache<K, V>() {
            @Override
            public void clear() {
                level1.clear();
            }

            @Override
            public V get(K key) {
                V value = level1.get(key);
                if (value == null) {
                    V check = level2.get(key);
                    if (check != null) {
                        try {
                            level1.writeLock(key);
                            value = level1.peek(key);
                            if (value == null) {
                                level1.put(key, check);
                                value = check;
                            }
                        } finally {
                            level1.writeUnLock(key);
                        }
                    }
                }
                return value;
            }

            @Override
            public V peek(K key) {
                return level1.peek(key);
            }

            @Override
            public void put(K key, V object) {
                level1.put(key, object);
            }

            @Override
            public void writeLock(K key) {
                level1.writeLock(key);
            }

            @Override
            public void writeUnLock(K key) {
                level1.writeLock(key);
            }

            @Override
            public Set<K> getKeys() {
                return level1.getKeys();
            }

            @Override
            public void remove(K key) {
                level1.remove(key);
            }
        };
    }

