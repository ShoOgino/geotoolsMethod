    /**
     * Declares that the value for the specified key must be retained by hard reference. If there is
     * already {@link #hardReferencesCount} hard references, then this method replaces the oldest
     * hard reference by a soft one.
     */
    @SuppressWarnings("unchecked")
    private void retainStrongly(final K key) {
        /*
         * In highly concurrent environments, fields' values (e.g. the size of 'hardCache')
         *  may differ slightly from what expected.
         */
        hardCache.add((K) replaceNull(key));
        if (hardCache.size() > hardReferencesCount) {
            // Remove the last entry if list longer than hardReferencesCount
            final K toRemove = hardCache.poll();
            final Object value = hash.get(replaceNull(toRemove));
            final V v = (V) value;
            if (v
                    instanceof
                    Reference) // check if v is already a Reference: it can happen in concurrent
                // environments
                hash.put((K) replaceNull(toRemove), v);
            else
                hash.put(
                        (K) replaceNull(toRemove),
                        new Reference<K, V>(hash, (K) replaceNull(toRemove), v, cleaner));
        }
    }

