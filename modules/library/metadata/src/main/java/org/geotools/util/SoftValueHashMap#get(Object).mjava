    /**
     * Returns the value to which this map maps the specified key. Returns {@code null} if
     * the map contains no mapping for this key, or the value has been garbage collected.
     *
     * @param key key whose associated value is to be returned.
     * @return the value to which this map maps the specified key, or {@code null} if none.
     */
    @Override
    public V get(final Object key) {
        synchronized (hash) {
            Object value = hash.get(key);
            if (value instanceof Reference) {
                /*
                 * The value is a soft reference only if it was not used for a while and the map
                 * contains more than 'hardReferenceCount' entries. Otherwise, it is an ordinary
                 * reference and is returned directly. See the 'retainStrongly' method.
                 *
                 * If the value is a soft reference, get the referent and clear it immediately
                 * for avoiding the reference to be enqueded. We abandon the soft reference and
                 * reinject the referent as a strong reference in the hash map, since we try to
                 * keep the last entries by strong references.
                 */
                value = ((Reference) value).getAndClear();
                if (value != null) {
                    /*
                     * Transforms the soft reference into a hard one. The cast should be safe
                     * because hash.get(key) should not have returned a non-null value if the
                     * key wasn't valid.
                     */
                    @SuppressWarnings("unchecked")
                    final K k = (K) key;
                    hash.put(k, value);
                    retainStrongly(k);
                } else {
                    // The value has already been garbage collected.
                    hash.remove(key);
                }
            }
            /*
             * The safety of this cast depends only on this implementation, not on users.
             * It should be safe if there is no bug in the way this class manages 'hash'.
             */
            @SuppressWarnings("unchecked")
            final V v = (V) value;
            return v;
        }
    }

