    /**
     * Given a set of data points {@code x[0..ndata-1]}, {@code y[0..ndata-1]},
     * fit them to a straight line <var>y</var>=<var>b</var>+<var>m</var><var>x</var> in
     * a least-squares senses. This method assume that the <var>x</var> values are precise
     * and all uncertainty is in <var>y</var>.
     *
     * <p>Reference: <a
     * href="http://shakti.cc.trincoll.edu/~palladin/courses/ENGR431/statistics/node9.html">Linear
     * Regression Curve Fitting</a>.
     *
     * @param x Vector of <var>x</var> values (independant variable).
     * @param y Vector of <var>y</var> values (dependant variable).
     * @return Estimation of the correlation coefficient. The closer
     *         this coefficient is to 1, the better the fit.
     *
     * @throws MismatchedSizeException if <var>x</var> and <var>y</var> don't have the same length.
     */
    public double setLine(final double[] x, final double[] y) throws IllegalArgumentException {
        final int N = x.length;
        if (N != y.length) {
            throw new IllegalArgumentException("Vector x (length " + N + ") and Vector y (length:"
                    + y.length + ") are not the same length");
        }
        int    count  = 0;
        double mean_x = 0;
        double mean_y = 0;
        for (int i=0; i<N; i++) {
            final double xi = x[i];
            final double yi = y[i];
            if (!Double.isNaN(xi) && !Double.isNaN(yi)) {
                mean_x += xi;
                mean_y += yi;
                count++;
            }
        }
        mean_x /= count;
        mean_y /= count;
        /*
         * We have to solve two equations with two unknows:
         *
         *   1)    mean(y)  = b + m*mean(x)
         *   2)    mean(xy) = b*mean(x) + m*mean(x²)
         *
         * Those formulas lead to a quadratic equation. However,
         * the formulas become very simples if we set 'mean(x)=0'.
         * We can achieve this result by computing instead of (2):
         *
         *   2b)   mean(dx y) = m*mean(dx²)
         *
         * where dx=x-mean(x). In this case mean(dx)==0.
         */
        double mean_x2 = 0;
        double mean_y2 = 0;
        double mean_xy = 0;
        for (int i=0; i<N; i++) {
            double xi = x[i];
            double yi = y[i];
            if (!Double.isNaN(xi) && !Double.isNaN(yi)) {
                xi      -= mean_x;
                mean_x2 += xi*xi;
                mean_y2 += yi*yi;
                mean_xy += xi*yi;
            }
        }
        mean_x2 /= count;
        mean_y2 /= count;
        mean_xy /= count;
        /*
         * Assuming that 'mean(x)==0', then the correlation
         * coefficient can be approximate by:
         *
         * R = mean(xy) / sqrt( mean(x²) * (mean(y²) - mean(y)²) )
         */
        slope = mean_xy/mean_x2;
        y0 = mean_y-mean_x*slope;
        return mean_xy/Math.sqrt(mean_x2 * (mean_y2-mean_y*mean_y));
    }

