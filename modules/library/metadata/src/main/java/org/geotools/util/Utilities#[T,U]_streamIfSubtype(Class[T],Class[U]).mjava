    /**
     * Creates a stream with zero or one elements, depending on whether the specified {@code supertype} is
     * actually a supertype of the specified {@code type} (according to {@code supertype.isAssignableFrom(type)}).
     *
     * If the test is {@code true}, {@code type} is cast to a subclass of {@code supertype} and returned
     * in the stream; otherwise the stream is empty.
     *
     * @param type the type to cast
     * @param supertype the surmised supertype of {@code type}
     * @param <T> the type of {@code type}
     * @param <U> the type of {@code supertype}
     * @return a stream over {@code type} cast to a subclass of {@code supertype} or empty
     */
    public static <T, U> Stream<Class<? extends U>> streamIfSubtype(Class<T> type, Class<U> supertype) {
        return supertype.isAssignableFrom(type)
                ? Stream.of(type.asSubclass(supertype))
                : Stream.empty();
    }

