    /**
     * Returns the getters. The returned array should never be modified, since it may be shared
     * among many instances of {@code PropertyAccessor}.
     *
     * @param type The metadata interface.
     * @return The getters declared in the given interface (never {@code null}).
     */
    private static Method[] getGetters(final Class<?> type) {
        synchronized (SHARED_GETTERS) {
            Method[] getters = SHARED_GETTERS.get(type);
            if (getters == null) {
                getters = type.getMethods();
                int count = 0;
                for (int i = 0; i < getters.length; i++) {
                    final Method candidate = getters[i];
                    if (candidate.getAnnotation(Deprecated.class) != null) {
                        // Ignores deprecated methods.
                        continue;
                    }
                    if (!candidate.getReturnType().equals(Void.TYPE)
                            && candidate.getParameterTypes().length == 0) {
                        /*
                         * We do not require a name starting with "get" or "is" prefix because some
                         * methods do not begin with such prefix, as in "ConformanceResult.pass()".
                         * Consequently we must provide special cases for no-arg methods inherited
                         * from java.lang.Object because some interfaces declare explicitly the
                         * contract for those methods.
                         *
                         * Note that testing candidate.getDeclaringClass().equals(Object.class)
                         * is not suffisient because the method may be overriden in a subclass.
                         */
                        final String name = candidate.getName();
                        if (!name.startsWith(SET) && !isExcluded(name)) {
                            getters[count++] = candidate;
                        }
                    }
                }
                getters = XArray.resize(getters, count);
                SHARED_GETTERS.put(type, getters);
            }
            return getters;
        }
    }

