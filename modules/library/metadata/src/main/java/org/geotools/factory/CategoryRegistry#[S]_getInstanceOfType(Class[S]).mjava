	/**
	 * Returns an arbitrary instance that extends/implements the specified type that is filed
	 * under a category that also extends/implements that type.
	 *
	 * @param type The type to look up.
	 * @return An instance if one was found.
	 */
	public <S> Optional<S> getInstanceOfType(Class<S> type) {
		ensureArgumentNonNull("type", type);
		return streamCategories()
				.filter(category -> category.isAssignableFrom(type))
				.map(this::instanceRegistry)
				.flatMap(registry -> stream(registry.getInstanceOfType(type)))
				.findFirst();
	}

