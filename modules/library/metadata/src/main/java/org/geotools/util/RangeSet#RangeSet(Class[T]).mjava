    /**
     * Constructs an empty set of range.
     *
     * @param type The class of the range elements. It must be a primitive type or a class
     *     implementing {@link Comparable}.
     * @throws IllegalArgumentException if {@code type} is not a primitive type or a class
     *     implementing {@link Comparable}.
     */
    public RangeSet(final Class<T> type) throws IllegalArgumentException {
        if (!Comparable.class.isAssignableFrom(type)) {
            throw new IllegalArgumentException(
                    Errors.format(ErrorKeys.NOT_COMPARABLE_CLASS_$1, type));
        }
        Class<?> elementType = ClassChanger.getTransformedClass(type); // e.g. change Date --> Long
        useClassChanger = (elementType != type);
        elementClass = type;
        arrayElementClass = wrapperToPrimitive(elementType);
        arrayElementCode = getEnumConstant(arrayElementClass);
        isPrimitive = arrayElementClass.isPrimitive();
        isNumeric = Number.class.isAssignableFrom(type);
        relaxedClass = isNumeric ? Number.class : type;
    }

