    /**
     * Returns a string representation of the specified object, which may be an array. This method
     * returns one of the following values:
     *
     * <p>
     *
     * <ul>
     *   <li>If the object is an array of objects, then {@link Arrays#deepToString(Object[])} is
     *       invoked.
     *   <li>Otherwise if the object is an array of primitive type, then the corresponding {@link
     *       Arrays#toString(double[]) Arrays.toString(...)} method is invoked.
     *   <li>Otherwise {@link String#valueOf(String)} is invoked.
     *   <li>
     * </ul>
     *
     * <p>This method should be invoked <strong>only</strong> if the object type is declared exactly
     * as {@code Object}, not as some subtype like {@code Object[]}, {@code Number} or {@code
     * float[]}. In the later cases, use the appropriate {@link Arrays} method instead.
     *
     * @param object The object to format as a string. May be {@code null}.
     * @return A string representation of the given object.
     */
    public static String deepToString(final Object object) {
        if (object instanceof Object[]) {
            return Arrays.deepToString((Object[]) object);
        }
        if (object instanceof double[]) {
            return Arrays.toString((double[]) object);
        }
        if (object instanceof float[]) {
            return Arrays.toString((float[]) object);
        }
        if (object instanceof long[]) {
            return Arrays.toString((long[]) object);
        }
        if (object instanceof int[]) {
            return Arrays.toString((int[]) object);
        }
        if (object instanceof short[]) {
            return Arrays.toString((short[]) object);
        }
        if (object instanceof byte[]) {
            return Arrays.toString((byte[]) object);
        }
        if (object instanceof char[]) {
            return Arrays.toString((char[]) object);
        }
        if (object instanceof boolean[]) {
            return Arrays.toString((boolean[]) object);
        }
        return String.valueOf(object);
    }

