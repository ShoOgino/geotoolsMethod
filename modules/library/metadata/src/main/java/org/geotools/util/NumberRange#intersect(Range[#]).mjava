    /**
     * Returns the intersection of this range with the given range. Widening conversions will be
     * applied as needed.
     */
    @Override
    @SuppressWarnings({"unchecked", "rawtypes"})
    public NumberRange<?> intersect(Range<?> range) {
        final Class<? extends Number> rangeType = getElementClass(range);
        Class<? extends Number> type = getWidestClass(elementClass, rangeType);
        range = castTo((Class) type).intersectNC(convertAndCast((Range) range, (Class) type));
        /*
         * Use a finer type capable to holds the result (since the intersection
         * may have reduced the range), but not finer than the finest type of
         * the ranges used in the intersection calculation.
         */
        type = getFinestClass(elementClass, rangeType);
        if (range.minValue != null) {
            type = getWidestClass(type, getFinestClass(((Number) range.minValue).doubleValue()));
        }
        if (range.maxValue != null) {
            type = getWidestClass(type, getFinestClass(((Number) range.maxValue).doubleValue()));
        }
        return convertAndCast((Range) range, (Class) type);
    }

