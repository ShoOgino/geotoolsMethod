    /**
     * Compares the provided value with the {@linkplain #getMaxValue maximum value},
     * taking in account the included or excluded state.
     *
     * @param  value The value to compare to this range {@linkplain #getMaxValue maximum}.
     * @param  delta 0 if the value is inclusive, -1 if exclusive and the first inclusive value is
     *         lower, or +1 if exclusive and the first inclusive value is higher than the given one.
     * @return 0 if the given value is equal to the {@link #maxValue} and both are included,
     *         negative if {@link #maxValue} is lower, positive if {@link #maxValue} is higher.
     */
    final int compareMaxTo(final T value, final int delta) {
        // Same comments than 'compareMinTo' with logic reversed.
        if (value == null) {
            return delta;
        }
        if (maxValue == null) {
            return +1;
        }
        final int c = maxValue.compareTo(value);
        if (c == 0) {
            if (isMaxIncluded) {
                return -delta;
            }
            if (delta >= 0) {
                return -1;
            }
        }
        return c;
    }

