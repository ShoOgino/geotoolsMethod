    /**
     * Finds the roots of a cubic equation. More specifically, this method solves the following
     * equation:
     *
     * <blockquote>
     *
     * <code>
     * c0 +
     * c1*<var>x</var> +
     * c2*<var>x</var><sup>2</sup> +
     * c3*<var>x</var><sup>3</sup> == 0
     * </code>
     *
     * </blockquote>
     *
     * @return The roots. The length may be 1 or 3.
     */
    private static double[] cubicRoots(double c0, double c1, double c2, double c3) {
        c2 /= c3;
        c1 /= c3;
        c0 /= c3;
        final double Q = (c2 * c2 - 3 * c1) / 9;
        final double R = (2 * c2 * c2 * c2 - 9 * c2 * c1 + 27 * c0) / 54;
        final double Qcubed = Q * Q * Q;
        final double d = Qcubed - R * R;

        c2 /= 3;
        if (d >= 0) {
            final double theta = Math.acos(R / Math.sqrt(Qcubed)) / 3;
            final double scale = -2 * Math.sqrt(Q);
            final double[] roots = {
                scale * Math.cos(theta) - c2,
                scale * Math.cos(theta + Math.PI * 2 / 3) - c2,
                scale * Math.cos(theta + Math.PI * 4 / 3) - c2
            };
            assert Math.abs(roots[0] * roots[1] * roots[2] + c0) < 1E-6;
            assert Math.abs(roots[0] + roots[1] + roots[2] + c2 * 3) < 1E-6;
            assert Math.abs(roots[0] * roots[1] + roots[0] * roots[2] + roots[1] * roots[2] - c1)
                    < 1E-6;
            return roots;
        } else {
            double e = Math.cbrt(Math.sqrt(-d) + Math.abs(R));
            if (R > 0) {
                e = -e;
            }
            return new double[] {(e + Q / e) - c2};
        }
    }

