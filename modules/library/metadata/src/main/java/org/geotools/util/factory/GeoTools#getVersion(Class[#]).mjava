    /**
     * Lookup version for provided class.
     *
     * <p>Version number is determined by either:
     *
     * <ul>
     *   <li>Use of jar naming convention, matching jars such as jts-1.13.jar
     *   <li>Use of MANIFEST.MF (to check Implementation-Version, Project-Version)
     *   <li>
     *   <li>To assist
     *
     * @return Version (or null if unavailable)
     */
    public static Version getVersion(Class<?> type) {
        final URL classLocation = classLocation(type);
        String path = classLocation.toString();

        // try and extract from maven jar naming convention
        if (classLocation.getProtocol().equalsIgnoreCase("jar")) {
            String jarVersion = jarVersion(path);
            if (jarVersion != null) {
                return new Version(jarVersion);
            }
            // try manifest
            try {
                URL manifestLocation = manifestLocation(path);
                Manifest manifest = new Manifest();
                try (InputStream content = manifestLocation.openStream()) {
                    manifest.read(content);
                }
                for (String attribute :
                        new String[] {
                            "Implementation-Version", "Project-Version", "Specification-Version"
                        }) {
                    String value = manifest.getMainAttributes().getValue(attribute);
                    if (value != null) {
                        return new Version(value);
                    }
                }
            } catch (IOException e) {
                // unavailable
            }
        }
        String name = type.getName();
        if (name.startsWith("org.geotools") || name.startsWith("org.opengis")) {
            return GeoTools.getVersion();
        }
        return null;
    }

