    /**
     * Scans the package for resources.
     *
     * @param sourceDirectory The base directory for {@code "java"} {@code "resources"}
     *     sub-directories. The directory structure must be consistent with Maven conventions.
     * @param bundleClass The resource bundle base class (e.g. <code>
     *     {@linkplain org.geotools.metadata.i18n.Vocabulary}.class}</code>).
     * @param renumber {@code true} for renumbering all key values.
     * @param out The output stream for printing message.
     * @throws IOException if an input/output operation failed.
     */
    private static void scanForResources(
            final File sourceDirectory,
            final Class<? extends IndexedResourceBundle> bundleClass,
            final boolean renumber,
            final PrintWriter out)
            throws IOException {
        final String fullname = bundleClass.getName();
        final int packageEnd = fullname.lastIndexOf('.');
        final String packageName = fullname.substring(0, packageEnd);
        final String classname = fullname.substring(packageEnd + 1);
        final String packageDir = packageName.replace('.', '/');
        final File srcDir = new File(sourceDirectory, "java/" + packageDir);
        final File utfDir = new File(sourceDirectory, "resources/" + packageDir);
        if (!srcDir.isDirectory()) {
            out.print('"');
            out.print(srcDir.getPath());
            out.println("\" is not a directory.");
            return;
        }
        if (!utfDir.isDirectory()) {
            out.print('"');
            out.print(utfDir.getPath());
            out.println("\" is not a directory.");
            return;
        }
        IndexedResourceCompiler compiler = null;
        final File[] content = srcDir.listFiles();
        File defaultLanguage = null;
        if (content != null) {
            for (final File file : content) {
                final String filename = file.getName();
                if (filename.startsWith(classname) && filename.endsWith(PROPERTIES_EXT)) {
                    if (compiler == null) {
                        compiler =
                                new IndexedResourceCompiler(
                                        sourceDirectory, bundleClass, renumber, out);
                    }
                    compiler.processPropertyFile(file);
                    final String noExt =
                            filename.substring(0, filename.length() - PROPERTIES_EXT.length());
                    final File utfFile = new File(utfDir, noExt + RESOURCES_EXT);
                    compiler.writeUTFFile(utfFile);
                    if (noExt.equals(classname)) {
                        defaultLanguage = file;
                    }
                }
            }
        }
        if (compiler != null) {
            if (defaultLanguage != null) {
                compiler.resources.clear();
                compiler.resources.putAll(loadPropertyFile(defaultLanguage));
            }
            compiler.writeJavaSource(bundleClass);
        }
    }

