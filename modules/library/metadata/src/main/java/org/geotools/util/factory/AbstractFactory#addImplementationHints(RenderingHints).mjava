    /**
     * Adds the specified hints to this factory {@linkplain #hints}. This method can be used as a
     * replacement for <code>{@linkplain #hints}.putAll(map)</code> when the map is an instance of
     * {@link Hints} - the above was allowed in Java 4, but is no longuer allowed since Java 5 and
     * parameterized types.
     *
     * @param map The hints to add.
     * @return {@code true} if at least one value changed as a result of this call.
     * @since 2.5
     */
    protected boolean addImplementationHints(final RenderingHints map) {
        /*
         * Do NOT change the parameter signature to Map<?,?>. We want to keep type safety.
         * Use hints.putAll(...) if you have a Map<RenderingHints.Key,?>,  or this method
         * if you have a RenderingHints map. Furthermore this method implementation needs
         * the garantee that the map do not contains null value (otherwise the 'changed'
         * computation could be inacurate) - this condition is enforced by RenderingHints
         * but not by Map.
         *
         * The implementation below strips non-RenderingHints.Key as a paranoiac check,
         * which should not be necessary since RenderingHints implementation prevented
         * that. If the parameter was changed to Map<?,?>, the stripping would be more
         * likely and could surprise the user since it is performed without warnings.
         */
        boolean changed = false;
        if (map != null) {
            for (final Map.Entry<?, ?> entry : map.entrySet()) {
                final Object key = entry.getKey();
                if (key instanceof RenderingHints.Key) {
                    final Object value = entry.getValue();
                    final Object old = hints.put((RenderingHints.Key) key, value);
                    if (!changed && !Utilities.equals(value, old)) {
                        changed = true;
                    }
                }
            }
        }
        return changed;
    }

