    /**
     * Returns a canonical instance of the given locale.
     *
     * @param locale The locale to canonicalize.
     * @return The canonical instance of {@code locale}.
     */
    private static synchronized Locale unique(final Locale locale) {
        /**
         * Initialize the LOCALES map with the set of locales defined in the Locale class. This
         * operation is done only once.
         */
        if (LOCALES.isEmpty())
            try {
                final Field[] fields = Locale.class.getFields();
                for (int i = 0; i < fields.length; i++) {
                    final Field field = fields[i];
                    if (Modifier.isStatic(field.getModifiers())) {
                        if (Locale.class.isAssignableFrom(field.getType())) {
                            final Locale toAdd = (Locale) field.get(null);
                            LOCALES.put(toAdd, toAdd);
                        }
                    }
                }
            } catch (Exception exception) {
                /*
                 * Not a big deal if this operation fails (this is actually just an
                 * optimization for reducing memory usage). Log a warning and continue.
                 */
                Logging.unexpectedException(GrowableInternationalString.class, "unique", exception);
            }
        /*
         * Now canonicalize the locale.
         */
        final Locale candidate = LOCALES.get(locale);
        if (candidate != null) {
            return candidate;
        }
        LOCALES.put(locale, locale);
        return locale;
    }

