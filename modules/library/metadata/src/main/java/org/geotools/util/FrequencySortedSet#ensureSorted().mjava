    /**
     * Sorts the elements in frequency order, if not already done. The sorted array will contains
     * all elements without duplicated values, with the less frequent element first and the most
     * frequent last (or the converse if this set has been created for reverse order). If some
     * elements appear at the same frequency, then their ordering will be preserved.
     */
    @SuppressWarnings("unchecked")
    private void ensureSorted() {
        if (sorted != null) {
            return;
        }
        final Map.Entry<E,Integer>[] entries = count.entrySet().toArray(new Map.Entry[count.size()]);
        Arrays.sort(entries, COMPARATOR);
        final int length = entries.length;
        sorted = (E[]) new Object[length];
        if (frequencies == null || frequencies.length != length) {
            frequencies = new int[length];
        }
        for (int i=0; i<length; i++) {
            final Map.Entry<E,Integer> entry = entries[i];
            sorted[i] = entry.getKey();
            frequencies[i] = Math.abs(entry.getValue());
        }
    }

