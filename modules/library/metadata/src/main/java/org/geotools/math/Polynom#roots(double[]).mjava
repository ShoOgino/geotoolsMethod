    /**
     * Finds the roots of a polynomial equation. More specifically,
     * this method solve the following equation:
     *
     * <blockquote><code>
     * c[0] +
     * c[1]*<var>x</var> +
     * c[2]*<var>x</var><sup>2</sup> +
     * c[3]*<var>x</var><sup>3</sup> +
     * ... +
     * c[n]*<var>x</var><sup>n</sup> == 0
     * </code></blockquote>
     *
     * where <var>n</var> is the array length minus 1.
     *
     * @param  c The coefficients for the polynomial equation.
     * @return The roots. This array may have any length up to {@code n-1}.
     * @throws UnsupportedOperationException if there is more coefficients than this method
     *         can handle.
     */
    public static double[] roots(final double[] c) {
        int n = c.length;
        while (n != 0 && c[--n] == 0) {
            // Empty on purpose.
        }
        switch (n) {
            case 0:  return NO_REAL_ROOT;
            case 1:  return new double[] {-c[0]/c[1]};
            case 2:  return quadraticRoots(c[0], c[1], c[2]);
            case 3:  return cubicRoots(c[0], c[1], c[2], c[3]);
            default: throw new UnsupportedOperationException(String.valueOf(n));
        }
    }

