    /**
     * Computes 10 raised to the power of <var>x</var>. This method tries to be slightly more
     * accurate than <code>{@linkplain Math#pow Math.pow}(10,x)</code>, sometime at the cost of
     * performance.
     *
     * <p>The {@code Math.pow(10,x)} method doesn't always return the closest IEEE floating point
     * representation. More accurate calculations are slower and usually not necessary, but the base
     * 10 is a special case since it is used for scaling axes or formatting human-readable output,
     * in which case the precision may matter.
     *
     * @param x The exponent.
     * @return 10 raised to the given exponent.
     */
    public static strictfp double pow10(final int x) {
        if (x >= 0) {
            if (x < POW10.length) {
                return POW10[x];
            }
        } else if (x != Integer.MIN_VALUE) {
            final int nx = -x;
            if (nx < POW10.length) {
                return 1 / POW10[nx];
            }
        }
        try {
            /*
             * Double.parseDouble("1E"+x) give gives as good or better numbers than Math.pow(10,x)
             * for ALL integer powers, but is slower. We hope that the current workaround is only
             * temporary. See http://developer.java.sun.com/developer/bugParade/bugs/4358794.html
             */
            return Double.parseDouble("1E" + x);
        } catch (NumberFormatException exception) {
            return StrictMath.pow(10, x);
        }
    }

