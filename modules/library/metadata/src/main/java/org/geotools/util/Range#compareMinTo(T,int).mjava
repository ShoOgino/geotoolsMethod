    /**
     * Compares the provided value with the {@linkplain #getMinValue minimum value}, taking in
     * account the included or excluded state.
     *
     * @param value The value to compare to this range {@linkplain #getMinValue minimum}.
     * @param delta 0 if the value is inclusive, -1 if exclusive and the first inclusive value is
     *     lower, or +1 if exclusive and the first inclusive value is higher than the given one.
     * @return 0 if the given value is equal to the {@link #minValue} and both are included,
     *     negative if {@link #minValue} is lower, positive if {@link #minValue} is higher.
     */
    final int compareMinTo(final T value, final int delta) {
        if (value == null) {
            /*
             * The given value is infinity. It could be positive or negative infinity (i.e. greater
             * or lower than this range value), which we can infer from the 'delta' value in this
             * Range implementation. 'delta' should never be 0 since infinities are exclusive.
             */
            return delta;
        }
        if (minValue == null) {
            /*
             * This range bound is negative infinity while the given value is not. Note that we
             * perform this test after the 'value' test because if both values are infinity, we
             * want to retain the interpretation given by the argument (conceptually, the given
             * infinity still included in this range if 'delta' is -1).
             */
            return -1;
        }
        final int c = minValue.compareTo(value);
        if (c == 0) {
            if (isMinIncluded) {
                /*
                 * Returns 0 if 'value' is inclusive as well, or -1 if 'value' is exclusive
                 * and smaller than first inclusive value (indicated by 'delta' = +1).
                 */
                return -delta;
            }
            if (delta <= 0) {
                /*
                 * The range 'minValue' is exclusive, so the first inclusive value is greater.
                 * The only case where we don't return +1 is if the given argument is in the
                 * same case (first inclusive value is greater the given value).
                 */
                return +1;
            }
        }
        return c;
    }

