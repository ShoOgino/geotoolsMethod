    /**
     * Returns a map with the same hints than the specified one, minus every (key,value) pairs where
     * the key is not an instance of {@link RenderingHints.Key}. If the given map contains only
     * valid keys, then it is returned unchanged.
     *
     * @param hints The map of hints to filter.
     * @return A map with filtered hints.
     */
    static Map<RenderingHints.Key, Object> stripNonKeys(final Map<?, ?> hints) {
        if (hints == null) {
            return null;
        }
        /*
         * We cheat in the next line since the map may contains illegal key. However when this
         * method will finish, we garantee that it will contains only RenderingHints.Key keys,
         * provided there is no concurrent changes in an other thread.
         */
        @SuppressWarnings("unchecked")
        Map<RenderingHints.Key, Object> filtered = (Map<RenderingHints.Key, Object>) hints;
        for (final Object key : hints.keySet()) {
            if (!(key instanceof RenderingHints.Key)) {
                if (filtered == hints) {
                    // Copies the map only if needed.
                    filtered = new HashMap<>(filtered);
                }
                filtered.remove(key);
            }
        }
        return filtered;
    }

