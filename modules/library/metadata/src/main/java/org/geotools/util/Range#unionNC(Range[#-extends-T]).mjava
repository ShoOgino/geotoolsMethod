    /**
     * Implementation of {@link #union(Range)} to be invoked directly by subclasses. "NC" stands for
     * "No Cast" - this method do not try to cast the value to a compatible type.
     */
    final Range<?> unionNC(final Range<? extends T> range) throws IllegalArgumentException {
        final Range<? extends T> union;
        final Range<? extends T> min =
                compareMinTo(range.minValue, range.isMinIncluded ? 0 : +1) > 0 ? range : this;
        final Range<? extends T> max =
                compareMaxTo(range.maxValue, range.isMaxIncluded ? 0 : -1) < 0 ? range : this;
        if (min == max) {
            union = min;
        } else {
            union = create(min.minValue, min.isMinIncluded, max.maxValue, max.isMaxIncluded);
        }
        assert union.contains(min) : min;
        assert union.contains(max) : max;
        return union;
    }

