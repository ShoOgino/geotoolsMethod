    /**
     * Computes the base of a isosceles triangle having the specified summit and side length. The
     * base will be colinear with this line. In other words, this method compute two points
     * (<var>x1</var>,<var>y1</var>) and (<var>x2</var>,<var>y2</var>) located in such a way that:
     *
     * <ul>
     *   <li>Both points are on this line.
     *   <li>The distance between any of the two points and the specified {@code summit} is exactly
     *       {@code sideLength}.
     * </ul>
     *
     * @param summit The summit of the isosceles triangle.
     * @param sideLength The length for the two sides of the isosceles triangle.
     * @return The base of the isoscele triangle, colinear with this line, or {@code null} if the
     *     base can't be computed. If non-null, then the triangle is the figure formed by joining
     *     (<var>x1</var>,<var>y1</var>), (<var>x2</var>,<var>y2</var>) and {@code summit}.
     */
    public Line2D isoscelesTriangleBase(final Point2D summit, double sideLength) {
        sideLength *= sideLength;
        if (slope == 0) {
            final double x = summit.getX();
            final double dy = y0 - summit.getY();
            final double dx = Math.sqrt(sideLength - dy * dy);
            if (Double.isNaN(dx)) {
                return null;
            }
            return new Line2D.Double(x + dx, y0, x - dx, y0);
        }
        if (Double.isInfinite(slope)) {
            final double y = summit.getY();
            final double dx = x0 - summit.getX();
            final double dy = Math.sqrt(sideLength - dx * dx);
            if (Double.isNaN(dy)) {
                return null;
            }
            return new Line2D.Double(x0, y + dy, x0, y - dy);
        }
        final double x = summit.getX();
        final double y = summit.getY();
        final double dy = y0 - y + slope * x;
        final double B = -slope * dy;
        final double A = slope * slope + 1;
        final double C = Math.sqrt(B * B + A * (sideLength - dy * dy));
        if (Double.isNaN(C)) {
            return null;
        }
        final double x1 = (B + C) / A + x;
        final double x2 = (B - C) / A + x;
        return new Line2D.Double(x1, slope * x1 + y0, x2, slope * x2 + y0);
    }

