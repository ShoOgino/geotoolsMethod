    /**
     * Copies all metadata from source to target. The source can be any implementation of the
     * metadata interface, but the target must be the implementation expected by this class.
     *
     * @param source The metadata to copy.
     * @param target The target metadata.
     * @param skipNulls If {@code true}, only non-null values will be copied.
     * @return {@code true} in case of success, or {@code false} if at least one setter method was
     *     not found.
     * @throws UnmodifiableMetadataException if the target metadata is unmodifiable.
     */
    public boolean shallowCopy(final Object source, final Object target, final boolean skipNulls)
            throws UnmodifiableMetadataException {
        boolean success = true;
        assert type.isInstance(source) : source;
        assert implementation.isInstance(target) : target;
        final Object[] arguments = new Object[1];
        for (int i = 0; i < getters.length; i++) {
            final Method getter = getters[i];
            arguments[0] = get(getter, source);
            if (!skipNulls || !isEmpty(arguments[0])) {
                if (setters == null) {
                    return false;
                }
                final Method setter = setters[i];
                if (setter != null) {
                    set(getter, setter, target, arguments);
                } else {
                    success = false;
                }
            }
        }
        return success;
    }

