    /**
     * Creates a new range bounded by the given values.
     *
     * @param elementClass The class of the range elements.
     * @param minValue The minimal value, or {@code null} if none.
     * @param isMinIncluded {@code true} if the minimal value is inclusive, or {@code false} if
     *     exclusive.
     * @param maxValue The maximal value, or {@code null} if none.
     * @param isMaxIncluded {@code true} if the maximal value is inclusive, or {@code false} if
     *     exclusive.
     */
    public Range(
            final Class<T> elementClass,
            final T minValue,
            final boolean isMinIncluded,
            final T maxValue,
            final boolean isMaxIncluded) {
        ensureNonNull("elementClass", elementClass);
        this.elementClass = elementClass;
        /*
         * The "included" flags must be forced to 'false' if 'minValue' or 'maxValue' are null.
         * This is required for proper working of algorithms implemented in this class.
         */
        this.minValue = minValue;
        this.maxValue = maxValue;
        this.isMinIncluded = isMinIncluded && minValue != null;
        this.isMaxIncluded = isMaxIncluded && maxValue != null;
        checkElementClass();
        if (minValue != null) ensureCompatible(minValue.getClass());
        if (maxValue != null) ensureCompatible(maxValue.getClass());
    }

