    /**
     * Tries to remove at least {@code n} fraction digits in the decimal representation of the
     * specified value. This method tries small changes to {@code value}, by adding or substracting
     * up to {@code maxULP} (Unit in the Last Place). If there is no small change that remove at
     * least {@code n} fraction digits, then the value is returned unchanged. This method is used
     * for hiding rounding errors, like in conversions from radians to degrees.
     *
     * <p>Example: {@code XMath.trimLastDecimalDigits(-61.500000000000014, 12, 4)} returns {@code
     * -61.5}.
     *
     * @param value The value to fix.
     * @param maxULP The maximal change allowed in ULPs (Unit in the Last Place). A typical value is
     *     4.
     * @param n The minimum amount of fraction digits.
     * @return The trimmed value, or the unchanged {@code value} if there is no small change that
     *     remove at least {@code n} fraction digits.
     */
    public static double trimDecimalFractionDigits(final double value, final int maxULP, int n) {
        double lower = value;
        double upper = value;
        n = countDecimalFractionDigits(value) - n;
        if (n > 0) {
            for (int i = 0; i < maxULP; i++) {
                if (countDecimalFractionDigits(lower = previous(lower)) <= n) return lower;
                if (countDecimalFractionDigits(upper = next(upper)) <= n) return upper;
            }
        }
        return value;
    }

