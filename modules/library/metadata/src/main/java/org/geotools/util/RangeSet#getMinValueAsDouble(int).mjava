    /**
     * Returns a {@linkplain Range#getMinValue range's minimum value} as a {@code double}. The
     * {@code index} can be any value from 0 inclusive to the set's {@link #size size} exclusive.
     * The returned values always increase with {@code index}.
     *
     * @param index The range index, from 0 inclusive to {@link #size size} exclusive.
     * @return The minimum value for the range at the specified index.
     * @throws IndexOutOfBoundsException if {@code index} is out of bounds.
     * @throws ClassCastException if range elements are not convertible to numbers.
     */
    public final double getMinValueAsDouble(int index)
            throws IndexOutOfBoundsException, ClassCastException {
        index *= 2;
        return (isPrimitive)
                ? Array.getDouble(array, index)
                : ((Number) Array.get(array, index)).doubleValue();
    }

