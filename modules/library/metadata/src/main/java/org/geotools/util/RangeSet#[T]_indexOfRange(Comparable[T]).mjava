    /**
     * If the specified value is inside a range, returns the index of this range. Otherwise, returns
     * {@code -1}.
     *
     * @param value The value to search.
     * @return The index of the range which contains this value, or -1 if there is no such range.
     */
    public <T> int indexOfRange(final Comparable<T> value) {
        int index = binarySearch(toArrayElement(value));
        if (index < 0) {
            // Found an insertion point. Make sure that the insertion
            // point is inside a range (i.e. before the maximum value).
            index = ~index; // Tild sign, not minus.
            if ((index & 1) == 0) {
                return -1;
            }
        }
        index /= 2; // Round toward 0 (odd index are maximum values).
        assert newRange(get(2 * index), get(2 * index + 1)).contains(value) : value;
        return index;
    }

