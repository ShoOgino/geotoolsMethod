    /**
     * Return Properties loaded from a fixture configuration file, or null if not found.
     *
     * <p>If a fixture configuration file is not found, a notice is printed to standard output
     * stating that tests for this fixture id are skipped.
     *
     * <p>This method allows tests that cannot extend {@link OnlineTestCase} or {@link
     * OnlineTestSupport} because they already extend another class (for example, a non-online test
     * framework) to access fixture configuration files in the same way that those classes do. Only
     * basic fixture configuration loading is supported. This method does not support the extra
     * services such as fixture caching and connection testing provided by {@link OnlineTestCase}
     * and {@link OnlineTestSupport}.
     *
     * <p>A JUnit 4 test fixture can readily be disabled in the absence of a fixture configuration
     * file by placing <code>Assume.assumeNotNull(FixtureUtilities.loadFixture(fixtureId))</code> or
     * similar in its <code>@BeforeClass</code> method. JUnit 3 tests must provide their own logic,
     * typically overriding {@link TestCase#run()} or {@link TestCase#runTest()}, or providing a
     * suite.
     *
     * @param fixtureId the fixture id, where dots "." are converted to subdirectories.
     * @return the fixture Properties or null
     * @see OnlineTestCase
     * @see OnlineTestSupport
     */
    public static Properties loadFixture(String fixtureId) {
        File fixtureFile = getFixtureFile(getFixtureDirectory(), fixtureId);
        if (fixtureFile.exists()) {
            return loadProperties(fixtureFile);
        } else {
            printSkipNotice(fixtureId, fixtureFile);
            return null;
        }
    }

