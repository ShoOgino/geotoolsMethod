    /**
     * Returns all the base filters, where base is the provided filter (and in the event it is a
     * BinaryLogicalOperator all of its child features). This represents the space covered by
     * a number of the search functions.
     * <p>
     * The returned list is a mutable copy that can be used with filter factory to construct a
     * new filter when you are ready. To make that explicit I am returning an ArrayList so it
     * is clear that the result can be modified.
     * 
     * @param filter
     * @return are belong to us
     */
    static public ArrayList<Filter> allYourBase( Filter filter ){
        if( filter == null ){
            return new ArrayList<Filter>();
        }
        else if (filter instanceof BinaryLogicOperator ){
            BinaryLogicOperator parent = (BinaryLogicOperator) filter;
            List<Filter> children = parent.getChildren();
            ArrayList<Filter> base = new ArrayList<Filter>(children !=null ? children.size()+1:1 );
            base.add(0,parent);
            if( children!=null){
                base.addAll(children);
            }
            return base;
        }
        else {
            ArrayList<Filter> base = new ArrayList<Filter>(1);
            base.add(filter);
            return base;
        }
    }

