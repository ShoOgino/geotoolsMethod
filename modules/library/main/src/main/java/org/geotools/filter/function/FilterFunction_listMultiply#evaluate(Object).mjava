    @Override
    public Object evaluate(Object feature) {
        Number arg0;
        String arg1;

        try { // attempt to get value and perform conversion
            Object o = getExpression(0).evaluate(feature);
            if (o instanceof String) {
                arg0 = Double.valueOf((String) o);
            } else {
                arg0 = (Number) o;
            }
        } catch (Exception e) // probably a type error
        {
            throw new IllegalArgumentException(
                    "Filter Function problem for function listMultiply argument #0 - expected type Double ("
                            + e.getMessage()
                            + ")");
        }

        try {
            // attempt to get value and perform conversion
            final Expression exprArg1 = getExpression(1);
            if (exprArg1 == null) {
                return null;
            }

            Object data = exprArg1.evaluate(feature);
            if (data instanceof Number) {
                return ((Number) data).doubleValue() * arg0.doubleValue();
            }

            arg1 = (String) data;
        } catch (Exception e) // probably a type error
        {
            throw new IllegalArgumentException(
                    "Filter Function problem for function listMultiply argument #1 - expected type String ("
                            + e.getMessage()
                            + ")");
        }

        if (arg1 == null || arg1.isEmpty()) {
            return null;
        }

        String[] values = WHITE_SPACE_SPLIT.split(arg1);
        StringBuilder b = new StringBuilder();

        for (String value : values) {
            if ("".equals(value)) {
                continue;
            }
            if (b.length() != 0) {
                b.append(" ");
            }
            b.append(Double.valueOf(value) * arg0.doubleValue());
        }

        return b.toString();
    }

