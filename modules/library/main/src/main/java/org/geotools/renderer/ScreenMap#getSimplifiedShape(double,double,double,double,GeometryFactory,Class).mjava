    /**
     * Returns geometry suitable for rendering the pixel that has just been occupied.
     * The geometry is designed to actually fill the pixel
     * @param minx
     * @param miny
     * @param maxx
     * @param maxy
     * @param geometryFactory
     * @param geometryType
     * @return
     */
    public Geometry getSimplifiedShape(double minx, double miny, double maxx, double maxy,
            GeometryFactory geometryFactory, Class geometryType) {
        CoordinateSequenceFactory csf = geometryFactory.getCoordinateSequenceFactory();
        double midx = (minx + maxx) / 2;
        double midy = (miny + maxy) / 2;
        double x0 = midx - spanX / 2;
        double x1 = midx + spanX / 2;
        double y0 = midy - spanY / 2;
        double y1 = midy + spanY / 2;
        if (Point.class.isAssignableFrom(geometryType)
                || MultiPoint.class.isAssignableFrom(geometryType)) {
            CoordinateSequence cs = JTS.createCS(csf, 1, 2);
            cs.setOrdinate(0, 0, midx);
            cs.setOrdinate(0, 1, midy);
            if (Point.class.isAssignableFrom(geometryType)) {
                // people should not call this method for a point, but... whatever
                return geometryFactory.createPoint(cs);
            } else {
                return geometryFactory.createMultiPoint(new Point[] { geometryFactory
                        .createPoint(cs) });
            }
        } else if (LineString.class.isAssignableFrom(geometryType)
                || MultiLineString.class.isAssignableFrom(geometryType)) {
            CoordinateSequence cs = JTS.createCS(csf, 2, 2);
            cs.setOrdinate(0, 0, x0);
            cs.setOrdinate(0, 1, y0);
            cs.setOrdinate(1, 0, x1);
            cs.setOrdinate(1, 1, y1);
            if (MultiLineString.class.isAssignableFrom(geometryType)) {
                return geometryFactory.createMultiLineString(new LineString[] { geometryFactory
                        .createLineString(cs) });
            } else {
                return geometryFactory.createLineString(cs);
            }
        } else {
            CoordinateSequence cs = JTS.createCS(csf, 5, 2);
            cs.setOrdinate(0, 0, x0);
            cs.setOrdinate(0, 1, y0);
            cs.setOrdinate(1, 0, x0);
            cs.setOrdinate(1, 1, y1);
            cs.setOrdinate(2, 0, x1);
            cs.setOrdinate(2, 1, y1);
            cs.setOrdinate(3, 0, x1);
            cs.setOrdinate(3, 1, y0);
            cs.setOrdinate(4, 0, x0);
            cs.setOrdinate(4, 1, y0);
            LinearRing ring = geometryFactory.createLinearRing(cs);
            if (MultiPolygon.class.isAssignableFrom(geometryType)) {
                return geometryFactory.createMultiPolygon(new Polygon[] { geometryFactory
                        .createPolygon(ring, null) });
            } else {
                return geometryFactory.createPolygon(ring, null);
            }
        }
    }

