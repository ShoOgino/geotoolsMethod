	/**
	 * Build and return the feature you've been constructing.
	 * If the id is null it will be assigned from FeatureBuilder.createDefaultFeatureId().
	 */
	@Override
	public Feature buildFeature(String id) {
		// Instantiate if null:
		id = id == null ? FeatureBuilder.createDefaultFeatureId() : id;

		// Validate the values against the featureType; we need to make sure
		// that requirements are honoured:
		for (PropertyDescriptor propertyDescriptor : super.featureType
				.getDescriptors()) {
			Name name = propertyDescriptor.getName();

			// Create a List of Properties for this name if we don't already
			// have one:
			if (!values.containsKey(name)) {
				values.put(name, new ArrayList<Property>());
			}

			// Get the List of Properties:
			List<Property> properties = values.get(name);

			// See if there's a mismatch between the number of properties and
			// minOccurs value:
			int minOccurs = propertyDescriptor.getMinOccurs();
			int numberOfProperties = properties.size();

			if (numberOfProperties < minOccurs) {
				// If the value is nillable anyway then just default it to null:
				if (propertyDescriptor.isNillable()
						&& AttributeDescriptor.class
								.isAssignableFrom(propertyDescriptor.getClass())) {
					do {
						Property nullProperty = new AttributeImpl(
								propertyDescriptor.getType().getBinding()
										.cast(null),
								(AttributeDescriptor) propertyDescriptor, null);

						properties.add(nullProperty);
					} while (++numberOfProperties < minOccurs);
				}
				// NOTE: I was wondering if you could have another if-else here
				// to try to apply default values if they're set..
				// it seems like a good idea but the only problem is that
				// they're only present on the AttributeDescriptors...
				else {
					throw new IllegalStateException(
							String.format(
									"Failed to build feature '%s'; its property '%s' requires at least %s occurrence(s) but number of occurrences was %s.",
									featureType.getName(), name, minOccurs,
									numberOfProperties));
				}
			}
		}

		// Merge the Map<String, ArrayList<Property>> into one collection of
		// properties:
		Collection<Property> properties = new ArrayList<Property>();
		for (Name key : values.keySet()) {
			properties.addAll(values.get(key));
		}

		this.values.clear();
		if (ad != null) {
                    return factory.createFeature(properties, ad, id);
		}
		else {
		    return factory.createFeature(properties, featureType, id);		    
		}
	}

