    /**
     * Supplies mapping from origional to target FeatureType.
     *
     * <p>Will also ensure that origional can cover target
     *
     * @param target Desired FeatureType
     * @param origional Origional FeatureType
     * @return Mapping from originoal to target FeatureType
     * @throws IllegalArgumentException if unable to provide a mapping
     */
    protected AttributeDescriptor[] typeAttributes(
            SimpleFeatureType original, SimpleFeatureType target) {
        if (target.equals(original)) {
            throw new IllegalArgumentException(
                    "FeatureReader allready produces contents with the correct schema");
        }

        if (target.getAttributeCount() > original.getAttributeCount()) {
            throw new IllegalArgumentException(
                    "Unable to retype  FeatureReader<SimpleFeatureType, SimpleFeature> (origional does not cover requested type)");
        }

        String xpath;
        AttributeDescriptor[] types = new AttributeDescriptor[target.getAttributeCount()];

        for (int i = 0; i < target.getAttributeCount(); i++) {
            AttributeDescriptor attrib = target.getDescriptor(i);
            xpath = attrib.getLocalName();
            types[i] = attrib;

            if (!attrib.equals(original.getDescriptor(xpath))) {
                throw new IllegalArgumentException(
                        "Unable to retype  FeatureReader<SimpleFeatureType, SimpleFeature> (origional does not cover "
                                + xpath
                                + ")");
            }
        }

        return types;
    }

