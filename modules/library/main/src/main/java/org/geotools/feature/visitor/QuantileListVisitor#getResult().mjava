    public CalcResult getResult() {
        if (bins == 0 || count == 0) {
            return CalcResult.NULL_RESULT;
        }

        // sort the list
        Collections.sort(items);

        if (bins > count) { // resize
            bins = count;
            this.bin = new ArrayList[bins];
        }

        // calculate number of items to put into each of the larger bins
        int binPop = new Double(Math.ceil((double) count / bins)).intValue();
        // determine index of bin where the next bin has one less item
        int lastBigBin = count % bins;
        if (lastBigBin == 0) lastBigBin = bins;
        else lastBigBin--;

        // put the items into their respective bins
        int item = 0;
        for (int binIndex = 0; binIndex < bins; binIndex++) {
            bin[binIndex] = new ArrayList();
            for (int binMember = 0; binMember < binPop; binMember++) {
                bin[binIndex].add(items.get(item++));
            }
            if (lastBigBin == binIndex)
                binPop--; // decrease the number of items in a bin for the next item
        }
        return new AbstractCalcResult() {
            public Object getValue() {
                return bin;
            }
        };
    }

