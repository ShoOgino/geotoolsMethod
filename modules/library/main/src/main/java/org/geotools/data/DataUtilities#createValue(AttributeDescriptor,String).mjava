    /**
     * Reads an attribute value out of the raw text supplied to {@link #createFeature}.
     *
     * <p>This method is responsible for:
     *
     * <ul>
     *   <li>Handling: <code>"<null>"</code> as an explicit marker flag for a null value
     *   <li>Using {@link #decodeEscapedCharacters(String)} to unpack the raw text
     *   <li>Using {@link Converters} to convert the text to the requested value
     *
     * @param descriptor
     * @param rawText
     * @return
     */
    private static Object createValue(AttributeDescriptor descriptor, String rawText) {
        String stringValue = null;
        try {
            // read the value and decode any interesting characters
            stringValue = decodeEscapedCharacters(rawText);
        } catch (RuntimeException huh) {
            huh.printStackTrace();
            stringValue = null;
        }
        // check for special <null> flag
        if ("<null>".equals(stringValue)) {
            stringValue = null;
        }
        if (stringValue == null) {
            if (descriptor.isNillable()) {
                return null; // it was an explicit "<null>"
            }
        }
        // Use of Converters to convert from String to requested java binding
        Object value = Converters.convert(stringValue, descriptor.getType().getBinding());

        if (descriptor.getType() instanceof GeometryType) {
            // this is to be passed on in the geometry objects so the srs name gets encoded
            CoordinateReferenceSystem crs =
                    ((GeometryType) descriptor.getType()).getCoordinateReferenceSystem();
            if (crs != null) {
                // must be geometry, but check anyway
                if (value != null && value instanceof Geometry) {
                    ((Geometry) value).setUserData(crs);
                }
            }
        }
        return value;
    }

