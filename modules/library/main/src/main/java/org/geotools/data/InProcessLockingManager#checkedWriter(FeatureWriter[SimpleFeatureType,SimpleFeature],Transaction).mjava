    /**
     * Provides a wrapper on the provided writer that checks locks.
     *
     * @param writer FeatureWriter requiring access control
     * @param transaction Transaction being used
     * @return FeatureWriter with lock checking
     */
    public FeatureWriter<SimpleFeatureType, SimpleFeature> checkedWriter(
            final FeatureWriter<SimpleFeatureType, SimpleFeature> writer,
            final Transaction transaction) {
        SimpleFeatureType featureType = writer.getFeatureType();
        final String typeName = featureType.getTypeName();

        return new DelegatingFeatureWriter<SimpleFeatureType, SimpleFeature>() {
            SimpleFeature live = null;

            @Override
            public FeatureWriter<SimpleFeatureType, SimpleFeature> getDelegate() {
                return writer;
            }

            @Override
            public SimpleFeatureType getFeatureType() {
                return writer.getFeatureType();
            }

            @Override
            public SimpleFeature next() throws IOException {
                live = writer.next();

                return live;
            }

            @Override
            public void remove() throws IOException {
                if (live != null) {
                    assertAccess(typeName, live.getID(), transaction);
                }

                writer.remove();
                live = null;
            }

            @Override
            public void write() throws IOException {
                if (live != null) {
                    assertAccess(typeName, live.getID(), transaction);
                }

                writer.write();
                live = null;
            }

            @Override
            public boolean hasNext() throws IOException {
                live = null;

                return writer.hasNext();
            }

            @Override
            public void close() throws IOException {
                live = null;
                if (writer != null) writer.close();
            }
        };
    }

