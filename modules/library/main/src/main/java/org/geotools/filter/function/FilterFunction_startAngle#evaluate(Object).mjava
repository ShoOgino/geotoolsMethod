    @Override
    public Object evaluate(Object feature) {
        LineString ls;

        try { // attempt to get value and perform conversion
            ls = getExpression(0).evaluate(feature, LineString.class);
        } catch (Exception e) {
            // probably a type error
            throw new IllegalArgumentException(
                    "Filter Function problem for function startAngle argument #0 - expected type Geometry");
        }
        if (ls == null || ls.getNumPoints() == 1) {
            return null;
        }

        CoordinateSequence cs = ls.getCoordinateSequence();

        double dx = (cs.getX(1) - cs.getX(0));
        double dy = (cs.getY(1) - cs.getY(0));
        return -Math.toDegrees(Math.atan2(dy, dx));
    }

