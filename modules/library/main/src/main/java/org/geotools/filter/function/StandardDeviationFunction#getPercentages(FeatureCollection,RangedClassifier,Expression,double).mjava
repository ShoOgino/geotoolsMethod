    private double[] getPercentages(
            FeatureCollection features,
            RangedClassifier classifier,
            Expression attr,
            double standardDeviation)
            throws IOException {
        int classSize = classifier.getSize();
        Object firstMax = classifier.getMax(0);
        int totalSize = features.size();
        Filter greaterThanOrEqualTo = FF.greaterOrEqual(attr, FF.literal(firstMax));
        FeatureCollection subCollection = features.subCollection(greaterThanOrEqualTo);
        int sizeFirstClass = totalSize - subCollection.size();
        double[] percentages = new double[classSize];
        // we don't know the min value in the collection because the
        // the first interval is open to infinity to the left.
        // needs a query to get the classMembers
        percentages[0] = ((double) sizeFirstClass / (double) totalSize) * 100;

        double min = ((Number) classifier.getMin(1)).doubleValue();
        percentages =
                computeGroupByPercentages(
                        subCollection, percentages, totalSize, min, standardDeviation);
        computeLastPercentage(percentages, totalSize);
        return percentages;
    }

