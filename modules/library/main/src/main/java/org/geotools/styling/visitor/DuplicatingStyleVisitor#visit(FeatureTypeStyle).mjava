    public void visit(FeatureTypeStyle fts) {

        FeatureTypeStyle copy = new FeatureTypeStyleImpl(fts);

        //        copy = new StyleFactoryImpl().createFeatureTypeStyle(
        //                fts.getRules(),
        //                fts.getSemanticTypeIdentifiers(),
        //                fts.featureInstanceIDs(),
        //                fts.getFeatureTypeName(),
        //                fts.getDescription(),
        //                fts.getName());

        List<Rule> rulesCopy =
                fts.rules()
                        .stream()
                        .filter(r -> r != null)
                        .map(
                                r -> {
                                    r.accept(this);
                                    return (Rule) pages.pop();
                                })
                        .collect(Collectors.toList());

        //
        //        copy = sf.createFeatureTypeStyle();
        //        copy.setName(fts.getName());
        //        copy.setTitle(fts.getTitle());
        //        copy.setAbstract(fts.getAbstract());
        //        copy.setFeatureTypeName(fts.getFeatureTypeName());
        copy.rules().clear();
        copy.rules().addAll(rulesCopy);
        //        copy.setSemanticTypeIdentifiers((String[])
        // fts.getSemanticTypeIdentifiers().clone());

        if (fts.getTransformation() != null) {
            copy.setTransformation(copy(fts.getTransformation()));
        }
        if (fts.getOnlineResource() != null) {
            copy.setOnlineResource(fts.getOnlineResource());
        }
        copy.getOptions().clear();
        copy.getOptions().putAll(fts.getOptions());

        if (STRICT && !copy.equals(fts)) {
            throw new IllegalStateException(
                    "Was unable to duplicate provided FeatureTypeStyle:" + fts);
        }

        pages.push(copy);
    }

