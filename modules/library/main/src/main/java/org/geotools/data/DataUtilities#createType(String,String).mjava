    //
    // Decoding (ie Parsing) support for PropertyAttributeReader and tutorials
    //
    /**
     * Utility method for FeatureType construction.
     *
     * <p>Will parse a String of the form: <i>"name:Type,name2:Type2,..."</i>
     *
     * <p>Where <i>Type</i> is defined by {@link createAttribute}:
     *
     * <ul>
     *   <li>Each attribute descriptor is defined using the form: <i>"name:Type:hint"</i>
     *   <li>Where <i>Type</i> is:
     *       <ul>
     *         <li>0,Interger,int: represents Interger
     *         <li>0.0, Double, double: represents Double
     *         <li>"",String,string: represents String
     *         <li>Geometry: represents Geometry, additional common geometry types supported
     *             including
     *             Point,LineString,Polygon,MultiLineString,MultiPolygon,MultiPoint,GeometryCollection
     *       </ul>
     *   <li>UUID
     *   <li>Date
     *   <li><i>full.class.path</i>: represents java type
     * </ul>
     *
     * <li>Where <i>hint</i> is "hint1;hint2;...;hintN", in which "hintN" is one of:
     *
     *     <ul>
     *       <li><code>nillable</code>
     *       <li><code>srid=<#></code>
     *     </ul>
     *
     * <li>You may indicate the default Geometry with an astrix: "*geom:Geometry".
     * <li>You may also indicate the srid (used to look up a EPSG code): "*point:Point:3226
     *
     *     <p>Examples:
     *
     *     <ul>
     *       <li><code>name:"",age:0,geom:Geometry,centroid:Point,url:java.io.URL"</code>
     *       <li><code>id:String,polygonProperty:Polygon:srid=32615</code>
     *       <li><code>identifier:UUID,location:Point,*area:MultiPolygon,created:Date</code>
     *       <li><code>uuid:UUID,name:String,description:String,time:java.sql.Timestamp</code>
     *     </ul>
     *
     * @param typeName identification of FeatureType: (<i>namesapce</i>).<i>typeName</i>
     * @param typeSpec Specification of FeatureType attributes "name:Type,name2:Type2,..."
     * @throws SchemaException
     */
    public static SimpleFeatureType createType(String typeName, String typeSpec)
            throws SchemaException {
        int split = typeName.lastIndexOf('.');
        String namespace = (split == -1) ? null : typeName.substring(0, split);
        String name = (split == -1) ? typeName : typeName.substring(split + 1);

        return createType(namespace, name, typeSpec);
    }

