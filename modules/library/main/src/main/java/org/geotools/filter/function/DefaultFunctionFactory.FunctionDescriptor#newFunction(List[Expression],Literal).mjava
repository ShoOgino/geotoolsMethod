        Function newFunction(List<Expression> parameters, Literal fallback) throws Exception {
            // cache lookup
            if (FunctionExpression.class.isAssignableFrom(clazz)) {
                FunctionExpression function =
                        (FunctionExpression) clazz.getDeclaredConstructor().newInstance();
                if (parameters != null) {
                    function.setParameters(parameters);
                }
                if (fallback != null) {
                    function.setFallbackValue(fallback);
                }
                return function;
            }
            if (FunctionImpl.class.isAssignableFrom(clazz)) {
                FunctionImpl function = (FunctionImpl) clazz.getDeclaredConstructor().newInstance();
                if (parameters != null) {
                    function.setParameters(parameters);
                }
                if (fallback != null) {
                    function.setFallbackValue(fallback);
                }
                return function;
            }
            // Function function = (Function) functionClass.newInstance();
            Constructor<? extends Function> constructor =
                    clazz.getConstructor(new Class[] {List.class, Literal.class});
            return constructor.newInstance(parameters, fallback);
        }

