    /**
     * @return {@link Boolean#TRUE} if the Class of the object passed as argument defines a property
     *     names as the property name passed as this function argument, following the standard Java
     *     Beans naming conventions for getters. {@link Boolean#FALSE} otherwise.
     */
    public Object evaluate(Object bean) {
        if (bean instanceof SimpleFeature) {
            return evaluate((SimpleFeature) bean);
        }

        final String propName = getPropertyName();

        try {
            Class type = bean.getClass();
            // quick 1
            //            try {
            //                String getName =
            // "get"+propName.substring(0,1).toUpperCase()+propName.substring(1);
            //                if (type.getMethod(getName, new Class[0]) != null) {
            //                    return true;
            //                }
            //            } catch (Exception ignore) {
            //            }
            //            // quick 2
            //            try {
            //                String isName =
            // "is"+propName.substring(0,1).toUpperCase()+propName.substring(1);
            //                if (type.getMethod(isName, new Class[0]) != null) {
            //                    return true;
            //                }
            //            } catch (Exception ignore) {
            //            }
            // okay go for real
            BeanInfo info = Introspector.getBeanInfo(type);
            for (PropertyDescriptor descriptor : info.getPropertyDescriptors()) {
                if (descriptor.getName().equals(propName)) {
                    if (descriptor.getReadMethod() != null) {
                        return true;
                    } else {
                        return false; // property found but not writable
                    }
                }
            }
            // PropertyUtils.getProperty(bean, propName);
            // return true;
        } catch (IntrospectionException ignore) {
        }
        return false;
    }

