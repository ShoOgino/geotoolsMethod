    public void testFeatureEvents() throws Exception {
        SimpleFeatureStore store1 = (SimpleFeatureStore) data
                .getFeatureSource(roadFeatures[0].getFeatureType().getTypeName());
        SimpleFeatureStore store2 = (SimpleFeatureStore) data
                .getFeatureSource(roadFeatures[0].getFeatureType().getTypeName());
        store1.setTransaction(new DefaultTransaction());
        class Listener implements FeatureListener {
            String name;
            List events = new ArrayList();

            public Listener(String name) {
                this.name = name;
            }

            public void changed(FeatureEvent featureEvent) {
                this.events.add(featureEvent);
            }

            FeatureEvent getEvent(int i) {
                return (FeatureEvent) events.get(i);
            }
        }

        Listener listener1 = new Listener("one");
        Listener listener2 = new Listener("two");

        store1.addFeatureListener(listener1);
        store2.addFeatureListener(listener2);

        FilterFactory ff = CommonFactoryFinder.getFilterFactory(null);

        //test that only the listener listening with the current transaction gets the event.
        final SimpleFeature feature = roadFeatures[0];
        Id fidFilter = ff.id(Collections.singleton(ff.featureId(feature.getID())));
        
        store1.removeFeatures(fidFilter);
        
        assertEquals(1, listener1.events.size());
        assertEquals(0, listener2.events.size());

        FeatureEvent event = listener1.getEvent(0);
        assertEquals(feature.getBounds(), event.getBounds());
        assertEquals(FeatureEvent.FEATURES_REMOVED, event.getEventType());

        //test that commit only sends events to listener2.
        listener1.events.clear();
        listener2.events.clear();

        store1.getTransaction().commit();

        assertEquals(0, listener1.events.size());
        assertEquals(2, listener2.events.size());
        
        event = listener2.getEvent(0);
        assertEquals(feature.getBounds(), event.getBounds());
        assertEquals(FeatureEvent.FEATURES_REMOVED, event.getEventType());

        //test add same as modify
        listener1.events.clear();
        listener2.events.clear();

        store1.addFeatures( DataUtilities.collection( feature ));
        
        assertEquals(1, listener1.events.size());
        event = listener1.getEvent(0);
        assertEquals(feature.getBounds(), event.getBounds());
        assertEquals(FeatureEvent.FEATURES_ADDED, event.getEventType());
        assertEquals(0, listener2.events.size());

        //test that rollback only sends events to listener1.
        listener1.events.clear();
        listener2.events.clear();

        store1.getTransaction().rollback();

        assertEquals(1, listener1.events.size());
        event = listener1.getEvent(0);
        assertNull(event.getBounds());
        assertEquals(FeatureEvent.FEATURES_CHANGED, event.getEventType());

        assertEquals(0, listener2.events.size());

        ////		 this is how Auto_commit is supposed to work
        //		listener1.events.clear();
        //		listener2.events.clear();
        //		store2.addFeatures(new FeatureReader( ){
        //
        //			public FeatureType getFeatureType() {
        //				return feature.getFeatureType();
        //			}
        //			boolean hasNext=true;
        //			public Feature next() throws IOException, IllegalAttributeException, NoSuchElementException {
        //				hasNext=false;
        //				return feature;
        //			}
        //
        //			public boolean hasNext() throws IOException {
        //				return hasNext;
        //			}
        //
        //			public void close() throws IOException {
        //				//do nothing.
        //			}
        //			
        //		});
        //
        //		assertEquals( 1, listener1.events.size() );
        //		event=listener1.getEvent(0);
        //		assertEquals(feature.getBounds(),event.getBounds() );
        //		assertEquals(FeatureEvent.FEATURES_ADDED, event.getEventType() );
        //		assertEquals( 0, listener2.events.size() );
    }

