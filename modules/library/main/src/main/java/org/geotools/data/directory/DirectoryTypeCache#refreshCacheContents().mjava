    /**
     * Here we try to refresh the contents of the feature type cache.
     *
     * <p>Basically we want to:
     *
     * <ul>
     *   <li>remove all data stores associated to files that have been removed
     *   <li>add all data stores associated to new files
     *   <li>remove all feature types that are no more there, and add all feature types that are new
     *   <li>
     * </ul>
     *
     * All of this should be done trying to avoid re-creating all of the datastores already loaded.
     * We assume a properly written datastore will be able to detect changes in its own feature type
     * list and feature type schemas on its own.
     */
    void refreshCacheContents() throws IOException {
        // prepare the replacement ft cache
        Map<String, FileEntry> result = new TreeMap<>();

        // build support structure used to quickly find files that need updating
        Map<File, FileEntry> fileCache = new HashMap<>();
        for (FileEntry entry : ftCache.values()) {
            fileCache.put(entry.file, entry);
        }

        // grab all the candidate files
        File[] files = directory.listFiles();
        if (files != null) {
            for (File file : files) {
                // skip over directories, we don't recurse
                if (file.isDirectory()) {
                    continue;
                }

                // do we have the same datastore in the current cache? If so keep it, we don't
                // want to rebuild over and over the same stores
                FileEntry entry = fileCache.get(file);

                // if missing build a new one
                if (entry == null) {
                    DataStore store = factory.getDataStore(file);
                    if (store != null) {
                        entry = new FileEntry(file, store);
                    }
                }

                // if we managed to build an entry collect its feature types
                if (entry != null) {
                    for (String typeName : entry.getStore(true).getTypeNames()) {
                        // don't override existing entries
                        if (!result.containsKey(typeName)) result.put(typeName, entry);
                        else {
                            LOGGER.log(
                                    Level.WARNING,
                                    "Type name "
                                            + typeName
                                            + " is available from multiple datastores");
                        }
                    }
                }
            }
        }

        // update the cache. We need to remove the missing elements, disposing
        // the data stores that are not referenced anymore, and add the new ones
        // we are going to update the ftCache as we go, this is thread safe
        // since we are using a concurrent hash map for ftCache, and won't
        // hinder users of live data stores since we are not going to touch
        // the ones that are not being removed (the ones that we are going to
        // remove should be not working anyways)
        Set<String> removedFTs = new HashSet<>(ftCache.keySet());
        removedFTs.removeAll(result.keySet());

        // collect all data stores that are referred by a feature type that we
        // are going to remove, but are not referred by any feature type we're
        // going to keep. Clean the ftCache from removed feature types at the same
        // time.
        Set<FileEntry> disposable = new HashSet<>();
        for (String removedFT : removedFTs) {
            disposable.add(ftCache.remove(removedFT));
        }
        for (FileEntry entry : result.values()) {
            disposable.remove(entry);
        }
        for (FileEntry entry : disposable) {
            entry.dispose();
        }

        // now let's add all the new ones
        Set<String> added = new HashSet<>(result.keySet());
        added.removeAll(ftCache.keySet());
        for (String newFeatureType : added) {
            ftCache.put(newFeatureType, result.get(newFeatureType));
        }
    }

