    /**
     * Builds a feature type from compiled state.
     *
     * <p>After the type is built the running list of attributes is cleared.
     *
     * @return The built feature type.
     */
    public SimpleFeatureType buildFeatureType() {
        GeometryDescriptor defGeom = null;

        // was a default geometry set?
        if (this.defaultGeometry != null) {
            List<AttributeDescriptor> atts = attributes();
            for (int i = 0; i < atts.size(); i++) {
                AttributeDescriptor att = atts.get(i);
                if (this.defaultGeometry.equals(att.getName().getLocalPart())) {
                    // ensure the attribute is a geometry attribute
                    //
                    if (!(att instanceof GeometryDescriptor)) {
                        LOGGER.warning(
                                "Default Geometry "
                                        + this.defaultGeometry
                                        + " was added as a geoemtry");
                        attributeBuilder.init(att);
                        attributeBuilder.setCRS(defaultCrs);
                        GeometryType type = attributeBuilder.buildGeometryType();

                        att = attributeBuilder.buildDescriptor(att.getName(), type);
                        atts.set(i, att);
                    }
                    defGeom = (GeometryDescriptor) att;
                    break;
                }
            }

            if (defGeom == null) {
                String msg =
                        "'"
                                + this.defaultGeometry
                                + " specified as default"
                                + " but could find no such attribute.";
                throw new IllegalArgumentException(msg);
            }
        }

        if (defGeom == null) {
            // none was set by name, look for first geometric type
            for (AttributeDescriptor att : attributes()) {
                if (att instanceof GeometryDescriptor) {
                    defGeom = (GeometryDescriptor) att;
                    break;
                }
            }
        }

        SimpleFeatureType built =
                factory.createSimpleFeatureType(
                        name(),
                        attributes(),
                        defGeom,
                        isAbstract,
                        restrictions(),
                        superType,
                        description);

        init();
        return built;
    }

