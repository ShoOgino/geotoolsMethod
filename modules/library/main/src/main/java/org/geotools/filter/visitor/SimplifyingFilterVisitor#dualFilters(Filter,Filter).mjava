    /**
     * Two filters are dual if the are the negation of each other (range based logic is handled
     * separately)
     * 
     * @param f1
     * @param f2
     * @return
     */
    private boolean dualFilters(Filter f1, Filter f2) {
        if (f1 instanceof Not) {
            Not not = (Not) f1;
            return f2.equals(not.getFilter());
        } else if (f2 instanceof Not) {
            Not not = (Not) f2;
            return f1.equals(not.getFilter());
        } else if ((f1 instanceof PropertyIsEqualTo && f2 instanceof PropertyIsNotEqualTo)
                || (f1 instanceof PropertyIsNotEqualTo && f2 instanceof PropertyIsEqualTo)) {
            PropertyIsEqualTo e;
            PropertyIsNotEqualTo ne;
            if (f2 instanceof PropertyIsEqualTo) {
                e = (PropertyIsEqualTo) f2;
                ne = (PropertyIsNotEqualTo) f1;
            } else {
                e = (PropertyIsEqualTo) f1;
                ne = (PropertyIsNotEqualTo) f2;
            }
            // the dual filter logic is correctly implemented only for single value attributes
            if (!isSimpleFeature()) {
                return false;
            } else {
                return (e.getExpression1().equals(ne.getExpression1()) && e.getExpression2()
                        .equals(ne.getExpression2()))
                        || (e.getExpression2().equals(ne.getExpression1()) && e.getExpression1()
                                .equals(ne.getExpression2()));
            }
        }

        return false;
    }

