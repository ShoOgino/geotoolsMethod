        public AzimuthalEquidistantProjectionHandler(
                CoordinateReferenceSystem sourceCRS,
                Envelope validAreaBounds,
                ReferencedEnvelope renderingEnvelope)
                throws FactoryException, MismatchedDimensionException, TransformException {
            super(sourceCRS, validAreaBounds, renderingEnvelope);

            CoordinateReferenceSystem crs = renderingEnvelope.getCoordinateReferenceSystem();
            Point2D.Double center = getCenter(crs);
            initializeDatelineCutter(crs, center);
            double radius = getRadius(crs, center);
            renderingGeometry = JTS.toGeometry(renderingEnvelope);
            if (!checkRenderingWithinRadius(center, radius)) {
                renderingGeometryReduced = true;
                Polygon azeqProjectedExtents = getAzeqProjectedExtents(radius);
                Geometry intersection = renderingGeometry.intersection(azeqProjectedExtents);
                if (intersection.isEmpty()) {
                    renderingGeometry = null;
                } else {
                    List polygons = PolygonExtracter.getPolygons(intersection);
                    renderingGeometry = (Polygon) polygons.get(0);
                }
            }
            if (renderingGeometry != null) {
                // reprojecting the geometry to compute query envelopes incurs in heavy deformation,
                // have at least 10 points per side
                Envelope envelope = renderingGeometry.getEnvelopeInternal();
                double tolerance = Math.max(envelope.getWidth(), envelope.getHeight()) / 20;
                renderingGeometry = (Polygon) Densifier.densify(renderingGeometry, tolerance);
            }

            // get north and south pole, to avoid holes in the output
            MathTransform mt = CRS.findMathTransform(DefaultGeographicCRS.WGS84, crs);
            north = getAzeqPosition(mt, 0, 90);
            south = getAzeqPosition(mt, 0, -90);
        }

