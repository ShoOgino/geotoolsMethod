    public Filter toFilter(FilterFactory ff, Expression variable) {
        if (ranges.isEmpty()) {
            return Filter.EXCLUDE;
        } else if (ranges.size() == 1
                && ranges.first().getMinValue() == null
                && ranges.first().getMaxValue() == null) {
            return Filter.INCLUDE;
        }

        List<Range<T>> rangeList = new ArrayList<>(ranges);
        List<Filter> filters = new ArrayList<>();
        int rangeCount = rangeList.size();
        for (int i = 0; i < rangeCount; ) {
            Range<T> range = rangeList.get(i);
            i++;
            List<T> exclusions = new ArrayList<>();
            Range<T> curr = range;
            while (i < rangeCount) {
                Range<T> next = rangeList.get(i);
                if (next.getMinValue().equals(curr.getMaxValue())) {
                    // do we have a hole?
                    if (!next.isMinIncluded() && !curr.isMaxIncluded()) {
                        exclusions.add(curr.getMaxValue());
                    }
                    i++;
                    curr = next;
                } else {
                    break;
                }
            }
            if (curr == range) {
                // no exclusions, this range is isolated
                filters.add(toFilter(ff, variable, range));
            } else {
                @SuppressWarnings("unchecked")
                Range<T> union =
                        new Range<>(
                                range.getElementClass(),
                                range.getMinValue(),
                                range.isMinIncluded(),
                                curr.getMaxValue(),
                                curr.isMaxIncluded());
                Filter filter = toFilter(ff, variable, union);
                if (exclusions.isEmpty()) {
                    filters.add(filter);
                } else {
                    List<Filter> exclusionFilters = new ArrayList<>();
                    if (!filter.INCLUDE.equals(filter)) {
                        exclusionFilters.add(filter);
                    }
                    for (T exclusion : exclusions) {
                        PropertyIsNotEqualTo ne = ff.notEqual(variable, ff.literal(exclusion));
                        exclusionFilters.add(ne);
                    }
                    if (exclusionFilters.size() == 1) {
                        filter = exclusionFilters.get(0);
                    } else {
                        filter = ff.and(exclusionFilters);
                    }
                    filters.add(filter);
                }
            }
        }

        if (filters.isEmpty()) {
            return Filter.EXCLUDE;
        } else if (filters.size() == 1) {
            return filters.get(0);
        } else {
            return ff.or(filters);
        }
    }

