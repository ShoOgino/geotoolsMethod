    public <T> T evaluate(Object object, Class<T> context) {
        final Expression lookupExp = parameters.get(0);
        final List<Expression> pairList = parameters.subList(1, parameters.size());

        // fast lookup path
        if(staticTable) {
            Object lookup = lookupExp.evaluate(object);
            if(lookup != null) {
                if(fastLookup == null) {
                    synchronized (this) {
                        if(fastLookup == null) {
                            // build the fast lookup map
                            fastLookup = new HashMap();
                            lastKeyType = lookup.getClass();
                            lastContextType = context;
                            for (int i = 0; i < pairList.size(); i += 2) {
                                Object key = pairList.get(i).evaluate(object, lastKeyType);
                                Object value = pairList.get(i + 1).evaluate(object, context);
                                fastLookup.put(key, value);
                            }
                        }
                    }
                }
                
                if(fastLookup != null && lookup.getClass() == lastKeyType && context == lastContextType) {
                    T result = (T) fastLookup.get(lookup);
                    if(result == null) {
                        System.out.println("humm");
                    }
                    return result;
                } 
            }
        }
            
        // dynamic evaluation path
        for (int i = 0; i < pairList.size(); i += 2) {
            Expression keyExpr = pairList.get(i);
            Expression valueExpr = pairList.get(i + 1);
            // we are going to test our propertyNameExpression against the keyExpression
            // if they are equal we will return the valueExpression
            //
            org.opengis.filter.Filter compareFilter = ff.equal(lookupExp, keyExpr, false);

            if (compareFilter.evaluate(object)) {
                return valueExpr.evaluate(object, context);
            }
        }
        
        return null;
    }

