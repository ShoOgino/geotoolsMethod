    /**
     * Access to entry to store content of the provided schema, will create new entry if needed.
     *
     * <p>
     *
     * @param schema
     * @return MemoryState used for content storage
     * @throws IOException If new entry could not be created due to typeName conflict
     */
    protected MemoryEntry entry(SimpleFeatureType schema) throws IOException {
        Name typeName = schema.getName();
        synchronized (entries) {
            if (entries.containsKey(typeName)) {
                MemoryEntry entry = (MemoryEntry) entries.get(typeName);
                if (FeatureTypes.equals(entry.schema, schema)) {
                    return entry;
                } else {
                    throw new IOException(
                            "Entry "
                                    + typeName
                                    + " schema "
                                    + entry.schema
                                    + " incompatible with provided "
                                    + schema);
                }
            } else {
                MemoryEntry entry = new MemoryEntry(this, schema);
                entries.put(typeName, entry);
                return entry;
            }
        }
    }

