    public Object visit(BBOX filter, Object extraData) {
        // if no srs is specified we can't transform anyways
        String srs = filter.getSRS();
        if (srs == null || "".equals(srs.trim()))
            return super.visit(filter, extraData);

        try {
            // grab the original envelope data
            double minx = filter.getMinX();
            double miny = filter.getMinY();
            double maxx = filter.getMaxX();
            double maxy = filter.getMaxY();
            // parse the srs, it might be a code or a WKT definition
            CoordinateReferenceSystem crs;
            try {
                crs = CRS.decode(srs);
            } catch (NoSuchAuthorityCodeException e) {
                crs = CRS.parseWKT(srs);
            }

            // grab the property data
            String propertyName = filter.getPropertyName();
            CoordinateReferenceSystem targetCrs = findPropertyCRS(ff.property(propertyName));

            // if there is a mismatch, reproject and replace
            if (crs != null && targetCrs != null && !CRS.equalsIgnoreMetadata(crs, targetCrs)) {
                ReferencedEnvelope envelope = new ReferencedEnvelope(minx, maxx, miny, maxy, crs);
                envelope = envelope.transform(targetCrs, true);
                minx = envelope.getMinX();
                miny = envelope.getMinY();
                maxx = envelope.getMaxX();
                maxy = envelope.getMaxY();

                // set the srs. If we have a code we use it, otherwise we use a WKT definition
                if (targetCrs.getIdentifiers().isEmpty()) {
                    // fall back to WKT
                    srs = targetCrs.toString();
                } else {
                    srs = targetCrs.getIdentifiers().iterator().next().toString();
                }
            }

            return getFactory(extraData).bbox(propertyName, minx, miny, maxx, maxy, srs);
        } catch (Exception e) {
            throw new RuntimeException("Could not decode srs '" + srs + "'", e);
        }

    }

