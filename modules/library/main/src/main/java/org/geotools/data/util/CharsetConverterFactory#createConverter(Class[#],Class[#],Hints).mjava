    @Override
    public Converter createConverter(Class<?> source, Class<?> target, Hints hints) {

        if (CharSequence.class.isAssignableFrom(source) && Charset.class.isAssignableFrom(target)) {
            return new Converter() {
                @Override
                public <T> T convert(Object source, Class<T> target) throws Exception {
                    try {
                        return target.cast(Charset.forName((String) source));
                    } catch (UnsupportedCharsetException e) {
                        // TODO: log this
                        return null;
                    }
                }
            };
        }
        if (Charset.class.isAssignableFrom(source) && CharSequence.class.isAssignableFrom(target)) {
            return new Converter() {
                @Override
                public <T> T convert(Object source, Class<T> target) throws Exception {
                    return target.cast(((Charset) source).toString());
                }
            };
        }

        return null;
    }

