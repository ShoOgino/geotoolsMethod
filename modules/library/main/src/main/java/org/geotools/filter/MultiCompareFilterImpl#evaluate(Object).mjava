    @Override
    public final boolean evaluate(Object feature) {
        final Object object1 = eval(expression1, feature);
        final Object object2 = eval(expression2, feature);

        Collection<Object> collection1 = toCollection(object1);
        Collection<Object> collection2 = toCollection(object2);

        if (collection1 == null && collection2 == null) {
            return evaluateInternal(object1, object2);
        }

        Collection<Object> leftValues =
                collection1 instanceof Collection
                        ? collection1
                        : Collections.singletonList(object1);
        Collection<Object> rightValues =
                collection2 instanceof Collection
                        ? collection2
                        : Collections.singletonList(object2);

        int count = 0;

        for (Object value1 : leftValues) {
            for (Object value2 : rightValues) {
                boolean temp = evaluateInternal(value1, value2);
                if (temp) {
                    count++;
                }

                switch (matchAction) {
                    case ONE:
                        if (count > 1) return false;
                        break;
                    case ALL:
                        if (!temp) return false;
                        break;
                    case ANY:
                        if (temp) return true;
                        break;
                }
            }
        }

        switch (matchAction) {
            case ONE:
                return (count == 1);
            case ALL:
                return true;
            case ANY:
                return false;
            default:
                return false;
        }
    }

