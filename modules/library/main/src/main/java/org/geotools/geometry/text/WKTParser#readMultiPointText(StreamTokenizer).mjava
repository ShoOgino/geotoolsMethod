    /**
     * Creates a {@code MultiPrimitive} using the next token in the stream.
     *
     * @param tokenizer tokenizer on top of a stream of text in Well-known Text
     *                  format. The next tokens must form a &lt;Point Text&gt;.
     * @return a <code>MultiPrimitive</code> specified by the next token
     *         in the stream
     * @throws ParseException if the coordinates used to create the <code>Polygon</code>
     *                        shell and holes do not form closed linestrings, or if an unexpected
     *                        token was encountered.
     * @throws IOException    if an I/O error occurs
     */
    private MultiPrimitive readMultiPointText(StreamTokenizer tokenizer) throws IOException, ParseException {
        String nextToken = getNextEmptyOrOpener(tokenizer);        
        if (nextToken.equals(EMPTY)) {
        	return null;
        }
        MultiPrimitive multi = geometryFactory.createMultiPrimitive();        
        Point point = primitiveFactory.createPoint(getPreciseCoordinate(tokenizer));
        //multi.getElements().add(point);
        Set elements = multi.getElements();
        elements.add(point);
        nextToken = getNextCloserOrComma(tokenizer);
        while (nextToken.equals(COMMA)) {
        	point = primitiveFactory.createPoint(getPreciseCoordinate(tokenizer));
            //multi.getElements().add(point);
        	elements.add(point);
            nextToken = getNextCloserOrComma(tokenizer);
        }
        return multi;
    }

