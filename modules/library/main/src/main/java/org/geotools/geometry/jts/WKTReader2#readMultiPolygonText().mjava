    /**
     * Creates a <code>MultiPolygon</code> using the next token in the stream.
     *
     * @return a <code>MultiPolygon</code> specified by the next token in the stream, or if if the
     *     coordinates used to create the <code>Polygon</code> shells and holes do not form closed
     *     linestrings.
     * @throws IOException if an I/O error occurs
     * @throws ParseException if an unexpected token was encountered
     */
    private MultiPolygon readMultiPolygonText() throws IOException, ParseException {
        String nextToken = getNextEmptyOrOpener();
        if (nextToken.equals(EMPTY)) {
            return geometryFactory.createMultiPolygon(new Polygon[] {});
        }
        ArrayList<Polygon> polygons = new ArrayList<>();
        Polygon polygon = readPolygonText();
        polygons.add(polygon);
        nextToken = getNextCloserOrComma();
        while (nextToken.equals(COMMA)) {
            polygon = readPolygonText();
            polygons.add(polygon);
            nextToken = getNextCloserOrComma();
        }
        Polygon[] array = new Polygon[polygons.size()];
        return geometryFactory.createMultiPolygon(polygons.toArray(array));
    }

