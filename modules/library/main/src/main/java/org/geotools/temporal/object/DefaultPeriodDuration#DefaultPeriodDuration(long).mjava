    /**
     * Creates a new instance of PeriodDuration from a long value passed in parameter. if the long
     * contains milliseconds, this will be ignored because there is no MilliSeconds specified in the
     * string format PnYnMnDTnHnMnS, see ISO 8601.
     *
     * @param durationInMilliSeconds
     */
    public DefaultPeriodDuration(long durationInMilliSeconds) {
        long yearMS = 31536000000L;
        long monthMS = 2628000000L;
        long weekMS = 604800000L;
        long dayMS = 86400000L;
        long hourMS = 3600000L;
        long minMS = 60000L;
        long secondMS = 1000L;

        InternationalString _years = null;
        InternationalString _months = null;
        InternationalString _week = null;
        InternationalString _days = null;
        InternationalString _hours = null;
        InternationalString _minutes = null;
        InternationalString _seconds = null;

        long temp = durationInMilliSeconds / yearMS;
        if (temp >= 1) {
            _years = new SimpleInternationalString(String.valueOf(temp));
            durationInMilliSeconds -= temp * yearMS;
        }
        this.years = _years;

        temp = durationInMilliSeconds / monthMS;
        if (temp >= 1) {
            _months = new SimpleInternationalString(String.valueOf(temp));
            durationInMilliSeconds -= temp * monthMS;
        }
        this.months = _months;

        temp = durationInMilliSeconds / weekMS;
        if (temp >= 1) {
            _week = new SimpleInternationalString(String.valueOf(temp));
            durationInMilliSeconds -= temp * weekMS;
        }
        this.weeks = _week;

        // we look if the gap is more than one day (86400000 ms)
        temp = durationInMilliSeconds / dayMS;
        if (temp >= 1) {
            _days = new SimpleInternationalString(String.valueOf(temp));
            durationInMilliSeconds -= temp * dayMS;
        }
        this.days = _days;

        temp = durationInMilliSeconds / hourMS;
        if (temp >= 1) {
            _hours = new SimpleInternationalString(String.valueOf(temp));
            durationInMilliSeconds -= temp * hourMS;
        }
        this.hours = _hours;

        temp = durationInMilliSeconds / minMS;
        if (temp >= 1) {
            _minutes = new SimpleInternationalString(String.valueOf(temp));
            durationInMilliSeconds -= temp * minMS;
        }
        this.minutes = _minutes;

        temp = durationInMilliSeconds / secondMS;
        if (temp >= 1) {
            _seconds = new SimpleInternationalString(String.valueOf(temp));
            durationInMilliSeconds -= temp * secondMS;
        }
        this.seconds = _seconds;

        /*if (durationInMilliSeconds != 0) {
        throw new IllegalArgumentException("PeriodDuration can't be found at the Millisecond precision in the pattern PnYnMnDTnHnMnS specified by ISO 8601.");
        }*/
    }

