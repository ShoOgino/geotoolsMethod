    public static Map loadFilterTypeToFilterCapabilitiesMap() {
        Map conversionMap = new HashMap();
        conversionMap.put(
                Short.valueOf(FilterType.BETWEEN),
                new FilterCapabilities(FilterCapabilities.BETWEEN));
        conversionMap.put(
                Short.valueOf(FilterType.COMPARE_EQUALS),
                new FilterCapabilities(FilterCapabilities.COMPARE_EQUALS));
        conversionMap.put(
                Short.valueOf(FilterType.COMPARE_GREATER_THAN),
                new FilterCapabilities(FilterCapabilities.COMPARE_GREATER_THAN));
        conversionMap.put(
                Short.valueOf(FilterType.COMPARE_GREATER_THAN_EQUAL),
                new FilterCapabilities(FilterCapabilities.COMPARE_GREATER_THAN_EQUAL));
        conversionMap.put(
                Short.valueOf(FilterType.COMPARE_LESS_THAN),
                new FilterCapabilities(FilterCapabilities.COMPARE_LESS_THAN));
        conversionMap.put(
                Short.valueOf(FilterType.COMPARE_LESS_THAN_EQUAL),
                new FilterCapabilities(FilterCapabilities.COMPARE_LESS_THAN_EQUAL));
        conversionMap.put(
                Short.valueOf(FilterType.COMPARE_NOT_EQUALS),
                new FilterCapabilities(FilterCapabilities.COMPARE_NOT_EQUALS));
        conversionMap.put(
                Short.valueOf(FilterType.FID), new FilterCapabilities(FilterCapabilities.FID));
        conversionMap.put(
                Short.valueOf(FilterType.GEOMETRY_BBOX),
                new FilterCapabilities(FilterCapabilities.SPATIAL_BBOX));
        conversionMap.put(
                Short.valueOf(FilterType.GEOMETRY_BEYOND),
                new FilterCapabilities(FilterCapabilities.SPATIAL_BEYOND));
        conversionMap.put(
                Short.valueOf(FilterType.GEOMETRY_CONTAINS),
                new FilterCapabilities(FilterCapabilities.SPATIAL_CONTAINS));
        conversionMap.put(
                Short.valueOf(FilterType.GEOMETRY_CROSSES),
                new FilterCapabilities(FilterCapabilities.SPATIAL_CROSSES));
        conversionMap.put(
                Short.valueOf(FilterType.GEOMETRY_DISJOINT),
                new FilterCapabilities(FilterCapabilities.SPATIAL_DISJOINT));
        conversionMap.put(
                Short.valueOf(FilterType.GEOMETRY_DWITHIN),
                new FilterCapabilities(FilterCapabilities.SPATIAL_DWITHIN));
        conversionMap.put(
                Short.valueOf(FilterType.GEOMETRY_EQUALS),
                new FilterCapabilities(FilterCapabilities.SPATIAL_EQUALS));
        conversionMap.put(
                Short.valueOf(FilterType.GEOMETRY_INTERSECTS),
                new FilterCapabilities(FilterCapabilities.SPATIAL_INTERSECT));
        conversionMap.put(
                Short.valueOf(FilterType.GEOMETRY_OVERLAPS),
                new FilterCapabilities(FilterCapabilities.SPATIAL_OVERLAPS));
        conversionMap.put(
                Short.valueOf(FilterType.GEOMETRY_TOUCHES),
                new FilterCapabilities(FilterCapabilities.SPATIAL_TOUCHES));
        conversionMap.put(
                Short.valueOf(FilterType.GEOMETRY_WITHIN),
                new FilterCapabilities(FilterCapabilities.SPATIAL_WITHIN));
        conversionMap.put(
                Short.valueOf(FilterType.LIKE), new FilterCapabilities(FilterCapabilities.LIKE));
        conversionMap.put(
                Short.valueOf(FilterType.LOGIC_AND),
                new FilterCapabilities(FilterCapabilities.LOGIC_AND));
        conversionMap.put(
                Short.valueOf(FilterType.LOGIC_NOT),
                new FilterCapabilities(FilterCapabilities.LOGIC_NOT));
        conversionMap.put(
                Short.valueOf(FilterType.LOGIC_OR),
                new FilterCapabilities(FilterCapabilities.LOGIC_OR));
        conversionMap.put(
                Short.valueOf(FilterType.NULL),
                new FilterCapabilities(FilterCapabilities.NULL_CHECK));
        return conversionMap;
    }

