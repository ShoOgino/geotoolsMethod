    /**
     * Produces the next ID number based on count, duration and the current time. The uniquity is
     * 'good enough' although not provable as per security systems. The method used will probably
     * have to be changed later, the api is what is important right now.
     *
     * <table border=1, bgcolor="lightgray", width="100%"><tr><td><code><pre>
     * count: 000000000000000000000000000001011 (increasing count)
     *  date: 000000000001111010101010101000000 (expriry date milliseconds usually empty)
     *    now: 000101100111011010011111000000000 (bit order reverse of current time)
     *         ---------------------------------
     * number: 000101100110100000110101001001011
     * </pre></code></td></tr></table>
     *
     * Once again method is package visible for testing.
     *
     * @param duration The time for the lock to last.
     * @return The next generated id number.
     */
    static long nextIdNumber(long duration) {
        long number;
        long now = System.currentTimeMillis();
        long time = now + duration;

        // start of with number
        count++;
        number = count;
        number = number ^ time; // count fills 'empty' milliseconds

        StringBuffer reverse = new StringBuffer(asBits(now));
        now = Long.parseLong(reverse.reverse().toString(), 2); // flip now around

        number = number ^ now;

        return number;
    }

