    /**
     * To be called by a parser to start the creation of a logic filter. Can start a nested or a
     * base logic filter.
     *
     * @param logicType OR, or AND abstract filter type.
     * @throws IllegalFilterException if filter type does not match declared type.
     */
    // logic types are AND=2, OR=1, NOT=3
    public void start(short logicType) throws IllegalFilterException {
        LOGGER.finest("got a start element: " + logicType);

        if (this.logicType != -1) {
            // DJB: for GEOS-328 we need to keep the old parser around to handle multiple nestings
            // of logic operators.
            if (logicFactory == null) {
                logicFactory = new LogicSAXParser();
            }
            logicFactory.start(logicType);
        } else if (!AbstractFilter.isLogicFilter(logicType)) {
            throw new IllegalFilterException("Add logic filter type does not match declared type.");
        } else {
            this.logicType = logicType;
        }
    }

