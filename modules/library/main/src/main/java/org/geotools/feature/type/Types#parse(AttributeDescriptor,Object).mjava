    /**
     * Do our best to make the provided value line up with the needs of descriptor.
     *
     * <p>This helper method uses the Coverters api to convert the provided value into the required
     * class. If the value is null (and the attribute is not nillable) a default value will be
     * returned.
     *
     * @param descriptor Attribute descriptor we need to supply a value for.
     * @param value The provided value
     * @return Our best attempt to make a valid value
     * @throws IllegalArgumentException if we really could not do it.
     */
    public static Object parse(AttributeDescriptor descriptor, Object value)
            throws IllegalArgumentException {
        if (value == null) {
            if (descriptor.isNillable()) {
                return descriptor.getDefaultValue();
            }
        } else {
            Class target = descriptor.getType().getBinding();
            if (!target.isAssignableFrom(value.getClass())) {
                // attempt to convert
                Object converted = Converters.convert(value, target);
                if (converted != null) {
                    return converted;
                }
                //                else {
                //                    throw new IllegalArgumentException( descriptor.getLocalName()+
                // " could not convert "+value+" into "+target);
                //                }
            }
        }
        return value;
    }

