    /**
     * Parse long value from text. Long values are parsed with optional leading sign flag, followed
     * by any number of digits.
     *
     * @param text text to be parsed
     * @return converted long value
     * @throws IllegalArgumentException on parse error
     */
    public static long parseLong(String text) throws IllegalArgumentException {
        // make sure there's text to be processed
        text = text.trim();

        int offset = 0;
        int limit = text.length();

        if (limit == 0) {
            throw new IllegalArgumentException("Empty number value");
        }

        // check leading sign present in text
        boolean negate = false;
        char chr = text.charAt(0);

        if (chr == '-') {
            negate = true;
            offset++;
        } else if (chr == '+') {
            offset++;
        }

        if (offset >= limit) {
            throw new IllegalArgumentException("Invalid number format");
        }

        // check if overflow a potential problem
        long value = 0;

        if ((limit - offset) > 18) {
            // pass text to library parse code (less leading +)
            if (chr == '+') {
                text = text.substring(1);
            }

            try {
                value = Long.parseLong(text);
            } catch (NumberFormatException ex) {
                throw new IllegalArgumentException(ex.getMessage());
            }
        } else {
            // parse with no overflow worries
            while (offset < limit) {
                chr = text.charAt(offset++);

                if ((chr >= '0') && (chr <= '9')) {
                    value = (value * 10) + (chr - '0');
                } else {
                    throw new IllegalArgumentException("Non-digit in number value");
                }
            }

            if (negate) {
                value = -value;
            }
        }

        return value;
    }

