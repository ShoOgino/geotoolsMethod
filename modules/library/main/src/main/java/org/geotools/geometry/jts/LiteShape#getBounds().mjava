    /**
     * Returns an integer {@link Rectangle} that completely encloses the
     * <code>Shape</code>.  Note that there is no guarantee that the returned
     * <code>Rectangle</code> is the smallest bounding box that encloses the
     * <code>Shape</code>, only that the <code>Shape</code> lies entirely
     * within the indicated  <code>Rectangle</code>.  The returned
     * <code>Rectangle</code> might also fail to completely enclose the
     * <code>Shape</code> if the <code>Shape</code> overflows the limited
     * range of the integer data type.  The <code>getBounds2D</code> method
     * generally returns a tighter bounding box due to its greater flexibility
     * in representation.
     *
     * @return an integer <code>Rectangle</code> that completely encloses the
     *         <code>Shape</code>.
     *
     * @see #getBounds2D
     */
    public Rectangle getBounds() {
        Coordinate[] coords = geometry.getEnvelope().getCoordinates();

        // get out corners. the documentation doens't specify in which
        // order the bounding box coordinates are returned
        double x1;

        // get out corners. the documentation doens't specify in which
        // order the bounding box coordinates are returned
        double y1;

        // get out corners. the documentation doens't specify in which
        // order the bounding box coordinates are returned
        double x2;

        // get out corners. the documentation doens't specify in which
        // order the bounding box coordinates are returned
        double y2;
        x1 = x2 = coords[0].x;
        y1 = y2 = coords[0].y;

        for (int i = 1; i < 3; i++) {
            double x = coords[i].x;
            double y = coords[i].y;

            if (x < x1) {
                x1 = x;
            }

            if (x > x2) {
                x2 = x;
            }

            if (y < y1) {
                y1 = y;
            }

            if (y > y2) {
                y2 = y;
            }
        }

        x1 = Math.ceil(x1);
        x2 = Math.floor(x2);
        y1 = Math.ceil(y1);
        y2 = Math.floor(y2);

        return new Rectangle((int) x1, (int) y1, (int) (x2 - x1),
            (int) (y2 - y1));
    }

