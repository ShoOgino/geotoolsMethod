    /**
     * Create a CoordinateWriter for outputting GML coordinates.
     *
     * <p>The use of dimension, z and useZ is based on your needs:
     *
     * <ul>
     *   <li>dimension: is from your CoordinateReferenceSystem; it is the number of axis used by the
     *       coordinate
     *   <li>useZ: is used to force the use of 3 dimensions (if needed the z value below will be
     *       used for 2D data)
     *   <li>z: the dummy z value to use if the coordinate does not have one
     * </ul>
     *
     * @param numDecimals Number of decimals to use (a speed vs accuracy trade off)
     * @param tupleDelim delimiter to use between ordinates (usually ',')
     * @param coordDelim delimiter to use between coordinates (usually ' ')
     * @param useZ true if the provided zValue should be forced
     * @param z Dummy z value to use if needed
     * @param dimension Dimension of coordinates (usually 2 or 3)
     */
    public CoordinateWriter(
            int numDecimals,
            String tupleDelim,
            String coordDelim,
            boolean useZ,
            double z,
            int dimension) {
        if (tupleDelim == null || tupleDelim.length() == 0) {
            throw new IllegalArgumentException("Tuple delimeter cannot be null or zero length");
        }
        if ((coordDelim != null) && coordDelim.length() == 0) {
            throw new IllegalArgumentException(
                    "Coordinate delimeter cannot be null or zero length");
        }
        D = dimension;

        tupleDelimiter = tupleDelim;
        coordinateDelimiter = coordDelim;

        coordFormatter = new CoordinateFormatter(numDecimals);
        coordFormatter.setForcedDecimal(true);

        String uri = namespaceUri;
        if (!namespaceAware) {
            uri = null;
        }

        atts.addAttribute(uri, "decimal", "decimal", "decimal", ".");
        atts.addAttribute(uri, "cs", "cs", "cs", coordinateDelimiter);
        atts.addAttribute(uri, "ts", "ts", "ts", tupleDelimiter);

        this.useDummyZ = useZ;
        this.dummyZ = z;
    }

