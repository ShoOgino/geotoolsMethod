    /**
     * Convert expression to a constant for use in switch statements. This is an alternative to
     * performing instanceof checks. p> This utility method for those upgrading to a newer version
     * of GeoTools, instance of checks are preferred as they will take into account new kinds of
     * expressions as the filter specification grows over time. Example:
     *
     * <pre>
     * <code>
     * BEFORE: expression.getType() == ExpressionType.MATH_ADD
     * QUICK:  Filters.getExpressionType( expression ) == ExpressionType.MATH_ADD
     * AFTER: expression instanceof Add
     * </code>
     * </pre>
     *
     * @see ExpressionType
     * @return ExpressionType constant.
     */
    public static short getExpressionType(org.opengis.filter.expression.Expression experssion) {
        if (experssion == null) return 0;
        else if (experssion instanceof PropertyName) return ExpressionType.ATTRIBUTE;
        else if (experssion instanceof Function) return ExpressionType.FUNCTION;
        else if (experssion instanceof Literal) {
            Literal literal = (Literal) experssion;
            Object value = literal.getValue();
            if (value == null) {
                return ExpressionType.LITERAL_UNDECLARED;
            } else if (value instanceof Double) {
                return ExpressionType.LITERAL_DOUBLE;
            } else if (value instanceof Integer) {
                return ExpressionType.LITERAL_INTEGER;
            } else if (value instanceof Long) {
                return ExpressionType.LITERAL_LONG;
            } else if (value instanceof String) {
                return ExpressionType.LITERAL_STRING;
            } else if (value instanceof Geometry) {
                return ExpressionType.LITERAL_GEOMETRY;
            } else if (value instanceof Envelope) {
                return ExpressionType.LITERAL_GEOMETRY;
            } else {
                return ExpressionType.LITERAL_UNDECLARED;
            }
        } else if (experssion instanceof Add) {
            return ExpressionType.MATH_ADD;
        } else if (experssion instanceof Divide) {
            return ExpressionType.MATH_DIVIDE;
        } else if (experssion instanceof Multiply) {
            return ExpressionType.MATH_MULTIPLY;
        } else if (experssion instanceof Subtract) {
            return ExpressionType.MATH_SUBTRACT;
        } else {
            return 0;
        }
    }

