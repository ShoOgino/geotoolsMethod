    /**
     * Removes all this collection's elements that are also contained in the specified collection
     * (optional operation). After this call returns, this collection will contain no elements in
     * common with the specified collection.
     * 
     * @param collection
     *            elements to be removed from this collection.
     * 
     * @return <tt>true</tt> if this collection changed as a result of the call
     * 
     * @see #remove(Object)
     * @see #contains(Object)
     */
    @SuppressWarnings("unchecked")
    public boolean removeAll(Collection collection) {
        boolean changed = false;
        Iterator iterator = collection.iterator();
        try {
            List removedFeatures = new ArrayList(collection.size());
            while (iterator.hasNext()) {
                SimpleFeature f = (SimpleFeature) iterator.next();
                boolean removed = contents.values().remove(f);

                if (removed) {
                    changed = true;
                    removedFeatures.add(f);
                }
            }

            if (changed) {
                fireChange(removedFeatures, CollectionEvent.FEATURES_REMOVED);
            }

            return changed;
        } finally {
            if (collection instanceof FeatureCollection) {
                ((SimpleFeatureCollection) collection).close(iterator);
            }
        }
    }

