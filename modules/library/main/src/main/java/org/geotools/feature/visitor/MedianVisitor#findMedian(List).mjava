    /**
     * Given a list, determines the median value and returns it. For numbers, the middle value is
     * returned, or the average of the two middle numbers if there are an even number of elements.
     * For non-numeric values (strings, etc) where the number of elements is even, a list containing
     * the two middle elements is returned.
     *
     * @param list an arraylist which is to be sorted and its median extracted
     * @return the median
     */
    private static Object findMedian(List list) {
        if (list.size() < 1) {
            return null;
        }
        Object median;
        Collections.sort(list);

        int index = -1;
        index = (int) list.size() / 2;

        if ((list.size() % 2) == 0) {
            // even number of elements, so we must average the 2 middle ones, or
            // return a list for non-numeric elements
            Object input1 = list.get(index - 1);
            Object input2 = list.get(index);

            if ((input1 instanceof Number) && (input2 instanceof Number)) {
                Number num1 = (Number) input1;
                Number num2 = (Number) input2;
                Number[] numbers = new Number[2];
                numbers[0] = num1;
                numbers[1] = num2;
                median = CalcUtil.average(numbers);
            } else { // NaN
                // return a list containing the two middle elements
                List newList = new ArrayList();
                newList.add(input1);
                newList.add(input2);
                median = newList;
            }
        } else {
            // an odd number of elements are in the list, so we simply return
            // the one in the middle, which we've already calculated the index
            // for.
            median = list.get(index);
        }
        return median;
    }

