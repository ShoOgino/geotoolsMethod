    /**
      * Determines whether or not a given feature matches this pattern.
      *
      * @param feature Specified feature to examine.
      *
      * @return Flag confirming whether or not this feature is inside the
      *         filter.
      *
      * @task REVISIT: could the pattern be null such that a null = null?
      */
    public boolean evaluate(Object feature) {
        //Checks to ensure that the attribute has been set
        if (attribute == null) {
            return false;
        }
            // Note that this converts the attribute to a string
            //  for comparison.  Unlike the math or geometry filters, which
            //  require specific types to function correctly, this filter
            //  using the mandatory string representation in Java
            // Of course, this does not guarantee a meaningful result, but it
            //  does guarantee a valid result.
            //LOGGER.finest("pattern: " + pattern);
            //LOGGER.finest("string: " + attribute.getValue(feature));
            //return attribute.getValue(feature).toString().matches(pattern);
            
            Object value = eval(attribute, feature);

            if (null == value) {
                return false;
            }
            
            //NC - support multiple values            
            if (value instanceof Collection) {
                int count = 0;
                
                for (Object element : (Collection<Object>) value){
                    Matcher matcher = getMatcher(element.toString());
                    boolean temp = matcher.matches();
                    if (temp) {
                        count++;
                    }
                       
                    switch (matchAction){
                        case ONE: if (count > 1) return false; break;
                        case ALL: if (!temp) return false; break;
                        case ANY: if (temp) return true; break;
                    } 
                }
                switch (matchAction){
                    case ONE: return (count == 1);
                    case ALL: return true;
                    case ANY: return false;
                    default: return false;
                }
            } else {
                Matcher matcher = getMatcher(value.toString());
                return matcher.matches();
            }
    }

