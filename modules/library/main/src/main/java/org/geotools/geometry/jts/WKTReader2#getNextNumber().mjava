    /**
     * Parses the next number in the stream. Numbers with exponents are handled. <tt>NaN</tt> values
     * are handled correctly, and the case of the "NaN" token is not significant.
     *
     * @return the next number in the stream
     * @throws ParseException if the next token is not a valid number
     * @throws IOException if an I/O error occurs
     */
    private double getNextNumber() throws IOException, ParseException {
        int type = tokenizer.nextToken();
        switch (type) {
            case StreamTokenizer.TT_WORD:
                {
                    if (tokenizer.sval.equalsIgnoreCase(NAN_SYMBOL)) {
                        return Double.NaN;
                    } else {
                        try {
                            return Double.parseDouble(tokenizer.sval);
                        } catch (NumberFormatException ex) {
                            throw new ParseException("Invalid number: " + tokenizer.sval);
                        }
                    }
                }
        }
        parseError("number");
        return 0.0;
    }

