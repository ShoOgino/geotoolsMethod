    /**
     * Decode a chunk of data from base64 encoding. The length of a chunk is always 4 characters in
     * the base64 representation, but may be 1, 2, or 3 bytes of data, as determined by whether
     * there are any pad characters at the end of the base64 representation
     *
     * @param base starting offset within base64 character array
     * @param chrs character array for base64 text representation
     * @param fill starting offset within byte data array
     * @param byts byte data array
     * @return number of decoded bytes
     * @throws IllegalArgumentException if invalid character in base64 representation
     */
    private static int decodeChunk(int base, char[] chrs, int fill, byte[] byts)
            throws IllegalArgumentException {
        // find the byte count to be decoded
        int length = 3;

        if (chrs[base + 3] == PAD_CHAR) {
            length = 2;

            if (chrs[base + 2] == PAD_CHAR) {
                length = 1;
            }
        }

        // get 6-bit values
        int v0 = s_base64Values[chrs[base + 0]];
        int v1 = s_base64Values[chrs[base + 1]];
        int v2 = s_base64Values[chrs[base + 2]];
        int v3 = s_base64Values[chrs[base + 3]];

        // convert and store bytes of data
        switch (length) {
            case 3:
                byts[fill + 2] = (byte) ((v2 << 6) | v3);

            case 2:
                byts[fill + 1] = (byte) ((v1 << 4) | (v2 >> 2));

            case 1:
                byts[fill] = (byte) ((v0 << 2) | (v1 >> 4));

                break;
        }

        return length;
    }

