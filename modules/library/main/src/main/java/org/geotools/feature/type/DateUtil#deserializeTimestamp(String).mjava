    /**
     * Deserialize timestamp from general dateTime text. Timestamp values are
     * represented in the same way as regular dates, but allow more precision
     * in the fractional second value (down to nanoseconds). This method
     * follows standard JiBX deserializer usage requirements by accepting a
     * <code>null</code> input.
     *
     * @param text text to be parsed (may be <code>null</code>)
     *
     * @return converted timestamp, or <code>null</code> if passed
     *         <code>null</code> input
     *
     * @throws IllegalArgumentException on parse error
     */
    public static Timestamp deserializeTimestamp(String text)
        throws IllegalArgumentException {
        if (text == null) {
            return null;
        } else {
            // check for fractional second value present
            int split = text.indexOf('.');
            int nano = 0;

            if (split > 0) {
                // make sure there aren't multiple decimal points
                if (text.indexOf('.', split) > 0) {
                    throw new IllegalArgumentException(
                        "Not a valid dateTime value");
                }

                // scan through all digits following decimal point
                int limit = text.length();
                int scan = split;

                while (++scan < limit) {
                    char chr = text.charAt(scan);

                    if ((chr < '0') || (chr > '9')) {
                        break;
                    }
                }

                // parse digits following decimal point
                int length = scan - split - 1;

                if (length > 9) {
                    length = 9;
                }

                nano = parseDigits(text, split + 1, length);

                // convert to number of nanoseconds
                while (length < 9) {
                    nano *= 10;
                    length++;
                }

                // strip fractional second off text
                if (scan < limit) {
                    text = text.substring(0, split) + text.substring(scan);
                } else {
                    text = text.substring(0, split);
                }
            }

            // return timestamp value with nanoseconds
            Timestamp stamp = new Timestamp(parseDateTime(text));
            stamp.setNanos(nano);

            return stamp;
        }
    }

