    /**
     * Look up a function for the provided name, may return a FallbackFunction if an implementation
     * could not be found.
     *
     * <p>You can create a function to represent an SQL function or a function hosted on an external
     * service; the fallback value will be used if you evulate by a Java implementation on the
     * classpath.
     *
     * @param name Function name; this will need to be an exact match
     * @param parameters Set of Expressions to use as function parameters
     * @param fallback Literal to use if an implementation could not be found
     * @return Function for the provided name, may be a FallbackFunction if an implementation could
     *     not be found
     */
    public Function findFunction(Name name, List<Expression> parameters, Literal fallback) {
        // try name as is
        Function f = findFunctionInternal(name, parameters, fallback);

        if (f == null) {
            // try by trimming "Function" off of name
            if (name.getLocalPart().endsWith("Function")) {
                String local = name.getLocalPart();
                local = local.substring(0, local.length() - "Function".length());
                name = new NameImpl(name.getNamespaceURI(), name.getSeparator(), local);
                f = findFunctionInternal(name, parameters, fallback);
            }
        }
        if (f == null && fallback != null) {
            return new FallbackFunction(name, parameters, fallback);
        }

        if (f != null) {
            return f;
        }

        throw new RuntimeException("Unable to find function " + name);
    }

