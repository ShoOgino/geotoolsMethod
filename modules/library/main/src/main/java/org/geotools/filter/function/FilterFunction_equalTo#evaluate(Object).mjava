    public Object evaluate(Object feature) {
        Expression arg0 = getExpression(0);
        Expression arg1 = getExpression(1);
        MatchAction matchAction = null;

        if (getParameters().size() > 2) {
            try { // attempt to get value and perform conversion
                matchAction = (MatchAction) getExpression(2).evaluate(feature, MatchAction.class);
            } catch (Exception e) // probably a type error
            {
                throw new IllegalArgumentException(
                        "Filter Function problem for function equalTo argument #2 - expected one of ANY, ONE or ALL");
            }
        }
        Filter equalTo =
                matchAction == null
                        ? getFilterFactory2().equal(arg0, arg1, false)
                        : getFilterFactory2().equal(arg0, arg1, false, matchAction);

        return equalTo.evaluate(feature);
    }

