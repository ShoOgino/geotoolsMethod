    /**
     * Issues a request to the server and returns that server's response. It asks the server to send
     * the response gzipped to provide a faster transfer time.
     *
     * @param request the request to be issued
     * @return a response from the server, which is created according to the specific Request
     * @throws IOException if there was a problem communicating with the server
     * @throws ServiceException if the server responds with an exception or returns bad content
     */
    protected Response internalIssueRequest(Request request) throws IOException, ServiceException {
        final URL finalURL = request.getFinalURL();
        LOGGER.fine("FinalURL:" + finalURL);
        boolean success = false;
        try {
            final HTTPResponse httpResponse;

            if (request.requiresPost()) {

                final String postContentType = request.getPostContentType();

                // For logging use the internals of HTTPClientFactory
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                request.performPostOutput(out);
                try (InputStream in = getStream(out)) {
                    httpResponse = httpClient.post(finalURL, in, postContentType);
                }
            } else {
                if (headers == null) {
                    httpResponse = httpClient.get(finalURL);
                } else {
                    httpResponse = httpClient.get(finalURL, headers);
                }
            }

            final Response response = request.createResponse(httpResponse);
            success = true;
            if (LOGGER.isLoggable(Level.FINE)) {
                LOGGER.fine("Executed request to URL: " + finalURL.toExternalForm());
            }

            return response;
        } finally {
            if (!success) {
                LOGGER.log(Level.SEVERE, "Failed to execute request " + finalURL);
            }
        }
    }

