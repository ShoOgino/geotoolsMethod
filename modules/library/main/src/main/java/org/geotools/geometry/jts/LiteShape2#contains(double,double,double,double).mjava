	/**
	 * Tests if the interior of the <code>Shape</code> entirely contains the
	 * specified rectangular area. All coordinates that lie inside the
	 * rectangular area must lie within the <code>Shape</code> for the entire
	 * rectanglar area to be considered contained within the <code>Shape</code>.
	 * 
	 * <p>
	 * This method might conservatively return <code>false</code> when:
	 * 
	 * <ul>
	 * <li>the <code>intersect</code> method returns <code>true</code> and
	 * </li>
	 * <li>the calculations to determine whether or not the <code>Shape</code>
	 * entirely contains the rectangular area are prohibitively expensive.</li>
	 * </ul>
	 * 
	 * This means that this method might return <code>false</code> even though
	 * the <code>Shape</code> contains the rectangular area. The
	 * <code>Area</code> class can be used to perform more accurate
	 * computations of geometric intersection for any <code>Shape</code>
	 * object if a more precise answer is required.
	 * </p>
	 * 
	 * @param x
	 *            the coordinates of the specified rectangular area, x value
	 * @param y
	 *            the coordinates of the specified rectangular area, y value
	 * @param w
	 *            the width of the specified rectangular area
	 * @param h
	 *            the height of the specified rectangular area
	 * 
	 * @return <code>true</code> if the interior of the <code>Shape</code>
	 *         entirely contains the specified rectangular area;
	 *         <code>false</code> otherwise or, if the <code>Shape</code>
	 *         contains the rectangular area and the <code>intersects</code>
	 *         method returns <code>true</code> and the containment
	 *         calculations would be too expensive to perform.
	 * 
	 * @see java.awt.geom.Area
	 * @see #intersects
	 */
	public boolean contains(double x, double y, double w, double h) {
		Geometry rect = createRectangle(x, y, w, h);

		return geometry.contains(rect);
	}

