    /**
     * Checks mutability of featureID for this transaction.
     *
     * <p>Two behaviors are defined by FeatureLocking:
     *
     * <ul>
     *   <li>TransactionLock (Blocking): lock held by a Transaction<br>
     *       Authorization is granted to the Transaction holding the Lock. Conflict will result in a
     *       block until the Transaction holding the lock completes. (This behavior is equivalent to
     *       a Database row-lock, or a java synchronized statement)
     *   <li>FeatureLock (Error): lock held by a FeatureLock<br>
     *       Authorization is based on the set of Authorization IDs held by the provided
     *       Transaction. Conflict will result in an error. (This behavior is equivalent to the WFS
     *       locking specification)
     * </ul>
     *
     * <p>Right now we are just going to error out with an exception
     *
     * @param typeName Feature type to check against
     * @param featureID FeatureID to check
     * @param transaction Provides Authorization
     * @throws FeatureLockException If transaction does not have sufficient authroization
     */
    public void assertAccess(String typeName, String featureID, Transaction transaction)
            throws FeatureLockException {
        Lock lock = getLock(typeName, featureID);

        // LOGGER.info("asserting access on lock for " + typeName + ", fid: "
        //  + featureID + ", transaction: " + transaction + ", lock " + lock);

        if ((lock != null) && !lock.isAuthorized(transaction)) {
            throw new FeatureLockException(
                    "Transaction does not have authorization for " + typeName + ":" + featureID);
        }
    }

