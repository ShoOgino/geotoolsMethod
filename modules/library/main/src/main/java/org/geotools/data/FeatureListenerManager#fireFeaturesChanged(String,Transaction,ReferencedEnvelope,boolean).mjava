    /**
     * Notify all listeners that have registered interest for notification on this event type.
     *
     * <p>This method is called by:
     *
     * <ul>
     *   <li>FeatureWriter.next() with FeatureWriter.hasNext() == true <br>
     *       - when an existing Feature is modified with Tranasaction.AUTO_COMMIT all listeners
     *       registered with SimpleFeatureSource of typeName will be notified.
     *   <li>FeatureWriter.next()with FeatureWriter.hasNext() == true <br>
     *       - when an existing Feature is modified, with a Transaction all listeners registered
     *       with SimpleFeatureSource of typeName and with the same Transaction will be notified.
     * </ul>
     *
     * <p><b>NOTE</b> requiring to fire this event at FeatureWriter.next() is quite a gap inherited
     * from an old API when {@link FeatureWriter#write()} didn't exist yet. It's a good idea though
     * to fire the event at FeatureWriter.write() instead of FeatureWriter.next() so there are
     * actually changes to notify for.
     *
     * @param typeName typeName being modified
     * @param transaction Transaction used for change
     * @param bounds BoundingBox of changes (may be <code>null</code> if unknown)
     */
    public void fireFeaturesChanged(
            String typeName, Transaction transaction, ReferencedEnvelope bounds, boolean commit) {
        if (commit) {
            fireCommit(typeName, transaction, FeatureEvent.FEATURES_CHANGED, bounds);
        } else {
            fireEvent(typeName, transaction, FeatureEvent.FEATURES_CHANGED, bounds);
        }
    }

