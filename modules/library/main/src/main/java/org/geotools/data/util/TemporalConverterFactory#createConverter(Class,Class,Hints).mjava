    public Converter createConverter(Class source, Class target, Hints hints) {
        boolean isSafeOnly = false;

        if (hints != null) {
            Object safe = hints.get(ConverterFactory.SAFE_CONVERSION);
            if (safe instanceof Boolean && ((Boolean) safe).booleanValue()) {
                isSafeOnly = true;
            }
        }

        if (Date.class.isAssignableFrom(source)) {
            // handle all of (java.util.Date,java.sql.Timestamp,and java.sql.Time) ->
            // java.util.Calendar
            if (Calendar.class.isAssignableFrom(target)) {
                if (isSafeOnly && Timestamp.class.isAssignableFrom(source)) {
                    // java.sql.Timestamp -> Calendar is not a safe conversion
                    return null;
                }

                return new Converter() {
                    public <T> T convert(Object source, Class<T> target) throws Exception {
                        Calendar calendar = Calendar.getInstance();
                        calendar.setTime((Date) source);

                        return target.cast(calendar);
                    }
                };
            }

            // handle all of (java.util.Date) -> (java.sql.Timestamp,java.sql.Time)
            if (Timestamp.class.isAssignableFrom(target)
                    || Time.class.isAssignableFrom(target)
                    || java.sql.Date.class.isAssignableFrom(target)) {

                if (isSafeOnly && Time.class.isAssignableFrom(target)) {
                    // not safe
                    return null;
                }

                return new Converter() {

                    public <T> T convert(Object source, Class<T> target) throws Exception {
                        Date date = (Date) source;
                        return target.cast(timeMillisToDate(date.getTime(), target));
                    }
                };
            }

            if (XMLGregorianCalendar.class.isAssignableFrom(target)) {
                return new Converter() {
                    public <T> T convert(Object source, Class<T> target) throws Exception {
                        Date date = (Date) source;
                        Calendar calendar =
                                createConverter(Date.class, Calendar.class, null)
                                        .convert(date, Calendar.class);

                        return target.cast(
                                createConverter(Calendar.class, XMLGregorianCalendar.class, null)
                                        .convert(calendar, XMLGregorianCalendar.class));
                    }
                };
            }

            if (Long.class.equals(target)) {
                return new Converter() {
                    public <T> T convert(Object source, Class<T> target) throws Exception {
                        return target.cast(Long.valueOf(((Date) source).getTime()));
                    }
                };
            }
        }

        // this should handle java.util.Calendar to
        // (java.util.Date,java.sql.Timestamp,java.util.Time}
        if (Calendar.class.isAssignableFrom(source)) {
            if (Date.class.isAssignableFrom(target)) {
                if (isSafeOnly && Time.class.isAssignableFrom(target)) {
                    // Calendar -> Time is not saf
                    return null;
                }
                return new Converter() {
                    public <T> T convert(Object source, Class<T> target) throws Exception {
                        Calendar calendar = (Calendar) source;

                        return target.cast(
                                timeMillisToDate(
                                        calendar.getTimeInMillis(),
                                        target,
                                        calendar.getTimeZone()));
                    }
                };
            }
            if (XMLGregorianCalendar.class.isAssignableFrom(target)) {
                return new Converter() {
                    public <T> T convert(Object source, Class<T> target) throws Exception {
                        if (source instanceof GregorianCalendar) {
                            return target.cast(
                                    DatatypeFactory.newInstance()
                                            .newXMLGregorianCalendar((GregorianCalendar) source));
                        }

                        return null;
                    }
                };
            }
        }

        if (XMLGregorianCalendar.class.isAssignableFrom(source)) {
            if (Calendar.class.isAssignableFrom(target)) {
                return new Converter() {
                    public <T> T convert(Object source, Class<T> target) throws Exception {
                        XMLGregorianCalendar calendar = (XMLGregorianCalendar) source;
                        return target.cast(calendar.toGregorianCalendar());
                    }
                };
            }
            if (Date.class.isAssignableFrom(target)) {
                return new Converter() {
                    public <T> T convert(Object source, Class<T> target) throws Exception {
                        Calendar calendar =
                                createConverter(XMLGregorianCalendar.class, Calendar.class, null)
                                        .convert(source, Calendar.class);
                        if (calendar != null) {
                            return target.cast(
                                    createConverter(Calendar.class, target, null)
                                            .convert(calendar, target));
                        }
                        return null;
                    }
                };
            }
        }

        if (TimeZone.class.isAssignableFrom(source)) {
            if (String.class == target) {
                return new Converter() {
                    public <T> T convert(Object source, Class<T> target) throws Exception {
                        if (source == null) {
                            return null;
                        }
                        return target.cast(((TimeZone) source).getID());
                    }
                };
            }
        }

        if (Instant.class.isAssignableFrom(source)) {
            if (Date.class == target) {
                return new Converter() {

                    @Override
                    public <T> T convert(Object source, Class<T> target) throws Exception {
                        Instant instant = (Instant) source;
                        return target.cast(instant.getPosition().getDate());
                    }
                };
            }
        }

        if (Long.class.isAssignableFrom(source) && java.util.Date.class.equals(target)) {
            return new Converter() {
                @Override
                public <T> T convert(Object source, Class<T> target) throws Exception {
                    if (source != null) {
                        return target.cast(new java.util.Date((Long) source));
                    } else {
                        return null;
                    }
                }
            };
        }
        return null;
    }

