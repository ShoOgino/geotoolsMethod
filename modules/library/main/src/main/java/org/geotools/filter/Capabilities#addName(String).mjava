    /**
     * Adds support for the provided name.
     * <p>
     * If this is a known name (avaialble as part of opengis interface)
     * it will be grouped into:
     * <ul>
     * <li>Spatial Operators: Will added a SpatialOperator into the mix with Point, LineString, Polygon as the supported geometry
     * operands (based on the assumption of JTS)
     * <li>Comparison Operators:
     * <li>Arithmetic Operators: will cause hassimpleArithmetic to be true
     * <li>Other: will be treated as a no argument function call
     * </ul>
     * This method will have no effect if the operator is already known.
     * <p>
     * Examples:<pre><code>
     * capabilities.addName("Beyond"); // will enabled Beyond Filter
     * capabilities.addName("NullCheck"); // will enable PropertyIsNull Filter
     * capabilities.addName("SUB"); // will enabled hasSimpleArithmetic
     * capabilities.addName("PI"); // add a no argument function called PI()
     * </code></pre>
     * 
     * @param name FilterCapabilities Operand name such as "BBOX", "Like" or "MUL"
     */
    public void addName( String name ){
        if( name == null ){
            return;
        }
        else if( spatialNames.containsValue( name )){
            SpatialOperatorsImpl operators = contents.getSpatialCapabilities().getSpatialOperators();
            if( operators.getOperator( name ) == null ){
                SpatialOperatorImpl operator = new SpatialOperatorImpl(name);
                // default JTS?
                operator.getGeometryOperands().add( GeometryOperand.LineString );
                operator.getGeometryOperands().add( GeometryOperand.Point );
                operator.getGeometryOperands().add( GeometryOperand.Polygon );
                
                operators.getOperators().add( operator );
            }
        }
        else if( temporalNames.containsValue( name )){
            TemporalOperators operators = contents.getTemporalCapabilities().getTemporalOperators();
            if( operators.getOperator( name ) == null ){
                TemporalOperatorImpl operator = new TemporalOperatorImpl(name);
                operators.getOperators().add( operator );
            }
        }
        else if( scalarNames.containsValue( name )){
            ComparisonOperatorsImpl operators = contents.getScalarCapabilities().getComparisonOperators();
            if( operators.getOperator( name ) == null ){
                OperatorImpl operator = new OperatorImpl( name );                
                operators.getOperators().add( operator );
            }
        }
        else if( arithmaticNames.containsValue( name )){
            ArithmeticOperatorsImpl operators = contents.getScalarCapabilities().getArithmeticOperators();
            operators.setSimpleArithmetic(true);
        }
        else if( logicalNames.containsValue( name )){
            contents.getScalarCapabilities().setLogicalOperators(true);
        }
        else if( "Id".equals(name)){
            contents.getIdCapabilities().setFID(true);
        }
        else {
            FunctionsImpl functions = contents.getScalarCapabilities().getArithmeticOperators().getFunctions();
            if( functions.getFunctionName( name ) == null ){
                FunctionNameImpl function = new FunctionNameImpl( name, 0 );
                functions.getFunctionNames().add( function );
            }
        }
    }

