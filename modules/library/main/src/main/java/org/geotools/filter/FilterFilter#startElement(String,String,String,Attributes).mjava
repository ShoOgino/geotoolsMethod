    /**
     * Checks the name of the element, and sends to the appropriate filter
     * creation factory.
     *
     * @param namespaceURI The namespace of the element.
     * @param localName The local name of the element.
     * @param qName The full name of the element, including namespace prefix.
     * @param atts The element attributes.
     *
     * @throws SAXException Some parsing error occured while reading filter.
     */
    public void startElement(String namespaceURI, String localName,
        String qName, Attributes atts) throws SAXException {
        LOGGER.finer("found start element: " + localName);

        characters.setLength(0);
        
        if (localName.equals("Filter")) {
            //Should we check to make sure namespace is correct?
            //perhaps let users set namespace aware...
            insideFilter = true;
            expressionFactory=new ExpressionSAXParser(schema);
        } else if (insideFilter) {
            short filterType = convertType(localName);
            LOGGER.finest("types: (xml): " + localName + "; " + "(internal): "
                + filterType);

            //DJB: if you use "<AND>" instead of "<And>" the filter appears to work
            //     but actually is completely screwed.  This should throw an error.
            //     I'm not 100% sure if this is correct, but I dont think you can
            //     have any tag here that's not in "convertType()".
            //DJB: Found "UpperBoundary" and "LowerBoundary" - these are completely ignored by this parser!!!
            //     More checking shows its handled when the tag ENDs, so this isnt a problem.
            //DJB: <Distance> also looks like its hacked in this function (see bottom)
            //DJB: Also found <gml:pointMember>-like things from the CITE tests.
            
			//in all these cases, the correct (well, defined) thing to do is to ignore the tag - its never used anywhere!
			if ( (filterType == -1) && !( (localName.equals("UpperBoundary")) || (localName.equals("LowerBoundary")) || (localName.equals("Distance")) )   )
			{
				if (!(localName.endsWith("Member"))) //from CITE tests
					throw new SAXException("Attempted to construct illegal filter - I dont understand the tag: "+qName+".  HINT: tags are case-sensitive!");
			}

            try {
                if (isFidFilter) {
                    if (filterType == AbstractFilter.FID) {
                        LOGGER.finer(
                            "sending attributes to existing FID filter");
                        filterFactory.setAttributes(atts);
                    } else {
                        isFidFilter = false;
                        LOGGER.finer("is fid (1): " + isFidFilter);

                        // if the filter is done, pass along to the parent
                        if (isLogicFilter) {
                            addFilterToLogicFactory();
                        } else {
                            addFilterToParent();
                        }
                    }
                }

                if (!isFidFilter) {
                    // if at a complex filter start, add it to the logic stack
                    LOGGER.finest("is logic?");

                    if (AbstractFilter.isLogicFilter(filterType)) {
                        LOGGER.finer("found a logic filter start");
                        isLogicFilter = true;
                        logicFactory.start(filterType);
                    } else if (AbstractFilter.isSimpleFilter(filterType)) {
                        // if at a simple filter start, tell the factory
                        LOGGER.finer("found a simple filter start");
                        filterFactory.start(filterType);

                        if (filterType == AbstractFilter.LIKE) {
                            LOGGER.finer("sending attributes for like filter");
                            filterFactory.setAttributes(atts);
                        } else if (filterType == AbstractFilter.FID) {
                            LOGGER.finer("sending attributes to new FID filter");
                            filterFactory.setAttributes(atts);
                            isFidFilter = true;
                            LOGGER.finer("is fid (3): " + isFidFilter);
                        }
                    } else if (DefaultExpression.isExpression(filterType)) {
                        // if at an expression start, tell the factory
                        LOGGER.finest("found an expression filter start");
                        expressionFactory.start(localName,atts);
                    } else if (localName.equals("Distance")) {  //DJB: this looks like hack
                        LOGGER.finest("inside distance");

						//Not too sure what to do here, as units should be
						//required element, so an error would be nice.  
						//But geotools is also not supporting units at all,
						//so I feel like it doesn't matter so much...
                        if (("units").equals(atts.getLocalName(0))) {
                            units = atts.getValue(0);
                            LOGGER.finest("units = " + units);
                        }

                        insideDistance = true;
                    }
                }
            } catch (IllegalFilterException ife) {
                throw new SAXException("Attempted to construct illegal "
                    + "filter: " + ife.getMessage(), ife);
            }
        } else {
            parent.startElement(namespaceURI, localName, qName, atts);
        }
    }

