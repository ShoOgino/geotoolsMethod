        public CalcResult merge(CalcResult resultsToAdd) {
            if (!isCompatible(resultsToAdd)) {
                throw new IllegalArgumentException("Parameter is not a compatible type");
            }

            if (resultsToAdd == CalcResult.NULL_RESULT) {
                return this;
            }

            if (resultsToAdd instanceof MedianResult) {
                MedianResult moreResults = (MedianResult) resultsToAdd;
                // ensure both MedianResults are NOT optimized
                if (isOptimized() || moreResults.isOptimized()) {
                    throw new IllegalArgumentException(
                            "Optimized median results cannot be merged.");
                }
                // merge away...
                List<Comparable> toAdd = moreResults.getList();
                List<Comparable> newList = new ArrayList<>();
                // extract each item to an array, and convert to a common data type
                int size = list.size() + toAdd.size();
                Comparable[] values = new Comparable[size];
                int i;
                for (i = 0; i < list.size(); i++) values[i] = list.get(i);
                for (int j = 0; j < toAdd.size(); j++) values[i + j] = toAdd.get(j);
                Class bestClass = CalcUtil.bestClass(values);
                for (int k = 0; k < size; k++) {
                    if (values[k].getClass() != bestClass)
                        values[k] = (Comparable) CalcUtil.convert(values[k], bestClass);
                    newList.add((Comparable) values[k]);
                }
                return new MedianResult(newList);
            } else {
                throw new IllegalArgumentException(
                        "The CalcResults claim to be compatible, but the appropriate merge method has not been implemented.");
            }
        }

