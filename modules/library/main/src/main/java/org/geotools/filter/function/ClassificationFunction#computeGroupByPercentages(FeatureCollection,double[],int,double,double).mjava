    /**
     * This method return percentages by using a single groupBy query to retrieve class members. Can
     * be used if the class width is the same for all the classes.
     *
     * @param collection the feature collection to classify
     * @param percentages the array of percentages to fill
     * @param totalSize the totalSize of the collection
     * @param min the min attribute value in the collection
     * @param classWidth the classWidth
     * @return
     * @throws IOException
     */
    protected double[] computeGroupByPercentages(
            FeatureCollection collection,
            double[] percentages,
            int totalSize,
            double min,
            double classWidth)
            throws IOException {
        Subtract subtract = FF.subtract(getParameters().get(0), FF.literal(min));
        Divide divide = FF.divide(subtract, FF.literal(classWidth));
        Function convert = FF.function("convert", divide, FF.literal(Integer.class));
        GroupByVisitor groupBy =
                new GroupByVisitor(
                        Aggregate.COUNT, getParameters().get(0), Arrays.asList(convert), null);
        collection.accepts(groupBy, null);
        @SuppressWarnings("unchecked")
        Map<List<Integer>, Integer> result = groupBy.getResult().toMap();
        Map<Integer, Integer> resultIntKeys =
                result.entrySet()
                        .stream()
                        .collect(Collectors.toMap(e -> e.getKey().get(0), e -> e.getValue()));
        // getting a tree set from the keys to get them asc ordered and
        // collect percentages in the right order
        Set<Integer> keys = new TreeSet<>(resultIntKeys.keySet());
        for (Integer key : keys) {
            int intKey = key.intValue();
            computePercentage(
                    percentages, Double.valueOf(resultIntKeys.get(key)), totalSize, intKey);
        }
        return percentages;
    }

