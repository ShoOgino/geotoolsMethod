    /**
     * Transform the provided 2D direct position into 3D (0 Ellipsoidal height assumed when
     * converting from {@link DefaultGeographicCRS#WGS84} to {@link DefaultGeographicCRS#WGS84_3D}).
     *
     * @param srcPosition Source 2D position
     * @param transformToWGS84 From source CRS to To WGS84
     * @param transformFromWGS84_3D From WGS84_3D to target CRS
     * @return Position in target CRS as calculated by transform2
     * @throws TransformException
     */
    private static DirectPosition transformTo3D(
            GeneralDirectPosition srcPosition,
            MathTransform transformToWGS84,
            MathTransform transformFromWGS84_3D)
            throws TransformException {
        DirectPosition world2D = transformToWGS84.transform(srcPosition, null);

        DirectPosition world3D = new GeneralDirectPosition(DefaultGeographicCRS.WGS84_3D);
        world3D.setOrdinate(0, world2D.getOrdinate(0));
        world3D.setOrdinate(1, world2D.getOrdinate(1));
        world3D.setOrdinate(2, 0.0); // 0 elliposial height is assumed

        DirectPosition targetPosition = transformFromWGS84_3D.transform(world3D, null);
        return targetPosition;
    }

