    /**
     * Creates a <code>MultiSurface</code> using the next token in the stream.
     * 
     * @return a <code>MultiSurface</code> specified by the next token in the stream, or if if the
     *         coordinates used to create the <code>Polygon</code> shells and holes do not form
     *         closed linestrings.
     * @throws IOException if an I/O error occurs
     * @throws ParseException if an unexpected token was encountered
     */
    private MultiPolygon readMultiSurfaceText() throws IOException, ParseException {
        String nextToken = getNextEmptyOrOpener();
        if (nextToken.equals(EMPTY)) {
            return geometryFactory.createMultiSurface(new ArrayList<Polygon>());
        }
        ArrayList polygons = new ArrayList();
        // must be an opener!
        String nextWord = COMMA;
        while( nextWord.equals( COMMA )){
            nextWord = getNextWord();
            if( nextWord.equals(L_PAREN) ){
                Polygon polygon = readPolygonText();
                polygons.add(polygon);
            } else if (nextWord.equalsIgnoreCase("CURVEPOLYGON")) {
                Polygon polygon = readCurvePolygonText();
                polygons.add(polygon);
            }

            nextWord = getNextCloserOrComma();
        }
        
        return geometryFactory.createMultiSurface(polygons);
    }

