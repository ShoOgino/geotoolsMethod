    /**
     * Returns the set of descriptors matching the given name.
     *
     * @param type The type, non null.
     * @param name The name, non null.
     * @return The list of descriptors named 'name', or an empty list if none such match.
     */
    public static List<PropertyDescriptor> descriptors(ComplexType type, Name name) {
        if (name == null) return Collections.emptyList();

        List<PropertyDescriptor> match = new ArrayList<>();

        for (PropertyDescriptor descriptor : type.getDescriptors()) {
            Name descriptorName = descriptor.getName();
            if (name.equals(descriptorName)) {
                match.add(descriptor);
            }
        }

        // only look up in the super type if the descriptor is not found
        // as a direct child definition
        if (match.isEmpty()) {
            AttributeType superType = type.getSuper();
            if (superType instanceof ComplexType) {
                List<PropertyDescriptor> superDescriptors =
                        descriptors((ComplexType) superType, name);
                match.addAll(superDescriptors);
            }
        }
        return match;
    }

