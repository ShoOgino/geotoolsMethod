    /**
     * Default implementation based on getFeatureReader and getFeatureWriter.
     *
     * <p>
     * We should be able to optimize this to only get the RowSet once
     * </p>
     *
     * @see org.geotools.data.DataStore#getFeatureSource(java.lang.String)
     */
    public SimpleFeatureSource getFeatureSource(final String typeName)
        throws IOException {
        final SimpleFeatureType featureType = getSchema(typeName);

        if (isWriteable) {
            if (lockingManager != null)
                return new AbstractFeatureLocking(getSupportedHints()) {
                    public DataStore getDataStore() {
                        return AbstractDataStore.this;
                    }
                    public String toString() {
                        return "AbstractDataStore.AbstractFeatureLocking("+typeName+")";
                    }
                    public void addFeatureListener(FeatureListener listener) {
                        listenerManager.addFeatureListener(this, listener);
                    }

                    public void removeFeatureListener(
                        FeatureListener listener) {
                        listenerManager.removeFeatureListener(this, listener);
                    }

                    public SimpleFeatureType getSchema() {
                        return featureType;
                    }
                };
                return new AbstractFeatureStore(getSupportedHints()) {
                    public DataStore getDataStore() {
                        return AbstractDataStore.this;
                    }
                    public String toString() {
                        return "AbstractDataStore.AbstractFeatureStore("+typeName+")";
                    }
                    public void addFeatureListener(FeatureListener listener) {
                        listenerManager.addFeatureListener(this, listener);
                    }

                    public void removeFeatureListener(
                        FeatureListener listener) {
                        listenerManager.removeFeatureListener(this, listener);
                    }

                    public SimpleFeatureType getSchema() {
                        return featureType;
                    }
                };
        }
            return new AbstractFeatureSource(getSupportedHints()) {
                public DataStore getDataStore() {
                    return AbstractDataStore.this;
                }
                public String toString() {
                    return "AbstractDataStore.AbstractFeatureSource("+typeName+")";
                }
                public void addFeatureListener(FeatureListener listener) {
                    listenerManager.addFeatureListener(this, listener);
                }

                public void removeFeatureListener(FeatureListener listener) {
                    listenerManager.removeFeatureListener(this, listener);
                }

                public SimpleFeatureType getSchema() {
                    return featureType;
                }
            };
    }

