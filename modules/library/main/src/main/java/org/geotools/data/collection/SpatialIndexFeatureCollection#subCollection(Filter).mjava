    public SimpleFeatureCollection subCollection(Filter filter) {
        // split out the spatial part of the filter
        SpatialIndexFeatureCollection ret = new SpatialIndexFeatureCollection(schema);
        Envelope env = new Envelope();
        env = (Envelope) filter.accept(ExtractBoundsFilterVisitor.BOUNDS_VISITOR, env);
        if (LOGGER.isLoggable(Level.FINEST) && Double.isInfinite(env.getWidth())) {
            LOGGER.fine("Found no spatial element in " + filter);
            LOGGER.fine("Just going to iterate");
        }
        @SuppressWarnings("unchecked")
        List<SimpleFeature> queryResults = (List<SimpleFeature>) index.query(env);
        for (SimpleFeature sample : queryResults) {
            if (LOGGER.isLoggable(Level.FINEST)) {
                LOGGER.finest("Looking at " + sample);
            }
            if (filter.evaluate(sample)) {

                if (LOGGER.isLoggable(Level.FINEST)) {
                    LOGGER.finest("accepting " + sample);
                }
                ret.add(sample);
            }
        }

        return ret;
    }

