    /**
     * Format time in milliseconds to year number. The resulting year number format is consistent
     * with W3C XML Schema definitions, using a minimum of four digits padded with zeros if
     * necessary. A leading minus sign is included for years prior to 1 C.E.
     *
     * @param value time in milliseconds to be converted (from 1 C.E.)
     * @param buff text formatting buffer
     */
    protected static void formatYear(long value, StringBuffer buff) {
        // find the actual year and month number; this uses a integer arithmetic
        //  conversion based on Baum, first making the millisecond count
        //  relative to March 1 of the year 0 C.E., then using simple arithmetic
        //  operations to compute century, year, and month; it's slightly
        //  different for pre-C.E. values because of Java's handling of divisions.
        long time = value + (306 * LMSPERDAY) + ((LMSPERDAY * 3) / 4);
        long century = time / MSPERCENTURY; // count of centuries
        long adjusted = time + ((century - (century / 4)) * MSPERDAY);
        int year = (int) (adjusted / MSPERAVGYEAR); // year in March 1 terms

        if (adjusted < 0) {
            year--;
        }

        long yms = (adjusted + (LMSPERDAY / 4)) - (((year * 365) + (year / 4)) * LMSPERDAY);
        int yday = (int) (yms / LMSPERDAY); // day number in year
        int month = ((5 * yday) + 456) / 153; // (biased) month number

        if (month > 12) { // convert start of year
            year++;
        }

        // format year to text
        formatYearNumber(year, buff);
    }

