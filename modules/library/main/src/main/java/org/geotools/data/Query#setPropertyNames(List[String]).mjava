    /**
     * Set the names of the properties that this Query should retrieve as part of the returned
     * {@linkplain org.geotools.feature.FeatureCollection}.
     *
     * <p>The available properties can be determined with {@linkplain FeatureSource#getSchema()}. If
     * properties that are not part of the source's schema are requested an exception will be
     * thrown.
     *
     * @param propNames the names of the properties to retrieve or {@linkplain #ALL_NAMES}; an empty
     *     List can be passed in to indicate that only feature IDs should be retrieved
     * @task REVISIT: This syntax is really obscure. Consider having an fid or featureID
     *     propertyName that datasource implementors look for instead of looking to see if the list
     *     size is 0.
     */
    public void setPropertyNames(List<String> propNames) {
        if (propNames == null) {
            this.properties = ALL_PROPERTIES;
            return;
        }

        final FilterFactory ff = CommonFactoryFinder.getFilterFactory(null);

        properties = new ArrayList<PropertyName>(propNames.size());
        for (int i = 0; i < propNames.size(); i++) {
            String xpath = propNames.get(i);
            if (xpath != null) {
                properties.add(ff.property(xpath));
            }
        }
    }

