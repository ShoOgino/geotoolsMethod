    /**
     * Remembers Externalized State for a DataSource.
     *
     * <p>This is the GOF Momento pattern: a SimpleFeatureSource is able to externalize its internal
     * State required for Transaction support and have this class manage it. It may retrieve this
     * State with getState( key ).
     *
     * <p>In addition several SimpleFeatureSource implementations may share State, a common example
     * is JDBCDataSources keeping a shared JDBC connection using the JDBC URL as a key.
     *
     * @param key Key used to externalize State
     * @param state Externalized State (Momeneto)
     * @throws IllegalArgumentException When Transaction already using key
     * @see org.geotools.data.Transaction#putState(java.lang.Object,
     *     org.geotools.data.Transaction.State)
     */
    public void putState(Object key, State state) {
        if (stateLookup == null) {
            return;
        }
        if (stateLookup.containsKey(key)) {
            State current = (State) stateLookup.get(key);

            if (state == current) {
                throw new IllegalArgumentException(
                        "Transaction "
                                + handle
                                + " already has an this State for key: "
                                + key
                                + ". Please check for existing State before creating your own.");
            } else {
                throw new IllegalArgumentException(
                        "Transaction "
                                + handle
                                + " already has an entry for key:"
                                + key
                                + ". Please check for existing State before creating your own: "
                                + current);
            }
        } else {
            stateLookup.put(key, state);

            // allow configuration
            state.setTransaction(this);
        }
    }

