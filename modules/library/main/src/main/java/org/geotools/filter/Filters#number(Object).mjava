    /**
     * Treat provided value as a Number, used for math opperations.
     *
     * <p>This function allows for the non stongly typed Math Opperations favoured by the Expression
     * standard.
     *
     * <p>Able to hanle:
     *
     * <ul>
     *   <li>null - to NaN
     *   <li>Number
     *   <li>String - valid Integer and Double encodings
     * </ul>
     *
     * @return double or Double.NaN;
     * @throws IllegalArgumentException For non numerical among us -- like Geometry
     */
    public static double number(Object value) {
        if (value == null) return Double.NaN;
        if (value instanceof Number) {
            Number number = (Number) value;
            return number.doubleValue();
        }
        if (value instanceof String) {
            String text = (String) value;
            try {
                Number number = gets(text, Number.class);
                return number.doubleValue();
            } catch (Throwable e) {
                throw new IllegalArgumentException("Unable to decode '" + text + "' as a number");
            }
        }
        if (value instanceof Expression) {
            throw new IllegalArgumentException("Cannot deal with un evaulated Expression");
        }
        throw new IllegalArgumentException(
                "Unable to evaulate " + value.getClass() + " in a numeric context");
    }

