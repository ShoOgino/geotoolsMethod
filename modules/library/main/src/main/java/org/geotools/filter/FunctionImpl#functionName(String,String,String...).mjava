    /**
     * Convenience method for creating a function name from a set of strings describing the return
     * and argument parameters of the function.
     *
     * <p>The value of <tt>ret</tt> and each value of <tt>args</tt> is a string of the following
     * structure:
     *
     * <pre>
     *  name[:type[:min,max]]
     * </pre>
     *
     * Where:
     *
     * <ul>
     *   <li><tt>name</tt> is the name of the parameter
     *   <li><tt>type</tt> is type (class name) of the parameter
     *   <li><tt>min</tt> is the minimum number of occurrences
     *   <li><tt>max</tt> is the maximum number of occurrences
     * </ul>
     *
     * Examples:
     *
     * <ul>
     *   <li><tt>foo</tt>
     *   <li><tt>foo:String</tt>
     *   <li><tt>foo:java.lang.Integer</tt>
     *   <li><tt>foo:Polygon:1,1</tt>
     *   <li><tt>foo:Polygon:1,</tt>
     *   <li><tt>foo:Polygon:,</tt>
     * </ul>
     *
     * The <tt>type</tt> parameter may be specified relative to the following well known packages:
     *
     * <ul>
     *   <li><tt>java.lang</tt>
     *   <li><tt>org.locationtech.jts.geom</tt>
     * </ul>
     *
     * Otherwise it must be specified as a full qualified class name.
     *
     * @param name The name of the function
     * @param ret The parameter specification of the return of the function
     * @param args The argument specifications of the function arguments
     */
    protected static FunctionName functionName(String name, String ret, String... args) {
        List<Parameter<?>> list = new ArrayList<Parameter<?>>();
        for (String arg : args) {
            list.add(toParameter(arg));
        }

        return ff.functionName(name, list, toParameter(ret));
    }

