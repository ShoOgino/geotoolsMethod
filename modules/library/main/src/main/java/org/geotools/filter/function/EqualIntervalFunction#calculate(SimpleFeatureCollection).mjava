    private RangedClassifier calculate(SimpleFeatureCollection featureCollection) {
        int classNum = getClasses();
        Comparable globalMin;
        Comparable globalMax;
        try {
            MinVisitor minVisit = new MinVisitor(getParameters().get(0));
            if (progress == null) progress = new NullProgressListener();
            featureCollection.accepts(minVisit, progress);
            if (progress.isCanceled()) return null;
            globalMin = (Comparable) minVisit.getResult().getValue();

            MaxVisitor maxVisit = new MaxVisitor(getParameters().get(0));
            featureCollection.accepts(maxVisit, progress);
            if (progress.isCanceled()) return null;
            globalMax = (Comparable) maxVisit.getResult().getValue();
            RangedClassifier result;
            boolean percentages = false;
            if (getParameters().size() > 2) {
                Literal literal = (Literal) getParameters().get(2);
                percentages = ((Boolean) literal.getValue()).booleanValue();
            }
            if ((globalMin instanceof Number) && (globalMax instanceof Number)) {
                result = calculateNumerical(classNum, globalMin, globalMax);
                if (percentages)
                    result.setPercentages(
                            getNumericalPercentages(classNum, result, featureCollection));
            } else {
                result = calculateNonNumerical(classNum, featureCollection);
                if (percentages)
                    result.setPercentages(
                            getNotNumericalPercentages(classNum, featureCollection.size()));
            }

            return result;
        } catch (IllegalFilterException e) { // accepts exploded
            LOGGER.log(
                    Level.SEVERE,
                    "EqualIntervalFunction calculate(SimpleFeatureCollection) failed",
                    e);
            return null;
        } catch (IOException e) { // getResult().getValue() exploded
            LOGGER.log(
                    Level.SEVERE,
                    "EqualIntervalFunction calculate(SimpleFeatureCollection) failed",
                    e);
            return null;
        }
    }

