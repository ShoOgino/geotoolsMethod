    /**
     * Sets the state that shall be expected next based on the filterType. So if a between, null or
     * like is the currentFilter then attribute should be next, if an fid filter then fid should be
     * next. If it's a comparison, geometry or not, then leftValue should be next.
     *
     * @param filterType An AbstractFilter short of the filter type.
     * @return the string of what state should come next.
     * @throws IllegalFilterException if the filter type is not recognized.
     */
    private static String setInitialState(short filterType) throws IllegalFilterException {
        if ((filterType == AbstractFilter.BETWEEN)
                || (filterType == AbstractFilter.NULL)
                || (filterType == AbstractFilter.LIKE)) {
            return "attribute";
        } else if ((filterType == AbstractFilter.FID)) {
            return "fid";
        } else if ((AbstractFilter.isCompareFilter(filterType))
                || (AbstractFilter.isGeometryFilter(filterType))) {
            return "leftValue";
        } else {
            throw new IllegalFilterException("Filter type: " + filterType + " is not recognized");
        }
    }

