    /**
     * Transform from 3D down to 2D.
     *
     * <p>This method transforms each ordinate into WGS84, manually converts this to WGS84_3D with
     * the addition of a Double.NaN, and then transforms to the final 2D position.
     *
     * @return ReferencedEnvelope matching provided 2D TargetCRS
     */
    public static ReferencedEnvelope transformTo2D(
            final ReferencedEnvelope sourceEnvelope,
            CoordinateReferenceSystem targetCRS,
            boolean lenient,
            int npoints)
            throws TransformException, OperationNotFoundException, FactoryException {
        final double xmin = sourceEnvelope.getMinX();
        final double xmax = sourceEnvelope.getMaxX();
        final double ymin = sourceEnvelope.getMinY();
        final double ymax = sourceEnvelope.getMaxY();
        final double scaleX = (xmax - xmin) / npoints;
        final double scaleY = (ymax - ymin) / npoints;

        final double zmin = sourceEnvelope.getMinimum(2);
        final double zmax = sourceEnvelope.getMaximum(2);
        final double scaleZ = (zmax - zmin) / npoints;

        // final double z = (zmax-zmin) / 2; // just average is fine as we are trying to remove
        // height

        ReferencedEnvelope targetEnvelope = new ReferencedEnvelope(targetCRS);

        /*
         * Gets a first estimation using an algorithm capable to take singularity in account
         * (North pole, South pole, 180ï¿½ longitude). We will expand this initial box later.
         */
        CoordinateOperationFactory coordinateOperationFactory =
                CRS.getCoordinateOperationFactory(lenient);
        CoordinateReferenceSystem sourceCRS = sourceEnvelope.getCoordinateReferenceSystem();
        CoordinateOperation operation1 =
                coordinateOperationFactory.createOperation(
                        sourceCRS, DefaultGeographicCRS.WGS84_3D);
        MathTransform transform1 = operation1.getMathTransform();
        final CoordinateOperation operation2 =
                coordinateOperationFactory.createOperation(DefaultGeographicCRS.WGS84, targetCRS);
        MathTransform transform2 = operation2.getMathTransform();

        for (int t = 0; t < npoints; t++) {
            double dx = scaleX * t;
            double dy = scaleY * t;
            for (int u = 0; u < npoints; u++) {
                double dz = scaleZ * u;
                double z = zmin + dz;

                GeneralDirectPosition left = new GeneralDirectPosition(xmin, ymin + dy, z);

                DirectPosition pt = transformTo2D(left, transform1, transform2);
                targetEnvelope.expandToInclude(pt);

                GeneralDirectPosition top = new GeneralDirectPosition(xmin + dx, ymax, z);
                pt = transformTo2D(top, transform1, transform2);
                targetEnvelope.expandToInclude(pt);

                GeneralDirectPosition right = new GeneralDirectPosition(xmax, ymax - dy, z);
                pt = transformTo2D(right, transform1, transform2);
                targetEnvelope.expandToInclude(pt);

                GeneralDirectPosition bottom = new GeneralDirectPosition(xmax - dx, ymax, z);
                pt = transformTo2D(bottom, transform1, transform2);
                targetEnvelope.expandToInclude(pt);

                if (zmin == zmax) {
                    break; // only need one z sample
                }
            }
        }
        return targetEnvelope;
    }

