    /**
     * Loads the data.
     *
     * @see #setUp()
     */
    protected void dataSetUp() throws Exception {
        String namespace = getName();
        roadType =
                DataUtilities.createType(
                        namespace + ".road", "id:0,geom:LineString,name:String,uuid:UUID");
        subRoadType = DataUtilities.createType(namespace + "road", "id:0,geom:LineString");
        gf = new GeometryFactory();

        roadFeatures = new SimpleFeature[3];

        //           3,2
        //  2,2 +-----+-----+ 4,2
        //     /     rd1     \
        // 1,1+               +5,1
        roadFeatures[0] =
                SimpleFeatureBuilder.build(
                        roadType,
                        new Object[] {
                            new Integer(1),
                            line(new int[] {1, 1, 2, 2, 4, 2, 5, 1}),
                            "r1",
                            UUID.randomUUID()
                        },
                        "road.rd1");

        //       + 3,4
        //       + 3,3
        //  rd2  + 3,2
        //       |
        //    3,0+
        roadFeatures[1] =
                SimpleFeatureBuilder.build(
                        roadType,
                        new Object[] {
                            new Integer(2),
                            line(new int[] {3, 0, 3, 2, 3, 3, 3, 4}),
                            "r2",
                            UUID.randomUUID()
                        },
                        "road.rd2");

        //     rd3     + 5,3
        //            /
        //  3,2 +----+ 4,2
        roadFeatures[2] =
                SimpleFeatureBuilder.build(
                        roadType,
                        new Object[] {
                            new Integer(3),
                            line(new int[] {3, 2, 4, 2, 5, 3}),
                            "r3",
                            UUID.randomUUID()
                        },
                        "road.rd3");
        roadBounds = new ReferencedEnvelope();
        roadBounds.expandToInclude(new ReferencedEnvelope(roadFeatures[0].getBounds()));
        roadBounds.expandToInclude(new ReferencedEnvelope(roadFeatures[1].getBounds()));
        roadBounds.expandToInclude(new ReferencedEnvelope(roadFeatures[2].getBounds()));

        rd1Filter = ff.id(Collections.singleton(ff.featureId("road.rd1")));
        rd2Filter = ff.id(Collections.singleton(ff.featureId("road.rd2")));

        Id create =
                ff.id(
                        new HashSet(
                                Arrays.asList(ff.featureId("road.rd1"), ff.featureId("road.rd2"))));

        rd12Filter = create;

        rd12Bounds = new ReferencedEnvelope();
        rd12Bounds.expandToInclude(new ReferencedEnvelope(roadFeatures[0].getBounds()));
        rd12Bounds.expandToInclude(new ReferencedEnvelope(roadFeatures[1].getBounds()));
        //   + 2,3
        //  / rd4
        // + 1,2
        newRoad =
                SimpleFeatureBuilder.build(
                        roadType,
                        new Object[] {
                            new Integer(4), line(new int[] {1, 2, 2, 3}), "r4", UUID.randomUUID()
                        },
                        "road.rd4");

        riverType =
                DataUtilities.createType(
                        namespace + ".river", "id:0,geom:MultiLineString,river:String,flow:0.0");
        subRiverType = DataUtilities.createType(namespace + ".river", "river:String,flow:0.0");
        gf = new GeometryFactory();
        riverFeatures = new SimpleFeature[2];

        //       9,7     13,7
        //        +------+
        //  5,5  /
        //  +---+ rv1
        //   7,5 \
        //    9,3 +----+ 11,3
        riverFeatures[0] =
                SimpleFeatureBuilder.build(
                        riverType,
                        new Object[] {
                            new Integer(1),
                            lines(
                                    new int[][] {
                                        {5, 5, 7, 4},
                                        {7, 5, 9, 7, 13, 7},
                                        {7, 5, 9, 3, 11, 3}
                                    }),
                            "rv1",
                            new Double(4.5)
                        },
                        "river.rv1");

        //         + 6,10
        //        /
        //    rv2+ 4,8
        //       |
        //   4,6 +
        riverFeatures[1] =
                SimpleFeatureBuilder.build(
                        riverType,
                        new Object[] {
                            new Integer(2),
                            lines(new int[][] {{4, 6, 4, 8, 6, 10}}),
                            "rv2",
                            new Double(3.0)
                        },
                        "river.rv2");
        riverBounds = new ReferencedEnvelope();
        riverBounds.expandToInclude(ReferencedEnvelope.reference(riverFeatures[0].getBounds()));
        riverBounds.expandToInclude(ReferencedEnvelope.reference(riverFeatures[1].getBounds()));

        rv1Filter = ff.id(Collections.singleton(ff.featureId("river.rv1")));

        //  9,5   11,5
        //   +-----+
        //     rv3  \
        //           + 13,3
        //
        newRiver =
                SimpleFeatureBuilder.build(
                        riverType,
                        new Object[] {
                            new Integer(3),
                            lines(new int[][] {{9, 5, 11, 5, 13, 3}}),
                            "rv3",
                            new Double(1.5)
                        },
                        "river.rv3");

        lakeType =
                DataUtilities.createType(
                        namespace + ".lake", "id:0,geom:Polygon:nillable,name:String");
        lakeFeatures = new SimpleFeature[1];
        //             + 14,8
        //            / \
        //      12,6 +   + 16,6
        //            \  |
        //        14,4 +-+ 16,4
        //
        lakeFeatures[0] =
                SimpleFeatureBuilder.build(
                        lakeType,
                        new Object[] {
                            new Integer(0),
                            polygon(new int[] {12, 6, 14, 8, 16, 6, 16, 4, 14, 4, 12, 6}),
                            "muddy"
                        },
                        "lake.lk1");
        lakeBounds = new ReferencedEnvelope();
        lakeBounds.expandToInclude(ReferencedEnvelope.reference(lakeFeatures[0].getBounds()));

        invalidGeomType =
                DataUtilities.createType(
                        namespace + ".invalid", "id:0,geom:Polygon:nillable,name:String");

        invalidGeomFeatures = new SimpleFeature[1];
        //        12,8 14,8
        //          |\/\
        //          |/\_\
        //     12,6 +   + 16,6
        //
        invalidGeomFeatures[0] =
                SimpleFeatureBuilder.build(
                        invalidGeomType,
                        new Object[] {
                            new Integer(0),
                            polygon(new int[] {12, 6, 14, 8, 16, 6, 12, 8, 12, 6}),
                            "notvalid"
                        },
                        "invalid.inv1");
        invalidGeomBounds = new ReferencedEnvelope();

        buildingType =
                DataUtilities.createType(
                        namespace + ".building", "id:0,geom:Polygon:nillable,name:String");
        buildingFeatures = new SimpleFeature[1];
        //             + 14,8
        //            / \
        //      12,6 +   + 16,6
        //           |   |
        //      12,4 +---+ 16,4
        //
        buildingFeatures[0] =
                SimpleFeatureBuilder.build(
                        lakeType,
                        new Object[] {
                            new Integer(0),
                            polygon(new int[] {12, 6, 14, 8, 16, 6, 16, 4, 12, 4, 12, 6}),
                            "church"
                        },
                        "building.bd1");
        buildingBounds = new ReferencedEnvelope();
        buildingBounds.expandToInclude(
                ReferencedEnvelope.reference(buildingFeatures[0].getBounds()));
    }

