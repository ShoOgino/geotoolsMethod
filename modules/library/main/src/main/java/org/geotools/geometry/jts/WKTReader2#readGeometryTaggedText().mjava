    /**
     * Creates a <code>Geometry</code> using the next token in the stream.
     * 
     *@return a <code>Geometry</code> specified by the next token in the stream
     *@throws ParseException
     *             if the coordinates used to create a <code>Polygon</code> shell and holes do not
     *             form closed linestrings, or if an unexpected token was encountered
     *@throws IOException
     *             if an I/O error occurs
     */
    private Geometry readGeometryTaggedText() throws IOException, ParseException {
        String type = null;

        try {
            type = getNextWord();
        } catch (IOException e) {
            return null;
        } catch (ParseException e) {
            return null;
        }

        if (type.equalsIgnoreCase("POINT")) {
            return readPointText();
        } else if (type.equalsIgnoreCase("LINESTRING")) {
            return readLineStringText();
        } else if (type.equalsIgnoreCase("LINEARRING")) {
            return readLinearRingText();
        } else if (type.equalsIgnoreCase("POLYGON")) {
            return readPolygonText();
        } else if (type.equalsIgnoreCase("MULTIPOINT")) {
            return readMultiPointText();
        } else if (type.equalsIgnoreCase("MULTILINESTRING")) {
            return readMultiLineStringText();
        } else if (type.equalsIgnoreCase("MULTICURVE")) {
            return readMultiCurveText();
        } else if (type.equalsIgnoreCase("MULTIPOLYGON")) {
            return readMultiPolygonText();
        } else if (type.equalsIgnoreCase("GEOMETRYCOLLECTION")) {
            return readGeometryCollectionText();
        } else if (type.equalsIgnoreCase("CIRCULARSTRING")) {
            return readCircularStringText();
        } else if (type.equalsIgnoreCase("COMPOUNDCURVE")) {
            return readCompoundCurveText();
        } else if (type.equalsIgnoreCase("CURVEPOLYGON")) {
            return readCurvePolygonText();
        } else if (type.equalsIgnoreCase("MULTISURFACE")) {
            return readMultiSurfaceText();
        }
        throw new ParseException("Unknown geometry type: " + type);
    }

