    public Converter createConverter(Class source, Class target, Hints hints) {
        // convert to non-primitive class
        source = primitiveToWrapperClass(source);
        target = primitiveToWrapperClass(target);

        // check if source is a number or a string. We can't convert to a number
        // from anything else.
        if (!(Number.class.isAssignableFrom(source)) && !(String.class.isAssignableFrom(source)))
            return null;

        // check if target is one of supported
        if (Long.class.equals(target)
                || Integer.class.equals(target)
                || Short.class.equals(target)
                || Byte.class.equals(target)
                || BigInteger.class.equals(target)
                || BigDecimal.class.equals(target)
                || Double.class.equals(target)
                || Float.class.equals(target)
                || Number.class.equals(target)) {

            // check if teh safe conversion flag was set and if so only allow save conversions
            if (hints != null) {
                Object safeConversion = hints.get(ConverterFactory.SAFE_CONVERSION);
                if (safeConversion instanceof Boolean
                        && ((Boolean) safeConversion).booleanValue()) {
                    return new SafeNumericConverter();
                }
            }
            return new NumericConverter();
        }

        return null;
    }

