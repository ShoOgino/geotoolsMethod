    private void visitBinarySpatialOperator(BinarySpatialOperator filter) {
        if (original == null) original = filter;

        Class[] spatialOps =
                new Class[] {
                    Beyond.class,
                    Contains.class,
                    Crosses.class,
                    Disjoint.class,
                    DWithin.class,
                    Equals.class,
                    Intersects.class,
                    Overlaps.class,
                    Touches.class,
                    Within.class
                };

        for (Class spatialOp : spatialOps) {
            if (spatialOp.isAssignableFrom(filter.getClass())) {
                // if (!fcs.supports(spatialOps[i])) {
                if (!fcs.supports(filter)) {
                    postStack.push(filter);
                    return;
                } else {
                    // fcs supports this filter, no need to check the rest
                    break;
                }
            }
        }

        // TODO check against tranasaction ?

        int i = postStack.size();

        Expression leftGeometry, rightGeometry;
        leftGeometry = filter.getExpression1();
        rightGeometry = filter.getExpression2();

        if (leftGeometry == null || rightGeometry == null) {
            postStack.push(filter);
            return;
        }
        leftGeometry.accept(this, null);

        if (i < postStack.size()) {
            postStack.pop();
            postStack.push(filter);

            return;
        }

        rightGeometry.accept(this, null);

        if (i < postStack.size()) {
            preStack.pop(); // left
            postStack.pop();
            postStack.push(filter);

            return;
        }

        preStack.pop(); // left side
        preStack.pop(); // right side
        preStack.push(filter);
    }

