    /**
     * Compares this filter to the specified object.  Returns true  if the
     * passed in object is the same as this filter.  Checks  to make sure the
     * filter types are the same, and then checks that the subFilters lists
     * are the same size and that one list contains the other.  This means
     * that logic filters with different internal orders of subfilters are
     * equal.
     *
     * @param obj - the object to compare this LogicFilter against.
     *
     * @return true if specified object is equal to this filter; false
     *         otherwise.
     */
    public boolean equals(Object obj) {
        if (obj == this )
            return true;
        if ((obj != null) && (obj.getClass() == this.getClass())) {
            LogicFilterImpl logFilter = (LogicFilterImpl) obj;
            if( LOGGER.isLoggable(Level.FINEST)) {
                LOGGER.finest("filter type match:"
                        + (Filters.getFilterType( logFilter ) == Filters.getFilterType( this )));
                LOGGER.finest("same size:"
                        + (logFilter.getSubFilters().size() == this.children.size())
                        + "; inner size: " + logFilter.getSubFilters().size()
                        + "; outer size: " + this.children.size());
                LOGGER.finest("contains:"
                        + logFilter.getSubFilters().containsAll(this.children));
            }

            return ((Filters.getFilterType( logFilter ) == Filters.getFilterType( this ))
                    && (logFilter.getSubFilters().size() == this.children.size())
                    && logFilter.getSubFilters().containsAll(this.children));

        } else {
            return false;
        }
    }

