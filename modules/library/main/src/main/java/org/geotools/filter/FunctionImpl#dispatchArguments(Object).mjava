    /**
     * Gathers up and groups the parameters to the function based on the declared parameters.
     * <p>
     * This method calls {@link #validateArguments()} which enforces java style argument conventions
     * for multi valued parameters. Basically enforcing that only teh last argument in a function 
     * can be variable.
     * </p>
     *
     */
    protected LinkedHashMap<String, Object> dispatchArguments(Object obj) {
        LinkedHashMap<String, Object> prepped = new LinkedHashMap<String, Object>();
        
        List<Parameter<?>> args = getFunctionName().getArguments();
        List<Expression> expr = getParameters();
        
        if (expr.size() < args.size()) {
            Parameter<?> last = args.get(args.size()-1);
            
            //check the last argument
            if (args.get(0).getMinOccurs() != 0) {
                throw new IllegalArgumentException(String.format("No arguments specified for arg " +
                    "%s, minOccurs = %d", last.getName().toString(), last.getMinOccurs()));
            }
        }
        for (int i = 0; i < expr.size(); i++) {
            Parameter<?> arg = args.get(Math.min(i, args.size()-1));
            String argName = arg.getName().toString();

            Object o = expr.get(i).evaluate(obj, arg.getType());
            if (o == null) {
                if (expr.get(i).evaluate(obj) != null) {
                    //conversion error
                    throw new IllegalArgumentException(String.format("Failure converting value for "+
                      "argument %s. %s could not be converted to %s", arg.getName(), obj.toString(),
                      arg.getType().getName()));
                }
            }
            if (prepped.containsKey(argName)) {
                if (arg.getMaxOccurs() == 1) {
                    throw new IllegalArgumentException(String.format("Multiple values specified for " +
                        "argument %s  but maxOccurs = 1", argName)); 
                }

                //if there is already a value for this argument it is a multi argument which
                // means a list
                List l = (List) prepped.get(argName);
                l.add(o);
            }
            else {
                //check for variable argument, use a list if maxOccurs > 1
                if (arg.getMaxOccurs() < 0 || arg.getMaxOccurs() > 1) {
                    List l = new ArrayList();
                    l.add(o);
                    prepped.put(argName, l);
                }
                else {
                    prepped.put(argName, o);
                }
            }
        }
        
        return prepped;
    }

