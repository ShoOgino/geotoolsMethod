    /**
     * Creates a <code>MultiLineString</code> using the next token in the stream.
     * 
     *@return a <code>MultiLineString</code> specified by the next token in the stream
     *@throws IOException
     *             if an I/O error occurs
     *@throws ParseException
     *             if an unexpected token was encountered
     */
    private com.vividsolutions.jts.geom.MultiLineString readMultiLineStringText()
            throws IOException, ParseException {
        String nextToken = getNextEmptyOrOpener();
        if (nextToken.equals(EMPTY)) {
            return geometryFactory.createMultiLineString(new LineString[] {});
        }
        ArrayList lineStrings = new ArrayList();
        LineString lineString = readLineStringText();
        lineStrings.add(lineString);
        nextToken = getNextCloserOrComma();
        while (nextToken.equals(COMMA)) {
            lineString = readLineStringText();
            lineStrings.add(lineString);
            nextToken = getNextCloserOrComma();
        }
        LineString[] array = new LineString[lineStrings.size()];
        return geometryFactory.createMultiLineString((LineString[]) lineStrings.toArray(array));
    }

