    /**
     * Checks each available datasource implementation in turn and returns the
     * first one which claims to support the resource identified by the params
     * object.
     * 
     * @param params
     *            A Map object which contains a defenition of the resource to
     *            connect to. for file based resources the property 'url' should
     *            be set within this Map.
     * 
     * @return The first datasource which claims to process the required
     *         resource, returns null if none can be found.
     * 
     * @throws IOException
     *             If a suitable loader can be found, but it can not be attached
     *             to the specified resource without errors.
     */
    @SuppressWarnings("unchecked")
    public static synchronized DataAccess<FeatureType, Feature> getDataStore(
            Map<String, Serializable> params) throws IOException {
        Iterator<DataAccessFactory> ps = getAvailableDataStores();
        return (DataAccess<FeatureType, Feature>) getDataStore(params, ps);
    }

