    /**
     * Construct a live DataAccess using the connection parameters provided.
     *
     * <p>You can think of this class as setting up a connection to the back end data source. The
     * required parameters are described by the getParameterInfo() method.
     *
     * <p>Magic Params: the following params are magic and are honoured by convention by the
     * GeoServer and uDig application.
     *
     * <ul>
     *   <li>"user": is taken to be the user name
     *   <li>"passwd": is taken to be the password
     *   <li>"namespace": is taken to be the namespace prefix (and will be kept in sync with
     *       GeoServer namespace management.
     * </ul>
     *
     * When we eventually move over to the use of OpperationalParam we will have to find someway to
     * codify this convention.
     *
     * @param params The full set of information needed to construct a live data store. Typical key
     *     values for the map include: url - location of a resource, used by file reading
     *     datasources. dbtype - the type of the database to connect to, e.g. postgis, mysql
     * @return The created DataStore, this may be null if the required resource was not found or if
     *     insufficent parameters were given. Note that canProcess() should have returned false if
     *     the problem is to do with insuficent parameters.
     * @throws IOException if there were any problems setting up (creating or connecting) the
     *     datasource.
     */
    DataAccess<? extends FeatureType, ? extends Feature> createDataStore(
            Map<String, Serializable> params) throws IOException;

