    public Object evaluate(Object feature) {
        String format;
        Double number;
        String localeString = "";
        try {
            // attempt to get value and perform conversion
            format = getExpression(0).evaluate(feature, String.class);
        } catch (Exception e) // probably a type error
        {
            throw new IllegalArgumentException(
                    "Filter Function problem for function NumberFormat argument #0 - expected type String");
        }

        try { // attempt to get value and perform conversion
            number = getExpression(1).evaluate(feature, Double.class);
        } catch (Exception e) // probably a type error
        {
            throw new IllegalArgumentException(
                    "Filter Function problem for function NumberFormat argument #1 - expected type java.util.Double");
        }

        if (format == null || number == null) {
            return null;
        }
        try { // attempt to get value and perform conversion
            if (params.size() > 2) {
                Expression second = getExpression(2);

                localeString = second.evaluate(feature, String.class);
            }
        } catch (Exception e) // probably a type error
        {
            throw new IllegalArgumentException(
                    "Filter Function problem for function NumberFormat argument #2 - expected type String");
        }
        if (localeString != null && !localeString.isEmpty() && languages.contains(localeString)) {
            locale = Locale.forLanguageTag(localeString);

        }

        DecimalFormatSymbols decimalFormatSymbols = DecimalFormatSymbols.getInstance(locale);

        DecimalFormat numberFormat = new DecimalFormat(format, decimalFormatSymbols);
        return numberFormat.format(number);
    }

