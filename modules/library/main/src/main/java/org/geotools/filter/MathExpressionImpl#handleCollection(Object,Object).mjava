    protected Object handleCollection(Object value1, Object value2) {
        List<Number> numericList;
        final Number scalar;
        if (value1 instanceof Collection && value2 instanceof Collection) {
            throw new RuntimeException("Both Maths expressions cannot be Collections");
        } else if (value1 instanceof Collection) {
            // first is collection, second is scalar
            @SuppressWarnings("unchecked")
            Collection<Object> c1 = (Collection<Object>) value1;
            numericList =
                    c1.stream()
                            .map(v -> Converters.convert(v, Number.class))
                            .collect(Collectors.toList());
            scalar = Filters.number(value2);

        } else {
            // second is collection, first is scalar
            @SuppressWarnings("unchecked")
            Collection<Object> unc = (Collection<Object>) value2;
            numericList =
                    unc.stream()
                            .map(v -> Converters.convert(v, Number.class))
                            .collect(Collectors.toList());
            scalar = Filters.number(value1);
        }

        return numericList
                .stream()
                .map(n -> doArithmeticOperation(n.doubleValue(), scalar.doubleValue()))
                .collect(Collectors.toList());
    }

