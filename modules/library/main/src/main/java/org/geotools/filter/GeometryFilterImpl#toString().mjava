    /**
     * Return this filter as a string.
     *
     * @return String representation of this geometry filter.
     */
    public String toString() {
        String operator = null;

        // Handles all normal geometry cases
        if (this instanceof Equals) {
            operator = " equals ";
        } else if (this instanceof Disjoint) {
            operator = " disjoint ";
        } else if (this instanceof Intersects) {
            operator = " intersects ";
        } else if (this instanceof Touches) {
            operator = " touches ";
        } else if (this instanceof Crosses) {
            operator = " crosses ";
        } else if (this instanceof Within) {
            operator = " within ";
        } else if (this instanceof Contains) {
            operator = " contains ";
        } else if (this instanceof Overlaps) {
            operator = " overlaps ";
        } else if (this instanceof Beyond) {
            operator = " beyond ";
        } else if (this instanceof BBOX) {
            operator = " bbox ";
        }

        org.opengis.filter.expression.Expression leftGeometry = getExpression1();
        org.opengis.filter.expression.Expression rightGeometry = getExpression2();

        if ((expression1 == null) && (rightGeometry == null)) {
            return "[ " + "null" + operator + "null" + " ]";
        } else if (leftGeometry == null) {
            return "[ " + "null" + operator + rightGeometry.toString() + " ]";
        } else if (rightGeometry == null) {
            return "[ " + leftGeometry.toString() + operator + "null" + " ]";
        }

        return "[ " + leftGeometry.toString() + operator + rightGeometry.toString() + " ]";
    }

