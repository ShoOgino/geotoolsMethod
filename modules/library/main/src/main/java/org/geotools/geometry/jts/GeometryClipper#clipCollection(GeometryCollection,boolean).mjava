    /** Recursively clips a collection */
    private Geometry clipCollection(GeometryCollection gc, boolean ensureValid) {
        if (gc.getNumGeometries() == 1) {
            return clip(gc.getGeometryN(0), ensureValid);
        } else {
            List<Geometry> result = new ArrayList<>(gc.getNumGeometries());
            for (int i = 0; i < gc.getNumGeometries(); i++) {
                Geometry clipped = clip(gc.getGeometryN(i), ensureValid);
                if (clipped != null) {
                    result.add(clipped);
                }
            }

            flattenCollection(result);

            if (gc instanceof MultiPoint) {
                result = filterCollection(Point.class, result);
            } else if (gc instanceof MultiLineString) {
                result = filterCollection(LineString.class, result);
            } else if (gc instanceof MultiPolygon) {
                result = filterCollection(Polygon.class, result);
            }

            if (result.isEmpty()) {
                return null;
            } else if (result.size() == 1) {
                return result.get(0);
            }

            flattenCollection(result);

            if (gc instanceof MultiPoint) {
                return gc.getFactory().createMultiPoint(result.toArray(new Point[result.size()]));
            } else if (gc instanceof MultiLineString) {
                return gc.getFactory()
                        .createMultiLineString(result.toArray(new LineString[result.size()]));
            } else if (gc instanceof MultiPolygon) {
                return gc.getFactory()
                        .createMultiPolygon(result.toArray(new Polygon[result.size()]));
            } else {
                return gc.getFactory()
                        .createGeometryCollection(result.toArray(new Geometry[result.size()]));
            }
        }
    }

