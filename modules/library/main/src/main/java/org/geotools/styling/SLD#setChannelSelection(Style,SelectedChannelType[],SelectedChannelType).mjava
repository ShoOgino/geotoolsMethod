    /**
     * Updates the raster channel selection in a Style object
     *
     * <p>This method will update the Style in place; some of the rules & symbolizers will be
     * replace with modified copies. All symbolizes associated with all rules are updated.
     *
     * @param style the Style object to be updated
     * @param rgb - an array of the new red, green, blue channels or null if setting the gray
     *     channel
     * @param gray - the new gray channel; ignored if rgb is not null
     */
    public static void setChannelSelection(
            Style style, final SelectedChannelType[] rgb, final SelectedChannelType gray) {
        if (style == null) {
            return;
        }
        for (FeatureTypeStyle featureTypeStyle : style.featureTypeStyles()) {
            for (int i = 0; i < featureTypeStyle.rules().size(); i++) {
                Rule rule = featureTypeStyle.rules().get(i);

                DuplicatingStyleVisitor update =
                        new DuplicatingStyleVisitor() {

                            @Override
                            public void visit(RasterSymbolizer raster) {

                                ChannelSelection channelSelection = createChannelSelection();

                                ColorMap colorMap = copy(raster.getColorMap());
                                ContrastEnhancement ce = copy(raster.getContrastEnhancement());
                                String geometryProperty = raster.getGeometryPropertyName();
                                Symbolizer outline = copy(raster.getImageOutline());
                                Expression overlap = copy(raster.getOverlap());
                                ShadedRelief shadedRelief = copy(raster.getShadedRelief());

                                Expression opacity = copy(raster.getOpacity());

                                RasterSymbolizer copy =
                                        sf.createRasterSymbolizer(
                                                geometryProperty,
                                                opacity,
                                                channelSelection,
                                                overlap,
                                                colorMap,
                                                ce,
                                                shadedRelief,
                                                outline);
                                if (STRICT && !copy.equals(raster)) {
                                    throw new IllegalStateException(
                                            "Was unable to duplicate provided raster:" + raster);
                                }
                                pages.push(copy);
                            }

                            private ChannelSelection createChannelSelection() {
                                if (rgb != null) {
                                    return sf.createChannelSelection(rgb);
                                } else {
                                    return sf.createChannelSelection(gray);
                                }
                            }
                        };

                rule.accept(update);
                Rule updatedRule = (Rule) update.getCopy();
                featureTypeStyle.rules().set(i, updatedRule);
            }
        }
    }

