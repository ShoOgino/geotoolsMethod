    /**
     * djb - noticed that the old way of finding out the decimation is based on the (0,0) location
     * of the image. This is often wildly unrepresentitive of the scale of the entire map.
     *
     * <p>A better thing to do is to decimate this on a per-shape basis (and use the shape's
     * center). Another option would be to sample the image at different locations (say 9) and
     * choose the smallest spanx/spany you find.
     *
     * <p>Also, if the xform is an affine Xform, you can be a bit more aggressive in the decimation.
     * If its not an affine xform (ie. its actually doing a CRS xform), you may find this is a bit
     * too aggressive due to any number of mathematical issues.
     *
     * <p>This is just a simple method that uses the centre of the given rectangle instead of (0,0).
     *
     * <p>NOTE: this could need more work based on CRS, but the rectangle is in pixels so it should
     * be fairly immune to all but crazy projections.
     */
    public Decimator(MathTransform screenToWorld, Rectangle paintArea) {
        // 0.8 is just so you don't decimate "too much". magic number.
        this(screenToWorld, paintArea, 0.8);
    }

