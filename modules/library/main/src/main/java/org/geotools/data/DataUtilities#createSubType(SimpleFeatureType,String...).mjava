    /**
     * Create a type limited to the named properties provided.
     *
     * @return type limited to the named properties provided
     */
    public static SimpleFeatureType createSubType(
            SimpleFeatureType featureType, String... properties) throws SchemaException {
        if (properties == null) {
            return featureType;
        }

        boolean same = featureType.getAttributeCount() == properties.length;

        for (int i = 0; (i < featureType.getAttributeCount()) && same; i++) {
            same = featureType.getDescriptor(i).getLocalName().equals(properties[i]);
        }

        if (same) {
            return featureType;
        }

        SimpleFeatureTypeBuilder tb = new SimpleFeatureTypeBuilder();
        tb.setName(featureType.getName());
        tb.setCRS(null); // not interested in warnings from this simple method
        for (String property : properties) {
            // let's get the attribute descriptor corresponding to the current property
            AttributeDescriptor attributeDescriptor = featureType.getDescriptor(property);
            if (attributeDescriptor != null) {
                // if the property doesn't map to an attribute descriptor we ignore it
                // an attribute descriptor may be omitted for security proposes for example
                tb.add(attributeDescriptor);
            }
        }
        setDefaultGeometry(tb, properties, featureType);
        return tb.buildFeatureType();
    }

