    /**
     * Gets the value of this attribute from the passed object.
     *
     * @param obj Object from which to extract attribute value.
     * @param target Target Class
     */
    @SuppressWarnings("unchecked")
    public <T> T evaluate(Object obj, Class<T> target) {
        PropertyAccessor accessor = lastAccessor;

        Object value = false;
        boolean success = false;
        if (accessor != null && accessor.canHandle(obj, attPath, target)) {
            try {
                value = accessor.get(obj, attPath, target);
                success = true;
            } catch (Exception e) {
                // fine, we'll try another accessor
            }
        }

        // made it here, means an accessor needs to be found
        if (!success) {
            if (namespaceSupport != null && hints == null) {
                hints = new Hints(PropertyAccessorFactory.NAMESPACE_CONTEXT, namespaceSupport);
            }
            List<PropertyAccessor> accessors =
                    PropertyAccessors.findPropertyAccessors(obj, attPath, target, hints);
            List<Exception> exceptions = null;
            if (accessors != null) {
                for (PropertyAccessor propertyAccessor : accessors) {
                    accessor = propertyAccessor;
                    try {
                        value = accessor.get(obj, attPath, target);
                        success = true;
                        break;
                    } catch (Exception e) {
                        // fine, we'll try another accessor
                        if (exceptions == null) {
                            exceptions = new ArrayList<>();
                        }
                        exceptions.add(e);
                    }
                }
            }

            if (!success) {
                if (lenient) return null;
                else {
                    IllegalArgumentException exception =
                            new IllegalArgumentException(
                                    "Could not find working property accessor for attribute ("
                                            + attPath
                                            + ") in object ("
                                            + obj
                                            + ")");
                    if (exceptions != null) {
                        exceptions.forEach(e -> exception.addSuppressed(exception));
                    }
                    throw exception;
                }
            } else {
                lastAccessor = accessor;
            }
        }

        if (target == null) {
            return (T) value;
        }

        return Converters.convert(value, target);
    }

