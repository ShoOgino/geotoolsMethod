    /**
     * Cubic hermite spline interpolation. This is adapted from the description of the
     * algorithm at: http://en.wikipedia.org/wiki/Cubic_Hermite_spline.
     * Tangent caculations are done with simple finite differencing in the interests
     * of speed.
     * <p>
     * The input arrays xi and yi contain the coordinates of four interpolation
     * points defining three segments with the middle segment containing the point
     * for which we seek an interpolated value.
     *
     * @param x x ordinate of the point for which we seek an interpolated value
     *          and which lies between xi[1] and xi[2]
     * @param xi x ordinates of the four interpolation points
     * @param yi y ordinates of the four interpolation points
     *
     * @return interpolated y value
     */
    private double doCubic(double x, double[] xi, double[] yi) {
        double span12 = getSpan(xi[1], xi[2]);
        double t = (x - xi[1]) / span12;

        if (t < EPS) {
            return yi[1];
        } else if (1.0 - t < EPS) {
            return yi[2];
        }

        double span01 = getSpan(xi[0], xi[1]);
        double span23 = getSpan(xi[2], xi[3]);
        double t2 = t*t;
        double t3 = t2 * t;

        double m1 = 0.5 * ((yi[2] - yi[1]) / span12 + (yi[1] - yi[0]) / span01);
        double m2 = 0.5 * ((yi[3] - yi[2]) / span23 + (yi[2] - yi[1]) / span12);

        double y = (2*t3 - 3*t2 + 1) * yi[1] +
                   (t3 - 2*t2 + t) * span12 * m1 +
                   (-2*t3 + 3*t2) * yi[2] +
                   (t3 - t2) * span12 * m2;

        return y;
    }

