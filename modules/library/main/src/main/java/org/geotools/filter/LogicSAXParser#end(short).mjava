    /**
     * To be called when the sax parser reaches the end of a logic filter.
     * Tells this class to complete.
     *
     * @param logicType the Filter type.
     *
     * @throws IllegalFilterException If the end message can't be processed in
     *         this state.
     */
     // logic types are AND=2, OR=1, NOT=3
    public void end(short logicType) throws IllegalFilterException {
        LOGGER.finer("got an end element: " + logicType);

        if (logicFactory != null) {
            LOGGER.finer("sending end element to nested logic filter: "
                + logicType);
            logicFactory.end(logicType);

            if (logicFactory.isComplete()) {
                subFilters.add(logicFactory.create());
                logicFactory = null;
            }
        } else if (this.logicType == logicType) {
            LOGGER.finer("end element matched internal type: " + this.logicType);
            isComplete = true;
        } else {
            throw new IllegalFilterException(
                "Logic Factory got an end message that it can't process.");
        }
    }

