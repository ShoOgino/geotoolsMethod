    /**
     * Used to retrive the TransactionStateDiff for this transaction.
     * If you subclass is doing its own thing (ArcSDE I am talking to
     * you) then you should arrange for this method to return null.
     * <p>
     * By default a TransactionStateDiff will be created that holds
     * any changes in memory.
     * <p>
     * @param transaction
     * @return TransactionStateDiff or null if subclass is handling differences
     */
    protected TransactionStateDiff state(Transaction transaction) {
        synchronized (transaction) {
            TransactionStateDiff state = (TransactionStateDiff) transaction
                .getState(this);

            if (state == null) {
                state = new TransactionStateDiff(this);
                transaction.putState(this, state);
            }

            return state;
        }
    }

