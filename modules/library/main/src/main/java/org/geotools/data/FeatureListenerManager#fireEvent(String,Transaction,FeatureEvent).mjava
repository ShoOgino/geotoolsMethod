    /**
     * Provided event will be used as a template for notifying all FeatureSources
     * for the provided typeName.
     * 
     * @param typeName
     * @param transaction
     * @param event
     */
    public void fireEvent(String typeName, Transaction transaction, FeatureEvent event ){
    	if( event.getType() == FeatureEvent.Type.COMMIT ||
    	    event.getType() == FeatureEvent.Type.ROLLBACK ){

    		// This is a commit event; it needs to go out to everyone
    		// Listeners on the Transaction need to be told about any feature ids that were changed
    		// Listeners on AUTO_COMMIT need to be told that something happened            
            Map<SimpleFeatureSource,FeatureListener[]> map = getListeners(typeName, Transaction.AUTO_COMMIT);
            for (Map.Entry entry : map.entrySet()) {
                FeatureSource featureSource = (FeatureSource) entry.getKey();
                FeatureListener[] listeners = (FeatureListener[]) entry.getValue();
                event.setFeatureSource( featureSource );
                for (FeatureListener listener : listeners ){
                	try {
                		listener.changed(event);
                	}
                	catch( Throwable t ){
                		LOGGER.log( Level.FINE, "Could not deliver "+event+" to "+listener+":"+t.getMessage(), t );
                	}
                }
            }
    	}
    	else {
    		// This is a commit event; it needs to go out to everyone
    		// Listeners on the Transaction need to be told about any feature ids that were changed
    		// Listeners on AUTO_COMMIT need to be told that something happened            
    		Map<SimpleFeatureSource,FeatureListener[]> map = getListeners(typeName, transaction);
            for (Map.Entry entry : map.entrySet()) {
                FeatureSource featureSource = (FeatureSource) entry.getKey();
                FeatureListener[] listeners = (FeatureListener[]) entry.getValue();
                event.setFeatureSource( featureSource );
                for (FeatureListener listener : listeners ){
                	try {
                		listener.changed(event);
                	}
                	catch( Throwable t ){
                		LOGGER.log( Level.FINE, "Could not deliver "+event+" to "+listener+":"+t.getMessage(), t );
                	}
                }
            }
    	}
    }

