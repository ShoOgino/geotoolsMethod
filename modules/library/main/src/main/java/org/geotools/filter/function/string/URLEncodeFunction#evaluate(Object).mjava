    /**
     * URL encode the string.
     *
     * @param feature
     * @return The URL encoded string
     * @throws IllegalArgumentException
     */
    @Override
    public Object evaluate(Object feature) {
        String stringToBeEncoded;

        try { // attempt to get value and perform encoding
            stringToBeEncoded = getExpression(0).evaluate(feature, String.class);
        } catch (Exception e) // probably a type error
        {
            throw new IllegalArgumentException(
                    "Filter Function problem for function strURLEncode argument #0 - expected type String");
        }

        Boolean formUrlEncode = Boolean.FALSE;
        if (params.size() == 2) {
            try {
                formUrlEncode = getExpression(1).evaluate(feature, Boolean.class);
            } catch (Exception e) // probably a type error
            {
                throw new IllegalArgumentException(
                        "Filter Function problem for function strURLEncode argument #1 - expected type Boolean");
            }
        }

        try {
            String encoded = URLEncoder.encode(stringToBeEncoded, "utf-8");
            if (!formUrlEncode.booleanValue()) {
                // Using URLEncoder, spaces are converted to plus signs, convert to %20 for non form url encoding
                encoded = encoded.replaceAll("\\+", "%20");
            }

            return encoded;
        } catch (UnsupportedEncodingException e) {
            throw new IllegalArgumentException(
                    "Filter Function problem for function strURLEncode argument #0 - " + e.getMessage());
        }
    }

