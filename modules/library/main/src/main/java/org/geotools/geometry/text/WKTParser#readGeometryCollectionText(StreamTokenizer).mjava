    /**
     * Creates a {@code MultiPrimitive} out of a GEOMETRYCOLLECCTION specifier.
     *
     * @param tokenizer tokenizer on top of a stream of text in Well-known Text format.
     * @return a <code>MultiPrimitive</code> specified by the next tokens in the stream
     * @throws ParseException
     * @throws IOException if an I/O error occurs
     */
    private MultiPrimitive readGeometryCollectionText(StreamTokenizer tokenizer)
            throws IOException, ParseException {
        String nextToken = getNextEmptyOrOpener(tokenizer);
        if (nextToken.equals(EMPTY)) {
            return null;
        }
        MultiPrimitive multi = geometryFactory.createMultiPrimitive();
        Geometry geom = readGeometryTaggedText(tokenizer);
        // multi.getElements().add(geom);
        Set elements = multi.getElements();
        elements.add(geom);
        nextToken = getNextCloserOrComma(tokenizer);
        while (nextToken.equals(COMMA)) {
            geom = readGeometryTaggedText(tokenizer);
            // multi.getElements().add(geom);
            elements.add(geom);
            nextToken = getNextCloserOrComma(tokenizer);
        }
        return multi;
    }

