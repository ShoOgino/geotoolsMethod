    /**
     * Sets the match pattern for this FilterLike.
     *
     * @param p the expression which evaluates to the match pattern for this filter
     * @param wildcardMulti the string that represents a mulitple character (1->n) wildcard
     * @param wildcardSingle the string that represents a single character (1) wildcard
     * @param escape the string that represents an escape character
     * @deprecated use one of {@link PropertyIsLike#setExpression(Expression)} {@link
     *     PropertyIsLike#setWildCard(String)} {@link PropertyIsLike#setSingleChar(String)} {@link
     *     PropertyIsLike#setEscape(String)}
     */
    public final void setPattern(
            org.opengis.filter.expression.Expression p,
            String wildcardMulti,
            String wildcardSingle,
            String escape) {
        if (p instanceof Literal) {
            Literal literal = (Literal) p;
            Object value = literal.getValue();
            if (value != null && value instanceof String) {
                String pattern = (String) value;
                setPattern(pattern, wildcardMulti, wildcardSingle, escape);
            } else {
                throw new ClassCastException("Pattern Literal must be a string:" + value);
            }
        } else {
            throw new ClassCastException("Pattern must be a literal String");
        }
    }

