    /**
     * demultiplies the first expression
     *
     * @param filter The filter
     * @param replacer The filter replacer
     * @return the new filter
     */
    protected <T extends MultiValuedFilter> Filter demultiplyFirst(
            T filter, FilterReplacer<T> replacer) {

        Expression one = replacer.getExpression1(filter);
        Expression two = replacer.getExpression2(filter);

        if (one instanceof Literal) {
            Literal l = (Literal) one;
            Object value = l.getValue();
            if (value instanceof Collection) { // demultiplying is necessary
                List<Filter> filters = new ArrayList<>(); // list of all filters
                for (Object valueElement : (Collection) value) {
                    // create a single-valued new filter
                    filters.add(replacer.replaceExpressions(filter, ff.literal(valueElement), two));
                }
                // merge the filters depending on match action
                if (filter.getMatchAction() == MatchAction.ANY) {
                    return ff.or(filters);
                } else if (filter.getMatchAction() == MatchAction.ALL) {
                    return ff.and(filters);
                } else if (filter.getMatchAction() == MatchAction.ONE) {
                    List<Filter> filters2 = new ArrayList<>();
                    for (int i = 0; i < filters.size(); i++) {
                        List<Filter> filters3 = new ArrayList<>();
                        for (int j = 0; j < filters.size(); j++) {
                            if (i == j) {
                                filters3.add(filters.get(j));
                            } else {
                                filters3.add(ff.not(filters.get(j)));
                            }
                        }
                        filters2.add(ff.and(filters3));
                    }
                    return ff.or(filters2);
                }
            }
        }

        return filter;
    }

