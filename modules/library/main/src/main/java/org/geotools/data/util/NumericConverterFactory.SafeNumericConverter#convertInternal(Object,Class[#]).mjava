        public Object convertInternal(Object source, Class<?> target) {
            target = primitiveToWrapperClass(target);
            if (source instanceof Number) {
                Number number = (Number) source;
                Class c = number.getClass();

                if (BigDecimal.class.equals(target)) {
                    return new BigDecimal(source.toString());
                } else if (Double.class.equals(target)) {
                    if (c != BigDecimal.class && c != BigInteger.class) {
                        if (c == Float.class) {
                            // this is done to avoid coordinate drift
                            return Double.valueOf(number.toString());
                        }

                        return Double.valueOf(number.doubleValue());
                        // return Double.valueOf(source.toString());
                    }
                } else if (Float.class.equals(target)) {
                    if (c == Float.class
                            || c == Integer.class
                            || c == Short.class
                            || c == Byte.class) {
                        return Float.valueOf(number.floatValue());
                        // return Float.valueOf(source.toString());
                    }
                } else if (BigInteger.class.equals(target)) {
                    if (BigInteger.class.isAssignableFrom(c)
                            || c == Long.class
                            || c == Integer.class
                            || c == Short.class
                            || c == Byte.class) {
                        return new BigInteger(number.toString());
                        // return new BigInteger(source.toString());
                    }
                } else if (Long.class.equals(target)) {
                    if (c == Long.class
                            || c == Integer.class
                            || c == Short.class
                            || c == Byte.class) {
                        return Long.valueOf(number.longValue());
                        // return Long.valueOf(source.toString());
                    }
                } else if (Integer.class.equals(target)) {
                    if (c == Integer.class || c == Short.class || c == Byte.class) {
                        return Integer.valueOf(number.intValue());
                        // return Integer.valueOf(source.toString());
                    }
                } else if (Short.class.equals(target)) {
                    if (c == Short.class || c == Byte.class) {
                        return Short.valueOf(number.shortValue());
                        // return Short.valueOf(source.toString());
                    }
                } else if (Byte.class.equals(target)) {
                    if (c == Byte.class) {
                        return Byte.valueOf(number.byteValue());
                        // return Byte.valueOf(source.toString());
                    }
                }
            } else if (source instanceof String) {
                String src = (String) source;
                try {
                    if (BigDecimal.class.isAssignableFrom(target)) {
                        return new BigDecimal(src);
                        // if (x.toString().equals(src))
                        //    return x;
                    } else if (target == Double.class) {
                        Double x = Double.valueOf(src);
                        if (x.toString().equals(src)) return x;
                    } else if (target == Float.class) {
                        Float x = Float.valueOf(src);
                        if (x.toString().equals(src)) return x;
                    } else if (BigInteger.class.isAssignableFrom(target)) {
                        BigInteger x = new BigInteger(src);
                        if (x.toString().equals(src)) return x;
                    } else if (target == Long.class) {
                        Long x = Long.valueOf(src);
                        if (x.toString().equals(src)) return x;
                    } else if (target == Integer.class) {
                        Integer x = Integer.valueOf(src);
                        if (x.toString().equals(src)) return x;
                    } else if (target == Short.class) {
                        Short x = Short.valueOf(src);
                        if (x.toString().equals(src)) return x;
                    } else if (target == Byte.class) {
                        Byte x = Byte.valueOf(src);
                        if (x.toString().equals(src)) return x;
                    }
                } catch (Exception ex) {
                    return null;
                }
            }

            return null;
        }

