    /**
     * Used to issue a single FeatureEvent.
     *
     * <p>If this content state is used for Transaction.AUTO_COMMIT the notification will be passed
     * to all interested parties.
     *
     * <p>If not this event will be recored as part of a BatchFeatureEvent that will to be issued
     * using issueBatchFeatureEvent()
     *
     * @param event
     */
    public final void fireFeatureEvent(FeatureEvent event) {
        if (this.tx == Transaction.AUTO_COMMIT) {
            this.entry.notifiyFeatureEvent(this, event);
        } else {
            // we are not in auto-commit mode so we need to batch
            // up the changes for when the commit goes out
            if (batchFeatureEvent == null) {
                batchFeatureEvent = new BatchFeatureEvent(event.getFeatureSource());
            }
            batchFeatureEvent.add(event);
        }
        if (listeners.isEmpty()) {
            return;
        }
        for (FeatureListener listener : listeners) {
            try {
                listener.changed(event);
            } catch (Throwable t) {
                this.entry.dataStore.LOGGER.log(
                        Level.WARNING, "Problem issuing batch feature event " + event, t);
            }
        }
    }

