        /**
         * Provides support for text representations
         *
         * <p>Provides basic support for common types using reflection.
         *
         * <p>If needed you may extend this class to handle your own custome types.
         *
         * @param text Text representation of type should not be null or empty
         * @return Object converted from text representation
         * @throws IOException If text could not be parsed
         */
        public Object parse(String text) throws Throwable {
            Constructor<?> constructor;

            if (type.isEnum()) {
                if (text == null || text.isEmpty()) {
                    return null;
                }
                for (Object constant : type.getEnumConstants()) {
                    if (constant.toString().equalsIgnoreCase(text)) {
                        return constant;
                    }
                }
            }

            try {
                constructor = type.getConstructor(new Class[] {String.class});
            } catch (SecurityException | NoSuchMethodException e) {
                //  type( String ) constructor is not public
                throw new IOException("Could not create " + type.getName() + " from text");
            } // No type( String ) constructor

            try {
                return constructor.newInstance(
                        new Object[] {
                            text,
                        });
            } catch (IllegalArgumentException
                    | IllegalAccessException
                    | InstantiationException illegalArgumentException) {
                throw new DataSourceException(
                        "Could not create " + type.getName() + ": from '" + text + "'",
                        illegalArgumentException);
            } catch (InvocationTargetException targetException) {
                throw targetException.getCause();
            }
        }

