        /**
         * Provides support for text representations
         *
         * <p>Provides basic support for common types using reflection.
         *
         * <p>If needed you may extend this class to handle your own custome types.
         *
         * @param text Text representation of type should not be null or empty
         * @return Object converted from text representation
         * @throws IOException If text could not be parsed
         */
        public Object parse(String text) throws Throwable {
            Constructor<?> constructor;

            try {
                constructor = type.getConstructor(new Class[] {String.class});
            } catch (SecurityException e) {
                //  type( String ) constructor is not public
                throw new IOException("Could not create " + type.getName() + " from text");
            } catch (NoSuchMethodException e) {
                // No type( String ) constructor
                throw new IOException("Could not create " + type.getName() + " from text");
            }

            try {
                return constructor.newInstance(
                        new Object[] {
                            text,
                        });
            } catch (IllegalArgumentException illegalArgumentException) {
                throw new DataSourceException(
                        "Could not create " + type.getName() + ": from '" + text + "'",
                        illegalArgumentException);
            } catch (InstantiationException instantiaionException) {
                throw new DataSourceException(
                        "Could not create " + type.getName() + ": from '" + text + "'",
                        instantiaionException);
            } catch (IllegalAccessException illegalAccessException) {
                throw new DataSourceException(
                        "Could not create " + type.getName() + ": from '" + text + "'",
                        illegalAccessException);
            } catch (InvocationTargetException targetException) {
                throw targetException.getCause();
            }
        }

