    /**
     * SimpleFeatureCollection optimized for read-only access.
     *
     * <p>Available via getView( filter ):
     *
     * <ul>
     *   <li>getFeatures().sort( sort )
     *   <li>getFeatures( filter ).sort( sort )
     * </ul>
     *
     * <p>In particular this method of data access is intended for rendering and other high speed
     * operations; care should be taken to optimize the use of FeatureVisitor.
     *
     * <p>
     *
     * @return readonly access
     */

    // protected abstract SimpleFeatureCollection readonly(ContentState state, Filter filter);

    public QueryCapabilities getQueryCapabilities() {
        // lazy initialization, so that the subclass has all its data structures ready
        // when the method is called (it might need to consult them in order to decide
        // what query capabilities are really supported)
        if (queryCapabilities == null) {
            queryCapabilities = buildQueryCapabilities();
        }

        // we have to glaze the subclass query capabilities since we always support offset
        // and we support more sorting cases using the sorting wrappers
        return new QueryCapabilities() {
            public boolean isOffsetSupported() {
                // we always support offset since we support sorting
                return true;
            }

            public boolean supportsSorting(SortBy[] sortAttributes) {
                if (queryCapabilities.supportsSorting(sortAttributes)) {
                    // natively supported
                    return true;
                } else {
                    // check if we can use the merge-sort support
                    return SortedFeatureReader.canSort(getSchema(), sortAttributes);
                }
            }

            public boolean isReliableFIDSupported() {
                return queryCapabilities.isReliableFIDSupported();
            }

            public boolean isUseProvidedFIDSupported() {
                return queryCapabilities.isUseProvidedFIDSupported();
            }
        };
    }

