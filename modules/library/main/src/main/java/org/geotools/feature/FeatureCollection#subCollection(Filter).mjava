    /**
     * SimpleFeatureCollection "view" indicated by provided filter.
     *
     * <p>The contents of the returned SimpleFeatureCollection are determined by applying the
     * provider Filter to the entire contents of this FeatureCollection. The result is "live" and
     * modifications will be shared.
     *
     * <p>This method is used cut down on the number of filter based methods required for a useful
     * SimpleFeatureCollection construct. The FeatureCollections returned really should be
     * considered as a temporary "view" used to control the range of a removeAll, or modify
     * operation.
     *
     * <p>Example Use:
     *
     * <pre><code>
     * collection.subCollection( filter ).clear();
     * </code></pre>
     *
     * The above recommended use is agreement with the Collections API precident of List.subList(
     * start, end ).
     *
     * <p>The results of subCollection:
     *
     * <ul>
     *   <li>are to be considered unordered
     *   <li>may be an ordered FeatureList if requested when sortBy is indicated
     * </ul>
     *
     * @see FeatureList
     * @return SimpleFeatureCollection identified as subset.
     */
    public FeatureCollection<T, F> subCollection(Filter filter);

