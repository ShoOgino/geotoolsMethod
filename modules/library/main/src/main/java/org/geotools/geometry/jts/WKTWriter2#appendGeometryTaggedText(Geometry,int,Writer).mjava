    /**
     * Converts a <code>Geometry</code> to &lt;Geometry Tagged Text&gt; format, then appends it to
     * the writer.
     *
     * @param geometry the <code>Geometry</code> to process
     * @param writer the output writer to append to
     */
    private void appendGeometryTaggedText(Geometry geometry, int level, Writer writer)
            throws IOException {
        indent(level, writer);

        if (geometry instanceof Point) {
            Point point = (Point) geometry;
            appendPointTaggedText(point.getCoordinate(), level, writer, point.getPrecisionModel());
        } else if (geometry instanceof CircularString) {
            appendCircularStringTaggedText((CircularString) geometry, level, writer);
        } else if (geometry instanceof CircularRing) {
            appendCircularStringTaggedText((CircularRing) geometry, level, writer);
        } else if (geometry instanceof CompoundCurve) {
            @SuppressWarnings("unchecked")
            CompoundCurvedGeometry<LineString> cast = (CompoundCurvedGeometry) geometry;
            appendCompoundCurveTaggedText(cast, level, writer);
        } else if (geometry instanceof CompoundRing) {
            @SuppressWarnings("unchecked")
            CompoundCurvedGeometry<LineString> cast = (CompoundCurvedGeometry) geometry;
            appendCompoundCurveTaggedText(cast, level, writer);
        } else if (geometry instanceof LinearRing) {
            appendLinearRingTaggedText((LinearRing) geometry, level, writer);
        } else if (geometry instanceof LineString) {
            appendLineStringTaggedText((LineString) geometry, level, writer);
        } else if (geometry instanceof CurvePolygon) {
            appendCurvePolygonTaggedText((CurvePolygon) geometry, level, writer);
        } else if (geometry instanceof Polygon) {
            appendPolygonTaggedText((Polygon) geometry, level, writer);
        } else if (geometry instanceof MultiPoint) {
            appendMultiPointTaggedText((MultiPoint) geometry, level, writer);
        } else if (geometry instanceof MultiCurve) {
            appendMultiCurveTaggedText((MultiCurve) geometry, level, writer);
        } else if (geometry instanceof MultiLineString) {
            appendMultiLineStringTaggedText((MultiLineString) geometry, level, writer);
        } else if (geometry instanceof MultiSurface) {
            appendMultiSurfaceTaggedText((MultiSurface) geometry, level, writer);
        } else if (geometry instanceof MultiPolygon) {
            appendMultiPolygonTaggedText((MultiPolygon) geometry, level, writer);
        } else if (geometry instanceof GeometryCollection) {
            appendGeometryCollectionTaggedText((GeometryCollection) geometry, level, writer);
        } else {
            Assert.shouldNeverReachHere(
                    "Unsupported Geometry implementation:" + geometry.getClass());
        }
    }

