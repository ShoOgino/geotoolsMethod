    /**
     * Called by commit() to apply one set of diff
     * 
     * <p>
     * The provided <code> will be modified as the differences are applied,
     * If the operations are all successful diff will be empty at
     * the end of this process.
     * </p>
     * 
     * <p>
     * diff can be used to represent the following operations:
     * </p>
     * 
     * <ul>
     * <li>
     * fid|null: represents a fid being removed
     * </li>
     * 
     * <li>
     * fid|feature: where fid exists, represents feature modification
     * </li>
     * <li>
     * fid|feature: where fid does not exist, represents feature being modified
     * </li>
     * </ul>
     * 
     *
     * @param typeName typeName being updated
     * @param diff differences to apply to FeatureWriter
     *
     * @throws IOException If the entire diff cannot be writen out
     * @throws DataSourceException If the entire diff cannot be writen out
     */
    void applyDiff(String typeName, Diff diff) throws IOException {
        if (diff.isEmpty()) {
            return;
        }
        FeatureWriter<SimpleFeatureType, SimpleFeature> writer;
		try{
        	writer = store.createFeatureWriter(typeName, transaction);
        }catch (UnsupportedOperationException e) {
			// backwards compatibility
        	try {
        		writer = store.getFeatureWriter(typeName);
        	}
        	catch( UnsupportedOperationException eek){
        		throw e; // throw original - our fallback did not work
        	}
		}
        SimpleFeature feature;
        SimpleFeature update;
        String fid;

        try {
            while (writer.hasNext()) {
                feature = (SimpleFeature)writer.next();
                fid = feature.getID();

                if (diff.modified2.containsKey(fid)) {
                    update = (SimpleFeature) diff.modified2.get(fid);

                    if (update == NULL) {
                        writer.remove();

                        // notify
                        store.listenerManager.fireFeaturesRemoved(typeName,
                            transaction, ReferencedEnvelope.reference(feature.getBounds()), true);
                    } else {
                        try {
                            feature.setAttributes(update.getAttributes());
                            writer.write();

                            // notify                        
                            ReferencedEnvelope bounds = new ReferencedEnvelope((CoordinateReferenceSystem)null);
                            bounds.include(feature.getBounds());
                            bounds.include(update.getBounds());
                            store.listenerManager.fireFeaturesChanged(typeName,
                                transaction, bounds, true);
                        } catch (IllegalAttributeException e) {
                            throw new DataSourceException("Could update " + fid,
                                e);
                        }
                    }
                }
            }

            SimpleFeature addedFeature;
            SimpleFeature nextFeature;
            
            synchronized (diff) {
            	for (Iterator i = diff.added.values().iterator(); i.hasNext();) {
            		addedFeature = (SimpleFeature) i.next();
            		
            		fid = addedFeature.getID();
            		
            		nextFeature = (SimpleFeature)writer.next();
            		
            		if (nextFeature == null) {
            			throw new DataSourceException("Could not add " + fid);
            		} else {
            			try {
            				nextFeature.setAttributes(addedFeature
            						.getAttributes());
            				writer.write();
            				
            				// notify                        
            				store.listenerManager.fireFeaturesAdded(typeName,
            						transaction, ReferencedEnvelope.reference(nextFeature.getBounds()), true);
            			} catch (IllegalAttributeException e) {
            				throw new DataSourceException("Could update " + fid,
            						e);
            			}
            		}
            	}
            }
        } finally {
            writer.close();
            store.listenerManager.fireChanged(typeName, transaction, true);
            diff.clear();
        }
    }

