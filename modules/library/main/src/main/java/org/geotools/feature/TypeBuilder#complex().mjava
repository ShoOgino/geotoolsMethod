    /**
     * Create a complex attribute, made up of other attributes.
     *
     * <p>Example using Set:
     *
     * <pre><code>
     * builder.setName(&quot;FullName&quot;);
     * builder.setProperties(new HasSet());
     * builder.addAttribute(&quot;first&quot;, TEXT);
     * builder.setMinOccurs(0);
     * builder.setMaxOccurs(Integer.MAX_VALUE);
     * builder.addAttribute(&quot;middle&quot;, TEXT);
     * builder.addAttribute(&quot;last&quot;, TEXT);
     * ComplexType FULLNAME = builder.complex();
     * </code></pre>
     *
     * <p>Example using chaining:
     *
     * <pre><code>
     * ComplexType FULLNAME = builder.name(&quot;FullName&quot;).attribute(&quot;first&quot;, TEXT).cardinality(0,
     *         Integer.MAX_VALUE).attribute(&quot;middle&quot;, TEXT).attribute(&quot;last&quot;, TEXT).complex();
     * </code></pre>
     *
     * @return ComplexType
     */
    public ComplexType complex() {
        ComplexType type =
                getTypeFactory()
                        .createComplexType(
                                typeName(),
                                properties(),
                                isIdentified(),
                                isAbstract(),
                                restrictions(),
                                getSuper(),
                                getDescription());
        reset();
        return type;
    }

