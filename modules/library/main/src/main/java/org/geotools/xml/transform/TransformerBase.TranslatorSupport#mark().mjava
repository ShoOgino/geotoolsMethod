        /**
         * Set a mark() to which we can later "roll back" writes. After a call to mark(), the
         * Translator stores pending write operations in memory until commit() is called. The
         * pending writes can be discarded with the reset() method.
         *
         * <p>Typically, one would use marks in conjunction with an exception handler:
         *
         * <pre>
         *   void encodeFoo(Foo f) {
         *     try {
         *       mark();
         *       element(foo.riskyMethod());
         *       element(foo.dangerousMethod());
         *       commit();
         *     } catch (BadThingHappened disaster) {
         *         mitigate(disaster);
         *         reset();
         *     }
         *   }
         * </pre>
         *
         * @throws IllegalStateException if a mark is already set
         */
        protected void mark() {
            if (backend == bufferedBackend) throw new IllegalStateException("Mark already set");
            backend = bufferedBackend;
        }

