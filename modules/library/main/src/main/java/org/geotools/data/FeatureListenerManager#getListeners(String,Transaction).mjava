    /**
     * Returns a Map of FeatureListener[] by SimpleFeatureSource for all matches with featureType
     * and transaction.
     *
     * <p>A SimpleFeatureSource is considered a match when typeName and Transaction agree.
     * Transaction.AUTO_COMMIT will match with any change.
     *
     * @param typeName typeName to match against
     * @param transaction Transaction to match against (may be AUTO_COMMIT)
     */
    Map<SimpleFeatureSource, FeatureListener[]> getListeners(
            String typeName, Transaction transaction) {
        Map<SimpleFeatureSource, FeatureListener[]> map =
                new HashMap<SimpleFeatureSource, FeatureListener[]>();
        // Map.Entry<SimpleFeatureSource,FeatureListener[]> entry;
        SimpleFeatureSource featureSource;
        EventListenerList listenerList;
        FeatureListener[] listeners;

        synchronized (listenerMap) {
            for (Map.Entry entry : listenerMap.entrySet()) {
                featureSource = (SimpleFeatureSource) entry.getKey();

                if (!featureSource.getName().getLocalPart().equals(typeName)) {
                    continue; // skip as typeName does not match
                }

                if ((transaction != Transaction.AUTO_COMMIT) && hasTransaction(featureSource)) {
                    // need to ensure Transactions match
                    if (transaction != getTransaction(featureSource)) {
                        continue; // skip as transactions do not match
                    }
                }

                listenerList = (EventListenerList) entry.getValue();
                listeners = (FeatureListener[]) listenerList.getListeners(FeatureListener.class);

                if (listeners.length != 0) {
                    map.put(featureSource, listeners);
                }
            }
        }

        return map;
    }

