    /**
     * Creates a <code>Curve</code> using the next token in the stream.
     *
     * @param tokenizer tokenizer over a stream of text in Well-known Text format. The next tokens
     *     must form a &lt;LineString Text&gt;.
     * @return a <code>Curve</code> specified by the next token in the stream
     * @throws IOException if an I/O error occurs
     * @throws ParseException if the coordinates used to create the <code>Curve</code> do not form a
     *     closed linestring, or if an unexpected token was encountered
     */
    private Curve readLinearRingText(StreamTokenizer tokenizer) throws IOException, ParseException {
        List<Position> coordList = getCoordinates(tokenizer);
        LineString lineString = geometryFactory.createLineString(coordList);
        List<CurveSegment> curveSegmentList = Collections.singletonList(lineString);
        Curve curve = primitiveFactory.createCurve(curveSegmentList);
        return curve;
        // List curveList = Collections.singletonList(curve);
        // return primitiveFactory.createRing(curveList);
    }

