    /**
     * Figure out the OperationName for the provided filterType.
     *
     * <p>The returned name can be used to check the FilterCapabilities to see if it type is
     * supported in this execution context.
     *
     * <p>This approach is not applicable for Functions.
     *
     * <p>
     *
     * @param filterType Filter type
     * @return Operation name for the provided FilterType
     */
    public String toOperationName(Class filterType) {
        if (filterType == null) return null;

        String quick = filterNames.get(filterType);
        if (quick != null) {
            return quick;
        }

        // The following is O(N) and slightly wrong in that And.class is not an operator
        for (Map.Entry<Class<?>, String> mapping : filterNames.entrySet()) {
            if (mapping.getKey().isAssignableFrom(filterType)) {
                return mapping.getValue();
            }
        }
        /*
        // The following is < O(N) but more complicated to maintain
        if( SpatialOperator.class.isAssignableFrom(filterType)) {
            if( BBOX.class.isAssignableFrom(filterType)){
                return BBOX.NAME;
            }
            else if ( Contains.class.isAssignableFrom(filterType)){
                return Contains.NAME;
            }
            else if ( Crosses.class.isAssignableFrom(filterType)){
                return Crosses.NAME;
            }
            else if ( Disjoint.class.isAssignableFrom(filterType)){
                return Disjoint.NAME;
            }
            else if ( Beyond.class.isAssignableFrom(filterType)){
                return Beyond.NAME;
            }
            else if ( DWithin.class.isAssignableFrom(filterType)){
                return DWithin.NAME;
            }
            else if ( Equals.class.isAssignableFrom(filterType)){
                return Equals.NAME;
            }
            else if ( Intersects.class.isAssignableFrom(filterType)){
                return Intersects.NAME;
            }
            else if ( Overlaps.class.isAssignableFrom(filterType)){
                return Overlaps.NAME;
            }
            else if ( Touches.class.isAssignableFrom(filterType)){
                return Touches.NAME;
            }
            else if ( Within.class.isAssignableFrom(filterType)){
                return Within.NAME;
            }
        }
        else if( BinaryComparisonOperator.class.isAssignableFrom(filterType) ){
            if ( PropertyIsEqualTo.class.isAssignableFrom(filterType)){
                return PropertyIsEqualTo.NAME;
            }
            else if ( PropertyIsGreaterThan.class.isAssignableFrom(filterType)){
                return PropertyIsGreaterThan.NAME;
            }
            else if ( PropertyIsGreaterThanOrEqualTo.class.isAssignableFrom(filterType)){
                return PropertyIsGreaterThanOrEqualTo.NAME;
            }
            else if ( PropertyIsLessThan.class.isAssignableFrom(filterType)){
                return PropertyIsLessThan.NAME;
            }
            else if ( PropertyIsLessThanOrEqualTo.class.isAssignableFrom(filterType)){
                return PropertyIsLessThanOrEqualTo.NAME;
            }
            else if ( PropertyIsNotEqualTo.class.isAssignableFrom(filterType)){
                return PropertyIsNotEqualTo.NAME;
            }
        }
        else if( PropertyIsBetween.class.isAssignableFrom(filterType)) {
            return PropertyIsBetween.NAME;
        }
        else if( PropertyIsLike.class.isAssignableFrom(filterType)) {
            return PropertyIsLike.NAME;
        }
        else if( PropertyIsNull.class.isAssignableFrom(filterType)) {
            return PropertyIsNull.NAME;
        }
        else if( Function.class.isAssignableFrom(filterType)) {
            throw new IllegalArgumentException("Cannot determine function name from class");
        }
        */
        return null;
    }

