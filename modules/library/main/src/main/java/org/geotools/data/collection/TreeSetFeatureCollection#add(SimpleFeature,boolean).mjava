    /**
     * Add a feature (safely to the internal collection).
     * 
     * @param feature
     * @param fire ignored (formally used to control events)
     * @return true of feature was added
     */
    protected boolean add(SimpleFeature feature, boolean fire) {

        // This cast is neccessary to keep with the contract of Set!
        if (feature == null)
            return false; // cannot add null!
        final String ID = feature.getID();
        if (ID == null)
            return false; // ID is required!
        if (contents.containsKey(ID))
            return false; // feature all ready present

        if (this.schema == null) {
            this.schema = feature.getFeatureType();
        }
        SimpleFeatureType childType = (SimpleFeatureType) getSchema();
        // if ( childType==null ){
        // //this.childType=
        // }else{
        if (!feature.getFeatureType().equals(childType))
            LOGGER.warning("Feature Collection contains a heterogeneous" + " mix of features");

        // }
        // TODO check inheritance with FeatureType here!!!
        contents.put(ID, feature);
//        if (fire) {
//            fireChange(feature, CollectionEvent.FEATURES_ADDED);
//        }
        return true;
    }

