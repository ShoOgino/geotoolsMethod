    /**
     * Parse digits in text as integer value. This internal method is used for number values
     * embedded within lexical structures. Only decimal digits can be included in the text range
     * parsed.
     *
     * @param text text to be parsed
     * @param offset starting offset in text
     * @param length number of digits to be parsed
     * @return converted positive integer value
     * @throws IllegalArgumentException on parse error
     */
    private static int parseDigits(String text, int offset, int length)
            throws IllegalArgumentException {
        // check if overflow a potential problem
        int value = 0;

        if (length > 9) {
            // use library parse code for potential overflow
            try {
                value = Integer.parseInt(text.substring(offset, offset + length));
            } catch (NumberFormatException ex) {
                throw new IllegalArgumentException(ex.getMessage());
            }
        } else {
            // parse with no overflow worries
            int limit = offset + length;

            while (offset < limit) {
                char chr = text.charAt(offset++);

                if ((chr >= '0') && (chr <= '9')) {
                    value = (value * 10) + (chr - '0');
                } else {
                    throw new IllegalArgumentException("Non-digit in number value");
                }
            }
        }

        return value;
    }

