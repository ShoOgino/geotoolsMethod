    /**
     * Helper class for the integer compare operators.
     *
     * @throws IllegalFilterException If the constructed filter is not valid.
     */
    public void compareSqlTimeRunner(
            PropertyName testAttribute,
            Class filterType,
            boolean test1,
            boolean test2,
            boolean test3)
            throws IllegalFilterException {
        Calendar calLocal = Calendar.getInstance();
        calLocal.setTime(calTime.getTime());
        calLocal.set(Calendar.HOUR_OF_DAY, calTime.get(Calendar.HOUR_OF_DAY) - 1);
        Literal testLiteral =
                new LiteralExpressionImpl(new java.sql.Time(calLocal.getTimeInMillis()).toString());
        org.opengis.filter.Filter filter = compare(filterType, testAttribute, testLiteral);

        // LOGGER.finer( filter.toString());
        // LOGGER.finer( "contains feature: " + filter.contains(testFeature));
        assertEquals(filter.evaluate(testFeature), test1);

        testLiteral =
                new LiteralExpressionImpl(new java.sql.Time(calTime.getTimeInMillis()).toString());
        filter = compare(filterType, testAttribute, testLiteral);

        // LOGGER.finer( filter.toString());
        // LOGGER.finer( "contains feature: " + filter.contains(testFeature));
        assertEquals(filter.evaluate(testFeature), test2);

        calLocal.set(Calendar.HOUR_OF_DAY, calTime.get(Calendar.HOUR_OF_DAY) + 1);
        testLiteral =
                new LiteralExpressionImpl(new java.sql.Time(calLocal.getTimeInMillis()).toString());
        filter = compare(filterType, testAttribute, testLiteral);

        // LOGGER.finer( filter.toString());
        // LOGGER.finer( "contains feature: " + filter.contains(testFeature));
        assertEquals(filter.evaluate(testFeature), test3);
    }

