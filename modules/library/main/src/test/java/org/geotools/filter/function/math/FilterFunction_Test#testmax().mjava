    public void testmax() {
        try {
            FilterFunction_max max =
                    (FilterFunction_max)
                            ff.function("max", new org.opengis.filter.expression.Expression[2]);
            assertEquals("Name is, ", "max", max.getName());
            assertEquals("Number of arguments, ", 2, max.getFunctionName().getArgumentCount());

            Function maxFunction = ff.function("max", literal_1, literal_m1);
            assertEquals(
                    "max of (1.0,-1.0):",
                    Math.max(1.0, -1.0),
                    ((Double) maxFunction.evaluate(null)).doubleValue(),
                    0.00001);

            maxFunction = ff.function("max", literal_m1, literal_2);
            assertEquals(
                    "max of (-1.0,2.0):",
                    Math.max(-1.0, 2.0),
                    ((Double) maxFunction.evaluate(null)).doubleValue(),
                    0.00001);

            maxFunction = ff.function("max", literal_2, literal_m2);
            assertEquals(
                    "max of (2.0,-2.0):",
                    Math.max(2.0, -2.0),
                    ((Double) maxFunction.evaluate(null)).doubleValue(),
                    0.00001);

            maxFunction = ff.function("max", literal_m2, literal_pi);
            assertEquals(
                    "max of (-2.0,3.141592653589793):",
                    Math.max(-2.0, 3.141592653589793),
                    ((Double) maxFunction.evaluate(null)).doubleValue(),
                    0.00001);

            maxFunction = ff.function("max", literal_pi, literal_05pi);
            assertEquals(
                    "max of (3.141592653589793,1.5707963267948966):",
                    Math.max(3.141592653589793, 1.5707963267948966),
                    ((Double) maxFunction.evaluate(null)).doubleValue(),
                    0.00001);

            maxFunction = ff.function("max", literal_05pi, literal_1);
            assertEquals(
                    "max of (1.5707963267948966,1.0):",
                    Math.max(1.5707963267948966, 1.0),
                    ((Double) maxFunction.evaluate(null)).doubleValue(),
                    0.00001);

            maxFunction = ff.function("max", literal_null, literal_1);
            assertNull(maxFunction.evaluate(null));

            maxFunction = ff.function("max", literal_1, literal_null);
            assertNull(maxFunction.evaluate(null));

            maxFunction = ff.function("max", literal_null, literal_null);
            assertNull(maxFunction.evaluate(null));
        } catch (FactoryRegistryException e) {
            java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e);
            fail("Unexpected exception: " + e.getMessage());
        }
    }

