    protected void visitLineSymbolizerTestDynamicDashArray(
            double scaleMetersToPixel, Unit<Length> uom) {
        try {
            UomRescaleStyleVisitor visitor = null;
            double size = 1;
            double expectedRescaledSize =
                    Math.floor(computeExpectedRescaleSize(size, scaleMetersToPixel, uom) * 10000.0)
                            / 10000.0;
            FilterFactory2 filterFactory = new FilterFactoryImpl();
            Expression func =
                    filterFactory.function(
                            "listMultiply",
                            filterFactory.literal(expectedRescaledSize),
                            filterFactory.literal("5 10"));
            String expectedDashArray = (String) func.evaluate(null);

            StyleBuilder styleBuilder = new StyleBuilder();

            LineSymbolizerImpl lineSymb = (LineSymbolizerImpl) styleBuilder.createLineSymbolizer();
            lineSymb.setUnitOfMeasure(uom);
            lineSymb.getStroke().setDashArray(Arrays.asList(filterFactory.literal("5.0 10.0")));

            visitor = new UomRescaleStyleVisitor(scaleMetersToPixel);

            lineSymb.accept(visitor);
            LineSymbolizer rescaledLineSymb = (LineSymbolizer) visitor.getCopy();
            String rescaledDynamicDashArray =
                    (String)
                            ((Expression) rescaledLineSymb.getStroke().dashArray().get(0))
                                    .evaluate(null);

            assertEquals(expectedDashArray, rescaledDynamicDashArray);
            assertNotSame(rescaledLineSymb, lineSymb);
        } catch (Exception e2) {
            java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e2);
            fail(e2.getClass().getSimpleName() + " should not be thrown.");
        }
    }

