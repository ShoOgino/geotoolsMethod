    @Test
    public void testLogicFilter() throws IllegalFilterException {
        testExp1 = new LiteralExpressionImpl(Integer.valueOf(45));
        testExp2 = new LiteralExpressionImpl(Integer.valueOf(45));
        testExp3 = new AttributeExpressionImpl(testSchema, "testInteger");
        testExp4 = new AttributeExpressionImpl(testSchema, "testInteger");
        PropertyIsEqualTo cFilter1 = ff.equals(testExp1, testExp2);
        PropertyIsEqualTo cFilter2 = ff.equals(testExp2, testExp4);

        org.opengis.filter.Filter logFilter1 = ff.and(cFilter1, cFilter2);
        org.opengis.filter.Filter logFilter2 = ff.and(cFilter1, cFilter2);
        Assert.assertEquals(logFilter1, logFilter2);

        logFilter1 = ff.not(cFilter2);
        Assert.assertFalse(logFilter1.equals(logFilter2));
        cFilter1 = ff.equals(testExp1, testExp3);
        logFilter2 = ff.not(cFilter1);
        Assert.assertEquals(logFilter1, logFilter2);
        Assert.assertFalse(logFilter1.equals(ff.between(testExp1, testExp2, testExp3)));
        Or logFilter3 = ff.or(logFilter1, logFilter2);
        Or logFilter4 = ff.or(logFilter1, logFilter2);
        Assert.assertEquals(logFilter3, logFilter4);

        // Questionable behavior.  Is this what we want?
        Or logFilter5 = ff.or(cFilter1, logFilter3);
        // does not change structure of logFilter3
        Or logFilter6 = ff.or(logFilter4, cFilter1);
        // different structure, but same result
        Assert.assertEquals(logFilter5, logFilter6); // do we want these equal?
        Assert.assertEquals(logFilter4, logFilter3); // shouldn't they be equal?
    }

