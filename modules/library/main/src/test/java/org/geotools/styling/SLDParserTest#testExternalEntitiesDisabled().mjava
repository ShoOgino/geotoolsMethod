    @Test
    public void testExternalEntitiesDisabled() {
        // this SLD file references as external entity a file on the local filesystem
        SLDParser parser = new SLDParser(styleFactory, input(SLD_EXTERNALENTITY));
        
        // without a custom EntityResolver, the parser will try to read the entity file on the local file system
        try {
            parser.readXML();
            fail("parsing should thrown an error");
        } catch (RuntimeException e) {
            assertTrue(e.getCause() instanceof FileNotFoundException);
        }
        
        parser = new SLDParser(styleFactory, input(SLD_EXTERNALENTITY));
        // Set an EntityResolver implementation to prevent reading entities from the local file system.
        // When resolving an XML entity, the empty InputSource returned by this resolver provokes 
        // a MalformedURLException     
        parser.setEntityResolver(new EntityResolver() {
            @Override
            public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException {
                return new InputSource();
            }            
        });
        
        try {
            parser.readXML();
            fail("parsing should thrown an error");
        } catch (RuntimeException e) {
            assertTrue(e.getCause() instanceof MalformedURLException);
        }   
        
        parser = new SLDParser(styleFactory, input(SLD_EXTERNALENTITY));
        // Set another EntityResolver
        parser.setEntityResolver(new EntityResolver() {
            @Override
            public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException {
                if ("file:///this/file/is/top/secret".equals(systemId)) {
                    return new InputSource(new StringReader("hello"));
                } else {
                    return new InputSource();
                }
            }            
        });

        // now parsing shouldn't throw an exception
        parser.readXML();      
    }

