    // Feature Source Testing
    @Test
    public void testGetFeatureSourceRoad() throws IOException {
        SimpleFeatureSource road = data.getFeatureSource("road");

        assertSame(roadType, road.getSchema());
        assertSame(data, road.getDataStore());
        Assert.assertEquals(3, road.getCount(Query.ALL));
        Assert.assertEquals(new ReferencedEnvelope(1, 5, 0, 4, null), road.getBounds(Query.ALL));

        SimpleFeatureCollection all = road.getFeatures();
        Assert.assertEquals(3, all.size());
        Assert.assertEquals(roadBounds, all.getBounds());

        SimpleFeatureCollection expected = DataUtilities.collection(roadFeatures);

        assertCovers("all", expected, all);
        Assert.assertEquals(roadBounds, all.getBounds());

        SimpleFeatureCollection some = road.getFeatures(rd12Filter);
        Assert.assertEquals(2, some.size());
        Assert.assertEquals(rd12Bounds, some.getBounds());
        Assert.assertEquals(some.getSchema(), road.getSchema());

        Query query = new Query("road", rd12Filter, new String[] {"name", "geom"});

        SimpleFeatureCollection half = road.getFeatures(query);
        Assert.assertEquals(2, half.size());
        Assert.assertEquals(2, half.getSchema().getAttributeCount());
        SimpleFeatureIterator reader = half.features();
        SimpleFeatureType type = half.getSchema();
        reader.close();
        SimpleFeatureType actual = half.getSchema();

        Assert.assertEquals(type.getTypeName(), actual.getTypeName());
        Assert.assertEquals(type.getName(), actual.getName());
        Assert.assertEquals(type.getAttributeCount(), actual.getAttributeCount());
        for (int i = 0; i < type.getAttributeCount(); i++) {
            Assert.assertEquals(type.getDescriptor(i), actual.getDescriptor(i));
        }
        Assert.assertEquals(type.getGeometryDescriptor(), actual.getGeometryDescriptor());
        Assert.assertEquals(type, actual);
        Envelope b = half.getBounds();
        Assert.assertEquals(new Envelope(1, 5, 0, 4), b);
    }

