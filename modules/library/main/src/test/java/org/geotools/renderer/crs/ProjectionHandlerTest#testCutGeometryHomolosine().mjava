    @Test
    public void testCutGeometryHomolosine() throws Exception {
        String wkt =
                "PROJCS[\"Homolosine\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\","
                        + "6378137,298.257223563 ] ], PRIMEM[\"Greenwich\",0.0], UNIT[\"degree\","
                        + "0.01745329251994328 ]],PROJECTION[\"Goode_Homolosine\"],UNIT[\"m\",1.0] ]";
        CoordinateReferenceSystem homolosine = CRS.parseWKT(wkt);
        // get a lambert conformal conic with
        Envelope worldEnvelope = new Envelope(-180, 180, -90, 90);
        ReferencedEnvelope worldWGS84 = new ReferencedEnvelope(worldEnvelope, WGS84);
        ReferencedEnvelope worldHomolosine = worldWGS84.transform(homolosine, true);
        ProjectionHandler handler =
                ProjectionHandlerFinder.getHandler(worldHomolosine, WGS84, true);
        // a Geometry that spans the whole world
        Polygon geometry = JTS.toGeometry(worldEnvelope);
        // cut it
        Geometry preProcessed = handler.preProcess(geometry);
        assertEquals(worldEnvelope, preProcessed.getEnvelopeInternal());
        // ensure the breaklines are not part of the geometry
        GeometryFactory gf = geometry.getFactory();
        assertFalse(preProcessed.intersects(lineString(gf, new double[] {-40, 0.1, -40, 90})));
        assertFalse(preProcessed.intersects(lineString(gf, new double[] {-100, -0.1, -100, -90})));
        assertFalse(preProcessed.intersects(lineString(gf, new double[] {-20, -0.1, -20, -90})));
        assertFalse(preProcessed.intersects(lineString(gf, new double[] {80, -0.1, 80, -90})));
    }

