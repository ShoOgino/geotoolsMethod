    /**
     * Sets up a schema and a test feature.
     *
     * @throws IllegalFilterException If the constructed filter is not valid.
     */
    public void testCompare() throws IllegalFilterException {
        // Test all integer permutations
        PropertyName testAttribute = new AttributeExpressionImpl(testSchema, "testInteger");
        compareNumberRunner(testAttribute, PropertyIsEqualTo.class, false, true, false);
        compareNumberRunner(testAttribute, PropertyIsGreaterThan.class, true, false, false);
        compareNumberRunner(testAttribute, PropertyIsLessThan.class, false, false, true);
        compareNumberRunner(testAttribute, PropertyIsGreaterThanOrEqualTo.class, true, true, false);
        compareNumberRunner(testAttribute, PropertyIsLessThanOrEqualTo.class, false, true, true);

        // Test all permutations of integers as strings
        compareStringToIntegerRunner(testAttribute, PropertyIsEqualTo.class, false, true, false);
        compareStringToIntegerRunner(
                testAttribute, PropertyIsGreaterThan.class, true, false, false);
        compareStringToIntegerRunner(testAttribute, PropertyIsLessThan.class, false, false, true);
        compareStringToIntegerRunner(
                testAttribute, PropertyIsGreaterThanOrEqualTo.class, true, true, false);
        compareStringToIntegerRunner(
                testAttribute, PropertyIsLessThanOrEqualTo.class, false, true, true);

        // Test all permutations of integers as doubles
        compareIntegerToDoubleRunner(testAttribute, PropertyIsEqualTo.class, false, true, false);
        compareIntegerToDoubleRunner(
                testAttribute, PropertyIsGreaterThan.class, true, false, false);
        compareIntegerToDoubleRunner(testAttribute, PropertyIsLessThan.class, false, false, true);
        compareIntegerToDoubleRunner(
                testAttribute, PropertyIsGreaterThanOrEqualTo.class, true, true, false);
        compareIntegerToDoubleRunner(
                testAttribute, PropertyIsLessThanOrEqualTo.class, false, true, true);

        // test all date permutations, with string/date conversion included
        testAttribute = new AttributeExpressionImpl(testSchema, "date");
        compareSqlDateRunner(testAttribute, PropertyIsEqualTo.class, false, true, false);
        compareSqlDateRunner(testAttribute, PropertyIsGreaterThan.class, true, false, false);
        compareSqlDateRunner(testAttribute, PropertyIsLessThan.class, false, false, true);
        compareSqlDateRunner(
                testAttribute, PropertyIsGreaterThanOrEqualTo.class, true, true, false);
        compareSqlDateRunner(testAttribute, PropertyIsLessThanOrEqualTo.class, false, true, true);

        // test all date permutations, with string/date conversion included
        testAttribute = new AttributeExpressionImpl(testSchema, "time");
        compareSqlTimeRunner(testAttribute, PropertyIsEqualTo.class, false, true, false);
        compareSqlTimeRunner(testAttribute, PropertyIsGreaterThan.class, true, false, false);
        compareSqlTimeRunner(testAttribute, PropertyIsLessThan.class, false, false, true);
        compareSqlTimeRunner(
                testAttribute, PropertyIsGreaterThanOrEqualTo.class, true, true, false);
        compareSqlTimeRunner(testAttribute, PropertyIsLessThanOrEqualTo.class, false, true, true);

        // Set up the string test.
        testAttribute = new AttributeExpressionImpl(testSchema, "testString");

        // Test for false positive.
        Literal testLiteral = new LiteralExpressionImpl("test string data");
        org.opengis.filter.Filter filter =
                compare(PropertyIsEqualTo.class, testAttribute, testLiteral);

        // LOGGER.finer( filter.toString());
        // LOGGER.finer( "contains feature: " + filter.contains(testFeature));
        assertTrue(filter.evaluate(testFeature));

        // Test for false negative.
        testLiteral = new LiteralExpressionImpl("incorrect test string data");
        filter = compare(PropertyIsEqualTo.class, testAttribute, testLiteral);

        assertFalse(filter.evaluate(testFeature));

        // Test for false positive.
        testLiteral = new LiteralExpressionImpl("zebra");
        filter = compare(PropertyIsLessThan.class, testAttribute, testLiteral);
        assertTrue(filter.evaluate(testFeature));

        testLiteral = new LiteralExpressionImpl("blorg");
        filter = compare(PropertyIsLessThan.class, testAttribute, testLiteral);
        assertFalse(filter.evaluate(testFeature));
    }

