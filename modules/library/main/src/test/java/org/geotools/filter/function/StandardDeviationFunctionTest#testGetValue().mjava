    @Test
    public void testGetValue() throws Exception {
        // doesn't work yet?
        Literal classes = ff.literal(5);
        PropertyName exp = ff.property("foo");
        Function standardDeviation = ff.function("StandardDeviation", exp, classes);
        assertNotNull("step 1 - standard deviation function", standardDeviation);

        final Classifier classifer =
                standardDeviation.evaluate(featureCollection, Classifier.class);
        featureCollection.accepts(
                new FeatureVisitor() {
                    @Override
                    public void visit(Feature f) {
                        SimpleFeature feature = (SimpleFeature) f;
                        Object value = feature.getAttribute("foo");
                        assertNotNull(feature.getID() + " foo", value);

                        int slot = classifer.classify(value);
                        assertNotNull("Slot " + slot, classifer.getTitle(slot));
                    }
                },
                null);

        Function classify = ff.function("classify", exp, ff.literal(classifer));
        assertNotNull("step 2 - classify function", classify);

        try (SimpleFeatureIterator it = featureCollection.features()) {

            // feature 1
            SimpleFeature f = it.next();
            Integer slot = classify.evaluate(f, Integer.class);
            assertEquals("value " + f.getAttribute("foo"), 1, slot.intValue());

            // feature 2
            f = it.next();
            slot = classify.evaluate(f, Integer.class);
            assertEquals("value " + f.getAttribute("foo"), 4, slot.intValue());

            // feature 3
            f = it.next();
            slot = classify.evaluate(f, Integer.class);
            assertEquals("value " + f.getAttribute("foo"), 2, slot.intValue());

            // feature 4
            f = it.next();
            slot = classify.evaluate(f, Integer.class);
            assertEquals("value " + f.getAttribute("foo"), 2, slot.intValue());

            // feature 5
            f = it.next();
            slot = classify.evaluate(f, Integer.class);
            assertEquals("value " + f.getAttribute("foo"), 2, slot.intValue());

            // feature 6
            f = it.next();
            slot = classify.evaluate(f, Integer.class);
            assertEquals("value " + f.getAttribute("foo"), 3, slot.intValue());

            // feature 7
            f = it.next();
            slot = classify.evaluate(f, Integer.class);
            assertEquals("value " + f.getAttribute("foo"), 1, slot.intValue());

            // feature 8
            f = it.next();
            slot = classify.evaluate(f, Integer.class);
            assertEquals("value " + f.getAttribute("foo"), 1, slot.intValue());
        }
    }

