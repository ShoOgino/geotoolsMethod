    /**
     * A filter is composed of a logic AND bettween a non null check and a comparison filter, for an
     * AttributeExpression. If the AttributeExpression evaluates to null, the short-circuit
     * comparison in the LogicFilter should return without throwing a NullPointerException. If
     * short-circuit evaluation would not be done in LogicFilter, then a NullPointerException would
     * be thrown.
     *
     * @throws IllegalFilterException If the constructed filter is not valid.
     */
    @Test
    public void testCompareShortCircuit() throws IllegalFilterException {
        // Test all integer permutations
        PropertyName testAttribute = new AttributeExpressionImpl(testSchema, "testInteger");

        PropertyIsNull nullFilter = fac.isNull(testAttribute);

        org.opengis.filter.Filter notNullFilter = fac.not(nullFilter);

        PropertyIsEqualTo compareFilter = fac.equals(testAttribute, fac.literal(10));

        testFeature.setAttribute("testInteger", null);
        Assert.assertFalse(compareFilter.evaluate(testFeature));

        Assert.assertTrue(nullFilter.evaluate(testFeature));
        Assert.assertFalse(notNullFilter.evaluate(testFeature));

        // test AND
        org.opengis.filter.Filter finalFilter = fac.and(notNullFilter, compareFilter);
        try {
            Assert.assertFalse(finalFilter.evaluate(testFeature));
        } catch (NullPointerException e) {
            Assert.fail(
                    "Short-circuit evaluation was not performed by LogicFilter: " + e.getMessage());
        }

        // test OR
        finalFilter = fac.or(nullFilter, compareFilter);
        try {
            Assert.assertTrue(finalFilter.evaluate(testFeature));
        } catch (NullPointerException e) {
            Assert.fail(
                    "Short-circuit evaluation was not performed by LogicFilter: " + e.getMessage());
        }
    }

