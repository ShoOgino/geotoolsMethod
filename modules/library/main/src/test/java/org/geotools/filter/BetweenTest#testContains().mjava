    public void testContains() throws Exception {
        // this should move out to a more configurable system run from scripts
        // but we can start with a set of hard coded tests
        BetweenFilterImpl a = new BetweenFilterImpl();

        SimpleFeatureTypeBuilder ftb = new SimpleFeatureTypeBuilder();
        ftb.setCRS(null);
        ftb.add("value", Integer.class);
        ftb.add("geometry", Geometry.class);
        ftb.setName("testSchema");
        SimpleFeatureType schema = ftb.buildFeatureType();

        a.setExpression1(new LiteralExpressionImpl(new Double(5)));
        a.setExpression2(new LiteralExpressionImpl(new Double(15)));
        a.setExpression(new AttributeExpressionImpl(schema, "value"));

        // FlatFeatureFactory fFac = new FlatFeatureFactory(schema);
        LOGGER.fine("geometry is " + schema.getDescriptor("geometry"));
        LOGGER.fine("value is " + schema.getDescriptor("value"));
        LOGGER.fine("schema has value in it ? " + (schema.getDescriptor("value") != null));

        GeometryFactory gf = new GeometryFactory(new PrecisionModel());
        SimpleFeature f1 =
                SimpleFeatureBuilder.build(
                        schema,
                        new Object[] {Integer.valueOf(12), gf.createPoint(new Coordinate(12, 12))},
                        null);
        SimpleFeature f2 =
                SimpleFeatureBuilder.build(
                        schema,
                        new Object[] {Integer.valueOf(3), gf.createPoint(new Coordinate(3, 3))},
                        null);
        SimpleFeature f3 =
                SimpleFeatureBuilder.build(
                        schema,
                        new Object[] {Integer.valueOf(15), gf.createPoint(new Coordinate(15, 15))},
                        null);
        SimpleFeature f4 =
                SimpleFeatureBuilder.build(
                        schema,
                        new Object[] {Integer.valueOf(5), gf.createPoint(new Coordinate(5, 5))},
                        null);
        SimpleFeature f5 =
                SimpleFeatureBuilder.build(
                        schema,
                        new Object[] {Integer.valueOf(30), gf.createPoint(new Coordinate(30, 30))},
                        null);

        assertEquals(true, a.evaluate(f1)); // in between
        assertEquals(false, a.evaluate(f2)); // too small
        assertEquals(true, a.evaluate(f3)); // max value
        assertEquals(true, a.evaluate(f4)); // min value
        assertEquals(false, a.evaluate(f5)); // too large
    }

