        @Test
        public void testEvaluateWithPercentages() throws Exception {
            // create a feature collection with five features values 1-5
            SimpleFeatureType dataType =
                    DataUtilities.createType("singleBin", "id:0,value:int,geom:Polygon");
            SimpleFeature[] myfeatures = new SimpleFeature[3];
            Polygon polygon =
                    (Polygon)
                            new WKTReader()
                                    .read(
                                            "POLYGON ((22.52313252202016 20, 22.47465123810405 19.50776126378972, 22.33107049490801 19.03443898616134, 22.097908019872047 18.598222676801925, 21.78412411615277 18.21587588384723, 21.401777323198075 17.902091980127953, 20.96556101383866 17.66892950509199, 20.49223873621028 17.52534876189595, 20 17.47686747797984, 19.50776126378972 17.52534876189595, 19.03443898616134 17.66892950509199, 18.598222676801925 17.902091980127953, 18.21587588384723 18.21587588384723, 17.902091980127953 18.598222676801925, 17.668929505091988 19.03443898616134, 17.52534876189595 19.50776126378972, 17.47686747797984 20.000000000000004, 17.52534876189595 20.492238736210282, 17.66892950509199 20.965561013838663, 17.902091980127956 21.40177732319808, 18.215875883847232 21.784124116152775, 18.598222676801928 22.097908019872047, 19.034438986161344 22.331070494908012, 19.507761263789728 22.474651238104055, 20.000000000000007 22.52313252202016, 20.492238736210286 22.47465123810405, 20.965561013838666 22.33107049490801, 21.401777323198083 22.09790801987204, 21.78412411615278 21.784124116152764, 22.09790801987205 21.40177732319807, 22.331070494908012 20.965561013838652, 22.474651238104055 20.49223873621027, 22.52313252202016 20))");
            Polygon polygon2 =
                    (Polygon)
                            new WKTReader()
                                    .read(
                                            "POLYGON ((95.35237234845832 90, 95.24952801460519 88.95580395498905, 94.94494726312 87.95173577839597, 94.4503349614715 87.02638124715934, 93.78469878303024 86.21530121696976, 92.97361875284066 85.5496650385285, 92.04826422160403 85.05505273688, 91.04419604501095 84.75047198539481, 90 84.64762765154168, 88.95580395498905 84.75047198539481, 87.95173577839597 85.05505273688, 87.02638124715934 85.5496650385285, 86.21530121696976 86.21530121696976, 85.5496650385285 87.02638124715934, 85.05505273688 87.95173577839597, 84.75047198539481 88.95580395498905, 84.64762765154168 90, 84.75047198539482 91.04419604501096, 85.05505273688 92.04826422160403, 85.5496650385285 92.97361875284066, 86.21530121696976 93.78469878303025, 87.02638124715935 94.4503349614715, 87.95173577839599 94.94494726312001, 88.95580395498907 95.24952801460519, 90.00000000000001 95.35237234845832, 91.04419604501096 95.24952801460518, 92.04826422160404 94.94494726312, 92.97361875284068 94.45033496147148, 93.78469878303025 93.78469878303022, 94.45033496147151 92.97361875284065, 94.94494726312001 92.048264221604, 95.24952801460519 91.04419604501093, 95.35237234845832 90))");
            Polygon polygon3 =
                    (Polygon)
                            new WKTReader()
                                    .read(
                                            "POLYGON ((95.35237234845832 90, 95.24952801460519 88.95580395498905, 94.94494726312 87.95173577839597, 94.4503349614715 87.02638124715934, 93.78469878303024 86.21530121696976, 92.97361875284066 85.5496650385285, 92.04826422160403 85.05505273688, 91.04419604501095 84.75047198539481, 90 84.64762765154168, 88.95580395498905 84.75047198539481, 87.95173577839597 85.05505273688, 87.02638124715934 85.5496650385285, 86.21530121696976 86.21530121696976, 85.5496650385285 87.02638124715934, 85.05505273688 87.95173577839597, 84.75047198539481 88.95580395498905, 84.64762765154168 90, 84.75047198539482 91.04419604501096, 85.05505273688 92.04826422160403, 85.5496650385285 92.97361875284066, 86.21530121696976 93.78469878303025, 87.02638124715935 94.4503349614715, 87.95173577839599 94.94494726312001, 88.95580395498907 95.24952801460519, 90.00000000000001 95.35237234845832, 91.04419604501096 95.24952801460518, 92.04826422160404 94.94494726312, 92.97361875284068 94.45033496147148, 93.78469878303025 93.78469878303022, 94.45033496147151 92.97361875284065, 94.94494726312001 92.048264221604, 95.24952801460519 91.04419604501093, 95.35237234845832 90))");
            myfeatures[0] =
                    SimpleFeatureBuilder.build(
                            dataType,
                            new Object[] {Integer.valueOf(1), Integer.valueOf(0), polygon},
                            "classification.test1" + 1);
            myfeatures[1] =
                    SimpleFeatureBuilder.build(
                            dataType,
                            new Object[] {Integer.valueOf(2), Integer.valueOf(1), polygon2},
                            "classification.test1" + 2);
            myfeatures[2] =
                    SimpleFeatureBuilder.build(
                            dataType,
                            new Object[] {Integer.valueOf(3), Integer.valueOf(2), polygon3},
                            "classification.test1" + 3);
            SimpleFeatureCollection myFeatureCollection = DataUtilities.collection(myfeatures);
            // run the equal area function
            org.opengis.filter.expression.Expression function =
                    FF.function(
                            "EqualArea",
                            FF.property("value"),
                            FF.literal(2),
                            FF.literal(1.0),
                            FF.literal(true));
            RangedClassifier ranged =
                    assertRangedClassifier(function.evaluate(myFeatureCollection));
            double[] percentages = ranged.getPercentages();
            assertEquals(2, ranged.getSize());
            assertEquals(2, percentages.length);
            assertEquals(Math.ceil(percentages[0]), 67.0, 0d);
            assertEquals(Math.floor(percentages[1]), 33.0, 0d);
        }

