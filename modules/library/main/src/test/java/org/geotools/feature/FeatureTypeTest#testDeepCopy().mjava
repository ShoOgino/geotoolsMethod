    @Test
    public void testDeepCopy() throws Exception {
        // primative
        String str = "FooBar";
        Integer i = Integer.valueOf(3);
        Float f = Float.valueOf(3.14f);
        Double d = Double.valueOf(3.14159);

        assertSame("String", str, DataUtilities.duplicate(str));
        assertSame("Integer", i, DataUtilities.duplicate(i));
        assertSame("Float", f, DataUtilities.duplicate(f));
        assertSame("Double", d, DataUtilities.duplicate(d));

        // collections
        Object objs[] = {
            str, i, f, d,
        };
        int ints[] = {
            1, 2, 3, 4,
        };
        List<Object> list = new ArrayList<>();
        list.add(str);
        list.add(i);
        list.add(f);
        list.add(d);
        Map<String, Object> map = new HashMap<>();
        map.put("a", str);
        map.put("b", i);
        map.put("c", f);
        map.put("d", d);
        assertDuplicate("objs", objs, DataUtilities.duplicate(objs));
        assertDuplicate("ints", ints, DataUtilities.duplicate(ints));
        assertDuplicate("list", list, DataUtilities.duplicate(list));
        assertDuplicate("map", map, DataUtilities.duplicate(map));

        // complex type
        SimpleFeature feature = lakeFeatures[0];

        Coordinate coords = new Coordinate(1, 3);
        Coordinate coords2 = new Coordinate(1, 3);
        GeometryFactory gf = new GeometryFactory();
        Geometry point = gf.createPoint(coords);
        Geometry point2 = gf.createPoint(coords2);

        assertDuplicate("jts duplicate", point, point2);
        assertDuplicate("feature", feature, DataUtilities.duplicate(feature));
        assertDuplicate("point", point, DataUtilities.duplicate(point));
    }

