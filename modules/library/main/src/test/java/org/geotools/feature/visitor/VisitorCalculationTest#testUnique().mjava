    public void testUnique() throws IllegalFilterException, IOException {
        UniqueVisitor uniqueVisitor = new UniqueVisitor(0, ft);
        fc.accepts(uniqueVisitor, null);
        UniqueVisitor uniqueVisitor2 = new UniqueVisitor(3, ft2);
        fc2.accepts(uniqueVisitor2, null);
        // 1, 2, 3
        Set value1 = uniqueVisitor.getResult().toSet();
        assertEquals(3, value1.size()); // 3 items in the set
        // 3.0, 4.5
        Object[] value2 = uniqueVisitor2.getResult().toArray();
        assertEquals(2, value2.length); // 2 items in the set
        // test a merge
        CalcResult uniqueResult1 = uniqueVisitor.getResult();
        CalcResult uniqueResult2 = uniqueVisitor2.getResult();
        CalcResult uniqueResult3 = uniqueResult1.merge(uniqueResult2);
        assertEquals(
                5,
                uniqueResult3.toSet().size()); // 3 and 3.0 are different, so there are actually 5
        // ensure merge was not destructive
        assertEquals(3, uniqueResult1.toSet().size());
        // test a merge with duplicate elements
        Set<Object> anotherSet = new HashSet<>();
        anotherSet.add(Integer.valueOf(2));
        anotherSet.add(Integer.valueOf(4));
        CalcResult uniqueResult4 = new UniqueResult(anotherSet);
        CalcResult uniqueResult5 = uniqueResult1.merge(uniqueResult4); // 1,2,3 + 2,4
        assertEquals(4, uniqueResult5.toSet().size());
        // mock optimization
        uniqueVisitor.setValue(anotherSet);
        uniqueResult1 = uniqueVisitor.getResult();
        assertEquals(anotherSet, uniqueResult1.toSet());
        // int + double --> ?
        uniqueResult3 = uniqueResult2.merge(uniqueResult1);
        @SuppressWarnings("unchecked")
        Set<Object> set = uniqueResult3.toSet();
        assertEquals(4, set.size());
        assertTrue(set.contains(3.0));
        assertTrue(set.contains(4.5));
        assertTrue(set.contains(2));
        assertTrue(set.contains(4));
        assertFalse(set.contains(6));
        // test empty collection
        uniqueVisitor.reset();
        empty.accepts(uniqueVisitor, null);
        assertEquals(CalcResult.NULL_RESULT, uniqueVisitor.getResult());
        // test merge
        assertSame(uniqueResult2, uniqueVisitor.getResult().merge(uniqueResult2));
        assertSame(uniqueResult2, uniqueResult2.merge(uniqueVisitor.getResult()));
    }

