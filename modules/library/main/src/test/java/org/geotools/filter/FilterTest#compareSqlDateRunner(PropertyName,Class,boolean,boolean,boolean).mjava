    /**
     * Helper class for the integer compare operators.
     *
     * @throws IllegalFilterException If the constructed filter is not valid.
     */
    public void compareSqlDateRunner(
            PropertyName testAttribute,
            Class filterType,
            boolean test1,
            boolean test2,
            boolean test3)
            throws IllegalFilterException {
        Calendar calLocal = Calendar.getInstance();
        calLocal.setTime(calDate.getTime());
        calLocal.set(Calendar.DAY_OF_MONTH, calDateTime.get(Calendar.DAY_OF_MONTH) - 1);
        Literal testLiteral =
                new LiteralExpressionImpl(new java.sql.Date(calLocal.getTimeInMillis()).toString());
        org.opengis.filter.Filter filter = compare(filterType, testAttribute, testLiteral);

        // LOGGER.finer( filter.toString());
        // LOGGER.finer( "contains feature: " + filter.contains(testFeature));
        Assert.assertEquals(test1, filter.evaluate(testFeature));

        testLiteral =
                new LiteralExpressionImpl(new java.sql.Date(calDate.getTimeInMillis()).toString());
        filter = compare(filterType, testAttribute, testLiteral);

        // LOGGER.finer( filter.toString());
        // LOGGER.finer( "contains feature: " + filter.contains(testFeature));
        Assert.assertEquals(test2, filter.evaluate(testFeature));

        calLocal.set(Calendar.DAY_OF_MONTH, calDateTime.get(Calendar.DAY_OF_MONTH) + 1);
        testLiteral =
                new LiteralExpressionImpl(new java.sql.Date(calLocal.getTimeInMillis()).toString());
        filter = compare(filterType, testAttribute, testLiteral);

        // LOGGER.finer( filter.toString());
        // LOGGER.finer( "contains feature: " + filter.contains(testFeature));
        Assert.assertEquals(filter.evaluate(testFeature), test3);
    }

