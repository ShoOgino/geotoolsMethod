        @Test
        public void testEqualAreaClassification() throws IOException, SchemaException {
            ListFeatureCollection fc = getSimplifiedStatesCollection();
            Function areaFunction = EqualAreaFunction.getCartesianAreaFunction();
            double totalArea = getTotalArea(fc, areaFunction);
            NumberRange<Double> minMax = getMinMax(fc, PERSONS);

            org.opengis.filter.expression.Expression function =
                    FF.function("EqualArea", PERSONS, FF.literal(numClasses));
            RangedClassifier rangedClassifier = assertRangedClassifier(function.evaluate(fc));

            assertEquals(numClasses, rangedClassifier.getSize());
            assertThat(minMax.getMinimum(), Matchers.equalTo(rangedClassifier.getMin(0)));
            assertThat(
                    minMax.getMaximum(), Matchers.equalTo(rangedClassifier.getMax(numClasses - 1)));

            // build the total area for each range
            Map<Filter, Double> filterMap = new LinkedHashMap<>();
            for (int i = 0; i < rangedClassifier.getSize(); i++) {
                // the classifier uses the first element of the next bin as the break point,
                // and property is between is implemented to catch both ends, so we need to
                // use an explict filter instead
                PropertyIsGreaterThanOrEqualTo greater =
                        FF.greaterOrEqual(PERSONS, FF.literal(rangedClassifier.getMin(i)));
                Filter less;
                if (i < rangedClassifier.getSize() - 1) {
                    less = FF.less(PERSONS, FF.literal(rangedClassifier.getMax(i)));
                } else {
                    less = FF.lessOrEqual(PERSONS, FF.literal(rangedClassifier.getMax(i)));
                }
                Filter filter = FF.and(greater, less);
                filterMap.put(filter, Double.valueOf(0));
            }
            for (SimpleFeature feature : fc) {
                boolean found = false;
                for (Map.Entry<Filter, Double> entry : filterMap.entrySet()) {
                    if (entry.getKey().evaluate(feature)) {
                        entry.setValue(
                                entry.getValue() + areaFunction.evaluate(feature, Double.class));
                        found = true;
                        break;
                    }
                }
                assertTrue("Feature " + feature + " not matched by " + filterMap.keySet(), found);
            }

            // test deviation from ideal average area
            double averageArea = totalArea / filterMap.size();
            for (Map.Entry<Filter, Double> entry : filterMap.entrySet()) {
                double area = entry.getValue();
                double deviation = Math.abs(area - averageArea) / averageArea;
                assertThat(deviation, Matchers.lessThanOrEqualTo(tolerance));
            }
        }

