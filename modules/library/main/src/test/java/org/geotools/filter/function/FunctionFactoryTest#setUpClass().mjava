    @BeforeClass
    public static void setUpClass() {
        ffIteratorProvider =
                new FactoryIteratorProvider() {

                    public <T> Iterator<T> iterator(Class<T> category) {

                        if (FunctionFactory.class == category) {
                            List<FunctionFactory> l = new ArrayList<>();
                            l.add(
                                    new FunctionFactory() {

                                        @SuppressWarnings("unchecked")
                                        public List<FunctionName> getFunctionNames() {
                                            return Arrays.asList(
                                                    new FunctionNameImpl(
                                                            "foo", new String[] {"bar", "baz"}));
                                        }

                                        public Function function(
                                                String name,
                                                List<Expression> args,
                                                Literal fallback) {
                                            return function(new NameImpl(name), args, fallback);
                                        }

                                        public Function function(
                                                Name name,
                                                List<Expression> args,
                                                Literal fallback) {
                                            if ("foo".equals(name.getLocalPart())) {
                                                return new FunctionImpl() {
                                                    @Override
                                                    public <T> T evaluate(
                                                            Object object, Class<T> context) {
                                                        return context.cast("theResult");
                                                    }
                                                };
                                            }
                                            return null;
                                        }
                                    });
                            @SuppressWarnings("unchecked")
                            Iterator<T> cast = (Iterator<T>) (l.iterator());
                            return cast;
                        }
                        return null;
                    }
                };
        GeoTools.addFactoryIteratorProvider(ffIteratorProvider);
        CommonFactoryFinder.reset();
    }

