    @Test
    public void testabs_4() {
        try {
            FilterFunction_abs_4 abs_4 =
                    (FilterFunction_abs_4)
                            ff.function("abs_4", org.opengis.filter.expression.Expression.NIL);
            Assert.assertEquals("Name is, ", "abs_4", abs_4.getName());
            Assert.assertEquals(
                    "Number of arguments, ", 1, abs_4.getFunctionName().getArgumentCount());

            Function abs_4Function = ff.function("abs_4", literal_1);
            Assert.assertEquals(
                    "abs_4 of (1.0):",
                    Math.abs(1.0),
                    ((Double) abs_4Function.evaluate(null)).doubleValue(),
                    0.00001);

            abs_4Function = ff.function("abs_4", literal_m1);
            Assert.assertEquals(
                    "abs_4 of (-1.0):",
                    Math.abs(-1.0),
                    ((Double) abs_4Function.evaluate(null)).doubleValue(),
                    0.00001);

            abs_4Function = ff.function("abs_4", literal_2);
            Assert.assertEquals(
                    "abs_4 of (2.0):",
                    Math.abs(2.0),
                    ((Double) abs_4Function.evaluate(null)).doubleValue(),
                    0.00001);

            abs_4Function = ff.function("abs_4", literal_m2);
            Assert.assertEquals(
                    "abs_4 of (-2.0):",
                    Math.abs(-2.0),
                    ((Double) abs_4Function.evaluate(null)).doubleValue(),
                    0.00001);

            abs_4Function = ff.function("abs_4", literal_pi);
            Assert.assertEquals(
                    "abs_4 of (3.141592653589793):",
                    Math.abs(3.141592653589793),
                    ((Double) abs_4Function.evaluate(null)).doubleValue(),
                    0.00001);

            abs_4Function = ff.function("abs_4", literal_05pi);
            Assert.assertEquals(
                    "abs_4 of (1.5707963267948966):",
                    Math.abs(1.5707963267948966),
                    ((Double) abs_4Function.evaluate(null)).doubleValue(),
                    0.00001);

            abs_4Function = ff.function("abs_4", literal_null);
            Assert.assertNull(abs_4Function.evaluate(null));

        } catch (FactoryRegistryException e) {
            java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e);
            Assert.fail("Unexpected exception: " + e.getMessage());
        }
    }

