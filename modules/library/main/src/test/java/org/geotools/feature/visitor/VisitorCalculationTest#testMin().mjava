    // test only the visitor functions themselves, and try the merge operation
    public void testMin() throws IllegalFilterException, IOException {
        // index 0 is the id field, so the data isn't terribly exciting (1,2,3).
        MinVisitor minVisitor = new MinVisitor(0, ft);
        fc.accepts(minVisitor, null);
        MinVisitor minVisitor2 = new MinVisitor(0, ft2);
        fc2.accepts(minVisitor2, null);
        // 1 is min
        Object result = minVisitor.getResult().getValue();
        int value = ((Integer) result).intValue();
        assertEquals(1, value);
        int value2 = minVisitor.getResult().toInt();
        assertEquals(1, value2);
        // min of 1 and 1 is 1
        CalcResult minResult1 = minVisitor.getResult();
        CalcResult minResult2 = minVisitor2.getResult();
        CalcResult minResult3 = minResult1.merge(minResult2);
        assertEquals(1, minResult3.toInt());
        // test for destruction during merge
        CalcResult minResult4 = new MinResult((Comparable) Integer.valueOf(10));
        CalcResult minResult5 = minResult4.merge(minResult1);
        assertEquals(1, minResult5.toInt());
        assertEquals(10, minResult4.toInt());
        // test negative result
        CalcResult minResult6 = new MinResult((Comparable) Integer.valueOf(-5));
        CalcResult minResult7 = (MinResult) minResult1.merge(minResult6);
        assertEquals(-5, minResult7.toInt());
        assertEquals(-5, minResult6.toInt());
        // test a mock optimization
        minVisitor.setValue(Integer.valueOf(-50));
        minResult1 = minVisitor.getResult();
        minResult7 = minResult7.merge(minResult1);
        assertEquals(-50, minResult7.toInt());
        // test varying data types
        minVisitor.setValue(Double.valueOf(-100.0));
        minResult1 = minVisitor.getResult();
        minResult7 = minResult7.merge(minResult1);
        assertEquals(-100.0, minResult7.toDouble(), 0);
        assertEquals(-100, minResult7.toInt());
        // test empty collection
        minVisitor.reset();
        empty.accepts(minVisitor, null);
        assertEquals(CalcResult.NULL_RESULT, minVisitor.getResult());
        // test merge
        assertSame(minResult2, minVisitor.getResult().merge(minResult2));
        assertSame(minResult2, minResult2.merge(minVisitor.getResult()));
    }

