    @Test
    public void testfloor() {
        try {
            FilterFunction_floor floor =
                    (FilterFunction_floor)
                            ff.function("floor", org.opengis.filter.expression.Expression.NIL);
            Assert.assertEquals("Name is, ", "floor", floor.getName());
            Assert.assertEquals(
                    "Number of arguments, ", 1, floor.getFunctionName().getArgumentCount());

            Function floorFunction = ff.function("floor", literal_1);
            double good0 = Math.floor(1.0);
            if (Double.isNaN(good0)) {
                Assert.assertTrue(
                        "floor of (1.0):",
                        Double.isNaN(((Double) floorFunction.evaluate(null)).doubleValue()));
            } else {
                Assert.assertEquals(
                        "floor of (1.0):",
                        Math.floor(1.0),
                        ((Double) floorFunction.evaluate(null)).doubleValue(),
                        0.00001);
            }

            floorFunction = ff.function("floor", literal_m1);
            double good1 = Math.floor(-1.0);
            if (Double.isNaN(good1)) {
                Assert.assertTrue(
                        "floor of (-1.0):",
                        Double.isNaN(((Double) floorFunction.evaluate(null)).doubleValue()));
            } else {
                Assert.assertEquals(
                        "floor of (-1.0):",
                        Math.floor(-1.0),
                        ((Double) floorFunction.evaluate(null)).doubleValue(),
                        0.00001);
            }

            floorFunction = ff.function("floor", literal_2);
            double good2 = Math.floor(2.0);
            if (Double.isNaN(good2)) {
                Assert.assertTrue(
                        "floor of (2.0):",
                        Double.isNaN(((Double) floorFunction.evaluate(null)).doubleValue()));
            } else {
                Assert.assertEquals(
                        "floor of (2.0):",
                        Math.floor(2.0),
                        ((Double) floorFunction.evaluate(null)).doubleValue(),
                        0.00001);
            }

            floorFunction = ff.function("floor", literal_m2);
            double good3 = Math.floor(-2.0);
            if (Double.isNaN(good3)) {
                Assert.assertTrue(
                        "floor of (-2.0):",
                        Double.isNaN(((Double) floorFunction.evaluate(null)).doubleValue()));
            } else {
                Assert.assertEquals(
                        "floor of (-2.0):",
                        Math.floor(-2.0),
                        ((Double) floorFunction.evaluate(null)).doubleValue(),
                        0.00001);
            }

            floorFunction = ff.function("floor", literal_pi);
            double good4 = Math.floor(Math.PI);
            if (Double.isNaN(good4)) {
                Assert.assertTrue(
                        "floor of (3.141592653589793):",
                        Double.isNaN(((Double) floorFunction.evaluate(null)).doubleValue()));
            } else {
                Assert.assertEquals(
                        "floor of (3.141592653589793):",
                        Math.floor(3.141592653589793),
                        ((Double) floorFunction.evaluate(null)).doubleValue(),
                        0.00001);
            }

            floorFunction = ff.function("floor", literal_05pi);
            double good5 = Math.floor(1.5707963267948966);
            if (Double.isNaN(good5)) {
                Assert.assertTrue(
                        "floor of (1.5707963267948966):",
                        Double.isNaN(((Double) floorFunction.evaluate(null)).doubleValue()));
            } else {
                Assert.assertEquals(
                        "floor of (1.5707963267948966):",
                        Math.floor(1.5707963267948966),
                        ((Double) floorFunction.evaluate(null)).doubleValue(),
                        0.00001);
            }

            floorFunction = ff.function("floor", literal_null);
            Assert.assertNull(floorFunction.evaluate(null));

        } catch (FactoryRegistryException e) {
            java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e);
            Assert.fail("Unexpected exception: " + e.getMessage());
        }
    }

