    @Test
    public void testround_2() {
        try {
            FilterFunction_round_2 round_2 =
                    (FilterFunction_round_2)
                            ff.function("round_2", org.opengis.filter.expression.Expression.NIL);
            Assert.assertEquals("Name is, ", "round_2", round_2.getName());
            Assert.assertEquals(
                    "Number of arguments, ", 1, round_2.getFunctionName().getArgumentCount());

            Function round_2Function = ff.function("round_2", literal_1);
            Assert.assertEquals(
                    "round_2 of (1.0):",
                    Math.round(1.0),
                    ((Long) round_2Function.evaluate(null)).longValue(),
                    0.00001);

            round_2Function = ff.function("round_2", literal_m1);
            Assert.assertEquals(
                    "round_2 of (-1.0):",
                    Math.round(-1.0),
                    ((Long) round_2Function.evaluate(null)).longValue(),
                    0.00001);

            round_2Function = ff.function("round_2", literal_2);
            Assert.assertEquals(
                    "round_2 of (2.0):",
                    Math.round(2.0),
                    ((Long) round_2Function.evaluate(null)).longValue(),
                    0.00001);

            round_2Function = ff.function("round_2", literal_m2);
            Assert.assertEquals(
                    "round_2 of (-2.0):",
                    Math.round(-2.0),
                    ((Long) round_2Function.evaluate(null)).longValue(),
                    0.00001);

            round_2Function = ff.function("round_2", literal_pi);
            Assert.assertEquals(
                    "round_2 of (3.141592653589793):",
                    Math.round(3.141592653589793),
                    ((Long) round_2Function.evaluate(null)).longValue(),
                    0.00001);

            round_2Function = ff.function("round_2", literal_05pi);
            Assert.assertEquals(
                    "round_2 of (1.5707963267948966):",
                    Math.round(1.5707963267948966),
                    ((Long) round_2Function.evaluate(null)).longValue(),
                    0.00001);

            round_2Function = ff.function("round_2", literal_null);
            Assert.assertNull(round_2Function.evaluate(null));

        } catch (FactoryRegistryException e) {
            java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e);
            Assert.fail("Unexpected exception: " + e.getMessage());
        }
    }

