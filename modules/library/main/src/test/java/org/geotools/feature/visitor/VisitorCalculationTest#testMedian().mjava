    public void testMedian() throws IllegalFilterException, IOException {
        MedianVisitor medianVisitor1 = new MedianVisitor(0, ft);
        fc.accepts(medianVisitor1, null); // 1,2,3
        MedianVisitor medianVisitor2 = new MedianVisitor(0, ft2);
        fc2.accepts(medianVisitor2, null); // 3,4.5
        // 1,2,3 --> 2, 1,2 --> 1.5
        CalcResult medianResult1 = medianVisitor1.getResult();
        CalcResult medianResult2 = medianVisitor2.getResult();
        assertEquals(2, medianResult1.toInt());
        assertEquals(1.5, medianResult2.toDouble(), 0);
        // 1,1,2,2,3 --> 2
        CalcResult medianResult3 = medianResult1.merge(medianResult2);
        assertEquals(2, medianResult3.toDouble(), 0);
        // test for destruction during merge
        List vals = new ArrayList();
        vals.add(Double.valueOf(2.5));
        vals.add(Double.valueOf(3.5));
        vals.add(Double.valueOf(4.5));
        CalcResult medianResult4 = new MedianResult(vals);
        CalcResult medianResult5 = medianResult4.merge(medianResult1);
        assertEquals(2.75, medianResult5.toDouble(), 0);
        assertEquals(3.5, medianResult4.toDouble(), 0);
        // test a mock optimization
        medianVisitor1.setValue(Double.valueOf(544));
        medianResult1 = medianVisitor1.getResult();
        try {
            medianResult3 = medianResult5.merge(medianResult1);
            fail(); // merge should fail
        } catch (Exception e) {
            assertEquals("Optimized median results cannot be merged.", e.getMessage());
        }
        // test empty collection
        medianVisitor1.reset();
        empty.accepts(medianVisitor1, null);
        assertEquals(CalcResult.NULL_RESULT, medianVisitor1.getResult());
        // test merge
        assertSame(medianResult2, medianVisitor1.getResult().merge(medianResult2));
        assertSame(medianResult2, medianResult2.merge(medianVisitor1.getResult()));
    }

