    /**
     * Test the logic operators.
     *
     * @throws IllegalFilterException If the constructed filter is not valid.
     */
    @Test
    public void testAndFilter() throws IllegalFilterException {
        // Set up true sub filter
        PropertyName testAttribute = new AttributeExpressionImpl(testSchema, "testString");
        Literal testLiteral = new LiteralExpressionImpl("test string data");

        PropertyIsEqualTo filterTrue = fac.equals(testAttribute, testLiteral);

        // Set up false sub filter
        testLiteral = new LiteralExpressionImpl("incorrect test string data");
        PropertyIsEqualTo filterFalse = fac.equals(testAttribute, testLiteral);

        // Test AND for false positives
        And filter = fac.and(filterFalse, filterTrue);

        LOGGER.finer(filter.toString());
        LOGGER.finer("contains feature: " + filter.evaluate(testFeature));
        Assert.assertFalse(filter.evaluate(testFeature));

        // Test AND for false positives
        filter = fac.and(filterTrue, filterFalse);

        LOGGER.finer(filter.toString());
        LOGGER.finer("contains feature: " + filter.evaluate(testFeature));
        Assert.assertFalse(filter.evaluate(testFeature));

        // Test AND for false positives
        filter = fac.and(filterTrue, filterTrue);
        LOGGER.finer(filter.toString());
        LOGGER.finer("contains feature: " + filter.evaluate(testFeature));
        Assert.assertTrue(filter.evaluate(testFeature));

        // finally test nothing shortcut
        Assert.assertFalse(fac.not(filter).evaluate(testFeature));
    }

