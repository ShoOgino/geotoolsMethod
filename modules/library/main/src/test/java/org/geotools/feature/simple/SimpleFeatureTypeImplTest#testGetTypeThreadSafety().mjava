    /**
     * Test that calls to getType(int) from multiple threads will not throw an
     * IndexOutOfBoundsException due to poor synchronization
     */
    @Test
    public void testGetTypeThreadSafety() {
        SimpleFeatureTypeBuilder builder = buildPartialBuilder();
        builder.add("location", Point.class, (CoordinateReferenceSystem) null);
        // add attributes to increase the time spend adding types to the array,
        // increasing the chance of a threading issue
        for (int i = 0; i < 100; i++) {
            builder.add("" + i, String.class);
        }
        SimpleFeatureType schema = builder.buildFeatureType();
        Assert.assertNotNull(schema);
        Assert.assertEquals(SimpleFeatureTypeImpl.class, schema.getClass());

        final CountDownLatch latch = new CountDownLatch(8);
        class Task implements Runnable {
            @Override
            public void run() {
                // this should return, then count down the latch
                // if there is an exception, the latch won't be triggered
                schema.getType(99);
                latch.countDown();
            }
        }

        final ExecutorService exec = Executors.newFixedThreadPool(8);

        for (int i = 0; i < 8; i++) {
            final Task task = new Task();
            exec.submit(task);
        }
        exec.shutdown();
        try {
            exec.awaitTermination(5, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            Assert.fail("Interrupted");
        }

        // verify all threads ran successfully and triggered the latch
        Assert.assertEquals(0, latch.getCount());
    }

