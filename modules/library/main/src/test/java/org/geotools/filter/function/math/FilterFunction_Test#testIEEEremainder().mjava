    @Test
    public void testIEEEremainder() {
        try {
            FilterFunction_IEEEremainder IEEEremainder =
                    (FilterFunction_IEEEremainder)
                            ff.function(
                                    "IEEEremainder",
                                    org.opengis.filter.expression.Expression.NIL,
                                    org.opengis.filter.expression.Expression.NIL);
            Assert.assertEquals("Name is, ", "IEEEremainder", IEEEremainder.getName());
            Assert.assertEquals(
                    "Number of arguments, ", 2, IEEEremainder.getFunctionName().getArgumentCount());

            Function IEEEremainderFunction = ff.function("IEEEremainder", literal_1, literal_m1);
            double good0 = Math.IEEEremainder(1.0, -1.0);
            if (Double.isNaN(good0)) {
                Assert.assertTrue(
                        "IEEEremainder of (1.0,-1.0):",
                        Double.isNaN(
                                ((Double) IEEEremainderFunction.evaluate(null)).doubleValue()));
            } else {
                Assert.assertEquals(
                        "IEEEremainder of (1.0,-1.0):",
                        Math.IEEEremainder(1.0, -1.0),
                        ((Double) IEEEremainderFunction.evaluate(null)).doubleValue(),
                        0.00001);
            }

            IEEEremainderFunction = ff.function("IEEEremainder", literal_m1, literal_2);
            double good1 = Math.IEEEremainder(-1.0, 2.0);
            if (Double.isNaN(good1)) {
                Assert.assertTrue(
                        "IEEEremainder of (-1.0,2.0):",
                        Double.isNaN(
                                ((Double) IEEEremainderFunction.evaluate(null)).doubleValue()));
            } else {
                Assert.assertEquals(
                        "IEEEremainder of (-1.0,2.0):",
                        Math.IEEEremainder(-1.0, 2.0),
                        ((Double) IEEEremainderFunction.evaluate(null)).doubleValue(),
                        0.00001);
            }

            IEEEremainderFunction = ff.function("IEEEremainder", literal_2, literal_m2);
            double good2 = Math.IEEEremainder(2.0, -2.0);
            if (Double.isNaN(good2)) {
                Assert.assertTrue(
                        "IEEEremainder of (2.0,-2.0):",
                        Double.isNaN(
                                ((Double) IEEEremainderFunction.evaluate(null)).doubleValue()));
            } else {
                Assert.assertEquals(
                        "IEEEremainder of (2.0,-2.0):",
                        Math.IEEEremainder(2.0, -2.0),
                        ((Double) IEEEremainderFunction.evaluate(null)).doubleValue(),
                        0.00001);
            }

            IEEEremainderFunction = ff.function("IEEEremainder", literal_m2, literal_pi);
            double good3 = Math.IEEEremainder(-2.0, 3.141592653589793);
            if (Double.isNaN(good3)) {
                Assert.assertTrue(
                        "IEEEremainder of (-2.0,3.141592653589793):",
                        Double.isNaN(
                                ((Double) IEEEremainderFunction.evaluate(null)).doubleValue()));
            } else {
                Assert.assertEquals(
                        "IEEEremainder of (-2.0,3.141592653589793):",
                        Math.IEEEremainder(-2.0, 3.141592653589793),
                        ((Double) IEEEremainderFunction.evaluate(null)).doubleValue(),
                        0.00001);
            }

            IEEEremainderFunction = ff.function("IEEEremainder", literal_pi, literal_05pi);
            double good4 = Math.IEEEremainder(3.141592653589793, 1.5707963267948966);
            if (Double.isNaN(good4)) {
                Assert.assertTrue(
                        "IEEEremainder of (3.141592653589793,1.5707963267948966):",
                        Double.isNaN(
                                ((Double) IEEEremainderFunction.evaluate(null)).doubleValue()));
            } else {
                Assert.assertEquals(
                        "IEEEremainder of (3.141592653589793,1.5707963267948966):",
                        Math.IEEEremainder(3.141592653589793, 1.5707963267948966),
                        ((Double) IEEEremainderFunction.evaluate(null)).doubleValue(),
                        0.00001);
            }

            IEEEremainderFunction = ff.function("IEEEremainder", literal_05pi, literal_1);
            double good5 = Math.IEEEremainder(1.5707963267948966, 1.0);
            if (Double.isNaN(good5)) {
                Assert.assertTrue(
                        "IEEEremainder of (1.5707963267948966,1.0):",
                        Double.isNaN(
                                ((Double) IEEEremainderFunction.evaluate(null)).doubleValue()));
            } else {
                Assert.assertEquals(
                        "IEEEremainder of (1.5707963267948966,1.0):",
                        Math.IEEEremainder(1.5707963267948966, 1.0),
                        ((Double) IEEEremainderFunction.evaluate(null)).doubleValue(),
                        0.00001);
            }

            IEEEremainderFunction = ff.function("IEEEremainder", literal_null, literal_1);
            Assert.assertNull(IEEEremainderFunction.evaluate(null));

            IEEEremainderFunction = ff.function("IEEEremainder", literal_1, literal_null);
            Assert.assertNull(IEEEremainderFunction.evaluate(null));

            IEEEremainderFunction = ff.function("IEEEremainder", literal_null, literal_null);
            Assert.assertNull(IEEEremainderFunction.evaluate(null));

        } catch (FactoryRegistryException e) {
            java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e);
            Assert.fail("Unexpected exception: " + e.getMessage());
        }
    }

