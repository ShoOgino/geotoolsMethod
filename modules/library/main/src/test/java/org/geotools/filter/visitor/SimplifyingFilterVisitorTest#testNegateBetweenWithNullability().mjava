    public void testNegateBetweenWithNullability() {
        SimpleFeatureTypeBuilder tb = new SimpleFeatureTypeBuilder();
        tb.nillable(true);
        tb.add("prop", String.class);
        tb.nillable(false);
        tb.add("prop2", String.class);
        tb.setName("test");

        // when FeatureType is null
        PropertyName prop = ff.property("prop");
        Literal l10 = ff.literal(10);
        Literal l20 = ff.literal(20);
        Filter f = ff.not(ff.between(prop, l10, l20));
        Filter result = (Filter) f.accept(simpleVisitor, null);
        assertEquals(
                ff.or(
                        Arrays.asList(
                                (Filter) ff.less(prop, l10),
                                ff.greater(prop, l20),
                                ff.isNull(prop))),
                result);

        // when FeatureType is not null and property is nullable
        simpleVisitor.setFeatureType(tb.buildFeatureType());
        prop = ff.property("prop");
        f = ff.not(ff.between(prop, l10, l20));
        result = (Filter) f.accept(simpleVisitor, null);
        assertEquals(
                ff.or(
                        Arrays.asList(
                                (Filter) ff.less(prop, l10),
                                ff.greater(prop, l20),
                                ff.isNull(prop))),
                result);

        // when FeatureType is not null and property is not nullable
        prop = ff.property("prop2");
        f = ff.not(ff.between(prop, l10, l20));
        result = (Filter) f.accept(simpleVisitor, null);
        assertEquals(
                ff.or(Arrays.asList((Filter) ff.less(prop, l10), ff.greater(prop, l20))), result);
    }

