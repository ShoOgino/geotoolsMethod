    /** Test the transaction when multiple edits occur using a transaction and a fid filter. */
    @Test
    public void testModifyInTransactionFidFilter() throws Exception {
        GeometryFactory fac = new GeometryFactory();

        try (FeatureWriter<SimpleFeatureType, SimpleFeature> writer1 =
                data.getFeatureWriter("road", rd1Filter, defaultTransaction)) {
            writer1.next()
                    .setDefaultGeometry(
                            fac.createLineString(
                                    new Coordinate[] {new Coordinate(0, 0), new Coordinate(0, 1)}));
            writer1.write();
        }

        try (FeatureReader<SimpleFeatureType, SimpleFeature> reader =
                data.getFeatureReader(new Query("road", rd1Filter), defaultTransaction)) {

            Geometry geom1 = (Geometry) reader.next().getDefaultGeometry();

            Assert.assertEquals(new Coordinate(0, 0), geom1.getCoordinates()[0]);
            Assert.assertEquals(new Coordinate(0, 1), geom1.getCoordinates()[1]);
        }

        try (FeatureWriter<SimpleFeatureType, SimpleFeature> writer1 =
                data.getFeatureWriter("road", rd1Filter, defaultTransaction)) {
            writer1.next()
                    .setDefaultGeometry(
                            fac.createLineString(
                                    new Coordinate[] {
                                        new Coordinate(10, 0), new Coordinate(10, 1)
                                    }));
            writer1.write();
        }

        try (FeatureReader<SimpleFeatureType, SimpleFeature> reader =
                data.getFeatureReader(new Query("road", rd1Filter), defaultTransaction)) {
            Geometry geom1 = (Geometry) reader.next().getDefaultGeometry();
            Assert.assertEquals(new Coordinate(10, 0), geom1.getCoordinates()[0]);
            Assert.assertEquals(new Coordinate(10, 1), geom1.getCoordinates()[1]);
        }

        SimpleFeature feature;
        try (FeatureWriter<SimpleFeatureType, SimpleFeature> writer =
                data.getFeatureWriterAppend("road", defaultTransaction)) {
            feature = writer.next();
            feature.setDefaultGeometry(
                    fac.createLineString(
                            new Coordinate[] {new Coordinate(20, 0), new Coordinate(20, 1)}));
            writer.write();
        }

        FilterFactory filterFactory = CommonFactoryFinder.getFilterFactory(null);
        Id filter =
                filterFactory.id(Collections.singleton(filterFactory.featureId(feature.getID())));

        try (FeatureReader<SimpleFeatureType, SimpleFeature> reader =
                data.getFeatureReader(new Query("road", filter), defaultTransaction)) {
            Geometry geom1 = (Geometry) reader.next().getDefaultGeometry();
            reader.close();
            Assert.assertEquals(new Coordinate(20, 0), geom1.getCoordinates()[0]);
            Assert.assertEquals(new Coordinate(20, 1), geom1.getCoordinates()[1]);
        }

        try (FeatureWriter<SimpleFeatureType, SimpleFeature> writer1 =
                data.getFeatureWriter("road", filter, defaultTransaction)) {
            writer1.next()
                    .setDefaultGeometry(
                            fac.createLineString(
                                    new Coordinate[] {
                                        new Coordinate(30, 0), new Coordinate(30, 1)
                                    }));
            writer1.write();
        }

        try (FeatureReader<SimpleFeatureType, SimpleFeature> reader =
                data.getFeatureReader(new Query("road", filter), defaultTransaction)) {
            Geometry geom1 = (Geometry) reader.next().getDefaultGeometry();
            Assert.assertEquals(new Coordinate(30, 0), geom1.getCoordinates()[0]);
            Assert.assertEquals(new Coordinate(30, 1), geom1.getCoordinates()[1]);
        }
    }

