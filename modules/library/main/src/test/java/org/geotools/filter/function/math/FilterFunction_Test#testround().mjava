    @Test
    public void testround() {
        try {
            FilterFunction_round round =
                    (FilterFunction_round)
                            ff.function("round", org.opengis.filter.expression.Expression.NIL);
            Assert.assertEquals("Name is, ", "round", round.getName());
            Assert.assertEquals(
                    "Number of arguments, ", 1, round.getFunctionName().getArgumentCount());

            Function roundFunction = ff.function("round", literal_1);
            Assert.assertEquals(
                    "round of (1.0):",
                    (int) Math.round(1.0),
                    ((Integer) roundFunction.evaluate(null)).intValue(),
                    0.00001);

            roundFunction = ff.function("round", literal_m1);
            Assert.assertEquals(
                    "round of (-1.0):",
                    (int) Math.round(-1.0),
                    ((Integer) roundFunction.evaluate(null)).intValue(),
                    0.00001);

            roundFunction = ff.function("round", literal_2);
            Assert.assertEquals(
                    "round of (2.0):",
                    (int) Math.round(2.0),
                    ((Integer) roundFunction.evaluate(null)).intValue(),
                    0.00001);

            roundFunction = ff.function("round", literal_m2);
            Assert.assertEquals(
                    "round of (-2.0):",
                    (int) Math.round(-2.0),
                    ((Integer) roundFunction.evaluate(null)).intValue(),
                    0.00001);

            roundFunction = ff.function("round", literal_pi);
            Assert.assertEquals(
                    "round of (3.141592653589793):",
                    (int) Math.round(3.141592653589793),
                    ((Integer) roundFunction.evaluate(null)).intValue(),
                    0.00001);

            roundFunction = ff.function("round", literal_05pi);
            Assert.assertEquals(
                    "round of (1.5707963267948966):",
                    (int) Math.round(1.5707963267948966),
                    ((Integer) roundFunction.evaluate(null)).intValue(),
                    0.00001);

            roundFunction = ff.function("round", literal_null);
            Assert.assertNull(roundFunction.evaluate(null));

        } catch (FactoryRegistryException e) {
            java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e);
            Assert.fail("Unexpected exception: " + e.getMessage());
        }
    }

