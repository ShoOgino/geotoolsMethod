    public void testMax() throws IllegalFilterException, IOException {
        // index 0 is the id field, so the data isn't terribly exciting
        MaxVisitor maxVisitor = new MaxVisitor(0, ft);
        fc.accepts(maxVisitor, null); // 1,2,3
        MaxVisitor maxVisitor2 = new MaxVisitor(3, ft2);
        fc2.accepts(maxVisitor2, null); // 3,4.5
        // 3 is max
        int value1 = maxVisitor.getResult().toInt();
        assertEquals(3, value1);
        // 4.5 is max
        double value2 = maxVisitor2.getResult().toDouble();
        assertEquals((double) 4.5, value2, 0);
        // max of 3 and 4.5 is 4.5
        CalcResult maxResult1 = (MaxResult) maxVisitor.getResult();
        CalcResult maxResult2 = (MaxResult) maxVisitor2.getResult();
        CalcResult maxResult3 = (MaxResult) maxResult1.merge(maxResult2);
        assertEquals((double) 4.5, maxResult3.toDouble(), 0);
        // test for destruction during merge
        CalcResult maxResult4 = new MaxResult((Comparable) Double.valueOf(2));
        CalcResult maxResult5 = (MaxResult) maxResult4.merge(maxResult1);
        assertEquals(3, maxResult5.toDouble(), 0);
        assertEquals(2, maxResult4.toDouble(), 0);
        // test negative result
        CalcResult maxResult6 = new MaxResult((Comparable) Integer.valueOf(-5));
        CalcResult maxResult7 = (MaxResult) maxResult1.merge(maxResult6);
        assertEquals(3, maxResult7.toDouble(), 0);
        assertEquals(-5, maxResult6.toDouble(), 0);
        // test a mock optimization
        maxVisitor.setValue(Double.valueOf(544));
        maxResult1 = maxVisitor.getResult();
        maxResult7 = maxResult7.merge(maxResult1);
        assertEquals(544, maxResult7.toDouble(), 0);
        // test varying data types
        maxVisitor.setValue(Long.valueOf(6453));
        maxResult1 = maxVisitor.getResult();
        maxResult7 = maxResult7.merge(maxResult1);
        assertEquals(6453, maxResult7.toDouble(), 0);
        assertEquals(6453, maxResult7.toInt());
        // test empty collection
        maxVisitor.reset();
        empty.accepts(maxVisitor, null);
        assertEquals(CalcResult.NULL_RESULT, maxVisitor.getResult());
        // test merge
        assertSame(maxResult2, maxVisitor.getResult().merge(maxResult2));
        assertSame(maxResult2, maxResult2.merge(maxVisitor.getResult()));
    }

