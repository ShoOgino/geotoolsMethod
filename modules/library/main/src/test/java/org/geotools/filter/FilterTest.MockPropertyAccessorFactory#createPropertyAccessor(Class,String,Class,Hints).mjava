        @Override
        public PropertyAccessor createPropertyAccessor(
                Class type, String xpath, Class target, Hints hints) {
            if (!MockDataObject.class.equals(type)) {
                return null;
            }
            return new PropertyAccessor() {
                @Override
                public boolean canHandle(Object object, String xpath, Class target) {
                    return object instanceof MockDataObject;
                }

                @Override
                public <T> T get(Object object, String xpath, Class<T> target)
                        throws IllegalArgumentException {
                    if (object == null) return null;

                    try {
                        Field field = MockDataObject.class.getField(xpath);
                        Object value = field.get(object);
                        @SuppressWarnings("unchecked")
                        T cast = (T) value;
                        return cast;
                    } catch (Exception e) {
                        throw (IllegalArgumentException)
                                new IllegalArgumentException("Illegal property name: " + xpath)
                                        .initCause(e);
                    }
                }

                @Override
                public void set(Object object, String xpath, Object value, Class target)
                        throws IllegalArgumentException {
                    throw new UnsupportedOperationException();
                }
            };
        }

