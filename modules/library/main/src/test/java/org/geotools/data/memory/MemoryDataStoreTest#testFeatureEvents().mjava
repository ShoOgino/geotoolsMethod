    @Test
    public void testFeatureEvents() throws Exception {
        SimpleFeatureStore store1 =
                (SimpleFeatureStore)
                        data.getFeatureSource(roadFeatures[0].getFeatureType().getTypeName());
        SimpleFeatureStore store2 =
                (SimpleFeatureStore)
                        data.getFeatureSource(roadFeatures[0].getFeatureType().getTypeName());
        store1.setTransaction(defaultTransaction);
        class Listener implements FeatureListener {
            String name;
            List<FeatureEvent> events = new ArrayList<>();

            public Listener(String name) {
                this.name = name;
            }

            public void changed(FeatureEvent featureEvent) {
                this.events.add(featureEvent);
            }

            FeatureEvent getEvent(int i) {
                return events.get(i);
            }

            public String toString() {
                return "Feature Listener " + name;
            }
        }
        Listener listener1 = new Listener("one");
        Listener listener2 = new Listener("two");

        store1.addFeatureListener(listener1);
        store2.addFeatureListener(listener2);
        FilterFactory factory = CommonFactoryFinder.getFilterFactory(null);

        // test that only the listener listening with the current transaction gets the event.
        final SimpleFeature feature = roadFeatures[0];
        store1.removeFeatures(
                factory.id(Collections.singleton(factory.featureId(feature.getID()))));
        Assert.assertEquals(1, listener1.events.size());
        Assert.assertEquals(0, listener2.events.size());
        FeatureEvent event = listener1.getEvent(0);
        Assert.assertEquals(feature.getBounds(), event.getBounds());
        Assert.assertEquals(FeatureEvent.Type.REMOVED, event.getType());

        // test that commit only sends events to listener2.
        listener1.events.clear();
        listener2.events.clear();

        store1.getTransaction().commit();

        Assert.assertEquals(0, listener1.events.size());

        Assert.assertEquals(1, listener2.events.size());
        event = listener2.getEvent(0);
        Assert.assertEquals(feature.getBounds(), event.getBounds());
        Assert.assertEquals(FeatureEvent.Type.COMMIT, event.getType());

        // test add same as modify
        listener1.events.clear();
        listener2.events.clear();

        store1.addFeatures(DataUtilities.collection(feature));

        Assert.assertEquals(1, listener1.events.size());
        event = listener1.getEvent(0);
        Assert.assertEquals(feature.getBounds(), event.getBounds());
        Assert.assertEquals(FeatureEvent.Type.ADDED, event.getType());
        Assert.assertEquals(0, listener2.events.size());

        // test that rollback only sends events to listener1.
        listener1.events.clear();
        listener2.events.clear();

        store1.getTransaction().rollback();

        Assert.assertEquals(1, listener1.events.size());
        event = listener1.getEvent(0);
        Assert.assertEquals(feature.getBounds(), event.getBounds());
        Assert.assertEquals(FeatureEvent.Type.ROLLBACK, event.getType());

        Assert.assertEquals(0, listener2.events.size());

        // this is how Auto_commit is supposed to work
        listener1.events.clear();
        listener2.events.clear();
        store2.addFeatures(DataUtilities.collection(feature));

        Assert.assertEquals(1, listener1.events.size());
        event = listener1.getEvent(0);
        Assert.assertEquals(feature.getBounds(), event.getBounds());
        Assert.assertEquals(FeatureEvent.Type.ADDED, event.getType());
        Assert.assertEquals(1, listener2.events.size());
    }

