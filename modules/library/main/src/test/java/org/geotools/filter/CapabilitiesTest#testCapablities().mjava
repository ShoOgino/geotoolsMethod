    public void testCapablities(){
        Capabilities capabilities = new Capabilities();
        capabilities.addType( Beyond.class ); // add to SpatialCapabilities
        capabilities.addType( After.class ); // add to TemporalCapabilities
        capabilities.addType( PropertyIsEqualTo.class ); // add to ScalarCapabilities
        capabilities.addName( "NullCheck" ); // will enable PropertyIsNull use
        capabilities.addName( "Mul" ); // will enable hasSimpleArithmatic
        capabilities.addName( "random" ); // a function returning a random number
        capabilities.addName( "Length", 1 ); // single argument function
        capabilities.addName( "toDegrees", "radians" ); // single argument function
        capabilities.addName( "length", "expression" );

        FilterFactory2 ff = CommonFactoryFinder.getFilterFactory2(null);
        Filter filter = ff.between( ff.literal(0), ff.property("x"), ff.literal( 2 ) );        
        assertFalse("supports", capabilities.supports( filter ) );
        
        filter = ff.equals(ff.property("x"), ff.literal( 2 ) );        
        assertTrue("supports", capabilities.supports( filter ) );
        
        filter = ff.after(ff.property("x"), ff.literal("1970-01-01 00:00:00"));
        assertTrue("supports", capabilities.supports( filter ) );

        assertTrue("fullySupports", capabilities.fullySupports( filter ) );

        Capabilities capabilities2 = new Capabilities();

        capabilities2.addAll( capabilities );
        capabilities2.addType( And.class );
        
        assertTrue( capabilities2.getContents().getScalarCapabilities().hasLogicalOperators() );
        assertFalse( capabilities.getContents().getScalarCapabilities().hasLogicalOperators() );
        
    }

