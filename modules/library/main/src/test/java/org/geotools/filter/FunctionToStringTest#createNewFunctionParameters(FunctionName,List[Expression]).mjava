    /**
     * Creates the default parameters for the new function.
     *
     * <p>Some function need have specific types or number of parameters before toString() works.
     *
     * @param functionName the function name
     * @param parameters the parameters
     */
    private static void createNewFunctionParameters(
            FunctionName functionName, List<Expression> parameters) {
        String name = functionName.getName();

        if (collectionFunctionList.contains(name)) {
            parameters.add(ff.property("geom"));
        } else if (name.compareToIgnoreCase(CategorizeFunction.NAME.getName()) == 0) {
            // CategorizeFunction needs all the fields populated
            for (int index = 0; index < functionName.getArguments().size() - 1; index++) {
                parameters.add(index, ff.literal(""));
            }

            parameters.remove(parameters.size() - 1);
            parameters.add(ff.literal(CategorizeFunction.PRECEDING));
        } else {
            List<Parameter<?>> functionParamList = functionName.getArguments();

            for (int paramIndex = 0; paramIndex < functionParamList.size(); paramIndex++) {
                Parameter<?> param = functionParamList.get(paramIndex);

                Class<?> type = param.getType();
                if (type == Object.class) {
                    parameters.add(ff.literal(""));
                } else if (type == String.class) {
                    parameters.add(ff.literal(""));
                } else if ((type == Number.class) || (type == Double.class)) {
                    parameters.add(ff.literal(0.0));
                } else if (type == Float.class) {
                    parameters.add(ff.literal(0.0f));
                } else if ((type == Integer.class) || (type == Long.class)) {
                    parameters.add(ff.literal(0));
                } else if (type == Boolean.class) {
                    parameters.add(ff.literal(false));
                } else if (type == Unit.class) {
                    parameters.add(null);
                } else if (type == Color.class) {
                    parameters.add(null);
                } else if (type == Geometry.class) {
                    parameters.add(null);
                } else if (type == org.opengis.geometry.Geometry.class) {
                    parameters.add(null);
                } else if (type == LineString.class) {
                    parameters.add(null);
                } else if (type == Classifier.class) {
                    parameters.add(null);
                } else if (type == Class.class) {
                    parameters.add(null);
                } else if (type.getName()
                                .compareToIgnoreCase(
                                        "org.geotools.filter.function.color.AbstractHSLFunction$Method")
                        == 0) {
                    parameters.add(null);
                } else if (type.getName()
                                .compareToIgnoreCase("org.geotools.styling.visitor.RescalingMode")
                        == 0) {
                    parameters.add(ff.literal(0));
                } else {
                    Object newObj = null;
                    try {
                        newObj = type.newInstance();
                    } catch (InstantiationException e) {
                        java.util.logging.Logger.getGlobal()
                                .log(java.util.logging.Level.INFO, "", e);
                    } catch (IllegalAccessException e) {
                        java.util.logging.Logger.getGlobal()
                                .log(java.util.logging.Level.INFO, "", e);
                    }

                    parameters.add(ff.literal(newObj));
                }
            }
        }
    }

