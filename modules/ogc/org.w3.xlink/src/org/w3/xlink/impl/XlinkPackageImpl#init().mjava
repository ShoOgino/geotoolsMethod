    /**
     * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
     * 
     * <p>This method is used to initialize {@link XlinkPackage#eINSTANCE} when that field is accessed.
     * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see #eNS_URI
     * @see #createPackageContents()
     * @see #initializePackageContents()
     * @generated
     */
    public static XlinkPackage init() {
        if (isInited) return (XlinkPackage)EPackage.Registry.INSTANCE.getEPackage(XlinkPackage.eNS_URI);

        // Obtain or create and register package
        XlinkPackageImpl theXlinkPackage = (XlinkPackageImpl)(EPackage.Registry.INSTANCE.get(eNS_URI) instanceof XlinkPackageImpl ? EPackage.Registry.INSTANCE.get(eNS_URI) : new XlinkPackageImpl());

        isInited = true;

        // Initialize simple dependencies
        EcorePackage.eINSTANCE.eClass();
        XMLNamespacePackage.eINSTANCE.eClass();

        // Create package meta-data objects
        theXlinkPackage.createPackageContents();

        // Initialize created meta-data
        theXlinkPackage.initializePackageContents();

        // Register package validator
        EValidator.Registry.INSTANCE.put
            (theXlinkPackage, 
             new EValidator.Descriptor() {
                 @Override
                public EValidator getEValidator() {
                     return XlinkValidator.INSTANCE;
                 }
             });

        // Mark meta-data to indicate it can't be changed
        theXlinkPackage.freeze();

  
        // Update the registry and return the package
        EPackage.Registry.INSTANCE.put(XlinkPackage.eNS_URI, theXlinkPackage);
        return theXlinkPackage;
    }

