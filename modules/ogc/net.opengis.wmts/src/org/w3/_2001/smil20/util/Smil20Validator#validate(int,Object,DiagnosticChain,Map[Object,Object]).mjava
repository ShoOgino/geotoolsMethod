    /**
     * Calls <code>validateXXX</code> for the corresponding classifier of the model.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    protected boolean validate(int classifierID, Object value, DiagnosticChain diagnostics, Map<Object, Object> context) {
        switch (classifierID) {
            case Smil20Package.ANIMATE_COLOR_PROTOTYPE:
                return validateAnimateColorPrototype((AnimateColorPrototype)value, diagnostics, context);
            case Smil20Package.ANIMATE_MOTION_PROTOTYPE:
                return validateAnimateMotionPrototype((AnimateMotionPrototype)value, diagnostics, context);
            case Smil20Package.ANIMATE_PROTOTYPE:
                return validateAnimatePrototype((AnimatePrototype)value, diagnostics, context);
            case Smil20Package.DOCUMENT_ROOT:
                return validateDocumentRoot((DocumentRoot)value, diagnostics, context);
            case Smil20Package.SET_PROTOTYPE:
                return validateSetPrototype((SetPrototype)value, diagnostics, context);
            case Smil20Package.ACCUMULATE_TYPE:
                return validateAccumulateType((AccumulateType)value, diagnostics, context);
            case Smil20Package.ADDITIVE_TYPE:
                return validateAdditiveType((AdditiveType)value, diagnostics, context);
            case Smil20Package.ATTRIBUTE_TYPE_TYPE:
                return validateAttributeTypeType((AttributeTypeType)value, diagnostics, context);
            case Smil20Package.CALC_MODE_TYPE:
                return validateCalcModeType((CalcModeType)value, diagnostics, context);
            case Smil20Package.FILL_DEFAULT_TYPE:
                return validateFillDefaultType((FillDefaultType)value, diagnostics, context);
            case Smil20Package.FILL_TIMING_ATTRS_TYPE:
                return validateFillTimingAttrsType((FillTimingAttrsType)value, diagnostics, context);
            case Smil20Package.RESTART_DEFAULT_TYPE:
                return validateRestartDefaultType((RestartDefaultType)value, diagnostics, context);
            case Smil20Package.RESTART_TIMING_TYPE:
                return validateRestartTimingType((RestartTimingType)value, diagnostics, context);
            case Smil20Package.SYNC_BEHAVIOR_DEFAULT_TYPE:
                return validateSyncBehaviorDefaultType((SyncBehaviorDefaultType)value, diagnostics, context);
            case Smil20Package.SYNC_BEHAVIOR_TYPE:
                return validateSyncBehaviorType((SyncBehaviorType)value, diagnostics, context);
            case Smil20Package.ACCUMULATE_TYPE_OBJECT:
                return validateAccumulateTypeObject((AccumulateType)value, diagnostics, context);
            case Smil20Package.ADDITIVE_TYPE_OBJECT:
                return validateAdditiveTypeObject((AdditiveType)value, diagnostics, context);
            case Smil20Package.ATTRIBUTE_TYPE_TYPE_OBJECT:
                return validateAttributeTypeTypeObject((AttributeTypeType)value, diagnostics, context);
            case Smil20Package.CALC_MODE_TYPE_OBJECT:
                return validateCalcModeTypeObject((CalcModeType)value, diagnostics, context);
            case Smil20Package.FILL_DEFAULT_TYPE_OBJECT:
                return validateFillDefaultTypeObject((FillDefaultType)value, diagnostics, context);
            case Smil20Package.FILL_TIMING_ATTRS_TYPE_OBJECT:
                return validateFillTimingAttrsTypeObject((FillTimingAttrsType)value, diagnostics, context);
            case Smil20Package.NON_NEGATIVE_DECIMAL_TYPE:
                return validateNonNegativeDecimalType((BigDecimal)value, diagnostics, context);
            case Smil20Package.RESTART_DEFAULT_TYPE_OBJECT:
                return validateRestartDefaultTypeObject((RestartDefaultType)value, diagnostics, context);
            case Smil20Package.RESTART_TIMING_TYPE_OBJECT:
                return validateRestartTimingTypeObject((RestartTimingType)value, diagnostics, context);
            case Smil20Package.SYNC_BEHAVIOR_DEFAULT_TYPE_OBJECT:
                return validateSyncBehaviorDefaultTypeObject((SyncBehaviorDefaultType)value, diagnostics, context);
            case Smil20Package.SYNC_BEHAVIOR_TYPE_OBJECT:
                return validateSyncBehaviorTypeObject((SyncBehaviorType)value, diagnostics, context);
            default:
                return true;
        }
    }

