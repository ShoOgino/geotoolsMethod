    /**
     * Creates the meta-model objects for the package.  This method is
     * guarded to have no affect on any invocation but its first.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void createPackageContents() {
        if (isCreated) return;
        isCreated = true;

        // Create classes and their features
        animateColorPrototypeEClass = createEClass(ANIMATE_COLOR_PROTOTYPE);
        createEAttribute(animateColorPrototypeEClass, ANIMATE_COLOR_PROTOTYPE__ACCUMULATE);
        createEAttribute(animateColorPrototypeEClass, ANIMATE_COLOR_PROTOTYPE__ADDITIVE);
        createEAttribute(animateColorPrototypeEClass, ANIMATE_COLOR_PROTOTYPE__ATTRIBUTE_NAME);
        createEAttribute(animateColorPrototypeEClass, ANIMATE_COLOR_PROTOTYPE__ATTRIBUTE_TYPE);
        createEAttribute(animateColorPrototypeEClass, ANIMATE_COLOR_PROTOTYPE__BY);
        createEAttribute(animateColorPrototypeEClass, ANIMATE_COLOR_PROTOTYPE__FROM);
        createEAttribute(animateColorPrototypeEClass, ANIMATE_COLOR_PROTOTYPE__TO);
        createEAttribute(animateColorPrototypeEClass, ANIMATE_COLOR_PROTOTYPE__VALUES);

        animateMotionPrototypeEClass = createEClass(ANIMATE_MOTION_PROTOTYPE);
        createEAttribute(animateMotionPrototypeEClass, ANIMATE_MOTION_PROTOTYPE__ACCUMULATE);
        createEAttribute(animateMotionPrototypeEClass, ANIMATE_MOTION_PROTOTYPE__ADDITIVE);
        createEAttribute(animateMotionPrototypeEClass, ANIMATE_MOTION_PROTOTYPE__BY);
        createEAttribute(animateMotionPrototypeEClass, ANIMATE_MOTION_PROTOTYPE__FROM);
        createEAttribute(animateMotionPrototypeEClass, ANIMATE_MOTION_PROTOTYPE__ORIGIN);
        createEAttribute(animateMotionPrototypeEClass, ANIMATE_MOTION_PROTOTYPE__TO);
        createEAttribute(animateMotionPrototypeEClass, ANIMATE_MOTION_PROTOTYPE__VALUES);

        animatePrototypeEClass = createEClass(ANIMATE_PROTOTYPE);
        createEAttribute(animatePrototypeEClass, ANIMATE_PROTOTYPE__ACCUMULATE);
        createEAttribute(animatePrototypeEClass, ANIMATE_PROTOTYPE__ADDITIVE);
        createEAttribute(animatePrototypeEClass, ANIMATE_PROTOTYPE__ATTRIBUTE_NAME);
        createEAttribute(animatePrototypeEClass, ANIMATE_PROTOTYPE__ATTRIBUTE_TYPE);
        createEAttribute(animatePrototypeEClass, ANIMATE_PROTOTYPE__BY);
        createEAttribute(animatePrototypeEClass, ANIMATE_PROTOTYPE__FROM);
        createEAttribute(animatePrototypeEClass, ANIMATE_PROTOTYPE__TO);
        createEAttribute(animatePrototypeEClass, ANIMATE_PROTOTYPE__VALUES);

        documentRootEClass = createEClass(DOCUMENT_ROOT);
        createEAttribute(documentRootEClass, DOCUMENT_ROOT__MIXED);
        createEReference(documentRootEClass, DOCUMENT_ROOT__XMLNS_PREFIX_MAP);
        createEReference(documentRootEClass, DOCUMENT_ROOT__XSI_SCHEMA_LOCATION);
        createEReference(documentRootEClass, DOCUMENT_ROOT__ANIMATE);
        createEReference(documentRootEClass, DOCUMENT_ROOT__ANIMATE_COLOR);
        createEReference(documentRootEClass, DOCUMENT_ROOT__ANIMATE_MOTION);
        createEReference(documentRootEClass, DOCUMENT_ROOT__SET);

        setPrototypeEClass = createEClass(SET_PROTOTYPE);
        createEAttribute(setPrototypeEClass, SET_PROTOTYPE__ATTRIBUTE_NAME);
        createEAttribute(setPrototypeEClass, SET_PROTOTYPE__ATTRIBUTE_TYPE);
        createEAttribute(setPrototypeEClass, SET_PROTOTYPE__TO);

        // Create enums
        accumulateTypeEEnum = createEEnum(ACCUMULATE_TYPE);
        additiveTypeEEnum = createEEnum(ADDITIVE_TYPE);
        attributeTypeTypeEEnum = createEEnum(ATTRIBUTE_TYPE_TYPE);
        calcModeTypeEEnum = createEEnum(CALC_MODE_TYPE);
        fillDefaultTypeEEnum = createEEnum(FILL_DEFAULT_TYPE);
        fillTimingAttrsTypeEEnum = createEEnum(FILL_TIMING_ATTRS_TYPE);
        restartDefaultTypeEEnum = createEEnum(RESTART_DEFAULT_TYPE);
        restartTimingTypeEEnum = createEEnum(RESTART_TIMING_TYPE);
        syncBehaviorDefaultTypeEEnum = createEEnum(SYNC_BEHAVIOR_DEFAULT_TYPE);
        syncBehaviorTypeEEnum = createEEnum(SYNC_BEHAVIOR_TYPE);

        // Create data types
        accumulateTypeObjectEDataType = createEDataType(ACCUMULATE_TYPE_OBJECT);
        additiveTypeObjectEDataType = createEDataType(ADDITIVE_TYPE_OBJECT);
        attributeTypeTypeObjectEDataType = createEDataType(ATTRIBUTE_TYPE_TYPE_OBJECT);
        calcModeTypeObjectEDataType = createEDataType(CALC_MODE_TYPE_OBJECT);
        fillDefaultTypeObjectEDataType = createEDataType(FILL_DEFAULT_TYPE_OBJECT);
        fillTimingAttrsTypeObjectEDataType = createEDataType(FILL_TIMING_ATTRS_TYPE_OBJECT);
        nonNegativeDecimalTypeEDataType = createEDataType(NON_NEGATIVE_DECIMAL_TYPE);
        restartDefaultTypeObjectEDataType = createEDataType(RESTART_DEFAULT_TYPE_OBJECT);
        restartTimingTypeObjectEDataType = createEDataType(RESTART_TIMING_TYPE_OBJECT);
        syncBehaviorDefaultTypeObjectEDataType = createEDataType(SYNC_BEHAVIOR_DEFAULT_TYPE_OBJECT);
        syncBehaviorTypeObjectEDataType = createEDataType(SYNC_BEHAVIOR_TYPE_OBJECT);
    }

