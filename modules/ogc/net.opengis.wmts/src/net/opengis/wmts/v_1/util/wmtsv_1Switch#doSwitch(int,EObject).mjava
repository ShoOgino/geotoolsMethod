    /**
     * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @return the first non-null result returned by a <code>caseXXX</code> call.
     * @generated
     */
    @Override
    protected T doSwitch(int classifierID, EObject theEObject) {
        switch (classifierID) {
            case wmtsv_1Package.BINARY_PAYLOAD_TYPE: {
                BinaryPayloadType binaryPayloadType = (BinaryPayloadType)theEObject;
                T result = caseBinaryPayloadType(binaryPayloadType);
                if (result == null) result = defaultCase(theEObject);
                return result;
            }
            case wmtsv_1Package.CAPABILITIES_TYPE: {
                CapabilitiesType capabilitiesType = (CapabilitiesType)theEObject;
                T result = caseCapabilitiesType(capabilitiesType);
                if (result == null) result = caseCapabilitiesBaseType(capabilitiesType);
                if (result == null) result = defaultCase(theEObject);
                return result;
            }
            case wmtsv_1Package.CONTENTS_TYPE: {
                ContentsType contentsType = (ContentsType)theEObject;
                T result = caseContentsType(contentsType);
                if (result == null) result = caseContentsBaseType(contentsType);
                if (result == null) result = defaultCase(theEObject);
                return result;
            }
            case wmtsv_1Package.DIMENSION_NAME_VALUE_TYPE: {
                DimensionNameValueType dimensionNameValueType = (DimensionNameValueType)theEObject;
                T result = caseDimensionNameValueType(dimensionNameValueType);
                if (result == null) result = defaultCase(theEObject);
                return result;
            }
            case wmtsv_1Package.DIMENSION_TYPE: {
                DimensionType dimensionType = (DimensionType)theEObject;
                T result = caseDimensionType(dimensionType);
                if (result == null) result = caseDescriptionType(dimensionType);
                if (result == null) result = defaultCase(theEObject);
                return result;
            }
            case wmtsv_1Package.DOCUMENT_ROOT: {
                DocumentRoot documentRoot = (DocumentRoot)theEObject;
                T result = caseDocumentRoot(documentRoot);
                if (result == null) result = defaultCase(theEObject);
                return result;
            }
            case wmtsv_1Package.FEATURE_INFO_RESPONSE_TYPE: {
                FeatureInfoResponseType featureInfoResponseType = (FeatureInfoResponseType)theEObject;
                T result = caseFeatureInfoResponseType(featureInfoResponseType);
                if (result == null) result = defaultCase(theEObject);
                return result;
            }
            case wmtsv_1Package.GET_CAPABILITIES_TYPE: {
                GetCapabilitiesType getCapabilitiesType = (GetCapabilitiesType)theEObject;
                T result = caseGetCapabilitiesType(getCapabilitiesType);
                if (result == null) result = caseOws11_GetCapabilitiesType(getCapabilitiesType);
                if (result == null) result = defaultCase(theEObject);
                return result;
            }
            case wmtsv_1Package.GET_FEATURE_INFO_TYPE: {
                GetFeatureInfoType getFeatureInfoType = (GetFeatureInfoType)theEObject;
                T result = caseGetFeatureInfoType(getFeatureInfoType);
                if (result == null) result = defaultCase(theEObject);
                return result;
            }
            case wmtsv_1Package.GET_TILE_TYPE: {
                GetTileType getTileType = (GetTileType)theEObject;
                T result = caseGetTileType(getTileType);
                if (result == null) result = defaultCase(theEObject);
                return result;
            }
            case wmtsv_1Package.LAYER_TYPE: {
                LayerType layerType = (LayerType)theEObject;
                T result = caseLayerType(layerType);
                if (result == null) result = caseDatasetDescriptionSummaryBaseType(layerType);
                if (result == null) result = caseDescriptionType(layerType);
                if (result == null) result = defaultCase(theEObject);
                return result;
            }
            case wmtsv_1Package.LEGEND_URL_TYPE: {
                LegendURLType legendURLType = (LegendURLType)theEObject;
                T result = caseLegendURLType(legendURLType);
                if (result == null) result = caseOnlineResourceType(legendURLType);
                if (result == null) result = defaultCase(theEObject);
                return result;
            }
            case wmtsv_1Package.STYLE_TYPE: {
                StyleType styleType = (StyleType)theEObject;
                T result = caseStyleType(styleType);
                if (result == null) result = caseDescriptionType(styleType);
                if (result == null) result = defaultCase(theEObject);
                return result;
            }
            case wmtsv_1Package.TEXT_PAYLOAD_TYPE: {
                TextPayloadType textPayloadType = (TextPayloadType)theEObject;
                T result = caseTextPayloadType(textPayloadType);
                if (result == null) result = defaultCase(theEObject);
                return result;
            }
            case wmtsv_1Package.THEMES_TYPE: {
                ThemesType themesType = (ThemesType)theEObject;
                T result = caseThemesType(themesType);
                if (result == null) result = defaultCase(theEObject);
                return result;
            }
            case wmtsv_1Package.THEME_TYPE: {
                ThemeType themeType = (ThemeType)theEObject;
                T result = caseThemeType(themeType);
                if (result == null) result = caseDescriptionType(themeType);
                if (result == null) result = defaultCase(theEObject);
                return result;
            }
            case wmtsv_1Package.TILE_MATRIX_LIMITS_TYPE: {
                TileMatrixLimitsType tileMatrixLimitsType = (TileMatrixLimitsType)theEObject;
                T result = caseTileMatrixLimitsType(tileMatrixLimitsType);
                if (result == null) result = defaultCase(theEObject);
                return result;
            }
            case wmtsv_1Package.TILE_MATRIX_SET_LIMITS_TYPE: {
                TileMatrixSetLimitsType tileMatrixSetLimitsType = (TileMatrixSetLimitsType)theEObject;
                T result = caseTileMatrixSetLimitsType(tileMatrixSetLimitsType);
                if (result == null) result = defaultCase(theEObject);
                return result;
            }
            case wmtsv_1Package.TILE_MATRIX_SET_LINK_TYPE: {
                TileMatrixSetLinkType tileMatrixSetLinkType = (TileMatrixSetLinkType)theEObject;
                T result = caseTileMatrixSetLinkType(tileMatrixSetLinkType);
                if (result == null) result = defaultCase(theEObject);
                return result;
            }
            case wmtsv_1Package.TILE_MATRIX_SET_TYPE: {
                TileMatrixSetType tileMatrixSetType = (TileMatrixSetType)theEObject;
                T result = caseTileMatrixSetType(tileMatrixSetType);
                if (result == null) result = caseDescriptionType(tileMatrixSetType);
                if (result == null) result = defaultCase(theEObject);
                return result;
            }
            case wmtsv_1Package.TILE_MATRIX_TYPE: {
                TileMatrixType tileMatrixType = (TileMatrixType)theEObject;
                T result = caseTileMatrixType(tileMatrixType);
                if (result == null) result = caseDescriptionType(tileMatrixType);
                if (result == null) result = defaultCase(theEObject);
                return result;
            }
            case wmtsv_1Package.URL_TEMPLATE_TYPE: {
                URLTemplateType urlTemplateType = (URLTemplateType)theEObject;
                T result = caseURLTemplateType(urlTemplateType);
                if (result == null) result = defaultCase(theEObject);
                return result;
            }
            default: return defaultCase(theEObject);
        }
    }

