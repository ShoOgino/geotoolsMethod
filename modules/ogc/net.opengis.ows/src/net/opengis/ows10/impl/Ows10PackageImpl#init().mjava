	/**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link Ows10Package#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
	public static Ows10Package init() {
    if (isInited) return (Ows10Package)EPackage.Registry.INSTANCE.getEPackage(Ows10Package.eNS_URI);

    // Obtain or create and register package
    Object registeredOws10Package = EPackage.Registry.INSTANCE.get(eNS_URI);
    Ows10PackageImpl theOws10Package = registeredOws10Package instanceof Ows10PackageImpl ? (Ows10PackageImpl)registeredOws10Package : new Ows10PackageImpl();

    isInited = true;

    // Initialize simple dependencies
    XMLTypePackage.eINSTANCE.eClass();
    EcorePackage.eINSTANCE.eClass();

    // Create package meta-data objects
    theOws10Package.createPackageContents();

    // Initialize created meta-data
    theOws10Package.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theOws10Package.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(Ows10Package.eNS_URI, theOws10Package);
    return theOws10Package;
  }

