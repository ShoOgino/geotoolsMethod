  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject) {
    switch (classifierID) {
      case Ows20Package.ABSTRACT_REFERENCE_BASE_TYPE: {
        AbstractReferenceBaseType abstractReferenceBaseType = (AbstractReferenceBaseType)theEObject;
        T result = caseAbstractReferenceBaseType(abstractReferenceBaseType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.ACCEPT_FORMATS_TYPE: {
        AcceptFormatsType acceptFormatsType = (AcceptFormatsType)theEObject;
        T result = caseAcceptFormatsType(acceptFormatsType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.ACCEPT_LANGUAGES_TYPE: {
        AcceptLanguagesType acceptLanguagesType = (AcceptLanguagesType)theEObject;
        T result = caseAcceptLanguagesType(acceptLanguagesType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.ACCEPT_VERSIONS_TYPE: {
        AcceptVersionsType acceptVersionsType = (AcceptVersionsType)theEObject;
        T result = caseAcceptVersionsType(acceptVersionsType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.ADDITIONAL_PARAMETERS_BASE_TYPE: {
        AdditionalParametersBaseType additionalParametersBaseType = (AdditionalParametersBaseType)theEObject;
        T result = caseAdditionalParametersBaseType(additionalParametersBaseType);
        if (result == null) result = caseMetadataType(additionalParametersBaseType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.ADDITIONAL_PARAMETERS_TYPE: {
        AdditionalParametersType additionalParametersType = (AdditionalParametersType)theEObject;
        T result = caseAdditionalParametersType(additionalParametersType);
        if (result == null) result = caseAdditionalParametersBaseType(additionalParametersType);
        if (result == null) result = caseMetadataType(additionalParametersType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.ADDITIONAL_PARAMETER_TYPE: {
        AdditionalParameterType additionalParameterType = (AdditionalParameterType)theEObject;
        T result = caseAdditionalParameterType(additionalParameterType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.ADDRESS_TYPE: {
        AddressType addressType = (AddressType)theEObject;
        T result = caseAddressType(addressType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.ALLOWED_VALUES_TYPE: {
        AllowedValuesType allowedValuesType = (AllowedValuesType)theEObject;
        T result = caseAllowedValuesType(allowedValuesType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.ANY_VALUE_TYPE: {
        AnyValueType anyValueType = (AnyValueType)theEObject;
        T result = caseAnyValueType(anyValueType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.BASIC_IDENTIFICATION_TYPE: {
        BasicIdentificationType basicIdentificationType = (BasicIdentificationType)theEObject;
        T result = caseBasicIdentificationType(basicIdentificationType);
        if (result == null) result = caseDescriptionType(basicIdentificationType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.BOUNDING_BOX_TYPE: {
        BoundingBoxType boundingBoxType = (BoundingBoxType)theEObject;
        T result = caseBoundingBoxType(boundingBoxType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.CAPABILITIES_BASE_TYPE: {
        CapabilitiesBaseType capabilitiesBaseType = (CapabilitiesBaseType)theEObject;
        T result = caseCapabilitiesBaseType(capabilitiesBaseType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.CODE_TYPE: {
        CodeType codeType = (CodeType)theEObject;
        T result = caseCodeType(codeType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.CONTACT_TYPE: {
        ContactType contactType = (ContactType)theEObject;
        T result = caseContactType(contactType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.CONTENTS_BASE_TYPE: {
        ContentsBaseType contentsBaseType = (ContentsBaseType)theEObject;
        T result = caseContentsBaseType(contentsBaseType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.DATASET_DESCRIPTION_SUMMARY_BASE_TYPE: {
        DatasetDescriptionSummaryBaseType datasetDescriptionSummaryBaseType = (DatasetDescriptionSummaryBaseType)theEObject;
        T result = caseDatasetDescriptionSummaryBaseType(datasetDescriptionSummaryBaseType);
        if (result == null) result = caseDescriptionType(datasetDescriptionSummaryBaseType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.DCP_TYPE: {
        DCPType dcpType = (DCPType)theEObject;
        T result = caseDCPType(dcpType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.DESCRIPTION_TYPE: {
        DescriptionType descriptionType = (DescriptionType)theEObject;
        T result = caseDescriptionType(descriptionType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.DOCUMENT_ROOT: {
        DocumentRoot documentRoot = (DocumentRoot)theEObject;
        T result = caseDocumentRoot(documentRoot);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.DOMAIN_METADATA_TYPE: {
        DomainMetadataType domainMetadataType = (DomainMetadataType)theEObject;
        T result = caseDomainMetadataType(domainMetadataType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.DOMAIN_TYPE: {
        DomainType domainType = (DomainType)theEObject;
        T result = caseDomainType(domainType);
        if (result == null) result = caseUnNamedDomainType(domainType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.EXCEPTION_REPORT_TYPE: {
        ExceptionReportType exceptionReportType = (ExceptionReportType)theEObject;
        T result = caseExceptionReportType(exceptionReportType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.EXCEPTION_TYPE: {
        ExceptionType exceptionType = (ExceptionType)theEObject;
        T result = caseExceptionType(exceptionType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.GET_CAPABILITIES_TYPE: {
        GetCapabilitiesType getCapabilitiesType = (GetCapabilitiesType)theEObject;
        T result = caseGetCapabilitiesType(getCapabilitiesType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.GET_RESOURCE_BY_ID_TYPE: {
        GetResourceByIdType getResourceByIdType = (GetResourceByIdType)theEObject;
        T result = caseGetResourceByIdType(getResourceByIdType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.HTTP_TYPE: {
        HTTPType httpType = (HTTPType)theEObject;
        T result = caseHTTPType(httpType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.IDENTIFICATION_TYPE: {
        IdentificationType identificationType = (IdentificationType)theEObject;
        T result = caseIdentificationType(identificationType);
        if (result == null) result = caseBasicIdentificationType(identificationType);
        if (result == null) result = caseDescriptionType(identificationType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.KEYWORDS_TYPE: {
        KeywordsType keywordsType = (KeywordsType)theEObject;
        T result = caseKeywordsType(keywordsType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.LANGUAGE_STRING_TYPE: {
        LanguageStringType languageStringType = (LanguageStringType)theEObject;
        T result = caseLanguageStringType(languageStringType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.LANGUAGES_TYPE: {
        LanguagesType languagesType = (LanguagesType)theEObject;
        T result = caseLanguagesType(languagesType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.MANIFEST_TYPE: {
        ManifestType manifestType = (ManifestType)theEObject;
        T result = caseManifestType(manifestType);
        if (result == null) result = caseBasicIdentificationType(manifestType);
        if (result == null) result = caseDescriptionType(manifestType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.METADATA_TYPE: {
        MetadataType metadataType = (MetadataType)theEObject;
        T result = caseMetadataType(metadataType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.NIL_VALUE_TYPE: {
        NilValueType nilValueType = (NilValueType)theEObject;
        T result = caseNilValueType(nilValueType);
        if (result == null) result = caseCodeType(nilValueType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.NO_VALUES_TYPE: {
        NoValuesType noValuesType = (NoValuesType)theEObject;
        T result = caseNoValuesType(noValuesType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.ONLINE_RESOURCE_TYPE: {
        OnlineResourceType onlineResourceType = (OnlineResourceType)theEObject;
        T result = caseOnlineResourceType(onlineResourceType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.OPERATIONS_METADATA_TYPE: {
        OperationsMetadataType operationsMetadataType = (OperationsMetadataType)theEObject;
        T result = caseOperationsMetadataType(operationsMetadataType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.OPERATION_TYPE: {
        OperationType operationType = (OperationType)theEObject;
        T result = caseOperationType(operationType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.RANGE_TYPE: {
        RangeType rangeType = (RangeType)theEObject;
        T result = caseRangeType(rangeType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.REFERENCE_GROUP_TYPE: {
        ReferenceGroupType referenceGroupType = (ReferenceGroupType)theEObject;
        T result = caseReferenceGroupType(referenceGroupType);
        if (result == null) result = caseBasicIdentificationType(referenceGroupType);
        if (result == null) result = caseDescriptionType(referenceGroupType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.REFERENCE_TYPE: {
        ReferenceType referenceType = (ReferenceType)theEObject;
        T result = caseReferenceType(referenceType);
        if (result == null) result = caseAbstractReferenceBaseType(referenceType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.REQUEST_METHOD_TYPE: {
        RequestMethodType requestMethodType = (RequestMethodType)theEObject;
        T result = caseRequestMethodType(requestMethodType);
        if (result == null) result = caseOnlineResourceType(requestMethodType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.RESPONSIBLE_PARTY_SUBSET_TYPE: {
        ResponsiblePartySubsetType responsiblePartySubsetType = (ResponsiblePartySubsetType)theEObject;
        T result = caseResponsiblePartySubsetType(responsiblePartySubsetType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.RESPONSIBLE_PARTY_TYPE: {
        ResponsiblePartyType responsiblePartyType = (ResponsiblePartyType)theEObject;
        T result = caseResponsiblePartyType(responsiblePartyType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.SECTIONS_TYPE: {
        SectionsType sectionsType = (SectionsType)theEObject;
        T result = caseSectionsType(sectionsType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.SERVICE_IDENTIFICATION_TYPE: {
        ServiceIdentificationType serviceIdentificationType = (ServiceIdentificationType)theEObject;
        T result = caseServiceIdentificationType(serviceIdentificationType);
        if (result == null) result = caseDescriptionType(serviceIdentificationType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.SERVICE_PROVIDER_TYPE: {
        ServiceProviderType serviceProviderType = (ServiceProviderType)theEObject;
        T result = caseServiceProviderType(serviceProviderType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.SERVICE_REFERENCE_TYPE: {
        ServiceReferenceType serviceReferenceType = (ServiceReferenceType)theEObject;
        T result = caseServiceReferenceType(serviceReferenceType);
        if (result == null) result = caseReferenceType(serviceReferenceType);
        if (result == null) result = caseAbstractReferenceBaseType(serviceReferenceType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.TELEPHONE_TYPE: {
        TelephoneType telephoneType = (TelephoneType)theEObject;
        T result = caseTelephoneType(telephoneType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.UN_NAMED_DOMAIN_TYPE: {
        UnNamedDomainType unNamedDomainType = (UnNamedDomainType)theEObject;
        T result = caseUnNamedDomainType(unNamedDomainType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.VALUES_REFERENCE_TYPE: {
        ValuesReferenceType valuesReferenceType = (ValuesReferenceType)theEObject;
        T result = caseValuesReferenceType(valuesReferenceType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.VALUE_TYPE: {
        ValueType valueType = (ValueType)theEObject;
        T result = caseValueType(valueType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case Ows20Package.WGS84_BOUNDING_BOX_TYPE: {
        WGS84BoundingBoxType wgs84BoundingBoxType = (WGS84BoundingBoxType)theEObject;
        T result = caseWGS84BoundingBoxType(wgs84BoundingBoxType);
        if (result == null) result = caseBoundingBoxType(wgs84BoundingBoxType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

