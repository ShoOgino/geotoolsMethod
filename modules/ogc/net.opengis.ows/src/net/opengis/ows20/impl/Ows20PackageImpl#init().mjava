    /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link Ows20Package#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
    public static Ows20Package init() {
    if (isInited) return (Ows20Package)EPackage.Registry.INSTANCE.getEPackage(Ows20Package.eNS_URI);

    // Obtain or create and register package
    Object registeredOws20Package = EPackage.Registry.INSTANCE.get(eNS_URI);
    Ows20PackageImpl theOws20Package = registeredOws20Package instanceof Ows20PackageImpl ? (Ows20PackageImpl)registeredOws20Package : new Ows20PackageImpl();

    isInited = true;

    // Initialize simple dependencies
    XMLTypePackage.eINSTANCE.eClass();
    EcorePackage.eINSTANCE.eClass();
    XMLNamespacePackage.eINSTANCE.eClass();

    // Create package meta-data objects
    theOws20Package.createPackageContents();

    // Initialize created meta-data
    theOws20Package.initializePackageContents();

    // Register package validator
    EValidator.Registry.INSTANCE.put
      (theOws20Package,
       new EValidator.Descriptor() {
         @Override
        public EValidator getEValidator() {
           return Ows20Validator.INSTANCE;
         }
       });

    // Mark meta-data to indicate it can't be changed
    theOws20Package.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(Ows20Package.eNS_URI, theOws20Package);
    return theOws20Package;
  }

