	/**
	 * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
	 * 
	 * <p>This method is used to initialize {@link Wcs11Package#eINSTANCE} when that field is accessed.
	 * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #eNS_URI
	 * @see #createPackageContents()
	 * @see #initializePackageContents()
	 * @generated
	 */
	public static Wcs11Package init() {
		if (isInited) return (Wcs11Package)EPackage.Registry.INSTANCE.getEPackage(Wcs11Package.eNS_URI);

		// Obtain or create and register package
		Wcs11PackageImpl theWcs11Package = (Wcs11PackageImpl)(EPackage.Registry.INSTANCE.get(eNS_URI) instanceof Wcs11PackageImpl ? EPackage.Registry.INSTANCE.get(eNS_URI) : new Wcs11PackageImpl());

		isInited = true;

		// Initialize simple dependencies
		XlinkPackage.eINSTANCE.eClass();
		Ows11Package.eINSTANCE.eClass();

		// Create package meta-data objects
		theWcs11Package.createPackageContents();

		// Initialize created meta-data
		theWcs11Package.initializePackageContents();

		// Register package validator
		EValidator.Registry.INSTANCE.put
			(theWcs11Package, 
			 new EValidator.Descriptor() {
				 public EValidator getEValidator() {
					 return Wcs11Validator.INSTANCE;
				 }
			 });

		// Mark meta-data to indicate it can't be changed
		theWcs11Package.freeze();

  
		// Update the registry and return the package
		EPackage.Registry.INSTANCE.put(Wcs11Package.eNS_URI, theWcs11Package);
		return theWcs11Package;
	}

