    /**
	 * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
	 * 
	 * <p>This method is used to initialize {@link Wcs10Package#eINSTANCE} when that field is accessed.
	 * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
	 * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
	 * @see #eNS_URI
	 * @see #createPackageContents()
	 * @see #initializePackageContents()
	 * @generated
	 */
    public static Wcs10Package init() {
		if (isInited) return (Wcs10Package)EPackage.Registry.INSTANCE.getEPackage(Wcs10Package.eNS_URI);

		// Obtain or create and register package
		Wcs10PackageImpl theWcs10Package = (Wcs10PackageImpl)(EPackage.Registry.INSTANCE.get(eNS_URI) instanceof Wcs10PackageImpl ? EPackage.Registry.INSTANCE.get(eNS_URI) : new Wcs10PackageImpl());

		isInited = true;

		// Initialize simple dependencies
		XlinkPackage.eINSTANCE.eClass();
		Ows11Package.eINSTANCE.eClass();

		// Obtain or create and register interdependencies
		GmlPackageImpl theGmlPackage = (GmlPackageImpl)(EPackage.Registry.INSTANCE.getEPackage(GmlPackage.eNS_URI) instanceof GmlPackageImpl ? EPackage.Registry.INSTANCE.getEPackage(GmlPackage.eNS_URI) : GmlPackage.eINSTANCE);

		// Create package meta-data objects
		theWcs10Package.createPackageContents();
		theGmlPackage.createPackageContents();

		// Initialize created meta-data
		theWcs10Package.initializePackageContents();
		theGmlPackage.initializePackageContents();

		// Mark meta-data to indicate it can't be changed
		theWcs10Package.freeze();

  
		// Update the registry and return the package
		EPackage.Registry.INSTANCE.put(Wcs10Package.eNS_URI, theWcs10Package);
		return theWcs10Package;
	}

