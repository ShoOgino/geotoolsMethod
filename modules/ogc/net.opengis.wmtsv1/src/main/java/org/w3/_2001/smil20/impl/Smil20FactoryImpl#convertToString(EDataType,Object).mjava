    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public String convertToString(EDataType eDataType, Object instanceValue) {
        switch (eDataType.getClassifierID()) {
            case Smil20Package.ACCUMULATE_TYPE:
                return convertAccumulateTypeToString(eDataType, instanceValue);
            case Smil20Package.ADDITIVE_TYPE:
                return convertAdditiveTypeToString(eDataType, instanceValue);
            case Smil20Package.ATTRIBUTE_TYPE_TYPE:
                return convertAttributeTypeTypeToString(eDataType, instanceValue);
            case Smil20Package.CALC_MODE_TYPE:
                return convertCalcModeTypeToString(eDataType, instanceValue);
            case Smil20Package.FILL_DEFAULT_TYPE:
                return convertFillDefaultTypeToString(eDataType, instanceValue);
            case Smil20Package.FILL_TIMING_ATTRS_TYPE:
                return convertFillTimingAttrsTypeToString(eDataType, instanceValue);
            case Smil20Package.RESTART_DEFAULT_TYPE:
                return convertRestartDefaultTypeToString(eDataType, instanceValue);
            case Smil20Package.RESTART_TIMING_TYPE:
                return convertRestartTimingTypeToString(eDataType, instanceValue);
            case Smil20Package.SYNC_BEHAVIOR_DEFAULT_TYPE:
                return convertSyncBehaviorDefaultTypeToString(eDataType, instanceValue);
            case Smil20Package.SYNC_BEHAVIOR_TYPE:
                return convertSyncBehaviorTypeToString(eDataType, instanceValue);
            case Smil20Package.ACCUMULATE_TYPE_OBJECT:
                return convertAccumulateTypeObjectToString(eDataType, instanceValue);
            case Smil20Package.ADDITIVE_TYPE_OBJECT:
                return convertAdditiveTypeObjectToString(eDataType, instanceValue);
            case Smil20Package.ATTRIBUTE_TYPE_TYPE_OBJECT:
                return convertAttributeTypeTypeObjectToString(eDataType, instanceValue);
            case Smil20Package.CALC_MODE_TYPE_OBJECT:
                return convertCalcModeTypeObjectToString(eDataType, instanceValue);
            case Smil20Package.FILL_DEFAULT_TYPE_OBJECT:
                return convertFillDefaultTypeObjectToString(eDataType, instanceValue);
            case Smil20Package.FILL_TIMING_ATTRS_TYPE_OBJECT:
                return convertFillTimingAttrsTypeObjectToString(eDataType, instanceValue);
            case Smil20Package.NON_NEGATIVE_DECIMAL_TYPE:
                return convertNonNegativeDecimalTypeToString(eDataType, instanceValue);
            case Smil20Package.RESTART_DEFAULT_TYPE_OBJECT:
                return convertRestartDefaultTypeObjectToString(eDataType, instanceValue);
            case Smil20Package.RESTART_TIMING_TYPE_OBJECT:
                return convertRestartTimingTypeObjectToString(eDataType, instanceValue);
            case Smil20Package.SYNC_BEHAVIOR_DEFAULT_TYPE_OBJECT:
                return convertSyncBehaviorDefaultTypeObjectToString(eDataType, instanceValue);
            case Smil20Package.SYNC_BEHAVIOR_TYPE_OBJECT:
                return convertSyncBehaviorTypeObjectToString(eDataType, instanceValue);
            default:
                throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
        }
    }

