    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object createFromString(EDataType eDataType, String initialValue) {
        switch (eDataType.getClassifierID()) {
            case Smil20Package.ACCUMULATE_TYPE:
                return createAccumulateTypeFromString(eDataType, initialValue);
            case Smil20Package.ADDITIVE_TYPE:
                return createAdditiveTypeFromString(eDataType, initialValue);
            case Smil20Package.ATTRIBUTE_TYPE_TYPE:
                return createAttributeTypeTypeFromString(eDataType, initialValue);
            case Smil20Package.CALC_MODE_TYPE:
                return createCalcModeTypeFromString(eDataType, initialValue);
            case Smil20Package.FILL_DEFAULT_TYPE:
                return createFillDefaultTypeFromString(eDataType, initialValue);
            case Smil20Package.FILL_TIMING_ATTRS_TYPE:
                return createFillTimingAttrsTypeFromString(eDataType, initialValue);
            case Smil20Package.RESTART_DEFAULT_TYPE:
                return createRestartDefaultTypeFromString(eDataType, initialValue);
            case Smil20Package.RESTART_TIMING_TYPE:
                return createRestartTimingTypeFromString(eDataType, initialValue);
            case Smil20Package.SYNC_BEHAVIOR_DEFAULT_TYPE:
                return createSyncBehaviorDefaultTypeFromString(eDataType, initialValue);
            case Smil20Package.SYNC_BEHAVIOR_TYPE:
                return createSyncBehaviorTypeFromString(eDataType, initialValue);
            case Smil20Package.ACCUMULATE_TYPE_OBJECT:
                return createAccumulateTypeObjectFromString(eDataType, initialValue);
            case Smil20Package.ADDITIVE_TYPE_OBJECT:
                return createAdditiveTypeObjectFromString(eDataType, initialValue);
            case Smil20Package.ATTRIBUTE_TYPE_TYPE_OBJECT:
                return createAttributeTypeTypeObjectFromString(eDataType, initialValue);
            case Smil20Package.CALC_MODE_TYPE_OBJECT:
                return createCalcModeTypeObjectFromString(eDataType, initialValue);
            case Smil20Package.FILL_DEFAULT_TYPE_OBJECT:
                return createFillDefaultTypeObjectFromString(eDataType, initialValue);
            case Smil20Package.FILL_TIMING_ATTRS_TYPE_OBJECT:
                return createFillTimingAttrsTypeObjectFromString(eDataType, initialValue);
            case Smil20Package.NON_NEGATIVE_DECIMAL_TYPE:
                return createNonNegativeDecimalTypeFromString(eDataType, initialValue);
            case Smil20Package.RESTART_DEFAULT_TYPE_OBJECT:
                return createRestartDefaultTypeObjectFromString(eDataType, initialValue);
            case Smil20Package.RESTART_TIMING_TYPE_OBJECT:
                return createRestartTimingTypeObjectFromString(eDataType, initialValue);
            case Smil20Package.SYNC_BEHAVIOR_DEFAULT_TYPE_OBJECT:
                return createSyncBehaviorDefaultTypeObjectFromString(eDataType, initialValue);
            case Smil20Package.SYNC_BEHAVIOR_TYPE_OBJECT:
                return createSyncBehaviorTypeObjectFromString(eDataType, initialValue);
            default:
                throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
        }
    }

