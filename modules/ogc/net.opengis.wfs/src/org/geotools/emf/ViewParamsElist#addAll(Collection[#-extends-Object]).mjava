    @Override
    public boolean addAll(Collection<? extends Object> collection) {
        List<Map<String, String>> values;
        // if a raw string was passed in it will be wrapped in a Collections.SingletonList
        // instance.  This can't be detected because the SingletonList subclass has
        // private access, so instead detect this condition by looking for a list that has
        // a single element with a value of String instead of Map
        if (collection.size() == 1 && ((AbstractList) collection).get(0) instanceof String) {

            values = new ArrayList<Map<String, String>>();
            String raw = (String) ((AbstractList) collection).get(0);

            // split up the string and put it back in the superclass as an elist

            // split on ','
            String[] lists = raw.split(",");
            for (String list : lists) {
                HashMap m = new HashMap();
                values.add(m);
                // split on ';'
                String[] arg = list.split(";");
                for (String pair : arg) {
                    // split on ':'
                    String[] map = pair.split(":");
                    m.put(map[0], map[1]);
                }
            }
        } else {
            values = (List<Map<String, String>>) collection;
        }
        return super.addAll(values);
    }

