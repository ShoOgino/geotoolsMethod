    /**
     * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
     * 
     * <p>
     * This method is used to initialize {@link WfsPackage#eINSTANCE} when that field is accessed. Clients should not invoke it directly. Instead,
     * they should simply access that field to obtain the package. <!-- begin-user-doc --> <!-- end-user-doc -->
     * 
     * @see #eNS_URI
     * @see #createPackageContents()
     * @see #initializePackageContents()
     * @generated
     */
    public static WfsPackage init() {
        if (isInited)
            return (WfsPackage) EPackage.Registry.INSTANCE.getEPackage(WfsPackage.eNS_URI);

        // Obtain or create and register package
        WfsPackageImpl theWfsPackage = (WfsPackageImpl) (EPackage.Registry.INSTANCE.get(eNS_URI) instanceof WfsPackageImpl ? EPackage.Registry.INSTANCE
                .get(eNS_URI) : new WfsPackageImpl());

        isInited = true;

        // Initialize simple dependencies
        Ows10Package.eINSTANCE.eClass();
        Fes20Package.eINSTANCE.eClass();
        XlinkPackage.eINSTANCE.eClass();

        // Create package meta-data objects
        theWfsPackage.createPackageContents();

        // Initialize created meta-data
        theWfsPackage.initializePackageContents();

        // Mark meta-data to indicate it can't be changed
        theWfsPackage.freeze();

        // Update the registry and return the package
        EPackage.Registry.INSTANCE.put(WfsPackage.eNS_URI, theWfsPackage);
        return theWfsPackage;
    }

