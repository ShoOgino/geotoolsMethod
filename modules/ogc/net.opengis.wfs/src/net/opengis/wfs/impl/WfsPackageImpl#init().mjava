    /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link WfsPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
    public static WfsPackage init() {
    if (isInited) return (WfsPackage)EPackage.Registry.INSTANCE.getEPackage(WfsPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredWfsPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    WfsPackageImpl theWfsPackage = registeredWfsPackage instanceof WfsPackageImpl ? (WfsPackageImpl)registeredWfsPackage : new WfsPackageImpl();

    isInited = true;

    // Initialize simple dependencies
    XMLTypePackage.eINSTANCE.eClass();
    EcorePackage.eINSTANCE.eClass();
    Ows10Package.eINSTANCE.eClass();

    // Create package meta-data objects
    theWfsPackage.createPackageContents();

    // Initialize created meta-data
    theWfsPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theWfsPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(WfsPackage.eNS_URI, theWfsPackage);
    return theWfsPackage;
  }

