    /**
     * Validates the MemberTypes constraint of '<em>Spatial Operator Name Type</em>'.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public boolean validateSpatialOperatorNameType_MemberTypes(Object spatialOperatorNameType, DiagnosticChain diagnostics, Map<Object, Object> context) {
        if (diagnostics != null) {
            BasicDiagnostic tempDiagnostics = new BasicDiagnostic();
            if (Fes20Package.Literals.SPATIAL_OPERATOR_NAME_TYPE_MEMBER0.isInstance(spatialOperatorNameType)) {
                if (validateSpatialOperatorNameTypeMember0((SpatialOperatorNameTypeMember0)spatialOperatorNameType, tempDiagnostics, context)) return true;
            }
            if (Fes20Package.Literals.SPATIAL_OPERATOR_NAME_TYPE_MEMBER1.isInstance(spatialOperatorNameType)) {
                if (validateSpatialOperatorNameTypeMember1((String)spatialOperatorNameType, tempDiagnostics, context)) return true;
            }
            for (Diagnostic diagnostic : tempDiagnostics.getChildren()) {
                diagnostics.add(diagnostic);
            }
        }
        else {
            if (Fes20Package.Literals.SPATIAL_OPERATOR_NAME_TYPE_MEMBER0.isInstance(spatialOperatorNameType)) {
                if (validateSpatialOperatorNameTypeMember0((SpatialOperatorNameTypeMember0)spatialOperatorNameType, null, context)) return true;
            }
            if (Fes20Package.Literals.SPATIAL_OPERATOR_NAME_TYPE_MEMBER1.isInstance(spatialOperatorNameType)) {
                if (validateSpatialOperatorNameTypeMember1((String)spatialOperatorNameType, null, context)) return true;
            }
        }
        return false;
    }

