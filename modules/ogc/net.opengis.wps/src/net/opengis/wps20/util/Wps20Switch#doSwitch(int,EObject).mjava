	/**
	 * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the first non-null result returned by a <code>caseXXX</code> call.
	 * @generated
	 */
	@Override
	protected T doSwitch(int classifierID, EObject theEObject) {
		switch (classifierID) {
			case Wps20Package.BODY_REFERENCE_TYPE: {
				BodyReferenceType bodyReferenceType = (BodyReferenceType)theEObject;
				T result = caseBodyReferenceType(bodyReferenceType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.BOUNDING_BOX_DATA_TYPE: {
				BoundingBoxDataType boundingBoxDataType = (BoundingBoxDataType)theEObject;
				T result = caseBoundingBoxDataType(boundingBoxDataType);
				if (result == null) result = caseDataDescriptionType(boundingBoxDataType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.COMPLEX_DATA_TYPE: {
				ComplexDataType complexDataType = (ComplexDataType)theEObject;
				T result = caseComplexDataType(complexDataType);
				if (result == null) result = caseDataDescriptionType(complexDataType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.CONTENTS_TYPE: {
				ContentsType contentsType = (ContentsType)theEObject;
				T result = caseContentsType(contentsType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.DATA_DESCRIPTION_TYPE: {
				DataDescriptionType dataDescriptionType = (DataDescriptionType)theEObject;
				T result = caseDataDescriptionType(dataDescriptionType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.DATA_INPUT_TYPE: {
				DataInputType dataInputType = (DataInputType)theEObject;
				T result = caseDataInputType(dataInputType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.DATA_OUTPUT_TYPE: {
				DataOutputType dataOutputType = (DataOutputType)theEObject;
				T result = caseDataOutputType(dataOutputType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.DATA_TYPE: {
				DataType dataType = (DataType)theEObject;
				T result = caseDataType(dataType);
				if (result == null) result = caseAnyType(dataType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.DESCRIBE_PROCESS_TYPE: {
				DescribeProcessType describeProcessType = (DescribeProcessType)theEObject;
				T result = caseDescribeProcessType(describeProcessType);
				if (result == null) result = caseRequestBaseType(describeProcessType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.DESCRIPTION_TYPE: {
				DescriptionType descriptionType = (DescriptionType)theEObject;
				T result = caseDescriptionType(descriptionType);
				if (result == null) result = caseBasicIdentificationType(descriptionType);
				if (result == null) result = caseOws20_DescriptionType(descriptionType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.DISMISS_TYPE: {
				DismissType dismissType = (DismissType)theEObject;
				T result = caseDismissType(dismissType);
				if (result == null) result = caseRequestBaseType(dismissType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.DOCUMENT_ROOT: {
				DocumentRoot documentRoot = (DocumentRoot)theEObject;
				T result = caseDocumentRoot(documentRoot);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.EXECUTE_REQUEST_TYPE: {
				ExecuteRequestType executeRequestType = (ExecuteRequestType)theEObject;
				T result = caseExecuteRequestType(executeRequestType);
				if (result == null) result = caseRequestBaseType(executeRequestType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.EXTENSION_TYPE: {
				ExtensionType extensionType = (ExtensionType)theEObject;
				T result = caseExtensionType(extensionType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.FORMAT_TYPE: {
				FormatType formatType = (FormatType)theEObject;
				T result = caseFormatType(formatType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.GENERIC_INPUT_TYPE: {
				GenericInputType genericInputType = (GenericInputType)theEObject;
				T result = caseGenericInputType(genericInputType);
				if (result == null) result = caseDescriptionType(genericInputType);
				if (result == null) result = caseBasicIdentificationType(genericInputType);
				if (result == null) result = caseOws20_DescriptionType(genericInputType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.GENERIC_OUTPUT_TYPE: {
				GenericOutputType genericOutputType = (GenericOutputType)theEObject;
				T result = caseGenericOutputType(genericOutputType);
				if (result == null) result = caseDescriptionType(genericOutputType);
				if (result == null) result = caseBasicIdentificationType(genericOutputType);
				if (result == null) result = caseOws20_DescriptionType(genericOutputType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.GENERIC_PROCESS_TYPE: {
				GenericProcessType genericProcessType = (GenericProcessType)theEObject;
				T result = caseGenericProcessType(genericProcessType);
				if (result == null) result = caseDescriptionType(genericProcessType);
				if (result == null) result = caseBasicIdentificationType(genericProcessType);
				if (result == null) result = caseOws20_DescriptionType(genericProcessType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.GET_CAPABILITIES_TYPE: {
				GetCapabilitiesType getCapabilitiesType = (GetCapabilitiesType)theEObject;
				T result = caseGetCapabilitiesType(getCapabilitiesType);
				if (result == null) result = caseOws20_GetCapabilitiesType(getCapabilitiesType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.GET_RESULT_TYPE: {
				GetResultType getResultType = (GetResultType)theEObject;
				T result = caseGetResultType(getResultType);
				if (result == null) result = caseRequestBaseType(getResultType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.GET_STATUS_TYPE: {
				GetStatusType getStatusType = (GetStatusType)theEObject;
				T result = caseGetStatusType(getStatusType);
				if (result == null) result = caseRequestBaseType(getStatusType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.INPUT_DESCRIPTION_TYPE: {
				InputDescriptionType inputDescriptionType = (InputDescriptionType)theEObject;
				T result = caseInputDescriptionType(inputDescriptionType);
				if (result == null) result = caseDescriptionType(inputDescriptionType);
				if (result == null) result = caseBasicIdentificationType(inputDescriptionType);
				if (result == null) result = caseOws20_DescriptionType(inputDescriptionType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.LITERAL_DATA_DOMAIN_TYPE: {
				LiteralDataDomainType literalDataDomainType = (LiteralDataDomainType)theEObject;
				T result = caseLiteralDataDomainType(literalDataDomainType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.LITERAL_DATA_DOMAIN_TYPE1: {
				LiteralDataDomainType1 literalDataDomainType1 = (LiteralDataDomainType1)theEObject;
				T result = caseLiteralDataDomainType1(literalDataDomainType1);
				if (result == null) result = caseLiteralDataDomainType(literalDataDomainType1);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.LITERAL_DATA_TYPE: {
				LiteralDataType literalDataType = (LiteralDataType)theEObject;
				T result = caseLiteralDataType(literalDataType);
				if (result == null) result = caseDataDescriptionType(literalDataType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.LITERAL_VALUE_TYPE: {
				LiteralValueType literalValueType = (LiteralValueType)theEObject;
				T result = caseLiteralValueType(literalValueType);
				if (result == null) result = caseValueType(literalValueType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.OUTPUT_DEFINITION_TYPE: {
				OutputDefinitionType outputDefinitionType = (OutputDefinitionType)theEObject;
				T result = caseOutputDefinitionType(outputDefinitionType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.OUTPUT_DESCRIPTION_TYPE: {
				OutputDescriptionType outputDescriptionType = (OutputDescriptionType)theEObject;
				T result = caseOutputDescriptionType(outputDescriptionType);
				if (result == null) result = caseDescriptionType(outputDescriptionType);
				if (result == null) result = caseBasicIdentificationType(outputDescriptionType);
				if (result == null) result = caseOws20_DescriptionType(outputDescriptionType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.PROCESS_DESCRIPTION_TYPE: {
				ProcessDescriptionType processDescriptionType = (ProcessDescriptionType)theEObject;
				T result = caseProcessDescriptionType(processDescriptionType);
				if (result == null) result = caseDescriptionType(processDescriptionType);
				if (result == null) result = caseBasicIdentificationType(processDescriptionType);
				if (result == null) result = caseOws20_DescriptionType(processDescriptionType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.PROCESS_OFFERINGS_TYPE: {
				ProcessOfferingsType processOfferingsType = (ProcessOfferingsType)theEObject;
				T result = caseProcessOfferingsType(processOfferingsType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.PROCESS_OFFERING_TYPE: {
				ProcessOfferingType processOfferingType = (ProcessOfferingType)theEObject;
				T result = caseProcessOfferingType(processOfferingType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.PROCESS_SUMMARY_TYPE: {
				ProcessSummaryType processSummaryType = (ProcessSummaryType)theEObject;
				T result = caseProcessSummaryType(processSummaryType);
				if (result == null) result = caseDescriptionType(processSummaryType);
				if (result == null) result = caseBasicIdentificationType(processSummaryType);
				if (result == null) result = caseOws20_DescriptionType(processSummaryType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.REFERENCE_TYPE: {
				ReferenceType referenceType = (ReferenceType)theEObject;
				T result = caseReferenceType(referenceType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.REQUEST_BASE_TYPE: {
				RequestBaseType requestBaseType = (RequestBaseType)theEObject;
				T result = caseRequestBaseType(requestBaseType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.RESULT_TYPE: {
				ResultType resultType = (ResultType)theEObject;
				T result = caseResultType(resultType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.STATUS_INFO_TYPE: {
				StatusInfoType statusInfoType = (StatusInfoType)theEObject;
				T result = caseStatusInfoType(statusInfoType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.SUPPORTED_CRS_TYPE: {
				SupportedCRSType supportedCRSType = (SupportedCRSType)theEObject;
				T result = caseSupportedCRSType(supportedCRSType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case Wps20Package.WPS_CAPABILITIES_TYPE: {
				WPSCapabilitiesType wpsCapabilitiesType = (WPSCapabilitiesType)theEObject;
				T result = caseWPSCapabilitiesType(wpsCapabilitiesType);
				if (result == null) result = caseCapabilitiesBaseType(wpsCapabilitiesType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			default: return defaultCase(theEObject);
		}
	}

