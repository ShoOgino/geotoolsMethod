	/**
	 * Creates the meta-model objects for the package.  This method is
	 * guarded to have no affect on any invocation but its first.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void createPackageContents() {
		if (isCreated) return;
		isCreated = true;

		// Create classes and their features
		bodyReferenceTypeEClass = createEClass(BODY_REFERENCE_TYPE);
		createEAttribute(bodyReferenceTypeEClass, BODY_REFERENCE_TYPE__HREF);

		boundingBoxDataTypeEClass = createEClass(BOUNDING_BOX_DATA_TYPE);
		createEReference(boundingBoxDataTypeEClass, BOUNDING_BOX_DATA_TYPE__SUPPORTED_CRS);

		complexDataTypeEClass = createEClass(COMPLEX_DATA_TYPE);
		createEAttribute(complexDataTypeEClass, COMPLEX_DATA_TYPE__ANY);

		contentsTypeEClass = createEClass(CONTENTS_TYPE);
		createEReference(contentsTypeEClass, CONTENTS_TYPE__PROCESS_SUMMARY);

		dataDescriptionTypeEClass = createEClass(DATA_DESCRIPTION_TYPE);
		createEReference(dataDescriptionTypeEClass, DATA_DESCRIPTION_TYPE__FORMAT);

		dataInputTypeEClass = createEClass(DATA_INPUT_TYPE);
		createEReference(dataInputTypeEClass, DATA_INPUT_TYPE__DATA);
		createEReference(dataInputTypeEClass, DATA_INPUT_TYPE__REFERENCE);
		createEReference(dataInputTypeEClass, DATA_INPUT_TYPE__INPUT);
		createEAttribute(dataInputTypeEClass, DATA_INPUT_TYPE__ID);

		dataOutputTypeEClass = createEClass(DATA_OUTPUT_TYPE);
		createEReference(dataOutputTypeEClass, DATA_OUTPUT_TYPE__DATA);
		createEReference(dataOutputTypeEClass, DATA_OUTPUT_TYPE__REFERENCE);
		createEReference(dataOutputTypeEClass, DATA_OUTPUT_TYPE__OUTPUT);
		createEAttribute(dataOutputTypeEClass, DATA_OUTPUT_TYPE__ID);

		dataTypeEClass = createEClass(DATA_TYPE);
		createEAttribute(dataTypeEClass, DATA_TYPE__ENCODING);
		createEAttribute(dataTypeEClass, DATA_TYPE__MIME_TYPE);
		createEAttribute(dataTypeEClass, DATA_TYPE__SCHEMA);

		describeProcessTypeEClass = createEClass(DESCRIBE_PROCESS_TYPE);
		createEReference(describeProcessTypeEClass, DESCRIBE_PROCESS_TYPE__IDENTIFIER);
		createEAttribute(describeProcessTypeEClass, DESCRIBE_PROCESS_TYPE__LANG);

		descriptionTypeEClass = createEClass(DESCRIPTION_TYPE);

		dismissTypeEClass = createEClass(DISMISS_TYPE);
		createEAttribute(dismissTypeEClass, DISMISS_TYPE__JOB_ID);

		documentRootEClass = createEClass(DOCUMENT_ROOT);
		createEAttribute(documentRootEClass, DOCUMENT_ROOT__MIXED);
		createEReference(documentRootEClass, DOCUMENT_ROOT__XMLNS_PREFIX_MAP);
		createEReference(documentRootEClass, DOCUMENT_ROOT__XSI_SCHEMA_LOCATION);
		createEReference(documentRootEClass, DOCUMENT_ROOT__BOUNDING_BOX_DATA);
		createEReference(documentRootEClass, DOCUMENT_ROOT__DATA_DESCRIPTION);
		createEReference(documentRootEClass, DOCUMENT_ROOT__CAPABILITIES);
		createEReference(documentRootEClass, DOCUMENT_ROOT__COMPLEX_DATA);
		createEReference(documentRootEClass, DOCUMENT_ROOT__CONTENTS);
		createEReference(documentRootEClass, DOCUMENT_ROOT__DATA);
		createEReference(documentRootEClass, DOCUMENT_ROOT__DESCRIBE_PROCESS);
		createEReference(documentRootEClass, DOCUMENT_ROOT__DISMISS);
		createEReference(documentRootEClass, DOCUMENT_ROOT__EXECUTE);
		createEAttribute(documentRootEClass, DOCUMENT_ROOT__EXPIRATION_DATE);
		createEReference(documentRootEClass, DOCUMENT_ROOT__FORMAT);
		createEReference(documentRootEClass, DOCUMENT_ROOT__GENERIC_PROCESS);
		createEReference(documentRootEClass, DOCUMENT_ROOT__GET_CAPABILITIES);
		createEReference(documentRootEClass, DOCUMENT_ROOT__GET_RESULT);
		createEReference(documentRootEClass, DOCUMENT_ROOT__GET_STATUS);
		createEAttribute(documentRootEClass, DOCUMENT_ROOT__JOB_ID);
		createEReference(documentRootEClass, DOCUMENT_ROOT__LITERAL_DATA);
		createEReference(documentRootEClass, DOCUMENT_ROOT__LITERAL_VALUE);
		createEReference(documentRootEClass, DOCUMENT_ROOT__PROCESS);
		createEReference(documentRootEClass, DOCUMENT_ROOT__PROCESS_OFFERING);
		createEReference(documentRootEClass, DOCUMENT_ROOT__PROCESS_OFFERINGS);
		createEReference(documentRootEClass, DOCUMENT_ROOT__REFERENCE);
		createEReference(documentRootEClass, DOCUMENT_ROOT__RESULT);
		createEReference(documentRootEClass, DOCUMENT_ROOT__STATUS_INFO);
		createEReference(documentRootEClass, DOCUMENT_ROOT__SUPPORTED_CRS);

		executeRequestTypeEClass = createEClass(EXECUTE_REQUEST_TYPE);
		createEReference(executeRequestTypeEClass, EXECUTE_REQUEST_TYPE__IDENTIFIER);
		createEReference(executeRequestTypeEClass, EXECUTE_REQUEST_TYPE__INPUT);
		createEReference(executeRequestTypeEClass, EXECUTE_REQUEST_TYPE__OUTPUT);
		createEAttribute(executeRequestTypeEClass, EXECUTE_REQUEST_TYPE__MODE);
		createEAttribute(executeRequestTypeEClass, EXECUTE_REQUEST_TYPE__RESPONSE);

		extensionTypeEClass = createEClass(EXTENSION_TYPE);
		createEAttribute(extensionTypeEClass, EXTENSION_TYPE__ANY);

		formatTypeEClass = createEClass(FORMAT_TYPE);
		createEAttribute(formatTypeEClass, FORMAT_TYPE__DEFAULT);
		createEAttribute(formatTypeEClass, FORMAT_TYPE__ENCODING);
		createEAttribute(formatTypeEClass, FORMAT_TYPE__MAXIMUM_MEGABYTES);
		createEAttribute(formatTypeEClass, FORMAT_TYPE__MIME_TYPE);
		createEAttribute(formatTypeEClass, FORMAT_TYPE__SCHEMA);

		genericInputTypeEClass = createEClass(GENERIC_INPUT_TYPE);
		createEReference(genericInputTypeEClass, GENERIC_INPUT_TYPE__INPUT);
		createEAttribute(genericInputTypeEClass, GENERIC_INPUT_TYPE__MAX_OCCURS);
		createEAttribute(genericInputTypeEClass, GENERIC_INPUT_TYPE__MIN_OCCURS);

		genericOutputTypeEClass = createEClass(GENERIC_OUTPUT_TYPE);
		createEReference(genericOutputTypeEClass, GENERIC_OUTPUT_TYPE__OUTPUT);

		genericProcessTypeEClass = createEClass(GENERIC_PROCESS_TYPE);
		createEReference(genericProcessTypeEClass, GENERIC_PROCESS_TYPE__INPUT);
		createEReference(genericProcessTypeEClass, GENERIC_PROCESS_TYPE__OUTPUT);

		getCapabilitiesTypeEClass = createEClass(GET_CAPABILITIES_TYPE);
		createEAttribute(getCapabilitiesTypeEClass, GET_CAPABILITIES_TYPE__SERVICE);

		getResultTypeEClass = createEClass(GET_RESULT_TYPE);
		createEAttribute(getResultTypeEClass, GET_RESULT_TYPE__JOB_ID);

		getStatusTypeEClass = createEClass(GET_STATUS_TYPE);
		createEAttribute(getStatusTypeEClass, GET_STATUS_TYPE__JOB_ID);

		inputDescriptionTypeEClass = createEClass(INPUT_DESCRIPTION_TYPE);
		createEAttribute(inputDescriptionTypeEClass, INPUT_DESCRIPTION_TYPE__DATA_DESCRIPTION_GROUP);
		createEReference(inputDescriptionTypeEClass, INPUT_DESCRIPTION_TYPE__DATA_DESCRIPTION);
		createEReference(inputDescriptionTypeEClass, INPUT_DESCRIPTION_TYPE__INPUT);
		createEAttribute(inputDescriptionTypeEClass, INPUT_DESCRIPTION_TYPE__MAX_OCCURS);
		createEAttribute(inputDescriptionTypeEClass, INPUT_DESCRIPTION_TYPE__MIN_OCCURS);

		literalDataDomainTypeEClass = createEClass(LITERAL_DATA_DOMAIN_TYPE);
		createEReference(literalDataDomainTypeEClass, LITERAL_DATA_DOMAIN_TYPE__ALLOWED_VALUES);
		createEReference(literalDataDomainTypeEClass, LITERAL_DATA_DOMAIN_TYPE__ANY_VALUE);
		createEReference(literalDataDomainTypeEClass, LITERAL_DATA_DOMAIN_TYPE__VALUES_REFERENCE);
		createEReference(literalDataDomainTypeEClass, LITERAL_DATA_DOMAIN_TYPE__DATA_TYPE);
		createEReference(literalDataDomainTypeEClass, LITERAL_DATA_DOMAIN_TYPE__UOM);
		createEReference(literalDataDomainTypeEClass, LITERAL_DATA_DOMAIN_TYPE__DEFAULT_VALUE);

		literalDataDomainType1EClass = createEClass(LITERAL_DATA_DOMAIN_TYPE1);
		createEAttribute(literalDataDomainType1EClass, LITERAL_DATA_DOMAIN_TYPE1__DEFAULT);

		literalDataTypeEClass = createEClass(LITERAL_DATA_TYPE);
		createEReference(literalDataTypeEClass, LITERAL_DATA_TYPE__LITERAL_DATA_DOMAIN);

		literalValueTypeEClass = createEClass(LITERAL_VALUE_TYPE);
		createEAttribute(literalValueTypeEClass, LITERAL_VALUE_TYPE__DATA_TYPE);
		createEAttribute(literalValueTypeEClass, LITERAL_VALUE_TYPE__UOM);

		outputDefinitionTypeEClass = createEClass(OUTPUT_DEFINITION_TYPE);
		createEReference(outputDefinitionTypeEClass, OUTPUT_DEFINITION_TYPE__OUTPUT);
		createEAttribute(outputDefinitionTypeEClass, OUTPUT_DEFINITION_TYPE__ENCODING);
		createEAttribute(outputDefinitionTypeEClass, OUTPUT_DEFINITION_TYPE__ID);
		createEAttribute(outputDefinitionTypeEClass, OUTPUT_DEFINITION_TYPE__MIME_TYPE);
		createEAttribute(outputDefinitionTypeEClass, OUTPUT_DEFINITION_TYPE__SCHEMA);
		createEAttribute(outputDefinitionTypeEClass, OUTPUT_DEFINITION_TYPE__TRANSMISSION);

		outputDescriptionTypeEClass = createEClass(OUTPUT_DESCRIPTION_TYPE);
		createEAttribute(outputDescriptionTypeEClass, OUTPUT_DESCRIPTION_TYPE__DATA_DESCRIPTION_GROUP);
		createEReference(outputDescriptionTypeEClass, OUTPUT_DESCRIPTION_TYPE__DATA_DESCRIPTION);
		createEReference(outputDescriptionTypeEClass, OUTPUT_DESCRIPTION_TYPE__OUTPUT);

		processDescriptionTypeEClass = createEClass(PROCESS_DESCRIPTION_TYPE);
		createEReference(processDescriptionTypeEClass, PROCESS_DESCRIPTION_TYPE__INPUT);
		createEReference(processDescriptionTypeEClass, PROCESS_DESCRIPTION_TYPE__OUTPUT);
		createEAttribute(processDescriptionTypeEClass, PROCESS_DESCRIPTION_TYPE__LANG);

		processOfferingsTypeEClass = createEClass(PROCESS_OFFERINGS_TYPE);
		createEReference(processOfferingsTypeEClass, PROCESS_OFFERINGS_TYPE__PROCESS_OFFERING);

		processOfferingTypeEClass = createEClass(PROCESS_OFFERING_TYPE);
		createEReference(processOfferingTypeEClass, PROCESS_OFFERING_TYPE__PROCESS);
		createEAttribute(processOfferingTypeEClass, PROCESS_OFFERING_TYPE__ANY);
		createEAttribute(processOfferingTypeEClass, PROCESS_OFFERING_TYPE__JOB_CONTROL_OPTIONS);
		createEAttribute(processOfferingTypeEClass, PROCESS_OFFERING_TYPE__OUTPUT_TRANSMISSION);
		createEAttribute(processOfferingTypeEClass, PROCESS_OFFERING_TYPE__PROCESS_MODEL);
		createEAttribute(processOfferingTypeEClass, PROCESS_OFFERING_TYPE__PROCESS_VERSION);

		processSummaryTypeEClass = createEClass(PROCESS_SUMMARY_TYPE);
		createEAttribute(processSummaryTypeEClass, PROCESS_SUMMARY_TYPE__JOB_CONTROL_OPTIONS);
		createEAttribute(processSummaryTypeEClass, PROCESS_SUMMARY_TYPE__OUTPUT_TRANSMISSION);
		createEAttribute(processSummaryTypeEClass, PROCESS_SUMMARY_TYPE__PROCESS_MODEL);
		createEAttribute(processSummaryTypeEClass, PROCESS_SUMMARY_TYPE__PROCESS_VERSION);

		referenceTypeEClass = createEClass(REFERENCE_TYPE);
		createEReference(referenceTypeEClass, REFERENCE_TYPE__BODY);
		createEReference(referenceTypeEClass, REFERENCE_TYPE__BODY_REFERENCE);
		createEAttribute(referenceTypeEClass, REFERENCE_TYPE__ENCODING);
		createEAttribute(referenceTypeEClass, REFERENCE_TYPE__HREF);
		createEAttribute(referenceTypeEClass, REFERENCE_TYPE__MIME_TYPE);
		createEAttribute(referenceTypeEClass, REFERENCE_TYPE__SCHEMA);

		requestBaseTypeEClass = createEClass(REQUEST_BASE_TYPE);
		createEReference(requestBaseTypeEClass, REQUEST_BASE_TYPE__EXTENSION);
		createEAttribute(requestBaseTypeEClass, REQUEST_BASE_TYPE__SERVICE);
		createEAttribute(requestBaseTypeEClass, REQUEST_BASE_TYPE__VERSION);

		resultTypeEClass = createEClass(RESULT_TYPE);
		createEAttribute(resultTypeEClass, RESULT_TYPE__JOB_ID);
		createEAttribute(resultTypeEClass, RESULT_TYPE__EXPIRATION_DATE);
		createEReference(resultTypeEClass, RESULT_TYPE__OUTPUT);

		statusInfoTypeEClass = createEClass(STATUS_INFO_TYPE);
		createEAttribute(statusInfoTypeEClass, STATUS_INFO_TYPE__JOB_ID);
		createEAttribute(statusInfoTypeEClass, STATUS_INFO_TYPE__STATUS);
		createEAttribute(statusInfoTypeEClass, STATUS_INFO_TYPE__EXPIRATION_DATE);
		createEAttribute(statusInfoTypeEClass, STATUS_INFO_TYPE__ESTIMATED_COMPLETION);
		createEAttribute(statusInfoTypeEClass, STATUS_INFO_TYPE__NEXT_POLL);
		createEAttribute(statusInfoTypeEClass, STATUS_INFO_TYPE__PERCENT_COMPLETED);

		supportedCRSTypeEClass = createEClass(SUPPORTED_CRS_TYPE);
		createEAttribute(supportedCRSTypeEClass, SUPPORTED_CRS_TYPE__VALUE);
		createEAttribute(supportedCRSTypeEClass, SUPPORTED_CRS_TYPE__DEFAULT);

		wpsCapabilitiesTypeEClass = createEClass(WPS_CAPABILITIES_TYPE);
		createEReference(wpsCapabilitiesTypeEClass, WPS_CAPABILITIES_TYPE__CONTENTS);
		createEReference(wpsCapabilitiesTypeEClass, WPS_CAPABILITIES_TYPE__EXTENSION);
		createEAttribute(wpsCapabilitiesTypeEClass, WPS_CAPABILITIES_TYPE__SERVICE);

		// Create enums
		dataTransmissionModeTypeEEnum = createEEnum(DATA_TRANSMISSION_MODE_TYPE);
		jobControlOptionsTypeMember0EEnum = createEEnum(JOB_CONTROL_OPTIONS_TYPE_MEMBER0);
		modeTypeEEnum = createEEnum(MODE_TYPE);
		responseTypeEEnum = createEEnum(RESPONSE_TYPE);
		statusTypeMember0EEnum = createEEnum(STATUS_TYPE_MEMBER0);

		// Create data types
		dataTransmissionModeTypeObjectEDataType = createEDataType(DATA_TRANSMISSION_MODE_TYPE_OBJECT);
		jobControlOptionsTypeEDataType = createEDataType(JOB_CONTROL_OPTIONS_TYPE);
		jobControlOptionsType1EDataType = createEDataType(JOB_CONTROL_OPTIONS_TYPE1);
		jobControlOptionsTypeMember0ObjectEDataType = createEDataType(JOB_CONTROL_OPTIONS_TYPE_MEMBER0_OBJECT);
		jobControlOptionsTypeMember1EDataType = createEDataType(JOB_CONTROL_OPTIONS_TYPE_MEMBER1);
		modeTypeObjectEDataType = createEDataType(MODE_TYPE_OBJECT);
		outputTransmissionTypeEDataType = createEDataType(OUTPUT_TRANSMISSION_TYPE);
		percentCompletedTypeEDataType = createEDataType(PERCENT_COMPLETED_TYPE);
		responseTypeObjectEDataType = createEDataType(RESPONSE_TYPE_OBJECT);
		statusTypeEDataType = createEDataType(STATUS_TYPE);
		statusTypeMember0ObjectEDataType = createEDataType(STATUS_TYPE_MEMBER0_OBJECT);
		statusTypeMember1EDataType = createEDataType(STATUS_TYPE_MEMBER1);
	}

