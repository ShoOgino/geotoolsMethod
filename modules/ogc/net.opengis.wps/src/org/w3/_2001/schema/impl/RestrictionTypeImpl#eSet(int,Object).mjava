	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case SchemaPackage.RESTRICTION_TYPE__GROUP:
				setGroup((GroupRef)newValue);
				return;
			case SchemaPackage.RESTRICTION_TYPE__ALL:
				setAll((All)newValue);
				return;
			case SchemaPackage.RESTRICTION_TYPE__CHOICE:
				setChoice((ExplicitGroup)newValue);
				return;
			case SchemaPackage.RESTRICTION_TYPE__SEQUENCE:
				setSequence((ExplicitGroup)newValue);
				return;
			case SchemaPackage.RESTRICTION_TYPE__SIMPLE_TYPE:
				setSimpleType((LocalSimpleType)newValue);
				return;
			case SchemaPackage.RESTRICTION_TYPE__FACETS:
				((FeatureMap.Internal)getFacets()).set(newValue);
				return;
			case SchemaPackage.RESTRICTION_TYPE__MIN_EXCLUSIVE:
				getMinExclusive().clear();
				getMinExclusive().addAll((Collection<? extends Facet>)newValue);
				return;
			case SchemaPackage.RESTRICTION_TYPE__MIN_INCLUSIVE:
				getMinInclusive().clear();
				getMinInclusive().addAll((Collection<? extends Facet>)newValue);
				return;
			case SchemaPackage.RESTRICTION_TYPE__MAX_EXCLUSIVE:
				getMaxExclusive().clear();
				getMaxExclusive().addAll((Collection<? extends Facet>)newValue);
				return;
			case SchemaPackage.RESTRICTION_TYPE__MAX_INCLUSIVE:
				getMaxInclusive().clear();
				getMaxInclusive().addAll((Collection<? extends Facet>)newValue);
				return;
			case SchemaPackage.RESTRICTION_TYPE__TOTAL_DIGITS:
				getTotalDigits().clear();
				getTotalDigits().addAll((Collection<? extends TotalDigitsType>)newValue);
				return;
			case SchemaPackage.RESTRICTION_TYPE__FRACTION_DIGITS:
				getFractionDigits().clear();
				getFractionDigits().addAll((Collection<? extends NumFacet>)newValue);
				return;
			case SchemaPackage.RESTRICTION_TYPE__LENGTH:
				getLength().clear();
				getLength().addAll((Collection<? extends NumFacet>)newValue);
				return;
			case SchemaPackage.RESTRICTION_TYPE__MIN_LENGTH:
				getMinLength().clear();
				getMinLength().addAll((Collection<? extends NumFacet>)newValue);
				return;
			case SchemaPackage.RESTRICTION_TYPE__MAX_LENGTH:
				getMaxLength().clear();
				getMaxLength().addAll((Collection<? extends NumFacet>)newValue);
				return;
			case SchemaPackage.RESTRICTION_TYPE__ENUMERATION:
				getEnumeration().clear();
				getEnumeration().addAll((Collection<? extends NoFixedFacet>)newValue);
				return;
			case SchemaPackage.RESTRICTION_TYPE__WHITE_SPACE:
				getWhiteSpace().clear();
				getWhiteSpace().addAll((Collection<? extends WhiteSpaceType>)newValue);
				return;
			case SchemaPackage.RESTRICTION_TYPE__PATTERN:
				getPattern().clear();
				getPattern().addAll((Collection<? extends PatternType>)newValue);
				return;
			case SchemaPackage.RESTRICTION_TYPE__GROUP1:
				((FeatureMap.Internal)getGroup1()).set(newValue);
				return;
			case SchemaPackage.RESTRICTION_TYPE__ATTRIBUTE:
				getAttribute().clear();
				getAttribute().addAll((Collection<? extends Attribute>)newValue);
				return;
			case SchemaPackage.RESTRICTION_TYPE__ATTRIBUTE_GROUP:
				getAttributeGroup().clear();
				getAttributeGroup().addAll((Collection<? extends AttributeGroupRef>)newValue);
				return;
			case SchemaPackage.RESTRICTION_TYPE__ANY_ATTRIBUTE1:
				setAnyAttribute1((Wildcard)newValue);
				return;
			case SchemaPackage.RESTRICTION_TYPE__BASE:
				setBase((QName)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

