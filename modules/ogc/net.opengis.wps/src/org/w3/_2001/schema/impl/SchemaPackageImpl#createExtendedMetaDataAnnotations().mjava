	/**
	 * Initializes the annotations for <b>http:///org/eclipse/emf/ecore/util/ExtendedMetaData</b>.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected void createExtendedMetaDataAnnotations() {
		String source = "http:///org/eclipse/emf/ecore/util/ExtendedMetaData";
		addAnnotation
		  (allEClass,
		   source,
		   new String[] {
			   "name", "all",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (allNNIEDataType,
		   source,
		   new String[] {
			   "name", "allNNI",
			   "memberTypes", "http://www.eclipse.org/emf/2003/XMLType#nonNegativeInteger allNNI_._member_._1"
		   });
		addAnnotation
		  (allNNIMember1EEnum,
		   source,
		   new String[] {
			   "name", "allNNI_._member_._1"
		   });
		addAnnotation
		  (allNNIMember1ObjectEDataType,
		   source,
		   new String[] {
			   "name", "allNNI_._member_._1:Object",
			   "baseType", "allNNI_._member_._1"
		   });
		addAnnotation
		  (annotatedEClass,
		   source,
		   new String[] {
			   "name", "annotated",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (getAnnotated_Annotation(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "annotation",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getAnnotated_Id(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "id"
		   });
		addAnnotation
		  (annotationTypeEClass,
		   source,
		   new String[] {
			   "name", "annotation_._type",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (getAnnotationType_Group(),
		   source,
		   new String[] {
			   "kind", "group",
			   "name", "group:1"
		   });
		addAnnotation
		  (getAnnotationType_Appinfo(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "appinfo",
			   "namespace", "##targetNamespace",
			   "group", "#group:1"
		   });
		addAnnotation
		  (getAnnotationType_Documentation(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "documentation",
			   "namespace", "##targetNamespace",
			   "group", "#group:1"
		   });
		addAnnotation
		  (getAnnotationType_Id(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "id"
		   });
		addAnnotation
		  (anyTypeEClass,
		   source,
		   new String[] {
			   "name", "any_._type",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (getAnyType_MaxOccurs(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "maxOccurs"
		   });
		addAnnotation
		  (getAnyType_MinOccurs(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "minOccurs"
		   });
		addAnnotation
		  (appinfoTypeEClass,
		   source,
		   new String[] {
			   "name", "appinfo_._type",
			   "kind", "mixed"
		   });
		addAnnotation
		  (getAppinfoType_Mixed(),
		   source,
		   new String[] {
			   "kind", "elementWildcard",
			   "name", ":mixed"
		   });
		addAnnotation
		  (getAppinfoType_Group(),
		   source,
		   new String[] {
			   "kind", "group",
			   "name", "group:1"
		   });
		addAnnotation
		  (getAppinfoType_Any(),
		   source,
		   new String[] {
			   "kind", "elementWildcard",
			   "wildcards", "##any",
			   "name", ":2",
			   "processing", "lax",
			   "group", "#group:1"
		   });
		addAnnotation
		  (getAppinfoType_Source(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "source"
		   });
		addAnnotation
		  (getAppinfoType_AnyAttribute(),
		   source,
		   new String[] {
			   "kind", "attributeWildcard",
			   "wildcards", "##other",
			   "name", ":4",
			   "processing", "lax"
		   });
		addAnnotation
		  (attributeEClass,
		   source,
		   new String[] {
			   "name", "attribute",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (getAttribute_SimpleType(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "simpleType",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getAttribute_Default(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "default"
		   });
		addAnnotation
		  (getAttribute_Fixed(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "fixed"
		   });
		addAnnotation
		  (getAttribute_Form(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "form"
		   });
		addAnnotation
		  (getAttribute_Name(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "name"
		   });
		addAnnotation
		  (getAttribute_Ref(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "ref"
		   });
		addAnnotation
		  (getAttribute_Type(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "type"
		   });
		addAnnotation
		  (getAttribute_Use(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "use"
		   });
		addAnnotation
		  (attributeGroupEClass,
		   source,
		   new String[] {
			   "name", "attributeGroup",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (getAttributeGroup_Group(),
		   source,
		   new String[] {
			   "kind", "group",
			   "name", "group:3"
		   });
		addAnnotation
		  (getAttributeGroup_Attribute(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "attribute",
			   "namespace", "##targetNamespace",
			   "group", "#group:3"
		   });
		addAnnotation
		  (getAttributeGroup_AttributeGroup(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "attributeGroup",
			   "namespace", "##targetNamespace",
			   "group", "#group:3"
		   });
		addAnnotation
		  (getAttributeGroup_AnyAttribute1(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "anyAttribute",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getAttributeGroup_Name(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "name"
		   });
		addAnnotation
		  (getAttributeGroup_Ref(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "ref"
		   });
		addAnnotation
		  (attributeGroupRefEClass,
		   source,
		   new String[] {
			   "name", "attributeGroupRef",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (blockSetEDataType,
		   source,
		   new String[] {
			   "name", "blockSet",
			   "memberTypes", "blockSet_._member_._0 blockSet_._member_._1"
		   });
		addAnnotation
		  (blockSetMember0EEnum,
		   source,
		   new String[] {
			   "name", "blockSet_._member_._0"
		   });
		addAnnotation
		  (blockSetMember0ObjectEDataType,
		   source,
		   new String[] {
			   "name", "blockSet_._member_._0:Object",
			   "baseType", "blockSet_._member_._0"
		   });
		addAnnotation
		  (blockSetMember1EDataType,
		   source,
		   new String[] {
			   "name", "blockSet_._member_._1",
			   "itemType", "blockSet_._member_._1_._item"
		   });
		addAnnotation
		  (blockSetMember1ItemEEnum,
		   source,
		   new String[] {
			   "name", "blockSet_._member_._1_._item"
		   });
		addAnnotation
		  (blockSetMember1ItemObjectEDataType,
		   source,
		   new String[] {
			   "name", "blockSet_._member_._1_._item:Object",
			   "baseType", "blockSet_._member_._1_._item"
		   });
		addAnnotation
		  (complexContentTypeEClass,
		   source,
		   new String[] {
			   "name", "complexContent_._type",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (getComplexContentType_Restriction(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "restriction",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getComplexContentType_Extension(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "extension",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getComplexContentType_Mixed(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "mixed"
		   });
		addAnnotation
		  (complexRestrictionTypeEClass,
		   source,
		   new String[] {
			   "name", "complexRestrictionType",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (complexTypeEClass,
		   source,
		   new String[] {
			   "name", "complexType",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (getComplexType_SimpleContent(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "simpleContent",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getComplexType_ComplexContent(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "complexContent",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getComplexType_Group(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "group",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getComplexType_All(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "all",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getComplexType_Choice(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "choice",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getComplexType_Sequence(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "sequence",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getComplexType_Group1(),
		   source,
		   new String[] {
			   "kind", "group",
			   "name", "group:9"
		   });
		addAnnotation
		  (getComplexType_Attribute(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "attribute",
			   "namespace", "##targetNamespace",
			   "group", "#group:9"
		   });
		addAnnotation
		  (getComplexType_AttributeGroup(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "attributeGroup",
			   "namespace", "##targetNamespace",
			   "group", "#group:9"
		   });
		addAnnotation
		  (getComplexType_AnyAttribute1(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "anyAttribute",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getComplexType_Abstract(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "abstract"
		   });
		addAnnotation
		  (getComplexType_Block(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "block"
		   });
		addAnnotation
		  (getComplexType_Final(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "final"
		   });
		addAnnotation
		  (getComplexType_Mixed(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "mixed"
		   });
		addAnnotation
		  (getComplexType_Name(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "name"
		   });
		addAnnotation
		  (derivationControlEEnum,
		   source,
		   new String[] {
			   "name", "derivationControl"
		   });
		addAnnotation
		  (derivationControlObjectEDataType,
		   source,
		   new String[] {
			   "name", "derivationControl:Object",
			   "baseType", "derivationControl"
		   });
		addAnnotation
		  (derivationSetEDataType,
		   source,
		   new String[] {
			   "name", "derivationSet",
			   "memberTypes", "derivationSet_._member_._0 derivationSet_._member_._1"
		   });
		addAnnotation
		  (derivationSetMember0EEnum,
		   source,
		   new String[] {
			   "name", "derivationSet_._member_._0"
		   });
		addAnnotation
		  (derivationSetMember0ObjectEDataType,
		   source,
		   new String[] {
			   "name", "derivationSet_._member_._0:Object",
			   "baseType", "derivationSet_._member_._0"
		   });
		addAnnotation
		  (derivationSetMember1EDataType,
		   source,
		   new String[] {
			   "name", "derivationSet_._member_._1",
			   "itemType", "reducedDerivationControl"
		   });
		addAnnotation
		  (documentationTypeEClass,
		   source,
		   new String[] {
			   "name", "documentation_._type",
			   "kind", "mixed"
		   });
		addAnnotation
		  (getDocumentationType_Mixed(),
		   source,
		   new String[] {
			   "kind", "elementWildcard",
			   "name", ":mixed"
		   });
		addAnnotation
		  (getDocumentationType_Group(),
		   source,
		   new String[] {
			   "kind", "group",
			   "name", "group:1"
		   });
		addAnnotation
		  (getDocumentationType_Any(),
		   source,
		   new String[] {
			   "kind", "elementWildcard",
			   "wildcards", "##any",
			   "name", ":2",
			   "processing", "lax",
			   "group", "#group:1"
		   });
		addAnnotation
		  (getDocumentationType_Lang(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "lang",
			   "namespace", "http://www.w3.org/XML/1998/namespace"
		   });
		addAnnotation
		  (getDocumentationType_Source(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "source"
		   });
		addAnnotation
		  (getDocumentationType_AnyAttribute(),
		   source,
		   new String[] {
			   "kind", "attributeWildcard",
			   "wildcards", "##other",
			   "name", ":5",
			   "processing", "lax"
		   });
		addAnnotation
		  (documentRootEClass,
		   source,
		   new String[] {
			   "name", "",
			   "kind", "mixed"
		   });
		addAnnotation
		  (getDocumentRoot_Mixed(),
		   source,
		   new String[] {
			   "kind", "elementWildcard",
			   "name", ":mixed"
		   });
		addAnnotation
		  (getDocumentRoot_XMLNSPrefixMap(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "xmlns:prefix"
		   });
		addAnnotation
		  (getDocumentRoot_XSISchemaLocation(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "xsi:schemaLocation"
		   });
		addAnnotation
		  (getDocumentRoot_All(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "all",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_Annotation(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "annotation",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_Any(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "any",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_AnyAttribute(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "anyAttribute",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_Appinfo(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "appinfo",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_Attribute(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "attribute",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_AttributeGroup(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "attributeGroup",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_Choice(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "choice",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_ComplexContent(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "complexContent",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_ComplexType(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "complexType",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_Documentation(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "documentation",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_Element(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "element",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_Enumeration(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "enumeration",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_Field(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "field",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_FractionDigits(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "fractionDigits",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_Group(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "group",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_Import(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "import",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_Include(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "include",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_Key(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "key",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_Keyref(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "keyref",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_Length(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "length",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_List(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "list",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_MaxExclusive(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "maxExclusive",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_MaxInclusive(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "maxInclusive",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_MaxLength(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "maxLength",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_MinExclusive(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "minExclusive",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_MinInclusive(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "minInclusive",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_MinLength(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "minLength",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_Notation(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "notation",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_Pattern(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "pattern",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_Redefine(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "redefine",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_Restriction(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "restriction",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_Schema(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "schema",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_Selector(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "selector",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_Sequence(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "sequence",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_SimpleContent(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "simpleContent",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_SimpleType(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "simpleType",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_TotalDigits(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "totalDigits",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_Union(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "union",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_Unique(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "unique",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getDocumentRoot_WhiteSpace(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "whiteSpace",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (elementEClass,
		   source,
		   new String[] {
			   "name", "element",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (getElement_SimpleType(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "simpleType",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getElement_ComplexType(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "complexType",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getElement_IdentityConstraint(),
		   source,
		   new String[] {
			   "kind", "group",
			   "name", "IdentityConstraint:5"
		   });
		addAnnotation
		  (getElement_Unique(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "unique",
			   "namespace", "##targetNamespace",
			   "group", "#IdentityConstraint:5"
		   });
		addAnnotation
		  (getElement_Key(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "key",
			   "namespace", "##targetNamespace",
			   "group", "#IdentityConstraint:5"
		   });
		addAnnotation
		  (getElement_Keyref(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "keyref",
			   "namespace", "##targetNamespace",
			   "group", "#IdentityConstraint:5"
		   });
		addAnnotation
		  (getElement_Abstract(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "abstract"
		   });
		addAnnotation
		  (getElement_Block(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "block"
		   });
		addAnnotation
		  (getElement_Default(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "default"
		   });
		addAnnotation
		  (getElement_Final(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "final"
		   });
		addAnnotation
		  (getElement_Fixed(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "fixed"
		   });
		addAnnotation
		  (getElement_Form(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "form"
		   });
		addAnnotation
		  (getElement_MaxOccurs(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "maxOccurs"
		   });
		addAnnotation
		  (getElement_MinOccurs(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "minOccurs"
		   });
		addAnnotation
		  (getElement_Name(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "name"
		   });
		addAnnotation
		  (getElement_Nillable(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "nillable"
		   });
		addAnnotation
		  (getElement_Ref(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "ref"
		   });
		addAnnotation
		  (getElement_SubstitutionGroup(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "substitutionGroup"
		   });
		addAnnotation
		  (getElement_Type(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "type"
		   });
		addAnnotation
		  (explicitGroupEClass,
		   source,
		   new String[] {
			   "name", "explicitGroup",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (extensionTypeEClass,
		   source,
		   new String[] {
			   "name", "extensionType",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (getExtensionType_Group(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "group",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getExtensionType_All(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "all",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getExtensionType_Choice(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "choice",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getExtensionType_Sequence(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "sequence",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getExtensionType_Group1(),
		   source,
		   new String[] {
			   "kind", "group",
			   "name", "group:7"
		   });
		addAnnotation
		  (getExtensionType_Attribute(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "attribute",
			   "namespace", "##targetNamespace",
			   "group", "#group:7"
		   });
		addAnnotation
		  (getExtensionType_AttributeGroup(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "attributeGroup",
			   "namespace", "##targetNamespace",
			   "group", "#group:7"
		   });
		addAnnotation
		  (getExtensionType_AnyAttribute1(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "anyAttribute",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getExtensionType_Base(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "base"
		   });
		addAnnotation
		  (facetEClass,
		   source,
		   new String[] {
			   "name", "facet",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (getFacet_Fixed(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "fixed"
		   });
		addAnnotation
		  (getFacet_Value(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "value"
		   });
		addAnnotation
		  (fieldTypeEClass,
		   source,
		   new String[] {
			   "name", "field_._type",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (getFieldType_Xpath(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "xpath"
		   });
		addAnnotation
		  (formChoiceEEnum,
		   source,
		   new String[] {
			   "name", "formChoice"
		   });
		addAnnotation
		  (formChoiceObjectEDataType,
		   source,
		   new String[] {
			   "name", "formChoice:Object",
			   "baseType", "formChoice"
		   });
		addAnnotation
		  (fullDerivationSetEDataType,
		   source,
		   new String[] {
			   "name", "fullDerivationSet",
			   "memberTypes", "fullDerivationSet_._member_._0 fullDerivationSet_._member_._1"
		   });
		addAnnotation
		  (fullDerivationSetMember0EEnum,
		   source,
		   new String[] {
			   "name", "fullDerivationSet_._member_._0"
		   });
		addAnnotation
		  (fullDerivationSetMember0ObjectEDataType,
		   source,
		   new String[] {
			   "name", "fullDerivationSet_._member_._0:Object",
			   "baseType", "fullDerivationSet_._member_._0"
		   });
		addAnnotation
		  (fullDerivationSetMember1EDataType,
		   source,
		   new String[] {
			   "name", "fullDerivationSet_._member_._1",
			   "itemType", "typeDerivationControl"
		   });
		addAnnotation
		  (groupEClass,
		   source,
		   new String[] {
			   "name", "group",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (getGroup_Particle(),
		   source,
		   new String[] {
			   "kind", "group",
			   "name", "Particle:3"
		   });
		addAnnotation
		  (getGroup_Element(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "element",
			   "namespace", "##targetNamespace",
			   "group", "#Particle:3"
		   });
		addAnnotation
		  (getGroup_Group(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "group",
			   "namespace", "##targetNamespace",
			   "group", "#Particle:3"
		   });
		addAnnotation
		  (getGroup_All(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "all",
			   "namespace", "##targetNamespace",
			   "group", "#Particle:3"
		   });
		addAnnotation
		  (getGroup_Choice(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "choice",
			   "namespace", "##targetNamespace",
			   "group", "#Particle:3"
		   });
		addAnnotation
		  (getGroup_Sequence(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "sequence",
			   "namespace", "##targetNamespace",
			   "group", "#Particle:3"
		   });
		addAnnotation
		  (getGroup_Any(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "any",
			   "namespace", "##targetNamespace",
			   "group", "#Particle:3"
		   });
		addAnnotation
		  (getGroup_MaxOccurs(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "maxOccurs"
		   });
		addAnnotation
		  (getGroup_MinOccurs(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "minOccurs"
		   });
		addAnnotation
		  (getGroup_Name(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "name"
		   });
		addAnnotation
		  (getGroup_Ref(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "ref"
		   });
		addAnnotation
		  (groupRefEClass,
		   source,
		   new String[] {
			   "name", "groupRef",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (importTypeEClass,
		   source,
		   new String[] {
			   "name", "import_._type",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (getImportType_Namespace(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "namespace"
		   });
		addAnnotation
		  (getImportType_SchemaLocation(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "schemaLocation"
		   });
		addAnnotation
		  (includeTypeEClass,
		   source,
		   new String[] {
			   "name", "include_._type",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (getIncludeType_SchemaLocation(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "schemaLocation"
		   });
		addAnnotation
		  (keybaseEClass,
		   source,
		   new String[] {
			   "name", "keybase",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (getKeybase_Selector(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "selector",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getKeybase_Field(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "field",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getKeybase_Name(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "name"
		   });
		addAnnotation
		  (keyrefTypeEClass,
		   source,
		   new String[] {
			   "name", "keyref_._type",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (getKeyrefType_Refer(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "refer"
		   });
		addAnnotation
		  (listTypeEClass,
		   source,
		   new String[] {
			   "name", "list_._type",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (getListType_SimpleType(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "simpleType",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getListType_ItemType(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "itemType"
		   });
		addAnnotation
		  (localComplexTypeEClass,
		   source,
		   new String[] {
			   "name", "localComplexType",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (localElementEClass,
		   source,
		   new String[] {
			   "name", "localElement",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (localSimpleTypeEClass,
		   source,
		   new String[] {
			   "name", "localSimpleType",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (memberTypesTypeEDataType,
		   source,
		   new String[] {
			   "name", "memberTypes_._type",
			   "itemType", "http://www.eclipse.org/emf/2003/XMLType#QName"
		   });
		addAnnotation
		  (namedAttributeGroupEClass,
		   source,
		   new String[] {
			   "name", "namedAttributeGroup",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (namedGroupEClass,
		   source,
		   new String[] {
			   "name", "namedGroup",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (namespaceListEDataType,
		   source,
		   new String[] {
			   "name", "namespaceList",
			   "memberTypes", "namespaceList_._member_._0 namespaceList_._member_._1"
		   });
		addAnnotation
		  (namespaceListMember0EEnum,
		   source,
		   new String[] {
			   "name", "namespaceList_._member_._0"
		   });
		addAnnotation
		  (namespaceListMember0ObjectEDataType,
		   source,
		   new String[] {
			   "name", "namespaceList_._member_._0:Object",
			   "baseType", "namespaceList_._member_._0"
		   });
		addAnnotation
		  (namespaceListMember1EDataType,
		   source,
		   new String[] {
			   "name", "namespaceList_._member_._1",
			   "itemType", "namespaceList_._member_._1_._item"
		   });
		addAnnotation
		  (namespaceListMember1ItemEDataType,
		   source,
		   new String[] {
			   "name", "namespaceList_._member_._1_._item",
			   "memberTypes", "http://www.eclipse.org/emf/2003/XMLType#anyURI namespaceList_._member_._1_._item_._member_._1"
		   });
		addAnnotation
		  (namespaceListMember1ItemMember1EEnum,
		   source,
		   new String[] {
			   "name", "namespaceList_._member_._1_._item_._member_._1"
		   });
		addAnnotation
		  (namespaceListMember1ItemMember1ObjectEDataType,
		   source,
		   new String[] {
			   "name", "namespaceList_._member_._1_._item_._member_._1:Object",
			   "baseType", "namespaceList_._member_._1_._item_._member_._1"
		   });
		addAnnotation
		  (narrowMaxMinEClass,
		   source,
		   new String[] {
			   "name", "narrowMaxMin",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (noFixedFacetEClass,
		   source,
		   new String[] {
			   "name", "noFixedFacet",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (notationTypeEClass,
		   source,
		   new String[] {
			   "name", "notation_._type",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (getNotationType_Name(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "name"
		   });
		addAnnotation
		  (getNotationType_Public(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "public"
		   });
		addAnnotation
		  (getNotationType_System(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "system"
		   });
		addAnnotation
		  (numFacetEClass,
		   source,
		   new String[] {
			   "name", "numFacet",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (openAttrsEClass,
		   source,
		   new String[] {
			   "name", "openAttrs",
			   "kind", "empty"
		   });
		addAnnotation
		  (getOpenAttrs_AnyAttribute(),
		   source,
		   new String[] {
			   "kind", "attributeWildcard",
			   "wildcards", "##other",
			   "name", ":0",
			   "processing", "lax"
		   });
		addAnnotation
		  (patternTypeEClass,
		   source,
		   new String[] {
			   "name", "pattern_._type",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (processContentsTypeEEnum,
		   source,
		   new String[] {
			   "name", "processContents_._type"
		   });
		addAnnotation
		  (processContentsTypeObjectEDataType,
		   source,
		   new String[] {
			   "name", "processContents_._type:Object",
			   "baseType", "processContents_._type"
		   });
		addAnnotation
		  (publicEDataType,
		   source,
		   new String[] {
			   "name", "public",
			   "baseType", "http://www.eclipse.org/emf/2003/XMLType#token"
		   });
		addAnnotation
		  (realGroupEClass,
		   source,
		   new String[] {
			   "name", "realGroup",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (getRealGroup_All1(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "all",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getRealGroup_Choice1(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "choice",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getRealGroup_Sequence1(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "sequence",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (redefineTypeEClass,
		   source,
		   new String[] {
			   "name", "redefine_._type",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (getRedefineType_Group(),
		   source,
		   new String[] {
			   "kind", "group",
			   "name", "group:1"
		   });
		addAnnotation
		  (getRedefineType_Annotation(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "annotation",
			   "namespace", "##targetNamespace",
			   "group", "#group:1"
		   });
		addAnnotation
		  (getRedefineType_SimpleType(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "simpleType",
			   "namespace", "##targetNamespace",
			   "group", "#group:1"
		   });
		addAnnotation
		  (getRedefineType_ComplexType(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "complexType",
			   "namespace", "##targetNamespace",
			   "group", "#group:1"
		   });
		addAnnotation
		  (getRedefineType_Group1(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "group",
			   "namespace", "##targetNamespace",
			   "group", "#group:1"
		   });
		addAnnotation
		  (getRedefineType_AttributeGroup(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "attributeGroup",
			   "namespace", "##targetNamespace",
			   "group", "#group:1"
		   });
		addAnnotation
		  (getRedefineType_Id(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "id"
		   });
		addAnnotation
		  (getRedefineType_SchemaLocation(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "schemaLocation"
		   });
		addAnnotation
		  (reducedDerivationControlEEnum,
		   source,
		   new String[] {
			   "name", "reducedDerivationControl"
		   });
		addAnnotation
		  (reducedDerivationControlObjectEDataType,
		   source,
		   new String[] {
			   "name", "reducedDerivationControl:Object",
			   "baseType", "reducedDerivationControl"
		   });
		addAnnotation
		  (restrictionTypeEClass,
		   source,
		   new String[] {
			   "name", "restrictionType",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (getRestrictionType_Group(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "group",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getRestrictionType_All(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "all",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getRestrictionType_Choice(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "choice",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getRestrictionType_Sequence(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "sequence",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getRestrictionType_SimpleType(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "simpleType",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getRestrictionType_Facets(),
		   source,
		   new String[] {
			   "kind", "group",
			   "name", "Facets:8"
		   });
		addAnnotation
		  (getRestrictionType_MinExclusive(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "minExclusive",
			   "namespace", "##targetNamespace",
			   "group", "#Facets:8"
		   });
		addAnnotation
		  (getRestrictionType_MinInclusive(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "minInclusive",
			   "namespace", "##targetNamespace",
			   "group", "#Facets:8"
		   });
		addAnnotation
		  (getRestrictionType_MaxExclusive(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "maxExclusive",
			   "namespace", "##targetNamespace",
			   "group", "#Facets:8"
		   });
		addAnnotation
		  (getRestrictionType_MaxInclusive(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "maxInclusive",
			   "namespace", "##targetNamespace",
			   "group", "#Facets:8"
		   });
		addAnnotation
		  (getRestrictionType_TotalDigits(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "totalDigits",
			   "namespace", "##targetNamespace",
			   "group", "#Facets:8"
		   });
		addAnnotation
		  (getRestrictionType_FractionDigits(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "fractionDigits",
			   "namespace", "##targetNamespace",
			   "group", "#Facets:8"
		   });
		addAnnotation
		  (getRestrictionType_Length(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "length",
			   "namespace", "##targetNamespace",
			   "group", "#Facets:8"
		   });
		addAnnotation
		  (getRestrictionType_MinLength(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "minLength",
			   "namespace", "##targetNamespace",
			   "group", "#Facets:8"
		   });
		addAnnotation
		  (getRestrictionType_MaxLength(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "maxLength",
			   "namespace", "##targetNamespace",
			   "group", "#Facets:8"
		   });
		addAnnotation
		  (getRestrictionType_Enumeration(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "enumeration",
			   "namespace", "##targetNamespace",
			   "group", "#Facets:8"
		   });
		addAnnotation
		  (getRestrictionType_WhiteSpace(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "whiteSpace",
			   "namespace", "##targetNamespace",
			   "group", "#Facets:8"
		   });
		addAnnotation
		  (getRestrictionType_Pattern(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "pattern",
			   "namespace", "##targetNamespace",
			   "group", "#Facets:8"
		   });
		addAnnotation
		  (getRestrictionType_Group1(),
		   source,
		   new String[] {
			   "kind", "group",
			   "name", "group:21"
		   });
		addAnnotation
		  (getRestrictionType_Attribute(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "attribute",
			   "namespace", "##targetNamespace",
			   "group", "#group:21"
		   });
		addAnnotation
		  (getRestrictionType_AttributeGroup(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "attributeGroup",
			   "namespace", "##targetNamespace",
			   "group", "#group:21"
		   });
		addAnnotation
		  (getRestrictionType_AnyAttribute1(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "anyAttribute",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getRestrictionType_Base(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "base"
		   });
		addAnnotation
		  (restrictionType1EClass,
		   source,
		   new String[] {
			   "name", "restriction_._type",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (getRestrictionType1_SimpleType(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "simpleType",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getRestrictionType1_Facets(),
		   source,
		   new String[] {
			   "kind", "group",
			   "name", "Facets:4"
		   });
		addAnnotation
		  (getRestrictionType1_MinExclusive(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "minExclusive",
			   "namespace", "##targetNamespace",
			   "group", "#Facets:4"
		   });
		addAnnotation
		  (getRestrictionType1_MinInclusive(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "minInclusive",
			   "namespace", "##targetNamespace",
			   "group", "#Facets:4"
		   });
		addAnnotation
		  (getRestrictionType1_MaxExclusive(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "maxExclusive",
			   "namespace", "##targetNamespace",
			   "group", "#Facets:4"
		   });
		addAnnotation
		  (getRestrictionType1_MaxInclusive(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "maxInclusive",
			   "namespace", "##targetNamespace",
			   "group", "#Facets:4"
		   });
		addAnnotation
		  (getRestrictionType1_TotalDigits(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "totalDigits",
			   "namespace", "##targetNamespace",
			   "group", "#Facets:4"
		   });
		addAnnotation
		  (getRestrictionType1_FractionDigits(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "fractionDigits",
			   "namespace", "##targetNamespace",
			   "group", "#Facets:4"
		   });
		addAnnotation
		  (getRestrictionType1_Length(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "length",
			   "namespace", "##targetNamespace",
			   "group", "#Facets:4"
		   });
		addAnnotation
		  (getRestrictionType1_MinLength(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "minLength",
			   "namespace", "##targetNamespace",
			   "group", "#Facets:4"
		   });
		addAnnotation
		  (getRestrictionType1_MaxLength(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "maxLength",
			   "namespace", "##targetNamespace",
			   "group", "#Facets:4"
		   });
		addAnnotation
		  (getRestrictionType1_Enumeration(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "enumeration",
			   "namespace", "##targetNamespace",
			   "group", "#Facets:4"
		   });
		addAnnotation
		  (getRestrictionType1_WhiteSpace(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "whiteSpace",
			   "namespace", "##targetNamespace",
			   "group", "#Facets:4"
		   });
		addAnnotation
		  (getRestrictionType1_Pattern(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "pattern",
			   "namespace", "##targetNamespace",
			   "group", "#Facets:4"
		   });
		addAnnotation
		  (getRestrictionType1_Base(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "base"
		   });
		addAnnotation
		  (schemaTypeEClass,
		   source,
		   new String[] {
			   "name", "schema_._type",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (getSchemaType_Group(),
		   source,
		   new String[] {
			   "kind", "group",
			   "name", "group:1"
		   });
		addAnnotation
		  (getSchemaType_Include(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "include",
			   "namespace", "##targetNamespace",
			   "group", "#group:1"
		   });
		addAnnotation
		  (getSchemaType_Import(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "import",
			   "namespace", "##targetNamespace",
			   "group", "#group:1"
		   });
		addAnnotation
		  (getSchemaType_Redefine(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "redefine",
			   "namespace", "##targetNamespace",
			   "group", "#group:1"
		   });
		addAnnotation
		  (getSchemaType_Annotation(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "annotation",
			   "namespace", "##targetNamespace",
			   "group", "#group:1"
		   });
		addAnnotation
		  (getSchemaType_Group1(),
		   source,
		   new String[] {
			   "kind", "group",
			   "name", "group:6"
		   });
		addAnnotation
		  (getSchemaType_SimpleType(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "simpleType",
			   "namespace", "##targetNamespace",
			   "group", "#group:6"
		   });
		addAnnotation
		  (getSchemaType_ComplexType(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "complexType",
			   "namespace", "##targetNamespace",
			   "group", "#group:6"
		   });
		addAnnotation
		  (getSchemaType_Group2(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "group",
			   "namespace", "##targetNamespace",
			   "group", "#group:6"
		   });
		addAnnotation
		  (getSchemaType_AttributeGroup(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "attributeGroup",
			   "namespace", "##targetNamespace",
			   "group", "#group:6"
		   });
		addAnnotation
		  (getSchemaType_Element(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "element",
			   "namespace", "##targetNamespace",
			   "group", "#group:6"
		   });
		addAnnotation
		  (getSchemaType_Attribute(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "attribute",
			   "namespace", "##targetNamespace",
			   "group", "#group:6"
		   });
		addAnnotation
		  (getSchemaType_Notation(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "notation",
			   "namespace", "##targetNamespace",
			   "group", "#group:6"
		   });
		addAnnotation
		  (getSchemaType_Annotation1(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "annotation",
			   "namespace", "##targetNamespace",
			   "group", "#group:6"
		   });
		addAnnotation
		  (getSchemaType_AttributeFormDefault(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "attributeFormDefault"
		   });
		addAnnotation
		  (getSchemaType_BlockDefault(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "blockDefault"
		   });
		addAnnotation
		  (getSchemaType_ElementFormDefault(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "elementFormDefault"
		   });
		addAnnotation
		  (getSchemaType_FinalDefault(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "finalDefault"
		   });
		addAnnotation
		  (getSchemaType_Id(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "id"
		   });
		addAnnotation
		  (getSchemaType_Lang(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "lang",
			   "namespace", "http://www.w3.org/XML/1998/namespace"
		   });
		addAnnotation
		  (getSchemaType_TargetNamespace(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "targetNamespace"
		   });
		addAnnotation
		  (getSchemaType_Version(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "version"
		   });
		addAnnotation
		  (selectorTypeEClass,
		   source,
		   new String[] {
			   "name", "selector_._type",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (getSelectorType_Xpath(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "xpath"
		   });
		addAnnotation
		  (simpleContentTypeEClass,
		   source,
		   new String[] {
			   "name", "simpleContent_._type",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (getSimpleContentType_Restriction(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "restriction",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getSimpleContentType_Extension(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "extension",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (simpleDerivationSetEDataType,
		   source,
		   new String[] {
			   "name", "simpleDerivationSet",
			   "memberTypes", "simpleDerivationSet_._member_._0 simpleDerivationSet_._member_._1"
		   });
		addAnnotation
		  (simpleDerivationSetMember0EEnum,
		   source,
		   new String[] {
			   "name", "simpleDerivationSet_._member_._0"
		   });
		addAnnotation
		  (simpleDerivationSetMember0ObjectEDataType,
		   source,
		   new String[] {
			   "name", "simpleDerivationSet_._member_._0:Object",
			   "baseType", "simpleDerivationSet_._member_._0"
		   });
		addAnnotation
		  (simpleDerivationSetMember1EDataType,
		   source,
		   new String[] {
			   "name", "simpleDerivationSet_._member_._1",
			   "itemType", "simpleDerivationSet_._member_._1_._item"
		   });
		addAnnotation
		  (simpleDerivationSetMember1ItemEEnum,
		   source,
		   new String[] {
			   "name", "simpleDerivationSet_._member_._1_._item"
		   });
		addAnnotation
		  (simpleDerivationSetMember1ItemObjectEDataType,
		   source,
		   new String[] {
			   "name", "simpleDerivationSet_._member_._1_._item:Object",
			   "baseType", "simpleDerivationSet_._member_._1_._item"
		   });
		addAnnotation
		  (simpleExplicitGroupEClass,
		   source,
		   new String[] {
			   "name", "simpleExplicitGroup",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (simpleExtensionTypeEClass,
		   source,
		   new String[] {
			   "name", "simpleExtensionType",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (simpleRestrictionTypeEClass,
		   source,
		   new String[] {
			   "name", "simpleRestrictionType",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (simpleTypeEClass,
		   source,
		   new String[] {
			   "name", "simpleType",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (getSimpleType_Restriction(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "restriction",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getSimpleType_List(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "list",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getSimpleType_Union(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "union",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getSimpleType_Final(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "final"
		   });
		addAnnotation
		  (getSimpleType_Name(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "name"
		   });
		addAnnotation
		  (topLevelAttributeEClass,
		   source,
		   new String[] {
			   "name", "topLevelAttribute",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (topLevelComplexTypeEClass,
		   source,
		   new String[] {
			   "name", "topLevelComplexType",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (topLevelElementEClass,
		   source,
		   new String[] {
			   "name", "topLevelElement",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (topLevelSimpleTypeEClass,
		   source,
		   new String[] {
			   "name", "topLevelSimpleType",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (totalDigitsTypeEClass,
		   source,
		   new String[] {
			   "name", "totalDigits_._type",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (typeDerivationControlEEnum,
		   source,
		   new String[] {
			   "name", "typeDerivationControl"
		   });
		addAnnotation
		  (typeDerivationControlObjectEDataType,
		   source,
		   new String[] {
			   "name", "typeDerivationControl:Object",
			   "baseType", "typeDerivationControl"
		   });
		addAnnotation
		  (unionTypeEClass,
		   source,
		   new String[] {
			   "name", "union_._type",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (getUnionType_SimpleType(),
		   source,
		   new String[] {
			   "kind", "element",
			   "name", "simpleType",
			   "namespace", "##targetNamespace"
		   });
		addAnnotation
		  (getUnionType_MemberTypes(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "memberTypes"
		   });
		addAnnotation
		  (useTypeEEnum,
		   source,
		   new String[] {
			   "name", "use_._type"
		   });
		addAnnotation
		  (useTypeObjectEDataType,
		   source,
		   new String[] {
			   "name", "use_._type:Object",
			   "baseType", "use_._type"
		   });
		addAnnotation
		  (whiteSpaceTypeEClass,
		   source,
		   new String[] {
			   "name", "whiteSpace_._type",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (wildcardEClass,
		   source,
		   new String[] {
			   "name", "wildcard",
			   "kind", "elementOnly"
		   });
		addAnnotation
		  (getWildcard_Namespace(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "namespace"
		   });
		addAnnotation
		  (getWildcard_ProcessContents(),
		   source,
		   new String[] {
			   "kind", "attribute",
			   "name", "processContents"
		   });
		addAnnotation
		  (xpathTypeEDataType,
		   source,
		   new String[] {
			   "name", "xpath_._type",
			   "baseType", "http://www.eclipse.org/emf/2003/XMLType#token",
			   "pattern", "(\\.//)?((((child::)?((\\i\\c*:)?(\\i\\c*|\\*)))|\\.)/)*((((child::)?((\\i\\c*:)?(\\i\\c*|\\*)))|\\.)|((attribute::|@)((\\i\\c*:)?(\\i\\c*|\\*))))(\\|(\\.//)?((((child::)?((\\i\\c*:)?(\\i\\c*|\\*)))|\\.)/)*((((child::)?((\\i\\c*:)?(\\i\\c*|\\*)))|\\.)|((attribute::|@)((\\i\\c*:)?(\\i\\c*|\\*)))))*"
		   });
		addAnnotation
		  (xpathType1EDataType,
		   source,
		   new String[] {
			   "name", "xpath_._1_._type",
			   "baseType", "http://www.eclipse.org/emf/2003/XMLType#token",
			   "pattern", "(\\.//)?(((child::)?((\\i\\c*:)?(\\i\\c*|\\*)))|\\.)(/(((child::)?((\\i\\c*:)?(\\i\\c*|\\*)))|\\.))*(\\|(\\.//)?(((child::)?((\\i\\c*:)?(\\i\\c*|\\*)))|\\.)(/(((child::)?((\\i\\c*:)?(\\i\\c*|\\*)))|\\.))*)*"
		   });
	}

