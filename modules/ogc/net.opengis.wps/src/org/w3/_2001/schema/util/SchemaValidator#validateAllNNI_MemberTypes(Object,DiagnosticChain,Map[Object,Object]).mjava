	/**
	 * Validates the MemberTypes constraint of '<em>All NNI</em>'.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean validateAllNNI_MemberTypes(Object allNNI, DiagnosticChain diagnostics, Map<Object, Object> context) {
		if (diagnostics != null) {
			BasicDiagnostic tempDiagnostics = new BasicDiagnostic();
			if (XMLTypePackage.Literals.NON_NEGATIVE_INTEGER.isInstance(allNNI)) {
				if (xmlTypeValidator.validateNonNegativeInteger((BigInteger)allNNI, tempDiagnostics, context)) return true;
			}
			if (SchemaPackage.Literals.ALL_NNI_MEMBER1.isInstance(allNNI)) {
				if (validateAllNNIMember1((AllNNIMember1)allNNI, tempDiagnostics, context)) return true;
			}
			for (Diagnostic diagnostic : tempDiagnostics.getChildren()) {
				diagnostics.add(diagnostic);
			}
		}
		else {
			if (XMLTypePackage.Literals.NON_NEGATIVE_INTEGER.isInstance(allNNI)) {
				if (xmlTypeValidator.validateNonNegativeInteger((BigInteger)allNNI, null, context)) return true;
			}
			if (SchemaPackage.Literals.ALL_NNI_MEMBER1.isInstance(allNNI)) {
				if (validateAllNNIMember1((AllNNIMember1)allNNI, null, context)) return true;
			}
		}
		return false;
	}

