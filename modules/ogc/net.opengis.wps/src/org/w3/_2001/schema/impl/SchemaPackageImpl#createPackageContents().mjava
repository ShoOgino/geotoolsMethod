	/**
	 * Creates the meta-model objects for the package.  This method is
	 * guarded to have no affect on any invocation but its first.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void createPackageContents() {
		if (isCreated) return;
		isCreated = true;

		// Create classes and their features
		allEClass = createEClass(ALL);

		annotatedEClass = createEClass(ANNOTATED);
		createEReference(annotatedEClass, ANNOTATED__ANNOTATION);
		createEAttribute(annotatedEClass, ANNOTATED__ID);

		annotationTypeEClass = createEClass(ANNOTATION_TYPE);
		createEAttribute(annotationTypeEClass, ANNOTATION_TYPE__GROUP);
		createEReference(annotationTypeEClass, ANNOTATION_TYPE__APPINFO);
		createEReference(annotationTypeEClass, ANNOTATION_TYPE__DOCUMENTATION);
		createEAttribute(annotationTypeEClass, ANNOTATION_TYPE__ID);

		anyTypeEClass = createEClass(ANY_TYPE);
		createEAttribute(anyTypeEClass, ANY_TYPE__MAX_OCCURS);
		createEAttribute(anyTypeEClass, ANY_TYPE__MIN_OCCURS);

		appinfoTypeEClass = createEClass(APPINFO_TYPE);
		createEAttribute(appinfoTypeEClass, APPINFO_TYPE__MIXED);
		createEAttribute(appinfoTypeEClass, APPINFO_TYPE__GROUP);
		createEAttribute(appinfoTypeEClass, APPINFO_TYPE__ANY);
		createEAttribute(appinfoTypeEClass, APPINFO_TYPE__SOURCE);
		createEAttribute(appinfoTypeEClass, APPINFO_TYPE__ANY_ATTRIBUTE);

		attributeEClass = createEClass(ATTRIBUTE);
		createEReference(attributeEClass, ATTRIBUTE__SIMPLE_TYPE);
		createEAttribute(attributeEClass, ATTRIBUTE__DEFAULT);
		createEAttribute(attributeEClass, ATTRIBUTE__FIXED);
		createEAttribute(attributeEClass, ATTRIBUTE__FORM);
		createEAttribute(attributeEClass, ATTRIBUTE__NAME);
		createEAttribute(attributeEClass, ATTRIBUTE__REF);
		createEAttribute(attributeEClass, ATTRIBUTE__TYPE);
		createEAttribute(attributeEClass, ATTRIBUTE__USE);

		attributeGroupEClass = createEClass(ATTRIBUTE_GROUP);
		createEAttribute(attributeGroupEClass, ATTRIBUTE_GROUP__GROUP);
		createEReference(attributeGroupEClass, ATTRIBUTE_GROUP__ATTRIBUTE);
		createEReference(attributeGroupEClass, ATTRIBUTE_GROUP__ATTRIBUTE_GROUP);
		createEReference(attributeGroupEClass, ATTRIBUTE_GROUP__ANY_ATTRIBUTE1);
		createEAttribute(attributeGroupEClass, ATTRIBUTE_GROUP__NAME);
		createEAttribute(attributeGroupEClass, ATTRIBUTE_GROUP__REF);

		attributeGroupRefEClass = createEClass(ATTRIBUTE_GROUP_REF);

		complexContentTypeEClass = createEClass(COMPLEX_CONTENT_TYPE);
		createEReference(complexContentTypeEClass, COMPLEX_CONTENT_TYPE__RESTRICTION);
		createEReference(complexContentTypeEClass, COMPLEX_CONTENT_TYPE__EXTENSION);
		createEAttribute(complexContentTypeEClass, COMPLEX_CONTENT_TYPE__MIXED);

		complexRestrictionTypeEClass = createEClass(COMPLEX_RESTRICTION_TYPE);

		complexTypeEClass = createEClass(COMPLEX_TYPE);
		createEReference(complexTypeEClass, COMPLEX_TYPE__SIMPLE_CONTENT);
		createEReference(complexTypeEClass, COMPLEX_TYPE__COMPLEX_CONTENT);
		createEReference(complexTypeEClass, COMPLEX_TYPE__GROUP);
		createEReference(complexTypeEClass, COMPLEX_TYPE__ALL);
		createEReference(complexTypeEClass, COMPLEX_TYPE__CHOICE);
		createEReference(complexTypeEClass, COMPLEX_TYPE__SEQUENCE);
		createEAttribute(complexTypeEClass, COMPLEX_TYPE__GROUP1);
		createEReference(complexTypeEClass, COMPLEX_TYPE__ATTRIBUTE);
		createEReference(complexTypeEClass, COMPLEX_TYPE__ATTRIBUTE_GROUP);
		createEReference(complexTypeEClass, COMPLEX_TYPE__ANY_ATTRIBUTE1);
		createEAttribute(complexTypeEClass, COMPLEX_TYPE__ABSTRACT);
		createEAttribute(complexTypeEClass, COMPLEX_TYPE__BLOCK);
		createEAttribute(complexTypeEClass, COMPLEX_TYPE__FINAL);
		createEAttribute(complexTypeEClass, COMPLEX_TYPE__MIXED);
		createEAttribute(complexTypeEClass, COMPLEX_TYPE__NAME);

		documentationTypeEClass = createEClass(DOCUMENTATION_TYPE);
		createEAttribute(documentationTypeEClass, DOCUMENTATION_TYPE__MIXED);
		createEAttribute(documentationTypeEClass, DOCUMENTATION_TYPE__GROUP);
		createEAttribute(documentationTypeEClass, DOCUMENTATION_TYPE__ANY);
		createEAttribute(documentationTypeEClass, DOCUMENTATION_TYPE__LANG);
		createEAttribute(documentationTypeEClass, DOCUMENTATION_TYPE__SOURCE);
		createEAttribute(documentationTypeEClass, DOCUMENTATION_TYPE__ANY_ATTRIBUTE);

		documentRootEClass = createEClass(DOCUMENT_ROOT);
		createEAttribute(documentRootEClass, DOCUMENT_ROOT__MIXED);
		createEReference(documentRootEClass, DOCUMENT_ROOT__XMLNS_PREFIX_MAP);
		createEReference(documentRootEClass, DOCUMENT_ROOT__XSI_SCHEMA_LOCATION);
		createEReference(documentRootEClass, DOCUMENT_ROOT__ALL);
		createEReference(documentRootEClass, DOCUMENT_ROOT__ANNOTATION);
		createEReference(documentRootEClass, DOCUMENT_ROOT__ANY);
		createEReference(documentRootEClass, DOCUMENT_ROOT__ANY_ATTRIBUTE);
		createEReference(documentRootEClass, DOCUMENT_ROOT__APPINFO);
		createEReference(documentRootEClass, DOCUMENT_ROOT__ATTRIBUTE);
		createEReference(documentRootEClass, DOCUMENT_ROOT__ATTRIBUTE_GROUP);
		createEReference(documentRootEClass, DOCUMENT_ROOT__CHOICE);
		createEReference(documentRootEClass, DOCUMENT_ROOT__COMPLEX_CONTENT);
		createEReference(documentRootEClass, DOCUMENT_ROOT__COMPLEX_TYPE);
		createEReference(documentRootEClass, DOCUMENT_ROOT__DOCUMENTATION);
		createEReference(documentRootEClass, DOCUMENT_ROOT__ELEMENT);
		createEReference(documentRootEClass, DOCUMENT_ROOT__ENUMERATION);
		createEReference(documentRootEClass, DOCUMENT_ROOT__FIELD);
		createEReference(documentRootEClass, DOCUMENT_ROOT__FRACTION_DIGITS);
		createEReference(documentRootEClass, DOCUMENT_ROOT__GROUP);
		createEReference(documentRootEClass, DOCUMENT_ROOT__IMPORT);
		createEReference(documentRootEClass, DOCUMENT_ROOT__INCLUDE);
		createEReference(documentRootEClass, DOCUMENT_ROOT__KEY);
		createEReference(documentRootEClass, DOCUMENT_ROOT__KEYREF);
		createEReference(documentRootEClass, DOCUMENT_ROOT__LENGTH);
		createEReference(documentRootEClass, DOCUMENT_ROOT__LIST);
		createEReference(documentRootEClass, DOCUMENT_ROOT__MAX_EXCLUSIVE);
		createEReference(documentRootEClass, DOCUMENT_ROOT__MAX_INCLUSIVE);
		createEReference(documentRootEClass, DOCUMENT_ROOT__MAX_LENGTH);
		createEReference(documentRootEClass, DOCUMENT_ROOT__MIN_EXCLUSIVE);
		createEReference(documentRootEClass, DOCUMENT_ROOT__MIN_INCLUSIVE);
		createEReference(documentRootEClass, DOCUMENT_ROOT__MIN_LENGTH);
		createEReference(documentRootEClass, DOCUMENT_ROOT__NOTATION);
		createEReference(documentRootEClass, DOCUMENT_ROOT__PATTERN);
		createEReference(documentRootEClass, DOCUMENT_ROOT__REDEFINE);
		createEReference(documentRootEClass, DOCUMENT_ROOT__RESTRICTION);
		createEReference(documentRootEClass, DOCUMENT_ROOT__SCHEMA);
		createEReference(documentRootEClass, DOCUMENT_ROOT__SELECTOR);
		createEReference(documentRootEClass, DOCUMENT_ROOT__SEQUENCE);
		createEReference(documentRootEClass, DOCUMENT_ROOT__SIMPLE_CONTENT);
		createEReference(documentRootEClass, DOCUMENT_ROOT__SIMPLE_TYPE);
		createEReference(documentRootEClass, DOCUMENT_ROOT__TOTAL_DIGITS);
		createEReference(documentRootEClass, DOCUMENT_ROOT__UNION);
		createEReference(documentRootEClass, DOCUMENT_ROOT__UNIQUE);
		createEReference(documentRootEClass, DOCUMENT_ROOT__WHITE_SPACE);

		elementEClass = createEClass(ELEMENT);
		createEReference(elementEClass, ELEMENT__SIMPLE_TYPE);
		createEReference(elementEClass, ELEMENT__COMPLEX_TYPE);
		createEAttribute(elementEClass, ELEMENT__IDENTITY_CONSTRAINT);
		createEReference(elementEClass, ELEMENT__UNIQUE);
		createEReference(elementEClass, ELEMENT__KEY);
		createEReference(elementEClass, ELEMENT__KEYREF);
		createEAttribute(elementEClass, ELEMENT__ABSTRACT);
		createEAttribute(elementEClass, ELEMENT__BLOCK);
		createEAttribute(elementEClass, ELEMENT__DEFAULT);
		createEAttribute(elementEClass, ELEMENT__FINAL);
		createEAttribute(elementEClass, ELEMENT__FIXED);
		createEAttribute(elementEClass, ELEMENT__FORM);
		createEAttribute(elementEClass, ELEMENT__MAX_OCCURS);
		createEAttribute(elementEClass, ELEMENT__MIN_OCCURS);
		createEAttribute(elementEClass, ELEMENT__NAME);
		createEAttribute(elementEClass, ELEMENT__NILLABLE);
		createEAttribute(elementEClass, ELEMENT__REF);
		createEAttribute(elementEClass, ELEMENT__SUBSTITUTION_GROUP);
		createEAttribute(elementEClass, ELEMENT__TYPE);

		explicitGroupEClass = createEClass(EXPLICIT_GROUP);

		extensionTypeEClass = createEClass(EXTENSION_TYPE);
		createEReference(extensionTypeEClass, EXTENSION_TYPE__GROUP);
		createEReference(extensionTypeEClass, EXTENSION_TYPE__ALL);
		createEReference(extensionTypeEClass, EXTENSION_TYPE__CHOICE);
		createEReference(extensionTypeEClass, EXTENSION_TYPE__SEQUENCE);
		createEAttribute(extensionTypeEClass, EXTENSION_TYPE__GROUP1);
		createEReference(extensionTypeEClass, EXTENSION_TYPE__ATTRIBUTE);
		createEReference(extensionTypeEClass, EXTENSION_TYPE__ATTRIBUTE_GROUP);
		createEReference(extensionTypeEClass, EXTENSION_TYPE__ANY_ATTRIBUTE1);
		createEAttribute(extensionTypeEClass, EXTENSION_TYPE__BASE);

		facetEClass = createEClass(FACET);
		createEAttribute(facetEClass, FACET__FIXED);
		createEAttribute(facetEClass, FACET__VALUE);

		fieldTypeEClass = createEClass(FIELD_TYPE);
		createEAttribute(fieldTypeEClass, FIELD_TYPE__XPATH);

		groupEClass = createEClass(GROUP);
		createEAttribute(groupEClass, GROUP__PARTICLE);
		createEReference(groupEClass, GROUP__ELEMENT);
		createEReference(groupEClass, GROUP__GROUP);
		createEReference(groupEClass, GROUP__ALL);
		createEReference(groupEClass, GROUP__CHOICE);
		createEReference(groupEClass, GROUP__SEQUENCE);
		createEReference(groupEClass, GROUP__ANY);
		createEAttribute(groupEClass, GROUP__MAX_OCCURS);
		createEAttribute(groupEClass, GROUP__MIN_OCCURS);
		createEAttribute(groupEClass, GROUP__NAME);
		createEAttribute(groupEClass, GROUP__REF);

		groupRefEClass = createEClass(GROUP_REF);

		importTypeEClass = createEClass(IMPORT_TYPE);
		createEAttribute(importTypeEClass, IMPORT_TYPE__NAMESPACE);
		createEAttribute(importTypeEClass, IMPORT_TYPE__SCHEMA_LOCATION);

		includeTypeEClass = createEClass(INCLUDE_TYPE);
		createEAttribute(includeTypeEClass, INCLUDE_TYPE__SCHEMA_LOCATION);

		keybaseEClass = createEClass(KEYBASE);
		createEReference(keybaseEClass, KEYBASE__SELECTOR);
		createEReference(keybaseEClass, KEYBASE__FIELD);
		createEAttribute(keybaseEClass, KEYBASE__NAME);

		keyrefTypeEClass = createEClass(KEYREF_TYPE);
		createEAttribute(keyrefTypeEClass, KEYREF_TYPE__REFER);

		listTypeEClass = createEClass(LIST_TYPE);
		createEReference(listTypeEClass, LIST_TYPE__SIMPLE_TYPE);
		createEAttribute(listTypeEClass, LIST_TYPE__ITEM_TYPE);

		localComplexTypeEClass = createEClass(LOCAL_COMPLEX_TYPE);

		localElementEClass = createEClass(LOCAL_ELEMENT);

		localSimpleTypeEClass = createEClass(LOCAL_SIMPLE_TYPE);

		namedAttributeGroupEClass = createEClass(NAMED_ATTRIBUTE_GROUP);

		namedGroupEClass = createEClass(NAMED_GROUP);

		narrowMaxMinEClass = createEClass(NARROW_MAX_MIN);

		noFixedFacetEClass = createEClass(NO_FIXED_FACET);

		notationTypeEClass = createEClass(NOTATION_TYPE);
		createEAttribute(notationTypeEClass, NOTATION_TYPE__NAME);
		createEAttribute(notationTypeEClass, NOTATION_TYPE__PUBLIC);
		createEAttribute(notationTypeEClass, NOTATION_TYPE__SYSTEM);

		numFacetEClass = createEClass(NUM_FACET);

		openAttrsEClass = createEClass(OPEN_ATTRS);
		createEAttribute(openAttrsEClass, OPEN_ATTRS__ANY_ATTRIBUTE);

		patternTypeEClass = createEClass(PATTERN_TYPE);

		realGroupEClass = createEClass(REAL_GROUP);
		createEReference(realGroupEClass, REAL_GROUP__ALL1);
		createEReference(realGroupEClass, REAL_GROUP__CHOICE1);
		createEReference(realGroupEClass, REAL_GROUP__SEQUENCE1);

		redefineTypeEClass = createEClass(REDEFINE_TYPE);
		createEAttribute(redefineTypeEClass, REDEFINE_TYPE__GROUP);
		createEReference(redefineTypeEClass, REDEFINE_TYPE__ANNOTATION);
		createEReference(redefineTypeEClass, REDEFINE_TYPE__SIMPLE_TYPE);
		createEReference(redefineTypeEClass, REDEFINE_TYPE__COMPLEX_TYPE);
		createEReference(redefineTypeEClass, REDEFINE_TYPE__GROUP1);
		createEReference(redefineTypeEClass, REDEFINE_TYPE__ATTRIBUTE_GROUP);
		createEAttribute(redefineTypeEClass, REDEFINE_TYPE__ID);
		createEAttribute(redefineTypeEClass, REDEFINE_TYPE__SCHEMA_LOCATION);

		restrictionTypeEClass = createEClass(RESTRICTION_TYPE);
		createEReference(restrictionTypeEClass, RESTRICTION_TYPE__GROUP);
		createEReference(restrictionTypeEClass, RESTRICTION_TYPE__ALL);
		createEReference(restrictionTypeEClass, RESTRICTION_TYPE__CHOICE);
		createEReference(restrictionTypeEClass, RESTRICTION_TYPE__SEQUENCE);
		createEReference(restrictionTypeEClass, RESTRICTION_TYPE__SIMPLE_TYPE);
		createEAttribute(restrictionTypeEClass, RESTRICTION_TYPE__FACETS);
		createEReference(restrictionTypeEClass, RESTRICTION_TYPE__MIN_EXCLUSIVE);
		createEReference(restrictionTypeEClass, RESTRICTION_TYPE__MIN_INCLUSIVE);
		createEReference(restrictionTypeEClass, RESTRICTION_TYPE__MAX_EXCLUSIVE);
		createEReference(restrictionTypeEClass, RESTRICTION_TYPE__MAX_INCLUSIVE);
		createEReference(restrictionTypeEClass, RESTRICTION_TYPE__TOTAL_DIGITS);
		createEReference(restrictionTypeEClass, RESTRICTION_TYPE__FRACTION_DIGITS);
		createEReference(restrictionTypeEClass, RESTRICTION_TYPE__LENGTH);
		createEReference(restrictionTypeEClass, RESTRICTION_TYPE__MIN_LENGTH);
		createEReference(restrictionTypeEClass, RESTRICTION_TYPE__MAX_LENGTH);
		createEReference(restrictionTypeEClass, RESTRICTION_TYPE__ENUMERATION);
		createEReference(restrictionTypeEClass, RESTRICTION_TYPE__WHITE_SPACE);
		createEReference(restrictionTypeEClass, RESTRICTION_TYPE__PATTERN);
		createEAttribute(restrictionTypeEClass, RESTRICTION_TYPE__GROUP1);
		createEReference(restrictionTypeEClass, RESTRICTION_TYPE__ATTRIBUTE);
		createEReference(restrictionTypeEClass, RESTRICTION_TYPE__ATTRIBUTE_GROUP);
		createEReference(restrictionTypeEClass, RESTRICTION_TYPE__ANY_ATTRIBUTE1);
		createEAttribute(restrictionTypeEClass, RESTRICTION_TYPE__BASE);

		restrictionType1EClass = createEClass(RESTRICTION_TYPE1);
		createEReference(restrictionType1EClass, RESTRICTION_TYPE1__SIMPLE_TYPE);
		createEAttribute(restrictionType1EClass, RESTRICTION_TYPE1__FACETS);
		createEReference(restrictionType1EClass, RESTRICTION_TYPE1__MIN_EXCLUSIVE);
		createEReference(restrictionType1EClass, RESTRICTION_TYPE1__MIN_INCLUSIVE);
		createEReference(restrictionType1EClass, RESTRICTION_TYPE1__MAX_EXCLUSIVE);
		createEReference(restrictionType1EClass, RESTRICTION_TYPE1__MAX_INCLUSIVE);
		createEReference(restrictionType1EClass, RESTRICTION_TYPE1__TOTAL_DIGITS);
		createEReference(restrictionType1EClass, RESTRICTION_TYPE1__FRACTION_DIGITS);
		createEReference(restrictionType1EClass, RESTRICTION_TYPE1__LENGTH);
		createEReference(restrictionType1EClass, RESTRICTION_TYPE1__MIN_LENGTH);
		createEReference(restrictionType1EClass, RESTRICTION_TYPE1__MAX_LENGTH);
		createEReference(restrictionType1EClass, RESTRICTION_TYPE1__ENUMERATION);
		createEReference(restrictionType1EClass, RESTRICTION_TYPE1__WHITE_SPACE);
		createEReference(restrictionType1EClass, RESTRICTION_TYPE1__PATTERN);
		createEAttribute(restrictionType1EClass, RESTRICTION_TYPE1__BASE);

		schemaTypeEClass = createEClass(SCHEMA_TYPE);
		createEAttribute(schemaTypeEClass, SCHEMA_TYPE__GROUP);
		createEReference(schemaTypeEClass, SCHEMA_TYPE__INCLUDE);
		createEReference(schemaTypeEClass, SCHEMA_TYPE__IMPORT);
		createEReference(schemaTypeEClass, SCHEMA_TYPE__REDEFINE);
		createEReference(schemaTypeEClass, SCHEMA_TYPE__ANNOTATION);
		createEAttribute(schemaTypeEClass, SCHEMA_TYPE__GROUP1);
		createEReference(schemaTypeEClass, SCHEMA_TYPE__SIMPLE_TYPE);
		createEReference(schemaTypeEClass, SCHEMA_TYPE__COMPLEX_TYPE);
		createEReference(schemaTypeEClass, SCHEMA_TYPE__GROUP2);
		createEReference(schemaTypeEClass, SCHEMA_TYPE__ATTRIBUTE_GROUP);
		createEReference(schemaTypeEClass, SCHEMA_TYPE__ELEMENT);
		createEReference(schemaTypeEClass, SCHEMA_TYPE__ATTRIBUTE);
		createEReference(schemaTypeEClass, SCHEMA_TYPE__NOTATION);
		createEReference(schemaTypeEClass, SCHEMA_TYPE__ANNOTATION1);
		createEAttribute(schemaTypeEClass, SCHEMA_TYPE__ATTRIBUTE_FORM_DEFAULT);
		createEAttribute(schemaTypeEClass, SCHEMA_TYPE__BLOCK_DEFAULT);
		createEAttribute(schemaTypeEClass, SCHEMA_TYPE__ELEMENT_FORM_DEFAULT);
		createEAttribute(schemaTypeEClass, SCHEMA_TYPE__FINAL_DEFAULT);
		createEAttribute(schemaTypeEClass, SCHEMA_TYPE__ID);
		createEAttribute(schemaTypeEClass, SCHEMA_TYPE__LANG);
		createEAttribute(schemaTypeEClass, SCHEMA_TYPE__TARGET_NAMESPACE);
		createEAttribute(schemaTypeEClass, SCHEMA_TYPE__VERSION);

		selectorTypeEClass = createEClass(SELECTOR_TYPE);
		createEAttribute(selectorTypeEClass, SELECTOR_TYPE__XPATH);

		simpleContentTypeEClass = createEClass(SIMPLE_CONTENT_TYPE);
		createEReference(simpleContentTypeEClass, SIMPLE_CONTENT_TYPE__RESTRICTION);
		createEReference(simpleContentTypeEClass, SIMPLE_CONTENT_TYPE__EXTENSION);

		simpleExplicitGroupEClass = createEClass(SIMPLE_EXPLICIT_GROUP);

		simpleExtensionTypeEClass = createEClass(SIMPLE_EXTENSION_TYPE);

		simpleRestrictionTypeEClass = createEClass(SIMPLE_RESTRICTION_TYPE);

		simpleTypeEClass = createEClass(SIMPLE_TYPE);
		createEReference(simpleTypeEClass, SIMPLE_TYPE__RESTRICTION);
		createEReference(simpleTypeEClass, SIMPLE_TYPE__LIST);
		createEReference(simpleTypeEClass, SIMPLE_TYPE__UNION);
		createEAttribute(simpleTypeEClass, SIMPLE_TYPE__FINAL);
		createEAttribute(simpleTypeEClass, SIMPLE_TYPE__NAME);

		topLevelAttributeEClass = createEClass(TOP_LEVEL_ATTRIBUTE);

		topLevelComplexTypeEClass = createEClass(TOP_LEVEL_COMPLEX_TYPE);

		topLevelElementEClass = createEClass(TOP_LEVEL_ELEMENT);

		topLevelSimpleTypeEClass = createEClass(TOP_LEVEL_SIMPLE_TYPE);

		totalDigitsTypeEClass = createEClass(TOTAL_DIGITS_TYPE);

		unionTypeEClass = createEClass(UNION_TYPE);
		createEReference(unionTypeEClass, UNION_TYPE__SIMPLE_TYPE);
		createEAttribute(unionTypeEClass, UNION_TYPE__MEMBER_TYPES);

		whiteSpaceTypeEClass = createEClass(WHITE_SPACE_TYPE);

		wildcardEClass = createEClass(WILDCARD);
		createEAttribute(wildcardEClass, WILDCARD__NAMESPACE);
		createEAttribute(wildcardEClass, WILDCARD__PROCESS_CONTENTS);

		// Create enums
		allNNIMember1EEnum = createEEnum(ALL_NNI_MEMBER1);
		blockSetMember0EEnum = createEEnum(BLOCK_SET_MEMBER0);
		blockSetMember1ItemEEnum = createEEnum(BLOCK_SET_MEMBER1_ITEM);
		derivationControlEEnum = createEEnum(DERIVATION_CONTROL);
		derivationSetMember0EEnum = createEEnum(DERIVATION_SET_MEMBER0);
		formChoiceEEnum = createEEnum(FORM_CHOICE);
		fullDerivationSetMember0EEnum = createEEnum(FULL_DERIVATION_SET_MEMBER0);
		namespaceListMember0EEnum = createEEnum(NAMESPACE_LIST_MEMBER0);
		namespaceListMember1ItemMember1EEnum = createEEnum(NAMESPACE_LIST_MEMBER1_ITEM_MEMBER1);
		processContentsTypeEEnum = createEEnum(PROCESS_CONTENTS_TYPE);
		reducedDerivationControlEEnum = createEEnum(REDUCED_DERIVATION_CONTROL);
		simpleDerivationSetMember0EEnum = createEEnum(SIMPLE_DERIVATION_SET_MEMBER0);
		simpleDerivationSetMember1ItemEEnum = createEEnum(SIMPLE_DERIVATION_SET_MEMBER1_ITEM);
		typeDerivationControlEEnum = createEEnum(TYPE_DERIVATION_CONTROL);
		useTypeEEnum = createEEnum(USE_TYPE);

		// Create data types
		allNNIEDataType = createEDataType(ALL_NNI);
		allNNIMember1ObjectEDataType = createEDataType(ALL_NNI_MEMBER1_OBJECT);
		blockSetEDataType = createEDataType(BLOCK_SET);
		blockSetMember0ObjectEDataType = createEDataType(BLOCK_SET_MEMBER0_OBJECT);
		blockSetMember1EDataType = createEDataType(BLOCK_SET_MEMBER1);
		blockSetMember1ItemObjectEDataType = createEDataType(BLOCK_SET_MEMBER1_ITEM_OBJECT);
		derivationControlObjectEDataType = createEDataType(DERIVATION_CONTROL_OBJECT);
		derivationSetEDataType = createEDataType(DERIVATION_SET);
		derivationSetMember0ObjectEDataType = createEDataType(DERIVATION_SET_MEMBER0_OBJECT);
		derivationSetMember1EDataType = createEDataType(DERIVATION_SET_MEMBER1);
		formChoiceObjectEDataType = createEDataType(FORM_CHOICE_OBJECT);
		fullDerivationSetEDataType = createEDataType(FULL_DERIVATION_SET);
		fullDerivationSetMember0ObjectEDataType = createEDataType(FULL_DERIVATION_SET_MEMBER0_OBJECT);
		fullDerivationSetMember1EDataType = createEDataType(FULL_DERIVATION_SET_MEMBER1);
		memberTypesTypeEDataType = createEDataType(MEMBER_TYPES_TYPE);
		namespaceListEDataType = createEDataType(NAMESPACE_LIST);
		namespaceListMember0ObjectEDataType = createEDataType(NAMESPACE_LIST_MEMBER0_OBJECT);
		namespaceListMember1EDataType = createEDataType(NAMESPACE_LIST_MEMBER1);
		namespaceListMember1ItemEDataType = createEDataType(NAMESPACE_LIST_MEMBER1_ITEM);
		namespaceListMember1ItemMember1ObjectEDataType = createEDataType(NAMESPACE_LIST_MEMBER1_ITEM_MEMBER1_OBJECT);
		processContentsTypeObjectEDataType = createEDataType(PROCESS_CONTENTS_TYPE_OBJECT);
		publicEDataType = createEDataType(PUBLIC);
		reducedDerivationControlObjectEDataType = createEDataType(REDUCED_DERIVATION_CONTROL_OBJECT);
		simpleDerivationSetEDataType = createEDataType(SIMPLE_DERIVATION_SET);
		simpleDerivationSetMember0ObjectEDataType = createEDataType(SIMPLE_DERIVATION_SET_MEMBER0_OBJECT);
		simpleDerivationSetMember1EDataType = createEDataType(SIMPLE_DERIVATION_SET_MEMBER1);
		simpleDerivationSetMember1ItemObjectEDataType = createEDataType(SIMPLE_DERIVATION_SET_MEMBER1_ITEM_OBJECT);
		typeDerivationControlObjectEDataType = createEDataType(TYPE_DERIVATION_CONTROL_OBJECT);
		useTypeObjectEDataType = createEDataType(USE_TYPE_OBJECT);
		xpathTypeEDataType = createEDataType(XPATH_TYPE);
		xpathType1EDataType = createEDataType(XPATH_TYPE1);
	}

