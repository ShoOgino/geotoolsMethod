	/**
	 * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
	 *
	 * <p>This method is used to initialize {@link SchemaPackage#eINSTANCE} when that field is accessed.
	 * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #eNS_URI
	 * @see #createPackageContents()
	 * @see #initializePackageContents()
	 * @generated
	 */
	public static SchemaPackage init() {
		if (isInited) return (SchemaPackage)EPackage.Registry.INSTANCE.getEPackage(SchemaPackage.eNS_URI);

		// Obtain or create and register package
		Object registeredSchemaPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
		SchemaPackageImpl theSchemaPackage = registeredSchemaPackage instanceof SchemaPackageImpl ? (SchemaPackageImpl)registeredSchemaPackage : new SchemaPackageImpl();

		isInited = true;

		// Initialize simple dependencies
		XMLTypePackage.eINSTANCE.eClass();
		EcorePackage.eINSTANCE.eClass();
		XlinkPackage.eINSTANCE.eClass();
		Ows20Package.eINSTANCE.eClass();
		XMLNamespacePackage.eINSTANCE.eClass();
		XMLTypePackage.eINSTANCE.eClass();

		// Obtain or create and register interdependencies
		Object registeredPackage = EPackage.Registry.INSTANCE.getEPackage(Wps20Package.eNS_URI);
		Wps20PackageImpl theWps20Package = (Wps20PackageImpl)(registeredPackage instanceof Wps20PackageImpl ? registeredPackage : Wps20Package.eINSTANCE);

		// Create package meta-data objects
		theSchemaPackage.createPackageContents();
		theWps20Package.createPackageContents();

		// Initialize created meta-data
		theSchemaPackage.initializePackageContents();
		theWps20Package.initializePackageContents();

		// Register package validator
		EValidator.Registry.INSTANCE.put
			(theSchemaPackage,
			 new EValidator.Descriptor() {
				 public EValidator getEValidator() {
					 return SchemaValidator.INSTANCE;
				 }
			 });

		// Mark meta-data to indicate it can't be changed
		theSchemaPackage.freeze();

		// Update the registry and return the package
		EPackage.Registry.INSTANCE.put(SchemaPackage.eNS_URI, theSchemaPackage);
		return theSchemaPackage;
	}

