	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EObject create(EClass eClass) {
		switch (eClass.getClassifierID()) {
			case SchemaPackage.ALL: return createAll();
			case SchemaPackage.ANNOTATED: return createAnnotated();
			case SchemaPackage.ANNOTATION_TYPE: return createAnnotationType();
			case SchemaPackage.ANY_TYPE: return createAnyType();
			case SchemaPackage.APPINFO_TYPE: return createAppinfoType();
			case SchemaPackage.ATTRIBUTE: return createAttribute();
			case SchemaPackage.ATTRIBUTE_GROUP_REF: return createAttributeGroupRef();
			case SchemaPackage.COMPLEX_CONTENT_TYPE: return createComplexContentType();
			case SchemaPackage.COMPLEX_RESTRICTION_TYPE: return createComplexRestrictionType();
			case SchemaPackage.DOCUMENTATION_TYPE: return createDocumentationType();
			case SchemaPackage.DOCUMENT_ROOT: return createDocumentRoot();
			case SchemaPackage.EXPLICIT_GROUP: return createExplicitGroup();
			case SchemaPackage.EXTENSION_TYPE: return createExtensionType();
			case SchemaPackage.FACET: return createFacet();
			case SchemaPackage.FIELD_TYPE: return createFieldType();
			case SchemaPackage.GROUP_REF: return createGroupRef();
			case SchemaPackage.IMPORT_TYPE: return createImportType();
			case SchemaPackage.INCLUDE_TYPE: return createIncludeType();
			case SchemaPackage.KEYBASE: return createKeybase();
			case SchemaPackage.KEYREF_TYPE: return createKeyrefType();
			case SchemaPackage.LIST_TYPE: return createListType();
			case SchemaPackage.LOCAL_COMPLEX_TYPE: return createLocalComplexType();
			case SchemaPackage.LOCAL_ELEMENT: return createLocalElement();
			case SchemaPackage.LOCAL_SIMPLE_TYPE: return createLocalSimpleType();
			case SchemaPackage.NAMED_ATTRIBUTE_GROUP: return createNamedAttributeGroup();
			case SchemaPackage.NAMED_GROUP: return createNamedGroup();
			case SchemaPackage.NARROW_MAX_MIN: return createNarrowMaxMin();
			case SchemaPackage.NO_FIXED_FACET: return createNoFixedFacet();
			case SchemaPackage.NOTATION_TYPE: return createNotationType();
			case SchemaPackage.NUM_FACET: return createNumFacet();
			case SchemaPackage.OPEN_ATTRS: return createOpenAttrs();
			case SchemaPackage.PATTERN_TYPE: return createPatternType();
			case SchemaPackage.REAL_GROUP: return createRealGroup();
			case SchemaPackage.REDEFINE_TYPE: return createRedefineType();
			case SchemaPackage.RESTRICTION_TYPE: return createRestrictionType();
			case SchemaPackage.RESTRICTION_TYPE1: return createRestrictionType1();
			case SchemaPackage.SCHEMA_TYPE: return createSchemaType();
			case SchemaPackage.SELECTOR_TYPE: return createSelectorType();
			case SchemaPackage.SIMPLE_CONTENT_TYPE: return createSimpleContentType();
			case SchemaPackage.SIMPLE_EXPLICIT_GROUP: return createSimpleExplicitGroup();
			case SchemaPackage.SIMPLE_EXTENSION_TYPE: return createSimpleExtensionType();
			case SchemaPackage.SIMPLE_RESTRICTION_TYPE: return createSimpleRestrictionType();
			case SchemaPackage.TOP_LEVEL_ATTRIBUTE: return createTopLevelAttribute();
			case SchemaPackage.TOP_LEVEL_COMPLEX_TYPE: return createTopLevelComplexType();
			case SchemaPackage.TOP_LEVEL_ELEMENT: return createTopLevelElement();
			case SchemaPackage.TOP_LEVEL_SIMPLE_TYPE: return createTopLevelSimpleType();
			case SchemaPackage.TOTAL_DIGITS_TYPE: return createTotalDigitsType();
			case SchemaPackage.UNION_TYPE: return createUnionType();
			case SchemaPackage.WHITE_SPACE_TYPE: return createWhiteSpaceType();
			case SchemaPackage.WILDCARD: return createWildcard();
			default:
				throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
		}
	}

