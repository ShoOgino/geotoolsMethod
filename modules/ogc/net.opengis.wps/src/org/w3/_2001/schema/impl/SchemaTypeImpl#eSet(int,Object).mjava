	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case SchemaPackage.SCHEMA_TYPE__GROUP:
				((FeatureMap.Internal)getGroup()).set(newValue);
				return;
			case SchemaPackage.SCHEMA_TYPE__INCLUDE:
				getInclude().clear();
				getInclude().addAll((Collection<? extends IncludeType>)newValue);
				return;
			case SchemaPackage.SCHEMA_TYPE__IMPORT:
				getImport().clear();
				getImport().addAll((Collection<? extends ImportType>)newValue);
				return;
			case SchemaPackage.SCHEMA_TYPE__REDEFINE:
				getRedefine().clear();
				getRedefine().addAll((Collection<? extends RedefineType>)newValue);
				return;
			case SchemaPackage.SCHEMA_TYPE__ANNOTATION:
				getAnnotation().clear();
				getAnnotation().addAll((Collection<? extends AnnotationType>)newValue);
				return;
			case SchemaPackage.SCHEMA_TYPE__GROUP1:
				((FeatureMap.Internal)getGroup1()).set(newValue);
				return;
			case SchemaPackage.SCHEMA_TYPE__SIMPLE_TYPE:
				getSimpleType().clear();
				getSimpleType().addAll((Collection<? extends TopLevelSimpleType>)newValue);
				return;
			case SchemaPackage.SCHEMA_TYPE__COMPLEX_TYPE:
				getComplexType().clear();
				getComplexType().addAll((Collection<? extends TopLevelComplexType>)newValue);
				return;
			case SchemaPackage.SCHEMA_TYPE__GROUP2:
				getGroup2().clear();
				getGroup2().addAll((Collection<? extends NamedGroup>)newValue);
				return;
			case SchemaPackage.SCHEMA_TYPE__ATTRIBUTE_GROUP:
				getAttributeGroup().clear();
				getAttributeGroup().addAll((Collection<? extends NamedAttributeGroup>)newValue);
				return;
			case SchemaPackage.SCHEMA_TYPE__ELEMENT:
				getElement().clear();
				getElement().addAll((Collection<? extends TopLevelElement>)newValue);
				return;
			case SchemaPackage.SCHEMA_TYPE__ATTRIBUTE:
				getAttribute().clear();
				getAttribute().addAll((Collection<? extends TopLevelAttribute>)newValue);
				return;
			case SchemaPackage.SCHEMA_TYPE__NOTATION:
				getNotation().clear();
				getNotation().addAll((Collection<? extends NotationType>)newValue);
				return;
			case SchemaPackage.SCHEMA_TYPE__ANNOTATION1:
				getAnnotation1().clear();
				getAnnotation1().addAll((Collection<? extends AnnotationType>)newValue);
				return;
			case SchemaPackage.SCHEMA_TYPE__ATTRIBUTE_FORM_DEFAULT:
				setAttributeFormDefault((FormChoice)newValue);
				return;
			case SchemaPackage.SCHEMA_TYPE__BLOCK_DEFAULT:
				setBlockDefault(newValue);
				return;
			case SchemaPackage.SCHEMA_TYPE__ELEMENT_FORM_DEFAULT:
				setElementFormDefault((FormChoice)newValue);
				return;
			case SchemaPackage.SCHEMA_TYPE__FINAL_DEFAULT:
				setFinalDefault(newValue);
				return;
			case SchemaPackage.SCHEMA_TYPE__ID:
				setId((String)newValue);
				return;
			case SchemaPackage.SCHEMA_TYPE__LANG:
				setLang((String)newValue);
				return;
			case SchemaPackage.SCHEMA_TYPE__TARGET_NAMESPACE:
				setTargetNamespace((String)newValue);
				return;
			case SchemaPackage.SCHEMA_TYPE__VERSION:
				setVersion((String)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

