	/**
	 * Calls <code>validateXXX</code> for the corresponding classifier of the model.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected boolean validate(int classifierID, Object value, DiagnosticChain diagnostics, Map<Object, Object> context) {
		switch (classifierID) {
			case SchemaPackage.ALL:
				return validateAll((All)value, diagnostics, context);
			case SchemaPackage.ANNOTATED:
				return validateAnnotated((Annotated)value, diagnostics, context);
			case SchemaPackage.ANNOTATION_TYPE:
				return validateAnnotationType((AnnotationType)value, diagnostics, context);
			case SchemaPackage.ANY_TYPE:
				return validateAnyType((AnyType)value, diagnostics, context);
			case SchemaPackage.APPINFO_TYPE:
				return validateAppinfoType((AppinfoType)value, diagnostics, context);
			case SchemaPackage.ATTRIBUTE:
				return validateAttribute((Attribute)value, diagnostics, context);
			case SchemaPackage.ATTRIBUTE_GROUP:
				return validateAttributeGroup((AttributeGroup)value, diagnostics, context);
			case SchemaPackage.ATTRIBUTE_GROUP_REF:
				return validateAttributeGroupRef((AttributeGroupRef)value, diagnostics, context);
			case SchemaPackage.COMPLEX_CONTENT_TYPE:
				return validateComplexContentType((ComplexContentType)value, diagnostics, context);
			case SchemaPackage.COMPLEX_RESTRICTION_TYPE:
				return validateComplexRestrictionType((ComplexRestrictionType)value, diagnostics, context);
			case SchemaPackage.COMPLEX_TYPE:
				return validateComplexType((ComplexType)value, diagnostics, context);
			case SchemaPackage.DOCUMENTATION_TYPE:
				return validateDocumentationType((DocumentationType)value, diagnostics, context);
			case SchemaPackage.DOCUMENT_ROOT:
				return validateDocumentRoot((DocumentRoot)value, diagnostics, context);
			case SchemaPackage.ELEMENT:
				return validateElement((Element)value, diagnostics, context);
			case SchemaPackage.EXPLICIT_GROUP:
				return validateExplicitGroup((ExplicitGroup)value, diagnostics, context);
			case SchemaPackage.EXTENSION_TYPE:
				return validateExtensionType((ExtensionType)value, diagnostics, context);
			case SchemaPackage.FACET:
				return validateFacet((Facet)value, diagnostics, context);
			case SchemaPackage.FIELD_TYPE:
				return validateFieldType((FieldType)value, diagnostics, context);
			case SchemaPackage.GROUP:
				return validateGroup((Group)value, diagnostics, context);
			case SchemaPackage.GROUP_REF:
				return validateGroupRef((GroupRef)value, diagnostics, context);
			case SchemaPackage.IMPORT_TYPE:
				return validateImportType((ImportType)value, diagnostics, context);
			case SchemaPackage.INCLUDE_TYPE:
				return validateIncludeType((IncludeType)value, diagnostics, context);
			case SchemaPackage.KEYBASE:
				return validateKeybase((Keybase)value, diagnostics, context);
			case SchemaPackage.KEYREF_TYPE:
				return validateKeyrefType((KeyrefType)value, diagnostics, context);
			case SchemaPackage.LIST_TYPE:
				return validateListType((ListType)value, diagnostics, context);
			case SchemaPackage.LOCAL_COMPLEX_TYPE:
				return validateLocalComplexType((LocalComplexType)value, diagnostics, context);
			case SchemaPackage.LOCAL_ELEMENT:
				return validateLocalElement((LocalElement)value, diagnostics, context);
			case SchemaPackage.LOCAL_SIMPLE_TYPE:
				return validateLocalSimpleType((LocalSimpleType)value, diagnostics, context);
			case SchemaPackage.NAMED_ATTRIBUTE_GROUP:
				return validateNamedAttributeGroup((NamedAttributeGroup)value, diagnostics, context);
			case SchemaPackage.NAMED_GROUP:
				return validateNamedGroup((NamedGroup)value, diagnostics, context);
			case SchemaPackage.NARROW_MAX_MIN:
				return validateNarrowMaxMin((NarrowMaxMin)value, diagnostics, context);
			case SchemaPackage.NO_FIXED_FACET:
				return validateNoFixedFacet((NoFixedFacet)value, diagnostics, context);
			case SchemaPackage.NOTATION_TYPE:
				return validateNotationType((NotationType)value, diagnostics, context);
			case SchemaPackage.NUM_FACET:
				return validateNumFacet((NumFacet)value, diagnostics, context);
			case SchemaPackage.OPEN_ATTRS:
				return validateOpenAttrs((OpenAttrs)value, diagnostics, context);
			case SchemaPackage.PATTERN_TYPE:
				return validatePatternType((PatternType)value, diagnostics, context);
			case SchemaPackage.REAL_GROUP:
				return validateRealGroup((RealGroup)value, diagnostics, context);
			case SchemaPackage.REDEFINE_TYPE:
				return validateRedefineType((RedefineType)value, diagnostics, context);
			case SchemaPackage.RESTRICTION_TYPE:
				return validateRestrictionType((RestrictionType)value, diagnostics, context);
			case SchemaPackage.RESTRICTION_TYPE1:
				return validateRestrictionType1((RestrictionType1)value, diagnostics, context);
			case SchemaPackage.SCHEMA_TYPE:
				return validateSchemaType((SchemaType)value, diagnostics, context);
			case SchemaPackage.SELECTOR_TYPE:
				return validateSelectorType((SelectorType)value, diagnostics, context);
			case SchemaPackage.SIMPLE_CONTENT_TYPE:
				return validateSimpleContentType((SimpleContentType)value, diagnostics, context);
			case SchemaPackage.SIMPLE_EXPLICIT_GROUP:
				return validateSimpleExplicitGroup((SimpleExplicitGroup)value, diagnostics, context);
			case SchemaPackage.SIMPLE_EXTENSION_TYPE:
				return validateSimpleExtensionType((SimpleExtensionType)value, diagnostics, context);
			case SchemaPackage.SIMPLE_RESTRICTION_TYPE:
				return validateSimpleRestrictionType((SimpleRestrictionType)value, diagnostics, context);
			case SchemaPackage.SIMPLE_TYPE:
				return validateSimpleType((SimpleType)value, diagnostics, context);
			case SchemaPackage.TOP_LEVEL_ATTRIBUTE:
				return validateTopLevelAttribute((TopLevelAttribute)value, diagnostics, context);
			case SchemaPackage.TOP_LEVEL_COMPLEX_TYPE:
				return validateTopLevelComplexType((TopLevelComplexType)value, diagnostics, context);
			case SchemaPackage.TOP_LEVEL_ELEMENT:
				return validateTopLevelElement((TopLevelElement)value, diagnostics, context);
			case SchemaPackage.TOP_LEVEL_SIMPLE_TYPE:
				return validateTopLevelSimpleType((TopLevelSimpleType)value, diagnostics, context);
			case SchemaPackage.TOTAL_DIGITS_TYPE:
				return validateTotalDigitsType((TotalDigitsType)value, diagnostics, context);
			case SchemaPackage.UNION_TYPE:
				return validateUnionType((UnionType)value, diagnostics, context);
			case SchemaPackage.WHITE_SPACE_TYPE:
				return validateWhiteSpaceType((WhiteSpaceType)value, diagnostics, context);
			case SchemaPackage.WILDCARD:
				return validateWildcard((Wildcard)value, diagnostics, context);
			case SchemaPackage.ALL_NNI_MEMBER1:
				return validateAllNNIMember1((AllNNIMember1)value, diagnostics, context);
			case SchemaPackage.BLOCK_SET_MEMBER0:
				return validateBlockSetMember0((BlockSetMember0)value, diagnostics, context);
			case SchemaPackage.BLOCK_SET_MEMBER1_ITEM:
				return validateBlockSetMember1Item((BlockSetMember1Item)value, diagnostics, context);
			case SchemaPackage.DERIVATION_CONTROL:
				return validateDerivationControl((DerivationControl)value, diagnostics, context);
			case SchemaPackage.DERIVATION_SET_MEMBER0:
				return validateDerivationSetMember0((DerivationSetMember0)value, diagnostics, context);
			case SchemaPackage.FORM_CHOICE:
				return validateFormChoice((FormChoice)value, diagnostics, context);
			case SchemaPackage.FULL_DERIVATION_SET_MEMBER0:
				return validateFullDerivationSetMember0((FullDerivationSetMember0)value, diagnostics, context);
			case SchemaPackage.NAMESPACE_LIST_MEMBER0:
				return validateNamespaceListMember0((NamespaceListMember0)value, diagnostics, context);
			case SchemaPackage.NAMESPACE_LIST_MEMBER1_ITEM_MEMBER1:
				return validateNamespaceListMember1ItemMember1((NamespaceListMember1ItemMember1)value, diagnostics, context);
			case SchemaPackage.PROCESS_CONTENTS_TYPE:
				return validateProcessContentsType((ProcessContentsType)value, diagnostics, context);
			case SchemaPackage.REDUCED_DERIVATION_CONTROL:
				return validateReducedDerivationControl((ReducedDerivationControl)value, diagnostics, context);
			case SchemaPackage.SIMPLE_DERIVATION_SET_MEMBER0:
				return validateSimpleDerivationSetMember0((SimpleDerivationSetMember0)value, diagnostics, context);
			case SchemaPackage.SIMPLE_DERIVATION_SET_MEMBER1_ITEM:
				return validateSimpleDerivationSetMember1Item((SimpleDerivationSetMember1Item)value, diagnostics, context);
			case SchemaPackage.TYPE_DERIVATION_CONTROL:
				return validateTypeDerivationControl((TypeDerivationControl)value, diagnostics, context);
			case SchemaPackage.USE_TYPE:
				return validateUseType((UseType)value, diagnostics, context);
			case SchemaPackage.ALL_NNI:
				return validateAllNNI(value, diagnostics, context);
			case SchemaPackage.ALL_NNI_MEMBER1_OBJECT:
				return validateAllNNIMember1Object((AllNNIMember1)value, diagnostics, context);
			case SchemaPackage.BLOCK_SET:
				return validateBlockSet(value, diagnostics, context);
			case SchemaPackage.BLOCK_SET_MEMBER0_OBJECT:
				return validateBlockSetMember0Object((BlockSetMember0)value, diagnostics, context);
			case SchemaPackage.BLOCK_SET_MEMBER1:
				return validateBlockSetMember1((List<?>)value, diagnostics, context);
			case SchemaPackage.BLOCK_SET_MEMBER1_ITEM_OBJECT:
				return validateBlockSetMember1ItemObject((BlockSetMember1Item)value, diagnostics, context);
			case SchemaPackage.DERIVATION_CONTROL_OBJECT:
				return validateDerivationControlObject((DerivationControl)value, diagnostics, context);
			case SchemaPackage.DERIVATION_SET:
				return validateDerivationSet(value, diagnostics, context);
			case SchemaPackage.DERIVATION_SET_MEMBER0_OBJECT:
				return validateDerivationSetMember0Object((DerivationSetMember0)value, diagnostics, context);
			case SchemaPackage.DERIVATION_SET_MEMBER1:
				return validateDerivationSetMember1((List<?>)value, diagnostics, context);
			case SchemaPackage.FORM_CHOICE_OBJECT:
				return validateFormChoiceObject((FormChoice)value, diagnostics, context);
			case SchemaPackage.FULL_DERIVATION_SET:
				return validateFullDerivationSet(value, diagnostics, context);
			case SchemaPackage.FULL_DERIVATION_SET_MEMBER0_OBJECT:
				return validateFullDerivationSetMember0Object((FullDerivationSetMember0)value, diagnostics, context);
			case SchemaPackage.FULL_DERIVATION_SET_MEMBER1:
				return validateFullDerivationSetMember1((List<?>)value, diagnostics, context);
			case SchemaPackage.MEMBER_TYPES_TYPE:
				return validateMemberTypesType((List<?>)value, diagnostics, context);
			case SchemaPackage.NAMESPACE_LIST:
				return validateNamespaceList(value, diagnostics, context);
			case SchemaPackage.NAMESPACE_LIST_MEMBER0_OBJECT:
				return validateNamespaceListMember0Object((NamespaceListMember0)value, diagnostics, context);
			case SchemaPackage.NAMESPACE_LIST_MEMBER1:
				return validateNamespaceListMember1((List<?>)value, diagnostics, context);
			case SchemaPackage.NAMESPACE_LIST_MEMBER1_ITEM:
				return validateNamespaceListMember1Item(value, diagnostics, context);
			case SchemaPackage.NAMESPACE_LIST_MEMBER1_ITEM_MEMBER1_OBJECT:
				return validateNamespaceListMember1ItemMember1Object((NamespaceListMember1ItemMember1)value, diagnostics, context);
			case SchemaPackage.PROCESS_CONTENTS_TYPE_OBJECT:
				return validateProcessContentsTypeObject((ProcessContentsType)value, diagnostics, context);
			case SchemaPackage.PUBLIC:
				return validatePublic((String)value, diagnostics, context);
			case SchemaPackage.REDUCED_DERIVATION_CONTROL_OBJECT:
				return validateReducedDerivationControlObject((ReducedDerivationControl)value, diagnostics, context);
			case SchemaPackage.SIMPLE_DERIVATION_SET:
				return validateSimpleDerivationSet(value, diagnostics, context);
			case SchemaPackage.SIMPLE_DERIVATION_SET_MEMBER0_OBJECT:
				return validateSimpleDerivationSetMember0Object((SimpleDerivationSetMember0)value, diagnostics, context);
			case SchemaPackage.SIMPLE_DERIVATION_SET_MEMBER1:
				return validateSimpleDerivationSetMember1((List<?>)value, diagnostics, context);
			case SchemaPackage.SIMPLE_DERIVATION_SET_MEMBER1_ITEM_OBJECT:
				return validateSimpleDerivationSetMember1ItemObject((SimpleDerivationSetMember1Item)value, diagnostics, context);
			case SchemaPackage.TYPE_DERIVATION_CONTROL_OBJECT:
				return validateTypeDerivationControlObject((TypeDerivationControl)value, diagnostics, context);
			case SchemaPackage.USE_TYPE_OBJECT:
				return validateUseTypeObject((UseType)value, diagnostics, context);
			case SchemaPackage.XPATH_TYPE:
				return validateXpathType((String)value, diagnostics, context);
			case SchemaPackage.XPATH_TYPE1:
				return validateXpathType1((String)value, diagnostics, context);
			default:
				return true;
		}
	}

