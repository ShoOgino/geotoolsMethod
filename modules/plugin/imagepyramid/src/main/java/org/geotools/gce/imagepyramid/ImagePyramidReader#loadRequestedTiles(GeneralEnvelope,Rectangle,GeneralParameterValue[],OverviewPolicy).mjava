	/**
	 * This method loads the tiles which overlap the requested envelope using
	 * the provided values for alpha and input ROI.
	 * 
	 * @param requestedEnvelope
	 * @param alpha
	 * @param alphaThreshold
	 * @param singleImageROI
	 * @param singleImageROIThreshold
	 * @param dim
	 * @param overviewPolicy 
	 * @param ggParam
	 * @return A {@link GridCoverage}, well actually a {@link GridCoverage2D}.
	 * @throws TransformException
	 * @throws IOException
	 * @throws IOException
	 * @throws FileNotFoundException
	 * @throws IllegalArgumentException
	 * @throws FactoryRegistryException
	 */
	private GridCoverage2D loadRequestedTiles(
			GeneralEnvelope requestedEnvelope,
			Rectangle dim, 
			GeneralParameterValue[] params, 
			OverviewPolicy overviewPolicy)
			throws TransformException, IOException {

		// if we get here we have something to load
		// /////////////////////////////////////////////////////////////////////
		//
		// compute the requested resolution
		//
		// /////////////////////////////////////////////////////////////////////
		final ImageReadParam readP = new ImageReadParam();
		Integer imageChoice=0;
		if (dim != null)
			imageChoice = setReadParams(overviewPolicy, readP,requestedEnvelope, dim);
		// /////////////////////////////////////////////////////////////////////
		//
		// Check to have the needed reader in memory
		// 
		// /////////////////////////////////////////////////////////////////////
		ImageMosaicReader reader = null;
		synchronized (readers) {
			Object o = readers.get(imageChoice);
			if (o == null) {
				final String levelDirName = levelsDirs[imageChoice.intValue()];
				final URL parentUrl = DataUtilities.getParentUrl(sourceURL);
				// look for a shapefile first
				final String extension = new StringBuilder(levelDirName).append("/").append(coverageName).append(".shp").toString();
				final URL shpFileUrl = DataUtilities.extendURL(parentUrl,extension);
				if(shpFileUrl.getProtocol()!=null&&shpFileUrl.getProtocol().equalsIgnoreCase("file")&&!DataUtilities.urlToFile(shpFileUrl).exists())
					reader= new ImageMosaicReader(DataUtilities.extendURL(parentUrl,levelDirName), hints);
				else
					reader = new ImageMosaicReader(shpFileUrl,hints);
				readers.put(imageChoice, reader);

			} else
				reader = (ImageMosaicReader) o;
		}

	
		//
		// Abusing of the created ImageMosaicreader for getting a
		// gridcoverage2d, then rename it
		//
		GridCoverage2D mosaicCoverage = reader.read(params);
		if(mosaicCoverage != null) {
		    return new GridCoverage2D(coverageName, mosaicCoverage);
		} else {
		    // the mosaic can still return null in corner cases, handle that gracefully
		    return null;
		}
	}

