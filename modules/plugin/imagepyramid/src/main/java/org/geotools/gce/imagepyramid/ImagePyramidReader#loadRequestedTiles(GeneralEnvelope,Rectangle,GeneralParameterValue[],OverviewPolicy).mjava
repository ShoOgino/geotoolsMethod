	/**
	 * This method loads the tiles which overlap the requested envelope using
	 * the provided values for alpha and input ROI.
	 * 
	 * @param requestedEnvelope
	 * @param alpha
	 * @param alphaThreshold
	 * @param singleImageROI
	 * @param singleImageROIThreshold
	 * @param dim
	 * @param overviewPolicy 
	 * @param ggParam
	 * @return A {@link GridCoverage}, well actually a {@link GridCoverage2D}.
	 * @throws TransformException
	 * @throws IOException
	 * @throws IOException
	 * @throws FileNotFoundException
	 * @throws IllegalArgumentException
	 * @throws FactoryRegistryException
	 */
	private GridCoverage2D loadRequestedTiles(
			GeneralEnvelope requestedEnvelope,
			Rectangle dim, 
			GeneralParameterValue[] params, 
			OverviewPolicy overviewPolicy)
			throws TransformException, IOException {

		// if we get here we have something to load
	    
		//
		// compute the requested resolution
		//
		final ImageReadParam readP = new ImageReadParam();
		Integer imageChoice=0;
		if (dim != null)
			imageChoice = setReadParams(overviewPolicy, readP,requestedEnvelope, dim);
		
		//
		// Check to have the needed reader in memory
		// 
		
                // light check to see if this reader had been disposed, not synching for performance. 
                if (readers == null) {
                    throw new IllegalStateException("This ImagePyramidReader has already been disposed");
                }
		
                ImageMosaicReader reader = readers.get(imageChoice);
                if (reader == null) {
        
                    //
                    // we must create the underlying mosaic 
                    //
                    final String levelDirName = levelsDirs[imageChoice.intValue()];
                    final URL parentUrl = DataUtilities.getParentUrl(sourceURL);
                    // look for a shapefile first
                    final String extension = new StringBuilder(levelDirName).append("/").append(coverageName).append(".shp").toString();
                    final URL shpFileUrl = DataUtilities.extendURL(parentUrl, extension);
                    if (shpFileUrl.getProtocol() != null
                            && shpFileUrl.getProtocol().equalsIgnoreCase("file")
                            && !DataUtilities.urlToFile(shpFileUrl).exists())
                        reader = new ImageMosaicReader(DataUtilities.extendURL(parentUrl, levelDirName), hints);
                    else
                        reader = new ImageMosaicReader(shpFileUrl, hints);
                    final ImageMosaicReader putByOtherThreadJustNow =readers.putIfAbsent(imageChoice, reader);
                    if(putByOtherThreadJustNow!=null){
                        // some other thread just did inserted this
                        try{
                            reader.dispose();
                        } catch (Exception e) {
                            if(LOGGER.isLoggable(Level.FINE)){
                                LOGGER.log(Level.FINE,e.getLocalizedMessage(),e);
                            }
                        }
                        
                        //use the other one
                        reader=putByOtherThreadJustNow;
                    }
        
		}

	
		//
		// Abusing of the created ImageMosaicreader for getting a
		// gridcoverage2d, then rename it
		//
		GridCoverage2D mosaicCoverage = reader.read(params);
		if(mosaicCoverage != null) {
		    return new GridCoverage2D(coverageName, mosaicCoverage);
		} else {
		    // the mosaic can still return null in corner cases, handle that gracefully
		    return null;
		}
	}

