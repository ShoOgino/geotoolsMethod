	/**
	 * @see org.geotools.data.coverage.grid.AbstractGridFormat#accepts(Object
	 *      input)
	 */
	@Override
	public boolean accepts(Object source, Hints hints) {
		try {

            // /////////////////////////////////////////////////////////////////////
            //
            // Check source
            //
            // /////////////////////////////////////////////////////////////////////
			URL sourceURL = Utils.checkSource(source, hints);
			if(sourceURL == null)
			    return false;
            try {
                sourceURL.openStream().close();
            } catch (Throwable e) {
                return false;
            }
			
			// ///////////////////////////////////////////////////////////////////
			//
			// Trying to load informations
			//
			//
			// ///////////////////////////////////////////////////////////////////
			// //
			//
			// get the crs if able to
			//
			// //
			final URL prjURL = DataUtilities.changeUrlExt(sourceURL, "prj"); 
			PrjFileReader crsReader;
			try {
				crsReader = new PrjFileReader(Channels.newChannel(prjURL.openStream()));
			} catch (FactoryException e) {
				return false;
			}
			CoordinateReferenceSystem tempcrs = crsReader.getCoordinateReferenceSystem();
			if (tempcrs == null) {
				// use the default crs
				tempcrs = AbstractGridFormat.getDefaultCRS();
				LOGGER.log(Level.FINE,new StringBuffer("Unable to find a CRS for this coverage, using a default one: ").append(tempcrs.toWKT()).toString());
			}
			//
			// ///////////////////////////////////////////////////////////////////
			//
			// Load properties file with information about levels and envelope
			//
			//
			// ///////////////////////////////////////////////////////////////////
			// property file
			final Properties properties = new Properties();
			BufferedInputStream propertyStream = null;
			if(!sourceURL.getPath().endsWith(".properties"))
				return false;
			final InputStream openStream = sourceURL.openStream();
			try {
				propertyStream = new BufferedInputStream(openStream);
				properties.load(propertyStream);
			} catch (Throwable e) {
				if(propertyStream!=null)
					propertyStream.close();
				return false;
			} finally {
				if (openStream != null) 
					openStream.close();
			}

			// load the envelope
			final String envelope = properties.getProperty("Envelope2D");
			if (envelope == null) return false;
			String[] pairs = envelope.split(" ");
			final double cornersV[][] = new double[2][2];
			String pair[];
			for (int i = 0; i < 2; i++) {
				pair = pairs[i].split(",");
				cornersV[i][0] = Double.parseDouble(pair[0]);
				cornersV[i][1] = Double.parseDouble(pair[1]);
			}

			// overviews dir
			int numOverviews = Integer.parseInt(properties.getProperty("LevelsNum")) - 1;

			// resolutions levels
			final String levels = properties.getProperty("Levels");
			pairs = levels.split(" ");
			double[][] overViewResolutions = numOverviews >= 1 ? new double[numOverviews][2]: null;
			pair = pairs[0].split(",");
			double[] highestRes = new double[2];
			highestRes[0] = Double.parseDouble(pair[0]);
			highestRes[1] = Double.parseDouble(pair[1]);
			for (int i = 1; i < numOverviews + 1; i++) {
				pair = pairs[i].split(",");
				overViewResolutions[i - 1][0] = Double.parseDouble(pair[0]);
				overViewResolutions[i - 1][1] = Double.parseDouble(pair[1]);
			}

			// name
			if (properties.getProperty("Name") == null)
				return false;

			return true;
		} catch (IOException e) {
			if (LOGGER.isLoggable(Level.FINE))
				LOGGER.log(Level.FINE, e.getLocalizedMessage(), e);
			return false;

		} catch (NumberFormatException e) {
			if (LOGGER.isLoggable(Level.FINE))
				LOGGER.log(Level.FINE, e.getLocalizedMessage(), e);
			return false;
		}

	}

