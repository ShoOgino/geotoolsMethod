    private GridCoverage2D readRasterFootprint(
            String path, File testMosaicRaster, boolean testOverviews) throws Exception {
        // create the base mosaic we are going to use
        File mosaicSourceRaster = TestData.file(this, path);
        FileUtils.copyDirectory(mosaicSourceRaster, testMosaicRaster);
        URL testMosaicRasterUrl = URLs.fileToUrl(testMosaicRaster);
        // copy the footprints mosaic properties
        Properties p = new Properties();
        // Setting Raster property
        p.put(MultiLevelROIProviderFactory.SOURCE_PROPERTY, "raster");
        try (FileOutputStream fos =
                new FileOutputStream(new File(testMosaicRaster, "footprints.properties"))) {
            p.store(fos, null);
        }
        final AbstractGridFormat format = TestUtils.getFormat(testMosaicRasterUrl);
        final ImageMosaicReader reader = TestUtils.getReader(testMosaicRasterUrl, format);

        // activate footprint management
        GeneralParameterValue[] params = new GeneralParameterValue[3];
        ParameterValue<String> footprintManagement =
                AbstractGridFormat.FOOTPRINT_BEHAVIOR.createValue();
        footprintManagement.setValue(FootprintBehavior.Transparent.name());
        params[0] = footprintManagement;

        // this prevents us from having problems with link to files still open.
        ParameterValue<Boolean> jaiImageRead = ImageMosaicFormat.USE_JAI_IMAGEREAD.createValue();
        jaiImageRead.setValue(false);
        params[1] = jaiImageRead;

        // setup how much we are going to read
        final ParameterValue<GridGeometry2D> gg =
                AbstractGridFormat.READ_GRIDGEOMETRY2D.createValue();
        final Rectangle rasterArea = ((GridEnvelope2D) reader.getOriginalGridRange());
        if (testOverviews) {
            Dimension dim = new Dimension();
            dim.setSize(8, 8);
            rasterArea.setSize(dim);
            final GridEnvelope2D range = new GridEnvelope2D(rasterArea);
            gg.setValue(new GridGeometry2D(range, reader.getOriginalEnvelope()));
            params[2] = gg;
        } else {
            final GridEnvelope2D range = new GridEnvelope2D(rasterArea);
            gg.setValue(
                    new GridGeometry2D(
                            range,
                            PixelInCell.CELL_CENTER,
                            reader.getOriginalGridToWorld(PixelInCell.CELL_CENTER),
                            reader.getCoordinateReferenceSystem(),
                            null));
            params[2] = gg;
        }
        // Read the coverage
        GridCoverage2D coverage = reader.read(params);
        reader.dispose();
        assertNotNull(coverage);
        // Check if ROI is present
        ROI roi = CoverageUtilities.getROIProperty(coverage);
        assertNotNull(roi);

        // Checking ROI Bounds
        // Ensure has the same size of the input image
        Rectangle roiBounds = roi.getBounds();
        Rectangle imgBounds = coverage.getGridGeometry().getGridRange2D();
        assertEquals(imgBounds.x, roiBounds.x);
        assertEquals(imgBounds.y, roiBounds.y);
        assertEquals(imgBounds.width, roiBounds.width);
        assertEquals(imgBounds.height, roiBounds.height);

        return coverage;
    }

