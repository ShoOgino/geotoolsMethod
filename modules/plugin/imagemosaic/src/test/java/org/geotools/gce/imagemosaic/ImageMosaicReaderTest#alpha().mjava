    /**
     * Tests the {@link ImageMosaicReader} with default parameters for the various input params.
     *
     * @throws IOException
     * @throws MismatchedDimensionException
     * @throws FactoryException
     */
    @Test
    //        @Ignore
    public void alpha() throws Exception {

        final String testName = "alpha-";
        if (INTERACTIVE)
            imageMosaicSimpleParamsTest(
                    rgbURL, null, null, testName + rgbURL.getFile() + "-original", false);
        GridCoverage2D coverage =
                imageMosaicSimpleParamsTest(
                        rgbURL, Color.black, Color.black, testName + rgbURL.getFile(), false);
        ColorModel colorModel = coverage.getRenderedImage().getColorModel();
        assertTrue(colorModel.hasAlpha());
        assertTrue(colorModel instanceof ComponentColorModel);

        if (INTERACTIVE)
            // the input images have transparency and they do overlap, we need
            // to ask for blending mosaic.
            imageMosaicSimpleParamsTest(
                    rgbAURL, null, null, testName + rgbAURL.getFile() + "-original", true);
        coverage =
                imageMosaicSimpleParamsTest(
                        rgbAURL, Color.black, Color.black, testName + rgbAURL.getFile(), false);
        colorModel = coverage.getRenderedImage().getColorModel();
        assertTrue(colorModel.hasAlpha());
        assertTrue(colorModel instanceof ComponentColorModel);

        // //
        //
        // This images have borders that are black and have a color model that
        // is IndexColorModel but all with different palette hence a color
        // conversion will be applied to go to RGB.
        //
        // When we do the input transparent color we will add transparency to
        // the images but only where the transparent color resides. Moreover the
        // background will be transparent.
        //
        // //
        if (INTERACTIVE)
            imageMosaicSimpleParamsTest(
                    indexURL, null, null, testName + indexURL.getFile() + "-original", false);
        coverage =
                imageMosaicSimpleParamsTest(
                        indexURL,
                        new Color(58, 49, 8),
                        Color.black,
                        testName + indexURL.getFile(),
                        false);
        colorModel = coverage.getRenderedImage().getColorModel();
        assertTrue(colorModel.hasAlpha());
        assertTrue(colorModel instanceof ComponentColorModel);

        if (INTERACTIVE)
            imageMosaicSimpleParamsTest(
                    overviewURL, null, null, testName + overviewURL.getFile() + "-original", false);
        coverage =
                imageMosaicSimpleParamsTest(
                        overviewURL,
                        new Color(58, 49, 8),
                        Color.black,
                        testName + overviewURL.getFile() + "-indexURL",
                        false);
        colorModel = coverage.getRenderedImage().getColorModel();
        assertTrue(colorModel.hasAlpha());
        assertTrue(colorModel instanceof ComponentColorModel);

        if (INTERACTIVE)
            imageMosaicSimpleParamsTest(
                    indexAlphaURL,
                    null,
                    null,
                    testName + indexAlphaURL.getFile() + "-original",
                    false);
        coverage =
                imageMosaicSimpleParamsTest(
                        indexAlphaURL,
                        new Color(41, 41, 33),
                        Color.black,
                        testName + indexAlphaURL.getFile(),
                        false);
        colorModel = coverage.getRenderedImage().getColorModel();
        assertTrue(colorModel.hasAlpha());
        assertTrue(colorModel instanceof ComponentColorModel);

        if (INTERACTIVE)
            imageMosaicSimpleParamsTest(
                    grayURL, null, null, testName + grayURL.getFile() + "-original", false);
        coverage =
                imageMosaicSimpleParamsTest(
                        grayURL, Color.black, Color.black, testName + grayURL.getFile(), false);
        colorModel = coverage.getRenderedImage().getColorModel();
        assertTrue(colorModel.hasAlpha());
        assertTrue(colorModel instanceof ComponentColorModel);
        ;
    }

