    /** Simple test method accessing time and 2 custom dimensions for the sample dataset */
    @Test
    public void multipleDimensionsStacked() throws Exception {

        final AbstractGridFormat format = TestUtils.getFormat(timeAdditionalDomainsURL);
        ImageMosaicReader reader = getReader(timeAdditionalDomainsURL, format);

        final String[] metadataNames = reader.getMetadataNames();
        assertNotNull(metadataNames);
        assertEquals(ADDITIONAL_DOMAINS_METADATANAMES_LENGTH, metadataNames.length);
        assertEquals("true", reader.getMetadataValue("HAS_DATE_DOMAIN"));
        assertEquals("20081031T0000000,20081101T0000000", reader.getMetadataValue("DATE_DOMAIN"));
        assertEquals("java.lang.String", reader.getMetadataValue("DATE_DOMAIN_DATATYPE"));

        // the images will stack on depth
        assertEquals("true", reader.getMetadataValue("HAS_DEPTH_DOMAIN"));
        assertEquals("false", reader.getMetadataValue("HAS_ELEVATION_DOMAIN"));
        assertEquals("20,100", reader.getMetadataValue("DEPTH_DOMAIN"));
        assertEquals("java.lang.Integer", reader.getMetadataValue("DEPTH_DOMAIN_DATATYPE"));

        // use imageio with defined tiles
        final ParameterValue<Boolean> useJai = AbstractGridFormat.USE_JAI_IMAGEREAD.createValue();
        useJai.setValue(false);
        final ParameterValue<String> tileSize =
                AbstractGridFormat.SUGGESTED_TILE_SIZE.createValue();
        tileSize.setValue("128,128");

        // specify time
        final ParameterValue<List> time = ImageMosaicFormat.TIME.createValue();
        final SimpleDateFormat formatD = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        formatD.setTimeZone(TimeZone.getTimeZone("GMT"));
        final Date timeD = formatD.parse("2008-10-31T00:00:00.000Z");
        time.setValue(Arrays.asList(timeD));

        // Stacked bands
        final ParameterValue<String> mergeStack = ImageMosaicFormat.MERGE_BEHAVIOR.createValue();
        mergeStack.setValue(MergeBehavior.STACK.toString());

        // Ensure predictable order with a sort
        final ParameterValue<String> sort = ImageMosaicFormat.SORT_BY.createValue();
        sort.setValue("depth A");

        // Test the output coverage
        GeneralParameterValue[] values =
                new GeneralParameterValue[] {useJai, tileSize, time, mergeStack, sort};
        final GridCoverage2D coverage = TestUtils.getCoverage(reader, values, false);
        assertNotNull(coverage);

        // Check that we got the expected files as inputs to the coverage. It's a comma separated
        // value, test it so that it won't fail even if the directories contain a comma inside them.
        // Also ensure the other two files were not used
        String fileLocation =
                (String) coverage.getProperty(AbstractGridCoverage2DReader.FILE_SOURCE_PROPERTY);
        assertThat(fileLocation, containsString("NCOM_wattemp_020_20081031T0000000_12.tiff,"));
        assertThat(fileLocation, endsWith("NCOM_wattemp_100_20081031T0000000_12.tiff"));
        assertThat(fileLocation, not(containsString("NCOM_wattemp_100_20081101T0000000_12.tiff")));
        assertThat(fileLocation, not(containsString("NCOM_wattemp_020_20081101T0000000_12.tiff")));

        // inspect reanderedImage
        final RenderedImage image = coverage.getRenderedImage();
        assertEquals("wrong number of bands detected", 2, image.getSampleModel().getNumBands());

        // grab a reference for the first band, and make sure the values are the same
        GeneralParameterValue[] values20 = {
            useJai, tileSize, time, dynamicParameter(reader, "depth", 20)
        };
        final GridCoverage2D coverage20 = TestUtils.getCoverage(reader, values20, false);
        assertBandEqual(image, 0, coverage20.getRenderedImage());

        // do the same for the second
        GeneralParameterValue[] values100 = {
            useJai, tileSize, time, dynamicParameter(reader, "depth", 100)
        };
        final GridCoverage2D coverage100 = TestUtils.getCoverage(reader, values20, false);
        assertBandEqual(image, 1, coverage100.getRenderedImage());

        reader.dispose();
    }

