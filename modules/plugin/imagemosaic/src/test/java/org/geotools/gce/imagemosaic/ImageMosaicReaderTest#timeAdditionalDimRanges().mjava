    /** Simple test method accessing time and 2 custom dimensions for the sample dataset */
    @Test
    @SuppressWarnings("rawtypes")
    public void timeAdditionalDimRanges() throws Exception {

        final AbstractGridFormat format = TestUtils.getFormat(timeAdditionalDomainsRangeURL);
        ImageMosaicReader reader = getReader(timeAdditionalDomainsRangeURL, format);
        try {

            final String[] metadataNames = reader.getMetadataNames();
            assertNotNull(metadataNames);
            assertEquals(ADDITIONAL_DOMAINS_METADATANAMES_LENGTH, metadataNames.length);
            assertEquals("true", reader.getMetadataValue("HAS_TIME_DOMAIN"));
            assertEquals(
                    "2008-10-31T00:00:00.000Z/2008-11-04T00:00:00.000Z/PT1S,2008-11-05T00:00:00.000Z/2008-11-07T00:00:00.000Z/PT1S",
                    reader.getMetadataValue("TIME_DOMAIN"));
            assertEquals(
                    "2008-10-31T00:00:00.000Z", reader.getMetadataValue("TIME_DOMAIN_MINIMUM"));
            assertEquals(
                    "2008-11-07T00:00:00.000Z", reader.getMetadataValue("TIME_DOMAIN_MAXIMUM"));
            String expectedType =
                    Boolean.getBoolean("org.geotools.shapefile.datetime")
                            ? "java.sql.Timestamp"
                            : "java.util.Date";
            assertEquals(expectedType, reader.getMetadataValue("TIME_DOMAIN_DATATYPE"));

            assertEquals("true", reader.getMetadataValue("HAS_ELEVATION_DOMAIN"));
            assertEquals("20/99,100/150", reader.getMetadataValue("ELEVATION_DOMAIN"));
            assertEquals("20", reader.getMetadataValue("ELEVATION_DOMAIN_MINIMUM"));
            assertEquals("150", reader.getMetadataValue("ELEVATION_DOMAIN_MAXIMUM"));
            assertEquals("java.lang.Integer", reader.getMetadataValue("ELEVATION_DOMAIN_DATATYPE"));

            assertEquals("true", reader.getMetadataValue("HAS_DATE_DOMAIN"));
            assertEquals(
                    "20081031T000000,20081101T000000,20081105T000000",
                    reader.getMetadataValue("DATE_DOMAIN"));
            assertEquals("java.lang.String", reader.getMetadataValue("DATE_DOMAIN_DATATYPE"));

            assertEquals("true", reader.getMetadataValue("HAS_WAVELENGTH_DOMAIN"));
            assertEquals("12/24,25/80", reader.getMetadataValue("WAVELENGTH_DOMAIN"));
            assertEquals("12", reader.getMetadataValue("WAVELENGTH_DOMAIN_MINIMUM"));
            assertEquals("80", reader.getMetadataValue("WAVELENGTH_DOMAIN_MAXIMUM"));
            assertEquals(
                    "java.lang.Integer", reader.getMetadataValue("WAVELENGTH_DOMAIN_DATATYPE"));

            // use imageio with defined tiles
            final ParameterValue<Boolean> useJai =
                    AbstractGridFormat.USE_JAI_IMAGEREAD.createValue();
            useJai.setValue(false);

            // specify time
            final ParameterValue<List> time = ImageMosaicFormat.TIME.createValue();
            final Date timeD = parseTimeStamp("2008-11-01T00:00:00.000Z");
            time.setValue(
                    new ArrayList<Date>() {
                        {
                            add(timeD);
                        }
                    });

            final ParameterValue<List> elevation = ImageMosaicFormat.ELEVATION.createValue();
            elevation.setValue(
                    new ArrayList<Double>() {
                        {
                            add(34d); // Elevation
                        }
                    });

            // specify additional Dimensions
            Set<ParameterDescriptor<List>> params = reader.getDynamicParameters();
            ParameterValue<List<String>> dateValue = null;
            ParameterValue<List<String>> waveLength = null;
            final String selectedWaveLength = "20";
            final String selectedDate = "20081031T000000";
            for (ParameterDescriptor param : params) {
                if (param.getName().getCode().equalsIgnoreCase("DATE")) {
                    @SuppressWarnings("unchecked")
                    ParameterValue<List<String>> value = (ParameterValue) param.createValue();
                    dateValue = value;
                    dateValue.setValue(
                            new ArrayList<String>() {
                                {
                                    add(selectedDate);
                                }
                            });
                } else if (param.getName().getCode().equalsIgnoreCase("WAVELENGTH")) {
                    @SuppressWarnings("unchecked")
                    ParameterValue<List<String>> value = (ParameterValue) param.createValue();
                    waveLength = value;
                    waveLength.setValue(
                            new ArrayList<String>() {
                                {
                                    add(selectedWaveLength);
                                }
                            });
                }
            }
            assertNotNull(waveLength);
            assertNotNull(dateValue);

            // Test the output coverage
            GeneralParameterValue[] values = {useJai, dateValue, time, waveLength, elevation};
            final GridCoverage2D coverage = TestUtils.getCoverage(reader, values, true);
            final String fileSource =
                    (String)
                            coverage.getProperty(AbstractGridCoverage2DReader.FILE_SOURCE_PROPERTY);

            // Check the proper granule has been read
            final String baseName = FilenameUtils.getBaseName(fileSource);
            assertEquals(baseName, "temp_020_099_20081031T000000_20081103T000000_12_24");
            TestUtils.testCoverage(reader, values, "domain test", coverage, null);
        } finally {
            if (reader != null) {
                reader.dispose();
            }
        }
    }

