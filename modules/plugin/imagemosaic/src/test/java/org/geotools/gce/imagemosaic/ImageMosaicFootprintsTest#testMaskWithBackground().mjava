    @Test
    @Ignore
    public void testMaskWithBackground() throws Exception {
        TemporaryFolder folder = new TemporaryFolder();
        folder.create();
        File multiWkts = folder.getRoot();
        FileUtils.copyDirectory(TestData.file(this, "footprint_wkts"), multiWkts);

        // Setting up granules footprint properties
        Properties p = new Properties();
        p.put(
                MultiLevelROIProviderFactory.SOURCE_PROPERTY,
                MultiLevelROIProviderFactory.TYPE_MULTIPLE_SIDECAR);
        try (FileOutputStream fos =
                new FileOutputStream(new File(multiWkts, "footprints.properties"))) {
            p.store(fos, null);
        }

        ImageMosaicFormat format = new ImageMosaicFormat();
        ImageMosaicReader reader = null;
        GridCoverage2D coverage = null;
        try {
            reader = format.getReader(multiWkts);

            List<GeneralParameterValue> paramList = new ArrayList<GeneralParameterValue>();

            // Setup reading params
            // FOOTPRINT
            ParameterValue<String> footprintManagement =
                    AbstractGridFormat.FOOTPRINT_BEHAVIOR.createValue();
            footprintManagement.setValue(FootprintBehavior.Cut.name());
            paramList.add(footprintManagement);

            // MASKING
            ParameterValue<Geometry> maskParam = ImageMosaicFormat.GEOMETRY_MASK.createValue();
            maskParam.setValue(geometryMask);
            paramList.add(maskParam);

            // SETROI
            ParameterValue<Boolean> setRoiParam = ImageMosaicFormat.SET_ROI_PROPERTY.createValue();
            setRoiParam.setValue(true);
            paramList.add(setRoiParam);

            // Background Values
            ParameterValue<double[]> bg = ImageMosaicFormat.BACKGROUND_VALUES.createValue();
            double[] bgValues = new double[] {0, 255, 0};
            bg.setValue(bgValues);
            paramList.add(bg);

            // GRIDGEOMETRY (specify a chunk of the whole envelope)
            final GeneralEnvelope oldEnvelope = reader.getOriginalEnvelope();
            final GeneralEnvelope cropEnvelope =
                    new GeneralEnvelope(
                            new double[] {
                                oldEnvelope.getLowerCorner().getOrdinate(0)
                                        + oldEnvelope.getSpan(0) / 4,
                                oldEnvelope.getLowerCorner().getOrdinate(1)
                                        + oldEnvelope.getSpan(1) / 2
                            },
                            new double[] {
                                oldEnvelope.getUpperCorner().getOrdinate(0)
                                        - oldEnvelope.getSpan(0) / 2,
                                oldEnvelope.getUpperCorner().getOrdinate(1)
                            });
            cropEnvelope.setCoordinateReferenceSystem(reader.getCoordinateReferenceSystem());

            ParameterValue<GridGeometry2D> gg =
                    AbstractGridFormat.READ_GRIDGEOMETRY2D.createValue();
            gg.setValue(
                    new GridGeometry2D(
                            PixelInCell.CELL_CENTER,
                            reader.getOriginalGridToWorld(PixelInCell.CELL_CENTER),
                            cropEnvelope,
                            null));
            paramList.add(gg);

            GeneralParameterValue[] params = new GeneralParameterValue[paramList.size()];
            params = paramList.toArray(params);

            coverage = reader.read(params);

            // Extract the resulting mask as ROI property of the resulting coverage
            RenderedImage image = coverage.getRenderedImage();
            ROIGeometry roi = (ROIGeometry) image.getProperty("ROI");

            // Transform the ROI to model space
            MathTransform2D tx =
                    coverage.getGridGeometry()
                            .getCRSToGrid2D(PixelOrientation.UPPER_LEFT)
                            .inverse();
            Geometry roiGeometry = roi.getAsGeometry();
            Geometry coverageGeometry = JTS.transform(roiGeometry, tx);
            double coverageMaskArea = coverageGeometry.getArea();

            Geometry intersectingMask = geometryMask;
            Geometry requestedAreaGeometry = JTS.toGeometry(new ReferencedEnvelope(cropEnvelope));

            // Combine the granules footprint
            Geometry leftGeometry = readWktGeometry("r1c1.wkt");
            Geometry rightGeometry = readWktGeometry("r1c2.wkt");
            Geometry unionGeometry = leftGeometry.union(rightGeometry);

            // intersect the requested area with the mask
            Geometry maskedGeometry = requestedAreaGeometry.intersection(intersectingMask);

            // intersect the footprint union with the resulting mask
            maskedGeometry = unionGeometry.intersection(maskedGeometry);
            maskedGeometry = maskedGeometry.getGeometryN(1);
            double inputMaskArea = maskedGeometry.getArea();

            // Make sure the mask matches by doing area check and subtractions area check
            Geometry aMinusB = EnhancedPrecisionOp.difference(coverageGeometry, maskedGeometry);
            Geometry bMinusA = EnhancedPrecisionOp.difference(maskedGeometry, coverageGeometry);

            if (DEBUG) {
                RenderedImageBrowser.showChain(image);
                // wait for an input key so you can check the image
                System.in.read();
            }
            assertEquals(inputMaskArea, coverageMaskArea, 1E-3);
            assertEquals(0, aMinusB.getArea(), 1E-3);
            assertEquals(0, bMinusA.getArea(), 1E-3);

            // Get a pixel living outside of the mask
            int[] pixel = new int[3];
            image.getData().getPixel(0, 0, pixel);
            for (int i = 0; i < 3; i++) {
                assertEquals(pixel[i], (int) bgValues[i]);
            }
        } finally {
            if (coverage != null) {
                coverage.dispose(true);
            }
            if (reader != null) {
                try {
                    reader.dispose();
                } catch (Exception e) {
                    // Does Nothing
                }
            }
        }
    }

