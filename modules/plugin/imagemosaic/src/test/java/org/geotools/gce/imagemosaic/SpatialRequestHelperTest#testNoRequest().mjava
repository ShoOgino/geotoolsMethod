    /**
     * Requesting the same area at a much smaller resolution.
     *
     * <p>The computed resolution should be much coarser and that is it.
     */
    @Test
    public void testNoRequest() throws Exception {

        // using CoverageProperties to build the SpatialRequestHelper
        CoverageProperties coverageProperties = new CoverageProperties();

        // source area in project crs
        CoordinateReferenceSystem sourceCRS = DefaultGeographicCRS.WGS84;
        ReferencedEnvelope sourceBBox = new ReferencedEnvelope(-180, 180, -90, 90, sourceCRS);
        coverageProperties.setBBox(sourceBBox);
        coverageProperties.setCrs2D(sourceCRS);

        // raster area
        Rectangle sourceRasterArea = new Rectangle(0, 0, 1000, 1000);
        coverageProperties.setRasterArea(sourceRasterArea);

        // creating the g2d
        final GridToEnvelopeMapper geMapper =
                new GridToEnvelopeMapper(new GridEnvelope2D(sourceRasterArea), sourceBBox);
        AffineTransform sourceGridToWorldTransform = geMapper.createAffineTransform();
        coverageProperties.setGridToWorld2D((MathTransform2D) sourceGridToWorldTransform);
        coverageProperties.setFullResolution(
                new double[] {
                    XAffineTransform.getScaleX0(sourceGridToWorldTransform),
                    XAffineTransform.getScaleY0(sourceGridToWorldTransform),
                });
        coverageProperties.setGeographicBBox(sourceBBox);
        coverageProperties.setGeographicCRS2D(DefaultGeographicCRS.WGS84);
        SpatialRequestHelper spatialRequestHelper = new SpatialRequestHelper(coverageProperties);

        //
        // no target request
        //

        ///// TEST
        spatialRequestHelper.compute();
        assertFalse(spatialRequestHelper.isEmpty());
        assertFalse(spatialRequestHelper.isNeedsReprojection()); // no reprojection

        // computed raster area
        Rectangle computedRasterArea = spatialRequestHelper.getComputedRasterArea();
        assertFalse(computedRasterArea.isEmpty());
        assertEquals(computedRasterArea, coverageProperties.rasterArea);

        // computed bbox
        BoundingBox computedBBox = spatialRequestHelper.getComputedBBox();
        assertFalse(computedBBox.isEmpty());
        assertEquals(computedBBox, sourceBBox);

        // transform
        AffineTransform computedG2W = spatialRequestHelper.getComputedGridToWorld();
        assertNotNull(computedG2W);
        double[] computedResolution = spatialRequestHelper.getComputedResolution();
        double scale = 1; // we scaled down the original image
        assertNotNull(computedResolution);
        assertEquals(
                scale * XAffineTransform.getScaleX0(sourceGridToWorldTransform),
                computedResolution[0],
                1E-6);
        assertEquals(
                scale * XAffineTransform.getScaleY0(sourceGridToWorldTransform),
                computedResolution[1],
                1E-6);

        // all this intersecting and so on MUST not impact the requested resolutions
        GridToEnvelopeMapper gridToEnvelopeMapper =
                new GridToEnvelopeMapper(
                        new GridEnvelope2D(coverageProperties.rasterArea), sourceBBox);
        gridToEnvelopeMapper.setPixelAnchor(PixelInCell.CELL_CORNER);
        double[] expectedResolution = {
            XAffineTransform.getScaleX0(gridToEnvelopeMapper.createAffineTransform()),
            XAffineTransform.getScaleY0(gridToEnvelopeMapper.createAffineTransform())
        };
        assertNotNull(computedResolution);
        assertEquals(expectedResolution[0], computedResolution[0], 1E-6);
        assertEquals(expectedResolution[1], computedResolution[1], 1E-6);

        // for code coverage
        assertNotNull(spatialRequestHelper.toString());

        // accurate resolution
        // should not change anything since it is used only when there is a reprojection involved
        spatialRequestHelper.setAccurateResolution(true);
        spatialRequestHelper.compute();
        double[] computedResolution2 = spatialRequestHelper.getComputedResolution();
        assertEquals(computedResolution[0], computedResolution2[0], 1E-6);
        assertEquals(computedResolution[1], computedResolution2[1], 1E-6);
    }

