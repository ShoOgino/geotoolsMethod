    @Test
    public void testHarvestWithExtraNonSpatialFile() throws Exception {
        File source = URLs.urlToFile(rgbAURLTiff);
        File extras = URLs.urlToFile(rgbaExtraURLTiff);
        File testDataDir = TestData.file(this, ".");
        File directory = new File(testDataDir, "rgba_tiff_extra_test");
        if (directory.exists()) {
            FileUtils.deleteDirectory(directory);
        }
        FileUtils.copyDirectory(source, directory);
        FileUtils.copyDirectory(extras, directory);

        // ok, let's create a mosaic with a single granule and check its times
        URL harvestSingleURL = fileToUrl(directory);
        final AbstractGridFormat format = TestUtils.getFormat(harvestSingleURL);
        ImageMosaicReader reader = TestUtils.getReader(harvestSingleURL, format);
        assertNotNull(reader);
        try {
            // the coverage name got parsed
            String[] names = reader.getGridCoverageNames();
            assertEquals(1, names.length);
            assertEquals("passA", names[0]);

            // the mosaic is referenced
            CoordinateReferenceSystem crs = reader.getCoordinateReferenceSystem();
            CoordinateReferenceSystem expected = CRS.decode("EPSG:4326", true);
            assertTrue(CRS.equalsIgnoreMetadata(expected, crs));

            // there are two granules in the mosaic, the tiffs, with the expected locations
            GranuleSource passA = reader.getGranules("passA", true);
            UniqueVisitor visitor = new UniqueVisitor("location");
            passA.getGranules(Query.ALL).accepts(visitor, null);
            Set<String> locations = visitor.getUnique();
            // System.out.println(locations);
            assertThat(locations, hasItem(equalTo("passA2006128211927.tiff")));
            assertThat(locations, hasItem(equalTo("passA2006128194218.tiff")));
        } finally {
            reader.dispose();
        }
    }

