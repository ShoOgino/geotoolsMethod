    @Test
    public void testVirtualNativeResolutionPreserveAffine() throws IOException, TransformException {
        TemporaryFolder folder = new TemporaryFolder();
        folder.create();
        File file = folder.newFile("sample.tif");
        Files.copy(TestData.file(this, "multiresolution/sample2.tif"), file);

        ImageMosaicFormat format = new ImageMosaicFormat();
        ImageMosaicReader reader = format.getReader(folder.getRoot());
        GridEnvelope originalRange = reader.getOriginalGridRange();
        GeneralEnvelope envelope = reader.getOriginalEnvelope();
        MathTransform g2w = reader.getOriginalGridToWorld(PixelInCell.CELL_CORNER);
        AffineTransform2D at = (AffineTransform2D) g2w;

        ParameterValue<double[]> virtualNativeRes =
                ImageMosaicFormat.VIRTUAL_NATIVE_RESOLUTION.createValue();

        // Specifying a lower virtual native resolution
        virtualNativeRes.setValue(new double[] {at.getScaleX() * 40, -at.getScaleY() * 40});

        // This will trigger a first scale operation so that we can check
        // that the 2 scales aren't collapsed together
        ParameterValue<DecimationPolicy> decimation =
                ImageMosaicFormat.DECIMATION_POLICY.createValue();
        decimation.setValue(DecimationPolicy.DISALLOW);

        ParameterValue<GridGeometry2D> gg = AbstractGridFormat.READ_GRIDGEOMETRY2D.createValue();
        gg.setValue(new GridGeometry2D(originalRange, envelope));

        ParameterValue<Interpolation> interpolation =
                AbstractGridFormat.INTERPOLATION.createValue();
        interpolation.setValue(Interpolation.getInstance(Interpolation.INTERP_NEAREST));

        GridCoverage2D gc =
                reader.read(
                        new ParameterValue<?>[] {virtualNativeRes, gg, decimation, interpolation});
        RenderedImage ri = gc.getRenderedImage();

        // Given that we are requesting full bbox on full width*height
        // using a 40X worst native resolution, each 40x40 pixels in the output image
        // should have the same pixel value
        ImageWorker worker = new ImageWorker(ri);
        worker = worker.crop(0f, 0f, 40f, 40f);
        double[] max = worker.getMaximums();
        double[] min = worker.getMinimums();
        assertEquals(max, min, 1E-6);
        reader.dispose();
    }

