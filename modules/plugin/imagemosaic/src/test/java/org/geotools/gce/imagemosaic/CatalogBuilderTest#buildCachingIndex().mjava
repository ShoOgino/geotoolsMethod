	@Test
	@Ignore
	public void buildCachingIndex() throws FileNotFoundException, IOException {
	    if (hostnameDefined){
		ImageMosaicWalker builder = null;
		ImageMosaicReader reader = null;
		FileInputStream inStream = null;
		CatalogBuilderConfiguration c1 = new CatalogBuilderConfiguration();
//		c1.setIndexName("shpindex");
//		c1.setLocationAttribute("location");
//		c1.setAbsolute(false);
//		c1.setRootMosaicDirectory(TestData.file(this, "/caching").toString());
//		c1.setIndexingDirectories(Arrays.asList(TestData.file(this,"/caching").toString()));
            c1.setParameter(Prop.INDEX_NAME, "shpindex");
            c1.setParameter(Prop.LOCATION_ATTRIBUTE, "location");
            c1.setParameter(Prop.ABSOLUTE_PATH, "false");
            c1.setParameter(Prop.ROOT_MOSAIC_DIR, TestData.file(this, "/caching").toString());
            c1.setParameter(Prop.INDEXING_DIRECTORIES, TestData.file(this,"/caching").toString());
                
		Properties prop = new Properties();
		
		
		try {
			
//			c1.setCaching(false);
		    c1.setParameter(Prop.CACHING, "false");
	
			// build the index
			builder = new ImageMosaicWalker(c1);
			builder.addProcessingEventListener(new CatalogBuilderListener());
			builder.run();
			final File relativeMosaic = TestData.file(this, "/caching/" + c1.getIndexName() + ".shp");
			final File propertiesFile = TestData.file(this, "/caching/" + c1.getIndexName() + ".properties");
			assertTrue(relativeMosaic.exists());
			inStream = new FileInputStream(propertiesFile);
			prop.load(inStream);
			String value = prop.getProperty("Caching");
			assertNotNull(value);
			assertTrue (value.toLowerCase().equals("false"));
			
	
			assertTrue(new ImageMosaicFormat().accepts(relativeMosaic));
			reader = (ImageMosaicReader) new ImageMosaicReader(relativeMosaic);
			
			GranuleCatalog catalog = reader.getRasterManager(reader.defaultName).granuleCatalog;
			assertTrue(catalog.getClass().toString().endsWith("GTDataStoreGranuleCatalog"));
		} finally {
		    if (inStream != null){
                        IOUtils.closeQuietly(inStream);
                    }
			
			try {
				if (reader != null){
					reader.dispose();
				}
			} catch (Throwable t){
				//Eat exception
			}
		}
		
		try {
			
//			c1.setCaching(true);
			c1.setParameter(Prop.CACHING, "true");
	
			// build the index
			builder = new ImageMosaicWalker(c1);
			builder.addProcessingEventListener(new CatalogBuilderListener());
			builder.run();
			final File relativeMosaic = TestData.file(this, "/caching/" + c1.getIndexName() + ".shp");
			final File propertiesFile = TestData.file(this, "/caching/" + c1.getIndexName() + ".properties");
			inStream = new FileInputStream(propertiesFile);
			prop.load(inStream);
			
			String value = prop.getProperty("Caching");
			assertNotNull(value);
			assertTrue (value.toLowerCase().equals("true"));
			
			assertTrue(relativeMosaic.exists());
	
			assertTrue(new ImageMosaicFormat().accepts(relativeMosaic));
			reader = (ImageMosaicReader) new ImageMosaicReader(relativeMosaic);
			
			GranuleCatalog catalog = reader.getRasterManager(reader.defaultName).granuleCatalog;
			assertTrue(catalog.getClass().toString().endsWith("STRTreeGranuleCatalog"));

		} finally {
                    if (inStream != null){
                        IOUtils.closeQuietly(inStream);
                    }
			
			try {
				if (reader != null){
					reader.dispose();
				}
			} catch (Throwable t){
				//Eat exception
			}
		}
	    }
	}

