    @Test
    @Ignore
    public void buildCachingIndex() throws FileNotFoundException, IOException {
        if (!hostnameDefined) return;

        ImageMosaicDirectoryWalker builder = null;
        ImageMosaicReader reader = null;
        CatalogBuilderConfiguration c1 = new CatalogBuilderConfiguration();
        //		c1.setIndexName("shpindex");
        //		c1.setLocationAttribute("location");
        //		c1.setAbsolute(false);
        //		c1.setRootMosaicDirectory(TestData.file(this, "/caching").toString());
        //		c1.setIndexingDirectories(Arrays.asList(TestData.file(this,"/caching").toString()));
        c1.setParameter(Prop.INDEX_NAME, "shpindex");
        c1.setParameter(Prop.LOCATION_ATTRIBUTE, "location");
        c1.setParameter(Prop.ABSOLUTE_PATH, "false");
        c1.setParameter(Prop.ROOT_MOSAIC_DIR, TestData.file(this, "/caching").toString());
        c1.setParameter(Prop.INDEXING_DIRECTORIES, TestData.file(this, "/caching").toString());

        Properties prop = new Properties();

        try {

            //			c1.setCaching(false);
            c1.setParameter(Prop.CACHING, "false");

            ImageMosaicEventHandlers eventHandler = new ImageMosaicEventHandlers();
            final ImageMosaicConfigHandler catalogHandler =
                    new ImageMosaicConfigHandler(c1, eventHandler);
            // TODO
            // build the index
            builder = new ImageMosaicDirectoryWalker(catalogHandler, eventHandler);
            eventHandler.addProcessingEventListener(new CatalogBuilderListener());
            builder.run();
            final File relativeMosaic =
                    TestData.file(this, "/caching/" + c1.getParameter(Prop.INDEX_NAME) + ".shp");
            final File propertiesFile =
                    TestData.file(
                            this, "/caching/" + c1.getParameter(Prop.INDEX_NAME) + ".properties");
            assertTrue(relativeMosaic.exists());
            try (InputStream inStream = new FileInputStream(propertiesFile)) {
                prop.load(inStream);
            }
            String value = prop.getProperty("Caching");
            assertNotNull(value);
            assertEquals("false", value.toLowerCase());

            assertTrue(new ImageMosaicFormat().accepts(relativeMosaic));
            reader = new ImageMosaicReader(relativeMosaic);

            GranuleCatalog catalog = reader.getRasterManager(reader.defaultName).granuleCatalog;
            assertTrue(catalog.getClass().toString().endsWith("GTDataStoreGranuleCatalog"));
        } finally {
            try {
                if (reader != null) {
                    reader.dispose();
                }
            } catch (Throwable t) {
                // Eat exception
            }
        }

        try {

            //			c1.setCaching(true);
            c1.setParameter(Prop.CACHING, "true");

            ImageMosaicEventHandlers eventHandler = new ImageMosaicEventHandlers();
            final ImageMosaicConfigHandler catalogHandler =
                    new ImageMosaicConfigHandler(c1, eventHandler);
            // TODO
            // build the index
            builder = new ImageMosaicDirectoryWalker(catalogHandler, eventHandler);
            eventHandler.addProcessingEventListener(new CatalogBuilderListener());
            builder.run();
            final File relativeMosaic =
                    TestData.file(this, "/caching/" + c1.getParameter(Prop.INDEX_NAME) + ".shp");
            final File propertiesFile =
                    TestData.file(
                            this, "/caching/" + c1.getParameter(Prop.INDEX_NAME) + ".properties");
            try (InputStream inStream = new FileInputStream(propertiesFile)) {
                prop.load(inStream);
            }

            String value = prop.getProperty("Caching");
            assertNotNull(value);
            assertEquals("true", value.toLowerCase());

            assertTrue(relativeMosaic.exists());

            assertTrue(new ImageMosaicFormat().accepts(relativeMosaic));
            reader = new ImageMosaicReader(relativeMosaic);

            GranuleCatalog catalog = reader.getRasterManager(reader.defaultName).granuleCatalog;
            assertTrue(catalog.getClass().toString().endsWith("STRTreeGranuleCatalog"));

        } finally {
            try {
                if (reader != null) {
                    reader.dispose();
                }
            } catch (Throwable t) {
                // Eat exception
            }
        }
    }

