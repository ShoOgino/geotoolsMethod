    /**
	 * Requesting an included area at a much smaller resolution.
	 * 
	 * 1) The computed resolution should be much coarser.
	 * 2) The computed BBOX and the Computed raster area should be equal to the requested ones
	 * 
	 * @throws Exception
	 */
    @Test
    public void testBasic2() throws Exception {
    	
    	// using CoverageProperties to build the SpatialRequestHelper
        CoverageProperties coverageProperties = new CoverageProperties();

        // source area in project crs
        CoordinateReferenceSystem sourceCRS = DefaultGeographicCRS.WGS84;
		ReferencedEnvelope sourceBBox = new ReferencedEnvelope(
        		-180,180,
        		-90,90, 
        		sourceCRS);
		coverageProperties.setBBox(sourceBBox);
        coverageProperties.setCrs2D(sourceCRS);
		
		//raster area
        Rectangle sourceRasterArea = new Rectangle(0,0,1000,1000);
		coverageProperties.setRasterArea(sourceRasterArea);

		// creating the g2d
        final GridToEnvelopeMapper geMapper = new GridToEnvelopeMapper(
        		new GridEnvelope2D(sourceRasterArea), 
        		sourceBBox);
        AffineTransform sourceGridToWorldTransform = geMapper.createAffineTransform();
		coverageProperties.setGridToWorld2D((MathTransform2D) sourceGridToWorldTransform);
        coverageProperties.setFullResolution(new double[]{
        		XAffineTransform.getScaleX0(sourceGridToWorldTransform),
        		XAffineTransform.getScaleY0(sourceGridToWorldTransform)
        		});
        coverageProperties.setGeographicBBox(sourceBBox);
        coverageProperties.setGeographicCRS2D(DefaultGeographicCRS.WGS84);
        SpatialRequestHelper spatialRequestHelper = new SpatialRequestHelper(coverageProperties);
        
        //
        // now the target request
        //
        spatialRequestHelper.setAccurateResolution(false);
		ReferencedEnvelope requestedBBox = new ReferencedEnvelope(
        		0,180,
        		0,90, 
        		sourceCRS);        
        GridEnvelope2D requestedRasterArea = new GridEnvelope2D(0,0,250,250);
		spatialRequestHelper.setRequestedGridGeometry(new GridGeometry2D(
        		requestedRasterArea, 
        		new GeneralEnvelope(requestedBBox)));
        
        
        ///// TEST
        spatialRequestHelper.compute();
        assertFalse(spatialRequestHelper.isEmpty());
        assertFalse(spatialRequestHelper.isNeedsReprojection()); // no reprojection
        
        // computed raster area is equal to requested raster area
        Rectangle computedRasterArea = spatialRequestHelper.getComputedRasterArea();
        assertFalse(computedRasterArea.isEmpty());
        assertTrue(computedRasterArea.equals(requestedRasterArea));
        
        // computed bbox is equal to requestede bbox
        BoundingBox computedBBox = spatialRequestHelper.getComputedBBox();
        assertFalse(computedBBox.isEmpty());
        assertTrue(computedBBox.equals(requestedBBox));
        
        // transform
        AffineTransform computedG2W = spatialRequestHelper.getComputedGridToWorld();
        assertNotNull(computedG2W);
        double[] computedResolution = spatialRequestHelper.getComputedResolution();
        double scale=(1000.0/2)/250; // we scaled down the original image but we also use a portion of it
        assertNotNull(computedResolution);
        assertEquals(scale*XAffineTransform.getScaleX0(sourceGridToWorldTransform),computedResolution[0],1E-6);
        assertEquals(scale*XAffineTransform.getScaleY0(sourceGridToWorldTransform),computedResolution[1],1E-6);

		// all this intersecting and so on MUST not impact the requested resolutions
        GridToEnvelopeMapper gridToEnvelopeMapper = new GridToEnvelopeMapper(
				new GridEnvelope2D(requestedRasterArea), 
				requestedBBox);
        gridToEnvelopeMapper.setPixelAnchor(PixelInCell.CELL_CORNER);
        double[] expectedResolution=new double[]{
        		XAffineTransform.getScaleX0(gridToEnvelopeMapper.createAffineTransform()),
        		XAffineTransform.getScaleY0(gridToEnvelopeMapper.createAffineTransform())};
        assertNotNull(computedResolution);
        assertEquals(expectedResolution[0],computedResolution[0],1E-6);
        assertEquals(expectedResolution[1],computedResolution[1],1E-6);
        
    }

