    /** Simple test method accessing time and 2 custom dimensions for the sample dataset */
    @Test
    public void multipleDimensionsStackedSar() throws Exception {

        final URL sourceURL = TestData.file(this, "merge").toURI().toURL();
        final AbstractGridFormat format = TestUtils.getFormat(sourceURL);
        ImageMosaicReader reader = getReader(sourceURL, format);

        final String[] metadataNames = reader.getMetadataNames();
        assertNotNull(metadataNames);
        assertEquals(16, metadataNames.length);
        assertEquals("false", reader.getMetadataValue("HAS_POLARIZ_DOMAIN"));
        assertEquals("true", reader.getMetadataValue("HAS_POLARIZATION_DOMAIN"));
        assertEquals(
                "POLARIZATION",
                reader.getDynamicParameters().iterator().next().getName().getCode());
        assertEquals(
                "HH,HV,VH,VV",
                reader.getMetadataValue(
                        "POLARIZATION_DOMAIN")); // ten characters limitation overcome!
        assertEquals("java.lang.String", reader.getMetadataValue("POLARIZATION_DOMAIN_DATATYPE"));

        assertEquals("true", reader.getMetadataValue("HAS_TIME_DOMAIN"));
        assertEquals("false", reader.getMetadataValue("HAS_ELEVATION_DOMAIN"));
        assertEquals("2012-01-01T00:00:00.000Z", reader.getMetadataValue("TIME_DOMAIN"));
        assertEquals("2012-01-01T00:00:00.000Z", reader.getMetadataValue("TIME_DOMAIN_MINIMUM"));
        assertEquals("2012-01-01T00:00:00.000Z", reader.getMetadataValue("TIME_DOMAIN_MAXIMUM"));
        assertEquals("java.sql.Timestamp", reader.getMetadataValue("TIME_DOMAIN_DATATYPE"));

        // use imageio with defined tiles
        final ParameterValue<Boolean> useJai = AbstractGridFormat.USE_JAI_IMAGEREAD.createValue();
        useJai.setValue(false);
        final ParameterValue<String> tileSize =
                AbstractGridFormat.SUGGESTED_TILE_SIZE.createValue();
        tileSize.setValue("128,128");

        // specify time
        final ParameterValue<List> time = ImageMosaicFormat.TIME.createValue();
        final SimpleDateFormat formatD = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        formatD.setTimeZone(TimeZone.getTimeZone("GMT"));
        final Date timeD = formatD.parse("2012-01-01T00:00:00.000Z");
        time.setValue(Arrays.asList(timeD));

        // specify additional Dimensions
        Set<ParameterDescriptor<List>> params = reader.getDynamicParameters();
        ParameterValue<List> polariz = null;
        for (ParameterDescriptor<List> param : params) {
            if (param.getName().getCode().equalsIgnoreCase("POLARIZATION")) {
                polariz = param.createValue();
                polariz.setValue(Arrays.asList("HH", "HV", "VV"));
            }
        }

        // Stacked bands
        final ParameterValue<String> paramStacked = ImageMosaicFormat.MERGE_BEHAVIOR.createValue();
        paramStacked.setValue(MergeBehavior.STACK.toString());

        // Ensure predictable order with a sort
        final ParameterValue<String> sort = ImageMosaicFormat.SORT_BY.createValue();
        sort.setValue("polarization A");

        // Test the output coverage
        GeneralParameterValue[] values =
                new GeneralParameterValue[] {useJai, tileSize, time, polariz, paramStacked, sort};
        final GridCoverage2D coverage = TestUtils.getCoverage(reader, values, false);
        assertNotNull(coverage);

        // Check that we got the expected files as inputs to the coverage. It's a comma separated
        // value, test it so that it won't fail even if the directories contain a comma inside them.
        // Also ensure the other file was not used
        String fileLocation =
                (String) coverage.getProperty(AbstractGridCoverage2DReader.FILE_SOURCE_PROPERTY);
        assertThat(fileLocation, containsString("imagery_HH_2012.tif,"));
        assertThat(fileLocation, containsString("imagery_HV_2012.tif,"));
        assertThat(fileLocation, endsWith("imagery_VV_2012.tif"));
        assertThat(fileLocation, not(containsString("imagery_VH_2012.tif")));

        // inspect reanderedImage
        final RenderedImage image = coverage.getRenderedImage();
        assertEquals("wrong number of bands detected", 3, image.getSampleModel().getNumBands());
        assertEquals(DataBuffer.TYPE_SHORT, image.getSampleModel().getDataType());

        // grab a reference for the first band, and make sure the values are the same
        GeneralParameterValue[] valuesHH = {
            useJai, tileSize, time, dynamicParameter(reader, "polarization", "HH")
        };
        final GridCoverage2D coverageHH = TestUtils.getCoverage(reader, valuesHH, false);
        assertBandEqual(image, 0, coverageHH.getRenderedImage());

        // do the same for the second
        GeneralParameterValue[] valuesHV = {
            useJai, tileSize, time, dynamicParameter(reader, "polarization", "HV")
        };
        final GridCoverage2D coverageHV = TestUtils.getCoverage(reader, valuesHV, false);
        assertBandEqual(image, 1, coverageHV.getRenderedImage());

        // do the same for the third
        GeneralParameterValue[] valuesVV = {
            useJai, tileSize, time, dynamicParameter(reader, "polarization", "VV")
        };
        final GridCoverage2D coverageVV = TestUtils.getCoverage(reader, valuesVV, false);
        assertBandEqual(image, 2, coverageVV.getRenderedImage());

        reader.dispose();
    }

