    /**
     * Tests {@link ImageMosaicReader} asking to crop the lower left quarter of the input coverage.
     *
     * @param testURL The location of the source mosaic
     * @param title to use when showing image.
     * @param acceptContainment true if the result is expected to be contained in the crop area,
     *     possibly because the mosaic is sparse
     */
    private void imageMosaicCropTest(URL testURL, String title, boolean acceptContainment)
            throws Exception {

        // Get the resources as needed.
        Assert.assertNotNull(testURL);
        final AbstractGridFormat format = TestUtils.getFormat(testURL);
        final ImageMosaicReader reader = getReader(testURL, format);

        // crop
        final ParameterValue<GridGeometry2D> gg =
                AbstractGridFormat.READ_GRIDGEOMETRY2D.createValue();
        final GeneralEnvelope oldEnvelope = reader.getOriginalEnvelope();
        final GeneralEnvelope cropEnvelope =
                new GeneralEnvelope(
                        new double[] {
                            oldEnvelope.getLowerCorner().getOrdinate(0)
                                    + oldEnvelope.getSpan(0) / 2,
                            oldEnvelope.getLowerCorner().getOrdinate(1) + oldEnvelope.getSpan(1) / 2
                        },
                        new double[] {
                            oldEnvelope.getUpperCorner().getOrdinate(0),
                            oldEnvelope.getUpperCorner().getOrdinate(1)
                        });
        cropEnvelope.setCoordinateReferenceSystem(reader.getCoordinateReferenceSystem());
        gg.setValue(
                new GridGeometry2D(
                        PixelInCell.CELL_CENTER,
                        reader.getOriginalGridToWorld(PixelInCell.CELL_CENTER),
                        cropEnvelope,
                        null));
        final ParameterValue<Color> outTransp =
                ImageMosaicFormat.OUTPUT_TRANSPARENT_COLOR.createValue();
        outTransp.setValue(Color.black);

        final double[] baseResolutions = reader.getResolutionLevels()[0];
        // test the coverage
        final double tolerance = Math.max(baseResolutions[0], baseResolutions[1]) * 10;
        GridCoverage2D coverage =
                TestUtils.checkCoverage(reader, new GeneralParameterValue[] {gg, outTransp}, title);
        // the envelope is the requested one
        if (acceptContainment) {
            assertContainsEnvelope(cropEnvelope, coverage.getEnvelope(), tolerance);
        } else {
            assertEnvelope(cropEnvelope, coverage.getEnvelope(), tolerance);
        }
        // the raster space ordinates are not far away from the origin
        RenderedImage ri = coverage.getRenderedImage();
        assertEquals(0, ri.getMinX(), 10);
        assertEquals(0, ri.getMinY(), 10);

        reader.dispose();
    }

