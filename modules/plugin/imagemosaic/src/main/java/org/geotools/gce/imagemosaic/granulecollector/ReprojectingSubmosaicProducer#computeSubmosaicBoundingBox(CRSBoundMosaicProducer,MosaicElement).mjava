    /**
     * Computes the sub-mosaic spatial extend based on the image size and the target grid to world transformation
     * 
     * @param mosaicProducer
     * @param image
     * @return
     * @throws FactoryException
     */
    private ReferencedEnvelope computeSubmosaicBoundingBox(CRSBoundMosaicProducer mosaicProducer,
            MosaicElement mosaicElement) throws FactoryException {
        RenderedImage image = mosaicElement.getSource();
        MathTransform2D tx = mosaicProducer.rasterLayerResponse.getFinalGridToWorldCorner();
        double[] mosaicked = new double[] { image.getMinX(), image.getMinY(),
                image.getMinX() + image.getWidth(), image.getMinY() + image.getHeight() };
        try {
            tx.transform(mosaicked, 0, mosaicked, 0, 2);
        } catch (TransformException e) {
            throw new FactoryException(e);
        }
        ReferencedEnvelope submosaicBBOX = new ReferencedEnvelope(mosaicked[0], mosaicked[2],
                mosaicked[1], mosaicked[3], mosaicProducer.getCrs());
        return submosaicBBOX;
    }

