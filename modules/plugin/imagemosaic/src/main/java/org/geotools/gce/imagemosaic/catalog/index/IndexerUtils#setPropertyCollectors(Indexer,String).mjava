    /**
     * Build {@link Collectors} element by parsing the specified propertyCollectors, and put them on the specified indexer object.
     * 
     * @param indexer
     * @param propertyCollectors
     */
    public static void setPropertyCollectors(Indexer indexer, String propertyCollectors) {
        final Collectors collectors = Utils.OBJECT_FACTORY.createIndexerCollectors();
        indexer.setCollectors(collectors);
        final List<Collector> collectorList = collectors.getCollector();
        propertyCollectors = propertyCollectors.trim();
        if (propertyCollectors != null && propertyCollectors.length() > 0) {
            final String[] propColls = propertyCollectors.split(",");
            for (String pcDef : propColls) {

                // parse this def as NAME[CONFIG_FILE](PROPERTY;PROPERTY;....;PROPERTY)
                final int squareLPos = pcDef.indexOf("[");
                final int squareRPos = pcDef.indexOf("]");
                final int squareRPosLast = pcDef.lastIndexOf("]");
                final int roundLPos = pcDef.indexOf("(");
                final int roundRPos = pcDef.indexOf(")");
                final int roundRPosLast = pcDef.lastIndexOf(")");

                if (roundRPos != roundRPosLast) {
                    if (LOGGER.isLoggable(Level.INFO)) {
                        LOGGER.info("Skipping unparseable PropertyCollector definition: " + pcDef);
                    }
                    continue;
                }
                if (roundLPos == -1 || roundRPos == -1) {
                    if (LOGGER.isLoggable(Level.INFO)) {
                        LOGGER.info("Skipping unparseable PropertyCollector definition: " + pcDef);
                    }
                    continue;
                }
                if (roundLPos == 0) {
                    if (LOGGER.isLoggable(Level.INFO)) {
                        LOGGER.info("Skipping unparseable PropertyCollector definition: " + pcDef);
                    }
                    continue;
                }
                if (roundRPos != (pcDef.length() - 1)) {// end with )
                    if (LOGGER.isLoggable(Level.INFO)) {
                        LOGGER.info("Skipping unparseable PropertyCollector definition: " + pcDef);
                    }
                    continue;
                }

                // name
                String spi = null;
                if (squareLPos != -1) {
                    spi = pcDef.substring(0, squareLPos);
                } else {
                    spi = pcDef.substring(0, roundLPos);
                }

                // config
                final String config = squareLPos < squareRPos
                        ? pcDef.substring(squareLPos + 1, squareRPos) : "";

                String value = null;
                //only need config if provided, some property collectors don't need it
                if (config.length() > 0) {
                    final File configFile = new File(getParameter(Utils.Prop.ROOT_MOSAIC_DIR, indexer),
                        config + ".properties");

                    if (!Utils.checkFileReadable(configFile)) {
                        if (LOGGER.isLoggable(Level.INFO)) {
                            LOGGER.info("Unable to access the file for this PropertyCollector: "
                                + configFile.getAbsolutePath());
                        }
                    } else {
                        final Properties properties = CoverageUtilities
                            .loadPropertiesFromURL(URLs.fileToUrl(configFile));
                        if (properties.containsKey("regex")) {
                            value = properties.getProperty("regex");
                        }
                    }
                }


                // property names
                final String propertyNames[] = pcDef.substring(roundLPos + 1, roundRPos).split(",");
                Collector collector = Utils.OBJECT_FACTORY.createIndexerCollectorsCollector();
                collector.setSpi(spi);

                // only 1 propertyCollector for property
                collector.setMapped(propertyNames[0]);
                collector.setValue(value);
                collectorList.add(collector);
            }
        }
    }

