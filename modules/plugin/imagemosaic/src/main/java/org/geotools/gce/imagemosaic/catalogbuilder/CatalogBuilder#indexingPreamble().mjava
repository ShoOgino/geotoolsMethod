	private void indexingPreamble()throws IOException {
		
		//
		// declaring a precision model to adhere the java double type
		// precision
		//
		final PrecisionModel precMod = new PrecisionModel(PrecisionModel.FLOATING);
		geomFactory = new GeometryFactory(precMod);
		
		//
		// create the index
		//
		// do we have a datastore.properties file?
		final File parent=new File(runConfiguration.getRootMosaicDirectory());
		final File datastoreProperties= new File(parent,"datastore.properties");
		if(Utils.checkFileReadable(datastoreProperties)){
			// read the properties file
			Properties properties = Utils.loadPropertiesFromURL(DataUtilities.fileToURL(datastoreProperties));
			if (properties == null)
				throw new IOException("Unable to load properties from:"+datastoreProperties.getAbsolutePath());

			// SPI
			final String SPIClass = properties.getProperty("SPI");
			try {
				// create a datastore as instructed
				final DataStoreFactorySpi spi = (DataStoreFactorySpi) Class.forName(SPIClass).newInstance();
				final Map<String, Serializable> params = Utils.createDataStoreParamsFromPropertiesFile(properties,spi);

				// set ParentLocation parameter since for embedded database like H2 we must change the database
				// to incorporate the path where to write the db 
				params.put("ParentLocation", parent.getAbsolutePath());
				catalog=GranuleCatalogFactory.createGranuleCatalog(params,false,true, spi);
			} catch (ClassNotFoundException e) {
				final IOException ioe = new IOException();
				throw (IOException) ioe.initCause(e);
			} catch (InstantiationException e) {
				final IOException ioe = new IOException();
				throw (IOException) ioe.initCause(e);
			} catch (IllegalAccessException e) {
				final IOException ioe = new IOException();
				throw (IOException) ioe.initCause(e);
			}			
		} else {
			
			// we do not have a datastore properties file therefore we continue with a shapefile datastore
			final URL file= new File(parent ,runConfiguration.getIndexName() + ".shp").toURI().toURL();
			final Map<String, Serializable> params = new HashMap<String, Serializable>();			 
			params.put(ShapefileDataStoreFactory.URLP.key,file);
			if(file.getProtocol().equalsIgnoreCase("file"))
				params.put(ShapefileDataStoreFactory.CREATE_SPATIAL_INDEX.key, Boolean.TRUE);
			params.put(ShapefileDataStoreFactory.MEMORY_MAPPED.key, Boolean.TRUE);
			params.put(ShapefileDataStoreFactory.DBFTIMEZONE.key, TimeZone.getTimeZone("UTC"));
			catalog= GranuleCatalogFactory.createGranuleCatalog(params,false,true, Utils.SHAPE_SPI);
		}
	
		//
		// creating a mosaic runConfiguration bean to store the properties file elements			
		//
		mosaicConfiguration= new MosaicConfigurationBean();
		mosaicConfiguration.setName(runConfiguration.getIndexName());
		
		//
		// IMPOSED ENVELOPE
		//
		String bbox= runConfiguration.getEnvelope2D();
		try{
			this.imposedBBox=Utils.parseEnvelope(bbox);
		}catch (Exception e) {
			this.imposedBBox=null;
			if(LOGGER.isLoggable(Level.WARNING))
				LOGGER.log(Level.WARNING,"Unable to parse imposed bbox",e);
		}
		mosaicConfiguration.setCaching(runConfiguration.isCaching());
		//
		// load property collectors
		//
		loadPropertyCollectors();
			
	}

