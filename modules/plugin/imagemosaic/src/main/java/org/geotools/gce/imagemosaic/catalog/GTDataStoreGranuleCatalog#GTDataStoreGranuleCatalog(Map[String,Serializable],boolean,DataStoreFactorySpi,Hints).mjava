    public GTDataStoreGranuleCatalog(final Map<String, Serializable> params, final boolean create,
            final DataStoreFactorySpi spi, final Hints hints) {
        super(hints);
        Utilities.ensureNonNull("params", params);
        Utilities.ensureNonNull("spi", spi);

        try {
            this.pathType = (PathType) params.get("PathType");
            this.locationAttribute = (String) params.get("LocationAttribute");
            final String temp = (String) params.get("SuggestedSPI");
            this.suggestedRasterSPI = temp != null ? (ImageReaderSpi) Class.forName(temp)
                    .newInstance() : null;
            this.parentLocation = (String) params.get("ParentLocation");
            Object heterogen = params.get("Heterogeneous");
            if (heterogen != null) {
                this.heterogeneous = ((Boolean) heterogen).booleanValue();
            }

            // H2 workadound
            if (spi instanceof H2DataStoreFactory || spi instanceof H2JNDIDataStoreFactory) {
                if (params.containsKey(H2DataStoreFactory.DATABASE.key)) {
                    String dbname = (String) params.get(H2DataStoreFactory.DATABASE.key);
                    // H2 database URLs must not be percent-encoded: see GEOT-4262.
                    params.put(H2DataStoreFactory.DATABASE.key,
                            "file:"
                                    + (new File(DataUtilities.urlToFile(new URL(parentLocation)),
                                            dbname)).getPath());
                }
            }

            // creating a store, this might imply creating it for an existing underlying store or
            // creating a brand new one
            if (!create)
                tileIndexStore = spi.createDataStore(params);
            else {
                // this works only with the shapefile datastore, not with the others
                // therefore I try to catch the error to try and use themethdo without *New*
                try {
                    tileIndexStore = spi.createNewDataStore(params);
                } catch (UnsupportedOperationException e) {
                    tileIndexStore = spi.createDataStore(params);
                }
            }

            if (spi instanceof OracleNGOCIDataStoreFactory
                    || spi instanceof OracleNGJNDIDataStoreFactory
                    || spi instanceof OracleNGDataStoreFactory) {
                tileIndexStore = new OracleDatastoreWrapper(tileIndexStore,
                        FilenameUtils.getFullPath(parentLocation));
            }

            // is this a new store? If so we do not set any properties
            if (create) {
                return;
            }

            String typeName = null;
            boolean scanForTypeNames = false;

            if (params.containsKey("TypeName")) {
                typeName = (String) params.get("TypeName");
            }

            if (params.containsKey(Utils.SCAN_FOR_TYPENAMES)) {
                scanForTypeNames = (Boolean) params.get(Utils.SCAN_FOR_TYPENAMES);
            }

            // if this is not a new store let's extract basic properties from it
            if (scanForTypeNames) {
                String[] typeNames = tileIndexStore.getTypeNames();
                if (typeNames != null) {
                    for (String tn : typeNames) {
                        this.typeNames.add(tn);
                    }
                }
            } else if (typeName != null) {
                addTypeName(typeName, false);
            }
            if (this.typeNames.size() > 0) {
                extractBasicProperties(typeNames.iterator().next());
            } else {
                extractBasicProperties(typeName);
            }
        } catch (Throwable e) {
            try {
                if (tileIndexStore != null)
                    tileIndexStore.dispose();
            } catch (Throwable e1) {
                if (LOGGER.isLoggable(Level.FINE))
                    LOGGER.log(Level.FINE, e1.getLocalizedMessage(), e1);
            } finally {
                tileIndexStore = null;
            }

            throw new IllegalArgumentException(e);
        }

    }

