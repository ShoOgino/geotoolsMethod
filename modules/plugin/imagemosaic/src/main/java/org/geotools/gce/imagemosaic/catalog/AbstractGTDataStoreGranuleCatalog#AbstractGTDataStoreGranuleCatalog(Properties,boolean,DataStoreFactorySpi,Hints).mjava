    public AbstractGTDataStoreGranuleCatalog(
            final Properties params,
            final boolean create,
            final DataStoreFactorySpi spi,
            final Hints hints) {
        super(hints);
        Utilities.ensureNonNull("params", params);
        this.spi = spi;
        this.params = params;

        try {
            this.pathType = (PathType) params.get(Utils.Prop.PATH_TYPE);
            this.locationAttribute = (String) params.get(Utils.Prop.LOCATION_ATTRIBUTE);
            final String temp = (String) params.get(Utils.Prop.SUGGESTED_SPI);
            this.suggestedRasterSPI =
                    temp != null
                            ? (ImageReaderSpi)
                                    Class.forName(temp).getDeclaredConstructor().newInstance()
                            : null;
            final String temp2 = (String) params.get(Utils.Prop.SUGGESTED_FORMAT);
            this.suggestedFormat =
                    temp2 != null
                            ? (AbstractGridFormat)
                                    Class.forName(temp2).getDeclaredConstructor().newInstance()
                            : null;
            final String temp3 = (String) params.get(Utils.Prop.SUGGESTED_IS_SPI);
            this.suggestedIsSPI =
                    temp3 != null
                            ? (ImageInputStreamSpi)
                                    Class.forName(temp3).getDeclaredConstructor().newInstance()
                            : null;
            this.parentLocation = (String) params.get(Utils.Prop.PARENT_LOCATION);
            if (params.containsKey(Utils.Prop.HETEROGENEOUS)) {
                this.heterogeneous = (Boolean) params.get(Utils.Prop.HETEROGENEOUS);
            }
            if (params.containsKey(Utils.Prop.WRAP_STORE)) {
                this.wrapstore = (Boolean) params.get(Utils.Prop.WRAP_STORE);
            }

            initTileIndexStore(params, create, spi);
        } catch (Throwable e) {
            handleInitializationException(e);
            throw new IllegalArgumentException(e);
        }
        if (TRACE_ENABLED) {
            this.tracer = new Throwable();
            this.tracer.fillInStackTrace();
        }
    }

