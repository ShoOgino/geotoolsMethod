    /**
     * Returns a qualified name from an unqualified type name. Ensures a single value is found.
     *
     * @param typeName
     * @return
     * @throws IOException
     */
    private Name getNameFromLocal(String typeName) throws IOException {
        Name result = NAME_CACHE.get(typeName);
        if (result == null) {
            Stream<Name> stream = delegate.getNames().stream();
            Set<Name> names =
                    stream.filter(name -> typeName.equals(name.getLocalPart()))
                            .collect(Collectors.toSet());
            if (names.isEmpty()) {
                throw new IOException("Could not find a type name '" + typeName + "'");
            } else if (names.size() > 1) {
                throw new IOException("Found multiple matches for '" + typeName + "': " + names);
            } else {
                result = names.iterator().next();
                NAME_CACHE.put(typeName, result);
            }
        }

        return result;
    }

