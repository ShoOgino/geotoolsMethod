    /** Method for harvesting on a directory */
    private static void harvestURLCollection(
            String defaultCoverage,
            final List<HarvestedSource> result,
            final ImageMosaicReader reader,
            Collection<URL> urls) {

        // prepare the walker configuration
        CatalogBuilderConfiguration configuration = new CatalogBuilderConfiguration();

        if (defaultCoverage == null) {
            String[] coverageNames = reader.getGridCoverageNames();
            defaultCoverage =
                    (coverageNames != null && coverageNames.length > 0)
                            ? coverageNames[0]
                            : Utils.DEFAULT_INDEX_NAME;
        }

        configuration.setParameter(Utils.Prop.INDEX_NAME, defaultCoverage);
        configuration.setHints(new Hints(Utils.MOSAIC_READER, reader));
        File mosaicSource = URLs.urlToFile(reader.sourceURL);
        if (!mosaicSource.isDirectory()) {
            mosaicSource = mosaicSource.getParentFile();
        }
        // Setting of the HARVEST_DIRECTORY property for passing the checks even if it is
        // not used
        String mosaicRootPath = mosaicSource.getAbsolutePath();
        configuration.setParameter(Utils.Prop.HARVEST_DIRECTORY, mosaicRootPath);
        configuration.setParameter(Utils.Prop.ROOT_MOSAIC_DIR, mosaicRootPath);

        // run the walker and collect information
        ImageMosaicEventHandlers eventHandler = new ImageMosaicEventHandlers();
        final ImageMosaicConfigHandler catalogHandler =
                new ImageMosaicConfigHandler(configuration, eventHandler) {
                    protected GranuleCatalog buildCatalog() throws IOException {
                        return reader.granuleCatalog;
                    }
                };

        URLSourceSPIProvider urlSourceSPIProvider = null;
        RasterManager rasterManager = reader.getRasterManager(defaultCoverage);
        if (rasterManager == null) {
            // We might be in the case of an empty mosaic not yet initialized.
            // let's try with the indexer parsing if any.
            Indexer indexer = IndexerUtils.initializeIndexer(null, mosaicSource);
            boolean canBeEmpty =
                    IndexerUtils.getParameterAsBoolean(Utils.Prop.CAN_BE_EMPTY, indexer);
            if (!canBeEmpty) {
                eventHandler.fireException(
                        new IOException(
                                "The specified mosaic can't be empty but no default granules have been found"));
                return;
            }
            urlSourceSPIProvider = IndexerUtils.getURLSourceSPIProvider(indexer);
        } else {
            MosaicConfigurationBean config = rasterManager.getConfiguration();
            urlSourceSPIProvider = config.getCatalogConfigurationBean().getUrlSourceSPIProvider();
        }

        if (urlSourceSPIProvider == null) {
            eventHandler.fireException(
                    new IOException(
                            "Unable to harvest the provided URL collection. No Url source SPI provider has been found"));
            return;
        }

        // Creation of the Walker for the URL List
        ImageMosaicReader.ImageMosaicURLCollectionWalker walker =
                new ImageMosaicReader.ImageMosaicURLCollectionWalker(
                        catalogHandler, eventHandler, urlSourceSPIProvider, urls);
        eventHandler.addProcessingEventListener(
                new ImageMosaicEventHandlers.ProcessingEventListener() {

                    @Override
                    public void getNotification(ImageMosaicEventHandlers.ProcessingEvent event) {
                        if (event instanceof ImageMosaicEventHandlers.URLProcessingEvent) {
                            ImageMosaicEventHandlers.URLProcessingEvent urlEvent =
                                    (ImageMosaicEventHandlers.URLProcessingEvent) event;
                            result.add(
                                    new DefaultHarvestedSource(
                                            urlEvent.getUrl(),
                                            urlEvent.isIngested(),
                                            urlEvent.getMessage()));
                        }
                    }

                    @Override
                    public void exceptionOccurred(ImageMosaicEventHandlers.ExceptionEvent event) {
                        // nothing to do
                    }
                });
        // Wait the Walker ends its operations
        walker.run();
    }

