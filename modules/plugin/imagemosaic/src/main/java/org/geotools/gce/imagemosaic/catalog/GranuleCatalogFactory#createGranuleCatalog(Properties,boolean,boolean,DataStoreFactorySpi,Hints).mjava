    public static GranuleCatalog createGranuleCatalog(
            final Properties params,
            final boolean caching,
            final boolean create,
            final DataStoreFactorySpi spi,
            final Hints hints) {
        // build the catalog
        Repository repository = (Repository) hints.get(Hints.REPOSITORY);
        String storeName = (String) params.get(Utils.Prop.STORE_NAME);
        AbstractGTDataStoreGranuleCatalog gtCatalog;
        if (storeName != null && !storeName.trim().isEmpty()) {
            if (repository == null) {
                throw new IllegalArgumentException(
                        "Was given a store name "
                                + storeName
                                + " but there is no Repository to resolve it");
            } else {
                gtCatalog =
                        new RepositoryDataStoreCatalog(
                                params, create, repository, storeName, spi, hints);
            }
        } else {
            gtCatalog = new GTDataStoreGranuleCatalog(params, create, spi, hints);
        }
        DataStore store = gtCatalog.getTileIndexStore();

        // caching wrappers
        GranuleCatalog catalog;
        if (caching) {
            catalog = new STRTreeGranuleCatalog(params, gtCatalog, hints);
        } else {
            catalog = new CachingDataStoreGranuleCatalog(gtCatalog);
        }

        // locking wrappers
        if (store instanceof Wrapper) {
            store =
                    Optional.ofNullable((DataStore) ((Wrapper) store).unwrap(JDBCDataStore.class))
                            .orElse(store);
        }
        if (!(store instanceof JDBCDataStore)) {
            catalog = new LockingGranuleCatalog(catalog, hints);
        }

        return catalog;
    }

