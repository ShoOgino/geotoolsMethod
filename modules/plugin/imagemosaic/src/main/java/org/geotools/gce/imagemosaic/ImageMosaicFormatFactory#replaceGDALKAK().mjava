	private static void replaceGDALKAK() {
		try{
			//check if our kakJP2 plugin is in the path
			final String kakJP2=JP2GDALKakaduImageReaderSpi.class.getName();
			Class.forName(kakJP2);

			// imageio kakJP2 reader
			final String imageioJ2KImageReaderCodecName=J2KImageReaderCodecLibSpi.class.getName();
			
			if(PackageUtil.isCodecLibAvailable()){
				boolean succeeded=ImageIOUtilities.replaceProvider(ImageReaderSpi.class, kakJP2, imageioJ2KImageReaderCodecName, "JPEG 2000");
	        	if(!succeeded)
	        		if (LOGGER.isLoggable(Level.WARNING))
	        			LOGGER.warning("Unable to set ordering between jp2 readers spi-"+kakJP2+":"+imageioJ2KImageReaderCodecName);	
			}
        	
			// imageio kakJP2 reader
			final String imageioJ2KImageReaderName=J2KImageReaderSpi.class.getName();
			
			
			final boolean succeeded=ImageIOUtilities.replaceProvider(ImageReaderSpi.class, kakJP2, imageioJ2KImageReaderName, "JPEG 2000");
        	if(!succeeded)
        		if (LOGGER.isLoggable(Level.WARNING))
        			LOGGER.warning("Unable to set ordering between jp2 readers spi-"+kakJP2+":"+imageioJ2KImageReaderName);	
	        
		} catch (ClassNotFoundException e) {
			if (LOGGER.isLoggable(Level.WARNING))
				LOGGER.log(Level.WARNING, "Unable to load specific JPEG2000 reader spi",e);
		} 
		
	}

