        /**
         * Aggregate multipleFeatures related to the same file, on the same {@link FileGroup}. This
         * is usually needed when the underlying coverage isn't a simple 2D coverage but it has
         * multiple dimensions (as an instance, time, elevation, custom...)
         *
         * <p>The method also look for supportFiles.
         *
         * @param file
         * @paran aggregate, whether aggregation queries should be invoked to extract domains
         * @param firstFeature, sample feature to be used when no aggregation is needed
         * @return
         */
        private FileGroup buildFileGroup(File file, boolean aggregate, SimpleFeature firstFeature) {
            // Looking for supportFiles for the current file
            // As an instance .prj and .tfw for un-georeferenced tifs
            String filePath = file.getAbsolutePath();
            String ext = FilenameUtils.getExtension(filePath).toUpperCase();
            List<File> supportFiles = null;
            if (COLLECTORS.containsKey(ext)) {
                supportFiles = COLLECTORS.get(ext).getSupportFiles(filePath);
            }
            Map<String, Object> metadataMap =
                    computeGroupMetadata(filePath, aggregate, firstFeature);

            return new FileGroup(file, supportFiles, metadataMap);
        }

