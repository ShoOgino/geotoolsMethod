    /**
     * Return the metadata value for the specified metadata name
     *
     * @param name the name of the metadata to be returned
     */
    String getMetadataValue(String name) {
        String value = null;
        final boolean hasTimeDomain = timeDomainManager != null;
        final boolean hasElevationDomain = elevationDomainManager != null;

        if (name.equalsIgnoreCase(GridCoverage2DReader.HAS_ELEVATION_DOMAIN))
            return String.valueOf(hasElevationDomain);

        if (name.equalsIgnoreCase(GridCoverage2DReader.HAS_TIME_DOMAIN)) {
            return String.valueOf(hasTimeDomain);
        }

        // NOT supported
        if (name.equalsIgnoreCase(GridCoverage2DReader.TIME_DOMAIN_RESOLUTION)) {
            return null;
        }
        // NOT supported
        if (name.equalsIgnoreCase(GridCoverage2DReader.ELEVATION_DOMAIN_RESOLUTION)) {
            return null;
        }

        if (hasTimeDomain) {
            if (name.equalsIgnoreCase("time_domain")) {
                return timeDomainManager.getMetadataValue(name);
            }
            if ((name.equalsIgnoreCase("time_domain_minimum")
                    || name.equalsIgnoreCase("time_domain_maximum"))) {
                return timeDomainManager.getMetadataValue(name);
            }
            if (name.equalsIgnoreCase("time_domain_datatype")) {
                return timeDomainManager.getMetadataValue(name);
            }
        }

        if (hasElevationDomain) {
            if (name.equalsIgnoreCase("elevation_domain")) {
                return elevationDomainManager.getMetadataValue(name);
            }

            if (name.equalsIgnoreCase("elevation_domain_minimum")
                    || name.equalsIgnoreCase("elevation_domain_maximum")) {
                return elevationDomainManager.getMetadataValue(name);
            }
            if (name.equalsIgnoreCase("elevation_domain_datatype")) {
                return elevationDomainManager.getMetadataValue(name);
            }
        }

        // check if heterogeneous CRS
        if (name.equalsIgnoreCase(AbstractGridCoverage2DReader.MULTICRS_READER)) {
            return String.valueOf(heterogeneousCRS);
        }

        if (name.equalsIgnoreCase(AbstractGridCoverage2DReader.MULTICRS_EPSGCODES)
                && heterogeneousCRS) {

            // Extract the internal EPSG Codes found on the catalog
            String crsAttribute = null;
            try {
                crsAttribute = getCrsAttribute();
                if (crsAttribute != null) {
                    Set<String> crsSet = extractDomain(crsAttribute);
                    for (String crs : crsSet) {
                        // Opportunistic caching:
                        // LoadingCache usually loads objects at first need.
                        // However, since this metadata method is doing a scan
                        // of the available codes when invoked, let's take
                        // advantage of that by putting the values on cache
                        String epsgCode = crs.replaceAll("[^0-9,]", "");
                        alternativeCRSCache.put(Integer.valueOf(epsgCode), true);
                    }
                    return String.join(",", crsSet);
                }
            } catch (IOException e) {
                if (LOGGER.isLoggable(Level.WARNING)) {
                    LOGGER.log(Level.WARNING, "Unable to retrieve the list of supported CRSs", e);
                }
                return "";
            }
        }
        // check additional domains
        if (domainsManager != null) {
            return domainsManager.getMetadataValue(name);
        }

        //
        return value;
    }

