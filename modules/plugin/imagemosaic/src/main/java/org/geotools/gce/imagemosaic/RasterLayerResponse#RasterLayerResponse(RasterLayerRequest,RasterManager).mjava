	/**
	 * Construct a {@code RasterLayerResponse} given a specific
	 * {@link RasterLayerRequest}, a {@code GridCoverageFactory} to produce
	 * {@code GridCoverage}s and an {@code ImageReaderSpi} to be used for
	 * instantiating an Image Reader for a read operation,
	 * 
	 * @param request
	 *            a {@link RasterLayerRequest} originating this response.
	 * @param coverageFactory
	 *            a {@code GridCoverageFactory} to produce a {@code
	 *            GridCoverage} when calling the {@link #createResponse()} method.
	 * @param readerSpi
	 *            the Image Reader Service provider interface.
	 */
	public RasterLayerResponse(final RasterLayerRequest request,
			final RasterManager rasterManager) {
		this.request = request;
		coverageEnvelope = rasterManager.spatialDomainManager.coverageEnvelope;
		this.coverageFactory = rasterManager.getCoverageFactory();
		this.rasterManager = rasterManager;
		this.hints = rasterManager.getHints();
		baseGridToWorld=rasterManager.spatialDomainManager.coverageGridToWorld2D;
		finalTransparentColor=request.getOutputTransparentColor();
		// are we doing multithreading?
		multithreadingAllowed= request.isMultithreadingAllowed();
		footprintBehavior = request.getFootprintBehavior();
		backgroundValues = request.getBackgroundValues();
		interpolation = request.getInterpolation();
		needsReprojection = request.spatialRequestHelper.isNeedsReprojection();
		defaultArtifactsFilterThreshold = request.getDefaultArtifactsFilterThreshold();
		artifactsFilterPTileThreshold = request.getArtifactsFilterPTileThreshold();
	}

