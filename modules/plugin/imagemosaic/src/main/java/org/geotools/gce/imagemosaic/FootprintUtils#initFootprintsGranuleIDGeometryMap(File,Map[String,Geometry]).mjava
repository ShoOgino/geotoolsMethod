    /**
     * Given a footprint summary file (.fpt), populate the provided
     * footprints <ID-Geometry> pairs Map
     * 
     * @param footprintSummaryFile
     *            the footprint summary file.
     * @param footprintsIDGeometryMap
     *            the Map to be populated
     */
    static void initFootprintsGranuleIDGeometryMap(
            final File footprintSummaryFile,
            final Map<String, Geometry> footprintsIDGeometryMap) {
        Utilities.ensureNonNull("footprintSummaryFile", footprintSummaryFile);
        if (!footprintSummaryFile.exists() || !footprintSummaryFile.canRead()) {
            throw new IllegalArgumentException("Unable to access to the provided footprint file " + footprintSummaryFile.getAbsolutePath());
        }
        Utilities.ensureNonNull("footprintsID_GeometryMap", footprintsIDGeometryMap);
        
        FileReader reader = null;
        try {
        	reader=new FileReader(footprintSummaryFile);
            BufferedReader bReader = new BufferedReader(reader);
            String footprint;

            final WKTReader geometryReader = new WKTReader();
            while ((footprint = bReader.readLine()) != null) {
                String fpt[] = footprint.split("=");
                if (fpt.length == 2) {
                	// parse the geometry
                    footprintsIDGeometryMap.put(fpt[0], geometryReader.read(fpt[1]));
                }
            }
            bReader.close();
        } catch (IOException e) {
            if (LOGGER.isLoggable(Level.FINE)) {
                LOGGER.log(Level.FINE, e.getLocalizedMessage(), e);
            }
        } catch (ParseException e) {

            if (LOGGER.isLoggable(Level.FINE)) {
                LOGGER.log(Level.FINE, e.getLocalizedMessage(), e);
            }
		} finally {
            try {
                if (reader != null) {
                    reader.close();
                }
            } catch (Throwable e) {
                if (LOGGER.isLoggable(Level.FINE)) {
                    LOGGER.log(Level.FINE, e.getLocalizedMessage(), e);
                }
                IOUtils.closeQuietly(reader);
            }
        }
    }

