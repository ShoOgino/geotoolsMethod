    /**
     * Create or load a GranuleCatalog on top of the provided configuration
     *
     * @param runConfiguration configuration to be used
     * @param create if true create a new catalog, otherwise it is loaded
     * @return a new GranuleCatalog built from the configuration
     * @throws IOException
     */
    private GranuleCatalog createCatalog(
            CatalogBuilderConfiguration runConfiguration, boolean create) throws IOException {
        //
        // create the index
        //
        // do we have a datastore.properties file?
        final File parent = new File(runConfiguration.getParameter(Prop.ROOT_MOSAIC_DIR));

        GranuleCatalog catalog;

        // Consider checking that from the indexer if any
        final File datastoreProperties = new File(parent, "datastore.properties");
        // GranuleCatalog catalog = null;
        if (Utils.checkFileReadable(datastoreProperties)) {
            // read the properties file
            Properties properties = createGranuleCatalogProperties(datastoreProperties);
            // pass the typename from the indexer, if one is available
            String indexerTypeName = runConfiguration.getParameter(Prop.TYPENAME);
            if (indexerTypeName != null && properties.getProperty(Prop.TYPENAME) == null) {
                properties.put(Prop.TYPENAME, indexerTypeName);
            }
            catalog =
                    createGranuleCatalogFromDatastore(
                            parent,
                            properties,
                            create,
                            Boolean.parseBoolean(runConfiguration.getParameter(Prop.WRAP_STORE)),
                            runConfiguration.getHints());
        } else {

            // we do not have a datastore properties file therefore we continue with a shapefile
            // datastore
            final URL file =
                    URLs.fileToUrl(
                            new File(
                                    parent,
                                    runConfiguration.getParameter(Prop.INDEX_NAME) + ".shp"));
            final Properties params = new Properties();
            params.put(ShapefileDataStoreFactory.URLP.key, file);
            if (file.getProtocol().equalsIgnoreCase("file")) {
                params.put(ShapefileDataStoreFactory.CREATE_SPATIAL_INDEX.key, Boolean.TRUE);
            }
            params.put(ShapefileDataStoreFactory.MEMORY_MAPPED.key, USE_MEMORY_MAPPED_BUFFERS);
            params.put(ShapefileDataStoreFactory.DBFTIMEZONE.key, TimeZone.getTimeZone("UTC"));
            params.put(
                    Prop.LOCATION_ATTRIBUTE,
                    runConfiguration.getParameter(Prop.LOCATION_ATTRIBUTE));
            catalog =
                    GranuleCatalogFactory.createGranuleCatalog(
                            params, false, create, Utils.SHAPE_SPI, runConfiguration.getHints());
            MultiLevelROIProvider roi =
                    MultiLevelROIProviderMosaicFactory.createFootprintProvider(
                            parent, runConfiguration.getHints());
            catalog.setMultiScaleROIProvider(roi);
        }

        return catalog;
    }

