    protected void init(
            final BoundingBox granuleBBOX,
            final URL granuleUrl,
            final AbstractGridFormat suggestedFormat,
            ImageReaderSpi suggestedSPI,
            ImageInputStreamSpi suggestedIsSPI,
            final MultiLevelROI roiProvider,
            final boolean heterogeneousGranules,
            final boolean handleArtifactsFiltering,
            final Hints hints) {
        this.granuleBBOX = ReferencedEnvelope.reference(granuleBBOX);
        this.granuleUrl = granuleUrl;
        this.roiProvider = roiProvider;
        this.handleArtifactsFiltering = handleArtifactsFiltering;
        this.hints = new Hints(hints);
        filterMe = handleArtifactsFiltering && roiProvider != null;

        Object input = granuleUrl;
        AbstractGridCoverage2DReader gcReader = null;
        ImageInputStream inStream = null;
        ImageReader imageReader = null;

        // Check for an externally specified provider
        try {
            Object providerHint =
                    Utils.getHintIfAvailable(hints, GranuleAccessProvider.GRANULE_ACCESS_PROVIDER);
            if (providerHint != null) {
                granuleAccessProvider = (GranuleAccessProvider) providerHint;
                granuleAccessProvider.setGranuleInput(granuleUrl);
            } else {
                granuleAccessProvider =
                        getDefaultProvider(
                                input, suggestedFormat, suggestedSPI, suggestedIsSPI, hints);
            }

            this.format = granuleAccessProvider.getFormat();
            gcReader = granuleAccessProvider.getGridCoverageReader();
            ovrProvider = granuleAccessProvider.getMaskOverviewsProvider();

            if (heterogeneousGranules) {
                // do not trust the index, use the reader instead (reprojection might be involved)
                this.granuleBBOX = ReferencedEnvelope.reference(gcReader.getOriginalEnvelope());
            }

            if (granuleAccessProvider instanceof GranuleDescriptorModifier) {
                ((GranuleDescriptorModifier) granuleAccessProvider).update(this, hints);
            }

            // get a stream
            if (cachedStreamSPI == null) {
                cachedStreamSPI = granuleAccessProvider.getInputStreamSpi();
            }
            assert cachedStreamSPI != null : "no cachedStreamSPI available!";
            if (inStream == null) {
                inStream = granuleAccessProvider.getImageInputStream();
            }

            // get a reader and try to cache the suggested SPI first
            if (cachedReaderSPI == null) {
                cachedReaderSPI = granuleAccessProvider.getImageReaderSpi();
            }
            if (cachedReaderSPI == null) {
                throw new IllegalArgumentException(
                        "Unable to get a ReaderSPI for the provided input: "
                                + granuleUrl.toString());
            }
            imageReader = granuleAccessProvider.getImageReader();
            boolean ignoreMetadata = false;
            if (imageReader instanceof InitializingReader) {
                ignoreMetadata = ((InitializingReader) imageReader).init(hints);
            }
            imageReader.setInput(inStream, false, ignoreMetadata);
            // get selected level and base level dimensions
            final Rectangle originalDimension = Utils.getDimension(0, imageReader);

            // build the g2W for this tile, in principle we should get it
            // somehow from the tile itself or from the index, but at the moment
            // we do not have such info, hence we assume that it is a simple
            // scale and translate
            GridToEnvelopeMapper geMapper =
                    new GridToEnvelopeMapper(
                            new GridEnvelope2D(originalDimension), this.granuleBBOX);
            geMapper.setPixelAnchor(
                    PixelInCell
                            .CELL_CENTER); // this is the default behavior but it is nice to write
            // it down anyway
            this.baseGridToWorld = geMapper.createAffineTransform();

            // add the base level
            this.granuleLevels.put(
                    Integer.valueOf(0),
                    new GranuleOverviewLevelDescriptor(
                            1, 1, originalDimension.width, originalDimension.height));

            ////////////////////// Setting overviewController ///////////////////////
            if (heterogeneousGranules) {
                // //
                //
                // Right now we are setting up overviewsController by assuming that
                // overviews are internal images as happens in TIFF images
                // We can improve this by leveraging on coverageReaders
                //
                // //

                // Getting the first level descriptor
                final GranuleOverviewLevelDescriptor baseOverviewLevelDescriptor =
                        granuleLevels.get(0);

                // Variables initialization
                final int numberOfOvervies = ovrProvider.getNumOverviews();
                final AffineTransform2D baseG2W =
                        baseOverviewLevelDescriptor.getGridToWorldTransform();
                final int width = baseOverviewLevelDescriptor.getWidth();
                final int height = baseOverviewLevelDescriptor.getHeight();
                final double resX = AffineTransform2D.getScaleX0(baseG2W);
                final double resY = AffineTransform2D.getScaleY0(baseG2W);
                final double[] highestRes = new double[] {resX, resY};

                // Populating overviews and initializing overviewsController
                final double[][] overviewsResolution =
                        ovrProvider.getOverviewResolutions(
                                highestRes[0] * width, highestRes[1] * height);
                overviewsController =
                        new OverviewsController(highestRes, numberOfOvervies, overviewsResolution);
            }
            //////////////////////////////////////////////////////////////////////////

            if (hints != null && hints.containsKey(Utils.CHECK_AUXILIARY_METADATA)) {
                boolean checkAuxiliaryMetadata =
                        (Boolean) hints.get(Utils.CHECK_AUXILIARY_METADATA);
                if (checkAuxiliaryMetadata) {
                    checkPamDataset();
                }
            }

            // handle the nodata and rescaling if available
            initFromImageMetadata(imageReader);
        } catch (IllegalStateException e) {
            throw new IllegalArgumentException(e);

        } catch (IOException e) {
            throw new IllegalArgumentException(e);
        } finally {
            // close/dispose stream and readers
            try {
                if (inStream != null) {
                    inStream.close();
                }
            } catch (Throwable e) {
                throw new IllegalArgumentException(e);
            } finally {
                if (imageReader != null) {
                    imageReader.dispose();
                }
            }
            if (gcReader != null) {
                try {
                    gcReader.dispose();
                } catch (Throwable t) {
                    // Ignore it
                }
            }
        }
    }

