    /**
     * Construct a {@code RasterLayerResponse} given a specific {@link RasterLayerRequest}, a {@code
     * GridCoverageFactory} to produce {@code GridCoverage}s and an {@code ImageReaderSpi} to be
     * used for instantiating an Image Reader for a read operation,
     *
     * @param request a {@link RasterLayerRequest} originating this response.
     * @param rasterManager raster manager being used
     * @param collectorsFactory
     */
    public RasterLayerResponse(
            final RasterLayerRequest request,
            final RasterManager rasterManager,
            SubmosaicProducerFactory collectorsFactory) {
        this.request = request;
        coverageEnvelope = rasterManager.spatialDomainManager.coverageEnvelope;
        this.coverageFactory = rasterManager.getCoverageFactory();
        this.rasterManager = rasterManager;
        this.hints = rasterManager.getHints();
        this.submosaicProducerFactory = collectorsFactory;
        baseGridToWorld = rasterManager.spatialDomainManager.coverageGridToWorld2D;
        finalTransparentColor = request.getOutputTransparentColor();
        // are we doing multithreading?
        multithreadingAllowed = request.isMultithreadingAllowed();
        footprintBehavior = request.getFootprintBehavior();
        backgroundValues = request.getBackgroundValues();
        defaultArtifactsFilterThreshold = request.getDefaultArtifactsFilterThreshold();
        artifactsFilterPTileThreshold = request.getArtifactsFilterPTileThreshold();
        virtualNativeResolution = request.getVirtualNativeResolution();
        geometryMask = request.getGeometryMask();
        maskingBufferPixels = request.getMaskingBufferPixels();
        setRoiProperty = request.isSetRoiProperty();
    }

