        /**
         * Setup a Filter on top of the specified domainRequest which is in the form "key=value"
         * 
         * @param domain
         * @param values
         * @return
         */
        public Filter createFilter(String domain, List values) {
            // === checks
            if (domain == null || domain.isEmpty()){
                throw new IllegalArgumentException("Null domain requested");
            }
            if (values == null || values.isEmpty()){
                throw new IllegalArgumentException("Null domain values provided");
            }
            if (domainsMap.isEmpty() || !domainsMap.containsKey(domain)) {
                throw new IllegalArgumentException("requested domain is not supported by this mosaic: " + domain);
            }
            
            
            // get the property name
            DomainDescriptor domainDescriptor = domainsMap.get(domain);
            final String propertyName=domainDescriptor.getPropertyName();
            
            // === create the filter
            // loop values and AND them
            final int size = values.size();
            final List<Filter> filters= new ArrayList<Filter>();
            for(int i=0;i<size;i++){
                // checks
                final Object value = values.get(i);
                if(value==null){
                    if(LOGGER.isLoggable(Level.INFO)){
                        LOGGER.info("Ignoring null date for the filter:"+domain);
                    }
                    continue;
                }                    
                if(value instanceof Range){
                    // RANGE                        
                    final Range range= (Range)value;
                    filters.add( 
                            FeatureUtilities.DEFAULT_FILTER_FACTORY.and(
                                    FeatureUtilities.DEFAULT_FILTER_FACTORY.lessOrEqual(
                                            FeatureUtilities.DEFAULT_FILTER_FACTORY.property(propertyName), 
                                            FeatureUtilities.DEFAULT_FILTER_FACTORY.literal(range.getMaxValue())),
                                    FeatureUtilities.DEFAULT_FILTER_FACTORY.greaterOrEqual(
                                            FeatureUtilities.DEFAULT_FILTER_FACTORY.property(propertyName), 
                                            FeatureUtilities.DEFAULT_FILTER_FACTORY.literal(range.getMinValue()))
                            ));                                
                    continue;
                }  
                // SINGLE value
                filters.add( 
                        FeatureUtilities.DEFAULT_FILTER_FACTORY.equal(
                                FeatureUtilities.DEFAULT_FILTER_FACTORY.property(propertyName),
                                FeatureUtilities.DEFAULT_FILTER_FACTORY.literal(value),true)
                            );                    
            }
            return FeatureUtilities.DEFAULT_FILTER_FACTORY.or(filters);
            
        }

