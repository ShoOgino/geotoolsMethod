    protected void initializeTypeNames(final Properties params) throws IOException {
        String typeName = null;
        boolean scanForTypeNames = false;

        if (params.containsKey(Utils.Prop.TYPENAME)) {
            typeName = (String) params.get(Utils.Prop.TYPENAME);
        }

        if (params.containsKey(Utils.SCAN_FOR_TYPENAMES)) {
            scanForTypeNames = Boolean.valueOf(params.get(Utils.SCAN_FOR_TYPENAMES).toString());
        }

        // if this is not a new store let's extract basic properties from it
        if (scanForTypeNames) {
            String[] typeNames = getTileIndexStore().getTypeNames();
            if (typeNames != null) {
                for (String tn : typeNames) {
                    this.getValidTypeNames().add(tn);
                }
            }
        } else if (typeName != null) {
            checkMosaicSchema(typeName);
            addTypeName(typeName, false);
        } else {
            // pick the first suitable type name
            String[] typeNames = getTileIndexStore().getTypeNames();
            if (typeNames != null) {
                for (String tn : typeNames) {
                    if (isValidMosaicSchema(tn)) {
                        addTypeName(tn, false);
                        break;
                    }
                }
            }
        }

        // if we got here and there is not typename in the list, we could not find one
        if (this.getValidTypeNames().size() == 0) {
            throw new IllegalArgumentException(
                    "Could not find a suitable mosaic type "
                            + "(with a footprint and a location attribute named "
                            + getLocationAttributeName()
                            + " in the store");
        }

        if (this.getValidTypeNames().size() > 0) {
            // pick the first valid schema found
            for (String tn : getValidTypeNames()) {
                if (isValidMosaicSchema(tn)) {
                    extractBasicProperties(tn);
                    break;
                }
            }
        } else if (typeName != null && typeName.contains(",")) {
            String[] typeNames = typeName.split(",");
            for (String tn : typeNames) {
                extractBasicProperties(tn);
            }
        } else if (typeName != null) {
            extractBasicProperties(typeName);
        } else {
            extractBasicProperties(typeName);
        }
    }

