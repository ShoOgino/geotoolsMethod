    private void extractProperties(final MosaicConfigurationBean configuration) throws IOException {

        // resolutions levels
        numOverviews = configuration.getLevelsNum() - 1;
        final double[][] resolutions = configuration.getLevels();
        overViewResolutions = numOverviews >= 1 ? new double[numOverviews][2] : null;
        highestRes = new double[2];
        highestRes[0] = resolutions[0][0];
        highestRes[1] = resolutions[0][1];

        if (LOGGER.isLoggable(Level.FINE))
            LOGGER.fine(new StringBuilder("Highest res ").append(highestRes[0]).append(" ")
                    .append(highestRes[1]).toString());

        if (numOverviews > 0) {
            for (int i = 0; i < numOverviews; i++) {
                overViewResolutions[i][0] = resolutions[i + 1][0];
                overViewResolutions[i][1] = resolutions[i + 1][1];
            }
        }

        // name
        coverageName = configuration.getName();

        // need a color expansion?
        // this is a newly added property we have to be ready to the case where
        // we do not find it.
        expandMe = configuration.isExpandToRGB();

        checkAuxiliaryMetadata = configuration.isCheckAuxiliaryMetadata();

        CatalogConfigurationBean catalogConfigurationBean = configuration
                .getCatalogConfigurationBean();

        // do we have heterogenous granules
        heterogeneousGranules = catalogConfigurationBean.isHeterogeneous();

        // absolute or relative path
        pathType = catalogConfigurationBean.isAbsolutePath() ? PathType.ABSOLUTE
                : PathType.RELATIVE;

        //
        // location attribute
        //
        locationAttributeName = catalogConfigurationBean.getLocationAttribute();

        // suggested SPI
        final String suggestedSPIClass = catalogConfigurationBean.getSuggestedSPI();
        if (suggestedSPIClass != null) {
            try {
                final Class<?> clazz = Class.forName(suggestedSPIClass);
                if (clazz.newInstance() instanceof ImageReaderSpi)
                    suggestedSPI = (ImageReaderSpi) clazz.newInstance();
                else
                    suggestedSPI = null;
            } catch (Exception e) {
                if (LOGGER.isLoggable(Level.FINE))
                    LOGGER.log(Level.FINE, e.getLocalizedMessage(), e);
                suggestedSPI = null;
            }
        }

        // caching for the index
        cachingIndex = catalogConfigurationBean.isCaching();

        // imposed BBOX
        if (configuration.getEnvelope() != null) {
            this.imposedBBox = true;
            // we set the BBOX later to retain also the CRS
        } else {
            this.imposedBBox = false;
        }

        // typeName to be used for reading the mosaic
        this.typeName = catalogConfigurationBean.getTypeName();

    }

