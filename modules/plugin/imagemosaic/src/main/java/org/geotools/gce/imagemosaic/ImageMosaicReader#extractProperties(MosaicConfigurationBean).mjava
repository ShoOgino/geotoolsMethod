	private MosaicConfigurationBean extractProperties(final MosaicConfigurationBean configuration) {

		// resolutions levels
		numOverviews = configuration.getLevelsNum() - 1;
		final double[][] resolutions = configuration.getLevels();
		overViewResolutions = numOverviews >= 1 ? new double[numOverviews][2]: null;
		highestRes = new double[2];
		highestRes[0] = resolutions[0][0];
		highestRes[1] = resolutions[0][1];

		if (LOGGER.isLoggable(Level.FINE))
			LOGGER.fine(new StringBuilder("Highest res ").append(highestRes[0])
					.append(" ").append(highestRes[1]).toString());

		if (numOverviews > 0){
	   		for (int i = 0; i < numOverviews; i++) {     			
				overViewResolutions[i][0] = resolutions[i+1][0];
				overViewResolutions[i][1] = resolutions[i+1][1];
	   		}	
		}
	
		// name
		coverageName = configuration.getName();

		// need a color expansion?
		// this is a newly added property we have to be ready to the case where
		// we do not find it.
		expandMe = configuration.isExpandToRGB();
		
		// do we have heterogenous granules
		heterogeneousGranules = configuration.isHeterogeneous();

		// absolute or relative path
		pathType = configuration.isAbsolutePath()?PathType.ABSOLUTE:PathType.RELATIVE;
		
		//
		// location attribute
		//
		locationAttributeName = configuration.getLocationAttribute();
		
		// suggested SPI
		final String suggestedSPIClass = configuration.getSuggestedSPI();
		if (suggestedSPIClass != null){
			try {
				final Class<?> clazz=Class.forName(suggestedSPIClass);
				if(clazz.newInstance() instanceof ImageReaderSpi)
					suggestedSPI=(ImageReaderSpi)clazz.newInstance();
				else
					suggestedSPI=null;
			} catch (ClassNotFoundException e) {
				if(LOGGER.isLoggable(Level.FINE))
					LOGGER.log(Level.FINE,e.getLocalizedMessage(),e);
				suggestedSPI=null;
			} catch (InstantiationException e) {
				if(LOGGER.isLoggable(Level.FINE))
					LOGGER.log(Level.FINE,e.getLocalizedMessage(),e);
				suggestedSPI=null;
			} catch (IllegalAccessException e) {
				if(LOGGER.isLoggable(Level.FINE))
					LOGGER.log(Level.FINE,e.getLocalizedMessage(),e);
				suggestedSPI=null;
			}
		}
		
		// time param
		final String timeAttribute = configuration.getTimeAttribute();
		if(timeAttribute != null)
			this.timeAttribute = timeAttribute;
		
		
		// elevation param
		final String elevationAttribute = configuration.getElevationAttribute();
		if(elevationAttribute != null)
			this.elevationAttribute = elevationAttribute;				

               final String additionalDomainAttribute = configuration.getAdditionalDomainAttributes();
               if (additionalDomainAttribute != null) {
                   additionalDomainManager = new AdditionalDomainManager(additionalDomainAttribute);
               }

		// caching for the index
		cachingIndex = configuration.isCaching();
		
		// imposed BBOX
        if(configuration.getEnvelope()!=null){
    		this.imposedBBox=true;
    		// we set the BBOX later to retain also the CRS
        } else {
        	this.imposedBBox=false;
        }
		
		// typeName to be used for reading the mosaic
		this.typeName=configuration.getTypeName();
		
		return configuration;
	}

