    protected void handleCogGranule(final String granuleBeingProcessed) throws IOException {

        // increment counter
        fileIndex++;

        // replacing chars on input path
        String validFileName;
        String extension;
        File fileRepresentation = new File(granuleBeingProcessed);
        validFileName = granuleBeingProcessed;
        extension = FilenameUtils.getExtension(validFileName);
        validFileName = FilenameUtils.getName(validFileName);
        eventHandler.fireEvent(
                Level.INFO, "Now indexing file " + validFileName, ((fileIndex * 100.0) / numFiles));
        GridCoverage2DReader coverageReader = null;
        try {
            // STEP 1
            // Getting a coverage reader for this coverage.
            //
            final AbstractGridFormat format;
            final AbstractGridFormat cachedFormat = configHandler.getCachedFormat();

            CogConfiguration cogBean =
                    new CogConfiguration(configHandler.getRunConfiguration().getIndexer());
            SourceSPIProvider readerInputObject =
                    new CogSourceSPIProvider(
                            cogBean.createUri(granuleBeingProcessed),
                            COG_IMAGE_READER_SPI,
                            COG_IMAGE_INPUT_STREAM_SPI,
                            cogBean.getRangeReader());

            if (cachedFormat == null) {
                // When looking for formats which may parse this file, make sure to exclude the
                // ImageMosaicFormat as return
                format = GridFormatFinder.findFormat(readerInputObject, excludeMosaicHints);
            } else {
                if (cachedFormat.accepts(readerInputObject)) {
                    format = cachedFormat;
                } else {
                    format = GridFormatFinder.findFormat(readerInputObject, excludeMosaicHints);
                }
            }
            if ((format instanceof UnknownFormat) || format == null) {
                if (!logExcludes.contains(extension)) {
                    eventHandler.fireFileEvent(
                            Level.INFO,
                            fileRepresentation,
                            false,
                            "Skipped granule "
                                    + granuleBeingProcessed
                                    + ": File format is not supported.",
                            ((fileIndex * 99.0) / numFiles));
                }
                return;
            }

            final Hints configurationHints = configHandler.getRunConfiguration().getHints();
            coverageReader =
                    (GridCoverage2DReader) format.getReader(readerInputObject, configurationHints);

            // Setting of the ReaderSPI to use
            if (configHandler.getCachedReaderSPI() == null) {
                ImageInputStreamSpi inStreamSpi = readerInputObject.getStreamSpi();
                // Ensure that the ImageInputStreamSPI is available
                if (inStreamSpi == null) {
                    throw new IllegalArgumentException("no inputStreamSPI available!");
                }
                ImageInputStream inStream = null;
                try {
                    // Get the ImageInputStream from the SPI

                    inStream = ((CogSourceSPIProvider) readerInputObject).getStream();
                    // Throws an Exception if the ImageInputStream is not present
                    if (inStream == null) {
                        if (LOGGER.isLoggable(Level.WARNING)) {
                            LOGGER.log(
                                    Level.WARNING,
                                    "Unable to open a stream on " + granuleBeingProcessed);
                        }
                        throw new IllegalArgumentException(
                                "Unable to get an input stream for the provided file granule"
                                        + granuleBeingProcessed);
                    }
                    // Selection of the ImageReaderSpi from the Stream
                    ImageReaderSpi spi = readerInputObject.getReaderSpi();
                    // Setting of the ImageReaderSpi to the ImageMosaicConfigHandler in order to set
                    // it inside the indexer properties
                    configHandler.setCachedReaderSPI(spi);
                } finally {
                    if (inStream != null) {
                        inStream.close();
                    }
                }
            }

            // Getting available coverageNames from the reader
            String[] coverageNames = coverageReader.getGridCoverageNames();

            for (String cvName : coverageNames) {
                try {

                    //  Assume that all the granules already put on the datastore are valid
                    configHandler.setCachedFormat(format);
                } catch (Exception e) {
                    LOGGER.log(
                            Level.FINE,
                            "Failure during potential granule evaluation, skipping it: "
                                    + granuleBeingProcessed,
                            e);
                }

                configHandler.updateConfiguration(
                        coverageReader,
                        cvName,
                        fileRepresentation,
                        fileIndex,
                        numFiles,
                        transaction);

                // fire event
                eventHandler.fireFileEvent(
                        Level.FINE,
                        fileRepresentation,
                        true,
                        "Done with file " + granuleBeingProcessed,
                        (((fileIndex + 1) * 99.0) / numFiles));
            }
        } catch (Exception e) {
            // we got an exception, we should stop the walk
            eventHandler.fireException(e);

            this.stop();
            return;
        } finally {

            try {
                if (coverageReader != null)
                    // release resources
                    coverageReader.dispose();
            } catch (Throwable e) {
                // ignore exception
                if (LOGGER.isLoggable(Level.FINEST))
                    LOGGER.log(Level.FINEST, e.getLocalizedMessage(), e);
            }
        }
    }

