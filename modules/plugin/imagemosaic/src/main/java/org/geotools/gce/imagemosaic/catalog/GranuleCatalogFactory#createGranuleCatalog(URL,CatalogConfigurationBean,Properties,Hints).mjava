    public static GranuleCatalog createGranuleCatalog(
            final URL sourceURL,
            final CatalogConfigurationBean catalogConfigurationBean,
            final Properties overrideParams,
            final Hints hints) {
        final File sourceFile = URLs.urlToFile(sourceURL);
        final String extension = FilenameUtils.getExtension(sourceFile.getAbsolutePath());

        // STANDARD PARAMS
        final Properties params = new Properties();

        params.put(Utils.Prop.PATH_TYPE, catalogConfigurationBean.getPathType());

        if (catalogConfigurationBean.getLocationAttribute() != null)
            params.put(
                    Utils.Prop.LOCATION_ATTRIBUTE, catalogConfigurationBean.getLocationAttribute());

        if (catalogConfigurationBean.getSuggestedSPI() != null)
            params.put(Utils.Prop.SUGGESTED_SPI, catalogConfigurationBean.getSuggestedSPI());

        if (catalogConfigurationBean.getSuggestedFormat() != null)
            params.put(Utils.Prop.SUGGESTED_FORMAT, catalogConfigurationBean.getSuggestedFormat());

        if (catalogConfigurationBean.getSuggestedIsSPI() != null)
            params.put(Utils.Prop.SUGGESTED_IS_SPI, catalogConfigurationBean.getSuggestedIsSPI());

        params.put(Utils.Prop.HETEROGENEOUS, catalogConfigurationBean.isHeterogeneous());
        params.put(Utils.Prop.WRAP_STORE, catalogConfigurationBean.isWrapStore());
        if (sourceURL != null) {
            File parentDirectory = URLs.urlToFile(sourceURL);
            if (parentDirectory.isFile()) parentDirectory = parentDirectory.getParentFile();
            params.put(Utils.Prop.PARENT_LOCATION, URLs.fileToUrl(parentDirectory).toString());
        }
        // add typename
        String typeName = catalogConfigurationBean.getTypeName();
        if (typeName != null) {
            params.put(Utils.Prop.TYPENAME, catalogConfigurationBean.getTypeName());
        }
        // SPI
        DataStoreFactorySpi spi = null;

        // Now format specific code
        if (extension.equalsIgnoreCase("shp")) {
            //
            // SHAPEFILE
            //
            params.put(ShapefileDataStoreFactory.URLP.key, sourceURL);
            params.put(ShapefileDataStoreFactory.CREATE_SPATIAL_INDEX.key, Boolean.TRUE);
            params.put(ShapefileDataStoreFactory.ENABLE_SPATIAL_INDEX.key, Boolean.TRUE);
            params.put(ShapefileDataStoreFactory.MEMORY_MAPPED.key, Boolean.FALSE);
            params.put(ShapefileDataStoreFactory.CACHE_MEMORY_MAPS.key, Boolean.FALSE);
            params.put(ShapefileDataStoreFactory.DBFTIMEZONE.key, TimeZone.getTimeZone("UTC"));
            spi = Utils.SHAPE_SPI;
        } else {
            // read the properties file
            Properties properties = CoverageUtilities.loadPropertiesFromURL(sourceURL);
            if (properties == null) return null;

            // get the params
            for (Object p : properties.keySet()) {
                params.put(p.toString(), properties.get(p).toString());
            }

            // SPI for datastore
            final String SPIClass = properties.getProperty("SPI");
            try {
                // create a datastore as instructed
                spi =
                        (DataStoreFactorySpi)
                                Class.forName(SPIClass).getDeclaredConstructor().newInstance();
            } catch (Exception e) {
                // if we are directed to use a pre-existing store then don't complain about lack of
                // SPI
                if (properties.get(Utils.Prop.STORE_NAME) == null) {
                    if (LOGGER.isLoggable(Level.WARNING)) {
                        LOGGER.log(Level.WARNING, e.getLocalizedMessage(), e);
                    }
                    return null;
                }
            }
        }
        // Instantiate
        if (overrideParams != null && !overrideParams.isEmpty()) {
            params.putAll(overrideParams);
        }
        return createGranuleCatalog(
                params, catalogConfigurationBean.isCaching(), false, spi, hints);
    }

