    /**
     * Handles the optional {@link SortBy} clause for the query to the catalog
     *
     * @param query the {@link Query} to set the {@link SortBy} for.
     * @throws IOException
     */
    private void handleSortByClause(final Query query) throws IOException {
        Utilities.ensureNonNull("query", query);
        LOGGER.fine("Prepping to manage SortBy Clause");
        final String sortByClause = request.getSortClause();
        final GranuleCatalog catalog = rasterManager.getGranuleCatalog();
        if (sortByClause != null && sortByClause.length() > 0) {
            final String[] elements = sortByClause.split(",");
            if (elements != null && elements.length > 0) {
                final List<SortBy> clauses = new ArrayList<>(elements.length);
                for (String element : elements) {
                    // check
                    if (element == null || element.length() <= 0) {
                        continue; // next, please!
                    }
                    try {
                        // which clause?
                        // ASCENDING
                        element = element.trim();
                        if (element.endsWith(Utils.ASCENDING_ORDER_IDENTIFIER)) {
                            String attribute = element.substring(0, element.length() - 2);
                            clauses.add(
                                    new SortByImpl(
                                            FeatureUtilities.DEFAULT_FILTER_FACTORY.property(
                                                    attribute),
                                            SortOrder.ASCENDING));
                            LOGGER.fine("Added clause ASCENDING on attribute:" + attribute);
                        } else
                        // DESCENDING
                        if (element.contains(Utils.DESCENDING_ORDER_IDENTIFIER)) {
                            String attribute = element.substring(0, element.length() - 2);
                            clauses.add(
                                    new SortByImpl(
                                            FeatureUtilities.DEFAULT_FILTER_FACTORY.property(
                                                    attribute),
                                            SortOrder.DESCENDING));
                            LOGGER.fine("Added clause DESCENDING on attribute:" + attribute);
                        } else {
                            LOGGER.fine("Ignoring sort clause :" + element);
                        }
                    } catch (Exception e) {
                        if (LOGGER.isLoggable(Level.INFO)) {
                            LOGGER.log(Level.INFO, e.getLocalizedMessage(), e);
                        }
                    }
                }

                // assign to query if sorting is supported!
                SortBy[] sortBy = clauses.toArray(new SortBy[] {});
                if (catalog.getQueryCapabilities(rasterManager.getTypeName())
                        .supportsSorting(sortBy)) {
                    query.setSortBy(sortBy);
                }
            } else {
                LOGGER.fine("No SortBy Clause");
            }
        } else {
            // no specified sorting, is this a heterogeneous CRS mosaic?
            String crsAttribute = rasterManager.getCrsAttribute();
            if (crsAttribute != null) {
                SortBy sort =
                        new SortByImpl(
                                FeatureUtilities.DEFAULT_FILTER_FACTORY.property(crsAttribute),
                                SortOrder.ASCENDING);
                SortBy[] sortBy = new SortBy[] {sort};
                if (catalog.getQueryCapabilities(rasterManager.getTypeName())
                        .supportsSorting(sortBy)) {
                    query.setSortBy(sortBy);
                } else {
                    LOGGER.severe(
                            "Sorting parameter ignored, underlying datastore cannot sort on "
                                    + Arrays.toString(sortBy));
                }
            }
        }
    }

