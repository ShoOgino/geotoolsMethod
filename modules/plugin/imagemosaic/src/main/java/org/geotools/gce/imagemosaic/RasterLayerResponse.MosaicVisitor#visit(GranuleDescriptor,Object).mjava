        public void visit(GranuleDescriptor granuleDescriptor, Object o) {

            //
            // load raster data
            //
            // create a granuleDescriptor loader
            final Geometry bb = JTS.toGeometry((BoundingBox) mosaicBBox);
            final Geometry inclusionGeometry = granuleDescriptor.inclusionGeometry;
            if (!footprintManagement || inclusionGeometry == null || footprintManagement && inclusionGeometry.intersects(bb)) {
                final GranuleLoader loader = new GranuleLoader(baseReadParameters, imageChoice,mosaicBBox, finalWorldToGridCorner, granuleDescriptor, request, hints);

                // find the right filter for this granule
                boolean found = false;
                for (int i = dimensionValueFilters.size() - 1; i >= 0; i--) {
                    final Filter filter = dimensionValueFilters.get(i);
                    if (filter != null && filter.evaluate(granuleDescriptor.originator)) {
                        if (multithreadingAllowed && rasterManager.parent.multiThreadedLoader != null) {
                            // MULTITHREADED EXECUTION submitting the task
                            granulesFutures.get(i).add(rasterManager.parent.multiThreadedLoader.submit(loader));
                        } else {
                            // SINGLE THREADED Execution, we defer the execution to when we have done the loading
                            final FutureTask<GranuleLoadingResult> task = new FutureTask<GranuleLoadingResult>(loader);
                            granulesFutures.get(i).add(task);
                            task.run(); // run in current thread
                        }
                        granulesNumber++;
                        found = true;
                        break;
                    }
                }
                // did we find a place for it?
                if (!found) {
                    throw new IllegalStateException("Unable to locate a filter for this granule:\n" + granuleDescriptor.toString()); 
                }

            }
        }

