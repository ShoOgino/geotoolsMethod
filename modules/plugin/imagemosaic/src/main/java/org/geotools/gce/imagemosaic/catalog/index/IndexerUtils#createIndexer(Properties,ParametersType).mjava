    private static Indexer createIndexer(Properties props, ParametersType params) {
        // Initializing Indexer objects
        Indexer indexer = Utils.OBJECT_FACTORY.createIndexer();
        indexer.setParameters(
                params != null ? params : Utils.OBJECT_FACTORY.createParametersType());
        Coverages coverages = Utils.OBJECT_FACTORY.createIndexerCoverages();
        indexer.setCoverages(coverages);
        List<Coverage> coverageList = coverages.getCoverage();

        Coverage coverage = Utils.OBJECT_FACTORY.createIndexerCoveragesCoverage();
        coverageList.add(coverage);

        indexer.setParameters(params);
        List<Parameter> parameters = params.getParameter();

        // name
        if (props.containsKey(Utils.Prop.NAME)) {
            setParam(parameters, props, Utils.Prop.NAME);
            coverage.setName(props.getProperty(Utils.Prop.NAME));
        }

        // type name
        if (props.containsKey(Utils.Prop.TYPENAME)) {
            setParam(parameters, props, Utils.Prop.TYPENAME);
            coverage.setName(props.getProperty(Utils.Prop.TYPENAME));
        }

        // absolute
        if (props.containsKey(Utils.Prop.ABSOLUTE_PATH))
            setParam(parameters, props, Utils.Prop.ABSOLUTE_PATH);

        if (props.containsKey(Utils.Prop.PATH_TYPE))
            setParam(parameters, props, Utils.Prop.PATH_TYPE);

        // recursive
        if (props.containsKey(Utils.Prop.RECURSIVE))
            setParam(parameters, props, Utils.Prop.RECURSIVE);

        // wildcard
        if (props.containsKey(Utils.Prop.WILDCARD))
            setParam(parameters, props, Utils.Prop.WILDCARD);

        // granule acceptors string
        if (props.containsKey(Utils.Prop.GRANULE_ACCEPTORS)) {
            setParam(parameters, props, Utils.Prop.GRANULE_ACCEPTORS);
        }

        if (props.containsKey(Utils.Prop.GEOMETRY_HANDLER)) {
            setParam(parameters, props, Utils.Prop.GEOMETRY_HANDLER);
        }

        if (props.containsKey(Utils.Prop.COVERAGE_NAME_COLLECTOR_SPI)) {
            IndexerUtils.setParam(parameters, props, Utils.Prop.COVERAGE_NAME_COLLECTOR_SPI);
        }

        // schema
        if (props.containsKey(Utils.Prop.SCHEMA)) {
            SchemasType schemas = Utils.OBJECT_FACTORY.createSchemasType();
            SchemaType schema = Utils.OBJECT_FACTORY.createSchemaType();
            indexer.setSchemas(schemas);
            schemas.getSchema().add(schema);
            schema.setAttributes(props.getProperty(Utils.Prop.SCHEMA));
            schema.setName(getParameter(Utils.Prop.INDEX_NAME, indexer));
        }

        // add well known domains
        addDomain(props, coverage, Utils.Prop.TIME_ATTRIBUTE, Utils.TIME_DOMAIN);
        addDomain(props, coverage, Utils.Prop.ELEVATION_ATTRIBUTE, Utils.ELEVATION_DOMAIN);
        addDomain(props, coverage, Utils.Prop.CRS_ATTRIBUTE, Utils.CRS_DOMAIN);
        addDomain(props, coverage, Utils.Prop.RESOLUTION_ATTRIBUTE, Utils.RESOLUTION_DOMAIN);
        addDomain(props, coverage, Utils.Prop.RESOLUTION_X_ATTRIBUTE, Utils.RESOLUTION_X_DOMAIN);
        addDomain(props, coverage, Utils.Prop.RESOLUTION_Y_ATTRIBUTE, Utils.RESOLUTION_Y_DOMAIN);

        // Additional domain attr
        if (props.containsKey(Utils.Prop.ADDITIONAL_DOMAIN_ATTRIBUTES)) {
            DomainsType domains = coverage.getDomains();
            if (domains == null) {
                domains = Utils.OBJECT_FACTORY.createDomainsType();
                coverage.setDomains(domains);
            }
            List<DomainType> domainList = domains.getDomain();
            String attributes = props.getProperty(Utils.Prop.ADDITIONAL_DOMAIN_ATTRIBUTES);
            parseAdditionalDomains(attributes, domainList);
        }

        // imposed BBOX
        if (props.containsKey(Utils.Prop.ENVELOPE2D))
            setParam(parameters, props, Utils.Prop.ENVELOPE2D);

        // imposed Pyramid Layout
        if (props.containsKey(Utils.Prop.RESOLUTION_LEVELS))
            setParam(parameters, props, Utils.Prop.RESOLUTION_LEVELS);

        // collectors
        if (props.containsKey(Utils.Prop.PROPERTY_COLLECTORS)) {
            setPropertyCollectors(indexer, props.getProperty(Utils.Prop.PROPERTY_COLLECTORS));
        }

        if (props.containsKey(Utils.Prop.CACHING)) setParam(parameters, props, Utils.Prop.CACHING);

        if (props.containsKey(Utils.Prop.ROOT_MOSAIC_DIR)) {
            // Overriding root mosaic directory
            setParam(parameters, props, Utils.Prop.ROOT_MOSAIC_DIR);
        }

        if (props.containsKey(Utils.Prop.INDEXING_DIRECTORIES)) {
            setParam(parameters, props, Utils.Prop.INDEXING_DIRECTORIES);
        }
        if (props.containsKey(Utils.Prop.AUXILIARY_FILE)) {
            setParam(parameters, props, Utils.Prop.AUXILIARY_FILE);
        }
        if (props.containsKey(Utils.Prop.AUXILIARY_DATASTORE_FILE)) {
            setParam(parameters, props, Utils.Prop.AUXILIARY_DATASTORE_FILE);
        }
        if (props.containsKey(Utils.Prop.CAN_BE_EMPTY)) {
            setParam(parameters, props, Utils.Prop.CAN_BE_EMPTY);
        }
        if (props.containsKey(Utils.Prop.WRAP_STORE)) {
            setParam(parameters, props, Utils.Prop.WRAP_STORE);
        }
        if (props.containsKey(Utils.Prop.USE_EXISTING_SCHEMA)) {
            setParam(parameters, props, Utils.Prop.USE_EXISTING_SCHEMA);
        }
        if (props.containsKey(Utils.Prop.CHECK_AUXILIARY_METADATA)) {
            setParam(parameters, props, Utils.Prop.CHECK_AUXILIARY_METADATA);
        }

        if (props.containsKey(Utils.Prop.GRANULE_COLLECTOR_FACTORY)) {
            setParam(parameters, props, Utils.Prop.GRANULE_COLLECTOR_FACTORY);
        }

        if (props.containsKey(Utils.Prop.HETEROGENEOUS_CRS)) {
            setParam(parameters, props, Utils.Prop.HETEROGENEOUS_CRS);
        }

        if (props.containsKey(Utils.Prop.MOSAIC_CRS)) {
            setParam(parameters, props, Utils.Prop.MOSAIC_CRS);
        }

        if (props.containsKey(Utils.Prop.NO_DATA)) {
            setParam(parameters, props, Utils.Prop.NO_DATA);
        }

        return indexer;
    }

