    /** Creates the final properties file. */
    private void createPropertiesFiles(MosaicConfigurationBean mosaicConfiguration) {

        //
        // FINAL STEP
        //
        // CREATING GENERAL INFO FILE
        //

        CatalogConfigurationBean catalogConfigurationBean =
                mosaicConfiguration.getCatalogConfigurationBean();

        // envelope
        final Properties properties = new Properties();
        properties.setProperty(
                Utils.Prop.PATH_TYPE, catalogConfigurationBean.getPathType().toString());
        properties.setProperty(
                Utils.Prop.LOCATION_ATTRIBUTE, catalogConfigurationBean.getLocationAttribute());

        // Time
        final String timeAttribute = mosaicConfiguration.getTimeAttribute();
        if (timeAttribute != null) {
            properties.setProperty(
                    Utils.Prop.TIME_ATTRIBUTE, mosaicConfiguration.getTimeAttribute());
        }

        // Elevation
        final String elevationAttribute = mosaicConfiguration.getElevationAttribute();
        if (elevationAttribute != null) {
            properties.setProperty(
                    Utils.Prop.ELEVATION_ATTRIBUTE, mosaicConfiguration.getElevationAttribute());
        }

        // CRS
        final String crsAttribute = mosaicConfiguration.getCRSAttribute();
        if (crsAttribute != null) {
            properties.setProperty(Utils.Prop.CRS_ATTRIBUTE, mosaicConfiguration.getCRSAttribute());
        }

        // Additional domains
        final String additionalDomainAttribute =
                mosaicConfiguration.getAdditionalDomainAttributes();
        if (additionalDomainAttribute != null) {
            properties.setProperty(
                    Utils.Prop.ADDITIONAL_DOMAIN_ATTRIBUTES,
                    mosaicConfiguration.getAdditionalDomainAttributes());
        }

        final int numberOfLevels = mosaicConfiguration.getLevelsNum();
        final double[][] resolutionLevels = mosaicConfiguration.getLevels();
        properties.setProperty(Utils.Prop.LEVELS_NUM, Integer.toString(numberOfLevels));
        final StringBuilder levels = new StringBuilder();
        for (int k = 0; k < numberOfLevels; k++) {
            levels.append(Double.toString(resolutionLevels[k][0]))
                    .append(",")
                    .append(Double.toString(resolutionLevels[k][1]));
            if (k < numberOfLevels - 1) {
                levels.append(" ");
            }
        }
        properties.setProperty(Utils.Prop.LEVELS, levels.toString());
        properties.setProperty(Utils.Prop.NAME, mosaicConfiguration.getName());
        String typeName = mosaicConfiguration.getCatalogConfigurationBean().getTypeName();
        if (typeName == null) {
            typeName = mosaicConfiguration.getName();
        }
        properties.setProperty(Utils.Prop.TYPENAME, typeName);
        properties.setProperty(
                Utils.Prop.EXP_RGB, Boolean.toString(mosaicConfiguration.isExpandToRGB()));
        properties.setProperty(
                Utils.Prop.CHECK_AUXILIARY_METADATA,
                Boolean.toString(mosaicConfiguration.isCheckAuxiliaryMetadata()));
        properties.setProperty(
                Utils.Prop.HETEROGENEOUS,
                Boolean.toString(catalogConfigurationBean.isHeterogeneous()));
        properties.setProperty(
                Utils.Prop.HETEROGENEOUS_CRS,
                Boolean.toString(catalogConfigurationBean.isHeterogeneousCRS()));

        boolean wrapStore = catalogConfigurationBean.isWrapStore();
        if (wrapStore) {
            // Avoid setting this property when false, since it's default
            properties.setProperty(Utils.Prop.WRAP_STORE, Boolean.toString(wrapStore));
        }

        if (cachedReaderSPI != null) {
            // suggested spi
            properties.setProperty(Utils.Prop.SUGGESTED_SPI, cachedReaderSPI.getClass().getName());
        }
        if (cachedFormat != null) {
            properties.setProperty(Prop.SUGGESTED_FORMAT, cachedFormat.getClass().getName());
        }

        URLSourceSPIProvider urlSourceSpiProvider =
                catalogConfigurationBean.getUrlSourceSPIProvider();
        if (urlSourceSpiProvider instanceof CogConfiguration) {
            CogConfiguration cogBean = (CogConfiguration) urlSourceSpiProvider;
            properties.setProperty(Prop.COG, Boolean.toString(true));
            String rangeReader = cogBean.getRangeReader();
            if (rangeReader != null) {
                properties.setProperty(Prop.COG_RANGE_READER, rangeReader);
            }
            String user = cogBean.getUser();
            if (user != null) {
                properties.setProperty(Prop.COG_USER, user);
            }
            String password = cogBean.getPassword();
            if (password != null) {
                properties.setProperty(Prop.COG_PASSWORD, password);
            }
            boolean useCache = cogBean.isUseCache();
            properties.setProperty(Prop.COG_USE_CACHE, Boolean.toString(useCache));
        }

        // write down imposed bbox
        if (imposedBBox != null) {
            properties.setProperty(
                    Utils.Prop.ENVELOPE2D,
                    imposedBBox.getMinX()
                            + ","
                            + imposedBBox.getMinY()
                            + " "
                            + imposedBBox.getMaxX()
                            + ","
                            + imposedBBox.getMaxY());
        }
        properties.setProperty(
                Utils.Prop.CACHING, Boolean.toString(catalogConfigurationBean.isCaching()));
        if (mosaicConfiguration.getAuxiliaryFilePath() != null) {
            properties.setProperty(
                    Utils.Prop.AUXILIARY_FILE, mosaicConfiguration.getAuxiliaryFilePath());
        }
        if (mosaicConfiguration.getAuxiliaryDatastorePath() != null) {
            properties.setProperty(
                    Utils.Prop.AUXILIARY_DATASTORE_FILE,
                    mosaicConfiguration.getAuxiliaryDatastorePath());
        }
        if (mosaicConfiguration.getCoverageNameCollectorSpi() != null) {
            properties.setProperty(
                    Utils.Prop.COVERAGE_NAME_COLLECTOR_SPI,
                    mosaicConfiguration.getCoverageNameCollectorSpi());
        }

        if (mosaicConfiguration.getCrs() != null) {
            properties.setProperty(Prop.MOSAIC_CRS, CRS.toSRS(mosaicConfiguration.getCrs()));
        }

        if (mosaicConfiguration.getNoData() != null) {
            properties.setProperty(Prop.NO_DATA, String.valueOf(mosaicConfiguration.getNoData()));
        }

        String filePath =
                runConfiguration.getParameter(Prop.ROOT_MOSAIC_DIR)
                        + "/"
                        // + runConfiguration.getIndexName() + ".properties"));
                        + mosaicConfiguration.getName()
                        + ".properties";
        try (OutputStream outStream = new BufferedOutputStream(new FileOutputStream(filePath))) {
            properties.store(outStream, "-Automagically created from GeoTools-");
        } catch (IOException e) {
            eventHandler.fireEvent(Level.SEVERE, e.getLocalizedMessage(), 0);
        }
    }

