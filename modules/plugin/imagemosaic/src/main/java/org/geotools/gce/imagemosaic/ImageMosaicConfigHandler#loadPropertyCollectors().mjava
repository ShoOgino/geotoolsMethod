    /**
     * Load properties collectors from the configuration
     */
    private void loadPropertyCollectors() {
        // load property collectors
        Indexer indexer = runConfiguration.getIndexer();
        Collectors collectors = indexer.getCollectors();
        // check whether this indexer allows heterogeneous CRS, then we know we need the CRS collector
        Boolean heterogeneousCRS = Boolean
            .valueOf(IndexerUtils.getParameter(Prop.HETEROGENEOUS_CRS, indexer));
        if (collectors == null) {
            if (LOGGER.isLoggable(Level.FINE)) {
                LOGGER.fine("No properties collector have been found");
            }

            if (heterogeneousCRS) {
                this.propertiesCollectors = Collections.singletonList(new CRSExtractor());
                for (MosaicConfigurationBean configuration : configurations.values()) {
                    configuration.getCatalogConfigurationBean().setHeterogeneousCRS(true);
                }
            }
            return;
        }
        List<Collector> collectorList = collectors.getCollector();

        // load the SPI set
        final Set<PropertiesCollectorSPI> pcSPIs = PropertiesCollectorFinder
                .getPropertiesCollectorSPI();

        // parse the string
        final List<PropertiesCollector> pcs = new ArrayList<>();
        boolean hasCRSCollector = false;
        for (Collector collector : collectorList) {
            PropertiesCollectorSPI selectedSPI = null;
            final String spiName = collector.getSpi();
            for (PropertiesCollectorSPI spi : pcSPIs) {
                if (spi.isAvailable() && spi.getName().equalsIgnoreCase(spiName)) {
                    selectedSPI = spi;
                    break;
                }
            }

            if (selectedSPI == null) {
                if (LOGGER.isLoggable(Level.INFO)) {
                    LOGGER.info(
                            "Unable to find a PropertyCollector for this definition: " + spiName);
                }
                continue;
            }

            // property names
            String collectorValue = collector.getValue();
            String config = null;
            if (collectorValue != null) {
                if (!collectorValue.startsWith(DefaultPropertiesCollectorSPI.REGEX_PREFIX)) {
                    config = DefaultPropertiesCollectorSPI.REGEX_PREFIX + collector.getValue();
                } else {
                    config = collector.getValue();
                }
            }

            // create the PropertiesCollector
            final PropertiesCollector pc = selectedSPI.create(config,
                    Arrays.asList(collector.getMapped()));
            if (pc != null) {
                hasCRSCollector |= pc instanceof CRSExtractor;
                pcs.add(pc);
            } else {
                if (LOGGER.isLoggable(Level.INFO)) {
                    LOGGER.info("Unable to create PropertyCollector");
                }
            }
        }
        
        if(heterogeneousCRS && !hasCRSCollector) {
            pcs.add(new CRSExtractor());
        }

        this.propertiesCollectors = pcs;
    }

