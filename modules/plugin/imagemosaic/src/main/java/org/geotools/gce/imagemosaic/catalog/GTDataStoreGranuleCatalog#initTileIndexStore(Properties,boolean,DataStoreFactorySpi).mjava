    @Override
    protected void initTileIndexStore(
            final Properties params, final boolean create, final DataStoreFactorySpi spi)
            throws IOException, MalformedURLException {
        Utilities.ensureNonNull("spi", spi);

        // creating a store, this might imply creating it for an existing underlying store or
        // creating a brand new one
        Map<String, Serializable> dastastoreParams = Utils.filterDataStoreParams(params, spi);

        boolean isPostgis = Utils.isPostgisStore(spi);
        // H2 workadound
        if (Utils.isH2Store(spi)) {
            Utils.fixH2DatabaseLocation(dastastoreParams, parentLocation);
            Utils.fixH2MVCCParam(dastastoreParams);
        }
        if (isPostgis) {
            Utils.fixPostgisDBCreationParams(dastastoreParams);
        }

        if (!create) {
            this.tileIndexStore = spi.createDataStore(dastastoreParams);
        } else {
            // this works only with the shapefile datastore, not with the others
            // therefore I try to catch the error to try and use the method without *New*
            try {
                this.tileIndexStore = spi.createNewDataStore(dastastoreParams);
            } catch (UnsupportedOperationException e) {
                this.tileIndexStore = spi.createDataStore(dastastoreParams);
            }
        }

        if (isPostgis && wrapstore) {
            this.tileIndexStore =
                    new PostgisDatastoreWrapper(
                            getTileIndexStore(), FilenameUtils.getFullPath(parentLocation));
        } else if (Utils.isOracleStore(spi)) {
            this.tileIndexStore =
                    new OracleDatastoreWrapper(
                            getTileIndexStore(), FilenameUtils.getFullPath(parentLocation));
        } else if (Utils.isSQLServerStore(spi)) {
            // always wrap to ensure the geometry metadata table is there
            this.tileIndexStore =
                    new SQLServerDatastoreWrapper(
                            getTileIndexStore(), FilenameUtils.getFullPath(parentLocation));
        }

        // this init must be here as it's getting called by the parent class constructor
        this.validTypeNames = new HashSet<>();

        // is this a new store? If so we do not set any properties
        if (create) {
            return;
        }
        initializeTypeNames(params);
    }

