        /**
         * Add a domain to the manager
         * 
         * @param domain the name of the domain
         * @param propertyName
         */
        private void addDomain(String name, String propertyName, final DomainType domainType) {
            Utilities.ensureNonNull("name", name);
            Utilities.ensureNonNull("propertyName", propertyName);

            // === checks
            // existing!
            if (domainsMap.containsKey(name)) {
                throw new IllegalArgumentException("Trying to add a domain with an existing name"
                        + name);
            }

            // === checks
            // has Ranges
            String basePropertyName = propertyName;
            String additionalPropertyName = null;
            if (domainType != DomainType.SINGLE_VALUE) {

                // Deal with a case like this: time(begin,endtime)
                if (propertyName.contains("(") && propertyName.contains(")")) {
                    // extract the ranges attributes
                    propertyName = propertyName.substring(propertyName.indexOf("("))
                            .replace("(", "").replace(")", "");
                }

                // Getting 2 attributes for this domain
                String properties[] = propertyName.split(Utils.RANGE_SPLITTER_CHAR);
                if (properties == null || properties.length != 2) {
                    throw new IllegalArgumentException(
                            "Malformed domain with ranges: it should contain 2 attributes");
                }

                basePropertyName = properties[0];
                additionalPropertyName = properties[1];
            }

            // ad with uppercase and with suffix, the parameter that describes it will match this
            final String upperCase = name.toUpperCase();
            domainsMap.put(upperCase + DomainDescriptor.DOMAIN_SUFFIX, new DomainDescriptor(name,
                    domainType, basePropertyName, additionalPropertyName));
        }

