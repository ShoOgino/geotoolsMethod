        @Override
        public void run() {
            try {
                // Initialization steps
                configHandler.indexingPreamble();
                startTransaction();

                // Setting of the Collection size
                setNumElements(urls.size());

                // Creation of an Iterator on the input files
                Iterator<URL> it = urls.iterator();

                // Cycle on all the input files
                while (it.hasNext()) {
                    URL url = it.next();

                    // Stop the Harvesting if requested
                    if (getStop()) {
                        break;
                    }

                    // Check if the File has an absolute path
                    if (imageMosaicUrlConsumer.checkElement(url, this)) {
                        imageMosaicUrlConsumer.handleElement(url, this);
                    } else {
                        // SKIP and log
                        skip(url.toString());
                    }
                }

                // close transaction
                if (getStop()) {
                    rollbackTransaction();
                } else {
                    commitTransaction();
                }

            } catch (IOException e) {
                // Exception Logged
                LOGGER.log(Level.WARNING, e.getMessage(), e);
                try {
                    // Rollback of the Transaction
                    rollbackTransaction();
                } catch (IOException e1) {
                    throw new IllegalStateException(e);
                }
            } finally {
                // close transaction
                try {
                    closeTransaction();
                } catch (Exception e) {
                    final String message = "Unable to close transaction" + e.getLocalizedMessage();
                    if (LOGGER.isLoggable(Level.WARNING)) {
                        LOGGER.log(Level.WARNING, message, e);
                    }
                    // notify listeners
                    eventHandler.fireException(e);
                }

                // close indexing
                try {
                    configHandler.indexingPostamble(!getStop());
                } catch (Exception e) {
                    final String message = "Unable to close indexing" + e.getLocalizedMessage();
                    if (LOGGER.isLoggable(Level.WARNING)) {
                        LOGGER.log(Level.WARNING, message, e);
                    }
                    // notify listeners
                    eventHandler.fireException(e);
                }
            }
        }

