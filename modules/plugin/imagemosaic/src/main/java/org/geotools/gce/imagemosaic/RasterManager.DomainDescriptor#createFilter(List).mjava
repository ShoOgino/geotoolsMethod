        /**
         * This method is responsible for creating {@link Filter} that encompasses the
         * provided {@link List} of values for this {@link DomainManager}.
         * 
         * @param values the {@link List} of values to use for building the containment {@link Filter}.
         * @return a {@link Filter} that encompasses the
         * provided {@link List} of values for this {@link DomainManager}.
         */
        private Filter createFilter(List values) {
            
            // === create the filter
            // loop values and AND them
            final int size = values.size();
            final List<Filter> filters = new ArrayList<Filter>();
            for (int i = 0; i < size; i++) {
                // checks
                Object value = values.get(i);
                if (value == null) {
                    if (LOGGER.isLoggable(Level.INFO)) {
                        LOGGER.info("Ignoring null date for the filter:" + this.identifier);
                    }
                    continue;
                }
                if (domainType == DomainType.SINGLE_VALUE) {
                    // Domain made of single values
                    if(value instanceof Range){
                        // RANGE                        
                        final Range range= (Range)value;
                        filters.add( 
                                FeatureUtilities.DEFAULT_FILTER_FACTORY.and(
                                        FeatureUtilities.DEFAULT_FILTER_FACTORY.lessOrEqual(
                                                FeatureUtilities.DEFAULT_FILTER_FACTORY.property(propertyName), 
                                                FeatureUtilities.DEFAULT_FILTER_FACTORY.literal(range.getMaxValue())),
                                        FeatureUtilities.DEFAULT_FILTER_FACTORY.greaterOrEqual(
                                                FeatureUtilities.DEFAULT_FILTER_FACTORY.property(propertyName), 
                                                FeatureUtilities.DEFAULT_FILTER_FACTORY.literal(range.getMinValue()))
                                ));
                    }  else {
                        // SINGLE value
                        filters.add( 
                                FeatureUtilities.DEFAULT_FILTER_FACTORY.equal(
                                        FeatureUtilities.DEFAULT_FILTER_FACTORY.property(propertyName),
                                        FeatureUtilities.DEFAULT_FILTER_FACTORY.literal(value),true)
                                    );
                    }
                } else { //domainType == DomainType.RANGE
                    // Domain made of ranges such as (beginTime,endTime) , (beginElevation,endElevation) , ...
                    if(value instanceof Range){
                        // RANGE                        
                        final Range range= (Range)value;
                        final Comparable maxValue = range.getMaxValue();
                        final Comparable minValue = range.getMinValue();
                        if(maxValue.compareTo(minValue)!=0){
                            // real period more conditions
                            
                            // provided range max falls within range
                            Filter condition1=FeatureUtilities.DEFAULT_FILTER_FACTORY.and(
                                    FeatureUtilities.DEFAULT_FILTER_FACTORY.greaterOrEqual(
                                            FeatureUtilities.DEFAULT_FILTER_FACTORY.property(additionalPropertyName), 
                                            FeatureUtilities.DEFAULT_FILTER_FACTORY.literal(maxValue)),
                                    FeatureUtilities.DEFAULT_FILTER_FACTORY.lessOrEqual(
                                            FeatureUtilities.DEFAULT_FILTER_FACTORY.property(propertyName), 
                                            FeatureUtilities.DEFAULT_FILTER_FACTORY.literal(maxValue)));
                            
                            // provided range min falls within range
                            Filter condition2=FeatureUtilities.DEFAULT_FILTER_FACTORY.and(
                                    FeatureUtilities.DEFAULT_FILTER_FACTORY.lessOrEqual(
                                            FeatureUtilities.DEFAULT_FILTER_FACTORY.property(additionalPropertyName), 
                                            FeatureUtilities.DEFAULT_FILTER_FACTORY.literal(minValue)),
                                    FeatureUtilities.DEFAULT_FILTER_FACTORY.greaterOrEqual(
                                            FeatureUtilities.DEFAULT_FILTER_FACTORY.property(propertyName), 
                                            FeatureUtilities.DEFAULT_FILTER_FACTORY.literal(minValue)));  

                            // now wither provided range contains granule range or disjunct
                            Filter condition3=FeatureUtilities.DEFAULT_FILTER_FACTORY.and(
                                    FeatureUtilities.DEFAULT_FILTER_FACTORY.lessOrEqual(
                                            FeatureUtilities.DEFAULT_FILTER_FACTORY.property(additionalPropertyName), 
                                            FeatureUtilities.DEFAULT_FILTER_FACTORY.literal(maxValue)),
                                    FeatureUtilities.DEFAULT_FILTER_FACTORY.greaterOrEqual(
                                            FeatureUtilities.DEFAULT_FILTER_FACTORY.property(propertyName), 
                                            FeatureUtilities.DEFAULT_FILTER_FACTORY.literal(minValue)));                            
                            
                            filters.add(FeatureUtilities.DEFAULT_FILTER_FACTORY.or(Arrays.asList(condition1,condition2,condition3)));
                            continue;
                        } else {
                            value=maxValue;
                        }
                    }
                    filters.add( 
                            FeatureUtilities.DEFAULT_FILTER_FACTORY.and(
                                    FeatureUtilities.DEFAULT_FILTER_FACTORY.lessOrEqual(
                                            FeatureUtilities.DEFAULT_FILTER_FACTORY.property(propertyName), 
                                            FeatureUtilities.DEFAULT_FILTER_FACTORY.literal(value)),
                                    FeatureUtilities.DEFAULT_FILTER_FACTORY.greaterOrEqual(
                                            FeatureUtilities.DEFAULT_FILTER_FACTORY.property(additionalPropertyName), 
                                            FeatureUtilities.DEFAULT_FILTER_FACTORY.literal(value))));
                }
            }
            return FeatureUtilities.DEFAULT_FILTER_FACTORY.or(filters);
        }

