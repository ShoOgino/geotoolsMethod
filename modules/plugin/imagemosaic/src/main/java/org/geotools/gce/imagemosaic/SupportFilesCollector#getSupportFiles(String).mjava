    /** Return supportFiles (if found) for the specified file */
    public List<File> getSupportFiles(String filePath) {
        LinkedHashSet<File> supportFiles = null;
        String parent = FilenameUtils.getFullPath(filePath);
        String mainName = FilenameUtils.getName(filePath);
        String baseName = FilenameUtils.removeExtension(mainName);
        for (String extension : supportingExtensions) {
            String newFilePath = parent + baseName + extension;
            File file = new File(newFilePath);
            if (file.exists()) {
                if (supportFiles == null) {
                    supportFiles = new LinkedHashSet<>();
                }

                try {
                    supportFiles.add(file.getCanonicalFile());
                } catch (IOException e) {
                    LOGGER.log(Level.FINE, "Failed to canonicalize file, will add as is: " + file);
                    supportFiles.add(file);
                }
            }
        }
        return supportFiles == null ? null : new ArrayList<>(supportFiles);
    }

