    @Override
    public void getGranuleDescriptors(Query q, GranuleCatalogVisitor visitor) throws IOException {
        Utilities.ensureNonNull("q", q);
        final Lock lock = rwLock.readLock();
        try {
            lock.lock();
            checkStore();

            // get filter and check bbox
            final Filter filter = q.getFilter();
            ReferencedEnvelope requestedBBox = extractAndCombineBBox(filter);

            // get filter and check bbox
            checkIndex(lock);
            Comparator<SimpleFeature> comparator =
                    q.getSortBy() == null ? null : SortedFeatureReader.getComparator(q.getSortBy());
            if (comparator == null) {
                index.query(requestedBBox, new JTSIndexVisitorAdapter(visitor, q));
            } else {
                @SuppressWarnings("unchecked")
                final List<GranuleDescriptor> unfilteredGranules = index.query(requestedBBox);
                List<GranuleDescriptor> granules =
                        unfilteredGranules
                                .stream()
                                .filter(gd -> filter.evaluate(gd.getOriginator()))
                                .collect(Collectors.toList());

                Comparator<GranuleDescriptor> granuleComparator =
                        (gd1, gd2) -> {
                            SimpleFeature sf1 = gd1.getOriginator();
                            SimpleFeature sf2 = gd2.getOriginator();
                            return comparator.compare(sf1, sf2);
                        };
                Collections.sort(granules, granuleComparator);
                int maxGranules = q.getMaxFeatures();
                if (maxGranules > 0 && granules.size() > maxGranules) {
                    granules = granules.subList(0, maxGranules);
                }
                for (GranuleDescriptor gd : granules) {
                    if (visitor.isVisitComplete()) {
                        break;
                    }
                    visitor.visit(gd, gd.getOriginator());
                }
            }
        } finally {
            lock.unlock();
        }
    }

