    private static void setCogConfig(
            CatalogConfigurationBean catalogConfigurationBean,
            Properties properties,
            Set<String> ignorePropertiesSet) {
        final boolean ignoreSome = ignorePropertiesSet != null && !ignorePropertiesSet.isEmpty();
        final boolean cog = Boolean.valueOf(properties.getProperty(Prop.COG, "false").trim());
        if (cog) {
            CogConfiguration cogBean = new CogConfiguration();
            if (!ignoreSome || !ignorePropertiesSet.contains(Prop.COG_RANGE_READER)) {
                cogBean.setRangeReader(properties.getProperty(Prop.COG_RANGE_READER));
            } else {
                cogBean.setRangeReader(DEFAULT_RANGE_READER);
            }
            if (!ignoreSome || !ignorePropertiesSet.contains(Prop.COG_USE_CACHE)) {
                final boolean cogUseCaching =
                        Boolean.valueOf(properties.getProperty(Prop.COG_USE_CACHE, "false").trim());
                cogBean.setUseCache(cogUseCaching);
            }
            if (!ignoreSome || !ignorePropertiesSet.contains(Prop.COG_USER)) {
                cogBean.setUser(properties.getProperty(Prop.COG_USER));
            }
            if (!ignoreSome || !ignorePropertiesSet.contains(Prop.COG_PASSWORD)) {
                cogBean.setPassword(properties.getProperty(Prop.COG_PASSWORD));
            }
            catalogConfigurationBean.setUrlSourceSPIProvider(cogBean);
        }
    }

