	private void loadPropertyCollectors() {
		// load property collectors
		String pcConfig = runConfiguration.getPropertyCollectors();
		if (pcConfig != null && pcConfig.length()>0){
		    pcConfig=pcConfig.trim();
			// load the SPI set
			final Set<PropertiesCollectorSPI> pcSPIs = PropertiesCollectorFinder.getPropertiesCollectorSPI();
			
			// parse the string
			final List<PropertiesCollector> pcs= new ArrayList<PropertiesCollector>();
			final String[] pcsDefs=pcConfig.trim().split(",");
			for (String pcDef: pcsDefs) {
				// parse this def as NAME[CONFIG_FILE](PROPERTY;PROPERTY;....;PROPERTY)
				final int squareLPos = pcDef.indexOf("[");
				final int squareRPos = pcDef.indexOf("]");
				final int squareRPosLast = pcDef.lastIndexOf("]");
				final int roundLPos = pcDef.indexOf("(");
				final int roundRPos = pcDef.indexOf(")");
				final int roundRPosLast = pcDef.lastIndexOf(")");				
				if (squareRPos != squareRPosLast){
                                    if(LOGGER.isLoggable(Level.INFO)){
                                        LOGGER.info("Skipping unparseable PropertyCollector definition: "+pcDef);
                                    }				    
				    continue;
				}
				if (squareLPos == -1 || squareRPos == -1){
                                    if(LOGGER.isLoggable(Level.INFO)){
                                        LOGGER.info("Skipping unparseable PropertyCollector definition: "+pcDef);
                                    }   
                                    continue;
                                }
				if (squareLPos == 0){
                                    if(LOGGER.isLoggable(Level.INFO)){
                                        LOGGER.info("Skipping unparseable PropertyCollector definition: "+pcDef);
                                    }   
                                    continue;
                                }
				
				if (roundRPos != roundRPosLast){
                                    if(LOGGER.isLoggable(Level.INFO)){
                                        LOGGER.info("Skipping unparseable PropertyCollector definition: "+pcDef);
                                    }   
                                    continue;
                                }
				if (roundLPos == -1 || roundRPos == -1){
                                    if(LOGGER.isLoggable(Level.INFO)){
                                        LOGGER.info("Skipping unparseable PropertyCollector definition: "+pcDef);
                                    }   
                                    continue;
                                }
				if (roundLPos == 0){
                                    if(LOGGER.isLoggable(Level.INFO)){
                                        LOGGER.info("Skipping unparseable PropertyCollector definition: "+pcDef);
                                    }   
                                    continue;
                                }
				if (roundLPos != squareRPos + 1){//]( or exit
                                    if(LOGGER.isLoggable(Level.INFO)){
                                        LOGGER.info("Skipping unparseable PropertyCollector definition: "+pcDef);
                                    }   
                                    continue;
                                }
				if (roundRPos != (pcDef.length() - 1)){// end with )
                                    if(LOGGER.isLoggable(Level.INFO)){
                                        LOGGER.info("Skipping unparseable PropertyCollector definition: "+pcDef);
                                    }   
                                    continue;
                                }	
				
				// name
				final String name=pcDef.substring(0,squareLPos);
				PropertiesCollectorSPI selectedSPI = null;
				for (PropertiesCollectorSPI spi:pcSPIs) {
					if (spi.isAvailable() && spi.getName().equalsIgnoreCase(name)) {
						selectedSPI=spi;
						break;
					}
				}
				if (selectedSPI == null){
                                    if(LOGGER.isLoggable(Level.INFO)){
                                        LOGGER.info("Unable to find a PropertyCollector for this definition: "+pcDef);
                                    }   
					continue;
				}
				
				// config
				final String config=squareLPos<squareRPos?pcDef.substring(squareLPos+1,squareRPos):"";
				final File configFile= new File(runConfiguration.getRootMosaicDirectory(),config+".properties");
				if (!Utils.checkFileReadable(configFile)){
                                    if(LOGGER.isLoggable(Level.INFO)){
                                        LOGGER.info("Unable to access the file for this PropertyCollector: "+configFile.getAbsolutePath());
                                    }   				    
                                    continue;
                                }
				// it is readable
				
				// property names
				final String propertyNames[] = pcDef.substring(roundLPos+1, roundRPos).split(",");
				
				// create the PropertiesCollector
				final PropertiesCollector pc = selectedSPI.create(configFile, Arrays.asList(propertyNames));
				if (pc != null) {
				    pcs.add(pc);
				} else {
				    if(LOGGER.isLoggable(Level.INFO)){
				        LOGGER.info("Unable to create PropertyCollector "+ pcDef +" from config file:"+configFile);
				    }
				}
				
			}
			this.propertiesCollectors=pcs;
		}
	}

