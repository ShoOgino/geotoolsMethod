        /**
	 * Loads the properties file that contains useful information about this
	 * coverage.
	 * 
	 * @throws UnsupportedEncodingException
	 * @throws IOException
	 */
	private MosaicConfigurationBean loadMosaicProperties(){
		// discern if we have a shapefile based index or a datastore based index
		final File sourceFile=DataUtilities.urlToFile(sourceURL);
		final String extension= FilenameUtils.getExtension(sourceFile.getAbsolutePath());
		MosaicConfigurationBean configuration=null;
		if(extension.equalsIgnoreCase("shp"))
		{
			// shapefile
			configuration=Utils.loadMosaicProperties(DataUtilities.changeUrlExt(sourceURL, "properties"),this.locationAttributeName);
		}
		else
		{
			// we need to look for properties files that do NOT define a datastore
			final File[] properties = sourceFile.getParentFile().listFiles(
					(FilenameFilter)
					FileFilterUtils.andFileFilter(
							FileFilterUtils.notFileFilter(FileFilterUtils.nameFileFilter("indexer.properties")),
						FileFilterUtils.andFileFilter(
								FileFilterUtils.notFileFilter(FileFilterUtils.nameFileFilter("datastore.properties")),
								FileFilterUtils.makeFileOnly(FileFilterUtils.suffixFileFilter(".properties")
						)
					)
			));
			
			
			// check the valid mosaic properties files
			for(File propFile:properties)
				if(Utils.checkFileReadable(propFile))
				{
					// try to load the config
					configuration=Utils.loadMosaicProperties(DataUtilities.fileToURL(propFile), this.locationAttributeName);
					if(configuration!=null)
						break;
					
					// proceed with next prop file
				}		
							
		}
		// we did not find any good candidate for mosaic.properties file, this will signal it		
		if(configuration!=null)
			return extractProperties(configuration);
		return configuration;
	}

