	public GTDataStoreGranuleCatalog(
			final Map<String, Serializable> params, 
			final boolean create, 
			final DataStoreFactorySpi spi) {
		Utilities.ensureNonNull("params",params);
		Utilities.ensureNonNull("spi",spi);
		this.spi=spi;
		
		try{

			this.pathType=(PathType) params.get("PathType");
			this.locationAttribute=(String)params.get("LocationAttribute");
			final String temp=(String)params.get("SuggestedSPI");
			this.suggestedSPI=temp!=null?(ImageReaderSpi) Class.forName(temp).newInstance():null;
			this.parentLocation=(String)params.get("ParentLocation");
			Object heterogen = params.get("Heterogeneous");
			if (heterogen != null){
			    this.heterogeneous = ((Boolean) heterogen).booleanValue();
			}
			
			// creating a store, this might imply creating it for an existing underlying store or 
			// creating a brand new one
			if(!create)
				tileIndexStore =spi.createDataStore(params);
			else
			{
				// this works only with the shapefile datastore, not with the others
				// therefore I try to catch the error to try and use themethdo without *New*
				try{
					tileIndexStore =  spi.createNewDataStore(params);
				}catch (UnsupportedOperationException e) {
					tileIndexStore =  spi.createDataStore(params);
				}
			}

			
			// is this a new store? If so we do not set any properties
			if(create)
				return;
				
			// if this is not a new store let's extract basic properties from it
			if(spi instanceof PostgisNGJNDIDataStoreFactory||spi instanceof PostgisNGDataStoreFactory){
				String typeName = FilenameUtils.getBaseName(FilenameUtils.getPathNoEndSeparator(this.parentLocation));
				//if (typeName != null){
				//    typeName = typeName.toLowerCase();
				//}
               extractBasicProperties(typeName);
			} else {
				extractBasicProperties(null);
			}
		}
		catch (Throwable e) {
			try {
				if(tileIndexStore!=null)
					tileIndexStore.dispose();
			} catch (Throwable e1) {
				if (LOGGER.isLoggable(Level.FINE))
					LOGGER.log(Level.FINE, e1.getLocalizedMessage(), e1);
			}
			finally{
				tileIndexStore=null;
			}	

			throw new  IllegalArgumentException(e);
		}
		
	}

