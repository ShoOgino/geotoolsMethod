    /**
     * Builds a footprint provider from mosaic location
     *
     * @param mosaicFolder The folder that contains the mosaic config files
     * @return
     * @throws Exception
     */
    public static MultiLevelROIProvider createFootprintProvider(File mosaicFolder) {
        File configFile = new File(mosaicFolder, "footprints.properties");
        final Properties properties = initProperties(configFile);

        // load the type of config file
        String source = (String) properties.get(MultiLevelROIProviderFactory.SOURCE_PROPERTY);
        FootprintGeometryProvider provider = null;
        if (source == null) {
            // see if we have the default whole mosaic footprint
            File defaultShapefileFootprint = new File(mosaicFolder, "footprints.shp");
            if (defaultShapefileFootprint.exists()) {
                provider =
                        buildShapefileSource(
                                mosaicFolder, defaultShapefileFootprint.getName(), properties);
            } else {
                provider = new SidecarFootprintProvider(mosaicFolder);
            }
        } else if (MultiLevelROIProviderFactory.TYPE_SIDECAR.equals(source)) {
            provider = new SidecarFootprintProvider(mosaicFolder);
        } else if (source.toLowerCase().endsWith(".shp")) {
            provider = buildShapefileSource(mosaicFolder, source, properties);
        } else if (MultiLevelROIProviderFactory.TYPE_RASTER.equals(source)) {
            // Raster masking
            return new MultiLevelROIRasterProvider(mosaicFolder);
        } else {
            throw new IllegalArgumentException(
                    "Invalid source type, it should be a reference "
                            + "to a shapefile or 'sidecar', but was '"
                            + source
                            + "' instead");
        }

        // Create the provider
        return createProvider(provider, properties, null);
    }

