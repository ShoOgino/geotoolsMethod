	@Override
	public String getMetadataValue(final String name) {
		final boolean getTimeAttribute=(timeAttribute!=null&&name.equalsIgnoreCase("time_domain"));
		final QueryCapabilities queryCapabilities = rasterManager.granuleCatalog.getQueryCapabilities();
		boolean manualSort=false;
		if(getTimeAttribute){
			Query query;
			try {
				query = new Query(rasterManager.granuleCatalog.getType().getTypeName());
				query.setPropertyNames(Arrays.asList(timeAttribute));
				final SortBy[] sortBy=new SortBy[]{
						new SortByImpl(
								FeatureUtilities.DEFAULT_FILTER_FACTORY.property(rasterManager.timeAttribute),
								SortOrder.ASCENDING
						)};
				// if the store does not support sorting we have to do it by hand
				if (queryCapabilities.supportsSorting(sortBy)) {
					query.setSortBy(sortBy);
				} else {
					manualSort=true;
				}
				final UniqueVisitor visitor= new UniqueVisitor(timeAttribute);
				rasterManager.granuleCatalog.computeAggregateFunction(query, visitor);
				
				// check result
				final ArrayList<Date> result= new ArrayList<Date>();
				result.addAll(visitor.getUnique());
				Collections.sort(result);
//				final Set<Date> result = manualSort?new TreeSet<Date>(visitor.getUnique()):visitor.getUnique();
//				final Set<Date> result = new TreeSet<Date>(new Comparator<Date>() {
//				        private final Calendar c1 = Calendar.getInstance(TimeZone.getTimeZone("UTC")); 
//				        private final Calendar c2 = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
//					public int compare(Date o1, Date o2) {
//
//						c1.setTime(o1);
//						c2.setTime(o2);
//
//						// Revert behavior in order to have a dsc time list
//						if (c1.before(c2))
//							return -1;
//						else if (c1.after(c2))
//							return 1;
//						
//						return 0;
//					}
//				});
//				result.addAll(visitor.getUnique());

				if(result.size()<=0)
					return null;				
				final StringBuilder buff= new StringBuilder();
				final SimpleDateFormat df= new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
				df.setTimeZone(UTC_TZ);
				for(Date date:result){
					buff.append(df.format(date)).append("Z");//ZULU
					buff.append(",");
				}
				return buff.substring(0,buff.length()-1).toString();
			} catch (IOException e) {
				if(LOGGER.isLoggable(Level.WARNING))
					LOGGER.log(Level.WARNING,"Unable to parse attribute:"+name,e);
			}
			
		}

		final boolean getElevationAttribute=(elevationAttribute!=null&&name.equalsIgnoreCase("elevation_domain"));
		if(getElevationAttribute){
			Query query;
			try {
				query = new Query(rasterManager.granuleCatalog.getType().getTypeName());
				query.setPropertyNames(Arrays.asList(elevationAttribute));
				final SortBy[] sortBy=new SortBy[]{
						new SortByImpl(
								FeatureUtilities.DEFAULT_FILTER_FACTORY.property(rasterManager.elevationAttribute),
								SortOrder.ASCENDING
						)};
				if(queryCapabilities.supportsSorting(sortBy))
					query.setSortBy(sortBy);
				else
					manualSort=true;				
				final UniqueVisitor visitor= new UniqueVisitor(elevationAttribute);
				rasterManager.granuleCatalog.computeAggregateFunction(query, visitor);
				
				// check result
				final Set<Double> result = new TreeSet<Double>(visitor.getUnique());//manualSort?new TreeSet<Double>(visitor.getUnique()):visitor.getUnique();
				if(result.size()<=0)
					return null;
				final StringBuilder buff= new StringBuilder();
				for(Iterator<Double> it=result.iterator();it.hasNext();){
					final double value= (Double) it.next();
					buff.append(value);
					if(it.hasNext())
						buff.append(",");
				}
				return buff.toString();
			} catch (IOException e) {
				if(LOGGER.isLoggable(Level.WARNING))
					LOGGER.log(Level.WARNING,"Unable to parse attribute:"+name,e);
			}
			
		}
		
//		final boolean getRuntimeAttribute=name.equalsIgnoreCase("runtime_domain");
//		if(getRuntimeAttribute){
//			Query query;
//			try {
//				query = new DefaultQuery(rasterManager.granuleCatalog.getType().getTypeName());
//				query.setPropertyNames(Arrays.asList("runtime"));
//				final SortBy[] sortBy=new SortBy[]{
//						new SortByImpl(
//								FeatureUtilities.DEFAULT_FILTER_FACTORY.property("runtime"),
//								SortOrder.DESCENDING
//						)};
//				if(queryCapabilities.supportsSorting(sortBy))
//					query.setSortBy(sortBy);
////				else
////					manualSort=true;				
//				final UniqueVisitor visitor= new UniqueVisitor("runtime");
//				rasterManager.granuleCatalog.computeAggregateFunction(query, visitor);
//				
//				// check result
//				final Set<Integer> result = new TreeSet<Integer>(new Comparator<Integer>() {
//
//					public int compare(Integer o1, Integer o2) {
//						// Revert Order
//						if (o1 > 02)
//							return -1;
//						else if (o1 < o2)
//							return 1;
//						return 0;
//					}
//				});
//				result.addAll(visitor.getUnique());
//				if(result.size()<=0)
//					return null;
//				final StringBuilder buff= new StringBuilder();
//				for(Iterator<Integer> it=result.iterator();it.hasNext();){
//					final int value= it.next();
//					buff.append(value);
//					if(it.hasNext())
//						buff.append(",");
//				}
//				return buff.toString();
//			} catch (IOException e) {
//				if(LOGGER.isLoggable(Level.WARNING))
//					LOGGER.log(Level.WARNING,"Unable to parse attribute:"+name,e);
//			}
//			
//		}
//		
		return super.getMetadataValue(name);
	}

