        /**
         * This method is responsible for collecting all the granules accepting a certain {@link Filter}.
         * 
         * <p>
         * The method return <code>true</code> when a {@link GranuleDescriptor} for which the {@link GranuleDescriptor#originator} {@link SimpleFeature}
         * is evaluated positively by the internal filter and retain the granule, or <code>false</code> otherwise so that the caller can keep trying
         * with a different {@link GranuleCollector}
         * @param granuleDescriptor the {@link GranuleDescriptor} to test with the internal {@link Filter}
         * @return <code>true</code> in case the {@link GranuleDescriptor} is added, <code>false</code> otherwise.
         */
        private boolean accept(GranuleDescriptor granuleDescriptor){
            Utilities.ensureNonNull("granuleDescriptor", granuleDescriptor);
            
            if (granuleFilter.evaluate(granuleDescriptor.originator)) {

                Object imageIndex = granuleDescriptor.originator.getAttribute("imageindex");
                if(imageIndex != null && imageIndex instanceof Integer) {
                    imageChoice = ((Integer) imageIndex).intValue();
                }
                
                final GranuleLoader loader = new GranuleLoader(baseReadParameters, imageChoice, mosaicBBox, finalWorldToGridCorner, granuleDescriptor, request, hints);
                if (!dryRun) {
                    if (multithreadingAllowed && rasterManager.parentReader.multiThreadedLoader != null) {
                        // MULTITHREADED EXECUTION submitting the task
                        granulesFutures.add(rasterManager.parentReader.multiThreadedLoader.submit(loader));
                    } else {
                        // SINGLE THREADED Execution, we defer the execution to when we have done the loading
                        final FutureTask<GranuleLoadingResult> task = new FutureTask<GranuleLoadingResult>(loader);
                        granulesFutures.add(task);
                        task.run(); // run in current thread
                    }
                }
                if (LOGGER.isLoggable(Level.FINE)) {
                    LOGGER.fine("We added the granule " + granuleDescriptor.toString());
                }
                
                // we added it
                granulesNumber++;
                return true;
            } else {
                if (LOGGER.isLoggable(Level.FINE)) {
                    LOGGER.fine("We filtered out the granule " + granuleDescriptor.toString());
                }
        }
            return false;
        }

