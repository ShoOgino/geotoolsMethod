    @Override
    public Converter createConverter(Class source, Class target, Hints hints) {

        if (Date.class.isAssignableFrom(source)) {

            // target is string
            if (String.class.equals(target)) {
                final SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
                df.setTimeZone(TimeZone.getTimeZone("UTC")); // we DO work only with UTC times

                return new Converter() {
                    @Override
                    public <T> T convert(Object source, Class<T> target) throws Exception {
                        if (source instanceof Date) {
                            return target.cast(df.format((Date) source));
                        }
                        return null;
                    }
                };
            }
        }

        // this should handle java.util.Calendar to
        // String
        if (Calendar.class.isAssignableFrom(source)) {

            // target is string
            if (String.class.equals(target)) {
                final SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
                df.setTimeZone(TimeZone.getTimeZone("UTC")); // we DO work only with UTC times

                return new Converter() {
                    @Override
                    public <T> T convert(Object source, Class<T> target) throws Exception {
                        if (source instanceof Calendar) {
                            return target.cast(df.format(((Calendar) source).getTime()));
                        }
                        return null;
                    }
                };
            }
        }

        if (XMLGregorianCalendar.class.isAssignableFrom(source)) {
            // target is string
            if (String.class.equals(target)) {
                final SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
                df.setTimeZone(TimeZone.getTimeZone("UTC")); // we DO work only with UTC times

                return new Converter() {
                    @Override
                    public <T> T convert(Object source, Class<T> target) throws Exception {
                        if (source instanceof XMLGregorianCalendar) {
                            XMLGregorianCalendar xmlc = (XMLGregorianCalendar) source;
                            Date date =
                                    xmlc.toGregorianCalendar(GMT, Locale.getDefault(), null)
                                            .getTime();
                            return target.cast(df.format(date));
                        }
                        return null;
                    }
                };
            }
        }
        return null;
    }

