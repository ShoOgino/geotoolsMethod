    public RasterManager(final ImageMosaicReader parentReader,
            MosaicConfigurationBean configuration) throws IOException {

        Utilities.ensureNonNull("ImageMosaicReader", parentReader);
        //may as well check this too, since it's being used without a null check
        Utilities.ensureNonNull("MosaicConfigurationBean", configuration);

        this.parentReader = parentReader;
        this.expandMe = configuration.isExpandToRGB();
        boolean checkAuxiliaryMetadata = configuration.isCheckAuxiliaryMetadata();
        this.heterogeneousGranules = configuration.getCatalogConfigurationBean().isHeterogeneous();
        this.configuration = configuration;
        hints = parentReader.getHints();
        this.name = configuration.getName();
        updateHints(hints, configuration, parentReader);

        if (checkAuxiliaryMetadata) {
            hints.add(new RenderingHints(Utils.CHECK_AUXILIARY_METADATA, checkAuxiliaryMetadata));
        }

        // take ownership of the index : TODO: REMOVE THAT ONCE DEALING WITH MORE CATALOGS/RASTERMANAGERS
        // granuleCatalog = new HintedGranuleCatalog(parentReader.granuleCatalog, hints);
        granuleCatalog = parentReader.granuleCatalog;
        this.coverageFactory = parentReader.getGridCoverageFactory();
        this.coverageIdentifier = configuration != null ? configuration.getName()
                : ImageMosaicReader.UNSPECIFIED;
        this.pathType = configuration.getCatalogConfigurationBean().isAbsolutePath()
                ? PathType.ABSOLUTE : PathType.RELATIVE;

        extractOverviewPolicy();
        extractDecimationPolicy();

        // load defaultSM and defaultCM by using the sample_image if it was provided
        loadSampleImage(configuration);

        CatalogConfigurationBean catalogBean = configuration.getCatalogConfigurationBean();
        typeName = catalogBean != null ? catalogBean.getTypeName() : null;
        initDomains(configuration);
        if (defaultSM == null) {
            defaultSM = configuration.getSampleModel();
        }

        if (defaultCM == null) {
            defaultCM = configuration.getColorModel();
        }
        if (defaultPalette == null) {
            defaultPalette = configuration.getPalette();
        }

        if (defaultSM != null && defaultCM != null && defaultImageLayout == null) {
            defaultImageLayout = new ImageLayout().setColorModel(defaultCM)
                    .setSampleModel(defaultSM);
        }

        levels = configuration.getLevels();
        final double[] highRes = levels[0];
        final int numOverviews = configuration.getLevelsNum() - 1;
        double[][] overviews = null;
        if (numOverviews > 0) {
            overviews = new double[numOverviews][2];
            for (int i = 0; i < numOverviews; i++) {
                overviews[i][0] = levels[i + 1][0];
                overviews[i][1] = levels[i + 1][1];
            }
        }
        overviewsController = new OverviewsController(highRes, numOverviews, overviews);
        imposedEnvelope = configuration.getEnvelope();

        if (configuration.getIndexer() != null) {
            //we have indexer configuration, we can set the submosaic producer factory based off
            //that if it's available
            Indexer indexer = configuration.getIndexer();
            // handling multiple bands dimension if needed
            if (indexer.getMultipleBandsDimensions() != null
                    && indexer.getMultipleBandsDimensions().getMultipleBandsDimension() != null
                    && !indexer.getMultipleBandsDimensions().getMultipleBandsDimension().isEmpty()) {
                // we have at least one dimension with multiple bands
                List<MultipleBandsDimension> multipleBandsDimensions = indexer.getMultipleBandsDimensions().getMultipleBandsDimension();
                if (multipleBandsDimensions.size() != 1) {
                    // currently we only support a single dimension with multiple bands
                    throw new IllegalStateException("Only a single dimension with multiple bands is supported.");
                }
                // well we only need to fill the provided bands names
                providedBandsNames = multipleBandsDimensions.get(0).getBandsNames().split("\\s*,\\s*");
            }
            String submosaickerFactory = IndexerUtils
                .getParameter(Utils.Prop.GRANULE_COLLECTOR_FACTORY, indexer);
            if (submosaickerFactory != null) {
                SubmosaicProducerFactory submosaicProducerFactory = SubmosaicProducerFactoryFinder
                    .getGranuleHandlersSPI().get(submosaickerFactory);
                if (submosaicProducerFactory != null) {
                    this.submosaicProducerFactory = submosaicProducerFactory;
                }
                else {
                    LOGGER.warning("Found SubmosaicProducerFactory config in the Image Mosaic "
                        + "indexer, however the specified factory (" + submosaickerFactory
                        + ") could not be found. This may mean the indexer.properties or indexer.xml"
                        + "is misconfigured");
                }
            }
        }
    }

