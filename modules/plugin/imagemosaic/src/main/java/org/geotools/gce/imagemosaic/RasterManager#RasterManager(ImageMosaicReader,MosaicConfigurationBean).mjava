        public RasterManager(final ImageMosaicReader parentReader, MosaicConfigurationBean configuration)
                throws IOException {

            Utilities.ensureNonNull("ImageMosaicReader", parentReader);

//            this.parentManager = manager;
            this.parentReader = parentReader;
            this.expandMe = parentReader.expandMe;
            this.heterogeneousGranules = parentReader.heterogeneousGranules;
            this.configuration = configuration;
            hints = parentReader.getHints();
            if (configuration != null && configuration.getAuxiliaryFilePath() != null) {
                hints.add(new RenderingHints(Utils.AUXILIARY_FILES_PATH, configuration.getAuxiliaryFilePath()));
            }
            
            // take ownership of the index : TODO: REMOVE THAT ONCE DEALING WITH MORE CATALOGS/RASTERMANAGERS
            granuleCatalog = new HintedGranuleCatalog(parentReader.granuleCatalog, hints);
//            parentReader.granuleCatalog = null;

            
            this.coverageFactory = parentReader.getGridCoverageFactory();
            this.coverageIdentifier = configuration != null ? configuration.getName() : ImageMosaicReader.UNSPECIFIED;
            this.pathType = parentReader.pathType;

            // resolution values

            // instantiating controller for subsampling and overviews
            //TODO: DR rasterManager don't need to ask info from the reader. It should only deal with the config.
            // is the reader which ask info from the rasterManager
            
//            overviewsController = new OverviewsController(parentReader.getHighestRes(),
//                    parentReader.getNumberOfOvervies(), parentReader.getOverviewsResolution());
//        try {
//			spatialDomainManager= new SpatialDomainManager(
//			        parentReader.getOriginalEnvelope(),
//					(GridEnvelope2D)parentReader.getOriginalGridRange(),
//					parentReader.getCoordinateReferenceSystem(),
//					parentReader.getOriginalGridToWorld(PixelInCell.CELL_CENTER),
//					overviewsController);
//		} catch (TransformException e) {
//			throw new DataSourceException(e);
//		} catch (FactoryException e) {
//			throw new DataSourceException(e);
//		}
        extractOverviewPolicy();
        extractDecimationPolicy();
        
        // load defaultSM and defaultCM by using the sample_image if it was provided
        loadSampleImage(configuration);
        
        if (configuration != null) {
            CatalogConfigurationBean catalogBean = configuration.getCatalogConfigurationBean();
            typeName = catalogBean != null ? catalogBean.getTypeName() : null;
            if (typeName != null) {
                final SimpleFeatureType schema = granuleCatalog.getType(typeName);
                if (configuration.getAdditionalDomainAttributes() != null) {
                    domainsManager = new DomainManager(
                            configuration.getAdditionalDomainAttributes(), schema);
                    dimensionDescriptors.addAll(domainsManager.dimensions);
                }

                // time attribute
                if (configuration.getTimeAttribute() != null) {
                    final HashMap<String, String> init = new HashMap<String, String>();
                    init.put(Utils.TIME_DOMAIN, configuration.getTimeAttribute());
                    timeDomainManager = new DomainManager(init, schema);
                    dimensionDescriptors.addAll(timeDomainManager.dimensions);
                
                }
                // elevation attribute
                if (configuration.getElevationAttribute() != null) {
                    final HashMap<String, String> init = new HashMap<String, String>();
                    init.put(Utils.ELEVATION_DOMAIN, configuration.getElevationAttribute());
                    elevationDomainManager = new DomainManager(init, schema);
                    dimensionDescriptors.addAll(elevationDomainManager.dimensions);
                }
            }
            if (defaultSM == null) {
                defaultSM = configuration.getSampleModel();
            }

            if (defaultCM == null) {
                defaultCM = configuration.getColorModel();
            }
            
            if (defaultSM != null && defaultCM != null && defaultImageLayout == null) {
                defaultImageLayout= new ImageLayout().setColorModel(defaultCM).setSampleModel(defaultSM);
            }
            
            levels = configuration.getLevels();
            final double[] highRes = levels[0];
            final int numOverviews = configuration.getLevelsNum() - 1;
            double[][] overviews = null;
            if (numOverviews > 0) {
                overviews = new double[numOverviews][2];
                for (int i = 0; i < numOverviews; i++) {
                    overviews[i][0] = levels[i+1][0];
                    overviews[i][1] = levels[i+1][1];
                }
            }
            overviewsController = new OverviewsController(highRes,
                  numOverviews, overviews);
            imposedEnvelope = configuration.getEnvelope();
            
            //TODO: DR Parse more stuff from the configuration
        }
    }

