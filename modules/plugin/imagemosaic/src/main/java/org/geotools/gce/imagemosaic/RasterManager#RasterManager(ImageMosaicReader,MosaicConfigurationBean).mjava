	public RasterManager(final ImageMosaicReader reader, MosaicConfigurationBean configuration) throws IOException {
		
		Utilities.ensureNonNull("ImageMosaicReader", reader);
		
		this.parent=reader;
		this.expandMe=parent.expandMe;
		this.heterogeneousGranules = parent.heterogeneousGranules;
        
        //take ownership of the index
        granuleCatalog = parent.catalog;
        parent.catalog = null;
        
        coverageIdentifier=reader.getName();
        hints = reader.getHints();
        this.coverageIdentifier =reader.getName();
        this.coverageFactory = reader.getGridCoverageFactory();
        this.pathType=parent.pathType;
        
        //resolution values
        
        //instantiating controller for subsampling and overviews
        overviewsController=new OverviewsController(
        		reader.getHighestRes(),
        		reader.getNumberOfOvervies(),
        		reader.getOverviewsResolution());
        try {
			spatialDomainManager= new SpatialDomainManager(
					reader.getOriginalEnvelope(),
					(GridEnvelope2D)reader.getOriginalGridRange(),
					reader.getCrs(),
					reader.getOriginalGridToWorld(PixelInCell.CELL_CENTER),
					overviewsController);
		} catch (TransformException e) {
			throw new DataSourceException(e);
		} catch (FactoryException e) {
			throw new DataSourceException(e);
		}
        extractOverviewPolicy();
        extractDecimationPolicy();
        
        // load defaultSM and defaultCM by using the sample_image if it was provided
        loadSampleImage();   
        
        if(configuration!=null){
            final SimpleFeatureType schema = granuleCatalog.getType();
            if (configuration.getAdditionalDomainAttributes() != null) {
                domainsManager = new DomainManager(configuration.getAdditionalDomainAttributes(),schema);
            }
            
            // time attribute
            if(configuration.getTimeAttribute()!=null){
                final HashMap<String, String> init=new HashMap<String, String>();
                init.put("TIME", configuration.getTimeAttribute());
                timeDomainManager= new DomainManager(init,schema);
            }
            // elevation attribute
            if(configuration.getElevationAttribute()!=null){
                final HashMap<String, String> init=new HashMap<String, String>();
                init.put("ELEVATION", configuration.getElevationAttribute());
                elevationDomainManager= new DomainManager(init,schema);
            }        
        }
      }

