    /** run the directory walker */
    @Override
    public void run() {

        try {

            //
            // creating the file filters for scanning for files to check and index
            //
            final IOFileFilter finalFilter = createDefaultGranuleExclusionFilter();

            // TODO we might want to remove this in the future for performance
            int numFiles = 0;
            String harvestDirectory =
                    configHandler.getRunConfiguration().getParameter(Prop.HARVEST_DIRECTORY);
            String indexDirs =
                    configHandler.getRunConfiguration().getParameter(Prop.INDEXING_DIRECTORIES);
            if (harvestDirectory != null) {
                indexDirs = harvestDirectory;
            }
            String[] indexDirectories = indexDirs.split("\\s*,\\s*");
            for (String indexingDirectory : indexDirectories) {
                indexingDirectory = Utils.checkDirectory(indexingDirectory, false);
                final File directoryToScan = new File(indexingDirectory);
                final Collection files =
                        FileUtils.listFiles(
                                directoryToScan,
                                finalFilter,
                                Boolean.parseBoolean(
                                                configHandler
                                                        .getRunConfiguration()
                                                        .getParameter(Prop.RECURSIVE))
                                        ? TrueFileFilter.INSTANCE
                                        : FalseFileFilter.INSTANCE);
                numFiles += files.size();
            }
            //
            // walk over the files that have filtered out
            //
            if (numFiles > 0) {
                setNumElements(numFiles);
                final List<String> indexingDirectories =
                        new ArrayList<>(Arrays.asList(indexDirectories));
                new MosaicDirectoryWalker(
                        indexingDirectories,
                        finalFilter,
                        this,
                        new ImageMosaicFileFeatureConsumer.ImageMosaicFileConsumer());

            } else {
                LOGGER.log(Level.INFO, "No files to process!");
            }

        } catch (IOException e) {
            LOGGER.log(Level.SEVERE, e.getLocalizedMessage(), e);
        }
    }

