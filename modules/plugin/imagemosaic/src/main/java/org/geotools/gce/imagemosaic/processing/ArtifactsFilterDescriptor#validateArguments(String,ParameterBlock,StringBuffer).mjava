    /**
     * Checks parameters for the following:
     * <ul>
     * <li> Number of sources is 1
     * <li> Data image bands are valid
     * </ul>
     */
    @SuppressWarnings("unchecked")
    @Override
    public boolean validateArguments( String modeName, ParameterBlock pb, StringBuffer msg ) {
        if (pb.getNumSources() == 0 || pb.getNumSources() > 1) {
            msg.append("ArtifactsFilter operator takes 1 source image");
            return false;
        }

        // CHECKING Background values
        Object backgroundValues = pb.getObjectParameter(BACKGROUND_ARG);
        double[] bgValues = null;
        if (!(backgroundValues instanceof double[])) {
            msg.append(paramNames[BACKGROUND_ARG] + " arg has to be of type double[]");
            return false;
        } else {
            bgValues = (double[]) backgroundValues;
        }

        // CHECKING DATA IMAGE
        RenderedImage dataImg = pb.getRenderedSource(0);
        Rectangle dataBounds = new Rectangle( dataImg.getMinX(), dataImg.getMinY(),
                dataImg.getWidth(), dataImg.getHeight());

        // CHECKING ROI
        Object roiObject = pb.getObjectParameter(ROI_ARG);
        if (roiObject != null) {
            if (!(roiObject instanceof ROI)) {
                msg.append("The supplied ROI is not a supported class");
                return false;
            }
            final ROI roi = (ROI)roiObject;
            final Rectangle roiBounds = roi.getBounds(); 
            if (!roiBounds.intersects(dataBounds)) {
                msg.append("The supplied ROI does not intersect the source image");
                return false;
            }
        } else {
            msg.append("The ROI parameter is missing ");
        }

        return true;
    }

