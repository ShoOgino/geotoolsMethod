        /**
         * @return
         */
        private RenderingHints prepareHints() {
            // build final layout and use it for cropping purposes
            final ImageLayout layout = new ImageLayout(rasterBounds.x, rasterBounds.y,
                    rasterBounds.width, rasterBounds.height);
            Dimension tileDimensions = request.getTileDimensions();
            if (tileDimensions == null) {
                tileDimensions = (Dimension) JAI.getDefaultTileSize().clone();
            }
            layout.setTileGridXOffset(0).setTileGridYOffset(0);
            layout.setTileHeight(tileDimensions.width).setTileWidth(tileDimensions.height);
            final RenderingHints localHints = new RenderingHints(JAI.KEY_IMAGE_LAYOUT, layout);

            // look for additional hints for caching and tile scheduling
            if (hints != null && !hints.isEmpty()) {

                // TileCache
                TileCache tc = Utils.getTileCacheHint(hints);
                if (tc != null) {
                    localHints.add(new RenderingHints(JAI.KEY_TILE_CACHE, tc));
                }

                // BorderExtender
                localHints.add(ImageUtilities.BORDER_EXTENDER_HINTS);// default
                BorderExtender be = Utils.getBorderExtenderHint(hints);
                if (be != null) {
                    localHints.add(new RenderingHints(JAI.KEY_BORDER_EXTENDER, be));
                }

                // TileScheduler
                TileScheduler tileScheduler = Utils.getTileSchedulerHint(hints);
                if (tileScheduler != null) {
                    localHints.add(new RenderingHints(JAI.KEY_TILE_SCHEDULER, tileScheduler));
                }
            }
            return localHints;
        }

