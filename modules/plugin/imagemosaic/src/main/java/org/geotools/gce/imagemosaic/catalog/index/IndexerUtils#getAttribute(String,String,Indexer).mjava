    /**
     * Look for the specified coverageName inside the provided Indexer and return the attributes of
     * the specified domain.
     *
     * @param coverageName
     * @param domainName
     * @param indexer
     * @return TODO: Code is going complex. We should use a visitor
     */
    public static String getAttribute(
            final String coverageName, final String domainName, final Indexer indexer) {
        if (indexer != null) {
            final Coverages coverages = indexer.getCoverages();
            final DomainsType refDomains = indexer.getDomains();
            if (coverages != null) {
                final List<Coverage> coverageList = coverages.getCoverage();
                if (coverageList != null && !coverageList.isEmpty()) {
                    for (Coverage coverage : coverageList) {

                        // Look for the specified coverage name
                        final String currentCoverageName = coverage.getName();
                        if (currentCoverageName == null
                                || currentCoverageName.equalsIgnoreCase(coverageName)) {
                            final DomainsType domains = coverage.getDomains();
                            if (domains != null) {
                                final List<DomainType> domainList = domains.getDomain();
                                if (domainList != null) {

                                    // Look for the specified domain
                                    if (!domainName.equalsIgnoreCase(Utils.ADDITIONAL_DOMAIN)) {
                                        for (DomainType domain : domainList) {
                                            DomainType currentDomain =
                                                    getDomain(domain, refDomains);
                                            String currentDomainName = currentDomain.getName();
                                            if (currentDomainName != null
                                                    && currentDomainName.equalsIgnoreCase(
                                                            domainName)) {
                                                return getAttributesAsString(currentDomain, false);
                                            }
                                        }
                                    } else {
                                        StringBuilder additionalDomainAttributes =
                                                new StringBuilder();
                                        for (DomainType domain : domainList) {
                                            DomainType currentDomain =
                                                    getDomain(domain, refDomains);
                                            String domName = currentDomain.getName();
                                            if (!domName.equalsIgnoreCase(Utils.TIME_DOMAIN)
                                                    && !domName.equalsIgnoreCase(
                                                            Utils.ELEVATION_DOMAIN)) {
                                                additionalDomainAttributes.append(
                                                        getAttributesAsString(currentDomain, true));
                                                additionalDomainAttributes.append(",");
                                            }
                                        }
                                        String attribs = additionalDomainAttributes.toString();
                                        if (attribs != null && attribs.length() > 0) {
                                            // remove the last ","
                                            attribs = attribs.substring(0, attribs.length() - 1);
                                        }
                                        if (attribs.length() > 0) {
                                            return attribs;
                                        }
                                        return null;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return null;
    }

