        /**
         * {@link MosaicProducer} constructor.
         * It can be used to specify that we want to perform a dry run just to count the
         * granules we would load with the specified query.
         * 
         * <p>
         * A dry run means: no tasks are executed.
         * 
         * @param dryRun <code>true</code> for a dry run, <code>false</code> otherwise.
         */
        public MosaicProducer(final boolean dryRun) {

            // get merge behavior as per request
            mergeBehavior = request.getMergeBehavior();

            // prepare dimensions management if needed, that is in case we use stacking
            if (mergeBehavior.equals(MergeBehavior.STACK)) {

                // create filter to filter results
                // === Custom Domains Management
                final Map<String, List> requestedAdditionalDomains = request.getRequestedAdditionalDomains();
                if (!requestedAdditionalDomains.isEmpty()) {
                    Set<Entry<String, List>> entries = requestedAdditionalDomains.entrySet();
                    if (entries.size() > 1) {
                        throw new IllegalStateException("Unable to handle dimensions stacking for more than 1 dimension");
                    }
                    final Entry<String, List> element = entries.iterator().next();
                    // build a filter for each dimension
                    final String domainName = element.getKey() + DomainDescriptor.DOMAIN_SUFFIX;
                    final List values = (List) element.getValue();
                    for (Object o : values) {
                        // create a filter for this value
                        granuleCollectors.add(new GranuleCollector(rasterManager.domainsManager.createFilter(domainName, Arrays.asList(o)),dryRun));
                    }
                }
            }

            // we don't stack them
            // let's use a default marker
            if (granuleCollectors.isEmpty()) {
                granuleCollectors.add(new GranuleCollector(Filter.INCLUDE, dryRun));
            }
        }

