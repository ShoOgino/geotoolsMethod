        /**
         * {@link MosaicProducer} constructor.
         * It can be used to specify that we want to perform a dry run just to count the
         * granules we would load with the specified query.
         * 
         * <p>
         * A dry run means: no tasks are executed.
         * 
         * @param dryRun <code>true</code> for a dry run, <code>false</code> otherwise.
         */
        private MosaicProducer(final boolean dryRun) {

            // get merge behavior as per request
            mergeBehavior = request.getMergeBehavior();

            // prepare dimensions management if needed, that is in case we use stacking
            if (mergeBehavior.equals(MergeBehavior.STACK)) {

                // create filter to filter results
                // === Custom Domains Management
                final Map<String, List> requestedAdditionalDomains = request.getRequestedAdditionalDomains();
                if (!requestedAdditionalDomains.isEmpty()) {
                    Set<Entry<String, List>> entries = requestedAdditionalDomains.entrySet();

                    // Preliminary check on additional domains specification
                    // we can't do stack in case there are multiple values selections for more than one domain 
                    checkMultipleSelection(entries);

                    // Prepare filtering
                    Entry<String, List> multipleSelectionEntry = null;
                    final List<Filter> filters = new ArrayList<Filter>(entries.size());

                    // Loop over the additional domains
                    for (Entry<String, List> entry: entries) {
                        if (entry.getValue().size() > 1) {
                            // take note of the entry containing multiple values
                            multipleSelectionEntry = entry;
                        } else {
                            // create single value domain filter
                            String domainName = entry.getKey() + DomainDescriptor.DOMAIN_SUFFIX;
                            filters.add(rasterManager.domainsManager.createFilter(domainName, Arrays.asList(entry.getValue())));
                        }
                    }

                    // Anding all filters together
                    Filter andFilter = filters.size() > 0 ? FeatureUtilities.DEFAULT_FILTER_FACTORY.and(filters) : null;

                    if (multipleSelectionEntry == null) {
                        // Simpler case... no multiple selections. All filter have already been combined
                        granuleCollectors.add(new GranuleCollector(andFilter, dryRun));
                    } else {
                        final String domainName = multipleSelectionEntry.getKey() + DomainDescriptor.DOMAIN_SUFFIX;

                        // Need to loop over the multiple values of a custom domains
                        final List values = multipleSelectionEntry.getValue();
                        for (Object o : values) {

                            // create a filter for this value
                            Filter valueFilter = rasterManager.domainsManager.createFilter(domainName, Arrays.asList(o));

                            // combine that filter with the previously merged ones
                            Filter combinedFilter = andFilter == null ? valueFilter : FeatureUtilities.DEFAULT_FILTER_FACTORY.and(andFilter, valueFilter);
                            granuleCollectors.add(new GranuleCollector(combinedFilter, dryRun));
                        }
                    }
                }
            }

            // we don't stack them, either because we are not asked to or because we don't need to although
            // we were asked
            // let's use a default marker
            if (granuleCollectors.isEmpty()) {
                granuleCollectors.add(new GranuleCollector(Filter.INCLUDE, dryRun));
            }
        }

