    /**
     * This method encloses the standard behavior for the selection of the proper overview level.
     *
     * <p>See {@link ReadParamsController}
     */
    private void chooseOverview() throws IOException, TransformException {
        //
        // prepare the params for executing a mosaic operation.
        //
        // It might important to set the mosaic type to blend otherwise
        // sometimes strange results jump in.

        // select the relevant overview, notice that at this time we have
        // relaxed a bit the requirement to have the same exact resolution
        // for all the overviews, but still we do not allow for reading the
        // various grid to world transform directly from the input files,
        // therefore we are assuming that each granuleDescriptor has a scale and
        // translate only grid to world that can be deduced from its base
        // level dimension and envelope. The grid to world transforms for
        // the other levels can be computed accordingly knowing the scale
        // factors.
        if (request.spatialRequestHelper.getComputedBBox() != null
                && request.spatialRequestHelper.getComputedRasterArea() != null
                && !request.isHeterogeneousGranules()) {
            imageChoice =
                    ReadParamsController.setReadParams(
                            request.spatialRequestHelper.getComputedResolution(),
                            request.getOverviewPolicy(),
                            request.getDecimationPolicy(),
                            baseReadParameters,
                            request.rasterManager,
                            request.rasterManager.overviewsController,
                            virtualNativeResolution); // use general overviews controller
        } else {
            imageChoice = 0;
        }
        assert imageChoice >= 0;
        if (LOGGER.isLoggable(Level.FINE)) {
            LOGGER.fine(
                    "Loading level "
                            + imageChoice
                            + " with subsampling factors "
                            + baseReadParameters.getSourceXSubsampling()
                            + " "
                            + baseReadParameters.getSourceYSubsampling());
        }
    }

