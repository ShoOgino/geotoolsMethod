    /**
     * Parses date given in parameter according the ISO-8601 standard. This parameter
     * should follow a syntax defined in the {@link #PATTERNS} array to be validated.
     *
     * @param value The date to parse.
     * @return A date found in the request.
     * @throws ParseException if the string can not be parsed.
     */
    private static Date getDate(final String value) throws ParseException {
        List<String> suitablePattern = SPLITTED_PATTERNS.get(value.length());
        final int size=suitablePattern.size();
        for (int i=0; i<size; i++) {
            // rebuild formats at each parse, date formats are not thread safe
            final SimpleDateFormat format = new SimpleDateFormat(suitablePattern.get(i));
            format.setLenient(false);
            format.setTimeZone(TimeZone.getTimeZone("Zulu"));

            
            /* We do not use the standard method DateFormat.parse(String), because if the parsing
             * stops before the end of the string, the remaining characters are just ignored and
             * no exception is thrown. So we have to ensure that the whole string is correct for
             * the format.
             */
            final ParsePosition pos = new ParsePosition(0);
            Date time = format.parse(value, pos);
            if (pos.getIndex() == value.length()) {
                return time;
            }
        }
        throw new ParseException("Invalid date: " + value, 0);
    }

