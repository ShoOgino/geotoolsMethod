    @Override
    public void getGranuleDescriptors(final Query q, final GranuleCatalogVisitor visitor)
            throws IOException {

        final SimpleFeatureCollection features = adaptee.getGranules(q);
        if (features == null) {
            throw new NullPointerException(
                    "The provided SimpleFeatureCollection is null, it's impossible to create an index!");
        }
        if (LOGGER.isLoggable(Level.FINE)) {
            LOGGER.fine("Index Loaded");
        }

        // ROI
        final Utils.BBOXFilterExtractor bboxExtractor = new Utils.BBOXFilterExtractor();
        q.getFilter().accept(bboxExtractor, null);
        ReferencedEnvelope requestedBBox = bboxExtractor.getBBox();
        final Geometry intersectionGeometry =
                requestedBBox != null ? JTS.toGeometry(requestedBBox) : null;

        // visiting the features from the underlying store
        try (SimpleFeatureIterator fi = features.features()) {
            while (fi.hasNext() && !visitor.isVisitComplete()) {
                final SimpleFeature sf = fi.next();

                GranuleDescriptor granule = getGranuleDescriptor(sf);

                if (granule != null) {
                    // check ROI inclusion
                    final Geometry footprint = granule.getFootprint();
                    if (intersectionGeometry == null
                            || footprint == null
                            || polygonOverlap(footprint, intersectionGeometry)) {
                        visitor.visit(granule, sf);
                    } else {
                        if (LOGGER.isLoggable(Level.FINE)) {
                            LOGGER.fine(
                                    "Skipping granule "
                                            + granule
                                            + "\n since its ROI does not intersect the requested area");
                        }
                    }
                }
            }
        }
    }

