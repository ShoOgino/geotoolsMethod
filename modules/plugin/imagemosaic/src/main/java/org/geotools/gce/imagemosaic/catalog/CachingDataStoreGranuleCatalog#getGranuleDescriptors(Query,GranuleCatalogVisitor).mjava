    @Override
    public void getGranuleDescriptors(final Query q, final GranuleCatalogVisitor visitor) throws IOException {

        final SimpleFeatureCollection features = adaptee.getGranules(q);
        if (features == null)
            throw new NullPointerException(
                    "The provided SimpleFeatureCollection is null, it's impossible to create an index!");

        if (LOGGER.isLoggable(Level.FINE))
            LOGGER.fine("Index Loaded");

        // visiting the features from the underlying store
        final DefaultProgressListener listener = new DefaultProgressListener();
        features.accepts(new AbstractFeatureVisitor() {
            public void visit(Feature feature) {
                if (feature instanceof SimpleFeature) {
                    // get the feature
                    final SimpleFeature sf = (SimpleFeature) feature;
                    final GranuleDescriptor granule;

                    // caching by granule's location
//                    synchronized (descriptorsCache) {
                        String featureId = sf.getID();
                        if(descriptorsCache.containsKey(featureId)){
                            granule=descriptorsCache.get(featureId);
                        } else{
                            // create the granule descriptor
                            granule= new GranuleDescriptor(
                                            sf,
                                            adaptee.suggestedRasterSPI,
                                            adaptee.pathType,
                                            adaptee.locationAttribute,
                                            adaptee.parentLocation,
                                            adaptee.heterogeneous, 
                                            adaptee.hints);
                            descriptorsCache.put(featureId, granule);
                        }

                        visitor.visit(granule, null);
    
                        // check if something bad occurred
                        if (listener.isCanceled() || listener.hasExceptions()) {
                            if (listener.hasExceptions()) {
                                throw new RuntimeException(listener.getExceptions().peek());
                            } else {
                                throw new IllegalStateException("Feature visitor for query " + q
                                        + " has been canceled");
                            }
                        }
//                    }
                }
            }
        }, listener);
        
    }

