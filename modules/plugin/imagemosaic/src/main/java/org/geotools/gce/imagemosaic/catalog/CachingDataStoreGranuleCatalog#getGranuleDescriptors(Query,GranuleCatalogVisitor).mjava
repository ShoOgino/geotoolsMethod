    @Override
    public void getGranuleDescriptors(final Query q, final GranuleCatalogVisitor visitor)
            throws IOException {

        final SimpleFeatureCollection features = adaptee.getGranules(q);
        if (features == null) {
            throw new NullPointerException(
                    "The provided SimpleFeatureCollection is null, it's impossible to create an index!");
        }
        if (LOGGER.isLoggable(Level.FINE)) {
            LOGGER.fine("Index Loaded");
        }

        // ROI
        final Utils.BBOXFilterExtractor bboxExtractor = new Utils.BBOXFilterExtractor();
        q.getFilter().accept(bboxExtractor, null);
        ReferencedEnvelope requestedBBox = bboxExtractor.getBBox();
        final Geometry intersectionGeometry = requestedBBox != null ? JTS.toGeometry(requestedBBox)
                : null;

        // visiting the features from the underlying store
        try(SimpleFeatureIterator fi = features.features()) {
            while(fi.hasNext() && !visitor.isVisitComplete()) {
                final SimpleFeature sf = fi.next();
                
                GranuleDescriptor granule = null;

                // caching by granule's location
                // synchronized (descriptorsCache) {
                String featureId = sf.getID();
                if (descriptorsCache.containsKey(featureId)) {
                    granule = descriptorsCache.get(featureId);
                } else {
                    try {
                        // create the granule descriptor
                        MultiLevelROI footprint = getGranuleFootprint(sf);
                        if (footprint == null || !footprint.isEmpty()) {
                            // caching only if the footprint is either absent or present and NON-empty
                            granule = new GranuleDescriptor(sf, adaptee.suggestedRasterSPI,
                                    adaptee.pathType, adaptee.locationAttribute,
                                    adaptee.parentLocation, footprint, adaptee.heterogeneous,
                                    adaptee.hints); // retain hints since this may contain a reader or anything
                            descriptorsCache.put(featureId, granule);
                        }
                    } catch (Exception e) {
                        LOGGER.log(Level.FINE, "Skipping invalid granule", e);
                    }

                }

                if (granule != null) {
                    // check ROI inclusion
                    final Geometry footprint = granule.getFootprint();
                    if (intersectionGeometry == null || footprint == null
                            || polygonOverlap(footprint, intersectionGeometry)) {
                        visitor.visit(granule, sf);
                    } else {
                        if (LOGGER.isLoggable(Level.FINE)) {
                            LOGGER.fine("Skipping granule " + granule
                                    + "\n since its ROI does not intersect the requested area");
                        }
                    }
                }
            }
        }
    }

