    /**
     * Creates a mosaic for the provided input parameters.
     *
     * @param location path to the directory where to gather the elements for the mosaic.
     * @param indexName name to give to this mosaic
     * @param wildcard wildcard to use for walking through files. We are using commonsIO for this task
     * @param absolutePath tells the catalogue builder to use absolute paths.
     * @param hints hints to control reader instantiations
     * @return <code>true</code> if everything is right, <code>false</code>if something bad happens, in which case the reason should be logged to the
     *         logger.
     */
    static boolean createMosaic(final String location, final String indexName,
            final String wildcard, final boolean absolutePath, final Hints hints) {

        // create a mosaic index builder and set the relevant elements
        final CatalogBuilderConfiguration configuration = new CatalogBuilderConfiguration();
        configuration.setHints(hints);// retain hints as this may contain an instance of an ImageMosaicReader
        List<Parameter> parameterList = configuration.getIndexer().getParameters().getParameter();

        IndexerUtils.setParam(parameterList, Prop.ABSOLUTE_PATH, Boolean.toString(absolutePath));
        IndexerUtils.setParam(parameterList, Prop.ROOT_MOSAIC_DIR, location);
        IndexerUtils.setParam(parameterList, Prop.INDEX_NAME, indexName);
        IndexerUtils.setParam(parameterList, Prop.WILDCARD, wildcard);
        IndexerUtils.setParam(parameterList, Prop.INDEXING_DIRECTORIES, location);

        // create the builder
        // final ImageMosaicWalker catalogBuilder = new ImageMosaicWalker(configuration);
        final ImageMosaicEventHandlers eventHandler = new ImageMosaicEventHandlers();
        final ImageMosaicConfigHandler catalogHandler = new ImageMosaicConfigHandler(configuration,
                eventHandler);
        final ImageMosaicWalker walker;
        if (catalogHandler.isUseExistingSchema()) {
            // walks existing granules in the origin store
            walker = new ImageMosaicDatastoreWalker(catalogHandler, eventHandler);
        } else {
            // collects granules from the file system
            walker = new ImageMosaicDirectoryWalker(catalogHandler, eventHandler);
        }

        // this is going to help us with catching exceptions and logging them
        final Queue<Throwable> exceptions = new LinkedList<Throwable>();
        try {

            final ImageMosaicEventHandlers.ProcessingEventListener listener = new ImageMosaicEventHandlers.ProcessingEventListener() {

                @Override
                public void exceptionOccurred(ImageMosaicEventHandlers.ExceptionEvent event) {
                    final Throwable t = event.getException();
                    exceptions.add(t);
                    if (LOGGER.isLoggable(Level.SEVERE)) {
                        LOGGER.log(Level.SEVERE, t.getLocalizedMessage(), t);
                    }
                }

                @Override
                public void getNotification(ImageMosaicEventHandlers.ProcessingEvent event) {
                    if (LOGGER.isLoggable(Level.FINE)) {
                        LOGGER.fine(event.getMessage());
                    }

                }

            };
            eventHandler.addProcessingEventListener(listener);
            walker.run();
        } catch (Throwable e) {
            LOGGER.log(Level.SEVERE, "Unable to build mosaic", e);
            return false;
        } finally {
            catalogHandler.dispose();
        }

        // check that nothing bad happened
        if (exceptions.size() > 0) {
            return false;
        }
        return true;
    }

