    /**
     * Init this {@link ImageMosaicReader} using the provided object as a source referring to an
     * {@link URL}.
     */
    private void initReaderFromURL(final Object source, final Hints hints) throws Exception {
        this.sourceURL = Utils.checkSource(source, hints);

        // Preliminary check on source
        if (this.sourceURL == null) {
            throw new DataSourceException(
                    "This plugin accepts File, URL or String. The string may describe a File or an URL");
        }

        // Load properties file
        MosaicConfigurationBean configuration = null;
        try {
            if (sourceURL.getProtocol().equals("file")) {
                final File sourceFile = URLs.urlToFile(sourceURL);
                if (!sourceFile.exists()) {
                    throw new DataSourceException(
                            "The specified sourceURL doesn't refer to an existing file");
                }
            }
            File sourceParent = null;
            if (sourceURL != null) {
                parentDirectory = URLs.urlToFile(sourceURL);
                sourceParent = parentDirectory;
                if (!parentDirectory.isDirectory()) {
                    parentDirectory = parentDirectory.getParentFile();
                }
            }
            final File datastoreProperties = new File(parentDirectory, Utils.DATASTORE_PROPERTIES);
            // 1st attempt of mosaic configuration loading.
            // Old Style
            configuration = Utils.loadMosaicProperties(sourceURL);
            if (configuration != null) {
                // Old style code: we have a single MosaicConfigurationBean. Use that
                // to create the catalog
                granuleCatalog =
                        ImageMosaicConfigHandler.createCatalog(
                                sourceURL,
                                configuration,
                                getCatalogHints(configuration.getCatalogConfigurationBean()));
                File parent = URLs.urlToFile(sourceURL).getParentFile();
                MultiLevelROIProvider rois =
                        MultiLevelROIProviderMosaicFactory.createFootprintProvider(parent);
                granuleCatalog.setMultiScaleROIProvider(rois);
                addRasterManager(configuration, true);
            } else {
                // 2nd attempt: look for a property file with same name of the mosaic
                List<MosaicConfigurationBean> beans = new ArrayList<>();
                if (configuration == null
                        && sourceParent != null
                        && parentDirectory != sourceParent) {
                    File sourceFile = URLs.urlToFile(sourceURL);
                    String sourceFilePath = sourceFile.getAbsolutePath();
                    if (FilenameUtils.getName(sourceFilePath)
                            .equalsIgnoreCase(Utils.DATASTORE_PROPERTIES)) {
                        configuration = Utils.lookForMosaicConfig(sourceURL);
                    } else {
                        throw new DataSourceException(
                                "Files is neither a mosaic property nor a directory: " + sourceURL);
                    }

                    if (configuration != null) {
                        beans.add(configuration);
                    }
                }
                // last attempt, do a scan of property files, looking for the mosaic config.
                if (configuration == null) {
                    // this can be used to look for properties files that do NOT define a datastore
                    final File[] properties =
                            parentDirectory.listFiles(
                                    (FilenameFilter)
                                            FileFilterUtils.and(
                                                    FileFilterUtils.notFileFilter(
                                                            FileFilterUtils.nameFileFilter(
                                                                    "indexer.properties")),
                                                    FileFilterUtils.and(
                                                            FileFilterUtils.notFileFilter(
                                                                    FileFilterUtils.nameFileFilter(
                                                                            Utils
                                                                                    .DATASTORE_PROPERTIES)),
                                                            FileFilterUtils.makeFileOnly(
                                                                    FileFilterUtils
                                                                            .suffixFileFilter(
                                                                                    ".properties")))));

                    // Scan for MosaicConfigurationBeans from properties files
                    if (properties != null) {
                        for (File propFile : properties) {
                            if (Utils.checkFileReadable(propFile)
                                    && Utils.loadMosaicProperties(URLs.fileToUrl(propFile))
                                            != null) {
                                configuration =
                                        Utils.loadMosaicProperties(URLs.fileToUrl(propFile));
                                if (configuration != null) {
                                    beans.add(configuration);
                                }
                            }
                        }
                    }
                }

                // In case we didn't find any configuration bean and datastore properties, we can't
                // do anything
                if (beans.isEmpty() && !datastoreProperties.exists()) {
                    throw new DataSourceException(
                            "No mosaic properties file or datastore properties file have been found");
                }

                // Catalog initialization from datastore
                GranuleCatalog catalog = null;
                final Properties params =
                        ImageMosaicConfigHandler.createGranuleCatalogProperties(
                                datastoreProperties);

                // Since we are dealing with a catalog from an existing store, make sure to scan for
                // all the typeNames on initialization
                final Object typeNames = params.get(Utils.SCAN_FOR_TYPENAMES);
                if (typeNames != null) {
                    params.put(Utils.SCAN_FOR_TYPENAMES, Boolean.valueOf(typeNames.toString()));
                } else {
                    params.put(Utils.SCAN_FOR_TYPENAMES, Boolean.TRUE);
                }
                if (beans.isEmpty()) {
                    catalog =
                            ImageMosaicConfigHandler.createGranuleCatalogFromDatastore(
                                    parentDirectory, datastoreProperties, true, getHints());
                } else {
                    CatalogConfigurationBean bean = beans.get(0).getCatalogConfigurationBean();
                    catalog =
                            GranuleCatalogFactory.createGranuleCatalog(
                                    sourceURL, bean, params, getCatalogHints(bean));
                }
                MultiLevelROIProvider rois =
                        MultiLevelROIProviderMosaicFactory.createFootprintProvider(parentDirectory);
                catalog.setMultiScaleROIProvider(rois);
                if (granuleCatalog != null) {
                    granuleCatalog.dispose();
                }
                granuleCatalog = catalog;

                // Creating a RasterManager for each mosaic configuration found on disk
                // and initialize it
                for (MosaicConfigurationBean bean : beans) {
                    addRasterManager(bean, true);
                }
            }
        } catch (Throwable e) {

            // Dispose catalog
            try {
                if (granuleCatalog != null) {
                    granuleCatalog.dispose();
                }
            } catch (Throwable e1) {
                if (LOGGER.isLoggable(Level.FINEST)) {
                    LOGGER.log(Level.FINEST, e1.getLocalizedMessage(), e1);
                }
            } finally {
                granuleCatalog = null;
            }

            // dispose raster managers as well
            try {
                disposeManagers();
            } catch (Throwable e1) {
                if (LOGGER.isLoggable(Level.FINEST)) {
                    LOGGER.log(Level.FINEST, e1.getLocalizedMessage(), e1);
                }
            } finally {
                rasterManagers = null;
            }

            // rethrow
            throw new DataSourceException(e);
        }
    }

