    /**
     * This method is responsible for initializing the {@link Query} object with the BBOX filter as
     * per the incoming {@link RasterLayerRequest}.
     *
     * @return a {@link Query} object with the BBOX {@link Filter} in it.
     * @throws IOException in case something bad happens
     */
    private Query initQuery() throws TransformException, FactoryException, IOException {
        final String typeName = rasterManager.getTypeName();
        Filter bbox = null;
        if (typeName != null) {
            Query query = new Query(typeName);
            // max number of elements
            if (request.getMaximumNumberOfGranules() > 0) {
                query.setMaxFeatures(request.getMaximumNumberOfGranules());
            }
            final PropertyName geometryProperty =
                    FeatureUtilities.DEFAULT_FILTER_FACTORY.property(
                            rasterManager
                                    .getGranuleCatalog()
                                    .getType(typeName)
                                    .getGeometryDescriptor()
                                    .getName());
            if (request.isHeterogeneousGranules() && queryBBox != null) {
                ProjectionHandler handler =
                        ProjectionHandlerFinder.getHandler(
                                queryBBox, queryBBox.getCoordinateReferenceSystem(), true);
                if (handler != null) {
                    List<ReferencedEnvelope> envelopes = handler.getQueryEnvelopes();
                    if (envelopes != null && !envelopes.isEmpty()) {
                        List<Filter> filters = new ArrayList<>();
                        for (ReferencedEnvelope envelope : envelopes) {
                            Filter f =
                                    FeatureUtilities.DEFAULT_FILTER_FACTORY.bbox(
                                            geometryProperty, envelope);
                            filters.add(f);
                        }
                        if (envelopes.size() == 1) {
                            bbox = filters.get(0);
                        } else {
                            bbox = FeatureUtilities.DEFAULT_FILTER_FACTORY.or(filters);
                        }
                    }
                }
            }
            if (bbox == null && queryBBox != null) {
                bbox = FeatureUtilities.DEFAULT_FILTER_FACTORY.bbox(geometryProperty, queryBBox);
            }
            if (bbox != null) {
                query.setFilter(bbox);
            }
            return query;
        } else {
            throw new IllegalStateException("GranuleCatalog feature type was null!!!");
        }
    }

