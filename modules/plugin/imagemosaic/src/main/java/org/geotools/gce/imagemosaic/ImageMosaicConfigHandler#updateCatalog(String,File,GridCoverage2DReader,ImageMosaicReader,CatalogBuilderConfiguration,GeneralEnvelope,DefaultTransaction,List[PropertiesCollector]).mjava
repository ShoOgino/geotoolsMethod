    /**
     * Get a {@link GranuleSource} related to a specific coverageName from an inputReader and put
     * the related granules into a {@link GranuleStore} related to the same coverageName of the
     * mosaicReader.
     *
     * @param coverageName the name of the coverage to be managed
     * @param fileBeingProcessed the reference input file
     * @param inputReader the reader source of granules
     * @param mosaicReader the reader where to store source granules
     * @param configuration the configuration
     * @param envelope envelope of the granule being added
     * @param transaction transaction in progress
     * @param propertiesCollectors list of properties collectors to use
     */
    private void updateCatalog(
            final String coverageName,
            final File fileBeingProcessed,
            final GridCoverage2DReader inputReader,
            final ImageMosaicReader mosaicReader,
            final CatalogBuilderConfiguration configuration,
            final GeneralEnvelope envelope,
            final DefaultTransaction transaction,
            final List<PropertiesCollector> propertiesCollectors)
            throws IOException, GranuleHandlingException {

        // Retrieving the store and the destination schema
        final GranuleStore store = (GranuleStore) mosaicReader.getGranules(coverageName, false);
        if (store == null) {
            throw new IllegalArgumentException(
                    "No valid granule store has been found for: " + coverageName);
        }
        final SimpleFeatureType indexSchema = store.getSchema();
        final SimpleFeature feature =
                new ShapefileCompatibleFeature(DataUtilities.template(indexSchema));
        store.setTransaction(transaction);

        final ListFeatureCollection collection = new ListFeatureCollection(indexSchema);
        final String fileLocation = prepareLocation(configuration, fileBeingProcessed);
        final String locationAttribute = configuration.getParameter(Prop.LOCATION_ATTRIBUTE);
        MosaicConfigurationBean mosaicConfiguration = this.getConfigurations().get(coverageName);
        GranuleHandler geometryHandler = this.getGeometryHandler();

        // getting input granules
        if (inputReader instanceof StructuredGridCoverage2DReader) {
            //
            // Case A: input reader is a StructuredGridCoverage2DReader. We can get granules from a
            // source
            //
            handleStructuredGridCoverage(
                    ((StructuredGridCoverage2DReader) inputReader).getGranules(coverageName, true),
                    fileBeingProcessed,
                    inputReader,
                    propertiesCollectors,
                    indexSchema,
                    feature,
                    collection,
                    fileLocation,
                    locationAttribute,
                    mosaicConfiguration);

        } else {
            //
            // Case B: old style reader, proceed with classic way, using properties collectors
            //
            geometryHandler.handleGranule(
                    fileBeingProcessed,
                    inputReader,
                    feature,
                    indexSchema,
                    null,
                    null,
                    mosaicConfiguration);
            feature.setAttribute(locationAttribute, fileLocation);

            updateAttributesFromCollectors(
                    feature, fileBeingProcessed, inputReader, propertiesCollectors);
            collection.add(feature);
        }

        // drop all the granules associated to the same
        Filter filter =
                Utils.FF.equal(
                        Utils.FF.property(locationAttribute),
                        Utils.FF.literal(fileLocation),
                        !isCaseSensitiveFileSystem(fileBeingProcessed));
        store.removeGranules(filter);

        // Add the granules collection to the store
        store.addGranules(collection);
    }

