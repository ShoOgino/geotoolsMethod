    public Geometry getSimplifiedShape(Class type, double minX, double minY, double maxX, double maxY) {
        CoordinateSequenceFactory csf = factory.getCoordinateSequenceFactory();
        if(Point.class.equals(type)) {
            CoordinateSequence cs = JTS.createCS(csf, 1, 2);
            cs.setOrdinate(0, 0, (minX + maxX) / 2);
            cs.setOrdinate(0, 1, (minY + maxY) / 2);
            return factory.createPoint(cs);
        } else if(MultiPoint.class.equals(type)) {
            Point p = (Point) getSimplifiedShape(Point.class, minX, minY, maxX, maxY);
            return factory.createMultiPoint(new Point[] {p});
        } else if(LineString.class.equals(type) || LinearRing.class.equals(type)) {
            CoordinateSequence cs = JTS.createCS(csf, 2, 2);
            cs.setOrdinate(0, 0, minX);
            cs.setOrdinate(0, 1, minY);
            cs.setOrdinate(1, 0, maxX);
            cs.setOrdinate(1, 1, maxY);
            return factory.createLineString(cs);
        } else if(MultiLineString.class.equals(type)) {
            LineString ls = (LineString) getSimplifiedShape(LineString.class, minX, minY, maxX, maxY);
            return factory.createMultiLineString(new LineString[] {ls});
        } else if(Polygon.class.equals(type)) {
            CoordinateSequence cs = JTS.createCS(csf, 5, 2);
            cs.setOrdinate(0, 0, minX);
            cs.setOrdinate(0, 1, minY);
            cs.setOrdinate(1, 0, minX);
            cs.setOrdinate(1, 1, maxY);
            cs.setOrdinate(2, 0, maxX);
            cs.setOrdinate(2, 1, maxY);
            cs.setOrdinate(3, 0, maxX);
            cs.setOrdinate(3, 1, minY);
            cs.setOrdinate(4, 0, minX);
            cs.setOrdinate(4, 1, minY);
            LinearRing ring = factory.createLinearRing(cs);
            return factory.createPolygon(ring, null);
        } else if(MultiPolygon.class.equals(type) || GeometryCollection.class.equals(type)) {
            Polygon polygon = (Polygon) getSimplifiedShape(Polygon.class, minX, minY, maxX, maxY);
            return factory.createMultiPolygon(new Polygon[] {polygon});
        } else {
            // don't really know what to do with this case, guessing a type might break expectations
            return null;
        }
    }

