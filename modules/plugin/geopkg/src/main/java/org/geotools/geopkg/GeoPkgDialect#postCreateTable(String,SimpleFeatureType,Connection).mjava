    @Override
    public void postCreateTable(String schemaName, SimpleFeatureType featureType, Connection cx)
            throws SQLException, IOException {
        Object skipRegistration = featureType.getUserData().get(GeoPackage.SKIP_REGISTRATION);
        if (Boolean.TRUE.equals(skipRegistration)) return;

        FeatureEntry fe = (FeatureEntry) featureType.getUserData().get(FeatureEntry.class);
        if (fe == null) {
            fe = new FeatureEntry();
            fe.setIdentifier(featureType.getTypeName());
            fe.setDescription(featureType.getTypeName());
            fe.setTableName(featureType.getTypeName());
            fe.setLastChange(new java.util.Date());
        }

        GeometryDescriptor gd = featureType.getGeometryDescriptor();
        if (gd != null) {
            fe.setGeometryColumn(gd.getLocalName());
            fe.setGeometryType(Geometries.getForBinding((Class) gd.getType().getBinding()));
        }

        CoordinateReferenceSystem crs = featureType.getCoordinateReferenceSystem();
        if (crs != null) {
            if (DefaultEngineeringCRS.GENERIC_2D == crs) {
                fe.setSrid(GeoPackage.GENERIC_PROJECTED_SRID);
            } else {
                try {
                    Integer epsgCode = CRS.lookupEpsgCode(crs, true);
                    if (epsgCode != null) {
                        fe.setSrid(epsgCode);
                    }
                } catch (FactoryException e) {
                    LOGGER.log(Level.WARNING, "Error looking up epsg code for " + crs, e);
                }
            }
        }

        @SuppressWarnings("PMD.CloseResource") // using the pool of the store, no need to close
        GeoPackage geopkg = geopkg();
        try {
            geopkg.addGeoPackageContentsEntry(fe, cx);
            geopkg.addGeometryColumnsEntry(fe, cx);

            // other geometry columns are possible
            for (PropertyDescriptor descr : featureType.getDescriptors()) {
                if (descr instanceof GeometryDescriptor) {
                    GeometryDescriptor gd1 = (GeometryDescriptor) descr;
                    if (!(gd1.getLocalName()).equals(fe.getGeometryColumn())) {
                        FeatureEntry fe1 = new FeatureEntry();
                        fe1.init(fe);
                        fe1.setGeometryColumn(gd1.getLocalName());
                        fe1.setGeometryType(
                                Geometries.getForBinding((Class) gd1.getType().getBinding()));
                        geopkg.addGeometryColumnsEntry(fe1, cx);
                    }
                }
            }
        } catch (IOException e) {
            throw new SQLException(e);
        }

        // check if enum columns need to be declared, and do so
        for (AttributeDescriptor ad : featureType.getAttributeDescriptors()) {
            DataColumn dc = (DataColumn) ad.getUserData().get(GeoPackage.DATA_COLUMN);
            if (dc != null) {
                if (!ad.getLocalName().equals(dc.getColumnName())) {
                    throw new IllegalArgumentException(
                            "Expected column name "
                                    + ad.getLocalName()
                                    + " but got"
                                    + dc.getColumnName());
                }
                geopkg.getExtension(GeoPkgSchemaExtension.class)
                        .addDataColumn(featureType.getTypeName(), dc, cx);
            } else {
                List<?> options = FeatureTypes.getFieldOptions(ad);
                if (options != null && !options.isEmpty()) {
                    dc = new DataColumn();
                    dc.setColumnName(ad.getLocalName());
                    dc.setName(ad.getLocalName());
                    Map<String, String> optionsMap = new LinkedHashMap<>();
                    for (int i = 0; i < options.size(); i++) {
                        optionsMap.put(String.valueOf(i), String.valueOf(options.get(i)));
                    }
                    String constraintName =
                            featureType.getTypeName() + "_" + ad.getLocalName() + "_enum";
                    DataColumnConstraint.Enum dcc =
                            new DataColumnConstraint.Enum(constraintName, optionsMap);
                    dc.setConstraint(dcc);
                    geopkg.getExtension(GeoPkgSchemaExtension.class)
                            .addDataColumn(featureType.getTypeName(), dc, cx);
                }
            }
        }
    }

