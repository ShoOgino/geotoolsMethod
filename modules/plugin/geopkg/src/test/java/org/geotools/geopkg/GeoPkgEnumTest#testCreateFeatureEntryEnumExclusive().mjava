    @Test
    public void testCreateFeatureEntryEnumExclusive() throws Exception {
        // custom configuration optimizing write performance for a straigth GeoPackage creation,
        // e.g., the use case of the GeoPackage WPS process in GeoServer
        SQLiteConfig config = new SQLiteConfig();
        config.setSharedCache(true);
        config.setJournalMode(SQLiteConfig.JournalMode.MEMORY);
        config.setPragma(SQLiteConfig.Pragma.SYNCHRONOUS, "OFF");
        config.setTransactionMode(SQLiteConfig.TransactionMode.DEFERRED);
        config.setReadUncommited(true);
        config.setLockingMode(SQLiteConfig.LockingMode.EXCLUSIVE);

        // create a geopackage that will be accessed in creation mode at top write speed
        File tempFile = File.createTempFile("geopkg-exclusive", "db", new File("target"));
        Map<String, Object> params = new HashMap<>();
        params.put(JDBCDataStoreFactory.BATCH_INSERT_SIZE.key, 10000);
        try (GeoPackage geopkg = new GeoPackage(tempFile, config, params)) {
            geopkg.init();

            SimpleFeatureType schema = getEnumFeatureType("ft2");
            ListFeatureCollection features = getEnumeratedFeatureCollection(schema);

            FeatureEntry entry = new FeatureEntry();
            entry.setBounds(features.getBounds());
            geopkg.add(entry, features);
            geopkg.createSpatialIndex(entry);
        }

        // read, check everything is fine
        params = new HashMap<>();
        params.put("dbtype", "geopkg");
        params.put("database", tempFile.getAbsolutePath());
        JDBCDataStore dataStore = (JDBCDataStore) DataStoreFinder.getDataStore(params);
        try {
            FilterFactory ff = dataStore.getFilterFactory();
            SimpleFeatureSource source = dataStore.getFeatureSource(tname("ft2"));
            Query q = new Query();
            q.setSortBy(ff.sort(aname("enumProperty"), SortOrder.ASCENDING));
            List<SimpleFeature> features = DataUtilities.list(source.getFeatures(q));
            assertEquals(4, features.size());
            assertNull(features.get(0).getAttribute("enumProperty"));
            assertEquals("one", features.get(1).getAttribute("enumProperty"));
            assertEquals("two", features.get(2).getAttribute("enumProperty"));
            assertEquals("three", features.get(3).getAttribute("enumProperty"));
        } finally {
            dataStore.dispose();
        }
    }

