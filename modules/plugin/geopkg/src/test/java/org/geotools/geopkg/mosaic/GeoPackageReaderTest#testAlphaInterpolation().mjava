    @Test
    public void testAlphaInterpolation() throws Exception {
        // Read RGBA GeoPackage tiles with non-opaque values
        GeoPackageReader reader =
                new GeoPackageReader(GeoPackageTest.class.getResource("rivers.gpkg"), null);
        GeneralParameterValue[] parameters = new GeneralParameterValue[1];
        CoordinateReferenceSystem crs = CRS.decode("EPSG:3857", true);
        GridGeometry2D gg =
                new GridGeometry2D(
                        new GridEnvelope2D(new Rectangle(128, 128)),
                        new ReferencedEnvelope(-9000000, 2000000, -8000000, 3000000, crs));
        parameters[0] = new Parameter<>(AbstractGridFormat.READ_GRIDGEOMETRY2D, gg);
        GridCoverage2D gc = reader.read(parameters);
        RenderedImage rgbA = gc.getRenderedImage();

        // Get the distinct alpha values from the input image
        Set<Integer> alphas = new TreeSet<>();
        int[] samples = new int[rgbA.getWidth() * rgbA.getHeight()];
        rgbA.getData().getSamples(0, 0, rgbA.getWidth(), rgbA.getHeight(), 3, samples);
        IntStream.of(samples).forEach(alphas::add);

        // Scale the image with bilinear interpolation
        Interpolation bilinear = Interpolation.getInstance(Interpolation.INTERP_BILINEAR);
        ImageWorker scalingWorker = new ImageWorker(rgbA).scale(0.5, 0.5, 0, 0, bilinear);
        RenderedImage result = scalingWorker.getRenderedImage();
        reader.dispose();

        // Check that the result image still has an alpha band
        assertEquals(4, result.getSampleModel().getNumBands());
        assertTrue(result.getColorModel().hasAlpha());

        // Check that the alpha band has not been interpolated by looking
        // for alpha values that were not in the original input
        Raster alpha = result.getData();
        for (int i = 0; i < result.getWidth(); i++) {
            for (int j = 0; j < result.getHeight(); j++) {
                int sample = alpha.getSample(i, j, 3);
                assertTrue(alphas.contains(sample));
            }
        }
    }

