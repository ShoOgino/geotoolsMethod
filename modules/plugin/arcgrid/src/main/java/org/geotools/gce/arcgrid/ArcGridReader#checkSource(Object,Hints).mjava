    /**
     * Checks the input provided to this {@link ArcGridReader} and sets all the other objects and
     * flags accordingly.
     *
     * @param input provided to this {@link ArcGridReader}.
     * @param hints Hints to be used by this reader throughout his life.
     */
    private void checkSource(Object input, final Hints hints)
            throws UnsupportedEncodingException, DataSourceException, IOException,
                    FileNotFoundException {

        closeMe = true;
        // //
        //
        // URL to File
        //
        // //
        // if it is a URL pointing to a File I convert it to a file,
        // otherwise, later on, I will try to get an inputstream out of it.
        if (input instanceof URL) {
            // URL that point to a file
            final URL sourceURL = ((URL) input);
            if (sourceURL.getProtocol().compareToIgnoreCase("file") == 0) {
                this.source = input = URLs.urlToFile(sourceURL);
            }
        }

        // //
        //
        // File
        //
        // //
        if (input instanceof File) {
            final File sourceFile = (File) input;
            if (!sourceFile.exists() || sourceFile.isDirectory() || !sourceFile.canRead())
                throw new DataSourceException(
                        "Provided file does not exist or is a directory or is not readable!");
            this.coverageName = sourceFile.getName();
            final int dotIndex = coverageName.indexOf(".");
            gzipped = coverageName.toLowerCase().endsWith("gz");
            coverageName = (dotIndex == -1) ? coverageName : coverageName.substring(0, dotIndex);
            if (gzipped)
                inStream =
                        ImageIO.createImageInputStream(
                                new GZIPInputStream(new FileInputStream(sourceFile)));
            else {
                inStreamSPI = ImageIOExt.getImageInputStreamSPI(sourceFile);
                if (inStreamSPI == null)
                    throw new DataSourceException("No input stream for the provided source");
                inStream =
                        inStreamSPI.createInputStreamInstance(
                                sourceFile, ImageIO.getUseCache(), ImageIO.getCacheDirectory());
            }
        } else
        // //
        //
        // URL
        //
        // //
        if (input instanceof URL) {
            final URL tempURL = ((URL) input);
            try {
                input = tempURL.openConnection().getInputStream();
                inStream = ImageIO.createImageInputStream(new GZIPInputStream((InputStream) input));
                gzipped = true;
            } catch (Exception e) {
                // close the stream used to check if the input was zipped
                ((InputStream) input).close();
                // use as non gzipped
                gzipped = false;
                inStream =
                        ImageIO.createImageInputStream(tempURL.openConnection().getInputStream());
            }
        } else
        // //
        //
        // InputStream
        //
        // //
        if (input instanceof InputStream) {
            closeMe = false;
            if (ImageIO.getUseCache())
                inStream = new FileCacheImageInputStream((InputStream) input, null);
            else inStream = new MemoryCacheImageInputStream((InputStream) input);
            // let's mark it
            inStream.mark();
        } else
        // //
        //
        // ImageInputStream
        //
        // //
        if (input instanceof ImageInputStream) {
            closeMe = false;
            inStream = (ImageInputStream) input;
            inStream.mark();
        } else throw new IllegalArgumentException("Unsupported input type");

        if (inStream == null)
            throw new DataSourceException("No input stream for the provided source");
    }

