    /**
     * Gets the coordinate system that will be associated to the
     * {@link GridCoverage}. The WGS84 coordinate system is used by default. It
     * is worth to point out that when reading from a stream which is not
     * connected to a file, like from an http connection (e.g. from a WCS) we
     * cannot rely on receiving a prj file too. In this case the exchange of
     * information about referencing should proceed the exchange of data thus I
     * rely on this and I ask the user who's invoking the read operation to
     * provide me a valid crs and envelope through read parameters.
     * 
     * @throws FactoryException
     * @throws IOException
     * @throws FileNotFoundException
     */
    private void initCoordinateReferenceSystem() throws FileNotFoundException,
            IOException {

        // check to see if there is a projection file
        if (source instanceof File
                || (source instanceof URL && (((URL) source).getProtocol() == "file"))) {
            // getting name for the prj file
            final String sourceAsString;

            if (source instanceof File)
                sourceAsString = ((File) source).getAbsolutePath();
            else
                sourceAsString = ((URL) source).getFile();

            int index = sourceAsString.lastIndexOf(".");
            final StringBuffer prjFileName;
            if (index == -1)
                prjFileName = new StringBuffer(sourceAsString);
            else
                prjFileName = new StringBuffer(sourceAsString.substring(0,
                        index));
            prjFileName.append(".prj");

            // does it exist?
            final File prjFile = new File(prjFileName.toString());
            if (prjFile.exists()) {
                // it exists then we have top read it
                PrjFileReader projReader = null;
                try {
                    FileChannel channel = new FileInputStream(prjFile)
                            .getChannel();
                    projReader = new PrjFileReader(channel);
                    crs = projReader.getCoordinateReferenceSystem();
                } catch (FileNotFoundException e) {
                    // warn about the error but proceed, it is not fatal
                    // we have at least the default crs to use
                    LOGGER.log(Level.SEVERE, e.getLocalizedMessage(), e);
                } catch (IOException e) {
                    // warn about the error but proceed, it is not fatal
                    // we have at least the default crs to use
                    LOGGER.log(Level.SEVERE, e.getLocalizedMessage(), e);
                } catch (FactoryException e) {
                    // warn about the error but proceed, it is not fatal
                    // we have at least the default crs to use
                    LOGGER.log(Level.SEVERE, e.getLocalizedMessage(), e);
                } finally {
                    if (projReader != null)
                        try {
                            projReader.close();
                        } catch (IOException e) {
                            // warn about the error but proceed, it is not fatal
                            // we have at least the default crs to use
                            LOGGER
                                    .log(Level.SEVERE, e.getLocalizedMessage(),
                                            e);
                        }
                }
            }
        }
        if (crs == null) {
            crs = AbstractGridFormat.getDefaultCRS();
            LOGGER.fine( "Unable to find crs, continuing with default CRS" );
        }
    }

