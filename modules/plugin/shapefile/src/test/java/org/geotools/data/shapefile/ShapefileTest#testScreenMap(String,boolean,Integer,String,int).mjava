    private void testScreenMap(
            String shpName,
            boolean isFilterBeforeScreenMap,
            Integer filterFid,
            String expectedName,
            int expectedFid)
            throws Exception {
        URL shpUrl = TestData.url(this, shpName + "/" + shpName + ".shp");

        Map<String, Serializable> params = new HashMap<>();
        params.put(ShapefileDataStoreFactory.URLP.key, shpUrl);

        ShapefileDataStore ds =
                (ShapefileDataStore) new ShapefileDataStoreFactory().createDataStore(params);

        Query query = new Query(ds.getTypeNames()[0]);
        if (isFilterBeforeScreenMap && filterFid != null) {
            FilterFactory2 factory = CommonFactoryFinder.getFilterFactory2(null);
            Id id =
                    factory.id(
                            Collections.singleton(
                                    ff.featureId(shpName + "." + filterFid.toString())));
            query.setFilter(id);
        }
        try (FeatureReader<SimpleFeatureType, SimpleFeature> reader =
                ds.getFeatureReader(query, Transaction.AUTO_COMMIT)) {
            ScreenMap screenMap = new ScreenMap(-180, -90, 360, 180);
            screenMap.setSpans(1.0, 1.0);
            screenMap.setTransform(IdentityTransform.create(2));

            ((ShapefileFeatureReader) reader).setScreenMap(screenMap);
            ((ShapefileFeatureReader) reader).setSimplificationDistance(1.0);

            assertTrue(reader.hasNext());
            SimpleFeature feature = reader.next();
            assertFalse(reader.hasNext());

            assertNotNull(feature);
            assertNotEquals(ShapefileFeatureReader.SKIP, feature.getDefaultGeometry());
            assertEquals(expectedName, feature.getAttribute("NAME"));
            assertEquals(expectedFid, feature.getAttribute("feature_id"));
        }
    }

