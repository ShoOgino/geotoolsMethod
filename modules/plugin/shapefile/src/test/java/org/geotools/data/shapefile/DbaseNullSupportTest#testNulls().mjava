    @Test
    public void testNulls() throws IOException {
        File tmp = File.createTempFile("test", ".dbf");
        if (!tmp.delete()) {
            throw new IllegalStateException("Unable to clear temp file");
        }
        DbaseFileHeader header = new DbaseFileHeader();
        for (int i = 0; i < types.length; i++) {
            header.addColumn("" + types[i], types[i], sizes[i], decimals[i]);
        }
        header.setNumRecords(values.length);
        try (FileOutputStream fos = new FileOutputStream(tmp);
                WritableByteChannel channel = fos.getChannel();
                DbaseFileWriter writer = new DbaseFileWriter(header, channel, cs, tz)) {

            tmp.deleteOnExit();

            // write records such that the i-th row has nulls in every column except the i-th column
            for (int row = 0; row < values.length; row++) {
                Object[] current = new Object[values.length];
                Arrays.fill(current, null);
                current[row] = values[row];
                writer.write(current);
            }
            fos.flush();
        }
        try (FileInputStream in = new FileInputStream(tmp);
                DbaseFileReader reader = new DbaseFileReader(in.getChannel(), false, cs, tz)) {
            assertEquals(
                    "Number of records does not match",
                    values.length,
                    reader.getHeader().getNumRecords());
            for (int row = 0; row < values.length; row++) {
                Object[] current = reader.readEntry();
                assertTrue(
                        "Number of columns incorrect",
                        current != null && current.length == values.length);
                for (int column = 0; column < values.length; column++) {
                    if (column == row) {
                        assertNotNull("Column was null and should not have been", current[column]);
                        assertEquals(
                                "Non-null column value "
                                        + current[column]
                                        + " did not match original value "
                                        + values[column],
                                current[column],
                                values[column]);
                    } else {
                        assertNull("Column that should have been null was not", current[column]);
                    }
                }
            }
        }
    }

