    /**
     * Create a set of features, then remove every other one, updating the remaining. Test for
     * removal and proper update after reloading...
     */
    /* Note that, when reading the DBF part of shape file set, the type of an N,0 feature will be inferred to be
     * Long; this may cause data loss when reading a file created with a BigInteger feature.
     */
    @Test
    public void testUpdating() throws Throwable {
        ShapefileDataStore sds = createDataStore();
        loadFeatures(sds);

        FeatureWriter<SimpleFeatureType, SimpleFeature> writer = null;
        try {
            writer =
                    sds.getFeatureWriter(
                            sds.getTypeNames()[0], Filter.INCLUDE, Transaction.AUTO_COMMIT);
            while (writer.hasNext()) {
                SimpleFeature feat = writer.next();
                Integer b = (Integer) feat.getAttribute(1);
                if (b.byteValue() % 2 == 0) {
                    writer.remove();
                } else {
                    feat.setAttribute(1, Byte.valueOf((byte) -1));
                }
            }
        } finally {
            if (writer != null) writer.close();
        }
        SimpleFeatureCollection fc = loadFeatures(sds);

        assertEquals(10, fc.size());
        SimpleFeatureIterator features = null;
        try {
            features = fc.features();
            for (SimpleFeatureIterator i = features; i.hasNext(); ) {
                assertEquals(-1, ((Integer) i.next().getAttribute(1)).byteValue());
            }
        } finally {
            if (features != null) {
                features.close();
            }
        }
        sds.dispose();
    }

