    @Test
    public void testFidFilter() throws Exception {
        File shpFile = copyShapefiles(STATE_POP);
        URL url = shpFile.toURI().toURL();
        ShapefileDataStore ds = new ShapefileDataStore(url);
        SimpleFeatureSource featureSource = ds.getFeatureSource();
        SimpleFeatureCollection features = featureSource.getFeatures();

        Set<String> expectedFids = new LinkedHashSet<>();
        final Filter fidFilter;
        try (SimpleFeatureIterator indexIter = features.features()) {
            FilterFactory2 ff = CommonFactoryFinder.getFilterFactory2(null);
            Set<FeatureId> fids = new HashSet<>();
            while (indexIter.hasNext()) {
                SimpleFeature newFeature = indexIter.next();
                String id = newFeature.getID();
                expectedFids.add(id);
                fids.add(ff.featureId(id));
            }
            fidFilter = ff.id(fids);
        }

        Set<String> actualFids = new HashSet<>();
        {
            features = featureSource.getFeatures(fidFilter);
            try (SimpleFeatureIterator indexIter = features.features()) {
                while (indexIter.hasNext()) {
                    SimpleFeature next = indexIter.next();
                    String id = next.getID();
                    actualFids.add(id);
                }
            }
        }

        TreeSet<String> lackingFids = new TreeSet<>(expectedFids);
        lackingFids.removeAll(actualFids);

        TreeSet<String> unexpectedFids = new TreeSet<>(actualFids);
        unexpectedFids.removeAll(expectedFids);

        String lacking = String.valueOf(lackingFids);
        String unexpected = String.valueOf(unexpectedFids);
        String failureMsg = "lacking fids: " + lacking + ". Unexpected ones: " + unexpected;
        assertEquals(failureMsg, expectedFids.size(), actualFids.size());
        assertEquals(failureMsg, expectedFids, actualFids);
        ds.dispose();
    }

