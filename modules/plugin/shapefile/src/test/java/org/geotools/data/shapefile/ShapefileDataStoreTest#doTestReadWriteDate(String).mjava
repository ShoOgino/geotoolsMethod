    private void doTestReadWriteDate(String str_date) throws Exception {
        
        final boolean datetime_enabled = Boolean.getBoolean("org.geotools.shapefile.datetime");
        
        File file = org.geotools.test.TestData.temp(this, "timestamp.shp");
                
        URL toURL = file.toURI().toURL();
        
        ShapefileDataStore ds = new ShapefileDataStore(toURL);
        ds.setTimeZone(TimeZone.getTimeZone("UTC"));
        ds.createSchema(DataUtilities.createType("test",
                        "geom:Point,timestamp:java.util.Date,date:java.util.Date,timestamp2:java.util.Date,timestamp3:java.util.Date"));

        final FeatureWriter<SimpleFeatureType, SimpleFeature> fw;
        fw = ds.getFeatureWriterAppend(ds.getSchema().getTypeName(), Transaction.AUTO_COMMIT);
        final SimpleFeature sf;
        
        DateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd Z");
        
        Date date = dateFormatter.parse(str_date + " GMT");

        Calendar timestampCal = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
       
        timestampCal.setTime(date);
        
        timestampCal.add(Calendar.MILLISECOND, 1);
        // Set timestamp 00:00:00.001 at the same day
        Date timestamp = timestampCal.getTime();
        
        timestampCal.add(Calendar.MILLISECOND,  12*60*60*1000);
        // Set timestamp2 12:00:00.001 at the same day
        Date timestamp2 = timestampCal.getTime();

        timestampCal.add(Calendar.MILLISECOND,  11*60*60*1000+ 59*60*1000 + 59*1000 + 998);
        // Set timestamp3 to  23:59:59.999 at the same day
        Date timestamp3 = timestampCal.getTime(); 
        
        // Write the values to the shapefile and close the datastore.
        sf = fw.next();
        sf.setAttribute(0, new GeometryFactory().createPoint(new Coordinate(1, -1)));
        sf.setAttribute(1, timestamp);
        sf.setAttribute(2, date);
        sf.setAttribute(3, timestamp2);
        sf.setAttribute(4, timestamp3);
        // Cleanup
        fw.close();
        
        // Open the shapefile for reading to verify it's contents.
        final FeatureReader<SimpleFeatureType, SimpleFeature> fr;
        fr =  ds.getFeatureReader();
        
        assertTrue(fr.hasNext());
        final SimpleFeature sf1 = fr.next();  

        // Check the read values match with the written ones.
        Date timestamp_ = (Date) sf1.getAttribute(1);
        Date timestamp2_ = (Date) sf1.getAttribute(3);
        Date timestamp3_ = (Date) sf1.getAttribute(4);         
        
        if (datetime_enabled){
            // if datetime support is enabled, check it matches the real timestamp
            assertEquals(timestamp, timestamp_);
            assertEquals(timestamp2, timestamp2_);
            assertEquals(timestamp3, timestamp3_);
        }else{
            // if datetime support is not enabled, test it matches the plain date
            assertEquals(date , timestamp_);
            assertEquals(date , timestamp2_);
            assertEquals(date , timestamp3_);
        }
        
        Date date_ = (Date) sf1.getAttribute(2);
        assertEquals(date , date_);
        
        // Cleanup
        fr.close();
        ds.dispose();
      }

