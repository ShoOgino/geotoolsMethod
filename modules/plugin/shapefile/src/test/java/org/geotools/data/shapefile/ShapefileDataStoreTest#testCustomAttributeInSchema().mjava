    @Test
    public void testCustomAttributeInSchema() throws Exception {
        File shp = org.geotools.test.TestData.file(this, "dumper");
        shp = new File(shp, "custom.shp");
        SimpleFeatureTypeBuilder ftBuilder = new SimpleFeatureTypeBuilder();
        ftBuilder.setName("custom");
        ftBuilder.setCRS(DefaultGeographicCRS.WGS84);
        ftBuilder.add("defaultGeom", Point.class, DefaultGeographicCRS.WGS84);
        ftBuilder.setDefaultGeometry("defaultGeom");
        ftBuilder.add("custom", CustomTypeClass.class);

        SimpleFeatureType type = ftBuilder.buildFeatureType();
        URL shapeUrl = URLs.fileToUrl(shp);
        ShapefileDataStore shapeDataStore = new ShapefileDataStore(shapeUrl);

        // Before the update, this call would have thrown an IOException
        // due to no mapping found for custom class, failing the test
        shapeDataStore.createSchema(type);

        ListFeatureCollection collection = new ListFeatureCollection(type);
        SimpleFeatureBuilder builder = new SimpleFeatureBuilder(type);
        Object[] values =
                new Object[] {
                    new GeometryFactory().createPoint(new Coordinate(10, 10)),
                    new CustomTypeClass(20)
                };
        builder.addAll(values);

        SimpleFeature feature = builder.buildFeature(type.getTypeName() + '.' + 0);
        collection.add(feature);

        SimpleFeatureStore store =
                (SimpleFeatureStore) shapeDataStore.getFeatureSource(type.getName().getLocalPart());
        DefaultTransaction transaction = new DefaultTransaction("create");
        store.setTransaction(transaction);
        store.addFeatures(collection);
        transaction.commit();
        shapeDataStore.dispose();

        // Now read it back
        shapeDataStore = new ShapefileDataStore(shapeUrl);
        SimpleFeatureCollection featureCollection = loadFeatures(shapeDataStore);
        assertTrue(
                String.class.equals(
                        featureCollection.features().next().getAttribute("custom").getClass()));
        shapeDataStore.dispose();
    }

