    @Test
    public void testScreenMapIndexedReader() throws Exception {
        URL shpUrl =
                TestData.url(
                        this,
                        SHP_FILTER_BEFORE_SCREENMAP + "/" + SHP_FILTER_BEFORE_SCREENMAP + ".shp");

        Map<String, Serializable> params = new HashMap<>();
        params.put(ShapefileDataStoreFactory.URLP.key, shpUrl);
        params.put(ShapefileDataStoreFactory.CREATE_SPATIAL_INDEX.key, Boolean.TRUE);

        ShapefileDataStore ds =
                (ShapefileDataStore) new ShapefileDataStoreFactory().createDataStore(params);

        // make a fid query to get a indexed reader

        String fidPrefix = ds.getTypeName().getLocalPart();
        Filter filter =
                ff.id(
                        ff.featureId(fidPrefix + ".0"),
                        ff.featureId(fidPrefix + ".1"),
                        ff.featureId(fidPrefix + ".2"));
        // force creation of a fid index
        ds.indexManager.hasFidIndex(true);
        try (FeatureReader<SimpleFeatureType, SimpleFeature> reader =
                ds.getFeatureReader(
                        new Query(ds.getTypeNames()[0], filter), Transaction.AUTO_COMMIT)) {
            assertTrue(reader instanceof IndexedShapefileFeatureReader);

            // prepare a screenmap that will heavily prune features
            ScreenMap screenMap = new ScreenMap(-180, -90, 360, 180);
            screenMap.setSpans(1.0, 1.0);
            screenMap.setTransform(IdentityTransform.create(2));
            ((ShapefileFeatureReader) reader).setScreenMap(screenMap);
            ((ShapefileFeatureReader) reader).setSimplificationDistance(1.0);

            int count = 0;
            while (reader.hasNext()) {
                SimpleFeature feature = reader.next();
                assertNotNull(feature);
                assertNotSame(ShapefileFeatureReader.SKIP, feature.getDefaultGeometry());
                count++;
            }
            assertEquals(1, count);
        }
    }

