    /**
     * Create a DbaseFileWriter using the specified header and writing to the
     * given channel.
     * 
     * @param header
     *                The DbaseFileHeader to write.
     * @param out
     *                The Channel to write to.
     * @param charset The charset the dbf is (will be) encoded in
     * @throws IOException
     *                 If errors occur while initializing.
     */
    public DbaseFileWriter(DbaseFileHeader header, WritableByteChannel out, Charset charset, TimeZone timeZone)
            throws IOException {
        header.writeHeader(out);
        this.header = header;
        this.channel = out;
        this.charset = charset == null ? Charset.defaultCharset() : charset;
        this.timeZone = timeZone == null ? TimeZone.getDefault() : timeZone;
        this.formatter = new DbaseFileWriter.FieldFormatter(this.charset, this.timeZone);
        streamLogger.open();

        // As the 'shapelib' osgeo project does, we use specific values for
        // null cells. We can set up these values for each column once, in
        // the constructor, to save time and memory.
        nullValues = new byte[header.getNumFields()][];
        for (int i = 0; i < nullValues.length; i++) {
            char nullChar;
            switch (header.getFieldType(i)) {
            case 'C':
            case 'c':
            case 'M':
            case 'G':
                nullChar = '\0';
                break;
            case 'L':
            case 'l':
                nullChar = '?';
                break;
            case 'N':
            case 'n':
            case 'F':
            case 'f':
                nullChar = '*';
                break;
            case 'D':
            case 'd':
                nullChar = '0';
                break;
            case '@':
                // becomes day 0 time 0.
                nullChar = '\0';
                break;
            default:
                // catches at least 'D', and 'd'
                nullChar = '0';
                break;
            }
            nullValues[i] = new byte[header.getFieldLength(i)];
            Arrays.fill(nullValues[i], (byte)nullChar);
        }
        buffer = NIOUtilities.allocate(header.getRecordLength());
    }

