    /**
     * Convenience method for opening a DbaseFileReader.
     *
     * @return A new DbaseFileReader
     * @throws IOException If an error occurs during creation.
     */
    protected DbaseFileReader openDbfReader(boolean indexed) throws IOException {
        if (shpFiles.get(ShpFileType.DBF) == null) {
            return null;
        }

        if (shpFiles.isLocal() && !shpFiles.exists(DBF)) {
            return null;
        }

        Charset charset = store.getCharset();

        if (store.isTryCPGFile()
                && shpFiles.get(CPG) != null
                && (!shpFiles.isLocal() || (shpFiles.isLocal() && shpFiles.exists(CPG)))) {
            try (BufferedReader br =
                    new BufferedReader(
                            new InputStreamReader(
                                    shpFiles.getInputStream(CPG, this), ISO_8859_1))) {
                String charsetName;
                if ((charsetName = br.readLine()) != null) {
                    try {
                        charset = Charset.forName(charsetName.trim());
                        store.setCharset(charset);
                    } catch (Exception e) {
                        if (LOGGER.isLoggable(Level.FINER)) {
                            LOGGER.finer(
                                    "Can't figure out charset from CPG file. Will use provided by the store.");
                        }
                    }
                }
            } catch (IOException e) {
                // could happen if cpg file does not exist remotely
            }
        }

        try {
            if (indexed) {
                return new IndexedDbaseFileReader(
                        shpFiles, store.isMemoryMapped(), charset, store.getTimeZone());
            } else {
                return new DbaseFileReader(
                        shpFiles, store.isMemoryMapped(), charset, store.getTimeZone());
            }
        } catch (IOException e) {
            // could happen if dbf file does not exist
            return null;
        }
    }

