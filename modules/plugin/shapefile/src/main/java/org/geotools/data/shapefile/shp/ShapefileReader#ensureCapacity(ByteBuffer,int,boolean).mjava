    // ensure the capacity of the buffer is of size by doubling the original
    // capacity until it is big enough
    // this may be naiive and result in out of MemoryError as implemented...
    private ByteBuffer ensureCapacity(ByteBuffer buffer, int size, boolean useMemoryMappedBuffer) {
        // This sucks if you accidentally pass is a MemoryMappedBuffer of size
        // 80M
        // like I did while messing around, within moments I had 1 gig of
        // swap...
        if (((Buffer) buffer).isReadOnly() || useMemoryMappedBuffer) {
            return buffer;
        }

        int limit = ((Buffer) buffer).limit();
        while (limit < size) {
            limit *= 2;
        }
        if (limit != ((Buffer) buffer).limit()) {
            // clean up the old buffer and allocate a new one
            buffer = NIOUtilities.allocate(limit);
        }
        return buffer;
    }

