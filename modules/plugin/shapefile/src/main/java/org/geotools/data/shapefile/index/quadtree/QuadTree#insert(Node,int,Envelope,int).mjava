    /** Inserts a shape record id in the quadtree */
    public void insert(Node node, int recno, Envelope bounds, int maxDepth) throws StoreException {

        if (maxDepth > 1 && node.getNumSubNodes() > 0) {
            /*
             * If there are subnodes, then consider whether this object will fit
             * in them.
             */
            Node subNode = null;
            for (int i = 0; i < node.getNumSubNodes(); i++) {
                subNode = node.getSubNode(i);
                if (subNode.getBounds().contains(bounds)) {
                    this.insert(subNode, recno, bounds, maxDepth - 1);
                    return;
                }
            }
        }
        if (maxDepth > 1 && node.getNumSubNodes() < 4) {
            /*
             * Otherwise, consider creating four subnodes if could fit into
             * them, and adding to the appropriate subnode.
             */

            Envelope[] tmp = this.splitBounds(node.getBounds());
            Envelope half1 = tmp[0];
            Envelope half2 = tmp[1];

            tmp = this.splitBounds(half1);
            Envelope quad1 = tmp[0];
            Envelope quad2 = tmp[1];

            tmp = this.splitBounds(half2);
            Envelope quad3 = tmp[0];
            Envelope quad4 = tmp[1];

            Node subnode = null;
            if (quad1.contains(bounds)) {
                subnode = new Node(quad1);
            } else if (quad2.contains(bounds)) {
                subnode = new Node(quad2);
            } else if (quad3.contains(bounds)) {
                subnode = new Node(quad3);
            } else if (quad4.contains(bounds)) {
                subnode = new Node(quad4);
            }

            if (subnode != null) {
                node.addSubNode(subnode);
                this.insert(subnode, recno, bounds, maxDepth - 1);
                return;
            }
        }

        // If none of that worked, just add it to this nodes list.
        node.addShapeId(recno);
    }

