    /**
     * Takes a map of parameters which describes how to access a DataStore and
     * determines if it can be read by the ShapefileDataStore or
     * IndexedShapefileDataStore implementations.
     * 
     * @param params
     *                A map of parameters describing the location of a
     *                datastore. Files should be pointed to by a 'url' param.
     * 
     * @return true iff params contains a url param which points to a file
     *         ending in shp
     */
    public boolean canProcess(Map params) {
        boolean accept = false;
        try {
            String sort = (String) SORT.lookUp(params);
            if( sort == null || "none".equals( sort )){
                // this is fine we can support that
            }
            else if ("memory".equals(sort)){
                return false; // not supported
            }
            else if ("disk".equals(sort)){
                return false; // not supported
            }
            else {
                LOGGER.warning("Unexpected sort level request: '"+sort+"'");
            }
        } catch (IOException e) {
            return false;
        }
        if (params.containsKey(URLP.key)) {
            try {
                URL url = (URL) URLP.lookUp(params);
                accept = canProcess(url);
                if(!accept) {
                    // maybe it's a directory?
                    Object fileType = FILE_TYPE.lookUp(params);
                    File dir = DataUtilities.urlToFile(url);
                    // check for null fileType for backwards compatibility
                    accept = dir.isDirectory() && (fileType == null || "shapefile".equals(fileType));  
                }
            } catch (IOException ioe) {
                // yes, I am eating this - since it is my job to return a
                // true/false
            }
        }
        return accept;
    }

