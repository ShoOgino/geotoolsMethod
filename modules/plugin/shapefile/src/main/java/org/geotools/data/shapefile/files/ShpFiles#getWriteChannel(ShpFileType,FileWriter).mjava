    /**
     * Obtain a WritableByteChannel from the given URL. If the url protocol is file, a FileChannel
     * will be returned. Currently, this method will return a generic channel for remote urls,
     * however both shape and dbf writing can only occur with a local FileChannel channel.
     *
     * <p>A write lock is obtained when this method is called and released when the channel is
     * closed.
     *
     * @param type the type of file to open the stream to.
     * @param requestor the object requesting the stream
     * @return a WritableByteChannel for the provided file type
     * @throws IOException if there is an error opening the stream
     */
    @SuppressWarnings("PMD.CloseResource") // closeable resource are returned
    public WritableByteChannel getWriteChannel(ShpFileType type, FileWriter requestor)
            throws IOException {

        URL url = acquireWrite(type, requestor);

        try {
            WritableByteChannel channel;
            if (isLocal()) {

                File file = URLs.urlToFile(url);

                RandomAccessFile raf = new RandomAccessFile(file, "rw");
                channel = new FileChannelDecorator(raf.getChannel(), this, url, requestor);

                ((FileChannel) channel).lock();

            } else {
                OutputStream out = url.openConnection().getOutputStream();
                channel =
                        new WritableByteChannelDecorator(
                                Channels.newChannel(out), this, url, requestor);
            }

            return channel;
        } catch (Throwable e) {
            unlockWrite(url, requestor);
            if (e instanceof IOException) {
                throw (IOException) e;
            } else if (e instanceof RuntimeException) {
                throw (RuntimeException) e;
            } else if (e instanceof Error) {
                throw (Error) e;
            } else {
                throw new RuntimeException(e);
            }
        }
    }

