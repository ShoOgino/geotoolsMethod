    /**
     * Index the shapefile denoted by setShapeFileName(String fileName) If when a thread starts,
     * another thread is indexing the same file, this thread will wait that the first thread ends
     * indexing; in this case <b>zero</b> is reurned as result of the indexing process.
     *
     * @param verbose enable/disable printing of dots every 500 indexed records
     * @return The number of indexed records (or zero)
     */
    public int index(boolean verbose, ProgressListener listener)
            throws MalformedURLException, IOException, TreeException, StoreException,
                    LockTimeoutException {

        if (this.shpFiles == null) {
            throw new IOException("You have to set a shape file name!");
        }

        int cnt = 0;

        // Temporary file for building...
        StorageFile storage = shpFiles.getStorageFile(ShpFileType.QIX);
        File treeFile = storage.getFile();

        if (max == -1) {
            try (ShapefileReader reader =
                    new ShapefileReader(shpFiles, true, false, new GeometryFactory())) {

                // compute a reasonable index max depth, considering a fully developed
                // 10 levels one already contains 200k index nodes, good for indexing up
                // to 3M features without consuming too much memory
                int features = reader.getCount(0);
                max = 1;
                int nodes = 1;
                while (nodes * leafSize < features) {
                    max++;
                    nodes *= 4;
                }
                if (max < 10) {
                    max = 10;
                }
            }
        }

        try (ShapefileReader reader =
                new ShapefileReader(shpFiles, true, false, new GeometryFactory())) {

            cnt = this.buildQuadTree(reader, treeFile, verbose);
        }

        // Final index file
        storage.replaceOriginal();

        return cnt;
    }

