    /**
     * Tries to acquire a URL for read/write purposes. Returns null if the acquire failed or if the
     * file does not exist
     *
     * <p>It is recommended that get*Stream or get*Channel methods are used when reading or writing
     * to the file is desired.
     *
     * @see #getInputStream(ShpFileType, FileReader)
     * @see #getReadChannel(ShpFileType, FileReader)
     * @see #getWriteChannel(ShpFileType, FileReader)
     * @param type the type of the file desired.
     * @param requestor the object that is requesting the URL. The same object must release the lock
     *     and is also used for debugging.
     * @return A result object containing the URL or the reason for the failure.
     */
    public Result<URL, State> tryAcquireWrite(ShpFileType type, FileWriter requestor) {

        URL url = urls.get(type);
        if (url == null) {
            return new Result<URL, State>(null, State.NOT_EXIST);
        }

        Collection<ShpFilesLocker> threadLockers = getCurrentThreadLockers();
        boolean locked = readWriteLock.writeLock().tryLock();
        if (!locked && threadLockers.size() > 1) {
            // hum, it may be be because we are holding a read lock
            relinquishReadLocks(threadLockers);
            locked = readWriteLock.writeLock().tryLock();
            if (locked == false) {
                regainReadLocks(threadLockers);
                return new Result<URL, State>(null, State.LOCKED);
            }
        }

        threadLockers.add(new ShpFilesLocker(url, requestor));
        return new Result<URL, State>(url, State.GOOD);
    }

