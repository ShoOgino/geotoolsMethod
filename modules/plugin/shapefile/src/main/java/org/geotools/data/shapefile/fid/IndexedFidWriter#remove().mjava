    /**
     * Increments the fidIndex by 1.
     *
     * <p>Indicates that a feature was removed from the location. This is intended to ensure that
     * FIDs stay constant over time. Consider the following case of 5 features.
     *
     * <ul>
     *   <li>feature 1 has fid typename.0
     *   <li>feature 2 has fid typename.1
     *   <li>feature 3 has fid typename.2
     *   <li>feature 4 has fid typename.3
     *   <li>feature 5 has fid typename.4
     * </ul>
     *
     * <p>when feature 3 is removed/deleted the following usage of the write should take place:
     *
     * <ul>
     *   <li>next(); (move to feature 1)
     *   <li>next(); (move to feature 2)
     *   <li>next(); (move to feature 3)
     *   <li>remove();(delete feature 3)
     *   <li>next(); (move to feature 4)
     *   <li>// optional write(); (write feature 4)
     *   <li>next(); (move to feature 5)
     *   <li>write(); (write(feature 5)
     * </ul>
     *
     * @throws IOException if current fid index is null
     */
    public void remove() throws IOException {
        if (current == -1)
            throw new IOException("Current fid index is null, next must be called before remove");
        if (hasNext()) {
            removes++;
            current = -1;
        }
    }

