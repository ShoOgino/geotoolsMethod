    /**
     * Use the spatial index if available and adds a small optimization: if no
     * attributes are going to be read, don't uselessly open and read the dbf
     * file.
     * 
     * @see org.geotools.data.AbstractDataStore#getFeatureReader(java.lang.String,
     *      org.geotools.data.Query)
     */
    protected  FeatureReader<SimpleFeatureType, SimpleFeature> getFeatureReader(String typeName, Query query)
            throws IOException {
        if (query.getFilter() == Filter.EXCLUDE)
            return new EmptyFeatureReader<SimpleFeatureType, SimpleFeature>(getSchema());

        String[] propertyNames = query.getPropertyNames() == null ? new String[0]
                : query.getPropertyNames();
        String defaultGeomName = schema.getGeometryDescriptor().getLocalName();


        // add the attributes we need to read to keep the filtering going
        if(propertyNames.length  > 0) {
            FilterAttributeExtractor fae = new FilterAttributeExtractor(schema);
            query.getFilter().accept(fae, null);
    
            Set<String> attributes = new LinkedHashSet<String>(Arrays.asList(propertyNames));
            attributes.addAll(fae.getAttributeNameSet());
    
            propertyNames = (String[]) attributes.toArray(new String[attributes
                    .size()]);
        }

        // check what we actually have to read
        SimpleFeatureType newSchema = schema;
        boolean readDbf = true;
        boolean readGeometry = true;
        try {
            if (((query.getPropertyNames() != Query.NO_NAMES)
                    && (propertyNames.length == 1) && propertyNames[0]
                    .equals(defaultGeomName))) {
                readDbf = false;
                newSchema = createSubType( propertyNames);
            } else if ((query.getPropertyNames() == Query.NO_NAMES)
                    && (propertyNames.length == 0)) {
                readDbf = false;
                readGeometry = false;
                newSchema = createSubType( propertyNames);
            } else if( propertyNames.length > 0 && !propertyNames[0].equals(defaultGeomName) ){
                readGeometry = false;
                newSchema = createSubType(propertyNames);
            } else if(propertyNames.length > 0) {
                newSchema = createSubType(propertyNames);
            }

            return createFeatureReader(typeName, getAttributesReader(readDbf,
                    readGeometry, query, newSchema), newSchema);
        } catch (SchemaException se) {
            throw new DataSourceException("Error creating schema", se);
        }
    }

