    public CloseableIterator<Data> search(final Envelope bounds) throws StoreException {
        final Indices indices = new Indices();
        collectIndices(indices, root, bounds);
        indices.sort();
        final Data data = new Data(DATA_DEFINITION);
        return new CloseableIterator<Data>() {
            boolean read = true;
            int idx = 0;

            @Override
            public void remove() {
                throw new UnsupportedOperationException();
            }

            @Override
            public Data next() {
                if (!hasNext()) {
                    throw new NoSuchElementException();
                }

                read = true;
                return data;
            }

            @Override
            public boolean hasNext() {
                if (!read) {
                    return true;
                }

                if (idx >= indices.size()) {
                    return false;
                }

                try {
                    data.clear();
                    data.addValue(0);
                    data.addValue((long) indices.get(idx));
                    idx++;
                    read = false;
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }

                return true;
            }

            @Override
            public void close() throws IOException {
                indices.clear();
            }
        };
    }

