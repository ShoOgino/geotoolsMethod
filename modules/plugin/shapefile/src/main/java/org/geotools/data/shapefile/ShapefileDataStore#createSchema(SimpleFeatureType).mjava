    /**
     * Set the FeatureType of this DataStore. This method will delete any existing local resources
     * or throw an IOException if the DataStore is remote.
     *
     * @param featureType The desired FeatureType.
     * @throws IOException If the DataStore is remote.
     */
    public void createSchema(SimpleFeatureType featureType) throws IOException {
        if (!shpFiles.isLocal()) {
            throw new IOException("Cannot create FeatureType on remote or in-classpath shapefile");
        }

        shpFiles.delete();

        CoordinateReferenceSystem crs =
                featureType.getGeometryDescriptor().getCoordinateReferenceSystem();
        final Class<?> geomType = featureType.getGeometryDescriptor().getType().getBinding();
        final ShapeType shapeType;

        if (Point.class.isAssignableFrom(geomType)) {
            shapeType = ShapeType.POINT;
        } else if (MultiPoint.class.isAssignableFrom(geomType)) {
            shapeType = ShapeType.MULTIPOINT;
        } else if (LineString.class.isAssignableFrom(geomType)
                || MultiLineString.class.isAssignableFrom(geomType)) {
            shapeType = ShapeType.ARC;
        } else if (Polygon.class.isAssignableFrom(geomType)
                || MultiPolygon.class.isAssignableFrom(geomType)) {
            shapeType = ShapeType.POLYGON;
        } else {
            throw new DataSourceException(
                    "Cannot create a shapefile whose geometry type is " + geomType);
        }

        StorageFile shpStoragefile = shpFiles.getStorageFile(SHP);
        StorageFile shxStoragefile = shpFiles.getStorageFile(SHX);
        StorageFile dbfStoragefile = shpFiles.getStorageFile(DBF);
        StorageFile prjStoragefile = shpFiles.getStorageFile(PRJ);

        try (FileChannel shpChannel = shpStoragefile.getWriteChannel();
                FileChannel shxChannel = shxStoragefile.getWriteChannel();
                ShapefileWriter writer = new ShapefileWriter(shpChannel, shxChannel)) {
            // by spec, if the file is empty, the shape envelope should be ignored
            writer.writeHeaders(new Envelope(), shapeType, 0, 100);
        }

        DbaseFileHeader dbfheader = createDbaseHeader(featureType, charset);

        dbfheader.setNumRecords(0);

        try (WritableByteChannel dbfChannel = dbfStoragefile.getWriteChannel()) {
            dbfheader.writeHeader(dbfChannel);
        }

        if (crs != null) {
            String s = toSingleLineWKT(crs);

            try (FileWriter prjWriter = new FileWriter(prjStoragefile.getFile())) {
                prjWriter.write(s);
            }
        } else {
            LOGGER.fine("PRJ file not generated for null CoordinateReferenceSystem");
        }
        StorageFile.replaceOriginals(
                shpStoragefile, shxStoragefile, dbfStoragefile, prjStoragefile);
    }

