    /**
     * Opens a output stream for the indicated file. A write lock is requested at the method call
     * and released on close.
     *
     * @param type the type of file to open the stream to.
     * @param requestor the object requesting the stream
     * @return an output stream
     * @throws IOException if a problem occurred opening the stream.
     */
    @SuppressWarnings("PMD.CloseResource") // resource is returned
    public OutputStream getOutputStream(ShpFileType type, final FileWriter requestor)
            throws IOException {
        final URL url = acquireWrite(type, requestor);
        OutputStream out = null;
        try {

            if (isLocal()) {
                File file = URLs.urlToFile(url);
                out = new FileOutputStream(file);
            } else {
                URLConnection connection = url.openConnection();
                connection.setDoOutput(true);
                out = connection.getOutputStream();
            }

            FilterOutputStream output =
                    new FilterOutputStream(out) {

                        private volatile boolean closed = false;

                        @Override
                        public void close() throws IOException {
                            try {
                                super.close();
                            } finally {
                                if (!closed) {
                                    closed = true;
                                    unlockWrite(url, requestor);
                                }
                            }
                        }
                    };

            return output;
        } catch (Throwable e) {
            unlockWrite(url, requestor);
            if (out != null) {
                out.close();
            }
            if (e instanceof IOException) {
                throw (IOException) e;
            } else if (e instanceof RuntimeException) {
                throw (RuntimeException) e;
            } else if (e instanceof Error) {
                throw (Error) e;
            } else {
                throw new RuntimeException(e);
            }
        }
    }

