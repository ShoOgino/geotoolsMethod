    /**
     * Gets the coordinate reference system that will be associated to the {@link GridCoverage} by
     * looking for a related PRJ.
     *
     * @throws UnsupportedEncodingException
     */
    protected void parsePRJFile() throws UnsupportedEncodingException {
        String prjPath =
                new StringBuilder(parentPath)
                        .append(SEPARATOR)
                        .append(coverageName)
                        .append(".prj")
                        .toString();

        // does it exist?
        final File prjFile = new File(prjPath);
        if (prjFile.exists()) {
            // it exists then we have top read it
            PrjFileReader projReader = null;
            FileInputStream instream = null;
            try {
                instream = new FileInputStream(prjFile);
                final FileChannel channel = instream.getChannel();
                projReader = new PrjFileReader(channel);
                crs = projReader.getCoordinateReferenceSystem();
                // using a default CRS
            } catch (FileNotFoundException e) {
                if (LOGGER.isLoggable(Level.WARNING)) {
                    LOGGER.log(Level.WARNING, e.getLocalizedMessage(), e);
                }
            } catch (IOException e) {
                if (LOGGER.isLoggable(Level.WARNING)) {
                    LOGGER.log(Level.WARNING, e.getLocalizedMessage(), e);
                }
            } catch (FactoryException e) {
                if (LOGGER.isLoggable(Level.WARNING)) {
                    LOGGER.log(Level.WARNING, e.getLocalizedMessage(), e);
                }
            } finally {
                if (projReader != null) {
                    try {
                        projReader.close();
                    } catch (IOException e) {
                        if (LOGGER.isLoggable(Level.WARNING)) {
                            LOGGER.log(Level.WARNING, e.getLocalizedMessage(), e);
                        }
                    }
                    if (instream != null)
                        try {
                            instream.close();
                        } catch (IOException ioe) {
                            // warn about the error but proceed, it is not fatal
                            // we have at least the default crs to use
                            LOGGER.log(FINE, ioe.getLocalizedMessage(), ioe);
                        }
                }
            }
        }
    }

