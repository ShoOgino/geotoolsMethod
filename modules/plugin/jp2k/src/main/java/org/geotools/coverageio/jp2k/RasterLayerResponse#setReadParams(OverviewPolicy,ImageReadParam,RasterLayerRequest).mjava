    /**
     * This method is responsible for preparing the read param for doing an {@link
     * ImageReader#read(int, ImageReadParam)}.
     *
     * <p>This method is responsible for preparing the read param for doing an {@link
     * ImageReader#read(int, ImageReadParam)}. It sets the passed {@link ImageReadParam} in terms of
     * decimation on reading using the provided requestedEnvelope and requestedDim to evaluate the
     * needed resolution. It also returns and {@link Integer} representing the index of the raster
     * to be read when dealing with multipage raster.
     *
     * @param overviewPolicy it can be one of {@link Hints#VALUE_OVERVIEW_POLICY_IGNORE}, {@link
     *     Hints#VALUE_OVERVIEW_POLICY_NEAREST}, {@link Hints#VALUE_OVERVIEW_POLICY_QUALITY} or
     *     {@link Hints#VALUE_OVERVIEW_POLICY_SPEED}. It specifies the policy to compute the
     *     overviews level upon request.
     * @param readParams an instance of {@link ImageReadParam} for setting the subsampling factors.
     * @return the index of the raster to read in the underlying data source.
     */
    private int setReadParams(
            final OverviewPolicy overviewPolicy,
            final ImageReadParam readParams,
            final RasterLayerRequest request)
            throws IOException, TransformException {

        // Default image index 0
        int imageChoice = 0;
        // default values for subsampling
        readParams.setSourceSubsampling(1, 1, 0, 0);

        //
        // Init overview policy
        //
        // //
        // when policy is explictly provided it overrides the policy provided
        // using hints.
        final OverviewPolicy policy;
        if (overviewPolicy == null) policy = rasterManager.overviewPolicy;
        else policy = overviewPolicy;

        // requested to ignore overviews
        if (policy.equals(OverviewPolicy.IGNORE)) return imageChoice;

        // overviews and decimation
        imageChoice = rasterManager.overviewsController.pickOverviewLevel(overviewPolicy, request);

        // DECIMATION ON READING
        rasterManager.decimationController.performDecimation(imageChoice, readParams, request);
        return imageChoice;
    }

