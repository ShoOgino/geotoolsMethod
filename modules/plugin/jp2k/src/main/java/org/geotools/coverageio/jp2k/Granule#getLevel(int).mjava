	public Level getLevel(final int index) {
		synchronized (granuleLevels) {
			if(granuleLevels.containsKey(Integer.valueOf(index)))
				return granuleLevels.get(Integer.valueOf(index));
			else
			{
				//load level
				// create the base grid to world transformation
				ImageInputStream inStream=null;
				ImageReader reader=null;
				try {
					//
					//get info about the raster we have to read
					//
					
					// get a stream
					inStream = Utils.getInputStream(granuleFile);
					if(inStream==null)
						throw new IllegalArgumentException();
			
					// get a reader and try to cache the relevant SPI
					if(cachedSPI==null){
						reader = Utils.getReader( inStream);
						if(reader!=null)
							cachedSPI=reader.getOriginatingProvider();
					}
					else
						reader=cachedSPI.createReaderInstance();
					if(reader==null)
						throw new IllegalArgumentException("Unable to get an ImageReader for the provided file "+granuleFile.getAbsolutePath());					
					
					//get selected level and base level dimensions
					final Rectangle levelDimension = ImageUtilities.getDimension(index,inStream, reader);
					final Level baseLevel= granuleLevels.get(0);
					final double scaleX=baseLevel.width/(1.0*levelDimension.width);
					final double scaleY=baseLevel.height/(1.0*levelDimension.height);
					
					// add the base level
					final Level newLevel=new Level(scaleX,scaleY,levelDimension.width,levelDimension.height);
					this.granuleLevels.put(Integer.valueOf(index),newLevel);
					return newLevel;
					

				} catch (IllegalStateException e) {
					throw new IllegalArgumentException(e);
					
				} catch (IOException e) {
					throw new IllegalArgumentException(e);
				} 
				finally{
					try{
						if(inStream!=null)
							inStream.close();
					}
					catch (Throwable e) {
						throw new IllegalArgumentException(e);
					}
					finally{
						if(reader!=null)
							reader.dispose();
					}
				}	
			}			
			
		}
	}

