    /**
     * @param envelopeOrig Envelope in world coords
     * @param info ImageLevelInfo
     * @param conn Database Connection
     * @return TileQueueElement containing the georeferenced cropped image
     */
    private TileQueueElement getSingleTQElement(
            GeneralEnvelope envelopeOrig, ImageLevelInfo info, Connection conn) {

        int level = Integer.parseInt(info.getTileTableName());
        BufferedImage bimg = null;

        // check a against the extent of the pyramid level
        GeneralEnvelope envelope = new GeneralEnvelope(envelopeOrig);
        GeneralEnvelope intersectEnvelope =
                new GeneralEnvelope(
                        new double[] {info.getExtentMinX(), info.getExtentMinY()},
                        new double[] {info.getExtentMaxX(), info.getExtentMaxY()});
        intersectEnvelope.setCoordinateReferenceSystem(envelope.getCoordinateReferenceSystem());
        envelope.intersect(intersectEnvelope);

        try {
            LOGGER.fine("Starting to Retrieve GeoRaster Image");

            byte[] bytes = getImageBytesUsingSDOExport(envelope, level, conn);

            // start creating a java Buffered image from the blob
            SeekableStream stream = new ByteArraySeekableStream(bytes);

            // find an ImageDecorder
            String decoderName = null;
            for (String dn : ImageCodec.getDecoderNames(stream)) {
                decoderName = dn;
                break;
            }
            // decode Image
            ImageDecoder decoder = ImageCodec.createImageDecoder(decoderName, stream, null);
            RenderedImage rimage = decoder.decodeAsRenderedImage();

            // Check for the color model, if there is none, create one
            ColorModel cm = rimage.getColorModel();
            if (cm == null) cm = PlanarImage.createColorModel(rimage.getSampleModel());

            // Convert to BufferedImage
            PlanarImage pimage = PlanarImage.wrapRenderedImage(rimage);
            bimg = pimage.getAsBufferedImage(null, cm);

            LOGGER.fine("Creating BufferedImage from GeoRaster Object");

            // LOGGER.fine("Writing Retrieved Image to disk (Should be for Debugging only!)");
            // ImageIO.write(bimg,"png", new File("/tmp/pics/test.png"));

            return new TileQueueElement(getConfig().getCoverageName(), bimg, envelope);
        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }

