    /**
     * Prepare the PGRaster configuration steps: 
     *  - importing tiles into the DB and create metadata table if needed
     *  - prepare the URL of the XML configuration file and return that URL.
     * 
     * The input url String may represent:
     * - 1) the path of the folder containing tiles to be mosaicked, previously generated with gdal_retile.
     *   2) an inline configuration specification in that form:
     *      pgraster://USER:PASS@HOST:PORT:DATABASE.SCHEMA.TABLE@EPSGCODE:*.FILE_EXTENSION?OPTIONS#/PATH/TO/RASTER_TILES/"
     * 
     * @param url a String referring to the mosaic to be configured. 
     * @param hints hints containing a {@link JDBCPGrasterConfigurationBean} bean in case the url string
     * doesn't specify the configuration params inline.
     * 
     * @return the URL of the generated XML file containing the ImageMosaicJDBC configuration 
     * (mapping + connection + coverage configs)
     */
    public static URL createConfiguration (final String url, final Hints hints) {
        Utilities.ensureNonNull("url", url);
        try {
            JDBCPGRasterConfigurationBuilder builder = null;
            JDBCPGrasterConfigurationBean config = null;
            // Fail in case no raster2pgsql script is available
            if (url.startsWith("pgraster")) {
                // Parse the string containing configuration inline
                config = parseConfig(url);
                final int fileURLIndex = url.indexOf("#");
                final String dataUrl = url.substring(fileURLIndex + 1);
                final String fileUrl = dataUrl.startsWith("file:/") ? dataUrl : "file://" + dataUrl; 
                builder = new JDBCPGRasterConfigurationBuilder(config, new URL(fileUrl));
            } else {
                if (hints != null && hints.containsKey(JDBCPGrasterConfigurationBean.CONFIG_KEY)) {
                    // Get the configuration from hints
                    Object object = hints.get(JDBCPGrasterConfigurationBean.CONFIG_KEY);
                    if (object != null && object instanceof JDBCPGrasterConfigurationBean) {
                        config = (JDBCPGrasterConfigurationBean) object;
                        builder = new JDBCPGRasterConfigurationBuilder(config, new URL(url));
                    }
                }
            }
            if (builder != null) {
                if (!isRaster2PgsqlAvailable() && config != null && (config.getFileExtension() != null || config.getImportOptions() != null)) {
                    if (LOGGER.isLoggable(Level.WARNING)) {
                        LOGGER.warning("The specified URL refers to a pgraster but raster2pgsql script is unavailable.\n" +
                                 "Automatic configuration won't be performed. In case raster tiles have been manually imported, " +
                                 "make sure to leave fileExtensions and importOptions parameters empty and repeat the coverage configuration.");
                        return null;
                    }
                }

                
                return builder.buildConfiguration();
            } 
            return new URL(url);
        } catch (MalformedURLException mfe) {
            throw new IllegalArgumentException(mfe);
        }
    }

