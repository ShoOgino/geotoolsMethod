    /**
     * Gets the blob using Oracle Georaster export facility
     *
     * @param envelope The window in world coords
     * @param level Pyramid level
     * @param conn Connection
     * @return The BLOB as byte array
     */
    private byte[] getImageBytesUsingSDOExport(
            GeneralEnvelope envelope, int level, Connection conn) {
        BigDecimal[] pixelCoords1 = null;
        BigDecimal[] pixelCoords2 = null;
        try (PreparedStatement ps = conn.prepareStatement(stmtPixel)) {
            ps.setInt(1, level);
            ps.setDouble(2, envelope.getMinimum(0));
            ps.setDouble(3, envelope.getMaximum(1));
            ps.setInt(4, level);
            ps.setDouble(5, envelope.getMaximum(0));
            ps.setDouble(6, envelope.getMinimum(1));
            ps.setString(7, getConfig().getCoverageName());

            try (ResultSet r = ps.executeQuery()) {
                if (r.next()) {
                    pixelCoords1 = (BigDecimal[]) r.getArray(1).getArray();
                    pixelCoords2 = (BigDecimal[]) r.getArray(2).getArray();
                } else {
                    throw new RuntimeException(
                            "No cell/pixel coordinates for world Envelope " + envelope);
                }
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

        // Export the georaster object, cropped by cell coordinates as a TIFF image into a BLOB
        try (CallableStatement cs = conn.prepareCall(stmtExport)) {
            cs.setString(1, getConfig().getCoverageName());
            String params =
                    String.format(
                            "pLevel=%d cropArea=(%d,%d,%d,%d)",
                            level,
                            pixelCoords1[0].intValue(),
                            pixelCoords1[1].intValue(),
                            pixelCoords2[0].intValue(),
                            pixelCoords2[1].intValue());

            cs.setString(2, params);
            cs.registerOutParameter(3, Types.BLOB);
            cs.execute();
            Blob blob = cs.getBlob(3);
            byte[] bytes = blob.getBytes(1, (int) blob.length());
            if (freeTemporary == null) {
                try {
                    freeTemporary = blob.getClass().getMethod("freeTemporary");
                } catch (Exception ex) {
                    LOGGER.warning(
                            "Cannort free TEMP space for BLOB, danger of running out of space");
                }
            }
            if (freeTemporary != null) freeTemporary.invoke(blob);
            return bytes;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

