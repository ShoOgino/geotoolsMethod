    /*
     * (non-Javadoc)
     *
     * @see org.geotools.gce.imagemosaic.jdbc.JDBCAccess#initialize()
     */
    public void initialize() throws IOException {

        Connection con = null;
        try {
            con = getConnection();

            if (con.getAutoCommit()) {
                con.setAutoCommit(false);
            }

            listGDALFormats(con);
            initFromDB(getConfig().getCoverageName(), con);
            calculateExtentsFromDB(getConfig().getCoverageName(), con);
            calculateResolutionsFromDB(getConfig().getCoverageName(), con);
            /*
            populate statementsMap independently of calculateResolutionsFromDB()
            in case resolutions have been pre-set and don't need to be recalculated.
            */
            populateStatementsMap(getConfig().getCoverageName(), con);
            /*
            TODO nat changes - GEOT-4525. I am  not sure if this is the best place for the next statement, as
            if configurations have been already defined and were not recalculated, we will be just overwriting
            existing configuration, albeit with the same values. But for simplicity sake, it is probably better
             to leave it here...
             */
            con.commit();

            for (ImageLevelInfo levelInfo : getLevelInfos()) {
                if (LOGGER.isLoggable(Level.INFO)) LOGGER.info(levelInfo.infoString());
            }
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, e.getMessage(), e);

            LOGGER.severe(e.getMessage());
            throw new IOException(e);
        } finally {
            try {
                // con.rollback();
                if (con != null) con.close();
            } catch (SQLException e1) {
            }
        }

        if (getLevelInfos().isEmpty()) {
            String msg = "No level available for " + getConfig().getCoverageName();
            LOGGER.severe(msg);
            throw new IOException(msg);
        }

        // sort levelinfos
        SortedSet<ImageLevelInfo> sortColl = new TreeSet<>();
        sortColl.addAll(getLevelInfos());
        getLevelInfos().clear();
        getLevelInfos().addAll(sortColl);
    }

