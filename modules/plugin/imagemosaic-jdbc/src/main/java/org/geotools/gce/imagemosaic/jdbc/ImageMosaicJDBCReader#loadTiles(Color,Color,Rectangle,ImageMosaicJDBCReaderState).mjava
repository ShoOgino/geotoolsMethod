    /**
     * @param backgroundColor the background color
     * @param outputTransparentColor the transparent color
     * @param pixelDimension
     * @return the gridcoverage as the final result
     * @throws IOException
     */
    private GridCoverage2D loadTiles(
            Color backgroundColor,
            Color outputTransparentColor,
            Rectangle pixelDimension,
            ImageMosaicJDBCReaderState state)
            throws IOException {
        if (LOGGER.isLoggable(Level.FINE)) {
            LOGGER.fine(
                    new StringBuffer("Creating mosaic to comply with envelope ")
                            .append(
                                    (state.getRequestedEnvelope() != null)
                                            ? state.getRequestedEnvelope().toString()
                                            : null)
                            .append(" crs ")
                            .append(crs.toWKT())
                            .append(" dim ")
                            .append((pixelDimension == null) ? " null" : pixelDimension.toString())
                            .toString());
        }

        transformRequestEnvelope(state);

        // /////////////////////////////////////////////////////////////////////
        //
        // Check if we have something to load by intersecting the requested
        // envelope with the bounds of the data set. If not, give warning
        //
        // /////////////////////////////////////////////////////////////////////
        if (!state.getRequestEnvelopeTransformed().intersects(this.originalEnvelope, true)) {
            LOGGER.warning("The requested envelope does not intersect the envelope of this mosaic");
            LOGGER.warning(state.getRequestEnvelopeTransformed().toString());
            LOGGER.warning(originalEnvelope.toString());

            //            return coverageFactory.create(coverageName, getEmptyImage((int)
            // pixelDimension
            //                    .getWidth(), (int) pixelDimension.getHeight(), backgroundColor,
            // outputTransparentColor), state
            //                    .getRequestedEnvelope());
            return null;
        }

        // /////////////////////////////////////////////////////////////////////
        //
        // Load feaures from the index
        // In case there are no features under the requested bbox which is legal
        // in case the mosaic is not a real sqare, we return a fake mosaic.
        //
        // /////////////////////////////////////////////////////////////////////
        final ImageReadParam readP = new ImageReadParam();
        final Integer imageChoice;

        if (pixelDimension != null) {
            try {
                imageChoice =
                        setReadParams(
                                OverviewPolicy.getDefaultPolicy(),
                                readP,
                                state.getRequestEnvelopeTransformed(),
                                pixelDimension);
                readP.setSourceSubsampling(1, 1, 0, 0);
            } catch (TransformException e) {
                LOGGER.severe(e.getLocalizedMessage());

                return coverageFactory.create(
                        coverageName,
                        getEmptyImage(
                                (int) pixelDimension.getWidth(),
                                (int) pixelDimension.getHeight(),
                                backgroundColor,
                                outputTransparentColor),
                        state.getRequestedEnvelope());
            }
        } else {
            imageChoice = Integer.valueOf(0);
        }

        ImageLevelInfo info = jdbcAccess.getLevelInfo(imageChoice.intValue());
        LOGGER.info(
                "Coverage "
                        + info.getCoverageName()
                        + " using spatial table "
                        + info.getSpatialTableName()
                        + ", image table "
                        + info.getTileTableName());

        ImageComposerThread imageComposerThread =
                new ImageComposerThread(
                        backgroundColor,
                        outputTransparentColor,
                        pixelDimension,
                        state.getRequestEnvelopeTransformed(),
                        info,
                        state.getTileQueue(),
                        config,
                        state.isXAxisSwitch(),
                        coverageFactory);
        imageComposerThread.start();

        jdbcAccess.startTileDecoders(
                pixelDimension,
                state.getRequestEnvelopeTransformed(),
                info,
                state.getTileQueue(),
                coverageFactory);

        try {
            imageComposerThread.join();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }

        GridCoverage2D result = imageComposerThread.getGridCoverage2D();

        return transformResult(result, pixelDimension, state);
    }

