    /**
     * reads a row of data from the file into a byte array.
     * 
     * <p>
     * <b>INFO:</b> this is a reader method.
     * </p>
     * 
     * @param currentfilerow
     *            the current row to be extracted from the file
     * @param rowDataCache
     *            the byte array to store the unpacked row data
     * @param activeReadRegion
     *            the region defining the portion of raster to be read
     * @return boolean TRUE for success, FALSE for failure.
     * @throws IOException
     * @throws DataFormatException
     */
    private boolean readRasterRow( int currentfilerow, byte[] rowDataCache,
            JGrassRegion activeReadRegion ) throws IOException, DataFormatException {
        ByteBuffer rowBuffer = ByteBuffer.wrap(rowDataCache);
        /*
         * Read the correct approximated row from the file. The row contents as
         * saved in a cache for along with the row number. If the row requested
         * is the row in the cache then we do not need to read from the file.
         */
        /* Data window geographic boundaries */
        double activeewres = activeReadRegion.getWEResolution();
        // double activeewres2 = activeewres / 2;
        double activewest = activeReadRegion.getWest();

        /* Map file geographic limits */
        double filewest = nativeRasterRegion.getWest();
        double fileewres = nativeRasterRegion.getWEResolution();

        // System.out.println("currentfilerow="+currentfilerow+",
        // fileWindow.getRows()="+fileWindow.getRows());

        /* Reset row cache and read new row data */
        ByteBuffer rowCache = ByteBuffer.allocate(nativeRasterRegion.getCols()
                * ((readerMapType == -2) ? 8 : 4));
        // rowCache.rewind();
        getMapRow(currentfilerow, rowCache);
        // rowCacheRow = currentfilerow;

        // if the northing is inside the file boundaries, calculate the values
        // for (double col = activewest; col < activeeast; col += activeewres)
        for( double col = 0; col < activeReadRegion.getCols(); col++ ) {
            /*
             * Calculate the column value of the data to be extracted from the
             * row
             */
            double x = (((activewest + (col * activeewres)) - filewest) / fileewres);
            x = Math.round(x);
            if (x < 0 || x >= nativeRasterRegion.getCols()) {
                /*
                 * Depending on the map type we store a different 'NO VALUE'
                 * value.
                 */
                if (readerMapType > 0) {
                    rowBuffer.putInt(Integer.MAX_VALUE);
                } else if (readerMapType == -1) {
                    rowBuffer.putFloat(Float.NaN);
                } else if (readerMapType == -2) {
                    rowBuffer.putDouble(Double.NaN);
                }
            } else if (readNullValueAtRowCol(currentfilerow, (int) x)) {
                /*
                 * Depending on the map type we store a different 'NO VALUE'
                 * value.
                 */
                if (readerMapType > 0) {
                    rowBuffer.putInt(Integer.MAX_VALUE);
                } else if (readerMapType == -1) {
                    rowBuffer.putFloat(Float.NaN);
                } else if (readerMapType == -2) {
                    rowBuffer.putDouble(Double.NaN);
                }
            } else {
                rowCache.position((int) x * numberOfBytesPerValue);
                if (readerMapType > 0) {
                    /* Integers */
                    int cell = rowCache.getInt();
                    /* File is an integer map file with 0 = novalue */
                    if (cell == 0 && isOldIntegerMap) {
                        rowBuffer.putInt(Integer.MAX_VALUE);
                    } else {
                        /* If map is a reclass then get the reclassed value */
                        if (reclassTable != null) {
                            cell = ((Integer) reclassTable.elementAt(cell)).intValue();
                        }
                        rowBuffer.putInt(cell);
                    }
                } else if (readerMapType == -1) {
                    /* Floating point map with float values. */
                    float cell = rowCache.getFloat();
                    if (reclassTable != null) {
                        cell = ((Integer) reclassTable.elementAt((int) cell)).floatValue();
                    }
                    rowBuffer.putFloat(cell);
                } else if (readerMapType == -2) {
                    /* Floating point map with double values. */
                    double cell = rowCache.getDouble();
                    if (reclassTable != null) {
                        cell = ((Integer) reclassTable.elementAt((int) cell)).doubleValue();
                    }
                    rowBuffer.putDouble(cell);
                }
            }
        }

        return true;
    }

