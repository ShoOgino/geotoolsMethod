    /**
     * reads a grass raster, given the {@linkplain ImageReadParam read
     * parameters}.
     * 
     * <p>
     * The data are read into a single banded, floating point
     * {@link WritableRaster}. A {@link RectIter} can be used to access the data
     * afterwards.
     * </p>
     * 
     * @param param
     *            the read parameters.
     * @return the read raster
     * @throws IOException
     * @throws DataFormatException
     */
    public WritableRaster readRaster( ImageReadParam param ) throws IOException,
            DataFormatException {

        if (param != null) {
            // extract the region to read from file as a Rectangle
            Rectangle srcRegion = param.getSourceRegion();
            // the dimension of the Rectangle
            int intRealRowsToRead = srcRegion.height;
            int intRealColsToRead = srcRegion.width;
            // the steep to read the pixel (usually 1)
            int sourceXSubsampling = param.getSourceXSubsampling();
            int sourceYSubsampling = param.getSourceYSubsampling();
            // calculate the window to be read
            double xRes = nativeRasterRegion.getWEResolution();
            double yRes = nativeRasterRegion.getNSResolution();
            double newWest = nativeRasterRegion.getWest() + srcRegion.getMinX() * xRes;
            double newEast = nativeRasterRegion.getWest() + srcRegion.getMaxX() * xRes;

            /*
             * remember that the rectangle is handled in world mode, 
             * not image mode, therefore ymin represents the south.
             */
            double minY = srcRegion.getMinY();
            double newNorth = nativeRasterRegion.getNorth() - minY * yRes;
            double newSouth = newNorth - srcRegion.height * yRes;

            activeReadRegion = new JGrassRegion(newWest, newEast, newSouth, newNorth,
                    intRealRowsToRead, intRealColsToRead);
            int colsAtMaxRes = activeReadRegion.getCols();
            int rowsAtMaxRes = activeReadRegion.getRows();

            if (!useSubSamplingAsRequestedRowcols) {
                rasterMapWidth = colsAtMaxRes / sourceXSubsampling;
                rasterMapHeight = rowsAtMaxRes / sourceYSubsampling;
            } else {
                rasterMapWidth = sourceXSubsampling;
                rasterMapHeight = sourceYSubsampling;
            }
            activeReadRegion.setCols(rasterMapWidth);
            activeReadRegion.setRows(rasterMapHeight);

        } else {
            // the whole image is read
            activeReadRegion = new JGrassRegion(nativeRasterRegion);
            rasterMapWidth = nativeRasterRegion.getCols();
            rasterMapHeight = nativeRasterRegion.getRows();
        }

        /*
         * create a single band double raster
         */
        final WritableRaster raster;
        if (numberOfBytesPerValue == 8) {
            if (!castDoubleToFloating) {
                raster = RasterFactory.createBandedRaster(DataBuffer.TYPE_DOUBLE, rasterMapWidth,
                        rasterMapHeight, 1, null);
            } else {
                raster = RasterFactory.createBandedRaster(DataBuffer.TYPE_FLOAT, rasterMapWidth,
                        rasterMapHeight, 1, null);
            }
        } else if (numberOfBytesPerValue == 4 && readerMapType < 0) {
            raster = RasterFactory.createBandedRaster(DataBuffer.TYPE_FLOAT, rasterMapWidth,
                    rasterMapHeight, 1, null);
        } else if (readerMapType > -1) {
            raster = RasterFactory.createBandedRaster(DataBuffer.TYPE_INT, rasterMapWidth,
                    rasterMapHeight, 1, null);
        } else {
            throw new IOException("Raster type not supported."); //$NON-NLS-1$
        }

        /* Allocate the space for the map data. */
        int activeRows = activeReadRegion.getRows();
        int activeCols = activeReadRegion.getCols();
        int bufferSize = activeRows * activeCols * numberOfBytesPerValue;
        ByteBuffer rasterByteBuffer = ByteBuffer.allocate(bufferSize);

        /* Byte array that will hold a complete null row */
        byte[] nullRow = null;
        /* The rowDataArray holds the unpacked row data */
        byte[] rowDataCache = new byte[activeCols * numberOfBytesPerValue];
        rowCacheRow = -1;
        firstDataRow = -1;
        int rowindex = -1;
        /* Get a local reference to speed things up */
        int filerows = nativeRasterRegion.getRows();
        double filenorth = nativeRasterRegion.getNorth();
        double filensres = nativeRasterRegion.getNSResolution();
        double datanorth = activeReadRegion.getNorth();
        double datansres = activeReadRegion.getNSResolution();
        monitor.started();
        monitor.setTask(new SimpleInternationalString("Read raster map: "
                + readerGrassEnv.getMapName()));
        float progress = 0f;
        for( double row = 0; row < activeRows; row++ ) {

            /*
             * Calculate the map file row for the current data window row.
             */
            double filerow = (filenorth - (datanorth - (row * datansres))) / filensres;
            filerow = Math.floor(filerow);
            if (filerow < 0 || filerow >= filerows) {
                /*
                 * If no data has been read yet, then increment first data row
                 * counter
                 */
                if (firstDataRow == -1)
                    rowindex++;
                /*
                 * Write a null row to the raster buffer. To speed things up the
                 * first time this is called it instantiates the buffer and
                 * fills it with null values that are reused the other times.
                 */
                if (nullRow == null)
                    nullRow = initNullRow(activeCols);
                rasterByteBuffer.put(nullRow);
            } else {
                if (firstDataRow == -1)
                    firstDataRow = rowindex + 1;
                /* Read row and put in raster buffer */
                if (filerow == rowCacheRow) {
                    rasterByteBuffer.put(rowDataCache);
                } else {
                    readRasterRow((int) filerow, rowDataCache, activeReadRegion);
                    rowCacheRow = (int) filerow;
                    rasterByteBuffer.put(rowDataCache);
                }
            }
            progress = (float) (progress + 100f * row / activeRows);
            monitor.progress(progress);
        }
        monitor.complete();

        // prepare for reading
        rasterByteBuffer.rewind();

        rowCacheRow = -1;
        nullRow = null;

        /*
         * create the raster object from the read data.
         */
        if (numberOfBytesPerValue == 8) {
            if (!castDoubleToFloating) {
                for( int y = 0; y < activeRows; y++ ) {
                    for( int x = 0; x < activeCols; x++ ) {
                        double value = rasterByteBuffer.getDouble();
                        // if (!Double.isNaN(value)) {
                        // System.out.println(y + "/" + x + "/" + value);
                        // }
                        raster.setSample(x, y, 0, value);
                    }
                    // System.out.println();
                }
            } else {
                for( int y = 0; y < activeRows; y++ ) {
                    for( int x = 0; x < activeCols; x++ ) {
                        float value = (float) rasterByteBuffer.getDouble();
                        raster.setSample(x, y, 0, value);
                    }
                }
            }
        } else if (numberOfBytesPerValue == 4 && readerMapType < 0) {
            for( int y = 0; y < activeRows; y++ ) {
                for( int x = 0; x < activeCols; x++ ) {
                    float value = rasterByteBuffer.getFloat();
                    raster.setSample(x, y, 0, value);
                }
            }
        } else if (readerMapType > -1) {
            for( int y = 0; y < activeRows; y++ ) {
                for( int x = 0; x < activeCols; x++ ) {
                    int value = rasterByteBuffer.getInt();
                    if (value == Integer.MAX_VALUE) {
                        value = noData.intValue();
                    }
                    raster.setSample(x, y, 0, value);
                }
            }
        }

        return raster;
    }

