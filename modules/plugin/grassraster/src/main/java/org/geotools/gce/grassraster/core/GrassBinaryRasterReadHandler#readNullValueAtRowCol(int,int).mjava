    /**
     * read the null value from the null file (if it exists).
     *
     * <p>Return the information about the particular cell (true if it is novalue, false if it is
     * not a novalue.
     *
     * <p><b>INFO:</b> this is a reader method.
     *
     * @param currentfilerow index of the row.
     * @param currentfilecol index of the column.
     * @return true if it is a novalue.
     */
    private boolean readNullValueAtRowCol(int currentfilerow, int currentfilecol)
            throws IOException {
        /*
         * If the null file doesn't exist and the map is an integer, than it is
         * an old integer-map format, where the novalues are the cells that
         * contain the values 0
         */
        if (imageNullFileIS != null) {
            long byteperrow = (long) Math.ceil(nativeRasterRegion.getCols() / 8.0); // in the
            // null
            // map of
            // cell_misc
            long currentByte = (long) Math.ceil((currentfilecol + 1) / 8.0); // in
            // the
            // null
            // map

            // currentfilerow starts from 0, so it is the row before the one we
            // need
            long byteToRead = (byteperrow * currentfilerow) + currentByte;

            imageNullFileIS.seek(byteToRead - 1);

            int bitposition = (currentfilecol) % 8;

            byte[] thetmp = new byte[1];
            thetmp[0] = imageNullFileIS.readByte();
            BitSet tmp = fromByteArray(thetmp);

            boolean theBit = tmp.get(7 - bitposition);
            return theBit;
        }
        return false;
    }

