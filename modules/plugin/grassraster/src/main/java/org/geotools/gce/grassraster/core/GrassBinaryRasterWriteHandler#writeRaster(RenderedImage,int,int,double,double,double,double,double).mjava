    /**
     * Writes the raster, given an raster iterator and region metadata.
     *
     * @param renderedImage the {@link RenderedImage} to write.
     * @param columns the columns of the raster to write.
     * @param rows the rows of the raster to write.
     * @param west the western bound of the raster to write.
     * @param south the southern bound of the raster to write.
     * @param xRes the east-west resolution of the raster to write.
     * @param yRes the north-south resolution of the raster to write.
     * @param noDataValue the value representing noData.
     */
    public void writeRaster(
            RenderedImage renderedImage,
            int columns,
            int rows,
            double west,
            double south,
            double xRes,
            double yRes,
            double noDataValue)
            throws IOException {
        boolean hasListeners = false;
        if (!checkStructure())
            throw new IOException("Inconsistent output structure for grass map. Check your paths.");

        /*
         * open the streams: the file for the map to create but also the needed null-file inside of
         * the cell_misc folder
         */
        imageOS = ImageIO.createImageOutputStream(writerGrassEnv.getFCELL());
        imageNullFileOS = ImageIO.createImageOutputStream(writerGrassEnv.getCELLMISC_NULL());

        double east = west + ((double) columns) * xRes;
        double north = south + ((double) rows) * yRes;

        JGrassRegion dataWindow = new JGrassRegion(west, east, south, north, rows, columns);

        createEmptyHeader(rows);

        if (hasListeners && abortRequired) {
            return;
        }

        /*
         * finally writing to disk
         */
        CompressesRasterWriter crwriter =
                new CompressesRasterWriter(
                        outputToDiskType,
                        noDataValue,
                        jump,
                        range,
                        pointerInFilePosition,
                        addressesOfRows,
                        dataWindow,
                        monitor,
                        writerGrassEnv.getMapName());
        crwriter.compressAndWrite(imageOS, imageNullFileOS, renderedImage);
        createUtilityFiles(dataWindow);
    }

