    /**
     * Writes a region to file.
     *
     * <p>Reads a text file and changes only the region values using the supplied region.
     *
     * @param regionFilePath the path to the region file.
     * @param region the region to be written to file
     * @throws IOException
     */
    private static void writeRegionToFile(String regionFilePath, JGrassRegion region)
            throws IOException {

        String line;
        File file = new File(regionFilePath);
        if (!file.exists()) {
            /*
             * if on vfat filesystem it could be a problem of case, often
             * happens with WIND file. So at least try that check.
             */
            String nameLower = file.getName().toLowerCase();
            String nameUpper = file.getName().toUpperCase();
            String baseDir = file.getParent();
            File tmpFile = null;
            if ((tmpFile = new File(baseDir + File.separator + nameLower)).exists()) {
                file = tmpFile;
            } else if ((tmpFile = new File(baseDir + File.separator + nameUpper)).exists()) {
                file = tmpFile;
            } else {
                // ok, file doesn't really exist, just create a blank window
                // first
                BufferedWriter out = new BufferedWriter(new FileWriter(file));
                out.write(BLANK_REGION);
                out.close();
            }
        }
        BufferedReader windReader = new BufferedReader(new FileReader(file));
        LinkedHashMap<String, String> store = new LinkedHashMap<String, String>();
        while ((line = windReader.readLine()) != null) {
            StringTokenizer tok = new StringTokenizer(line, ":"); // $NON-NLS-1$
            if (tok.countTokens() == 2) {
                String key = tok.nextToken().trim();
                String value = tok.nextToken().trim();
                /*
                 * this is now corrected, since GRASS seems to support only
                 * resol from 6.2 on
                 */
                if ((key.indexOf("res") != -1
                                && key.indexOf("resol") == -1) // $NON-NLS-1$ //$NON-NLS-2$
                        || key.indexOf("res3") != -1) { // $NON-NLS-1$
                    store.put(key.replaceAll("res", "resol"), value); // $NON-NLS-1$ //$NON-NLS-2$
                } else store.put(key, value);
            }
        }

        /*
         * Now overwrite the window region entries using the values in the
         * supplied window object.
         */
        store.put("north", new java.lang.Double(region.getNorth()).toString()); // $NON-NLS-1$
        store.put("south", new java.lang.Double(region.getSouth()).toString()); // $NON-NLS-1$
        store.put("east", new java.lang.Double(region.getEast()).toString()); // $NON-NLS-1$
        store.put("west", new java.lang.Double(region.getWest()).toString()); // $NON-NLS-1$
        store.put(
                "n-s resol",
                new java.lang.Double(region.getNSResolution()).toString()); // $NON-NLS-1$
        store.put(
                "e-w resol",
                new java.lang.Double(region.getWEResolution()).toString()); // $NON-NLS-1$
        store.put("cols", Integer.valueOf(region.getCols()).toString()); // $NON-NLS-1$
        store.put("rows", Integer.valueOf(region.getRows()).toString()); // $NON-NLS-1$
        windReader.close();
        windReader = null;

        /* Now write the data back to the file */
        StringBuffer data = new StringBuffer(512);
        Set<Entry<String, String>> entrySet = store.entrySet();
        for (Entry<String, String> entry : entrySet) {
            data.append(
                    entry.getKey() + ":   " + entry.getValue() + "\n"); // $NON-NLS-1$ //$NON-NLS-2$
        }

        BufferedWriter windWriter = new BufferedWriter(new FileWriter(file));
        windWriter.write(data.toString());
        windWriter.flush();
        windWriter.close();
        windWriter = null;
    }

