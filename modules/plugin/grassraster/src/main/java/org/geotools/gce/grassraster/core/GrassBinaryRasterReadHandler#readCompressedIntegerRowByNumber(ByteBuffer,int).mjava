    /**
     * read a row of data from a compressed integer point map.
     *
     * <p><b>INFO:</b> this is a reader method.
     *
     * @param rowdata the buffer to hold the read row.
     * @param currentrow the index of the row to read.
     * @throws IOException
     */
    private void readCompressedIntegerRowByNumber(ByteBuffer rowdata, int currentrow)
            throws IOException, DataFormatException {
        int offset = (int) (addressesOfRows[currentrow + 1] - addressesOfRows[currentrow]);

        imageIS.seek(addressesOfRows[currentrow]);
        /*
         * Read how many bytes the values are ex 1 => if encoded: 1 byte for the
         * value and one byte for the count = 2 2 => if encoded: 2 bytes for the
         * value and one byte for the count = 3 etc... etc
         */
        int bytespervalue = (imageIS.read() & 0xff);
        ByteBuffer cell = ByteBuffer.allocate(bytespervalue);
        int cellValue = 0;

        /* Create the buffer in which read the compressed row */
        byte[] tmp = new byte[offset - 1];
        imageIS.read(tmp);
        ByteBuffer tmpBuffer = ByteBuffer.wrap(tmp);
        tmpBuffer.order(ByteOrder.nativeOrder());

        /*
         * Create the buffer in which read the decompressed row. The final
         * decompressed row will always contain 4-byte integer values
         */
        if ((offset - 1) == (bytespervalue * nativeRasterRegion.getCols())) {
            /* There is no compression in this row */
            for (int i = 0; i < offset - 1; i = i + bytespervalue) {
                /* Read the value */
                tmpBuffer.get(cell.array());

                /*
                 * Integers can be of 1, 2, or 4 bytes. As rasterBuffer expects
                 * 4 byte integers we need to pad them with 0's. The order of
                 * the padding is determined by the ByteOrder of the buffer.
                 */
                if (bytespervalue == 1) {
                    cellValue = (cell.get(0) & 0xff);
                } else if (bytespervalue == 2) {
                    cellValue = cell.getShort(0);
                } else if (bytespervalue == 4) {
                    cellValue = cell.getInt(0);
                }
                // if (logger.isDebugEnabled()) logger.debug("tmpint=" + tmpint
                // );
                rowdata.putInt(cellValue);
            }
        } else {
            /*
             * If the row is compressed, then the values appear in pairs (like
             * couples a party). The couple is composed of the count and the
             * value value (WARNING: this can be more than one byte). Therefore,
             * knowing the length of the compressed row we can calculate the
             * number of couples.
             */
            int couples = (offset - 1) / (1 + bytespervalue);

            for (int i = 0; i < couples; i++) {
                /* Read the count of values */
                int count = (tmpBuffer.get() & 0xff);

                /* Read the value */
                tmpBuffer.get(cell.array());

                /*
                 * Integers can be of 1, 2, or 4 bytes. As rasterBuffer expects
                 * 4 byte integers we need to pad them with 0's. The order of
                 * the padding is determined by the ByteOrder of the buffer.
                 */
                if (bytespervalue == 1) {
                    cellValue = (cell.get(0) & 0xff);
                } else if (bytespervalue == 2) {
                    cellValue = cell.getShort(0);
                } else if (bytespervalue == 4) {
                    cellValue = cell.getInt(0);
                }
                /*
                 * Now write the cell value the required number of times to the
                 * raster row data buffer.
                 */
                for (int j = 0; j < count; j++) {
                    // // if (logger.isDebugEnabled()) logger.debug(" " +
                    // tmpint);
                    rowdata.putInt(cellValue);
                }
            }
        }
    }

