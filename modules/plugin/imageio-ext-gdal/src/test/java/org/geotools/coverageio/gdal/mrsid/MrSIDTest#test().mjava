    /** Test for reading a grid coverage from a MrSID source */
    @org.junit.Test
    public void test() throws Exception {
        if (!testingEnabled()) {
            return;
        }
        // read in the grid coverage
        if (fileName.equalsIgnoreCase("")) {
            LOGGER.info(
                    "==================================================================\n"
                            + " Warning! No valid test File has been specified.\n"
                            + " Please provide a valid sample in the source code and repeat this test!\n"
                            + "========================================================================");

            return;
        }

        File file = null;
        try {
            file = TestData.file(this, fileName);
        } catch (IOException fnfe) {
            LOGGER.warning("test-data not found: " + fileName + "\nTests are skipped");
            return;
        }

        // get a reader
        final MrSIDReader reader = new MrSIDReader(file);

        // /////////////////////////////////////////////////////////////////////
        //
        // read once
        //
        // /////////////////////////////////////////////////////////////////////
        GridCoverage2D gc = reader.read(null);
        forceDataLoading(gc);

        // /////////////////////////////////////////////////////////////////////
        //
        // read again with subsampling and crop
        //
        // /////////////////////////////////////////////////////////////////////
        final int originalW = gc.getRenderedImage().getWidth();
        final int originalH = gc.getRenderedImage().getHeight();
        final Rectangle range = ((GridEnvelope2D) reader.getOriginalGridRange());
        final GeneralEnvelope originalEnvelope = reader.getOriginalEnvelope();
        final GeneralEnvelope reducedEnvelope =
                new GeneralEnvelope(
                        new double[] {
                            originalEnvelope.getLowerCorner().getOrdinate(0),
                            originalEnvelope.getLowerCorner().getOrdinate(1)
                        },
                        new double[] {
                            originalEnvelope.getMedian().getOrdinate(0),
                            originalEnvelope.getMedian().getOrdinate(1)
                        });
        reducedEnvelope.setCoordinateReferenceSystem(reader.getCoordinateReferenceSystem());

        final ParameterValue gg =
                ((AbstractGridFormat) reader.getFormat()).READ_GRIDGEOMETRY2D.createValue();
        gg.setValue(
                new GridGeometry2D(
                        new GridEnvelope2D(
                                new Rectangle(
                                        0,
                                        0,
                                        (int) (range.width / 2.0),
                                        (int) (range.height / 2.0))),
                        reducedEnvelope));
        gc = reader.read(new GeneralParameterValue[] {gg});
        Assert.assertNotNull(gc);
        // NOTE: in some cases might be too restrictive
        Assert.assertTrue(
                reducedEnvelope.equals(
                        gc.getEnvelope(),
                        XAffineTransform.getScale(
                                        ((AffineTransform) gc.getGridGeometry().getGridToCRS2D()))
                                / 2,
                        true));
        // this should be fine since we give 1 pixel tolerance
        Assert.assertEquals(originalW / 2.0, gc.getRenderedImage().getWidth(), 1);
        Assert.assertEquals(originalH / 2.0, gc.getRenderedImage().getHeight(), 1);

        forceDataLoading(gc);

        // /////////////////////////////////////////////////////////////////////
        //
        // Read ignoring overviews with subsampling and crop, using Jai,
        // and customized tilesize
        //
        // /////////////////////////////////////////////////////////////////////
        final ParameterValue policy =
                ((AbstractGridFormat) reader.getFormat()).OVERVIEW_POLICY.createValue();
        policy.setValue(OverviewPolicy.IGNORE);

        // //
        //
        // Customizing Tile Size
        //
        // //
        final ParameterValue tilesize =
                ((BaseGDALGridFormat) reader.getFormat()).SUGGESTED_TILE_SIZE.createValue();
        tilesize.setValue("512,512");

        // //
        //
        // Setting read type: use JAI ImageRead
        //
        // //
        final ParameterValue useJaiRead =
                ((BaseGDALGridFormat) reader.getFormat()).USE_JAI_IMAGEREAD.createValue();
        useJaiRead.setValue(true);

        gc = reader.read(new GeneralParameterValue[] {gg, policy, tilesize, useJaiRead});

        Assert.assertNotNull(gc);
        // NOTE: in some cases might be too restrictive
        Assert.assertTrue(
                reducedEnvelope.equals(
                        gc.getEnvelope(),
                        XAffineTransform.getScale(
                                        ((AffineTransform) gc.getGridGeometry().getGridToCRS2D()))
                                / 2,
                        true));
        // this should be fine since we give 1 pixel tolerance
        Assert.assertEquals(originalW / 2, gc.getRenderedImage().getWidth(), 1);
        Assert.assertEquals(originalH / 2, gc.getRenderedImage().getHeight(), 1);

        forceDataLoading(gc);

        if (TestData.isInteractiveTest()) {
            // printing CRS information
            LOGGER.info(gc.getCoordinateReferenceSystem().toWKT());
            LOGGER.info(gc.getEnvelope().toString());
        }
    }

