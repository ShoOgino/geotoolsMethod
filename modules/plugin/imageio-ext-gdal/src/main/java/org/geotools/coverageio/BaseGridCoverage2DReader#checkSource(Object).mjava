    /**
     * Checks the input provided to this {@link BaseGridCoverage2DReader} and sets all the other
     * objects and flags accordingly.
     *
     * @param input provided to this {@link BaseGridCoverage2DReader}. Actually supported input
     *     types for the underlying ImageIO-Ext GDAL framework are: {@code File}, {@code URL}
     *     pointing to a file and {@link FileImageInputStreamExt}
     * @throws UnsupportedEncodingException
     * @throws DataSourceException
     * @throws IOException
     * @throws FileNotFoundException
     */
    private void checkSource(Object input)
            throws UnsupportedEncodingException, IOException, FileNotFoundException {

        // //
        //
        // URL to FIle
        //
        // //
        // if it is an URL pointing to a File I convert it to a file.
        if (input instanceof URL) {
            // URL that point to a file
            final URL sourceURL = ((URL) input);
            this.source = sourceURL;

            if (sourceURL.getProtocol().compareToIgnoreCase("file") == 0) {
                this.inputFile = URLs.urlToFile(sourceURL);
                input = this.inputFile;
            } else {
                throw new IllegalArgumentException("Unsupported input type");
            }
        }

        if (input instanceof FileImageInputStreamExt) {
            if (source == null) {
                source = input;
            }

            inputFile = ((FileImageInputStreamExt) input).getFile();
            input = inputFile;
        }

        // string to file conversion attempt (other readers do it too)
        if (input instanceof String) {
            try {
                final File sourceFile = new File((String) input);
                if (sourceFile.exists()) {
                    input = sourceFile;
                } else {
                    throw new IllegalArgumentException(
                            "Unsupported input type, string but not an existing path: " + input);
                }
            } catch (Exception e) {
                LOGGER.log(Level.FINER, "Failed to test if input string is a valid file", e);
            }
        }

        // //
        //
        // File
        //
        // //
        if (input instanceof File) {
            final File sourceFile = (File) input;

            if (source == null) {
                source = sourceFile;
            }

            if (inputFile == null) {
                inputFile = sourceFile;
            }

            if (!sourceFile.exists() || sourceFile.isDirectory() || !sourceFile.canRead()) {
                throw new DataSourceException(
                        "Provided file does not exist or is a directory or is not readable!");
            }

            this.parentPath = sourceFile.getParent();
            coverageName = sourceFile.getName();

            final int dotIndex = coverageName.lastIndexOf(".");
            coverageName = (dotIndex == -1) ? coverageName : coverageName.substring(0, dotIndex);
        } else {
            throw new IllegalArgumentException("Unsupported input type");
        }
    }

