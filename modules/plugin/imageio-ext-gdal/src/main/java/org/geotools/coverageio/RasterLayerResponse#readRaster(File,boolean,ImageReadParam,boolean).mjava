    /**
     * Returns a {@code PlanarImage} given a set of parameter specifying the type of read operation
     * to be performed.
     *
     * @param input a File input to be used for reading the image.
     * @param useJAI {@code true} if we need to use a JAI ImageRead operation, {@code false} if we
     *     need a simple direct {@code ImageReader.read(...)} call.
     * @param imageReadParam an {@code ImageReadParam} specifying the read parameters
     * @param useMultithreading {@code true} if a JAI ImageRead operation is requested with support
     *     for multithreading. This parameter will be ignored if requesting a direct read operation.
     * @return the read {@code PlanarImage}
     */
    protected PlanarImage readRaster(
            final File input,
            final boolean useJAI,
            final ImageReadParam imageReadParam,
            final boolean useMultithreading)
            throws IOException {
        PlanarImage raster;
        final ImageReader reader;
        if (useJAI) {
            @SuppressWarnings("PMD.CloseResource") // wrapped and returned
            FileImageInputStreamExtImpl fiis = new FileImageInputStreamExtImpl(input);
            reader = readerSpi.createReaderInstance();

            final ParameterBlock pbjImageRead = new ParameterBlock();
            pbjImageRead.add(fiis);
            pbjImageRead.add(0);
            pbjImageRead.add(Boolean.FALSE);
            pbjImageRead.add(Boolean.FALSE);
            pbjImageRead.add(Boolean.FALSE);
            pbjImageRead.add(null);
            pbjImageRead.add(null);
            pbjImageRead.add(imageReadParam);
            pbjImageRead.add(reader);

            // Check if to use a simple JAI ImageRead operation or a
            // multithreaded one
            final String jaiOperation =
                    useMultithreading
                            ? GridCoverageUtilities.IMAGEREADMT
                            : GridCoverageUtilities.IMAGEREAD;
            raster = JAI.create(jaiOperation, pbjImageRead, hints);
        } else {
            reader = readerSpi.createReaderInstance();
            try (FileImageInputStreamExtImpl fiis = new FileImageInputStreamExtImpl(input)) {
                reader.setInput(fiis, true, true);
                raster = PlanarImage.wrapRenderedImage(reader.read(0, imageReadParam));
            } finally {
                if (reader != null)
                    try {
                        reader.dispose();
                    } catch (Exception e) {
                        if (LOGGER.isLoggable(Level.FINE)) {
                            LOGGER.log(Level.FINE, e.getLocalizedMessage(), e);
                        }
                    }
            }
        }
        return raster;
    }

