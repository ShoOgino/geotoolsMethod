    /**
     * Creates a new instance of a {@link BaseGridCoverage2DReader}. I assume nothing about file
     * extension.
     *
     * @param input Source object for which we want to build a {@link BaseGridCoverage2DReader}.
     * @param hints Hints to be used by this reader throughout his life.
     * @param worldFileExtension the specific world file extension of the underlying format
     * @param formatSpecificSpi an instance of a proper {@code ImageReaderSpi}.
     */
    protected BaseGridCoverage2DReader(
            final Object input,
            final Hints hints,
            final String worldFileExtension,
            final ImageReaderSpi formatSpecificSpi)
            throws DataSourceException {
        super(input, hints);
        ImageReader reader = null;
        try {

            readerSPI = formatSpecificSpi;
            worldFileExt = worldFileExtension;

            // //
            //
            // Source management
            //
            // //
            checkSource(input);

            // //
            //
            // Setting Envelope, GridRange and CRS
            //
            // //
            reader = readerSPI.createReaderInstance();
            reader.setInput(inputFile);
            setCoverageProperties(reader);
            setRoiProvider();

            // //
            //
            // ImageLayout
            //
            // //
            setLayout(reader);

            // //
            //
            // Information about multiple levels and such
            //
            // //
            getResolutionInfo(reader);

        } catch (IOException e) {
            if (LOGGER.isLoggable(Level.SEVERE))
                LOGGER.log(Level.SEVERE, e.getLocalizedMessage(), e);

            throw new DataSourceException(e);
        } catch (TransformException e) {
            if (LOGGER.isLoggable(Level.SEVERE))
                LOGGER.log(Level.SEVERE, e.getLocalizedMessage(), e);

            throw new DataSourceException(e);
        } finally {

            // //
            //
            // Reset and dispose reader
            //
            // //
            if (reader != null) {
                try {
                    reader.reset();
                } catch (Exception e) {
                    if (LOGGER.isLoggable(Level.FINE))
                        LOGGER.log(Level.FINE, e.getLocalizedMessage(), e);
                }

                try {
                    reader.dispose();
                } catch (Exception e) {
                    if (LOGGER.isLoggable(Level.FINE))
                        LOGGER.log(Level.FINE, e.getLocalizedMessage(), e);
                }
            }
        }
    }

