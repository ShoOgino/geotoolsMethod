    /**
     * Performs a full file scan attempting to guess the type of each column Specific strategy
     * implementations will expand this functionality by overriding the buildFeatureType() method.
     */
    protected static Map<String, Class<?>> findMostSpecificTypesFromData(
            CSVReader csvReader, String[] headers) throws IOException {
        Map<String, Class<?>> result = new HashMap<String, Class<?>>();
        // start off assuming Integers for everything
        for (String header : headers) {
            result.put(header, Integer.class);
        }
        String[] record;
        // Read through the whole file in case the type changes in later rows
        try {
            while ((record = csvReader.readNext()) != null) {

                List<String> values = Arrays.asList(record);
                if (record.length >= headers.length) {
                    values = values.subList(0, headers.length);
                }
                int i = 0;
                for (String value : values) {
                    value = value.trim();
                    String header = headers[i];
                    Class<?> type = result.get(header);
                    // For each value in the row, ensure we can still parse it as the
                    // defined type for this column; if not, make it more general
                    if (type == Integer.class) {
                        try {
                            Integer.parseInt(value);
                        } catch (NumberFormatException e) {
                            try {
                                Double.parseDouble(value);
                                type = Double.class;
                            } catch (NumberFormatException ex) {
                                type = String.class;
                            }
                        }
                    } else if (type == Double.class) {
                        try {
                            Double.parseDouble(value);
                        } catch (NumberFormatException e) {
                            type = String.class;
                        }
                    }
                    result.put(header, type);
                    i++;
                }
            }
        } catch (CsvValidationException e) {
            throw new IOException(e);
        }
        return result;
    }

