    @Test
    public void testSpecificStrategyWrites() throws IOException {
        Map<String, Serializable> params = new HashMap<>();
        params.put("file", statesfile);
        params.put(CSVDataStoreFactory.STRATEGYP.key, CSVDataStoreFactory.SPECIFC_STRATEGY);
        params.put(CSVDataStoreFactory.LATFIELDP.key, "LAT");
        params.put(CSVDataStoreFactory.LnGFIELDP.key, "LON");
        DataStore store = DataStoreFinder.getDataStore(params);

        final SimpleFeatureType type = store.getSchema("locations");

        DefaultFeatureCollection collection = new DefaultFeatureCollection();

        // 45.52, -122.681944, Portland, 800, 2014
        GeometryFactory gf = JTSFactoryFinder.getGeometryFactory();
        Point portland = gf.createPoint(new Coordinate(45.52, -122.681944));
        SimpleFeature f =
                SimpleFeatureBuilder.build(
                        type, new Object[] {portland, "Portland", 800, 2014}, "locations.1");
        collection.add(f);

        File file2 = File.createTempFile("CSVTest", ".csv");
        Map<String, Serializable> params2 = new HashMap<>();
        params2.put("file", file2);
        params2.put(CSVDataStoreFactory.STRATEGYP.key, CSVDataStoreFactory.SPECIFC_STRATEGY);
        params2.put(CSVDataStoreFactory.LATFIELDP.key, "LAT");
        params2.put(CSVDataStoreFactory.LnGFIELDP.key, "LON");
        CSVDataStoreFactory factory = new CSVDataStoreFactory();
        DataStore duplicate = factory.createNewDataStore(params2);
        SimpleFeatureType featureType = store.getSchema("locations");

        duplicate.createSchema(featureType);

        SimpleFeature feature, newFeature;

        FeatureReader<SimpleFeatureType, SimpleFeature> reader =
                store.getFeatureReader(new Query("locations"), Transaction.AUTO_COMMIT);

        FeatureWriter<SimpleFeatureType, SimpleFeature> writer =
                duplicate.getFeatureWriterAppend(
                        duplicate.getTypeNames()[0], Transaction.AUTO_COMMIT);
        try {
            while (reader.hasNext()) {
                feature = reader.next();
                newFeature = writer.next();

                newFeature.setAttributes(feature.getAttributes());
                writer.write();
            }
        } finally {
            reader.close();
            writer.close();
        }
        assertTrue("Temp files being left behind", cleanedup());
        String contents = getFileContents(file2);
        try (BufferedReader lineReader =
                new BufferedReader(new CharArrayReader(contents.toCharArray()))) {
            String line = lineReader.readLine(); // header
            assertNotNull(line);
            assertTrue("No Lat", line.contains("LAT"));
            assertTrue("No Lon", line.contains("LON"));
            line = lineReader.readLine();
            // LatLonStrategy can switch the coordinate order
            assertEquals("46.066667,11.116667,Trento,140,2002", line);
        }
        file2.delete();
    }

