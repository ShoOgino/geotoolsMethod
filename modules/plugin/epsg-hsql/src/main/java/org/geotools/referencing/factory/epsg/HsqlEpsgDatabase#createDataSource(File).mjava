    public static javax.sql.DataSource createDataSource(File directory) throws SQLException {
        JDBCDataSource dataSource = new JDBCDataSource();
        /*
         * Constructs the full path to the HSQL database. Note: we do not use
         * File.toURI() because HSQL doesn't seem to expect an encoded URL (e.g.
         * "%20" instead of spaces).
         */
        final StringBuilder url = new StringBuilder("jdbc:hsqldb:file:");
        final String path = directory.getAbsolutePath().replace(File.separatorChar, '/');
        if (path.length() == 0 || path.charAt(0) != '/') {
            url.append('/');
        }
        url.append(path);
        if (url.charAt(url.length() - 1) != '/') {
            url.append('/');
        }
        url.append(HsqlEpsgDatabase.DATABASE_NAME);
        dataSource.setDatabase(url.toString());
        /*
         * If the temporary directory do not exists or can't be created, lets
         * the 'database' attribute unset. If the user do not set it explicitly
         * (for example through JNDI), an exception will be thrown when
         * 'getConnection()' will be invoked.
         */
        dataSource.setUser("SA"); // System administrator. No password.
        if (!dataExists(dataSource)) {
            generateData(dataSource);
            try {
                forceReadOnly(directory);
            } catch (IOException file) {
                throw (SQLException) new SQLException("Can't read the SQL script.").initCause(file);
                // TODO: inline cause when we will be allowed to target Java 6.
            }
        }
        return dataSource;
    }

