    /**
     * HSQL has created automatically an empty database. We need to populate it. Executes the SQL
     * scripts bundled in the JAR. In theory, each line contains a full SQL statement. For this
     * plugin however, we have compressed "INSERT INTO" statements using Compactor class in this
     * package.
     */
    private static void generateData(javax.sql.DataSource dataSource) throws SQLException {
        Connection connection = dataSource.getConnection();
        Logging.getLogger(HsqlEpsgDatabase.class)
                .config("Creating cached EPSG database."); // TODO: localize
        final Statement statement = connection.createStatement();
        try {
            final BufferedReader in =
                    new BufferedReader(
                            new InputStreamReader(
                                    HsqlEpsgDatabase.class.getResourceAsStream("EPSG.sql"),
                                    "ISO-8859-1"));
            StringBuilder insertStatement = null;
            String line;
            while ((line = in.readLine()) != null) {
                line = line.trim();
                final int length = line.length();
                if (length != 0) {
                    if (line.startsWith("INSERT INTO")) {
                        /*
                         * We are about to insert many rows into a single table.
                         * The row values appear in next lines; the current line
                         * should stop right after the VALUES keyword.
                         */
                        insertStatement = new StringBuilder(line);
                        continue;
                    }
                    if (insertStatement != null) {
                        /*
                         * We are about to insert a row. Prepend the "INSERT
                         * INTO" statement and check if we will have more rows
                         * to insert after this one.
                         */
                        final int values = insertStatement.length();
                        insertStatement.append(line);
                        final boolean hasMore = (line.charAt(length - 1) == ',');
                        if (hasMore) {
                            insertStatement.setLength(insertStatement.length() - 1);
                        }
                        line = insertStatement.toString();
                        insertStatement.setLength(values);
                        if (!hasMore) {
                            insertStatement = null;
                        }
                    }
                    statement.execute(line);
                }
            }
            in.close();
        } catch (IOException exception) {
            SQLException e = new SQLException("Can't read the SQL script."); // TODO: localize
            e.initCause(exception); // TODO: inline cause when we will be allowed to target Java 6.
            throw e;
        } finally {
            statement.close();
            connection.close();
        }
    }

