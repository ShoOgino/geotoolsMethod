    /**
     * Tests the creation of an operation from EPSG:4230 to EPSG:4326. They are the same CRS than
     * the one tested in {@link DefaultDataSourceTest#testTransformations}.
     */
    @Test
    public void testCreate() throws FactoryException {

        crsAuthFactory = ReferencingFactoryFinder.getCRSAuthorityFactory("EPSG", null);
        opFactory = ReferencingFactoryFinder.getCoordinateOperationFactory(null);
        CoordinateReferenceSystem sourceCRS =
                crsAuthFactory.createCoordinateReferenceSystem("4230");
        CoordinateReferenceSystem targetCRS =
                crsAuthFactory.createCoordinateReferenceSystem("4326");
        CoordinateOperation operation = opFactory.createOperation(sourceCRS, targetCRS);

        Assert.assertSame(sourceCRS, operation.getSourceCRS());
        Assert.assertSame(targetCRS, operation.getTargetCRS());
        Assert.assertSame(operation, opFactory.createOperation(sourceCRS, targetCRS));
        Assert.assertTrue(
                "Expected a buffered factory but got " + opFactory.getClass().getName(),
                opFactory instanceof BufferedCoordinateOperationFactory);
        Assert.assertTrue(
                "EPSG authority factory not found.",
                ((BufferedCoordinateOperationFactory) opFactory)
                                .getImplementationHints()
                                .get(Hints.COORDINATE_OPERATION_FACTORY)
                        instanceof AuthorityBackedFactory);
        Assert.assertEquals(
                "1612", getIdentifier(operation)); // See comment in DefaultDataSourceTest.
        Assert.assertEquals(1.0, AbstractCoordinateOperation.getAccuracy(operation), 1E-6);
        Assert.assertTrue(operation instanceof Transformation);
        /*
         * Tests a transformation not backed directly by an authority factory.
         * However, the inverse transform may exist in the authority factory.
         */
        sourceCRS = crsAuthFactory.createCoordinateReferenceSystem("4326");
        targetCRS = crsAuthFactory.createCoordinateReferenceSystem("2995");
        operation = opFactory.createOperation(sourceCRS, targetCRS);
        Assert.assertTrue(
                "This test needs an operation not backed by the EPSG factory.",
                operation.getIdentifiers().isEmpty());
        // Should contains exactly one transformations and an arbitrary number of conversions.
        Assert.assertTrue(operation instanceof ConcatenatedOperation);
        int count = 0;
        for (org.opengis.referencing.operation.SingleOperation singleOperation :
                ((ConcatenatedOperation) operation).getOperations()) {
            final CoordinateOperation op = (CoordinateOperation) singleOperation;
            if (op instanceof Transformation) {
                count++;
            } else {
                Assert.assertTrue(
                        "Expected Conversion but got "
                                + Classes.getShortName(AbstractCoordinateOperation.getType(op))
                                + ". ",
                        (op instanceof Conversion));
            }
        }
        Assert.assertEquals(
                "The coordinate operation should contains exactly 1 transformation", 1, count);
        Assert.assertTrue(AbstractCoordinateOperation.getAccuracy(operation) <= 25);
    }

