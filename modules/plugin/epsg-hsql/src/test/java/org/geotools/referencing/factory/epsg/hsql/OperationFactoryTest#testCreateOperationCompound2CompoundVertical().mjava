    /**
     * Tests findOperations method for CompoundCRS with a VerticalCRS component using the same datum
     * for the horizontal component. EPSG:5555 (Projected+Vertical) to EPSG:5554
     * (Projected+Vertical) using same datum. EPSG:25831+EPSG:5783 (Projected+Vertical) to EPSG:5554
     * (Projected+Vertical) using same datum.
     */
    @Test
    public void testCreateOperationCompound2CompoundVertical() throws Exception {

        CRSFactory crsFactory = ReferencingFactoryFinder.getCRSFactory(null);
        final CRSAuthorityFactory crsAuthFactory =
                ReferencingFactoryFinder.getCRSAuthorityFactory("EPSG", null);
        final CoordinateOperationFactory opFactory =
                ReferencingFactoryFinder.getCoordinateOperationFactory(null);

        CoordinateReferenceSystem sourceCRS =
                crsAuthFactory.createCoordinateReferenceSystem("EPSG:5555");
        CoordinateReferenceSystem targetCRS =
                crsAuthFactory.createCoordinateReferenceSystem("EPSG:5554");
        // direct order
        CoordinateOperation operation = opFactory.createOperation(sourceCRS, targetCRS);
        assertOperation(operation, sourceCRS, targetCRS);

        // try reverse order
        operation = opFactory.createOperation(targetCRS, sourceCRS);
        assertOperation(operation, targetCRS, sourceCRS);

        CoordinateReferenceSystem sourceHorizontalCRS =
                crsAuthFactory.createCoordinateReferenceSystem("EPSG:25831");
        CoordinateReferenceSystem sourceVerticalCRS =
                crsAuthFactory.createCoordinateReferenceSystem("EPSG:5783");
        Map<String, Object> properties = new HashMap<>();
        properties.put(
                IdentifiedObject.NAME_KEY,
                new NamedIdentifier(Citations.fromName("TEST"), "Compound 28530+5783"));
        CoordinateReferenceSystem[] elements =
                new CoordinateReferenceSystem[] {sourceHorizontalCRS, sourceVerticalCRS};
        sourceCRS = crsFactory.createCompoundCRS(properties, elements);

        // direct order
        operation = opFactory.createOperation(sourceCRS, targetCRS);
        assertOperation(operation, sourceCRS, targetCRS);

        // try reverse order
        operation = opFactory.createOperation(targetCRS, sourceCRS);
        assertOperation(operation, targetCRS, sourceCRS);
    }

