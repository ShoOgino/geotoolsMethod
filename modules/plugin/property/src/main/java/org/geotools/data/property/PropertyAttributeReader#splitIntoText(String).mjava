    /**
     * Split the provided text using | charater as a seperator.
     * <p>
     * This method respects the used of \ to "escape" a | character allowing
     * representations such as the following:<pre>
     * String example="text|example of escaped \\| character|text";
     * 
     * // represents: "text|example of escaped \| character|text"
     * String split=splitIntoText( example );</pre>
     * 
     * @param data Origional raw text as stored
     * @return data split using | as seperator
     * @throws DataSourceException if the information stored is inconsistent with the headered provided
     */
    private String[] splitIntoText(String data) throws DataSourceException {
        // return data.split("|", -1); // use -1 as a limit to include empty trailing spaces
        // return data.split("[.-^\\\\]\\|",-1); //use -1 as limit to include empty trailing spaces

        String split[] = new String[type.getAttributeCount()];
        int i = 0;
        StringBuilder item = new StringBuilder();
        for (String str : data.split("\\|",-1)) {
            if (i == type.getAttributeCount()) {
                // limit reached
                throw new DataSourceException("format error: expected " + text.length
                        + " attributes, stopped after finding " + i + ". [" + line
                        + "] split into " + Arrays.asList(text));
            }
            if (str.endsWith("\\")) {
//                String shorter = str.substring(0, str.length() - 1);
//                item.append(shorter);
                item.append(str);
                item.append("|");
            } else {
                item.append(str);
                split[i] = item.toString();

                i++;
                item = new StringBuilder();
            }
        }
        if (i < type.getAttributeCount()) {
            throw new DataSourceException("format error: expected " + type.getAttributeCount()
                    + " attributes, but only found " + i + ". [" + line + "] split into "
                    + Arrays.asList(text));
        }
        return split;
    }

