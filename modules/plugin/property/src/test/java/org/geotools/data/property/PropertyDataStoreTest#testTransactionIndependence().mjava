    @Test
    public void testTransactionIndependence() throws Exception {
        WKTReader2 wkt = new WKTReader2();
        SimpleFeatureType ROAD = store.getSchema("road");
        SimpleFeature chrisFeature =
                SimpleFeatureBuilder.build(
                        ROAD,
                        new Object[] {Integer.valueOf(5), "chris", wkt.read("POINT(6 6)")},
                        "fid5");

        SimpleFeatureStore roadAuto = (SimpleFeatureStore) store.getFeatureSource("road");

        SimpleFeatureStore roadFromClient1 = (SimpleFeatureStore) store.getFeatureSource("road");
        try (Transaction transaction1 = new DefaultTransaction("Transaction Used by Client 1");
                Transaction transaction2 = new DefaultTransaction("Transaction Used by Client 2")) {
            roadFromClient1.setTransaction(transaction1);

            SimpleFeatureStore roadFromClient2 =
                    (SimpleFeatureStore) store.getFeatureSource("road");

            roadFromClient2.setTransaction(transaction2);

            FilterFactory2 ff = (FilterFactory2) CommonFactoryFinder.getFilterFactory(null);
            Filter selectFid1 = ff.id(Collections.singleton(ff.featureId("fid1")));

            // Before we edit everything should be the same
            Assert.assertEquals("auto before", 5, roadAuto.getFeatures().size());
            Assert.assertEquals("client 1 before", 5, roadFromClient1.getFeatures().size());
            Assert.assertEquals("client 2 before", 5, roadFromClient2.getFeatures().size());
            Assert.assertEquals("client 1 before", 5, roadFromClient1.getCount(Query.ALL));
            Assert.assertEquals("client 2 before", 5, roadFromClient2.getCount(Query.ALL));

            ReferencedEnvelope bounds = roadAuto.getFeatures().getBounds();
            ReferencedEnvelope client1Bounds = roadFromClient1.getFeatures().getBounds();
            ReferencedEnvelope client2Bounds = roadFromClient2.getFeatures().getBounds();
            Assert.assertEquals("client 1 before", bounds, client1Bounds);
            Assert.assertEquals("client 2 before", bounds, client2Bounds);

            // Remove Feature with Fid1
            roadFromClient1.removeFeatures(selectFid1); // road1 removes fid1 on t1

            Assert.assertEquals(
                    "auto after client 1 removes fid1", 5, roadAuto.getFeatures().size());
            Assert.assertEquals(
                    "client 1 after client 1 removes fid1",
                    4,
                    roadFromClient1.getFeatures().size());
            Assert.assertEquals(
                    "client 2 after client 1 removes fid1",
                    5,
                    roadFromClient2.getFeatures().size());
            Assert.assertEquals(
                    "client 1 after client 1 removes fid1", 4, roadFromClient1.getCount(Query.ALL));
            Assert.assertEquals(
                    "client 2 after client 1 removes fid1", 5, roadFromClient2.getCount(Query.ALL));

            bounds = roadAuto.getFeatures().getBounds();
            client1Bounds = roadFromClient1.getFeatures().getBounds();
            client2Bounds = roadFromClient2.getFeatures().getBounds();
            assertNotEquals("client 1 after client 1 removes fid1", bounds, client1Bounds);
            Assert.assertEquals("client 2 after client 1 removes fid1", bounds, client2Bounds);

            roadFromClient2.addFeatures(
                    DataUtilities.collection(chrisFeature)); // road2 adds fid5 on t2
            Assert.assertEquals(
                    "auto after client 1 removes fid1 and client 2 adds fid5",
                    5,
                    roadAuto.getFeatures().size());
            Assert.assertEquals(
                    "client 1 after client 1 removes fid1 and client 2 adds fid5",
                    4,
                    roadFromClient1.getFeatures().size());
            Assert.assertEquals(
                    "client 2 after client 1 removes fid1 and client 2 adds fid5",
                    6,
                    roadFromClient2.getFeatures().size());

            bounds = roadAuto.getFeatures().getBounds();
            client1Bounds = roadFromClient1.getFeatures().getBounds();
            client2Bounds = roadFromClient2.getFeatures().getBounds();
            assertNotEquals(
                    "client 1 after client 1 removes fid1 and client 2 adds fid5",
                    bounds,
                    client1Bounds);
            assertNotEquals(
                    "client 2 after client 1 removes fid1 and client 2 adds fid5",
                    bounds,
                    client2Bounds);

            transaction1.commit();
            Assert.assertEquals(
                    "auto after client 1 commits removal of fid1 (client 2 has added fid5)",
                    4,
                    roadAuto.getFeatures().size());
            Assert.assertEquals(
                    "client 1 after commiting removal of fid1 (client 2 has added fid5)",
                    4,
                    roadFromClient1.getFeatures().size());
            Assert.assertEquals(
                    "client 2 after client 1 commits removal of fid1 (client 2 has added fid5)",
                    5,
                    roadFromClient2.getFeatures().size());

            bounds = roadAuto.getFeatures().getBounds();
            client1Bounds = roadFromClient1.getFeatures().getBounds();
            client2Bounds = roadFromClient2.getFeatures().getBounds();
            Assert.assertEquals(
                    "client 1 after commiting removal of fid1 (client 2 has added fid5)",
                    bounds,
                    client1Bounds);
            assertNotEquals(
                    "client 2 after client 1 commits removal of fid1 (client 2 has added "
                            + "fid5)",
                    bounds,
                    client2Bounds);

            transaction2.commit();
            Assert.assertEquals(
                    "auto after client 2 commits addition of fid5 (fid1 previously removed)",
                    5,
                    roadAuto.getFeatures().size());
            Assert.assertEquals(
                    "client 1 after client 2 commits addition of fid5 (fid1 previously removed)",
                    5,
                    roadFromClient1.getFeatures().size());
            Assert.assertEquals(
                    "client 2 after commiting addition of fid5 (fid1 previously removed)",
                    5,
                    roadFromClient2.getFeatures().size());

            bounds = roadAuto.getFeatures().getBounds();
            client1Bounds = roadFromClient1.getFeatures().getBounds();
            client2Bounds = roadFromClient2.getFeatures().getBounds();
            Assert.assertEquals(
                    "client 1 after commiting addition of fid5 (fid1 previously removed)",
                    bounds,
                    client1Bounds);
            Assert.assertEquals(
                    "client 2 after commiting addition of fid5 (fid1 previously removed)",
                    bounds,
                    client2Bounds);
        }
    }

