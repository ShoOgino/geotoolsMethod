    public RenderableSVG getRenderableSVG(Feature feature, Expression url, String format)
            throws Exception {
        // check we do support the declared format
        if (format == null || !formats.contains(format.toLowerCase())) return null;

        // grab the url
        String svgfile = url.evaluate(feature, String.class);
        if (svgfile == null) {
            throw new IllegalArgumentException(
                    "The specified expression could not be turned into an URL");
        } else {
            // just for validation parse the URL
            if (Converters.convert(svgfile, URL.class) == null) {
                throw new IllegalArgumentException("Invalid URL: " + svgfile);
            }
        }

        // turn the svg into a document and cache results
        RenderableSVG svg = glyphCache.get(svgfile);
        if (svg == null) {
            String parser = XMLResourceDescriptor.getXMLParserClassName();
            SAXSVGDocumentFactory f = new SAXSVGDocumentFactory(parser);
            Document doc;
            int queryIdx = svgfile.indexOf("?");
            if (svgfile.startsWith("file:/") && queryIdx > 0) {
                String localPath = svgfile.substring(0, queryIdx);
                doc = f.createDocument(localPath);
            } else {
                doc = f.createDocument(svgfile);
            }
            Map<String, String> parameters = getParametersFromUrl(svgfile);
            if (!parameters.isEmpty() || hasParameters(doc.getDocumentElement())) {
                replaceParameters(doc.getDocumentElement(), parameters);
            }
            svg = new RenderableSVG(doc);
            glyphCache.put(svgfile, svg);
        }

        return svg;
    }

