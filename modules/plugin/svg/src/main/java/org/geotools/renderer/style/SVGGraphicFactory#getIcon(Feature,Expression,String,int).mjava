    public Icon getIcon(Feature feature, Expression url, String format, int size) throws Exception {
        // check we do support the declared format
        if (format == null || !formats.contains(format.toLowerCase()))
            return null;

        // grab the url
        String svgfile = url.evaluate(feature, String.class);
        if (svgfile == null) {
            throw new IllegalArgumentException(
                    "The specified expression could not be turned into an URL");
        }
        // just for validation parse the URL
        URL svgUrl = Converters.convert(svgfile, URL.class);
        if (svgUrl == null) {
            throw new IllegalArgumentException(
                    "Invalid URL: " + svgfile);
        }

        // turn the svg into a document and cache results
        RenderableSVG svg = glyphCache.get(svgfile);
        if(svg == null) {
            String parser = XMLResourceDescriptor.getXMLParserClassName();
            SAXSVGDocumentFactory f = new SAXSVGDocumentFactory(parser) {
                @Override
                public InputSource resolveEntity(String publicId, String systemId)
                        throws SAXException {
                    InputSource source = super.resolveEntity(publicId, systemId);
                    if (source == null) {
                        try {
                            return resolver.resolveEntity(publicId, systemId);
                        } catch (IOException e) {
                            throw new SAXException(e);
                        }
                    }
                    return source;
                }
            };
            String svgUri = svgfile;
            // Remove parameters from file URLs, as it is not supported by Windows
            if ("file".equals(svgUrl.getProtocol()) && svgUrl.getQuery() != null) {
                int idx = svgfile.indexOf('?');
                if (idx > -1) {
                    svgUri = svgfile.substring(0, idx);
                }
            }
            Document doc = f.createDocument(svgUri);
            Map<String, String> parameters = getParametersFromUrl(svgfile);
            if(!parameters.isEmpty() || hasParameters(doc.getDocumentElement())) {
                replaceParameters(doc.getDocumentElement(), parameters);
            }
            svg = new RenderableSVG(doc);
            glyphCache.put(svgfile, svg);
        }

        return new SVGIcon(svg, size);
    }

