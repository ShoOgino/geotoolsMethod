    public void setRow(SeRow row) throws IOException {
        final int ncols = row.getNumColumns();
        if (this.nCols != ncols) {
            this.nCols = ncols;
            values = new Object[nCols];
            colStatusIndicator = new int[nCols];
        }

        int i = 0;
        int statusIndicator = 0;

        try {
            for (i = 0; i < nCols; i++) {
                statusIndicator = row.getIndicator(i);
                colStatusIndicator[i] = statusIndicator;

                if (statusIndicator != SeRow.SE_IS_ALREADY_FETCHED
                        && statusIndicator != SeRow.SE_IS_REPEATED_FEATURE
                        && statusIndicator != SeRow.SE_IS_NULL_VALUE) {
                    if (this.geometryFactory != null && this.geometryIndex == i) {
                        values[i] = row.getGeometry(geometryFactory, i);
                    } else {
                        values[i] = row.getObject(i);
                    }
                    /*
                     * ML: I'm adding checks here for the [n] clob object that are returned as null
                     * by getObject, but are reported as Strings. We can suck those out of
                     * ByteArrayStreams
                     */
                    if (values[i] == null) {
                        ByteArrayInputStream clobIn = null;
                        BufferedReader reader = null;
                        try {
                            int type = row.getColumnDef(i).getType();
                            if (type == SeColumnDefinition.TYPE_NCLOB) {
                                clobIn = row.getNClob(i);
                            } else if (type == SeColumnDefinition.TYPE_CLOB) {
                                /*
                                 * Warning! this line throws an NPE with the 9.2 java api, but works
                                 * with the 9.3 jars
                                 */
                                clobIn = row.getClob(i);
                            }
                            if (clobIn != null) {
                                reader =
                                        new BufferedReader(new InputStreamReader(clobIn, "UTF-16"));
                                StringBuffer buf = new StringBuffer();
                                String snip = reader.readLine();
                                while (snip != null) {
                                    if (buf.length() != 0) buf.append('\n');
                                    buf.append(snip);
                                    snip = reader.readLine();
                                }
                                if (buf.length() > 0) values[i] = buf.toString();
                            }
                        } catch (IOException e) {
                            LOGGER.log(
                                    Level.FINEST,
                                    "Issue decoding CLOB/NCLOB into a String:" + e,
                                    e);
                            // value will remain null
                        } finally {
                            if (reader != null) {
                                try {
                                    reader.close();
                                } catch (IOException ignore) {
                                    LOGGER.log(
                                            Level.FINEST,
                                            "Issue cleaning up after CLOB/NCLOB:" + ignore,
                                            ignore);
                                }
                            }
                        }
                    }
                }
            }
        } catch (SeException e) {
            throw new ArcSdeException("getting property #" + i, e);
        }
    }

