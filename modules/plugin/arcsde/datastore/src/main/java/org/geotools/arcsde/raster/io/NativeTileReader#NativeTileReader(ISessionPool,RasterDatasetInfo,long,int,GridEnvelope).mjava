    /**
     * Creates a {@link TileReader} that reads tiles out of ArcSDE for the given {@code
     * preparedQuery} and {@code SeRow} using the given {@code session}, in the native raster
     * format.
     *
     * <p>As for any object that receives a {@link ISession session}, the same rule applies: this
     * class is not responsible of {@link ISession#dispose() disposing} the session, but the calling
     * code is.
     *
     * @param preparedQuery the query stream to close when done
     * @param row
     * @param imageDimensions the image size, x and y are the offsets, width and height the actual
     *     width and height, used to ignore incomming pixel data as appropriate to fit the image
     *     dimensions
     * @param bitsPerSample
     * @param numberOfBands2
     * @param tileRange
     */
    NativeTileReader(
            final ISessionPool sessionPool,
            final RasterDatasetInfo rasterInfo,
            final long rasterId,
            final int pyramidLevel,
            final GridEnvelope tileRange) {
        this.sessionPool = sessionPool;
        this.rasterInfo = rasterInfo;
        this.rasterId = rasterId;
        this.pyramidLevel = pyramidLevel;
        this.requestedTiles = tileRange;

        final Dimension tileSize = rasterInfo.getTileDimension(rasterId);

        this.pixelsPerTile = tileSize.width * tileSize.height;

        this.nativeCellType = rasterInfo.getNativeCellType();
        this.bitsPerSample = nativeCellType.getBitsPerSample();
        this.tileDataLength =
                (int) Math.ceil(((double) pixelsPerTile * (double) bitsPerSample) / 8D);

        final RasterCellType targetCellType = rasterInfo.getTargetCellType(rasterId);
        this.dataFetcher = TileDataFetcher.getTileDataFetcher(this.nativeCellType, targetCellType);

        int rasterIndex = rasterInfo.getRasterIndex(rasterId);
        int maxTileX = rasterInfo.getNumTilesWide(rasterIndex, pyramidLevel) - 1;
        int maxTileY = rasterInfo.getNumTilesHigh(rasterIndex, pyramidLevel) - 1;

        if (tileRange.getLow(0) < 0
                || tileRange.getLow(1) < 0
                || tileRange.getHigh(0) > maxTileX
                || tileRange.getHigh(1) > maxTileY) {
            throw new IllegalArgumentException(
                    "Invalid tile range for raster #"
                            + rasterId
                            + "/"
                            + pyramidLevel
                            + ": "
                            + tileRange
                            + ". Valid range is 0.."
                            + maxTileX
                            + " 0.."
                            + maxTileY);
        }
    }

