    /**
     * Creates an in-memory representation of an ArcSDE Raster Pyramid. Basically it wraps the
     * supplide SeRasterAttr object and implements some convenience logic for extracting
     * information/ doing calculations with it.
     *
     * @param rasterAttributes the SeRasterAttr object for the raster of interest.
     * @param crs
     * @throws DataSourceException
     */
    RasterInfo(final SeRasterAttr rasterAttributes, final CoordinateReferenceSystem crs)
            throws DataSourceException {
        this.crs = crs;
        try {
            this.rasterId = Long.valueOf(rasterAttributes.getRasterId().longValue());
            // levels goes from 0 to N, maxLevel is the zero-based max index of levels
            final int numLevels = rasterAttributes.getMaxLevel() + 1;

            pyramidList = new ArrayList<PyramidLevelInfo>(numLevels);

            tileWidth = rasterAttributes.getTileWidth();
            tileHeight = rasterAttributes.getTileHeight();

            skipLevelone = rasterAttributes.skipLevelOne();

            for (int arcsdePyramidLevel = 0; arcsdePyramidLevel < numLevels; arcsdePyramidLevel++) {
                final int numTilesWide = rasterAttributes.getTilesPerRowByLevel(arcsdePyramidLevel);
                final int numTilesHigh = rasterAttributes.getTilesPerColByLevel(arcsdePyramidLevel);
                final GridEnvelope actualImageGridEnvelope;
                final GeneralEnvelope actualImageSpatialExtent;

                actualImageGridEnvelope =
                        computeImageGridRange(arcsdePyramidLevel, rasterAttributes);
                actualImageSpatialExtent =
                        computeImageSpatialExtent(
                                arcsdePyramidLevel, rasterAttributes, crs, actualImageGridEnvelope);

                addPyramidLevel(
                        arcsdePyramidLevel,
                        numTilesWide,
                        numTilesHigh,
                        actualImageGridEnvelope,
                        actualImageSpatialExtent);
            }

        } catch (SeException se) {
            throw new DataSourceException(se);
        }
    }

