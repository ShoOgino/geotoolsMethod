    /**
     * crates an SdeDataSource based on connection parameters held in <code>params</code>.
     *
     * <p>Expected parameters are:
     *
     * <ul>
     *   <li>{@code dbtype}: MUST be <code>"arcsde"</code>
     *   <li>{@code server}: machine name where ArcSDE is running
     *   <li>{@code port}: port number where ArcSDE listens for connections on server
     *   <li>{@code instance}: database instance name to connect to
     *   <li>{@code user}: database user name with at least reading privileges over SDE instance
     *   <li>{@code password}: database user password
     * </ul>
     *
     * <p>Optional parameters:
     *
     * <ul>
     *   <li>{@code pool.minConnections}: how many connections to open when the datastore is created
     *   <li>{@code pool.maxConnections}: max limit of connections for the connection pool
     *   <li>{@code pool.timeOut}: how many milliseconds to wait for a free connection before
     *       failing to execute a request
     *   <li>{@code version}: name of the ArcSDE version for the data store to work upon
     * </ul>
     *
     * @param params connection parameters
     * @return a new <code>SdeDataStore</code> pointing to the database defined by <code>params
     *     </code>
     * @throws java.io.IOException if something goes wrong creating the datastore.
     */
    public DataStore createDataStore(final Map<String, Serializable> params)
            throws java.io.IOException {
        if (JSDE_CLIENT_VERSION == JSDE_VERSION_DUMMY) {
            throw new DataSourceException("Can't connect to ArcSDE with the dummy jar.");
        }

        ArcSDEDataStore sdeDStore = null;
        ArcSDEDataStoreConfig config = new ArcSDEDataStoreConfig(params);
        sdeDStore = createDataStore(config);

        ViewRegisteringFactoryHelper.registerSqlViews(sdeDStore, params);

        return sdeDStore;
    }

