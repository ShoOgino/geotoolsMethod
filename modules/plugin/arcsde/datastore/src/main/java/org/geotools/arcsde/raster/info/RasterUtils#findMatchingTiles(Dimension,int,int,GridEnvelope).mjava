    /**
     * Returns the grid range specifying the matching tiles for a given pyramid level and grid
     * extent specifying the overlapping area to request in the level's pixel space.
     *
     * @param pixelRange
     * @param tilesHigh
     * @param tilesWide
     * @param tileSize
     * @param numTilesHigh
     * @param numTilesWide
     * @param pixelRange
     * @param level
     * @return a grid range holding the coordinates in tile space that fully covers the requested
     *     pixel range for the given pyramid level, or a negative area range
     */
    private static GridEnvelope findMatchingTiles(
            final Dimension tileSize,
            int numTilesWide,
            int numTilesHigh,
            final GridEnvelope pixelRange) {

        final int minPixelX = pixelRange.getLow(0);
        final int minPixelY = pixelRange.getLow(1);

        int minTileX = (int) Math.floor(minPixelX / tileSize.getWidth());
        int minTileY = (int) Math.floor(minPixelY / tileSize.getHeight());

        int numTilesX = (int) Math.ceil(pixelRange.getSpan(0) / tileSize.getWidth());
        int numTilesY = (int) Math.ceil(pixelRange.getSpan(1) / tileSize.getHeight());

        int maxTiledX = (minTileX + numTilesX) * tileSize.width;
        int maxTiledY = (minTileY + numTilesY) * tileSize.height;

        if (maxTiledX < pixelRange.getHigh(0) && (minTileX + numTilesX) < numTilesWide) {
            numTilesX++;
        }

        if (maxTiledY < pixelRange.getHigh(1) && (minTileY + numTilesY) < numTilesHigh) {
            numTilesY++;
        }

        GridEnvelope2D matchingTiles = new GridEnvelope2D(minTileX, minTileY, numTilesX, numTilesY);
        return matchingTiles;
    }

