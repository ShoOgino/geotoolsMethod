    /**
     * Creates the given featuretype in the underlying ArcSDE database.
     * <p>
     * The common use case to create an ArcSDE layer is to setup the SeTable object with all the
     * non-geometry attributes first, then create the SeLayer and set the geometry column name and
     * its properties. This approach brings a nice problem, since we need to create the attributes
     * in exactly the same order as specified in the passed FeatureType, which means that the
     * geometry attribute needs not to be the last one.
     * </p>
     * <p>
     * To avoid this, the following workaround is performed: instead of creating the schema as
     * described above, we will first create the SeTable with a single, temporary column, since it
     * is not possible to create a table without columns. The, we will iterate over the
     * AttributeTypes and add them as they appear using
     * <code>SeTable.addColumn(SeColumnDefinition)</code>. But if we found that the current
     * AttributeType is geometric, instead of adding the column we just create the SeLayer object.
     * This way, the geometric attribute is inserted at the end, and then we keep iterating and
     * adding the rest of the columns. Finally, the first column is removed, since it was temporary
     * (note that I advertise it, it is a _workaround_).
     * </p>
     * <p>
     * Sometimes some 'extra' information is required to correctly create the underlying ArcSDE
     * SeLayer. For instance, a specific configuration keyword might be required to be used (instead
     * of "DEFAULTS"), or a particular column might need to be marked as the rowid column for the
     * featuretype. A non-null <code>hints</code> parameter contains a mapping from a list of
     * well-known {@link java.lang.String} keys to values. The possible keys are listed in the table
     * below. keys with any other values are ignored.
     * <table>
     * <tr>
     * <td>key name</td>
     * <td>key value type</td>
     * <td>default value (if applicable)</td>
     * </tr>
     * <tr>
     * <td>configuration.keyword</td>
     * <td>{@link java.lang.String}</td>
     * <td>"DEFAULTS"</td>
     * </tr>
     * <tr>
     * <td>rowid.column.type</td>
     * <td>{@link java.lang.String} - "NONE", "USER" and "SDE" are the only valid values</td>
     * <td>"NONE"</td>
     * </tr>
     * <tr>
     * <td>rowid.column.name</td>
     * <td>{@link java.lang.String}</td>
     * <td>null</td>
     * </tr>
     * </p>
     * 
     * @param featureType
     *            the feature type containing the name, attributes and coordinate reference system
     *            of the new ArcSDE layer.
     * @param hints
     *            A map containing extra ArcSDE-specific hints about how to create the underlying
     *            ArcS DE SeLayer and SeTable objects from this FeatureType.
     * @param session
     *            connection to use in order to create the layer and table on the server. The
     *            connection shall be managed by this method caller.
     * @throws IOException
     *             see <code>throws DataSourceException</code> bellow
     * @throws IllegalArgumentException
     *             if the passed feature type does not contains at least one geometric attribute, or
     *             if the type name contains '.' (dots).
     * @throws NullPointerException
     *             if <code>featureType</code> is <code>null</code>
     * @throws DataSourceException
     *             if there is <b>not an available (free) connection </b> to the ArcSDE instance(in
     *             that case maybe you need to increase the maximun number of connections for the
     *             connection pool), or an SeException exception is catched while creating the
     *             feature type at the ArcSDE instance (e.g. a table with that name already exists).
     */
    public static void createSchema(final SimpleFeatureType featureType,
            final Map<String, String> hints, final ISession session) throws IOException,
            IllegalArgumentException {

        if (featureType == null) {
            throw new NullPointerException("You have to provide a FeatureType instance");
        }

        final Command<Void> createSchemaCmd = new Command<Void>() {
            @Override
            public Void execute(ISession session, SeConnection connection) throws SeException,
                    IOException {

                final String[] typeNameParts = featureType.getTypeName().split("\\.");
                final String unqualifiedTypeName = typeNameParts[typeNameParts.length - 1];

                // Create a new SeTable/SeLayer with the specified attributes....
                SeTable table = null;
                SeLayer layer = null;

                // flag to know if the table was created by us when catching an
                // exception.
                boolean tableCreated = false;

                // table/layer creation hints information
                int rowIdType = SeRegistration.SE_REGISTRATION_ROW_ID_COLUMN_TYPE_NONE;
                String rowIdColumn = null;
                String configKeyword = "DEFAULTS";
                if (hints.containsKey("configuration.keyword")) {
                    configKeyword = String.valueOf(hints.get("configuration.keyword"));
                }
                if (hints.get("rowid.column.type") instanceof String) {
                    String rowIdStr = (String) hints.get("rowid.column.type");
                    if (rowIdStr.equalsIgnoreCase("NONE")) {
                        rowIdType = SeRegistration.SE_REGISTRATION_ROW_ID_COLUMN_TYPE_NONE;
                    } else if (rowIdStr.equalsIgnoreCase("USER")) {
                        rowIdType = SeRegistration.SE_REGISTRATION_ROW_ID_COLUMN_TYPE_USER;
                    } else if (rowIdStr.equalsIgnoreCase("SDE")) {
                        rowIdType = SeRegistration.SE_REGISTRATION_ROW_ID_COLUMN_TYPE_SDE;
                    } else {
                        throw new DataSourceException(
                                "createSchema hint 'rowid.column.type' must be one of 'NONE', 'USER' or 'SDE'");
                    }
                }
                if (hints.get("rowid.column.name") instanceof String) {
                    rowIdColumn = (String) hints.get("rowid.column.name");
                }

                // placeholder to a catched exception to know in the finally block
                // if we should cleanup the crap we left in the database
                Exception error = null;

                try {
                    // create a table with provided username
                    String qualifiedName = null;

                    if (unqualifiedTypeName.indexOf('.') == -1) {
                        // Use the already parsed name (unqualifiedTypeName)
                        qualifiedName = connection.getUser() + "." + unqualifiedTypeName; // featureType.getTypeName();
                        LOGGER.finer("new full qualified type name: " + qualifiedName);
                    } else {
                        qualifiedName = unqualifiedTypeName;
                        LOGGER.finer("full qualified type name provided by user: " + qualifiedName);
                    }

                    layer = new SeLayer(connection);
                    layer.setTableName(qualifiedName);
                    layer.setCreationKeyword(configKeyword);

                    final String HACK_COL_NAME = "gt_workaround_col_";

                    table = createSeTable(connection, qualifiedName, HACK_COL_NAME, configKeyword);
                    tableCreated = true;

                    final List<AttributeDescriptor> atts = featureType.getAttributeDescriptors();
                    AttributeDescriptor currAtt;

                    for (Iterator<AttributeDescriptor> it = atts.iterator(); it.hasNext();) {
                        currAtt = it.next();

                        if (currAtt instanceof GeometryDescriptor) {
                            GeometryDescriptor geometryAtt = (GeometryDescriptor) currAtt;
                            createSeLayer(layer, qualifiedName, geometryAtt);
                        } else {
                            LOGGER.fine("Creating column definition for " + currAtt);

                            SeColumnDefinition newCol = ArcSDEAdapter
                                    .createSeColumnDefinition(currAtt);

                            // /////////////////////////////////////////////////////////////
                            // HACK!!!!: this hack is just to avoid the error that
                            // occurs //
                            // when adding a column wich is not nillable. Need to fix
                            // this//
                            // but by now it conflicts with the requirement of creating
                            // //
                            // the schema with the correct attribute order. //
                            // /////////////////////////////////////////////////////////////
                            newCol = new SeColumnDefinition(newCol.getName(), newCol.getType(),
                                    newCol.getSize(), newCol.getScale(), true);

                            // /////////////////////////////////////////////////////////////
                            // END of horrible HACK //
                            // /////////////////////////////////////////////////////////////
                            LOGGER.fine("Adding column " + newCol.getName()
                                    + " to the actual table.");
                            table.addColumn(newCol);
                        }
                    }

                    LOGGER.fine("deleting the 'workaround' column...");
                    table.dropColumn(HACK_COL_NAME);

                    LOGGER.fine("setting up table registration with ArcSDE...");
                    SeRegistration reg = new SeRegistration(connection, table.getName());
                    if (rowIdColumn != null) {
                        LOGGER.fine("setting rowIdColumnName to " + rowIdColumn + " in table "
                                + reg.getTableName());
                        reg.setRowIdColumnName(rowIdColumn);
                        reg.setRowIdColumnType(rowIdType);
                        reg.alter();
                        reg = null;
                    }

                    LOGGER.fine("Schema correctly created: " + featureType);

                } catch (SeException e) {
                    LOGGER.log(Level.WARNING, e.getSeError().getErrDesc(), e);
                    throw e;
                } finally {
                    if ((error != null) && tableCreated) {
                        // TODO: remove table if created and then failed
                    }
                }
                return null;
            }
        };

        session.issue(createSchemaCmd);
    }

