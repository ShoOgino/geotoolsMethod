    /**
     * Crops the image representing a full tile set to the required dimension and returns it, but
     * keeps minx and miny being zero.
     *
     * @param fullTilesRaster
     * @param tiledImageGridRange
     * @param cropTo
     * @return
     */
    private void cropToRequiredDimension(final ImageWorker worker, final GridEnvelope cropTo) {
        GridEnvelope2D crop =
                new GridEnvelope2D(
                        cropTo.getLow(0), cropTo.getLow(1), cropTo.getSpan(0), cropTo.getSpan(1));
        RenderedImage fullTilesRaster = worker.getRenderedImage();
        GridEnvelope2D origDim =
                new GridEnvelope2D(
                        fullTilesRaster.getMinX(),
                        fullTilesRaster.getMinY(),
                        fullTilesRaster.getWidth(),
                        fullTilesRaster.getHeight());
        if (!origDim.contains(crop)) {
            throw new IllegalArgumentException(
                    "Original image ("
                            + origDim
                            + ") does not contain desired dimension ("
                            + crop
                            + ")");
        } else if (origDim.equals(crop)) {
            if (LOGGER.isLoggable(Level.FINER)) {
                LOGGER.finer(
                        "No need to crop image, full tiled dimension and target one "
                                + "do match: original: "
                                + fullTilesRaster.getWidth()
                                + "x"
                                + fullTilesRaster.getHeight()
                                + ", target: "
                                + crop.getSpan(0)
                                + "x"
                                + crop.getSpan(1));
            }
            return;
        }

        worker.crop(
                Float.valueOf(crop.getLow(0)), // x origin for each band
                Float.valueOf(crop.getLow(1)), // y origin for each band
                Float.valueOf(crop.getSpan(0)), // width for each band
                Float.valueOf(crop.getSpan(1))); // height for each band

        RenderedImage image = worker.getRenderedImage();

        assert crop.getLow(0) == image.getMinX();
        assert crop.getLow(1) == image.getMinY();
        assert crop.getSpan(0) == image.getWidth();
        assert crop.getSpan(1) == image.getHeight();
    }

