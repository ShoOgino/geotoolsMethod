    /**
     * Returns the row index and column names for all the mutable properties in the sde layer. That
     * is, those properties whose type is not {@link
     * SeRegistration#SE_REGISTRATION_ROW_ID_COLUMN_TYPE_SDE}, which are used as row id columns
     * managed by arcsde.
     *
     * @return a map keyed by mutable column name and valued by the index of the mutable column name
     *     in the SeTable structure
     * @throws IOException
     * @throws NoSuchElementException
     */
    private LinkedHashMap<Integer, String> getUpdatableColumnNames()
            throws NoSuchElementException, IOException {
        if (mutableColumnNames == null) {
            // We are going to inspect the column defintions in order to
            // determine which attributes are actually mutable...
            final String typeName = this.featureType.getTypeName();
            final SeColumnDefinition[] columnDefinitions = session.describe(typeName);
            final String shapeAttributeName;
            if (this.featureType.getGeometryDescriptor() == null) {
                // no geometry column, it's a non sptial registered table
                shapeAttributeName = null;
            } else {
                shapeAttributeName =
                        session.issue(
                                new Command<String>() {
                                    @Override
                                    public String execute(ISession session, SeConnection connection)
                                            throws SeException, IOException {
                                        SeLayer layer = session.getLayer(typeName);
                                        return layer.getShapeAttributeName(
                                                SeLayer.SE_SHAPE_ATTRIBUTE_FID);
                                    }
                                });
            }

            // use LinkedHashMap to respect column order
            LinkedHashMap<Integer, String> columnList = new LinkedHashMap<Integer, String>();

            SeColumnDefinition columnDefinition;
            String columnName;
            int usedIndex = 0;
            for (int actualIndex = 0; actualIndex < columnDefinitions.length; actualIndex++) {
                columnDefinition = columnDefinitions[actualIndex];
                columnName = columnDefinition.getName();
                // this is an attribute added to the featuretype
                // solely to support FIDs. It isn't an actual attribute
                // on the underlying SDE table, and as such it can't
                // be written to. Skip it!
                if (columnName.equals(shapeAttributeName)) {
                    continue;
                }

                // ignore SeColumns for which we don't have a known mapping
                final int sdeType = columnDefinition.getType();
                if (SeColumnDefinition.TYPE_SHAPE != sdeType
                        && null == ArcSDEAdapter.getJavaBinding(Integer.valueOf(sdeType))) {
                    continue;
                }

                // We need to exclude read only types from the set of "mutable"
                // column names.
                final short rowIdType = columnDefinition.getRowIdType();
                if (SeRegistration.SE_REGISTRATION_ROW_ID_COLUMN_TYPE_SDE == rowIdType) {
                    continue;
                }

                columnList.put(Integer.valueOf(usedIndex), columnName);
                // only increment usedIndex if we added a mutable column to
                // the list
                usedIndex++;
            }
            this.mutableColumnNames = columnList;
        }

        return this.mutableColumnNames;
    }

