    /**
     * Commits the transaction and returns the connection to the pool. A new one will be grabbed
     * when needed.
     *
     * <p>Preconditions:
     *
     * <ul>
     *   <li>{@link #setTransaction(Transaction)} already called with non <code>null</code>
     *       argument.
     *   <li>
     * </ul>
     */
    public void commit() throws IOException {
        failIfClosed();
        final ISession session = this.session;

        final Command<Void> commitCommand =
                new Command<Void>() {
                    @Override
                    public Void execute(ISession session, SeConnection connection)
                            throws SeException, IOException {

                        try {
                            session.commitTransaction();
                            session.startTransaction();
                        } catch (IOException se) {
                            LOGGER.log(Level.WARNING, se.getMessage(), se);
                            throw se;
                        }
                        return null;
                    }
                };

        try {
            session.issue(commitCommand);
        } catch (IOException e) {
            throw e;
        }
    }

