    /**
     * Returns the attribute names of the FeatureType passed to the constructor.
     * 
     * @param the
     *            feature type containing the properties the client code is interested in. May well
     *            be a subset of the full set of attributes in the SeLayer
     * @return the list of property names to actually fetch for a given feature type, taking into
     *         account the ones that possibly need to be fetched to generate the feature id, even if
     *         they're not part of the schema.
     * @throws IOException
     *             if an arcsde exception is thrown somehow.
     */
    public String[] getPropertiesToFetch(SimpleFeatureType schema) throws IOException {

        List<String> attNames = new ArrayList<String>(schema.getAttributeCount() + 1);

        // /List attDescriptors = Descriptors.nodes(schema.getDescriptor());
        List<AttributeDescriptor> attDescriptors = schema.getAttributeDescriptors();

        for (AttributeDescriptor property : attDescriptors) {
            attNames.add(property.getLocalName());
        }
        String fidColumn = getFidColumn();
        int fidIndex = attNames.indexOf(fidColumn);
        if (fidColumn != null && fidIndex == -1) {
            attNames.add(fidColumn);
            fidIndex = attNames.size() - 1;
        }
        setColumnIndex(fidIndex);

        return attNames.toArray(new String[attNames.size()]);
    }

