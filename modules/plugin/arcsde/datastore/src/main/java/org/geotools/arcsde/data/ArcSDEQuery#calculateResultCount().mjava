    /**
     * if the query has been parsed as just a where clause filter, or has no filter at all, the
     * result count calculation is optimized by selecting a <code>count()</code> single row. If the
     * filter involves any kind of spatial filter, such as BBOX, the calculation can't be optimized
     * by this way, because the ArcSDE Java API throws a <code>"DATABASE LEVEL
     * ERROR OCURRED"</code> exception. So, in this case, a query over the shape field is made and
     * the result is traversed counting the number of rows inside a while loop
     * 
     */
    public int calculateResultCount() throws IOException, UnsupportedOperationException {

        final SimpleFeatureType schema = this.schema;

        final String colName;
        if (fidReader.getFidColumn() == null) {
            colName = schema.getDescriptor(0).getLocalName();
        } else {
            colName = fidReader.getFidColumn();
        }
        final SeQueryInfo qInfo = filters.getQueryInfo(new String[] { colName });

        final SeFilter[] spatialFilters = filters.getSpatialFilters();

        final Command<Integer> countCmd = new Command<Integer>() {
            @Override
            public Integer execute(ISession session, SeConnection connection) throws SeException,
                    IOException {

                SeQuery query = new SeQuery(connection);

                try {
                    versioningHandler.setUpStream(session, query);

                    if (spatialFilters != null && spatialFilters.length > 0) {

                        final boolean calcMasks = true;// use the spatial query to calculate
                        // statistics.
                        final short searchOrder = SeQuery.SE_OPTIMIZE;
                        query.setSpatialConstraints(searchOrder, calcMasks, spatialFilters);

                        final SeDBMSInfo dbmsInfo = connection.getDBMSInfo();
                        final boolean unsupported = versioningHandler != ArcSdeVersionHandler.NONVERSIONED_HANDLER
                                && dbmsInfo.dbmsId == SeDBMSInfo.SE_DBMS_IS_ORACLE;

                        if (unsupported) {
                            LOGGER.fine("ArcSDE on Oracle can't calculate count statistics "
                                    + "on versioned layers with spatial filters");
                            /*
                             * Despite the FeatureSource.getCount() contract saying it's ok to
                             * return -1 if count is too expensive to calculate, the GeoServer
                             * codebase is plagued of FeatureCollection.size() calls depending on
                             * actual result counts or some operations don't work at all. return -1;
                             */
                        }

                        query.prepareQueryInfo(qInfo);
                        query.execute();
                        int count = 0;
                        while (query.fetch() != null) {
                            count++;
                        }
                        return count;
                    }

                    final int defaultMaxDistinctValues = 0;
                    final SeTable.SeTableStats tableStats;
                    tableStats = query.calculateTableStatistics(colName,
                            SeTable.SeTableStats.SE_COUNT_STATS, qInfo, defaultMaxDistinctValues);

                    int actualCount = tableStats.getCount();
                    return new Integer(actualCount);
                } finally {
                    query.close();
                }
            }
        };

        final Integer count = session.issue(countCmd);
        return count.intValue();
    }

