    /**
     * if the query has been parsed as just a where clause filter, or has no filter at all, the
     * result count calculation is optimized by selecting a <code>count()</code> single row. If the
     * filter involves any kind of spatial filter, such as BBOX, the calculation can't be optimized
     * by this way, because the ArcSDE Java API throws a <code>"DATABASE LEVEL
     * ERROR OCURRED"</code> exception. So, in this case, a query over the shape field is made and
     * the result is traversed counting the number of rows inside a while loop
     * 
     */
    public int calculateResultCount() throws IOException, UnsupportedOperationException {

        final SimpleFeatureType schema = this.schema;

        final List <String> colNames = new ArrayList<String>(2);
        {
            String fidAtt;
            if (fidReader.getFidColumn() == null) {
                fidAtt = schema.getDescriptor(0).getLocalName();
            } else {
                fidAtt = fidReader.getFidColumn();
            }
            colNames.add(fidAtt);
        }
        if (null != schema.getGeometryDescriptor()) {
            String geomCol = schema.getGeometryDescriptor().getLocalName();
            //geomCol = filters.getSqlEncoder().getColumnDefinition(geomCol);
            colNames.add(geomCol);
        }
        
        final SeQueryInfo qInfo = filters.getQueryInfo(colNames.toArray(new String[colNames.size()]));

        final SeFilter[] spatialFilters = filters.getSpatialFilters();

        final Command<Integer> countCmd = new Command<Integer>() {
            @Override
            public Integer execute(ISession session, SeConnection connection) throws SeException,
                    IOException {

                final SeQueryInfo queryInfo = qInfo;

                SeQuery query = new SeQuery(connection);

                try {
                    versioningHandler.setUpStream(session, query);

                    if (spatialFilters != null && spatialFilters.length > 0) {

                        final boolean calcMasks = true;// use the spatial query to calculate
                        // statistics.
                        final short searchOrder = SeQuery.SE_OPTIMIZE;
                        query.setSpatialConstraints(searchOrder, calcMasks, spatialFilters);

                        final SeDBMSInfo dbmsInfo = connection.getDBMSInfo();
                        final boolean unsupported = versioningHandler != ArcSdeVersionHandler.NONVERSIONED_HANDLER
                                && dbmsInfo.dbmsId == SeDBMSInfo.SE_DBMS_IS_ORACLE;

                        if (unsupported) {
                            LOGGER.fine("ArcSDE on Oracle can't calculate count statistics "
                                    + "on versioned layers with spatial filters");
                            /*
                             * Despite the FeatureSource.getCount() contract saying it's ok to
                             * return -1 if count is too expensive to calculate, the GeoServer
                             * codebase is plagued of FeatureCollection.size() calls depending on
                             * actual result counts or some operations don't work at all. return -1;
                             */

                            query.prepareQueryInfo(queryInfo);
                            query.execute();
                            int count = 0;
                            while (query.fetch() != null) {
                                count++;
                            }
                            return count;
                        }
                    }

                    final int defaultMaxDistinctValues = 0;
                    final SeTable.SeTableStats tableStats;
                    final String statsCol = colNames.get(0);
                    tableStats = query.calculateTableStatistics(statsCol,
                            SeTable.SeTableStats.SE_COUNT_STATS, queryInfo, defaultMaxDistinctValues);

                    int actualCount = tableStats.getCount();
                    return new Integer(actualCount);
                } finally {
                    query.close();
                }
            }
        };

        final Integer count = session.issue(countCmd);
        return count.intValue();
    }

