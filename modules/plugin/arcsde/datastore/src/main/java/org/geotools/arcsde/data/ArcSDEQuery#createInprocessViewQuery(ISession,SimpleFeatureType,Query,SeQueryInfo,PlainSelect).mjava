    /**
     * Creates a query to be executed over an inprocess view (a view defined by a SQL SELECT
     * statement at the datastore configuration)
     *
     * @return the newly created ArcSDEQuery.
     * @throws IOException see <i>throws DataSourceException</i> bellow.
     * @see ArcSDEDataStore#registerView(String, PlainSelect)
     */
    public static ArcSDEQuery createInprocessViewQuery(
            final ISession session,
            final SimpleFeatureType fullSchema,
            final Query query,
            final SeQueryInfo definitionQuery,
            final PlainSelect viewSelectStatement)
            throws IOException {

        final Filter filter = query.getFilter();
        final FIDReader fidReader = FIDReader.NULL_READER;

        // the first table has to be the main layer
        final SeSqlConstruct construct;
        try {
            construct = definitionQuery.getConstruct();
        } catch (SeException e) {
            throw new ArcSdeException("shouldn't happen: " + e.getMessage(), e);
        }
        final String[] tables = construct.getTables();
        String layerName = tables[0];
        // @REVISIT: HACK HERE!, look how to get rid of alias in
        // query info, or
        // better stop using queryinfo as definition query and use
        // the PlainSelect,
        // then construct the query info dynamically when needed?
        if (layerName.indexOf(" AS") > 0) {
            layerName = layerName.substring(0, layerName.indexOf(" AS"));
        }
        final SeTable sdeTable = session.getTable(layerName);
        final SeLayer sdeLayer;
        if (fullSchema.getGeometryDescriptor() == null) {
            sdeLayer = null;
        } else {
            sdeLayer = session.getLayer(layerName);
        }

        // create the set of filters to work over
        final ArcSDEQuery.FilterSet filters =
                new ArcSDEQuery.FilterSet(
                        sdeTable,
                        sdeLayer,
                        filter,
                        fullSchema,
                        definitionQuery,
                        viewSelectStatement,
                        fidReader,
                        session);

        final Filter unsupportedFilter = filters.getUnsupportedFilter();
        final String[] queryProperties = query.getPropertyNames();
        final SimpleFeatureType querySchema =
                getQuerySchema(queryProperties, unsupportedFilter, fullSchema);

        final ArcSDEQuery sdeQuery;
        sdeQuery =
                new ArcSDEQuery(
                        session,
                        querySchema,
                        filters,
                        null,
                        fidReader,
                        ArcSdeVersionHandler.NONVERSIONED_HANDLER);
        return sdeQuery;
    }

