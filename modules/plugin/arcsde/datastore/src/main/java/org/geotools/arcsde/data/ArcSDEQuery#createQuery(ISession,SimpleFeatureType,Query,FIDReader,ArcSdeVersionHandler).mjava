    /**
     * Creates a Query to be executed over a registered ArcSDE layer (whether it is from a table or
     * a spatial view).
     * 
     * @param session
     *            the session the query works over. As its managed by the calling code its the
     *            calling code responsibility to close it when done.
     * @param fullSchema
     * @param query
     * @param isMultiversioned
     *            whether the table is versioned, if so, the default version and current state will
     *            be used for the SeQuery
     * @return
     * @throws IOException
     */
    public static ArcSDEQuery createQuery(final ISession session,
            final SimpleFeatureType fullSchema, final Query query, final FIDReader fidReader,
            final ArcSdeVersionHandler versioningHandler) throws IOException {

        Filter filter = query.getFilter();

        LOGGER.fine("Creating new ArcSDEQuery");

        final String typeName = fullSchema.getTypeName();
        final SeTable sdeTable = session.getTable(typeName);
        final SeLayer sdeLayer;
        if (fullSchema.getGeometryDescriptor() == null) {
            sdeLayer = null;
        } else {
            sdeLayer = session.getLayer(typeName);
        }
        // create the set of filters to work over
        final ArcSDEQuery.FilterSet filters = new ArcSDEQuery.FilterSet(sdeTable, sdeLayer, filter,
                fullSchema, null, null, fidReader, session);

        final Filter unsupportedFilter = filters.getUnsupportedFilter();
        final String[] queryProperties = query.getPropertyNames();
        final SimpleFeatureType querySchema = getQuerySchema(queryProperties, unsupportedFilter,
                fullSchema);

        final String sortByClause = buildSortByClause(fullSchema, query.getSortBy(), fidReader);
        final ArcSDEQuery sdeQuery;
        sdeQuery = new ArcSDEQuery(session, querySchema, filters, sortByClause, fidReader,
                versioningHandler);
        return sdeQuery;
    }

