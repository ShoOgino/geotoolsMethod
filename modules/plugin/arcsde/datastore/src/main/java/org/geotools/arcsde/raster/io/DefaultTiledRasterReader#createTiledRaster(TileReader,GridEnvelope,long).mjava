    /**
     * Creates an image representing the whole pyramid level but with a tile reader ready to read
     * only the required tiles, the calling code is responsible for cropping it as needed
     *
     * @param tileReader
     * @param tileRange
     * @param rasterId
     * @return
     * @throws IOException
     */
    private RenderedImage createTiledRaster(
            final TileReader tileReader, final GridEnvelope tileRange, final long rasterId)
            throws IOException {
        // Prepare temporary colorModel and sample model, needed to build the final
        // ArcSDEPyramidLevel level;
        final ColorModel colorModel;
        final SampleModel sampleModel;
        final int tileWidth = rasterInfo.getTileWidth(rasterId);
        final int tileHeight = rasterInfo.getTileHeight(rasterId);
        final int rasterIndex = rasterInfo.getRasterIndex(rasterId);
        final int pyramidLevel = tileReader.getPyramidLevel();
        final int numTilesWide = rasterInfo.getNumTilesWide(rasterIndex, pyramidLevel);
        final int numTilesHigh = rasterInfo.getNumTilesHigh(rasterIndex, pyramidLevel);
        final int tiledImageWidth = numTilesWide * tileWidth;
        final int tiledImageHeight = numTilesHigh * tileHeight;
        {
            final ImageTypeSpecifier fullImageSpec = rasterInfo.getRenderedImageSpec(rasterId);
            colorModel = fullImageSpec.getColorModel();
            sampleModel =
                    fullImageSpec
                            .getSampleModel()
                            .createCompatibleSampleModel(tileWidth, tileHeight);
        }

        {
            RenderedImage image;
            {
                int minX = 0; // gridRange.x;
                int minY = 0; // gridRange.y;
                int width = tiledImageWidth; // gridRange.width;
                int height = tiledImageHeight; // gridRange.height;
                int tileGridXOffset = 0;
                int tileGridYOffset = 0;
                SampleModel tileSampleModel = sampleModel;

                image =
                        new ArcSDEPlanarImage(
                                tileReader,
                                minX,
                                minY,
                                width,
                                height,
                                tileGridXOffset,
                                tileGridYOffset,
                                tileSampleModel,
                                colorModel);
            }

            return image;
        }
    }

