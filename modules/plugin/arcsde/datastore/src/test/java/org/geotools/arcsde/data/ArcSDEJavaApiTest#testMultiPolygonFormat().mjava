    /**
     * Ensures a multipolygon SeShape behaves as expected.
     *
     * @throws SeException if it is thrown while constructing the SeShape
     */
    @Test
    public void testMultiPolygonFormat() throws SeException {
        /*
         * Generate an area shape composed of two polygons, the first with a hole
         */
        int numPts = 18;
        int numParts = 2;
        int[] partOffsets = new int[numParts];
        partOffsets[0] = 0;
        partOffsets[1] = 14;

        SDEPoint[] ptArray = new SDEPoint[numPts];

        // part one
        ptArray[0] = new SDEPoint(100, 1100);
        ptArray[1] = new SDEPoint(1500, 1100);
        ptArray[2] = new SDEPoint(1500, 1900);
        ptArray[3] = new SDEPoint(100, 1900);
        ptArray[4] = new SDEPoint(100, 1100);

        // Hole - sub part of part one
        ptArray[5] = new SDEPoint(200, 1200);
        ptArray[6] = new SDEPoint(200, 1500);
        ptArray[7] = new SDEPoint(500, 1500);
        ptArray[8] = new SDEPoint(500, 1700);
        ptArray[9] = new SDEPoint(800, 1700);
        ptArray[10] = new SDEPoint(800, 1500);
        ptArray[11] = new SDEPoint(500, 1500);
        ptArray[12] = new SDEPoint(500, 1200);
        ptArray[13] = new SDEPoint(200, 1200);

        // part two
        ptArray[14] = new SDEPoint(1600, 1200);
        ptArray[15] = new SDEPoint(2800, 1650);
        ptArray[16] = new SDEPoint(1800, 2000);
        ptArray[17] = new SDEPoint(1600, 1200);

        SeShape multipolygon = new SeShape();
        multipolygon.generatePolygon(numPts, numParts, partOffsets, ptArray);

        double[][][] coords = multipolygon.getAllCoords();

        assertEquals("Num of parts invalid", numParts, coords.length);

        // the first polygon has 2 parts
        assertEquals("Num subparts invalid", 2, coords[0].length);

        // the second polygon has only 1 part
        assertEquals("Num subparts invalid", 1, coords[1].length);

        // first part of first polygon (shell) has 5 points
        assertEquals("Num of points invalid", 2 * 5, coords[0][0].length);

        // second part of first polygon (hole) has 9 points
        assertEquals("Num of points invalid", 2 * 9, coords[0][1].length);

        // second polygon (shell with no holes) has 4 points
        assertEquals("Num of points invalid", 2 * 4, coords[1][0].length);
    }

