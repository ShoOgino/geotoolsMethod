    public void importRasterImage(
            final String tableName,
            final SeCoordinateReference crs,
            final String rasterFilename,
            final int sePixelType,
            final SeExtent extent,
            final ArcSDERasterProducer prod,
            final IndexColorModel colorModel)
            throws Exception {

        Command<Void> importRasterCmd =
                new Command<Void>() {
                    @Override
                    public Void execute(ISession session, SeConnection connection)
                            throws SeException, IOException {
                        createRasterColumn(tableName, crs, session);

                        IndexColorModel indexCM = colorModel;

                        // now start loading the actual raster data
                        BufferedImage sampleImage =
                                ImageIO.read(
                                        org.geotools.test.TestData.getResource(
                                                null, rasterFilename));
                        {
                            ColorModel imgColorModel = sampleImage.getColorModel();
                            if (imgColorModel instanceof IndexColorModel) {
                                indexCM = (IndexColorModel) imgColorModel;
                            }
                        }
                        int imageWidth = sampleImage.getWidth(),
                                imageHeight = sampleImage.getHeight();

                        SeRasterAttr attr = new SeRasterAttr(true);
                        attr.setImageSize(
                                imageWidth,
                                imageHeight,
                                sampleImage.getSampleModel().getNumBands());
                        int tileWidth = imageWidth >> 3; // 128;
                        int tileHeight = imageHeight >> 3; // 128;
                        attr.setTileSize(tileWidth, tileHeight);
                        attr.setPixelType(sePixelType);
                        attr.setCompressionType(SeRaster.SE_COMPRESSION_NONE);

                        int maxLevels = (imageWidth / (2 * tileWidth)) - 1;
                        attr.setPyramidInfo(maxLevels, false, SeRaster.SE_INTERPOLATION_BILINEAR);
                        attr.setMaskMode(false);
                        attr.setImportMode(false);

                        attr.setExtent(extent);

                        // attr.setImageOrigin();

                        prod.setSeRasterAttr(attr);
                        prod.setSourceImage(sampleImage);
                        attr.setRasterProducer(prod);

                        try {
                            SeInsert insert = new SeInsert(connection);
                            insert.intoTable(tableName, new String[] {"RASTER"});
                            // no buffered writes on raster loads
                            insert.setWriteMode(false);
                            SeRow row = insert.getRowToSet();
                            row.setRaster(0, attr);

                            insert.execute();
                            insert.close();
                        } catch (SeException se) {
                            se.printStackTrace();
                            throw se;
                        }

                        // if there's a colormap to insert, let's add that too
                        if (indexCM != null) {
                            attr =
                                    getRasterAttributes(
                                            connection,
                                            tableName,
                                            new Rectangle(0, 0, 0, 0),
                                            0,
                                            new int[] {1});
                            final int numEntries = indexCM.getMapSize();
                            // number of colors, including alpha, if any
                            final int numBanks = indexCM.getNumComponents();
                            final int colorMapType =
                                    numBanks == 3
                                            ? SeRaster.SE_COLORMAP_RGB
                                            : SeRaster.SE_COLORMAP_RGBA;
                            DataBufferByte dataBuffer = new DataBufferByte(numEntries, numBanks);
                            for (int elem = 0; elem < numEntries; elem++) {
                                dataBuffer.setElem(0, elem, indexCM.getRed(elem));
                                dataBuffer.setElem(1, elem, indexCM.getGreen(elem));
                                dataBuffer.setElem(2, elem, indexCM.getBlue(elem));
                                if (numBanks == 4) {
                                    dataBuffer.setElem(3, elem, indexCM.getAlpha(elem));
                                }
                            }
                            SeRaster raster;
                            try {
                                raster = attr.getRasterInfo();
                            } catch (CloneNotSupportedException e) {
                                throw new RuntimeException(e);
                            }
                            SeRasterBand[] bands = raster.getBands();
                            SeRasterBand band = bands[0];
                            band.setColorMap(colorMapType, dataBuffer);
                            band.alter();
                        }
                        return null;
                    }
                };
        final ISession session = getConnectionPool().getSession();
        try {
            session.issue(importRasterCmd);
        } finally {
            session.dispose();
        }
    }

