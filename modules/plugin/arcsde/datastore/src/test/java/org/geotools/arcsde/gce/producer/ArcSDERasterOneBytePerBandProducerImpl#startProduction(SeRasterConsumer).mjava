    /**
     * @see
     *     com.esri.sde.sdk.client.SeRasterProducer#startProduction(com.esri.sde.sdk.client.SeRasterConsumer)
     *     this implementation defers completely to {@link SeRasterScanLineProducer}
     */
    public void startProduction(final SeRasterConsumer consumer) {
        if (!sourceImage.getColorModel().getColorSpace().isCS_sRGB()) {
            // it's a grayscale image...load it differently?
            if (!(consumer instanceof SeRasterRenderedImage)) {
                throw new IllegalArgumentException(
                        "You must set "
                                + "SeRasterAttr.setImportMode(false) to load "
                                + "data using this SeProducer implementation.");
            }

            Thread runme;
            runme =
                    new Thread() {
                        @Override
                        public void run() {
                            try {
                                final int imageHeight = sourceImage.getHeight();

                                // for each band...
                                for (int i = 0; i < sourceImage.getData().getNumBands(); i++) {
                                    final byte[] imgBandData =
                                            ((DataBufferByte) sourceImage.getData().getDataBuffer())
                                                    .getData(i);
                                    consumer.setScanLines(imageHeight, imgBandData, null);
                                    consumer.rasterComplete(SeRasterConsumer.SINGLEFRAMEDONE);
                                }
                                consumer.rasterComplete(SeRasterConsumer.STATICIMAGEDONE);
                            } catch (Exception se) {
                                java.util.logging.Logger.getGlobal()
                                        .log(java.util.logging.Level.INFO, "", se);
                                consumer.rasterComplete(SeRasterConsumer.IMAGEERROR);
                            }
                        }
                    };
            runme.start();

        } else {
            SeRasterScanLineProducer prod =
                    new SeRasterScanLineProducer(attr, sourceImage, sourceImage.getHeight());
            prod.setBitMaskType(maskType);
            prod.addConsumer(consumer);
            prod.startProduction(consumer);
        }
    }

