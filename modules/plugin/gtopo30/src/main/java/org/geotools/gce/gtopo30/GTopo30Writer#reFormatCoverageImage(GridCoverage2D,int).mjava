	/**
	 * Reformats the input single banded planar image to having
	 * {@link DataBuffer#TYPE_SHORT} sample type as requested by the GTOPO30
	 * format.
	 * 
	 * @param gc2D
	 *            source {@link GridCoverage2D} from which to take the input
	 *            {@link PlanarImage}.
	 * 
	 * @return the reformated {@link PlanarImage}.
	 */
	private PlanarImage reFormatCoverageImage(final GridCoverage2D gc2D,
			int writeBand) {
		// internal image
		PlanarImage image = (PlanarImage) gc2D.getRenderedImage();
		// sample dimension type
		final int origDataType = image.getSampleModel().getDataType();
		// short?
		if (DataBuffer.TYPE_SHORT == origDataType) {
			return image;
		}

		final GridSampleDimension visibleSD = ((GridSampleDimension) gc2D
				.getSampleDimension(0));

		// getting categories
		final List oldCategories = visibleSD.getCategories();

		// removing old nodata category
		// candidate
		Category candidate = null;
		NumberRange candidateRange = null;
		final Iterator it = oldCategories.iterator();

		while (it.hasNext()) {
			candidate = (Category) it.next();

			// removing candidate for NaN
			if (candidate.getName().toString().equalsIgnoreCase("no data")) {
				candidateRange = candidate.getRange();

				break;
			}
		}
		// do nothing?
		if(candidate==null){
			return image;
		}

		// new no data category
		final double oldNoData = candidateRange.getMinimum();
		final ParameterBlockJAI pbjM = new ParameterBlockJAI(
				"org.geotools.gce.gtopo30.NoDataReplacer");
		pbjM.addSource(image);
		pbjM.setParameter("oldNoData", oldNoData);
		image = JAI.create("org.geotools.gce.gtopo30.NoDataReplacer", pbjM,
				hints);
		return image;
	}

