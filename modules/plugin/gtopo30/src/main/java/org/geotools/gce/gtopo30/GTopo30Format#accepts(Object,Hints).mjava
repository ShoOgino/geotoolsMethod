    /**
     * Checks if the GTopo30DataSource supports a given file
     *
     * @param o the source object to test for compatibility with this format. This can be a File, an
     *     URL or a String (representing a filename or an URL)
     * @return if the source object is compatible
     */
    @Override
    public boolean accepts(final Object o, Hints hints) {
        URL urlToUse;

        if (o instanceof File) {
            try {
                urlToUse = ((File) o).toURI().toURL();
            } catch (MalformedURLException e) {
                if (LOGGER.isLoggable(Level.FINE))
                    LOGGER.log(Level.FINE, e.getLocalizedMessage(), e);
                return false;
            }
        } else if (o instanceof URL) {
            // we only allow files
            urlToUse = (URL) o;
        } else if (o instanceof String) {
            try {
                // is it a filename?
                urlToUse = new File((String) o).toURI().toURL();
            } catch (MalformedURLException e) {
                // is it a URL
                try {
                    urlToUse = new URL((String) o);
                } catch (MalformedURLException e1) {
                    if (LOGGER.isLoggable(Level.FINE))
                        LOGGER.log(Level.FINE, e.getLocalizedMessage(), e);
                    return false;
                }
            }
        } else {
            return false;
        }

        // trying to create a reader
        try {
            final GTopo30Reader reader = new GTopo30Reader(urlToUse);
            reader.dispose();
        } catch (IOException e) {
            if (LOGGER.isLoggable(Level.FINE)) LOGGER.log(Level.FINE, e.getLocalizedMessage(), e);
            return false;
        }

        return true;
    }

