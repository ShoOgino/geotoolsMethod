	/**
	 * Writing a gif file as an overview for this GTopo30.
	 * 
	 * @param gc
	 *            The GridCoverage to write
	 * @param file
	 *            The destination object (can be a File or ZipOutputStream)
	 * @param dest
	 * 
	 * @throws IOException
	 *             If the file could not be written
	 */
	private void writeGIF(final GridCoverage2D gc, final String name,
			Object dest) throws IOException {
		ImageOutputStream out = null;

	      // rescaling to a smaller resolution in order to save space on storage
        final GridCoverage2D gc1 = rescaleCoverage(gc);

        // get the non-geophysiscs view
        final GridCoverage2D gc2 = gc1.geophysics(false);

        // get the underlying image
        final RenderedImage image = gc2.getRenderedImage();

        // get the image out stream
		if (dest instanceof File) {
			// writing gif image
			final File file = new File((File) dest,
					new StringBuffer(name).append(".GIF").toString());
            out = ImageIOExt.createImageOutputStream(image, file);
		} else {
			final ZipOutputStream outZ = (ZipOutputStream) dest;
			final ZipEntry e = new ZipEntry(gc.getName().toString() + ".GIF");
			outZ.putNextEntry(e);

			out = ImageIOExt.createImageOutputStream(image, outZ);
		}

		// write it down as a gif
		final ParameterBlockJAI pbj = new ParameterBlockJAI("ImageWrite");
		pbj.addSource(image);
		pbj.setParameter("Output", out);
		pbj.setParameter("Format", "gif");
		JAI.create("ImageWrite", pbj, new RenderingHints(JAI.KEY_TILE_CACHE,
				null));

		if (dest instanceof File) {
			out.close();
		} else {
			out.flush();
			((ZipOutputStream) dest).closeEntry();
		}

		// disposing the old unused coverages
		gc1.dispose(false);
	}

