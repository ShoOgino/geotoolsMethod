	/**
	 * Creates a {@link GTopo30Writer}.
	 * 
	 * @param dest
	 *            The destination object can be a File (a directory actually),
	 *            an URL to a directory, or a String representing a directory or
	 *            an URL to a directory.
	 * @throws DataSourceException
	 */
	public GTopo30Writer(final Object dest, final Hints hints)
			throws DataSourceException {

		// /////////////////////////////////////////////////////////////////////
		//
		// Initial checks
		//
		// /////////////////////////////////////////////////////////////////////
		if (dest == null) {
			throw new NullPointerException("The provided destination is null.");
		}

		destination = dest;
		final File temp;
		final URL url;

		// we only accept a directory as a path
		if (dest instanceof String) {
			temp = new File((String) dest);

			// if it exists and it is not a directory that 's not good
			if ((temp.exists() && !temp.isDirectory()) || !temp.exists()) {
				destination = null; // we cannot write
			} else if (!temp.exists()) {
				// well let's create it!
				if (!temp.mkdir()) {
					destination = null;
				} else {
					destination = temp.getAbsolutePath();
				}
			}
		} else if (dest instanceof File) {
			temp = (File) dest;

			if (temp.exists() && !temp.isDirectory()) {
				this.destination = null;
			} else if (!temp.exists()) {
				// let's create it
				if (temp.mkdir()) {
					destination = temp.getAbsolutePath();
				} else {
					destination = null;
				}
			}
		} else if (dest instanceof URL) {
			url = (URL) dest;

			if (url.getProtocol().compareToIgnoreCase("file") != 0) {
				destination = null;
			}

			temp = DataUtilities.urlToFile(url);

			if (temp.exists() && !temp.isDirectory()) {
				destination = null;
			} else if (!temp.exists()) {
				// let's create it
				if (temp.mkdir()) {
					destination = temp.getAbsolutePath();
				} else {
					destination = null;
				}
			}
		} else if (dest instanceof ImageOutputStream) {
			this.destination = dest;
		} else {
			throw new IllegalArgumentException(
					"The provided destination is of an incorrect type.");

		}

		// /////////////////////////////////////////////////////////////////////
		//
		// managing hints
		//
		// /////////////////////////////////////////////////////////////////////
		// //
		//
		// managing hints
		//
		// //
		if (this.hints == null)
			this.hints= new Hints();	
		if (hints != null) {
			// prevent the use from reordering axes
			this.hints.add(hints);
		}
	}

