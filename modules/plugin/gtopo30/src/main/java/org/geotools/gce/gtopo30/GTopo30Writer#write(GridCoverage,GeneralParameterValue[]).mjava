	/**
	 * @see org.opengis.coverage.grid.GridCoverageWriter#write(org.opengis.coverage.grid.GridCoverage,
	 *      org.opengis.parameter.GeneralParameterValue[])
	 */
	public void write(final GridCoverage coverage,
			final GeneralParameterValue[] params)
			throws java.lang.IllegalArgumentException, java.io.IOException {

		// /////////////////////////////////////////////////////////////////////
		//
		// Checking input params
		//
		// /////////////////////////////////////////////////////////////////////
		if (coverage == null)
			throw new NullPointerException(
					"The provided source coverage is null");
		// the source GridCoverage2D
		GridCoverage2D gc2D = (GridCoverage2D) coverage;

		// /////////////////////////////////////////////////////////////////////
		//
		// Checking writing params
		//
		// /////////////////////////////////////////////////////////////////////
		GeoToolsWriteParams gtParams = null;
		if (params != null) {

			if (params != null) {
				Parameter<?> param;
				final int length = params.length;
				for (int i = 0; i < length; i++) {
					param = (Parameter<?>) params[i];
					if (param.getDescriptor().getName().getCode().equals(
							AbstractGridFormat.GEOTOOLS_WRITE_PARAMS.getName()
									.toString())) {
						gtParams = (GeoToolsWriteParams) param.getValue();
					}
				}
			}
		}
		if (gtParams == null)
			gtParams = new GTopo30WriteParams();
		// compression
		final boolean compressed = gtParams.getCompressionMode() == ImageWriteParam.MODE_EXPLICIT;
		// write band
		int[] writeBands = gtParams.getSourceBands();
		int writeBand = CoverageUtilities.getVisibleBand(gc2D
				.getRenderedImage());
		if ((writeBands == null || writeBands.length == 0 || writeBands.length > 1)
				&& (writeBand < 0 || writeBand > gc2D.getNumSampleDimensions()))
			throw new IllegalArgumentException(
					"You need to supply a valid index for deciding which band to write.");
		if (!((writeBands == null || writeBands.length == 0 || writeBands.length > 1)))
			writeBand = writeBands[0];

		// destination file name
		String fileName = gc2D.getName().toString();

		// destination XXX HAS to be a dir
		if (compressed) {
			destination = new ZipOutputStream(new BufferedOutputStream(
					new FileOutputStream(new File((File) destination,
							new StringBuffer(fileName).append(".zip")
									.toString()))));
		}

		// /////////////////////////////////////////////////////////////////////
		//
		// STEP 1
		//
		// We might need to do a band select in order to cope with the GTOPO30
		// limitation.
		//
		// /////////////////////////////////////////////////////////////////////
		final ParameterValueGroup pvg = PROCESSOR.getOperation("SelectSampleDimension").getParameters();
		pvg.parameter("Source").setValue(gc2D);
		pvg.parameter("SampleDimensions").setValue(new int[]{writeBand});
		pvg.parameter("VisibleSampleDimension").setValue(writeBand);
		gc2D = (GridCoverage2D) ((SelectSampleDimension)PROCESSOR.getOperation("SelectSampleDimension")).doOperation(pvg, hints);

		// /////////////////////////////////////////////////////////////////////
		//
		// STEP 2
		//
		// We might need to reformat the selected band for this coverage in
		// order to cope with the GTOPO30 limitation.
		//
		// /////////////////////////////////////////////////////////////////////
		final PlanarImage reFormattedData2Short = reFormatCoverageImage(gc2D,
				DataBuffer.TYPE_SHORT);

		// /////////////////////////////////////////////////////////////////////
		//
		// STEP 2
		//
		// Start with writing things out.
		//
		// /////////////////////////////////////////////////////////////////////
		// //
		//
		// write DEM
		//
		// //
		this.writeDEM(reFormattedData2Short, fileName, destination);

		// //
		//
		// write statistics
		//
		// //
		this.writeStats(reFormattedData2Short, fileName, destination, gc2D);
		// we won't use this image anymore let's release the resources.

		// //
		//
		// write world file
		//
		// //
		this.writeWorldFile(gc2D, fileName, destination);

		// //
		//
		// write projection
		//
		// //
		this.writePRJ(gc2D, fileName, destination);

		// //
		//
		// write HDR
		//
		// //
		this.writeHDR(gc2D, fileName, destination);

		// //
		//
		// write gif
		//
		// //
		this.writeGIF(gc2D, fileName, destination);

		// //
		//
		// write src
		//
		// //
		this.writeSRC(gc2D, fileName, destination);

		if (compressed) {

			((ZipOutputStream) destination).close();
		}
	}

