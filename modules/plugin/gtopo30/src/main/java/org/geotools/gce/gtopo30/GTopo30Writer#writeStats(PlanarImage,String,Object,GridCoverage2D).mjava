	/**
	 * Writes the stats file (.STX).
	 * 
	 * @param image
	 *            The GridCoverage to write
	 * @param file
	 *            The destination object (can be a File or ZipOutputStream)
	 * @param gc
	 *            DOCUMENT ME!
	 * 
	 * @throws IOException
	 *             If the file could not be written
	 */
	private void writeStats(final PlanarImage image, String name, Object dest,
			final GridCoverage2D gc) throws IOException {
		ParameterBlock pb = new ParameterBlock();
		// /////////////////////////////////////////////////////////////////////
		//
		// we need to evaluate stats first using jai
		//
		// /////////////////////////////////////////////////////////////////////
		final double[] Max = new double[] { Short.MAX_VALUE };//we should encode more than the maximum short anyway
		final double[] Min = new double[] { Short.MIN_VALUE };//we should avoid No Data values TODO

		// histogram
		pb.addSource(image);
		pb.add(null); // no roi
		pb.add(1);
		pb.add(1);
		pb.add(new int[] { (int) (Max[0] - Min[0] + 1) });
		pb.add(Min);
		pb.add(Max);
		pb.add(1);

		// /////////////////////////////////////////////////////////////////////
		//
		// Create the histogram
		//
		// /////////////////////////////////////////////////////////////////////
		final PlanarImage histogramImage = JAI.create("histogram", pb,
				new RenderingHints(JAI.KEY_TILE_CACHE, null));
		final Histogram hist = (Histogram) histogramImage
				.getProperty("histogram");
		pb.removeParameters();
		pb.removeSources();

		// /////////////////////////////////////////////////////////////////////
		//
		// Write things
		//
		// /////////////////////////////////////////////////////////////////////
		if (dest instanceof File) {
			// files destinations
			// write statistics
			if (dest instanceof File) {
				dest = new File((File) dest, new StringBuffer(name).append(
						".STX").toString());
			}
			// writing world file
			final PrintWriter p = new PrintWriter(new FileOutputStream(
					((File) dest)));
			p.print(1);
			p.print(" ");
			p.print((int) Min[0]);
			p.print(" ");
			p.print((int) Max[0]);
			p.print(" ");
			p.print(hist.getMean()[0]);
			p.print(" ");
			p.print(hist.getStandardDeviation()[0]);
			p.close();
		} else {
			final ZipOutputStream outZ = (ZipOutputStream) dest;
			final ZipEntry e = new ZipEntry(name + ".STX");
			outZ.putNextEntry(e);

			// writing world file
			outZ.write("1".getBytes());
			outZ.write(" ".getBytes());
			outZ.write(new Integer((int) Min[0]).toString().getBytes());
			outZ.write(" ".getBytes());
			outZ.write(new Integer((int) Max[0]).toString().getBytes());
			outZ.write(" ".getBytes());
			outZ.write(new Double(hist.getMean()[0]).toString().getBytes());
			outZ.write(" ".getBytes());
			outZ.write(new Double(hist.getStandardDeviation()[0]).toString()
					.getBytes());
			((ZipOutputStream) dest).closeEntry();
		}

		histogramImage.dispose();
	}

