    @Override
    public Object visit(Not filter, Object extraData) {
        BasicDBObject output = asDBObject(extraData);
        // in case of a not operator we cannot simply wrap the child filter
        // with a $not since mongo syntax is {property:{$not:{operator-expression}}}
        // thus using a Visitor to find the PropertyName
        class PropertyNameFinder extends FilterAttributeExtractor {
            List<PropertyName> pNames = new ArrayList<>();

            @Override
            public Object visit(PropertyName expression, Object data) {
                pNames.add(expression);
                return super.visit(expression, data);
            }

            PropertyName getPropertyName() {
                if (pNames.size() > 0) return pNames.get(0);
                else return null;
            }
        }
        PropertyNameFinder finder = new PropertyNameFinder();
        filter.getFilter().accept(finder, null);
        PropertyName pn = finder.getPropertyName();
        // gets child filter as it is
        BasicDBObject expr = (BasicDBObject) filter.getFilter().accept(this, null);
        BasicDBObject dbObject;
        if (pn != null) {
            String strPn = mapper.getPropertyPath(pn.getPropertyName());
            // get only the operator expression
            Object exprValue = expr.get(strPn);
            dbObject = new BasicDBObject("$not", exprValue);
            // move up the PropertyName
            output.put(strPn, dbObject);
        } else {
            // no PropertyName found throwing exception
            throw new UnsupportedOperationException(
                    "No propertyName found, cannot use $not as top level operator");
        }
        return output;
    }

