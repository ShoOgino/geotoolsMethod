    @Override
    public List<Feature> getFeatures(
            Object source,
            Object foreignKeyValue,
            List<Object> idValues,
            CoordinateReferenceSystem reprojection,
            Object feature,
            List<PropertyName> selectedProperties,
            boolean includeMandatory,
            int resolveDepth,
            Integer resolveTimeOut)
            throws IOException {
        if (!(foreignKeyValue instanceof CollectionLinkFunction.LinkCollection)) {
            throw new RuntimeException(
                    "MongoDB nesting only supports foreign keys of 'CollectionLink' type.");
        }
        CollectionLinkFunction.LinkCollection linkCollection =
                (CollectionLinkFunction.LinkCollection) foreignKeyValue;
        String collectionPath = linkCollection.getCollectionPath();
        if (feature instanceof MongoCollectionFeature) {
            String parentPath = ((MongoCollectionFeature) feature).getCollectionPath();
            collectionPath = parentPath + "." + collectionPath;
        }
        List collection = getSubCollection(feature, collectionPath);
        if (collection == null) {
            return Collections.emptyList();
        }
        List<SimpleFeature> features = new ArrayList<>();
        for (int i = 0; i < collection.size(); i++) {
            features.add(MongoCollectionFeature.build(feature, collectionPath, i));
        }
        FeatureSource fSource = buildMappingFeatureSource(feature, features);
        ArrayList<Feature> matchingFeatures = new ArrayList<Feature>();
        // get all the mapped nested features based on the link values
        FeatureCollection<FeatureType, Feature> fCollection = fSource.getFeatures(Query.ALL);
        if (fCollection instanceof MappingFeatureCollection) {
            try (FeatureIterator<Feature> iterator = fCollection.features()) {
                while (iterator.hasNext()) {
                    Feature nestedFeature = iterator.next();
                    String parentPath =
                            MongoComplexUtilities.resolvePath(
                                    (Feature) feature, linkCollection.getCollectionPath());
                    MongoComplexUtilities.setParentPath(nestedFeature, parentPath);
                    matchingFeatures.add(nestedFeature);
                }
            }
        }
        return matchingFeatures;
    }

