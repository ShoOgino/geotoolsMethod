    public static File extractZipFile(File destDir, File zipFile) throws ZipException, IOException {

        int BUFFER = 2048;
        String extractFolderName = zipFile.getName();
        int idx = extractFolderName.lastIndexOf(MongoSchemaFileStore.SUFFIX_ZIP);
        extractFolderName = extractFolderName.substring(0, idx);
        File extractLocation = new File(destDir, extractFolderName);
        extractLocation.mkdir();
        try (ZipFile zip = new ZipFile(zipFile)) {
            Enumeration zipFileEntries = zip.entries();
            // Process each entry
            while (zipFileEntries.hasMoreElements()) {
                // grab a zip file entry
                ZipEntry entry = (ZipEntry) zipFileEntries.nextElement();
                String currentEntry = entry.getName();
                File destFile = new File(extractLocation, currentEntry);
                // destFile = new File(newPath, destFile.getName());
                File destinationParent = destFile.getParentFile();

                // create the parent directory structure if needed
                destinationParent.mkdirs();

                if (!entry.isDirectory()) {
                    try (BufferedInputStream is =
                            new BufferedInputStream(zip.getInputStream(entry))) {
                        int currentByte;
                        // establish buffer for writing file
                        byte[] data = new byte[BUFFER];

                        // write the current file to disk
                        FileOutputStream fos = new FileOutputStream(destFile);
                        try (BufferedOutputStream dest = new BufferedOutputStream(fos, BUFFER)) {
                            // read and write until last byte is encountered
                            while ((currentByte = is.read(data, 0, BUFFER)) != -1) {
                                dest.write(data, 0, currentByte);
                            }
                        }
                    }
                }
            }
        }
        Files.deleteIfExists(zipFile.toPath());

        SchemaFolderFinder jsonFolderFinder = new SchemaFolderFinder();
        Files.walkFileTree(extractLocation.toPath(), jsonFolderFinder);
        return jsonFolderFinder.getLastDirectory();
    }

