    /**
     * Returns all the JSON paths associated with the provided property name as property names, in
     * practice this method finds the source expression associated with the attribute mapping
     * matching the provided property name and extracts its JSON path converting it to a property
     * name. Since the source expression may use multiple attributes, multiple JSON paths may be
     * found.
     */
    private List<PropertyName> extractJsonPaths(
            FeatureTypeMapping featureTypeMapping, PropertyName propertyName) {
        // get the expression of the mapping attribute matching the provided property name
        Expression expression = findPropertyExpression(featureTypeMapping, propertyName);
        if (expression == null) {
            // no attribute matches the provided property, let's move on
            return Collections.emptyList();
        }
        // extracts all the properties from the attribute mapping expression
        FilterAttributeExtractor propertiesExtractor = new FilterAttributeExtractor();
        expression.accept(propertiesExtractor, null);
        // convert all properties \ attributes to a property name
        return propertiesExtractor
                .getAttributeNameSet()
                .stream()
                .map(attributeName -> filterFactory.property(attributeName))
                .collect(Collectors.toList());
    }

