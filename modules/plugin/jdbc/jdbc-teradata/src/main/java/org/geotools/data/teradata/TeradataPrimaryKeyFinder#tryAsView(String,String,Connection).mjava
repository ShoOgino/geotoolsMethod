    private List<PrimaryKeyColumn> tryAsView(String schema, String table, Connection cx)
            throws SQLException {
        List<PrimaryKeyColumn> columns = new ArrayList<>();
        StringBuilder sql = new StringBuilder("SELECT RequestText FROM DBC.tables WHERE ");
        if (schema != null) {
            sql.append("DatabaseName = '").append(schema).append("' AND ");
        }
        sql.append("TableName = '").append(table).append("' AND TableKind='V'");
        try (Statement st = cx.createStatement();
                ResultSet result = st.executeQuery(sql.toString())) {
            if (result.next()) {
                String createViewSql = result.getString("RequestText");
                int as = createViewSql.toLowerCase().indexOf("as");
                String[] parts = {createViewSql.substring(0, as), createViewSql.substring(as + 2)};
                /*
                         String viewID = parts[0];
                         String[] viewColumnNames = null;

                int openIndex = viewID.indexOf("(");
                if (openIndex > -1 && viewID.indexOf(")", openIndex) > -1) {
                    String columnString = viewID.substring(openIndex + 1,
                            viewID.indexOf(")", openIndex)).trim();
                    if (columnString.startsWith("\"")) {
                        columnString = columnString.substring(1).trim();
                    }
                    if (columnString.endsWith("\"")) {
                        columnString = columnString.substring(0,columnString.length() - 1).trim();
                    }
                    viewColumnNames = columnString.split("\"?\\s*,\\s*\"?");
                }
                */
                String select = parts[1].substring(parts[1].toLowerCase().indexOf("sel"));

                try (ResultSet viewResults = st.executeQuery(select)) {
                    ResultSetMetaData md = viewResults.getMetaData();

                    for (int i = 1; i <= md.getColumnCount(); i++) {
                        if (md.isAutoIncrement(i)) {
                            //                        columnLabel = viewColumnNames[i - 1];
                            String columnLabel = md.getColumnLabel(i);
                            Class<?> columnType;
                            try {
                                columnType =
                                        Thread.currentThread()
                                                .getContextClassLoader()
                                                .loadClass(md.getColumnClassName(i));
                            } catch (ClassNotFoundException e) {
                                columnType = Object.class;
                            }
                            columns.add(new AutoGeneratedPrimaryKeyColumn(columnLabel, columnType));
                        }
                    }
                } catch (SQLException e) {
                    String from = "'" + table + "'";
                    if (schema != null) {
                        from = "'" + schema + "'." + from;
                    }
                    LOGGER.warning(
                            "Unable to perform select used to create view "
                                    + from
                                    + ".\nSQL: "
                                    + select);
                }
            }
        }
        return columns;
    }

