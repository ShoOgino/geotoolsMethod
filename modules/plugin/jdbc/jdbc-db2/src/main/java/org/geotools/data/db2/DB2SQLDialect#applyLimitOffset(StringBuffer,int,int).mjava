    @Override
    public void applyLimitOffset(StringBuffer sql, int limit, int offset) {
        // since 9.7.2, Limit and offset is supported

        if (Boolean.TRUE.equals(isLimitOffsetSupported)) {
            if (limit >= 0 && limit < Integer.MAX_VALUE) {
                if (offset > 0) sql.append(" LIMIT " + offset + ", " + limit);
                else sql.append(" LIMIT " + limit);
            } else if (offset > 0) {
                sql.append(" LIMIT " + offset + ", " + (Integer.MAX_VALUE - 7));
            }
            return; // end here, we are finished
        }

        // Since 9.5, Using the same code as in the OracleDialict. This method is only invoked if
        // DB2 is configured to be compatible to Oracle with
        // "db2set DB2_COMPATIBILITY_VECTOR=01"
        // enabling the rownum pseudo column

        if (Boolean.TRUE.equals(isRowNumberSupported)) {
            if (offset == 0) {
                sql.insert(0, "SELECT * FROM (");
                sql.append(") WHERE ROWNUM <= " + limit);
            } else {
                long max = (limit == Integer.MAX_VALUE ? Long.MAX_VALUE : limit + offset);
                sql.insert(0, "SELECT * FROM (SELECT A.*, ROWNUM RNUM FROM ( ");
                sql.append(") A WHERE ROWNUM <= " + max + ")");
                sql.append("WHERE RNUM > " + offset);
            }
        }

        //        if (Boolean.TRUE.equals(isOLAPRowNumSupported)) {
        //            sql.insert(0,"select  * from (select   a.* from  (");
        //            sql.append(") a ,row_number() over () as rownum )   where ");
        //            if(offset == 0) {
        //                sql.append(" rownum <= " + limit);
        //            } else {
        //                long max = (limit == Integer.MAX_VALUE ? Long.MAX_VALUE : limit + offset);
        //                sql.append (" rownum > " + offset + " and rownum <= " + max);
        //            }
        //        }
    }

