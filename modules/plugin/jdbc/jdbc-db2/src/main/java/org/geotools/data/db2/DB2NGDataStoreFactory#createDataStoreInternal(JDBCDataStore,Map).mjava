    @Override
    @SuppressWarnings("PMD.CheckResultSet")
    protected JDBCDataStore createDataStoreInternal(JDBCDataStore dataStore, Map params)
            throws IOException {
        Connection con = null;
        try {
            con = dataStore.getDataSource().getConnection();

            DB2SQLDialectPrepared dialect = (DB2SQLDialectPrepared) dataStore.getSQLDialect();
            DB2DialectInfo di = dialect.getDb2DialectInfo();

            Boolean loose = (Boolean) LOOSEBBOX.lookUp(params);
            dialect.setLooseBBOXEnabled(loose == null || Boolean.TRUE.equals(loose));

            Boolean selectivity = (Boolean) USE_SELECTIVITY.lookUp(params);
            dialect.setUseSelectivity(Boolean.TRUE.equals(selectivity));

            DatabaseMetaData md = con.getMetaData();
            di.setMajorVersion(md.getDatabaseMajorVersion());
            di.setMinorVersion(md.getDatabaseMinorVersion());
            di.setProductName(md.getDatabaseProductName());
            di.setProductVersion(md.getDatabaseProductVersion());

            try (PreparedStatement ps = con.prepareStatement(SelectGeometryColumns);
                    ResultSet rs = ps.executeQuery()) {
                ResultSetMetaData rsmd = ps.getMetaData();
                for (int i = 0; i < rsmd.getColumnCount(); i++) {
                    if ("MIN_X".equals(rsmd.getColumnName(i + 1))) {
                        di.setSupportingPrecalculatedExtents(true);
                        break;
                    }
                }
            }

            if (dataStore.getDatabaseSchema() == null) {
                try (PreparedStatement ps = con.prepareStatement(GetCurrentSchema);
                        ResultSet rs = ps.executeQuery()) {
                    rs.next();
                    dataStore.setDatabaseSchema(rs.getString(1));
                }
            }
            try (PreparedStatement ps = con.prepareStatement(GetWKBZTypes);
                    ResultSet rs = ps.executeQuery()) {
                rs.next();
                byte[] bytes = rs.getBytes(1);
                ByteOrderDataInStream dis = new ByteOrderDataInStream();
                dis.setInStream(new ByteArrayInStream(bytes));
                byte byteOrder = dis.readByte();
                // default is big endian
                if (byteOrder == WKBConstants.wkbNDR) dis.setOrder(ByteOrderValues.LITTLE_ENDIAN);

                int geometryType = dis.readInt();
                if (geometryType == 1001) di.setHasOGCWkbZTyps(true);
            }
        } catch (SQLException e) {
            throw new IOException(e.getMessage());
        } finally {
            dataStore.closeSafe(con);
        }

        return dataStore;
    }

