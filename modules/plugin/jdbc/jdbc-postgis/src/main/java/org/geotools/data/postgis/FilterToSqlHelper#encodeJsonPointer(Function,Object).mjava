    private void encodeJsonPointer(Function jsonPointer, Object extraData) throws IOException {
        Expression json = getParameter(jsonPointer, 0, true);
        Expression pointer = getParameter(jsonPointer, 1, true);
        if (json instanceof PropertyName && pointer instanceof Literal) {
            // if not a string need to cast the json attribute
            boolean needCast =
                    extraData != null
                            && extraData instanceof Class
                            && !extraData.equals(String.class);

            if (needCast) out.write('(');
            json.accept(delegate, null);
            out.write(" ::json ");
            String strPointer = ((Literal) pointer).getValue().toString();
            List<String> pointerEl =
                    Stream.of(strPointer.split("/"))
                            .filter(p -> !p.equals(""))
                            .collect(Collectors.toList());
            for (int i = 0; i < pointerEl.size(); i++) {
                String p = pointerEl.get(i);
                if (i != pointerEl.size() - 1) out.write(" -> ");
                // using for last element the ->> operator
                // to have a text instead of a json returned
                else out.write(" ->> ");
                Literal elPointer = new LiteralExpressionImpl(p);
                Class binding = NumberUtils.isParsable(p) ? Integer.class : String.class;
                elPointer.accept(delegate, binding);
            }
            if (needCast) {
                // cast from text to needed type
                out.write(')');
                out.write(cast("", (Class) extraData));
            }
        }
    }

