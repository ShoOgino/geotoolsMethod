    @Override
    public void encodeGeometryColumnSimplified(GeometryDescriptor gatt, String prefix, int srid,
            StringBuffer sql, Double distance) {
        if(!isSimplifyEnabled()) {
            super.encodeGeometryColumnSimplified(gatt, prefix, srid, sql, distance);
        } else {
            // add preserveCollapsed argument if it's supported (PostGIS 2.2+)
            // http://postgis.net/docs/manual-2.2/ST_Simplify.html
            String preserveCollapsed = version.compareTo(V_2_2_0) >= 0 ? ", true" : "";

            boolean geography = "geography".equals(gatt.getUserData().get(
                    JDBCDataStore.JDBC_NATIVE_TYPENAME));
    
            if (geography) {
                sql.append("encode(ST_AsBinary(");
                encodeColumnName(prefix, gatt.getLocalName(), sql);
                sql.append("),'base64')");
            } else {
                if (NON_CURVED_GEOMETRY_CLASSES.contains(gatt.getType().getBinding())) {
                    sql.append("encode(ST_AsBinary(ST_Simplify(ST_Force_2D(");
                    encodeColumnName(prefix, gatt.getLocalName(), sql);
                    sql.append("), " + distance + preserveCollapsed + ")),'base64')");
                } else {
                    // we can have curves mixed in
                    sql.append("encode(ST_AsBinary(");
                    sql.append("CASE WHEN ST_HasArc(");
                    encodeColumnName(prefix, gatt.getLocalName(), sql);
                    sql.append(") THEN ");
                    encodeColumnName(prefix, gatt.getLocalName(), sql);
                    sql.append(" ELSE ");
                    sql.append("ST_Simplify(ST_Force_2D(");
                    encodeColumnName(prefix, gatt.getLocalName(), sql);
                    sql.append("), " + distance + preserveCollapsed + ") END),'base64')");
                }

            }
        }
    }

