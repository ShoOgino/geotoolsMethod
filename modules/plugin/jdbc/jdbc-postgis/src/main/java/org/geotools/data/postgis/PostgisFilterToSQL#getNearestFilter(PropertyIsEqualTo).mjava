    /**
     * Detects and return a FilterFunction_pgNearest if found, otherwise an empty optional
     *
     * @param filter filter to evaluate
     * @return optional of FilterFunction_pgNearest if found
     */
    private Optional<FilterFunction_pgNearest> getNearestFilter(PropertyIsEqualTo filter) {
        Expression expr1 = filter.getExpression1();
        Expression expr2 = filter.getExpression2();
        // if expr2 is nearest filter, switch positions
        if (expr2 instanceof FilterFunction_pgNearest) {
            Expression tmp = expr1;
            expr1 = expr2;
            expr2 = tmp;
        }
        if (expr1 instanceof FilterFunction_pgNearest) {
            if (!(expr2 instanceof Literal)) {
                throw new UnsupportedOperationException(
                        "Unsupported usage of Nearest Operator: it can be compared only to a Boolean \"true\" value");
            }
            Boolean nearest = (Boolean) evaluateLiteral((Literal) expr2, Boolean.class);
            if (nearest == null || !nearest.booleanValue()) {
                throw new UnsupportedOperationException(
                        "Unsupported usage of Nearest Operator: it can be compared only to a Boolean \"true\" value");
            }
            return Optional.of((FilterFunction_pgNearest) expr1);
        } else {
            return Optional.empty();
        }
    }

