    public Filter[] splitFilter(Filter filter, SimpleFeatureType schema) {

        PostPreProcessFilterSplittingVisitor splitter =
                new PostPreProcessFilterSplittingVisitor(
                        dataStore.getFilterCapabilities(), schema, null) {
                    private boolean supportsJsonPointer = false;

                    @Override
                    public Object visit(Function expression, Object notUsed) {
                        if (expression instanceof JsonPointerFunction) {
                            // takes the json pointer param to check if
                            // can be encoded
                            Expression param = expression.getParameters().get(1);
                            if ((param instanceof Literal)) {
                                this.supportsJsonPointer = true;
                            } else {
                                FilterAttributeExtractor extractor = new FilterAttributeExtractor();
                                param.accept(extractor, null);
                                if (extractor.isConstantExpression()) {
                                    // defensive copy of filter before manipulating it
                                    DuplicatingFilterVisitor duplicating =
                                            new DuplicatingFilterVisitor();
                                    Function duplicated =
                                            (Function) expression.accept(duplicating, null);
                                    // if constant can encode
                                    Object result = param.evaluate(null);
                                    FilterFactory2 ff = CommonFactoryFinder.getFilterFactory2();
                                    // setting constant expression evaluated to literal
                                    duplicated.getParameters().set(1, ff.literal(result));
                                    this.supportsJsonPointer = true;
                                    expression = duplicated;
                                }
                            }
                        }
                        return super.visit(expression, notUsed);
                    }

                    @Override
                    protected boolean supports(Object value) {
                        if (value.equals(JsonPointerFunction.class)
                                || value instanceof JsonPointerFunction) return supportsJsonPointer;
                        else return super.supports(value);
                    }
                };
        filter.accept(splitter, null);

        Filter[] split = new Filter[2];
        split[0] = splitter.getFilterPre();
        split[1] = splitter.getFilterPost();

        return split;
    }

