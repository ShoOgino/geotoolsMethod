    private static byte[] toWKB(Geometry g) {
        try {
            WKBWriter w = new WKBWriter();

            // write the geometry
            ByteArrayOutputStream bytes = new ByteArrayOutputStream();
            w.write(g, new OutputStreamOutStream(bytes));

            // supplement it with the srid
            int srid = g.getSRID();
            bytes.write((byte) (srid >>> 24));
            bytes.write((byte) (srid >> 16 & 0xff));
            bytes.write((byte) (srid >> 8 & 0xff));
            bytes.write((byte) (srid & 0xff));

            return bytes.toByteArray();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
    //
    //
    //    /**
    //     * Converts a well-known text string to a geometry.
    //     */
    //    public static Geometry geometryFromText(String wkt) {
    //        WKTReader wktreader = new WKTReader();
    //
    //        try {
    //            return wktreader.read(wkt);
    //        }
    //        catch (Exception e) {
    //            throw (IllegalArgumentException) new IllegalArgumentException("bad
    // wkt").initCause( e );
    //        }
    //    }
    //
    //    /**
    //     * Converts a sequence sequence of bytes into a geometry.
    //     */
    //    public static Geometry geometryFromBytes(byte[] bytes) {
    //        try {
    //            return (Geometry) new ObjectInputStream( new ByteArrayInputStream( bytes )
    // ).readObject();
    //        }
    //        catch ( Exception e ) {
    //            throw (IllegalArgumentException) new IllegalArgumentException( "bad bytes"
    // ).initCause( e );
    //        }
    //    }
    //
    //    /**
    //     * Calculates the bounding box of a geometry.
    //     * <p>
    //     * {@link Geometry#getUserData()} is checked for an instance of
    //     * {@link CoordinateReferenceSystem} and set on the envelope if it exists.
    //     * </p>
    //     */
    //    public static ReferencedEnvelope extent( Geometry g ) {
    //        Envelope e = g.getEnvelopeInternal();
    //        if ( g.getUserData() instanceof CoordinateReferenceSystem ) {
    //            return new ReferencedEnvelope(e,(CoordinateReferenceSystem) g.getUserData());
    //        }
    //
    //        return new ReferencedEnvelope(e,null);
    //    }
    //
    //    public static ReferencedEnvelope extentB( byte[] bytes ) {
    //        return extent( geometryFromBytes( bytes ) );
    //    }
    //
    //
    //    public static Geometry setSRID( byte[] bytes, int srid ) {
    //        Geometry g = geometryFromBytes(bytes);
    //        g.setUserData(parseSRID(srid));
    //        return g;
    //    }
    //
    //    public static int getSRID( byte[] bytes ) {
    //        Geometry g = geometryFromBytes(bytes);
    //        CoordinateReferenceSystem crs = (CoordinateReferenceSystem) g.getUserData();
    //        if ( crs != null ) {
    //            //TODO: factor this out into geotools utility method
    //            for (Iterator i = crs.getIdentifiers().iterator(); i.hasNext();) {
    //                Identifier id = (Identifier) i.next();
    //
    //                //return "EPSG:" + id.getCode();
    //                if ((id.getAuthority() != null)
    //                        && id.getAuthority().getTitle().equals(Citations.EPSG.getTitle())) {
    //                    return Integer.parseInt(id.getCode());
    //                }
    //            }
    //        }
    //
    //        return -1;
    //    }
    //
    //
    ////    public static ReferencedEnvelope setSRID( ReferencedEnvelope box, int srid ) {
    ////        return new ReferencedEnvelope( box, parseSRID( srid ) );
    ////    }
    //
    //
    //    private static CoordinateReferenceSystem parseSRID( int srid ) {
    //        try {
    //            return CRS.decode("epsg:" + srid);
    //        }
    //        catch (Exception e) {
    //            throw new RuntimeException("Could not parse srid: " + srid );
    //        }
    //    }

