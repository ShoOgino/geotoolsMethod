    private Object visitBinarySpatialOperator(
            BinarySpatialOperator filter,
            Expression e1,
            Expression e2,
            boolean swapped,
            Object extraData) {
        try {
            e1.accept(this, extraData);
            out.write('.');
            if (filter instanceof Equals) {
                out.write("ST_Equals");
            } else if (filter instanceof Disjoint) {
                out.write("ST_Disjoint");
            } else if (filter instanceof Intersects) {
                out.write("ST_Intersects");
            } else if (filter instanceof Crosses) {
                out.write("ST_Crosses");
            } else if (filter instanceof Within) {
                if (swapped) out.write("ST_Contains");
                else out.write("ST_Within");
            } else if (filter instanceof Contains) {
                if (swapped) out.write("ST_Within");
                else out.write("ST_Contains");
            } else if (filter instanceof Overlaps) {
                out.write("ST_Overlaps");
            } else if (filter instanceof Touches) {
                out.write("ST_Touches");
            } else {
                throw new IllegalArgumentException("Unsupported filter type " + filter.getClass());
            }
            out.write('(');
            e2.accept(this, extraData);
            out.write(") = 1");
            return extraData;
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

