    private boolean visitFunction(Function function, Object extraData) throws IOException {
        if (function instanceof FilterFunction_strConcat) {
            Expression s1 = getParameter(function, 0, true);
            Expression s2 = getParameter(function, 1, true);
            out.write("(");
            s1.accept(this, String.class);
            out.write(" || ");
            s2.accept(this, String.class);
            out.write(")");
            return true;
        }
        if (function instanceof FilterFunction_strEndsWith) {
            Expression str = getParameter(function, 0, true);
            Expression end = getParameter(function, 1, true);
            out.write("CASE WHEN (RIGHT(");
            str.accept(this, String.class);
            out.write(", LENGTH(");
            end.accept(this, String.class);
            out.write(")) = ");
            end.accept(this, String.class);
            out.write(") THEN 1 ELSE 0 END");
            return true;
        }
        if (function instanceof FilterFunction_strStartsWith) {
            Expression str = getParameter(function, 0, true);
            Expression start = getParameter(function, 1, true);
            out.write("CASE WHEN (LEFT(");
            str.accept(this, String.class);
            out.write(", LENGTH(");
            start.accept(this, String.class);
            out.write(")) = ");
            start.accept(this, String.class);
            out.write(") THEN 1 ELSE 0 END");
            return true;
        }
        if (function instanceof FilterFunction_strEqualsIgnoreCase) {
            Expression first = getParameter(function, 0, true);
            Expression second = getParameter(function, 1, true);
            out.write("CASE WHEN (LOWER(");
            first.accept(this, String.class);
            out.write(") = LOWER(");
            second.accept(this, String.class);
            out.write(")) THEN 1 ELSE 0 END");
            return true;
        }
        if (function instanceof FilterFunction_strIndexOf) {
            Expression string = getParameter(function, 0, true);
            Expression substr = getParameter(function, 1, true);
            out.write("(LOCATE(");
            string.accept(this, String.class);
            out.write(", ");
            substr.accept(this, String.class);
            out.write(") - 1)");
            return true;
        }
        if (function instanceof FilterFunction_strLength) {
            Expression string = getParameter(function, 0, true);
            out.write("LENGTH(");
            string.accept(this, String.class);
            out.write(")");
            return true;
        }
        if (function instanceof FilterFunction_strToLowerCase) {
            Expression string = getParameter(function, 0, true);
            out.write("LOWER(");
            string.accept(this, String.class);
            out.write(")");
            return true;
        }
        if (function instanceof FilterFunction_strToUpperCase) {
            Expression string = getParameter(function, 0, true);
            out.write("UPPER(");
            string.accept(this, String.class);
            out.write(")");
            return true;
        }
        if (function instanceof FilterFunction_strSubstring) {
            Expression string = getParameter(function, 0, true);
            Expression begIdx = getParameter(function, 1, true);
            Expression endIdx = getParameter(function, 2, true);
            out.write("SUBSTRING(");
            string.accept(this, String.class);
            out.write(", ");
            begIdx.accept(this, Integer.class);
            out.write(" + 1, (");
            endIdx.accept(this, Integer.class);
            out.write(") - (");
            begIdx.accept(this, Integer.class);
            out.write("))");
            return true;
        }
        if (function instanceof FilterFunction_strSubstringStart) {
            Expression string = getParameter(function, 0, true);
            Expression begIdx = getParameter(function, 1, true);
            out.write("SUBSTRING(");
            string.accept(this, String.class);
            out.write(", ");
            begIdx.accept(this, Integer.class);
            out.write(" + 1)");
            return true;
        }
        if (function instanceof FilterFunction_strTrim) {
            Expression string = getParameter(function, 0, true);
            out.write("TRIM(' ' || CHAR(9) || CHAR(10) || CHAR(13) FROM (");
            string.accept(this, String.class);
            out.write("))");
            return true;
        }
        if (function instanceof FilterFunction_abs
                || function instanceof FilterFunction_abs_2
                || function instanceof FilterFunction_abs_3
                || function instanceof FilterFunction_abs_4) {
            Expression string = getParameter(function, 0, true);
            out.write("CAST (");
            out.write("ABS(");
            string.accept(this, String.class);
            out.write(")");
            out.write(" AS ");
            String dataType = null;
            if (function instanceof FilterFunction_abs) dataType = "SMALLINT";
            if (function instanceof FilterFunction_abs_2) dataType = "INT";
            if (function instanceof FilterFunction_abs_3) dataType = "FLOAT";
            if (function instanceof FilterFunction_abs_4) dataType = "DOUBLE";
            out.write(dataType);
            out.write(")");
            return true;
        }
        if (function instanceof FilterFunction_ceil) {
            Expression number = getParameter(function, 0, true);
            out.write("CEIL(");
            number.accept(this, Number.class);
            out.write(")");
            return true;
        }
        if (function instanceof FilterFunction_floor) {
            Expression number = getParameter(function, 0, true);
            out.write("FLOOR(");
            number.accept(this, Number.class);
            out.write(")");
            return true;
        }
        return false;
    }

