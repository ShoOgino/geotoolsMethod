    /**
     * Add to SDO_ELEM_INFO list for geometry and GTYPE.
     *
     * @param elemInfoList List used to gather SDO_ELEM_INFO
     * @param geom Geometry to encode
     * @param STARTING_OFFSET Starting offset in SDO_ORDINATES
     * @param GTYPE Encoding of dimension, measures and geometry type
     *
     * @throws IllegalArgumentException If geom cannot be encoded by ElemInfo
     */
    private static void elemInfo(List elemInfoList, Geometry geom,
        final int STARTING_OFFSET, final int GTYPE) {
        final int tt = TT(geom);

        switch (tt) {
        case TT.POINT:
            addElemInfo(elemInfoList, (Point) geom, STARTING_OFFSET);

            return;

        case TT.LINE:
            addElemInfo(elemInfoList, (LineString) geom, STARTING_OFFSET);

            return;

        case TT.POLYGON:
            addElemInfo(elemInfoList, (Polygon) geom, STARTING_OFFSET, GTYPE);

            return;

        case TT.MULTIPOINT:
            addElemInfo(elemInfoList, (MultiPoint) geom, STARTING_OFFSET);

            return;

        case TT.MULTILINE:
            addElemInfo(elemInfoList, (MultiLineString) geom, STARTING_OFFSET, GTYPE);

            return;

        case TT.MULTIPOLYGON:
            addElemInfo(elemInfoList, (MultiPolygon) geom, STARTING_OFFSET, GTYPE);

            return;

        case TT.COLLECTION:
            addElemInfo(elemInfoList, (GeometryCollection) geom, STARTING_OFFSET, GTYPE);

            return;
        }

        throw new IllegalArgumentException("Cannot encode JTS "
            + geom.getGeometryType() + " as SDO_ELEM_INFO "
            + "(Limitied to Point, Line, Polygon, GeometryCollection, MultiPoint,"
            + " MultiLineString and MultiPolygon)");
    }

