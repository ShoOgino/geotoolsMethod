    /**
     * Create MultiLineString as encoded by elemInfo.
     * 
     * <p>
     * Encoded as a series line of triplets in elemInfo:
     * </p>
     * 
     * <ul>
     * <li>
     * STARTING_OFFSET: position in ordinal ordinate array
     * </li>
     * <li>
     * ETYPE: 2 for Line
     * </li>
     * <li>
     * INTERPRETATION: 1 for straight edges
     * </li>
     * </ul>
     * 
     * <p></p>
     *
     * @param gf Used to construct MultiLineString
     * @param GTYPE Encoding of <b>D</b>imension, <b>L</b>RS and <b>TT</b>ype
     * @param SRID Spatial Reference System
     * @param elemInfo Interpretation of coords
     * @param triplet Triplet in elemInfo to process as a Polygon
     * @param coords Coordinates to interpret using elemInfo
     * @param N Number of triplets (or -1 for rest)
     *
     */
    private static MultiLineString createMultiLine(GeometryFactory gf,
        final int GTYPE, final int SRID, final int[] elemInfo,
        final int triplet, CoordinateSequence coords, final int N) {
        final int STARTING_OFFSET = STARTING_OFFSET(elemInfo, triplet);
        final int eTYPE = ETYPE(elemInfo, triplet);
        final int INTERPRETATION = INTERPRETATION(elemInfo, triplet);

        final int LENGTH = coords.size()*D(GTYPE);
        
        if (!(STARTING_OFFSET >= 1) || !(STARTING_OFFSET <= LENGTH))
            throw new IllegalArgumentException("ELEM_INFO STARTING_OFFSET "+STARTING_OFFSET+" inconsistent with ORDINATES length "+coords.size());
        if(!(eTYPE == ETYPE.LINE))
            throw new IllegalArgumentException("ETYPE "+eTYPE+" inconsistent with expected LINE");
        if (!(INTERPRETATION == 1)){
            // we cannot represent INTERPRETATION > 1 
            LOGGER.warning( "Could not create MultiLineString with INTERPRETATION "+INTERPRETATION+" - we can only represent 1 for straight edges");
            return null;
        }

        final int LEN = D(GTYPE) + L(GTYPE);
        final int endTriplet = (N != -1) ? (triplet + N) : (elemInfo.length / 3);

        List list = new LinkedList();
        int etype;
LINES:      // bad bad gotos jody
        for (int i = triplet;
                (i < endTriplet) && ((etype = ETYPE(elemInfo, i)) != -1);
                i++) {
            if (etype == ETYPE.LINE) {
                list.add(createLine(gf, GTYPE, SRID, elemInfo, i, coords));
            } else { // not a LinearString - get out of here

                break LINES;    // goto LINES
            }
        }

        MultiLineString lines = gf.createMultiLineString(toLineStringArray(list));
        lines.setSRID(SRID);

        return lines;
    }

