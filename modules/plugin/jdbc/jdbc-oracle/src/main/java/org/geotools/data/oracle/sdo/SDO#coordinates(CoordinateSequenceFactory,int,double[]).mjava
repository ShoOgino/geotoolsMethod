    /**
     * Construct CoordinateList as described by GTYPE.
     *
     * <p>GTYPE encodes the following information:
     *
     * <ul>
     *   <li>D: Dimension of ordinates
     *   <li>L: Ordinate that represents the LRS measure
     * </ul>
     *
     * <p>The number of ordinates per coordinate are taken to be D, and the number of ordinates
     * should be a multiple of this value.
     *
     * <p>In the Special case of GTYPE 2001 and a three ordinates are interpreted as a single
     * Coordinate rather than an error.
     *
     * <p>For 3-dimensional coordinates we assume z to be the third ordinate. If the LRS measure
     * value is stored in the third ordinate (L=3) we assume a 2-dimensional coordinate.
     *
     * @param f CoordinateSequenceFactory used to encode ordiantes for JTS
     * @param GTYPE Encoding of <b>D</b>imension, <b>L</b>RS and <b>TT</b>ype
     * @param ordinates
     * @throws IllegalArgumentException DOCUMENT ME!
     */
    public static CoordinateSequence coordinates(
            CoordinateSequenceFactory f, final int GTYPE, double[] ordinates) {
        if ((ordinates == null) || (ordinates.length == 0)) {
            return f.create(new Coordinate[0]);
        }

        final int D = SDO.D(GTYPE);
        final int L = SDO.L(GTYPE);
        final int TT = SDO.TT(GTYPE);

        //      POINT_TYPE Special Case
        //
        if ((D == 2) && (L == 0) && (TT == 1)) {
            CoordinateSequence cs = JTS.createCS(f, 1, 2);
            for (int i = 0; i < 2; i++) cs.setOrdinate(0, i, ordinates[i]);
            return cs;
        }

        final int LEN =
                D; // bugfix 20121231-BK: LEN = D instead of LEN = D + L as Oracle supports only one
        // LRS ordinate!

        if ((ordinates.length % LEN) != 0) {
            // bugfix 20121231-BK: LEN is D instead of D + L
            throw new IllegalArgumentException(
                    "Dimension D:"
                            + D
                            + " denote Coordinates "
                            + "of "
                            + LEN
                            + " ordinates. This cannot be resolved with"
                            + "an ordinate array of length "
                            + ordinates.length);
        }

        // bugfix 20121231-BK: throw exception if L > D (4 lines added)
        if (L != 0 && L > D) {
            throw new IllegalArgumentException(
                    "Dimension D:"
                            + D
                            + " and LRS with L: "
                            + L
                            + " is not supported at a position > D");
        }

        // special optimization for faster 2D rendering
        if (D == 2 && L == 0 && f instanceof LiteCoordinateSequenceFactory) {
            return ((LiteCoordinateSequenceFactory) f).create(ordinates);
        }

        OrdinateList x = new OrdinateList(ordinates, 0, LEN);
        OrdinateList y = new OrdinateList(ordinates, 1, LEN);
        OrdinateList z = null;

        // bugfix 20121231-BK: add z-Coordinate just if D >= 3 and L != 3
        if (D >= 3 && L != 3) {
            z = new OrdinateList(ordinates, 2, LEN);
        }

        if (L != 0) {
            // bugfix 20121231-BK: Oracle supports only one LRS ordinate! (removed 6 lines, added 2)
            OrdinateList m = new OrdinateList(ordinates, L - 1, LEN);

            // TODO org.geotools.geometry.jts.CoordinateSequenceFactory does not support 4
            // dimensions - thus we will get only 3 dimensions!
            return coordiantes(f, x, y, z, m);
        } else {
            return coordiantes(f, x, y, z);
        }
    }

