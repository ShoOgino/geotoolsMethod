    /**
     * Allows specification of <code>INTERPRETATION</code> used to interpret <code>geom</code>.
     *
     * <p>Provides the INTERPRETATION value for the ELEM_INFO triplet of (STARTING_OFFSET, ETYPE,
     * INTERPRETATION).
     *
     * @param geom Geometry to encode
     * @param etype ETYPE value requiring an INTERPREATION
     * @return INTERPRETATION ELEM_INFO entry for geom given etype
     * @throws IllegalArgumentException If asked to encode a curve
     */
    public static int elemInfoInterpretation(Geometry geom, final int etype) {
        switch (etype) {
            case ETYPE.CUSTOM: // customize for your own Geometries
                break;

            case ETYPE.POINT:
                if (geom instanceof Point) {
                    return 1;
                }

                if (geom instanceof MultiPoint) {
                    return ((MultiPoint) geom).getNumGeometries();
                }

                break;

            case ETYPE.LINE:
                if (isCurve((LineString) geom)) {
                    return 2;
                }

                return 1;

            case ETYPE.POLYGON:
            case ETYPE.POLYGON_EXTERIOR:
            case ETYPE.POLYGON_INTERIOR:
                if (geom instanceof Polygon) {
                    Polygon polygon = (Polygon) geom;

                    if (isCurve(polygon)) {
                        return 2;
                    }

                    if (isRectangle(polygon)) {
                        return 3;
                    }

                    if (isCircle(polygon)) {
                        return 4;
                    }
                }

                return 1;

            case ETYPE.COMPOUND:
                throw new IllegalArgumentException(
                        "JTS LineStrings are not composed of curves and lines.");

            case ETYPE.COMPOUND_POLYGON:
            case ETYPE.COMPOUND_POLYGON_INTERIOR:
            case ETYPE.COMPOUND_POLYGON_EXTERIOR:
                throw new IllegalArgumentException(
                        "JTS Polygons are not composed of curves and lines.");
        }

        throw new IllegalArgumentException(
                "Cannot encode JTS "
                        + geom.getGeometryType()
                        + " as "
                        + "SDO_INTERPRETATION (Limitied to Point, Line, Polygon, "
                        + "GeometryCollection, MultiPoint, MultiLineString and MultiPolygon)");
    }

