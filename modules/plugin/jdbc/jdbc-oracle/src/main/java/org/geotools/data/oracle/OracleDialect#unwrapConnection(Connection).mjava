    /**
     * Obtains the native oracle connection object given a database connecetion.
     *
     */
    OracleConnection unwrapConnection( Connection cx ) throws SQLException {
        if (cx == null) {
            return null;
        }
        
        if ( cx instanceof OracleConnection ) {
            return (OracleConnection) cx;
        }
        
        try {
            // first lookup ever? (we have UNWRAPPER_NOT_FOUND as a sentinel for a lookup that
            // will not work (we assume the datasource will always return connections we can
            // unwrap, or never).
            if (uw == null) {
                UnWrapper unwrapper = DataSourceFinder.getUnWrapper(cx);
                if (unwrapper == null) {
                    uw = UNWRAPPER_NOT_FOUND;
                } else {
                    uw = unwrapper;
                }
            }
            if (uw != null && uw != UNWRAPPER_NOT_FOUND) {
                Connection uwcx = uw.unwrap( cx );
                if ( uwcx != null && uwcx instanceof OracleConnection ) {
                    return (OracleConnection) uwcx;
                }
            } else if (cx instanceof Wrapper) {
                // try to use java 6 unwrapping
                try {
                    Wrapper w = cx;
                    if (w.isWrapperFor(OracleConnection.class)) {
                        return w.unwrap(OracleConnection.class);
                    }
                } catch (Throwable t) {
                    // not a mistake, old DBCP versions will throw an Error here, we need to catch
                    // it
                    LOGGER.log(Level.FINER, "Failed to unwrap connection using java 6 facilities",
                            t);
                }
            }
        } catch(IOException e) {
            throw (SQLException) new SQLException(
                    "Could not obtain native oracle connection.").initCause(e);
        }
        
        throw new SQLException( "Could not obtain native oracle connection for " + cx.getClass());
    }

