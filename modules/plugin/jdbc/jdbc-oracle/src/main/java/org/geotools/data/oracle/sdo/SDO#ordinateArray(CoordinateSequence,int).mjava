    /**
     * Package up array of requested ordinate, regardless of geometry
     *
     * <p>Example numbering: for (x y g m) dimension==2, measure==2
     *
     * <ul>
     *   <li>0: x ordinate array
     *   <li>1: y ordinate array
     *   <li>2: g ordinate array
     *   <li>3: m ordinate array
     * </ul>
     *
     * @param coords
     * @param ordinate
     */
    public static double[] ordinateArray(CoordinateSequence coords, int ordinate) {
        if (coords instanceof CoordinateAccess) {
            CoordinateAccess access = (CoordinateAccess) coords;

            return access.toOrdinateArray(ordinate);
        } else {
            final int LENGTH = coords.size();
            Coordinate c;
            double[] array = new double[LENGTH];

            if (ordinate == 0) {
                for (int i = 0; i < LENGTH; i++) {
                    c = coords.getCoordinate(i);
                    array[i] = (c != null) ? c.x : Double.NaN;
                }
            } else if (ordinate == 1) {
                for (int i = 0; i < LENGTH; i++) {
                    c = coords.getCoordinate(i);
                    array[i] = (c != null) ? c.y : Double.NaN;
                }
            } else if (ordinate == 2) {
                for (int i = 0; i < LENGTH; i++) {
                    c = coords.getCoordinate(i);
                    array[i] = (c != null) ? c.z : Double.NaN;
                }
            } else {
                // default to NaN
                for (int i = 0; i < LENGTH; i++) {
                    array[i] = Double.NaN;
                }
            }

            return array;
        }
    }

