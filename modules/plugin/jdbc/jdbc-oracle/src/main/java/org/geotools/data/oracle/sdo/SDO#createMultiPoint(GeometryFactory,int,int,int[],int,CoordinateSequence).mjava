    /**
     * Create MultiPoint as encoded by elemInfo.
     *
     * <p>Encoded as a single triplet in elemInfo:
     *
     * <ul>
     *   <li>STARTING_OFFSET: position in ordinal ordinate array
     *   <li>ETYPE: 1 for Point
     *   <li>INTERPRETATION: number of points
     * </ul>
     *
     * @param gf Used to construct polygon
     * @param GTYPE Encoding of <b>D</b>imension, <b>L</b>RS and <b>TT</b>ype
     * @param SRID Spatial Reference System
     * @param elemInfo Interpretation of coords
     * @param triplet Triplet in elemInfo to process as a Polygon
     * @param coords Coordinates to interpret using elemInfo
     */
    private static MultiPoint createMultiPoint(
            GeometryFactory gf,
            final int GTYPE,
            final int SRID,
            final int[] elemInfo,
            final int triplet,
            CoordinateSequence coords) {
        final int STARTING_OFFSET = STARTING_OFFSET(elemInfo, triplet);
        final int eTYPE = ETYPE(elemInfo, triplet);
        final int INTERPRETATION = INTERPRETATION(elemInfo, triplet);
        final int LENGTH = coords.size() * D(GTYPE);

        if (!(STARTING_OFFSET >= 1) || !(STARTING_OFFSET <= LENGTH))
            throw new IllegalArgumentException(
                    "ELEM_INFO STARTING_OFFSET "
                            + STARTING_OFFSET
                            + " inconsistent with ORDINATES length "
                            + coords.size());
        if (!(eTYPE == ETYPE.POINT))
            throw new IllegalArgumentException(
                    "ETYPE " + eTYPE + " inconsistent with expected POINT");
        // CH- changed to >= 1, for GEOS-437, Jody and I looked at docs
        // and multipoint is a superset of point, so it should be fine,
        // for cases when there is just one point.  Bart is testing.
        if (!(INTERPRETATION >= 1)) {
            LOGGER.warning(
                    "Could not create MultiPoint with INTERPRETATION "
                            + INTERPRETATION
                            + " - representing the number of points");
            return null;
        }

        final int LEN = D(GTYPE);

        int start = (STARTING_OFFSET - 1) / LEN;
        int end = start + INTERPRETATION;

        MultiPoint points =
                gf.createMultiPoint(subList(gf.getCoordinateSequenceFactory(), coords, start, end));
        points.setSRID(SRID);

        return points;
    }

