    /**
     * Produce <code>SDO_ETYPE</code> for geometry description as stored in the
     * <code>SDO_ELEM_INFO</code>.
     * 
     * <p>
     * Describes how Ordinates are ordered:
     * </p>
     * <pre><code><b>
     * Value Elements Meaning</b>
     *    0           Custom Geometry (like spline) 
     *    1  simple   Point (or Points)
     *    2  simple   Line (or Lines)
     *    3           polygon ring of unknown order (discouraged update to 1003 or 2003)
     * 1003  simple   polygon ring (1 exterior counterclockwise order)
     * 2003  simple   polygon ring (2 interior clockwise order)
     *    4  compound series defines a linestring
     *    5  compound series defines a polygon ring of unknown order (discouraged)
     * 1005  compound series defines exterior polygon ring (counterclockwise order)
     * 2005  compound series defines interior polygon ring (clockwise order)
     * </code></pre>
     * 
     * <p>
     * Keep in mind:
     * </p>
     * 
     * <ul>
     * <li>
     * <code>simple</code> elements are defined by a single triplet entry in
     * the <code>SDO_ELEM_INFO</code> array
     * </li>
     * <li>
     * <code>compound</code> elements are defined by a header triplet, and a
     * series of triplets for the parts. Elements in a compound element share
     * first and last points.
     * </li>
     * <li>
     * We are not allowed to mix 1 digit and 4 digit values for ETYPE and GTYPE
     * in a single geometry
     * </li>
     * </ul>
     * 
     * <p>
     * This whole mess describes ordinates as part of
     * <code>SDO_ELEM_INFO</code> array. data type.
     * </p>
     *
     * @param geom Geometry being represented
     *
     * @return Descriptionof Ordinates representation
     *
     * @throws IllegalArgumentException
     */
    protected static int elemInfoEType(Geometry geom) {
        switch (TT(geom)) {
        case TT.UNKNOWN:
            return ETYPE.CUSTOM;

        case TT.POINT:
            return ETYPE.POINT;

        case TT.LINE:
            return ETYPE.LINE;

        case TT.POLYGON:
            return isExterior((Polygon) geom)
            ? ETYPE.POLYGON_EXTERIOR // cc order
            : ETYPE.POLYGON_INTERIOR; // ccw order

        default:

            // should never happen!
            throw new IllegalArgumentException("Unknown encoding of SDO_GTYPE");
        }
    }

