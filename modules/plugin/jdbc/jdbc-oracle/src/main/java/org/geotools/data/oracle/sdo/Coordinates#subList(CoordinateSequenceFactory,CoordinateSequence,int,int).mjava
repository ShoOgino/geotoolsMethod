    /**
     * Sublist opperation for CoordinateSequence.
     * 
     * <p>
     * Opperates in the same manner as corrasponding java util List method.
     * </p>
     *
     * @param factory factory used to manage sequence
     * @param sequence coordinate sequence
     * @param fromIndex - low endpoint (inclusive) of the subList.
     * @param toIndex - high endpoint (exclusive) of the subList.
     *
     * @return sublist of sequence (start,end] as provided by factory
     */
    public static CoordinateSequence subList(
        CoordinateSequenceFactory factory, CoordinateSequence sequence,
        int fromIndex, int toIndex) {
        if ((fromIndex == 0) && (toIndex == sequence.size())) {
            return sequence; // same list so just return it
        }

        if (sequence instanceof List) {
            List sublist = ((List) sequence).subList(fromIndex, toIndex);

            if (sublist instanceof CoordinateSequence) {
                return (CoordinateSequence) sublist;
            }
        }

        if (sequence instanceof CoordinateAccess) {
            CoordinateAccess access = (CoordinateAccess) sequence;
            double[][] coordArray = access.toOrdinateArrays();
            Object[] attributeArray = access.toAttributeArrays();

            double[][] subCoordArray = new double[access.getDimension()][];
            Object[][] subAttributeArray = new Object[access.getNumAttributes()][];

            //							System.out.println("Dimension = " + access.getDimension());
            //							System.out.println("coordArray.length = " + coordArray.length);
            //							System.out.println("fromIndex= " + fromIndex + ", toIndex= " + toIndex);
            //							System.out.println("coordArray: ");
            //							System.out.print("X   ");
            //							for (int p=0; p<coordArray[0].length; p++)
            //								System.out.print(coordArray[0][p] + " ");
            //							System.out.print("\nY   ");
            //							for (int p=0; p<coordArray[1].length; p++)
            //								System.out.print(coordArray[1][p] + " ");
            //							System.out.println("");
            //								
            //							System.out.println("Num attributes = " + access.getNumAttributes());
            //							System.out.println("attributeArray.length = " + attributeArray.length);
            //							System.out.println("attributeArray: ");
            //							System.out.print("Z   ");
            //							for (int p=0; p<attributeArray[0].length; p++)
            //								System.out.print(attributeArray[0][p] + " ");
            //							System.out.print("\nT   ");
            //							for (int p=0; p<attributeArray[1].length; p++)
            //								System.out.print(attributeArray[1][p] + " ");
            //							System.out.println("");
            //			try
            //			{
            for (int i = 0; i < access.getDimension(); i++) {
                subCoordArray[i] = new OrdinateList(coordArray[i], 0, 1,
                        fromIndex, toIndex).toDoubleArray();
            }

            //			}
            //			catch (ArrayIndexOutOfBoundsException e)
            //			{
            //				e.printStackTrace();
            //				System.out.println("Dimension = " + access.getDimension());
            //				System.out.println("coordArray.length = " + coordArray.length);
            //				System.out.println("fromIndex= " + fromIndex + ", toIndex= " + toIndex);
            //				System.out.println("coordArray: ");
            //				System.out.print("X   ");
            //				for (int p=0; p<coordArray[0].length; p++)
            //					System.out.print(coordArray[0][p] + " ");
            //				System.out.print("\nY   ");
            //				for (int p=0; p<coordArray[1].length; p++)
            //					System.out.print(coordArray[1][p] + " ");
            //				System.out.println("");
            //			}
            for (int i = 0; i < access.getNumAttributes(); i++) {
                subAttributeArray[i] = new AttributeList(attributeArray[i], 0,
                        1, fromIndex, toIndex).toObjectArray();
            }

            System.out.println("subCoordArray.length = " + subCoordArray.length);
            System.out.println("subCoordArray: ");
            System.out.print("X   ");

            for (int p = 0; p < subCoordArray[0].length; p++)
                System.out.print(subCoordArray[0][p] + " ");

            System.out.print("\nY   ");

            for (int p = 0; p < subCoordArray[1].length; p++)
                System.out.print(subCoordArray[1][p] + " ");

            System.out.println("");

            System.out.println("subAttributeArray.length = "
                + subAttributeArray.length);
            System.out.println("subAttributeArray: ");
            System.out.print("Z   ");

            for (int p = 0; p < subAttributeArray[0].length; p++)
                System.out.print(subAttributeArray[0][p] + " ");

            System.out.print("\nT   ");

            for (int p = 0; p < subAttributeArray[1].length; p++)
                System.out.print(subAttributeArray[1][p] + " ");

            System.out.println("");

            CoordinateAccess c = (CoordinateAccess) ((CoordinateAccessFactory) factory)
                .create(subCoordArray, subAttributeArray);

            return c;
        }

        // handle coordinate sequence dimension correctly
        int size = toIndex - fromIndex;
        CoordinateSequence newSeq = factory.create(size, sequence.getDimension());
        CoordinateSequences.copy(sequence, fromIndex, newSeq, 0, size);
        return newSeq;
     }

