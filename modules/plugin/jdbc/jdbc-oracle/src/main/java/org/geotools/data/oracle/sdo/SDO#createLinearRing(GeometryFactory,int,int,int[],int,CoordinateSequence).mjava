    /**
     * Create Linear Ring for exterior/interior polygon ELEM_INFO triplets.
     * 
     * <p>
     * Encoded as a single triplet in elemInfo:
     * </p>
     * 
     * <ul>
     * <li>
     * STARTING_OFFSET: position in ordinal ordinate array
     * </li>
     * <li>
     * ETYPE: 1003 (exterior) or 2003 (interior) or 3 (unknown order)
     * </li>
     * <li>
     * INTERPRETATION: 1 for strait edges, 3 for rectanlge
     * </li>
     * </ul>
     * 
     * <p>
     * The dimensionality of GTYPE will be used to transalte the
     * <code>STARTING_OFFSET</code> provided by elemInfo into an index into
     * <code>coords</code>.
     * </p>
     *
     * @param gf
     * @param GTYPE Encoding of <b>D</b>imension, <b>L</b>RS and <b>TT</b>ype
     * @param SRID
     * @param elemInfo
     * @param triplet
     * @param coords
     *
     * @return LinearRing
     *
     * @throws IllegalArgumentException If circle, or curve is requested
     */
    private static LinearRing createLinearRing(GeometryFactory gf,
        final int GTYPE, final int SRID, final int[] elemInfo,
        final int triplet, CoordinateSequence coords) {
            
        final int STARTING_OFFSET = STARTING_OFFSET(elemInfo, triplet);
        final int eTYPE = ETYPE(elemInfo, triplet);
        final int INTERPRETATION = INTERPRETATION(elemInfo, triplet);
        final int LENGTH = coords.size()*D(GTYPE);
        
        if (!(STARTING_OFFSET >= 1) || !(STARTING_OFFSET <= LENGTH))
            throw new IllegalArgumentException("ELEM_INFO STARTING_OFFSET "+STARTING_OFFSET+" inconsistent with ORDINATES length "+coords.size());
        
        ensure( "ETYPE {0} must be expected POLYGON or POLYGON_EXTERIOR (one of {1})",
                eTYPE, new int[]{ ETYPE.POLYGON, ETYPE.POLYGON_EXTERIOR, ETYPE.POLYGON_INTERIOR, ETYPE.FACE_EXTERIOR, ETYPE.FACE_EXTERIOR } );
        if (!(INTERPRETATION == 1) && !(INTERPRETATION == 3)){
            LOGGER.warning( "Could not create LinearRing with INTERPRETATION "+INTERPRETATION+" - we can only support 1 for straight edges");
            return null;
        }
        LinearRing ring;

        if (INTERPRETATION == 1) {
            ring = gf.createLinearRing(subList(
                        gf.getCoordinateSequenceFactory(), coords, GTYPE,
                        elemInfo, triplet));
        } else if (INTERPRETATION == 3) {
            // rectangle does not maintain measures
            //
            CoordinateSequence ext = subList(gf.getCoordinateSequenceFactory(),
                    coords, GTYPE, elemInfo, triplet);
            Coordinate min = ext.getCoordinate(0);
            Coordinate max = ext.getCoordinate(1);
            ring = gf.createLinearRing(new Coordinate[] {
                        min, new Coordinate(max.x, min.y), max,
                        new Coordinate(min.x, max.y), min
                    });
        } else {
            // May be INTERPRETATION == 2 for curves, or 4 for circle
            //
            throw new IllegalArgumentException("ELEM_INFO INTERPRETAION "
                + elemInfo[2] + " not supported"
                + "for JTS Polygon Linear Rings."
                + "ELEM_INFO INTERPRETAION 1 and 3 are supported");
        }

        ring.setSRID(SRID);

        return ring;
    }

