    /**
     * Create Point as encoded.
     *
     * @param GTYPE Encoding of <b>D</b>imension, <b>L</b>RS and <b>TT</b>ype
     * @return Point
     */
    private static Point createPoint(
            GeometryFactory gf,
            final int GTYPE,
            final int SRID,
            final int[] elemInfo,
            final int element,
            CoordinateSequence coords) {
        final int STARTING_OFFSET = STARTING_OFFSET(elemInfo, element);
        final int etype = ETYPE(elemInfo, element);
        final int INTERPRETATION = INTERPRETATION(elemInfo, element);
        final int LENGTH = coords.size() * D(GTYPE);

        if (!(STARTING_OFFSET >= 1) || !(STARTING_OFFSET <= LENGTH))
            throw new IllegalArgumentException("Invalid ELEM_INFO STARTING_OFFSET ");
        if (etype != ETYPE.POINT)
            throw new IllegalArgumentException(
                    "ETYPE " + etype + " inconsistent with expected POINT");
        if (INTERPRETATION != 1) {
            LOGGER.warning(
                    "Could not create JTS Point with INTERPRETATION "
                            + INTERPRETATION
                            + " - we only expect 1 for a single point");
            return null;
        }

        Point point =
                gf.createPoint(
                        subList(
                                gf.getCoordinateSequenceFactory(),
                                coords,
                                GTYPE,
                                elemInfo,
                                element,
                                false));

        // Point point = gf.createPoint( coords.getCoordinate( index ) );
        point.setSRID(SRID);

        return point;
    }

