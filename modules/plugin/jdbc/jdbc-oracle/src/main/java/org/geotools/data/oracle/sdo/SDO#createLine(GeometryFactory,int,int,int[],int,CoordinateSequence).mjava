    /**
     * Create LineString as encoded.
     *
     * @param gf
     * @param GTYPE Encoding of <b>D</b>imension, <b>L</b>RS and <b>TT</b>ype
     * @param SRID
     * @param elemInfo
     * @param triplet
     * @param coords
     *
     *
     * @throws IllegalArgumentException If asked to create a curve
     */
    private static LineString createLine(GeometryFactory gf, final int GTYPE,
        final int SRID, final int[] elemInfo, final int triplet,
        CoordinateSequence coords) {
        final int STARTING_OFFSET = STARTING_OFFSET(elemInfo, triplet);
        final int etype = ETYPE(elemInfo, triplet);
        final int INTERPRETATION = INTERPRETATION(elemInfo, triplet);

        if (etype != ETYPE.LINE)
            return null;
        if (INTERPRETATION != 1){
            LOGGER.warning( "Could not create JTS LineString with INTERPRETATION "+INTERPRETATION+" - we can only support 1 for straight edges");
            return null;
        }
            

        if (INTERPRETATION != 1) {
            // May be INTERPRETATION == 2 for curves
            throw new IllegalArgumentException("ELEM_INFO INTERPRETAION "
                + INTERPRETATION + " not supported"
                + "by JTS LineString.  Straight edges"
                + "( ELEM_INFO INTERPRETAION 1) is supported");
        }

        LineString line = new LineString(subList(
                    gf.getCoordinateSequenceFactory(), coords, GTYPE, elemInfo,
                    triplet), gf);
        line.setSRID(SRID);

        return line;
    }

