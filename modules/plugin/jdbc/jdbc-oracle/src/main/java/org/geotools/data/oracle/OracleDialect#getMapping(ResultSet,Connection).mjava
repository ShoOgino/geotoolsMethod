    @Override
    public Class<?> getMapping(ResultSet columnMetaData, Connection cx) throws SQLException {
        final int TABLE_NAME = 3;
        final int COLUMN_NAME = 4;
        final int TYPE_NAME = 6;
        String typeName = columnMetaData.getString(TYPE_NAME);
		if (typeName.equals("SDO_GEOMETRY")) {
	            String tableName = columnMetaData.getString(TABLE_NAME);
	            String columnName = columnMetaData.getString(COLUMN_NAME);
	            String schema = dataStore.getDatabaseSchema();

                    if (canAccessUserViews(cx)) {
                        //we only try this block if we are able to access the
                        //user_sdo views

                        //setup the sql to use for the USER_SDO table
                        String userSdoSqlStatement = "SELECT META.SDO_LAYER_GTYPE\n" +
                            "FROM ALL_INDEXES INFO\n" +
                            "INNER JOIN MDSYS.USER_SDO_INDEX_METADATA META\n" +
                            "ON INFO.INDEX_NAME = META.SDO_INDEX_NAME\n" +
                            "WHERE INFO.TABLE_NAME = '" + tableName + "'\n" +
                            "AND REPLACE(meta.sdo_column_name, '\"') = '" + columnName + "'\n";

                        if(schema != null && !"".equals(schema)) {
                            userSdoSqlStatement += " AND INFO.TABLE_OWNER = '" + schema + "'";
                        }

                        Statement userSdoStatement = null;
                        ResultSet userSdoResult = null;
                        try {
                            userSdoStatement = cx.createStatement();
                            LOGGER.log(Level.FINE, "Geometry type check; {0} ", userSdoSqlStatement);
                            userSdoResult = userSdoStatement.executeQuery(userSdoSqlStatement);
                            if (userSdoResult.next()) {
                                String gType = userSdoResult.getString(1);
                                Class geometryClass = (Class) TT.GEOM_CLASSES.get(gType);
                                if(geometryClass == null)
                                    geometryClass = Geometry.class;

                                return geometryClass;
                            }
                        } finally {
                            dataStore.closeSafe(userSdoResult);
                            dataStore.closeSafe(userSdoStatement);
                        }
                    }

                    Statement allSdoStatement = null;
                    ResultSet allSdoResult = null;
                    try {
                        //setup the sql to use for the ALL_SDO table
                        String allSdoSqlStatement = "SELECT META.SDO_LAYER_GTYPE\n" +
                            "FROM ALL_INDEXES INFO\n" +
                            "INNER JOIN MDSYS.ALL_SDO_INDEX_METADATA META\n" +
                            "ON INFO.INDEX_NAME = META.SDO_INDEX_NAME\n" +
                            "WHERE INFO.TABLE_NAME = '" + tableName + "'\n" +
                            "AND REPLACE(meta.sdo_column_name, '\"') = '" + columnName + "'\n";

                        if(schema != null && !"".equals(schema)) {
                            allSdoSqlStatement += " AND INFO.TABLE_OWNER = '" + schema + "'";
                            allSdoSqlStatement += " AND META.SDO_INDEX_OWNER = '" + schema + "'";
                        }

                        allSdoStatement = cx.createStatement();
                        LOGGER.log(Level.FINE, "Geometry type check; {0} ", allSdoSqlStatement);
                        allSdoResult = allSdoStatement.executeQuery(allSdoSqlStatement);
                        if (allSdoResult.next()) {
                            String gType = allSdoResult.getString(1);
                            Class geometryClass = (Class) TT.GEOM_CLASSES.get(gType);
                            if(geometryClass == null)
                                geometryClass = Geometry.class;

                            return geometryClass;
                        } else {
                            //must default at this point, this is as far as we can go
                            return Geometry.class;
                        }

                    } finally {
                        dataStore.closeSafe(allSdoResult);
                        dataStore.closeSafe(allSdoStatement);
                    }

		} else {
			// if we know, return non null value, otherwise returning
			// null will force the datatore to figure it out using 
			// jdbc metadata
			return TYPES_TO_CLASSES.get(typeName);
		}
    }

