    /**
     * Reads the geometry type from the first column returned by executing the specified SQL statement
     * @param cx
     * @param sql
     * @return
     * @throws SQLException
     */
    private Class readGeometryClassFromStatement(Connection cx, String sql, List<String> parameters)
            throws SQLException {
        PreparedStatement st = null;
        ResultSet rs = null;
        try {
            LOGGER.log(Level.FINE, "Geometry type check; {0} [ parameters = {1} ]", new Object[] { sql, parameters });
            st = cx.prepareStatement(sql);
            for (int i = 0; i < parameters.size(); i++) {
                st.setString(i+1, parameters.get(i));
            }
            rs = st.executeQuery();
            if (rs.next()) {
                String gType = rs.getString(1);
                Class geometryClass = (Class) TT.GEOM_CLASSES.get(gType);
                if(geometryClass == null) {
                    // if there was a record but it's not a recognized geometry type fall back on
                    // geometry for backwards compatibility, but at least log the info
                    LOGGER.fine("Unrecognized geometry type " + gType + " falling back on generic 'GEOMETRY'");
                    geometryClass = Geometry.class;
                }

                return geometryClass;
            } 
        } finally {
            dataStore.closeSafe(rs);
            dataStore.closeSafe(st);
        }
        
        return null;
    }

