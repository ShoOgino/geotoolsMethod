    /**
     * Consturct geometry with SDO encoded information over a CoordinateList.
     *
     * <p>Helpful when dealing construction Geometries with your own Coordinate Types. The
     * dimensionality specified in GTYPE will be used to interpret the offsets in elemInfo.
     *
     * @param gf
     * @param GTYPE Encoding of <b>D</b>imension, <b>L</b>RS and <b>TT</b>ype
     * @param SRID
     * @param elemInfo
     * @param triplet DOCUMENT ME!
     * @param coords
     * @param N Number of triplets (-1 for unknown/don't care)
     * @return Geometry as encoded, or null w/ log if it cannot be represented via JTS
     */
    public static Geometry create(
            GeometryFactory gf,
            final int GTYPE,
            final int SRID,
            final int[] elemInfo,
            final int triplet,
            CoordinateSequence coords,
            final int N) {
        CurvedGeometryFactory curvedFactory = getCurvedGeometryFactory(gf);

        switch (SDO.TT(GTYPE)) {
            case TT.POINT:
                return createPoint(curvedFactory, GTYPE, SRID, elemInfo, triplet, coords);

            case TT.LINE:
                return createLine(curvedFactory, GTYPE, SRID, elemInfo, triplet, coords, false);

            case TT.POLYGON:
                return createPolygon(curvedFactory, GTYPE, SRID, elemInfo, triplet, coords);

            case TT.MULTIPOINT:
                return createMultiPoint(curvedFactory, GTYPE, SRID, elemInfo, triplet, coords);

            case TT.MULTILINE:
                return createMultiLine(curvedFactory, GTYPE, SRID, elemInfo, triplet, coords, N);

            case TT.MULTIPOLYGON:
                return createMultiPolygon(
                        curvedFactory, GTYPE, SRID, elemInfo, triplet, coords, N, false);

            case TT.COLLECTION:
                return createCollection(curvedFactory, GTYPE, SRID, elemInfo, triplet, coords, N);

            case TT.SOLID:
                return createMultiPolygon(
                        curvedFactory, GTYPE, SRID, elemInfo, triplet, coords, N, true);

            case TT.UNKNOWN:
            default:
                LOGGER.warning(
                        "Cannot represent provided SDO STRUCT (GTYPE ="
                                + GTYPE
                                + ") using JTS Geometry");
                return null;
        }
    }

