    /**
     * Consturct geometry with SDO encoded information over a CoordinateList.
     * 
     * <p>
     * Helpful when dealing construction Geometries with your own Coordiante
     * Types. The dimensionality specified in GTYPE will be used to interpret
     * the offsets in elemInfo.
     * </p>
     *
     * @param gf
     * @param GTYPE Encoding of <b>D</b>imension, <b>L</b>RS and <b>TT</b>ype
     * @param SRID
     * @param elemInfo
     * @param triplet DOCUMENT ME!
     * @param coords
     * @param N Number of triplets (-1 for unknown/don't care)
     *
     * @return Geometry as encoded, or null w/ log if it cannot be represented via JTS
     */
    public static Geometry create(GeometryFactory gf, final int GTYPE,
        final int SRID, final int[] elemInfo, final int triplet,
        CoordinateSequence coords, final int N) {
        switch (SDO.TT(GTYPE)) {
        case TT.POINT:
            return createPoint(gf, GTYPE, SRID, elemInfo, triplet, coords);

        case TT.LINE:
            return createLine(gf, GTYPE, SRID, elemInfo, triplet, coords);

        case TT.POLYGON:
            return createPolygon(gf, GTYPE, SRID, elemInfo, triplet, coords);

        case TT.MULTIPOINT:
            return createMultiPoint(gf, GTYPE, SRID, elemInfo, triplet, coords);

        case TT.MULTILINE:
            return createMultiLine(gf, GTYPE, SRID, elemInfo, triplet, coords, N);

        case TT.MULTIPOLYGON:
            return createMultiPolygon(gf, GTYPE, SRID, elemInfo, triplet,
                coords, N, false);

        case TT.COLLECTION:
            return createCollection(gf, GTYPE, SRID, elemInfo, triplet, coords,
                N);
            
        case TT.SOLID:
            return createMultiPolygon(gf, GTYPE, SRID, elemInfo, triplet,
                    coords, N, true);
        
        case TT.UNKNOWN:  
        default:
            LOGGER.warning( "Cannot represent provided SDO STRUCT (GTYPE ="+GTYPE+") using JTS Geometry");
            return null;    
        }        
    }

