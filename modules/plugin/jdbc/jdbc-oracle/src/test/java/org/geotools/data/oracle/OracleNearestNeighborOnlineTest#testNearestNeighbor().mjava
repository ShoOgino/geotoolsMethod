    public void testNearestNeighbor() throws Exception {
        FilterFactory2 ff = CommonFactoryFinder.getFilterFactory2(null);
        ContentFeatureSource source = dataStore.getFeatureSource(tname("NEIGHBORS"));

        try (SimpleFeatureIterator features = execSdoNN(source, ff, -10, -10, 1, -1, null)) {
            assertTrue(features.hasNext());
            SimpleFeature f = features.next();
            Point point = (Point) f.getDefaultGeometry();
            assertEquals(0.0, point.getCoordinate().x);
            assertEquals(0.0, point.getCoordinate().y);
            assertFalse(features.hasNext());
        }

        try (SimpleFeatureIterator features = execSdoNN(source, ff, 100, 100, 1, -1, null)) {
            assertTrue(features.hasNext());
            SimpleFeature f = features.next();
            Point point = (Point) f.getDefaultGeometry();
            assertEquals(40.0, point.getCoordinate().x);
            assertEquals(40.0, point.getCoordinate().y);
            assertFalse(features.hasNext());
        }

        try (SimpleFeatureIterator features = execSdoNN(source, ff, -10, -10, 3, -1, null)) {
            checkSizeAndMagicNumber(features, 3, -1);
        }

        // test using sdo_batch_size hint
        try (SimpleFeatureIterator features =
                execSdoNN(source, ff, -10, -10, 3, 10, "magicnumber >= 10")) {
            checkSizeAndMagicNumber(features, 3, 10);
        }

        // test using CQL and no batch_size
        try (SimpleFeatureIterator features =
                execSdoNN(source, ff, -10, -10, 3, -1, "magicnumber >= 15")) {
            checkSizeAndMagicNumber(features, 1, 10);
        }

        // test with limit greater than rows
        try (SimpleFeatureIterator features = execSdoNN(source, ff, -10, -10, 50, -1, null)) {
            checkSizeAndMagicNumber(features, 25, -1);
        }
    }

