	public void testOverviewsQuality() throws IOException {
        final File file = TestData.file(this, "etopo.tif");
        
        ///////////////////////////////////////////////////////////////////////
        //
        // HINTS
        //
        ///////////////////////////////////////////////////////////////////////
        Hints hints = new Hints();
        hints.put(Hints.OVERVIEW_POLICY, OverviewPolicy.QUALITY);
        WorldImageReader wiReader = new WorldImageReader(file,hints);
        
        // between 16 and 9, any value should report the match of 16
        assertEquals(4, getChosenOverview(16,wiReader));
        assertEquals(4, getChosenOverview(15,wiReader));
        assertEquals(4, getChosenOverview(14,wiReader));
        assertEquals(4, getChosenOverview(13,wiReader));
        assertEquals(4, getChosenOverview(12,wiReader));
        assertEquals(4, getChosenOverview(11,wiReader));
        assertEquals(4, getChosenOverview(10,wiReader));
        
        ///////////////////////////////////////////////////////////////////////
        //
        // PARAMETER
        //
        ///////////////////////////////////////////////////////////////////////
        //parameter ovverrides hints
        hints.put(Hints.OVERVIEW_POLICY, OverviewPolicy.NEAREST);
        wiReader = new WorldImageReader(file, hints);
		final ParameterValue policy = (ParameterValue) ((AbstractGridFormat) wiReader
				.getFormat()).OVERVIEW_POLICY.createValue();	
		policy.setValue(OverviewPolicy.QUALITY);
		
        // between 16 and 9, any value should report the match of 16
        assertEquals(4, getChosenOverview(16,wiReader,policy));
        assertEquals(4, getChosenOverview(15,wiReader,policy));
        assertEquals(4, getChosenOverview(14,wiReader,policy));
        assertEquals(4, getChosenOverview(13,wiReader,policy));
        assertEquals(4, getChosenOverview(12,wiReader,policy));
        assertEquals(4, getChosenOverview(11,wiReader,policy));
        assertEquals(4, getChosenOverview(10,wiReader,policy));
    }

