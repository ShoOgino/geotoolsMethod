	/**
	 * This method simply read all the respecting a predefined pattern inside
	 * the testData directory and then it tries to read, write and re-read them
	 * back. All the possible errors are caught.
	 * 
	 * @throws MalformedURLException
	 * @throws IOException
	 * @throws IllegalArgumentException
	 * @throws FactoryException
	 * @throws TransformException
	 * @throws ParseException
	 * @throws ParseException
	 */
	public void testWrite() throws MalformedURLException, IOException,
			IllegalArgumentException, FactoryException, TransformException,
			ParseException {

		// checking test data directory for all kind of inputs
		final File test_data_dir = TestData.file(this, null);
		final String[] fileList = test_data_dir.list(new MyFileFilter());
		final int length = fileList.length;
		final int numSupportedFormat = supportedFormat.length;
		for (int j = 0; j < numSupportedFormat; j++) {
			format = supportedFormat[j];
			final StringBuffer buff = new StringBuffer("Format is ").append(
					format).append("\n");
			for (int i = 0; i < length; i++) {
				buff.append(" file is ").append(fileList[i]).append("\n");
				// url
				final URL url = TestData.getResource(this, fileList[i]);
				assertTrue(url != null);
				this.write(url);

				// getting file
				final File file = TestData.file(this, fileList[i]);
				assertTrue(file != null);
				// starting write test
				this.write(file);

			}
			// logger.info(buff.toString());
			assertTrue( "jpeg expected", buff.indexOf("Format is jpeg") != -1 );
			assertTrue( "box_gcp.tif expected", buff.indexOf("box_gcp.tif") != -1 );
			assertTrue( "etopo.tif expected", buff.indexOf("etopo.tif") != -1 );
			assertTrue( "Pk50095.tif expected", buff.indexOf("Pk50095.tif") != -1 );
			assertTrue( "usa.tif expected", buff.indexOf("usa.tif") != -1 );
		}

	}

