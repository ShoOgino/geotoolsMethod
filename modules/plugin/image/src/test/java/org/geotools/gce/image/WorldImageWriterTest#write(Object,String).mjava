	/**
	 * This method is responsible for loading the provided source object as a
	 * cverage then for writing it on the temp directoy and finally for
	 * rereading the coverage back into memory in order to display it.
	 * 
	 * @param source
	 *            Object The object on disk representing the coverage to test.
	 * 
	 * @throws IOException
	 * @throws IllegalArgumentException
	 * @throws FactoryException
	 * @throws TransformException
	 * @throws ParseException
	 */
	private File write(Object source, String format) throws IOException,
			IllegalArgumentException, FactoryException, TransformException,
			ParseException {
		// instantiating a reader
		WorldImageReader wiReader = new WorldImageReader(source);

		// reading the original coverage
		GridCoverage2D coverage = (GridCoverage2D) wiReader.read(null);

		assertNotNull(coverage);
		assertNotNull(coverage.getRenderedImage());
		assertNotNull(coverage.getEnvelope());

		// remember to provide a valid name, it wil be mde unique by the helper
		// function temp
		final StringBuffer buff = new StringBuffer("./write/temp").append(".").append(format);
		final File tempFile =TestData.temp(this, buff.toString());


		// getting a writer
		final WorldImageWriter wiWriter = new WorldImageWriter(tempFile);

		// writing parameters for png
		final Format writerFormat = wiWriter.getFormat();
		

		// setting write parameters
		final ParameterValueGroup params = writerFormat.getWriteParameters();
		params.parameter(WorldImageFormat.FORMAT.getName().toString())
				.setValue(format);
		final GeneralParameterValue[] gpv = { params
				.parameter(WorldImageFormat.FORMAT.getName().toString()) };
		// writing
		wiWriter.write(coverage, gpv);
        wiWriter.dispose();

		// reading again
		assertTrue(tempFile.exists());
		wiReader = new WorldImageReader(tempFile);
		coverage = (GridCoverage2D) wiReader.read(null);

		// displaying the coverage
		if (TestData.isInteractiveTest())
			coverage.show();
		else
			coverage.getRenderedImage().getData();
		wiReader.dispose();
        coverage.dispose(true);
        
            return tempFile;
	}

