    /**
     * Reads an image from a source stream. Loads an image from a source stream, then loads the
     * values from the world file and constructs a new GridCoverage from this information. When
     * reading from a remote stream we do not look for a world fiel but we suppose those information
     * comes from a different way (xml, gml, pigeon?)
     *
     * @param params WorldImageReader supports no parameters, it just ignores them.
     * @return a new GridCoverage read from the source.
     */
    @Override
    public GridCoverage2D read(GeneralParameterValue[] params)
            throws IllegalArgumentException, IOException {

        // /////////////////////////////////////////////////////////////////////
        //
        // do we have parameters to use for reading from the specified source
        //
        // /////////////////////////////////////////////////////////////////////
        GeneralEnvelope requestedEnvelope = null;
        Rectangle dim = null;
        OverviewPolicy overviewPolicy = null;
        // /////////////////////////////////////////////////////////////////////
        //
        // Checking params
        //
        // /////////////////////////////////////////////////////////////////////
        if (params != null) {
            for (GeneralParameterValue generalParameterValue : params) {
                final ParameterValue param = (ParameterValue) generalParameterValue;
                final String name = param.getDescriptor().getName().getCode();
                if (name.equals(AbstractGridFormat.READ_GRIDGEOMETRY2D.getName().toString())) {
                    final GridGeometry2D gg = (GridGeometry2D) param.getValue();
                    requestedEnvelope = new GeneralEnvelope((Envelope) gg.getEnvelope2D());
                    dim = gg.getGridRange2D().getBounds();
                    continue;
                }
                if (name.equals(AbstractGridFormat.OVERVIEW_POLICY.getName().toString())) {
                    overviewPolicy = (OverviewPolicy) param.getValue();
                    continue;
                }
            }
        }
        // /////////////////////////////////////////////////////////////////////
        //
        // set params
        //
        // /////////////////////////////////////////////////////////////////////
        Integer imageChoice = Integer.valueOf(0);
        final ImageReadParam readP = new ImageReadParam();
        if (!wmsRequest) {
            try {
                imageChoice = setReadParams(overviewPolicy, readP, requestedEnvelope, dim);
            } catch (TransformException e) {
                throw new DataSourceException(e);
            }
        }
        // /////////////////////////////////////////////////////////////////////
        //
        // Reading the source layer
        //
        // /////////////////////////////////////////////////////////////////////
        // final ImageReader reader = readerSPI.createReaderInstance();
        // final ImageInputStream inStream = wmsRequest ? ImageIO
        // .createImageInputStream(((URL) source).openStream()) : ImageIO
        // .createImageInputStream(source);
        //
        final Hints newHints = hints.clone();
        // if (!wmsRequest) {
        // reader.setInput(inStream);
        // if (!reader.isImageTiled(imageChoice.intValue())) {
        // final Dimension tileSize = ImageUtilities
        // .toTileSize(new Dimension(reader.getWidth(imageChoice
        // .intValue()), reader.getHeight(imageChoice
        // .intValue())));
        // final ImageLayout layout = new ImageLayout();
        // layout.setTileGridXOffset(0);
        // layout.setTileGridYOffset(0);
        // layout.setTileHeight(tileSize.height);
        // layout.setTileWidth(tileSize.width);
        // newHints.add(new RenderingHints(JAI.KEY_IMAGE_LAYOUT, layout));
        // }
        // }
        // inStream.close();
        final ParameterBlock pbjRead = new ParameterBlock();
        pbjRead.add(
                inStreamSPI != null
                        ? inStreamSPI.createInputStreamInstance(
                                source, ImageIO.getUseCache(), ImageIO.getCacheDirectory())
                        : ImageIO.createImageInputStream(source));
        // pbjRead.add(wmsRequest ? ImageIO
        // .createImageInputStream(((URL) source).openStream()) : ImageIO
        // .createImageInputStream(source));
        pbjRead.add(imageChoice);
        pbjRead.add(Boolean.FALSE);
        pbjRead.add(Boolean.FALSE);
        pbjRead.add(Boolean.FALSE);
        pbjRead.add(null);
        pbjRead.add(null);
        pbjRead.add(readP);
        pbjRead.add(readerSPI.createReaderInstance());
        final RenderedOp coverageRaster = JAI.create("ImageRead", pbjRead, newHints);

        // /////////////////////////////////////////////////////////////////////
        //
        // BUILDING COVERAGE
        //
        // /////////////////////////////////////////////////////////////////////
        AffineTransform rasterToModel = getRescaledRasterToModel(coverageRaster);
        return createImageCoverage(coverageRaster, ProjectiveTransform.create(rasterToModel));
    }

