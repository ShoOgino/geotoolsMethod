	/**
	 * This method is in charge for reading the metadata file and for creating a
	 * valid envelope (whether possible);
	 * 
	 * TODO it would be great to having a centralized management for the world
	 * file
	 * 
	 * @throws IOException
	 */
	private void prepareWorldImageGridToWorldTransform() throws IOException {

		// getting name and extension
		final String base = (parentPath != null) ? new StringBuffer(
				this.parentPath).append(File.separator).append(coverageName)
				.toString() : coverageName;

		// We can now construct the baseURL from this string.
		File file2Parse = new File(new StringBuffer(base).append(".wld")
				.toString());

		if (file2Parse.exists()) {
			final WorldFileReader reader = new WorldFileReader(file2Parse);
			raster2Model = reader.getTransform();
		} else {
			// looking for another extension
			final Set<String> ext=WorldImageFormat.getWorldExtension(extension);
			final Iterator<String> it=ext.iterator();
			if(!it.hasNext())
				throw new DataSourceException("Unable to parse extension "+extension);
			do{
			file2Parse = new File(new StringBuffer(base).append((String)it.next()
					).toString());
			}while(!file2Parse.exists()&&it.hasNext());
			
			if (file2Parse.exists()) {
				// parse world file
				final WorldFileReader reader = new WorldFileReader(file2Parse);
				raster2Model = reader.getTransform();
				metaFile = false;
			} else {
				// looking for a meta file
				file2Parse = new File(new StringBuffer(base).append(".meta")
						.toString());

				if (file2Parse.exists()) {
					parseMetaFile(file2Parse);
					metaFile = true;
				} else {
					final IOException ex = new IOException(
							"No file with meta information found!");
					LOGGER
							.logp(
									Level.SEVERE,
									WorldImageReader.class.toString(),
									"private void prepareWorldImage2Model() throws IOException",
									ex.getLocalizedMessage(), ex);
					throw ex;
				}
			}
		}
	}

