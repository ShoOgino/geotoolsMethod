    /**
     * This method is responsible fro creating a world file to georeference an image given the image
     * bounding box and the image geometry. The name of the file is composed by the name of the
     * image file with a proper extension, depending on the format (see WorldImageFormat). The
     * projection is in the world file.
     *
     * @param gc Envelope of this image.
     * @param image Image to be used.
     * @param baseFile Basename and path for this image.
     * @throws IOException In case we cannot create the world file.
     * @throws TransformException
     * @throws TransformException
     */
    private static void createWorldFile(
            final GridCoverage gc,
            final RenderedImage image,
            final String baseFile,
            final String extension)
            throws IOException, TransformException {
        // /////////////////////////////////////////////////////////////////////
        //
        // CRS information
        //
        // ////////////////////////////////////////////////////////////////////
        final AffineTransform gridToWorld = (AffineTransform) gc.getGridGeometry().getGridToCRS();
        final boolean lonFirst = (XAffineTransform.getSwapXY(gridToWorld) != -1);

        // /////////////////////////////////////////////////////////////////////
        //
        // World File values
        // It is worthwhile to note that we have to keep into account the fact
        // that the axis could be swapped (LAT,lon) therefore when getting
        // xPixSize and yPixSize we need to look for it a the right place
        // inside the grid to world transform.
        //
        // ////////////////////////////////////////////////////////////////////
        final double xPixelSize = (lonFirst) ? gridToWorld.getScaleX() : gridToWorld.getShearY();
        final double rotation1 = (lonFirst) ? gridToWorld.getShearX() : gridToWorld.getScaleX();
        final double rotation2 = (lonFirst) ? gridToWorld.getShearY() : gridToWorld.getScaleY();
        final double yPixelSize = (lonFirst) ? gridToWorld.getScaleY() : gridToWorld.getShearX();
        final double xLoc = gridToWorld.getTranslateX();
        final double yLoc = gridToWorld.getTranslateY();

        // /////////////////////////////////////////////////////////////////////
        //
        // writing world file
        //
        // ////////////////////////////////////////////////////////////////////
        final StringBuffer buff = new StringBuffer(baseFile);
        //		 looking for another extension
        final Set ext = WorldImageFormat.getWorldExtension(extension);
        final Iterator it = ext.iterator();
        if (!it.hasNext()) throw new DataSourceException("Unable to parse extension " + extension);
        buff.append((String) it.next());
        final File worldFile = new File(buff.toString());
        try (PrintWriter out = new PrintWriter(new FileOutputStream(worldFile))) {
            out.println(xPixelSize);
            out.println(rotation1);
            out.println(rotation2);
            out.println(yPixelSize);
            out.println(xLoc);
            out.println(yLoc);
            out.flush();
        }
    }

