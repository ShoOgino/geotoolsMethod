    /**
     * Writes the provided rendered image to the provided image output stream using the supplied
     * geotiff metadata.
     *
     * @param gtParams
     * @param listener
     */
    private boolean writeImage(
            final RenderedImage image,
            final ImageOutputStream outputStream,
            final GeoTiffIIOMetadataEncoder geoTIFFMetadata,
            GeoToolsWriteParams gtParams,
            ProgressListener listener)
            throws IOException {
        if (image == null || outputStream == null) {
            throw new NullPointerException("Some input parameters are null");
        }
        final ImageWriteParam params = gtParams.getAdaptee();
        if (params instanceof TIFFImageWriteParam && gtParams instanceof GeoTiffWriteParams) {
            TIFFImageWriteParam param = (TIFFImageWriteParam) params;
            param.setForceToBigTIFF(((GeoTiffWriteParams) gtParams).isForceToBigTIFF());
        }
        //
        // GETTING READER AND METADATA
        //
        final TIFFImageWriter writer =
                (TIFFImageWriter) GeoTiffFormat.IMAGEIO_WRITER_FACTORY.createWriterInstance();
        try {
            final IIOMetadata metadata =
                    createGeoTiffIIOMetadata(
                            writer,
                            ImageTypeSpecifier.createFromRenderedImage(image),
                            geoTIFFMetadata,
                            params);

            //
            // IMAGEWRITE
            //
            writer.setOutput(outputStream);
            // listeners
            if (listener != null) {
                final GridCoverageWriterProgressAdapter progressAdapter =
                        new GridCoverageWriterProgressAdapter(listener);
                writer.addIIOWriteProgressListener(progressAdapter);
                writer.addIIOWriteWarningListener(progressAdapter);
            }
            writer.write(
                    writer.getDefaultStreamMetadata(params),
                    new IIOImage(image, null, metadata),
                    params);

            outputStream.flush();
        } finally {

            try {
                if (!(destination instanceof ImageOutputStream) && outputStream != null)
                    outputStream.close();
            } catch (Throwable e) {
                // eat me
                if (LOGGER.isLoggable(Level.WARNING)) {
                    LOGGER.log(Level.WARNING, e.getLocalizedMessage(), e);
                }
            }

            try {
                if (writer != null) writer.dispose();
            } catch (Throwable e) {
                // eat me
                if (LOGGER.isLoggable(Level.WARNING)) {
                    LOGGER.log(Level.WARNING, e.getLocalizedMessage(), e);
                }
            }
        }

        return true;
    }

