    @Test
    public void testSharedRepository() throws IOException {
        // setup repository
        ShpFileStoreFactory dialect =
                new ShpFileStoreFactory(new ShapefileDataStoreFactory(), new HashMap<>());
        File indexDirectory = new File("./target/repo_idx");
        FileUtils.deleteQuietly(indexDirectory);
        indexDirectory.mkdir();
        File auxiliaryDataStoreFile = new File(indexDirectory, "test.properties");
        String theStoreName = "testStore";
        FileUtils.writeStringToFile(
                auxiliaryDataStoreFile, NetCDFUtilities.STORE_NAME + "=" + theStoreName, "UTF-8");

        AtomicBoolean disposed = new AtomicBoolean();
        DirectoryDataStore dataStore =
                new DirectoryDataStore(indexDirectory, dialect) {

                    @Override
                    public void dispose() {
                        super.dispose();
                        disposed.set(true);
                    }
                };

        DefaultRepository repository = new DefaultRepository();
        repository.register(new NameImpl(theStoreName), dataStore);

        File nc1 = TestData.file(this, "polyphemus_20130301_test.nc");
        File nc2 = TestData.file(this, "polyphemus_20130302_test.nc");
        File mosaic = tempFolder.newFolder("nc_repo");
        FileUtils.copyFileToDirectory(nc1, mosaic);
        FileUtils.copyFileToDirectory(nc2, mosaic);

        // The indexer
        Properties indexer = new Properties();
        indexer.put("TimeAttribute", "time");
        indexer.put(
                "Schema",
                "the_geom:Polygon,location:String,imageindex:Integer,time:java.util.Date");
        indexer.put("AuxiliaryDatastoreFile", auxiliaryDataStoreFile.getCanonicalPath());
        final String auxiliaryFilePath =
                mosaic.getAbsolutePath() + File.separatorChar + ".polyphemus_20130301_test";
        final File auxiliaryFileDir = new File(auxiliaryFilePath);
        assertTrue(auxiliaryFileDir.mkdirs());

        File nc1Aux = TestData.file(this, "polyphemus_test_aux.xml");
        FileUtils.copyFileToDirectory(nc1Aux, auxiliaryFileDir);

        try (FileOutputStream fos = new FileOutputStream(new File(mosaic, "indexer.properties"))) {
            indexer.store(fos, null);
        }
        File dsp = TestData.file(this, "datastore.properties");
        FileUtils.copyFileToDirectory(dsp, mosaic);

        ImageMosaicFormat format = new ImageMosaicFormat();
        ImageMosaicReader reader =
                format.getReader(mosaic, new Hints(Hints.REPOSITORY, repository));

        final String name = "O3";
        NetCDFImageReader imageReader = null;
        SimpleFeatureIterator it = null;
        assertNotNull(reader);
        GridCoverage2D coverage = null;
        try {
            String[] names = reader.getGridCoverageNames();
            assertEquals(1, names.length);
            assertEquals(name, names[0]);

            // check we can read
            coverage = reader.read(NO_DEFERRED_LOADING_PARAMS);

            // check we have the 4 granules we expect
            GranuleSource source = reader.getGranules(name, true);
            FilterFactory2 ff = CommonFactoryFinder.getFilterFactory2();
            Query q = new Query(Query.ALL);
            q.setSortBy(ff.sort("time", SortOrder.ASCENDING));
            SimpleFeatureCollection granules = source.getGranules(q);
            assertEquals(4, granules.size());
            it = granules.features();
            assertTrue(it.hasNext());
            SimpleFeature f = it.next();
            assertEquals("polyphemus_20130301_test.nc", f.getAttribute("location"));
        } finally {
            if (coverage != null) {
                coverage.dispose(true);
            }

            if (it != null) {
                it.close();
            }

            if (reader != null) {
                try {
                    reader.dispose();
                } catch (Exception e) {
                    // Ignore exception on dispose
                }
            }
            if (imageReader != null) {
                try {
                    imageReader.dispose();
                } catch (Exception e) {
                    // Ignore exception on dispose
                }
            }
        }

        // the index files have actually been created
        List<String> typeNames = Arrays.asList(dataStore.getTypeNames());
        assertFalse(disposed.get());
        assertEquals(1, typeNames.size());
        assertTrue(typeNames.contains(name));
        dataStore.dispose();
        assertTrue(disposed.get());
    }

