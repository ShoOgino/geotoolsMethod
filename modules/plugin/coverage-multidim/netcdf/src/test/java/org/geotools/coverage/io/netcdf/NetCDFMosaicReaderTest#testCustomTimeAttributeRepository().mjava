    @Test
    public void testCustomTimeAttributeRepository() throws IOException {
        // setup repository
        ShpFileStoreFactory dialect =
                new ShpFileStoreFactory(new ShapefileDataStoreFactory(), new HashMap());
        File indexDirectory = new File("./target/custom_time_attribute_idx");
        FileUtils.deleteQuietly(indexDirectory);
        indexDirectory.mkdir();
        File auxiliaryDataStoreFile = new File(indexDirectory, "test.properties");
        String theStoreName = "testStore";
        FileUtils.writeStringToFile(
                auxiliaryDataStoreFile, NetCDFUtilities.STORE_NAME + "=" + theStoreName);

        DirectoryDataStore dataStore = new DirectoryDataStore(indexDirectory, dialect);

        DefaultRepository repository = new DefaultRepository();
        repository.register(new NameImpl(theStoreName), dataStore);

        File nc1 = TestData.file(this, "polyphemus_20130301_NO2_time2.nc");
        File mosaic = new File(TestData.file(this, "."), "nc_time2");
        if (mosaic.exists()) {
            FileUtils.forceDelete(mosaic);
        }
        assertTrue(mosaic.mkdirs());
        FileUtils.copyFileToDirectory(nc1, mosaic);

        // The indexer
        Properties indexer = new Properties();
        indexer.put("TimeAttribute", "time");
        indexer.put(
                "Schema",
                "the_geom:Polygon,location:String,imageindex:Integer,time:java.util.Date");
        indexer.put("AuxiliaryDatastoreFile", auxiliaryDataStoreFile.getCanonicalPath());
        final String auxiliaryFilePath =
                mosaic.getAbsolutePath() + File.separatorChar + ".polyphemus_20130301_NO2_time2";
        final File auxiliaryFileDir = new File(auxiliaryFilePath);
        assertTrue(auxiliaryFileDir.mkdirs());

        File nc1Aux = TestData.file(this, "polyphemus_20130301_NO2_time2.xml");
        FileUtils.copyFileToDirectory(nc1Aux, auxiliaryFileDir);

        try (FileOutputStream fos = new FileOutputStream(new File(mosaic, "indexer.properties"))) {
            indexer.store(fos, null);
        }
        File dsp = TestData.file(this, "datastore.properties");
        FileUtils.copyFileToDirectory(dsp, mosaic);

        ImageMosaicFormat format = new ImageMosaicFormat();
        ImageMosaicReader reader =
                format.getReader(mosaic, new Hints(Hints.REPOSITORY, repository));
        checkCustomTimeAttribute(nc1, reader);

        // the index files have actually been created
        List<String> typeNames = Arrays.asList(dataStore.getTypeNames());
        assertEquals(1, typeNames.size());
        assertTrue(typeNames.contains("NO2"));
        dataStore.dispose();
        reader.dispose();
    }

