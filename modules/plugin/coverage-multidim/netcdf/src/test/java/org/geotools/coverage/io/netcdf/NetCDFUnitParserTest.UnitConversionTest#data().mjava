        @Parameterized.Parameters(name = "{index}: {0} -> {1}")
        public static Collection<Object[]> data() {
            return Arrays.asList(
                    new Object[][] {
                        {"microgram", GRAM.divide(1_000_000)},
                        {"microgram/m3", GRAM.divide(1_000_000).divide(METRE.pow(3))},
                        {"nanograms/m3", GRAM.divide(1_000_000_000).divide(METRE.pow(3))},
                        {
                            "microgrammes per cubic meter",
                            GRAM.divide(1_000_000).divide(METRE.pow(3))
                        },
                        {"m2", METRE.pow(2)},
                        {"m3", METRE.pow(3)},
                        {"Âµmol", SI.MOLE.divide(1_000_000)},
                        {"g m-3", GRAM.multiply(METRE.pow(-3))},
                        {"mg", GRAM.divide(1_000)},
                        {"mol m-2", SI.MOLE.multiply(METRE.pow(-2))},
                        {"Pa", SI.PASCAL},
                        {"unitless", AbstractUnit.ONE},
                        {"m/s", METRE.divide(SI.SECOND)},
                        {"W m-2", WATT.multiply(METRE.pow(-2))},
                        {
                            "kg m-2 s-1",
                            SI.KILOGRAM.multiply(METRE.pow(-2).multiply(SI.SECOND.pow(-1)))
                        },
                        {
                            "mW m^-2 sr^-1 nm^-1",
                            WATT.divide(1000)
                                    .multiply(METRE.pow(-2))
                                    .multiply(SI.STERADIAN.pow(-1))
                                    .multiply(METRE.divide(1_000_000_000).pow(-1))
                        },
                        {
                            "mW m^-2 nm^-1",
                            WATT.divide(1000)
                                    .multiply(METRE.pow(-2))
                                    .multiply(METRE.divide(1_000_000_000).pow(-1))
                        },
                        {"mol cm-3", MOLE.multiply(METRE.divide(100).pow(-3))},
                        {"Pa", SI.PASCAL},
                        {"percentage", AbstractUnit.ONE.divide(100)},
                        {"Meter", METRE},
                        {"meter", METRE},
                        {"dB", AbstractUnit.ONE.transform(new LogConverter(10)).divide(10)},
                        {"degree", NonSI.DEGREE_ANGLE},
                        {"m2/m2", METRE.pow(2).divide(METRE.pow(2))},
                        {"m-1 s", METRE.pow(-1).multiply(SECOND)},
                        {"kg m-3", KILOGRAM.multiply(METRE.pow(-3))},
                        {"K m-1", SI.KELVIN.multiply(METRE.pow(-1))},
                        {"mol kg-1", MOLE.multiply(KILOGRAM.pow(-1))},
                        {"J kg-1", JOULE.multiply(KILOGRAM.pow(-1))},
                        {"kg m-2 s-1", KILOGRAM.multiply(METRE.pow(-2).multiply(SECOND.pow(-1)))},
                        {"J m-2", JOULE.multiply(METRE.pow(-2))},
                        {"m2 s-1", METRE.pow(2).multiply(SECOND.pow(-1))},
                        {"kg m-2", KILOGRAM.multiply(METRE.pow(-2))},
                        {"mol m-2", MOLE.multiply(METRE.pow(-2))},
                        {"s-1 m-3", SECOND.pow(-1).multiply(METRE.pow(-3))},
                        {"g kg-1", GRAM.multiply(KILOGRAM.pow(-1))},
                        {"Pa m", PASCAL.multiply(METRE)},
                        {"W m-2", WATT.multiply(METRE.pow(-2))},
                        {
                            "mol m-2 s-1 m-1 sr-1",
                            MOLE.multiply(METRE.pow(-2))
                                    .multiply(SECOND.pow(-1))
                                    .multiply(METRE.pow(-1))
                                    .multiply(SI.STERADIAN.pow(-1))
                        },
                        {
                            "K m2 kg-1 s-1",
                            KELVIN.multiply(METRE.pow(2))
                                    .multiply(KILOGRAM.pow(-1))
                                    .multiply(SECOND.pow(-1))
                        }
                    });
        }

