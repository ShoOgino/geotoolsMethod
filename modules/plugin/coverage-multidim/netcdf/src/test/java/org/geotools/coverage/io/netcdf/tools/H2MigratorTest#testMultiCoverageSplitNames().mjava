    /** Test migration on a mosaic with multiple files each one having one coverage */
    @Test
    public void testMultiCoverageSplitNames() throws Exception {
        File testDir = tempFolder.newFolder("gome");
        URL testUrl = URLs.fileToUrl(testDir);
        FileUtils.copyDirectory(TestData.file(NetCDFMosaicReaderTest.class, "gome"), testDir);

        // the test data already contained a custom store for indexes, get rid of it and its
        // associated configuration
        assertTrue(new File(testDir, "netcdf_datastore.properties").delete());
        final File indexerFile = new File(testDir, "indexer.xml");
        final Indexer indexer = Utils.unmarshal(indexerFile);
        final List<ParametersType.Parameter> parameters = indexer.getParameters().getParameter();
        final List<ParametersType.Parameter> filteredParameters =
                parameters
                        .stream()
                        .filter(p -> !p.getName().equals(Utils.Prop.AUXILIARY_DATASTORE_FILE))
                        .collect(Collectors.toList());
        parameters.addAll(filteredParameters);
        Utils.marshal(indexer, indexerFile);

        // setup the reader, will make it generate the H2 indexes
        genericMosaicLoadAndRead(testUrl);

        // build the target store config file
        final File targetStoreConfiguration = new File(testDir, "target.properties");
        final String properties =
                String.format(
                        "SPI=org.geotools.data.h2.H2DataStoreFactory\n"
                                + "driver=org.h2.Driver\n"
                                + "database=%s\n"
                                + "user=sa\n"
                                + "password=",
                        getTargetDbForProperties(testDir));
        FileUtils.writeStringToFile(targetStoreConfiguration, properties, "UTF-8");

        File logDir = new File(testDir, "logs");
        assertTrue(logDir.mkdir());

        H2MigrateConfiguration config = new H2MigrateConfiguration();
        config.setMosaicPath(testDir.getPath());
        config.setConcurrency(1);
        config.setTargetStoreConfiguration(targetStoreConfiguration.getPath());
        config.setLogDirectory(logDir.getPath());
        final H2Migrator migrator = new H2Migrator(config);
        migrator.migrate();

        // perform the basic migration checks
        // check the migrated data
        final DataStore store =
                H2MigrateConfiguration.getDataStore(config.getTargetStoreConfiguration());
        try {
            assertEquals(2, store.getTypeNames().length);
            assertThat(store.getTypeNames(), Matchers.arrayContainingInAnyOrder("BrO", "NO2"));

            // check the records for the various files are there
            final SimpleFeatureCollection bro = store.getFeatureSource("BrO").getFeatures();
            assertEquals(2, bro.size());
            UniqueVisitor u1 = new UniqueVisitor("location");
            bro.accepts(u1, null);
            assertThat(
                    (Set<String>) u1.getUnique(),
                    Matchers.containsInAnyOrder(
                            endsWith("20130101.BrO.DUMMY.nc"), endsWith("20130108.BrO.DUMMY.nc")));

            final SimpleFeatureCollection no2 = store.getFeatureSource("NO2").getFeatures();
            assertEquals(2, no2.size());
            UniqueVisitor u2 = new UniqueVisitor("location");
            no2.accepts(u2, null);
            assertThat(
                    (Set<String>) u2.getUnique(),
                    Matchers.containsInAnyOrder(
                            endsWith("20130101.NO2.DUMMY.nc"), endsWith("20130108.NO2.DUMMY.nc")));

        } finally {
            store.dispose();
        }

        // check the log files contents
        File netcdfLog = new File(logDir, "migrated.txt");
        assertTrue(netcdfLog.exists());
        final List<String> netcdfList = Files.readLines(netcdfLog, Charset.forName("UTF-8"));
        assertEquals(4, netcdfList.size());
        assertThat(
                netcdfList,
                Matchers.containsInAnyOrder(
                        endsWith("20130101.BrO.DUMMY.nc"),
                        endsWith("20130101.NO2.DUMMY.nc"),
                        endsWith("20130108.BrO.DUMMY.nc"),
                        endsWith("20130108.NO2.DUMMY.nc")));
        File h2Log = new File(logDir, "h2.txt");
        assertTrue(h2Log.exists());
        final List<String> h2List = Files.readLines(h2Log, Charset.forName("UTF-8"));
        assertEquals(20, h2List.size());
        assertThat(h2List, Matchers.everyItem(allOf(endsWith(".db"))));
        // for extra measure, check and remove the H2 dbs, they should not be needed anymore
        for (String h2File : h2List) {
            final File file = new File(h2File);
            if (file.exists()) { // the log files linger a bit and then they get removed
                assertTrue("Could not remove: " + file, file.delete());
            }
        }

        // check the indexer has been modified and the aux datastore file is there
        assertIndexerUpdated(testDir);

        // check each mosaic property file has the aux datastore property too
        assertCoveragePropertiesUpdate(testDir, new String[] {"BrO", "NO2"});

        // reload the mosaic past migration, is it working?
        genericMosaicLoadAndRead(testUrl);
    }

