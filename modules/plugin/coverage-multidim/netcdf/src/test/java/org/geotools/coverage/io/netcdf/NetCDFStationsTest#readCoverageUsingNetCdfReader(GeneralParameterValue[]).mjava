    /**
     * Helper method that reads stationA data set using the NetCdf reader directly. Some basic
     * checks are also made.
     */
    private Raster readCoverageUsingNetCdfReader(GeneralParameterValue[] readParameters)
            throws Exception {

        // create test directory for this test removing any existing one
        File testDirectory = new File(TestData.file(this, "."), "MultipleBandsDimensionTest");
        FileUtils.deleteQuietly(testDirectory);
        assertThat(testDirectory.mkdirs(), is(true));

        // just keeping a reference to the reader so we can close it in the finally block
        NetCDFReader reader = null;

        try {

            // move test files to the test directory
            FileUtils.copyFileToDirectory(TestData.file(this, "stations.nc"), testDirectory);
            FileUtils.copyFileToDirectory(TestData.file(this, "stations.xml"), testDirectory);
            File netCdfFile = new File(testDirectory, "stations.nc");
            File auxiliaryFile = new File(testDirectory, "stations.xml");

            // instantiate the netcdf reader, add the auxiliary file as an hint for the reader
            final Hints hints = new Hints(Utils.AUXILIARY_FILES_PATH, auxiliaryFile.getPath());
            reader = new NetCDFReader(netCdfFile, hints);

            // checking that we have four coverages (only the first station has values others
            // stations values are zero)
            List<String> names = Arrays.asList(reader.getGridCoverageNames());
            assertThat(names.contains("stationA"), is(true));
            assertThat(names.contains("stationB"), is(true));
            assertThat(names.contains("stationC"), is(true));
            assertThat(names.contains("stationD"), is(true));

            // reading stationA data set
            GridCoverage2D coverage = reader.read("stationA", readParameters);
            assertThat(coverage, notNullValue());
            return PlanarImage.wrapRenderedImage(coverage.getRenderedImage()).getData();

        } finally {

            if (reader != null) {
                reader.dispose();
            }
            // cleaning the tests directory
            FileUtils.deleteQuietly(testDirectory);
        }
    }

