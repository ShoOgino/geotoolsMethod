    public void assertMultiCoverageMigration(
            File testDir, File logDir, H2MigrateConfiguration config) throws Exception {
        // check the migrated data
        final DataStore store =
                H2MigrateConfiguration.getDataStore(config.getTargetStoreConfiguration());
        try {
            assertEquals(2, store.getTypeNames().length);
            assertThat(
                    store.getTypeNames(),
                    Matchers.arrayContainingInAnyOrder(
                            "air_temperature", "sea_surface_temperature"));

            // check the records for the various files are there
            UniqueVisitor u1 = new UniqueVisitor("location");
            final SimpleFeatureCollection airTemperature =
                    store.getFeatureSource("air_temperature").getFeatures();
            assertEquals(2, airTemperature.size());
            airTemperature.accepts(u1, null);
            assertThat(
                    (Set<String>) u1.getUnique(),
                    Matchers.containsInAnyOrder(new ArrayList<Matcher<String>>(Arrays.asList(
                            endsWith("multi-coverage-1.nc"), endsWith("multi-coverage-2.nc")))));

            UniqueVisitor u2 = new UniqueVisitor("location");
            final SimpleFeatureCollection seaSurfaceTemperature =
                    store.getFeatureSource("sea_surface_temperature").getFeatures();
            assertEquals(2, seaSurfaceTemperature.size());
            seaSurfaceTemperature.accepts(u2, null);
            assertThat(
                    (Set<String>) u2.getUnique(),
                    Matchers.containsInAnyOrder(new ArrayList<Matcher<String>>(Arrays.asList(
                            endsWith("multi-coverage-1.nc"), endsWith("multi-coverage-2.nc")))));

        } finally {
            store.dispose();
        }

        // check the log files contents
        File netcdfLog = new File(logDir, "migrated.txt");
        assertTrue(netcdfLog.exists());
        final List<String> netcdfList = Files.readLines(netcdfLog, Charset.forName("UTF-8"));
        assertEquals(2, netcdfList.size());
        assertThat(
                netcdfList,
                Matchers.containsInAnyOrder(new ArrayList<Matcher<String>>(Arrays.asList(
                        endsWith("multi-coverage-1.nc"), endsWith("multi-coverage-2.nc")))));
        File h2Log = new File(logDir, "h2.txt");
        assertTrue(h2Log.exists());
        final List<String> h2List = Files.readLines(h2Log, Charset.forName("UTF-8"));
        assertEquals(10, h2List.size());
        assertThat(
                h2List,
                Matchers.everyItem(allOf(containsString("multi-coverage-"), endsWith(".db"))));
        // for extra measure, check and remove the H2 dbs, they should not be needed anymore
        for (String h2File : h2List) {
            final File file = new File(h2File);
            if (file.exists()) { // the log files linger a bit and then they get removed
                assertTrue("Could not remove: " + file, file.delete());
            }
        }
        assertIndexerUpdated(testDir);

        // check each mosaic property file has the aux datastore property too
        assertCoveragePropertiesUpdate(
                testDir, new String[] {"air_temperature", "sea_surface_temperature"});
    }

