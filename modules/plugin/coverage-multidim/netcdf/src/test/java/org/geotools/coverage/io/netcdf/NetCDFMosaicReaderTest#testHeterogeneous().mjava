    @Test
    public void testHeterogeneous()
            throws IOException, InvalidParameterValueException, ParseException {
        // prepare a "mosaic" with just one NetCDF
        File nc1 = TestData.file(this, "polyphemus_20130301_test.nc");
        File mosaic = tempFolder.newFolder("nc_poly_hetero");
        FileUtils.copyFileToDirectory(nc1, mosaic);

        // The indexer
        String indexer =
                "TimeAttribute=time\n"
                        + "Schema=the_geom:Polygon,location:String,imageindex:Integer,time:java.util.Date\n";
        FileUtils.writeStringToFile(new File(mosaic, "indexer.properties"), indexer);

        // the datastore.properties file is also mandatory...
        File dsp = TestData.file(this, "datastore.properties");
        FileUtils.copyFileToDirectory(dsp, mosaic);

        // have the reader harvest it
        ImageMosaicFormat format = new ImageMosaicFormat();
        ImageMosaicReader reader = format.getReader(mosaic);
        assertNotNull(reader);
        reader.dispose();

        // now force heterogeneous interpretation
        Properties mosaicProps = new Properties();
        File mosaicPropsFile = new File(mosaic, "O3.properties");
        try (FileInputStream fis = new FileInputStream(mosaicPropsFile)) {
            mosaicProps.load(fis);
        }
        mosaicProps.put("Heterogeneous", "true");
        try (FileOutputStream fos = new FileOutputStream(mosaicPropsFile)) {
            mosaicProps.store(fos, "Now with hetero flag up");
        }

        // load two different times, make sure we actually read two different slices
        String t1 = "2013-03-01T00:00:00.000Z";
        String t2 = "2013-03-01T01:00:00.000Z";
        reader = format.getReader(mosaic);
        try {
            // prepare params
            ParameterValue<List> time = ImageMosaicFormat.TIME.createValue();
            time.setValue(Arrays.asList(parseTimeStamp(t1)));
            GeneralParameterValue[] params =
                    new GeneralParameterValue[] {NO_DEFERRED_LOADING_PARAM, time};
            // read first
            GridCoverage2D coverage1 = reader.read(params);
            time.setValue(Arrays.asList(parseTimeStamp(t2)));
            GridCoverage2D coverage2 = reader.read(params);

            DirectPosition center = reader.getOriginalEnvelope().getMedian();
            float[] v1 = (float[]) coverage1.evaluate(center);
            float[] v2 = (float[]) coverage2.evaluate(center);
            assertNotEquals(v1[0], v2[0], 0f);
        } finally {
            reader.dispose();
        }
    }

