    public void checkCustomTimeAttribute(File nc1, ImageMosaicReader reader) throws IOException {
        NetCDFImageReader imageReader = null;
        SimpleFeatureIterator it = null;
        assertNotNull(reader);
        GridCoverage2D coverage = null;
        try {
            String[] names = reader.getGridCoverageNames();
            assertEquals(1, names.length);
            assertEquals("NO2", names[0]);

            // check we can read
            coverage = reader.read(NO_DEFERRED_LOADING_PARAMS);

            // check we have the two granules we expect
            GranuleSource source = reader.getGranules("NO2", true);
            FilterFactory2 ff = CommonFactoryFinder.getFilterFactory2();
            Query q = new Query(Query.ALL);
            q.setSortBy(ff.sort("time", SortOrder.ASCENDING));
            SimpleFeatureCollection granules = source.getGranules(q);
            assertEquals(2, granules.size());
            it = granules.features();
            assertTrue(it.hasNext());
            SimpleFeature f = it.next();
            assertEquals("polyphemus_20130301_NO2_time2.nc", f.getAttribute("location"));
            SimpleFeatureType featureType = f.getType();

            // check the underlying data has a time2 dimension
            imageReader = (NetCDFImageReader) new NetCDFImageReaderSpi().createReaderInstance();
            imageReader.setInput(nc1);
            Variable var = imageReader.getVariableByName("NO2");
            String dimensions = var.getDimensionsString();
            assertTrue(dimensions.contains("time2"));

            // check I'm getting a "time" attribute instead of "time2" due to the
            // uniqueTimeAttribute remap
            assertNotNull(featureType.getDescriptor("time"));

        } finally {
            if (coverage != null) {
                coverage.dispose(true);
            }

            if (it != null) {
                it.close();
            }

            if (reader != null) {
                try {
                    reader.dispose();
                } catch (Exception e) {
                    // Ignore exception on dispose
                }
            }
            if (imageReader != null) {
                try {
                    imageReader.dispose();
                } catch (Exception e) {
                    // Ignore exception on dispose
                }
            }
        }
    }

