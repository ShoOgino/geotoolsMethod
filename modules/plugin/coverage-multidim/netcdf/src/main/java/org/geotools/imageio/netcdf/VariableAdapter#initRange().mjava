    /**
     * 
     */
    private void initRange() {

        width = variableDS.getDimension(variableDS.getRank() - NetCDFUtilities.X_DIMENSION).getLength();
        height = variableDS.getDimension(variableDS.getRank() - NetCDFUtilities.Y_DIMENSION).getLength();

        // computing the number of bands, according to COARDS convention ignored dimension are at the beginning
        String candidateDimension = variableDS.getDimensions().get(0).getFullName();
        MultipleBandsDimensionInfo multipleBands = reader.ancillaryFileManager.getMultipleBandsDimensionInfo(candidateDimension);
        if (multipleBands != null) {
            // multiple bands are defined for the ignored dimension
            numBands = multipleBands.getNumberOfBands();
        } else {
            numBands = variableDS.getRank() > 2 ? variableDS.getDimension(2).getLength() : 1;
        }

        // let's check if we are in the context of an image mosaic request
        if (reader.getImageMosaicRequest() != null) {
            // if specific bands were selected we need to adapt the number of bands
            int[] selectedBands = reader.getImageMosaicRequest().getBands();
            numBands = selectedBands == null ? numBands : selectedBands.length;
        }

        final int bufferType = NetCDFUtilities.getRawDataType(variableDS);
        sampleModel = new BandedSampleModel(bufferType, width, height, multipleBands == null ? 1 : numBands);
        final Number noData = NetCDFUtilities.getNodata(variableDS);
        List<Category> catArray = new ArrayList<Category>();
        Category noDataCategory = null;
        Category dataCategory = null;
        Category[] categories = null;
        if (noData != null) {
            NumberRange noDataRange = NumberRange.create(noData.doubleValue(), true, noData.doubleValue(), true);
            noDataCategory = new Category(Category.NODATA.getName(), new Color[] { new Color(0, 0, 0, 0) }, noDataRange);
            catArray.add(noDataCategory);
        }
        NumberRange validRange = NetCDFUtilities.getRange(variableDS);
        if (validRange != null) {
            dataCategory = new Category("RANGE", (Color)null, validRange);
            catArray.add(dataCategory);
        }
        categories = new Category[catArray.size()];
        categories = catArray.toArray(categories);

        // range type
        String description = variableDS.getDescription();
        if (description == null) {
            description = variableDS.getShortName();
        }
        final Set<SampleDimension> sampleDims = new HashSet<SampleDimension>();

        // Parsing the unit of measure of this variable
        Unit unit = null;
        String unitString = variableDS.getUnitsString();
        if (unitString != null) {
            try {
                for (UnitCharReplacement replacement: UNIT_CHARS_REPLACEMENTS) {
                    unitString = replacement.replace(unitString);
                }
                unit = SimpleUnitFormat.getInstance().parse(unitString);
               
            } catch (IllegalArgumentException iae) {
                if (LOGGER.isLoggable(Level.FINE)) {
                    LOGGER.fine("Unable to parse the unit:" + unitString + "\nNo unit will be assigned");
                }
            }
        }

        if (multipleBands == null) {
            // single band dimension, so we only need one sample dimension
            sampleDims.add(new GridSampleDimension(description, categories, unit));
        } else {
            for (String bandName : multipleBands.getBandsNamesInOrder()) {
                // multiple bands for this dimension, only the bands names is different
                sampleDims.add(new GridSampleDimension(bandName, categories, unit));
            }
        }

        InternationalString desc = null;
        if (description != null && !description.isEmpty()) {
            desc = new SimpleInternationalString(description);
        }
        final FieldType fieldType = new DefaultFieldType(new NameImpl(getName()), desc, sampleDims);
        final RangeType range = new DefaultRangeType(getName(), description, fieldType);
        this.setRangeType(range);
    }

