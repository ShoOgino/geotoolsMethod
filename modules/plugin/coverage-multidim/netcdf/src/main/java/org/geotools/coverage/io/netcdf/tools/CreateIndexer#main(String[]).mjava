    @SuppressWarnings("PMD.SystemPrintln")
    @SuppressFBWarnings("NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE")
    public static void main(String[] args) throws JDOMException, IOException, TransformerException {
        if (args.length < 1) {
            System.out.println(
                    "Usage: java -jar CreateIndexer"
                            + " /path/to/sampleFile.nc "
                            + "[-P /path/to/netcdfprojectionsfile]\n "
                            + "[-cd [=create sample_datastore.properties]]\n "
                            + "[/path/to/optional/outputFolder]\n");
            System.exit(1);
        }

        int numArgs = args.length;
        String sampleFilePath = args[0];
        boolean hasProjection = false;
        int nextArgs = 1;
        boolean createDatastoreProperties = false;
        if (numArgs > nextArgs && args[nextArgs].equalsIgnoreCase("-p")) {
            hasProjection = true;
            nextArgs++;
        }
        if (hasProjection) {
            String projectionFilePath = args[nextArgs++];
            System.out.println("Setting netcdf.projections.file = " + projectionFilePath);
            System.setProperty("netcdf.projections.file", projectionFilePath);
        }
        if (numArgs > nextArgs && args[nextArgs].equalsIgnoreCase("-cd")) {
            createDatastoreProperties = true;
            nextArgs++;
        }
        String providedOutputPath = null;
        if (numArgs > nextArgs) {
            providedOutputPath = args[nextArgs++];
        }
        if (!hasProjection) {
            System.out.println("No custom projections will be supported");
        }

        // Force the quickscan properties so that only 1 slice for NetCDF variable
        // will be used at time of NetCDF index creation.
        System.setProperty("org.geotools.netcdf.quickscan", "TRUE");

        File sampleFile = new File(sampleFilePath);
        File temp = File.createTempFile("XML", "NC");
        if (!(temp.delete())) {
            throw new IOException("Could not delete temp file: " + temp.getAbsolutePath());
        }

        if (!(temp.mkdir())) {
            throw new IOException("Could not create temp directory: " + temp.getAbsolutePath());
        }

        System.setProperty("NETCDF_DATA_DIR", temp.getAbsolutePath());
        System.out.println("Reading sample file: " + sampleFilePath);

        ImageReader reader = new NetCDFImageReaderSpi().createReaderInstance();
        reader.setInput(sampleFile);
        reader.dispose();

        File[] files = temp.listFiles((FileFilter) FileFilterUtils.directoryFileFilter());
        if (files == null) {
            System.out.println("Could not list files in " + temp);
            System.exit(2);
        }
        files = files[0].listFiles((FileFilter) FileFilterUtils.suffixFileFilter("xml"));

        final File auxiliaryFile = files[0];
        String parentFolder = setOuputFolder(providedOutputPath, sampleFile);
        String indexerFilePath = parentFolder + File.separatorChar + "indexer.xml";
        String auxiliaryFilePath = parentFolder + File.separatorChar + "_auxiliary.xml";
        String datastorePath = parentFolder + File.separatorChar + "datastore.properties";
        final File finalAuxFile = new File(auxiliaryFilePath);
        formatAuxiliaryXml(auxiliaryFile, finalAuxFile);

        System.out.println("Grabbing the generated xml: " + finalAuxFile);

        SAXBuilder saxBuilder = new SAXBuilder();
        Document doc = saxBuilder.build(finalAuxFile);
        Element root = doc.getRootElement();
        Set<String> timeAttributes = new HashSet<>();
        Set<String> elevationAttributes = new HashSet<>();
        getAttributes(timeAttributes, elevationAttributes, root);
        final StringBuilder builder =
                new StringBuilder("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
        builder.append("<Indexer>\n");
        setDomains(timeAttributes, elevationAttributes, builder);
        boolean longNameFound = setCoverages(root, builder);
        setParameters(auxiliaryFilePath, builder, longNameFound);

        writeIndexer(builder.toString(), indexerFilePath);
        System.out.println("Deleting temporary folder");
        if (!(FileUtils.deleteQuietly(temp))) {
            System.out.println("Unable to delete folder: " + temp);
        }
        if (createDatastoreProperties) {
            writeDatastorePropertyFile(datastorePath);
        }
        System.out.println("DONE!!");
    }

