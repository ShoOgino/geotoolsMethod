    /**
     * Returns the unit which matches with the name given.
     * 
     * @param unitName
     *                The name of the unit. Should not be {@code null}.
     * @return The unit matching with the specified name.
     * @throws MetadataException
     *                 if the unit name does not match with the
     *                 {@linkplain #UNIT_FORMAT unit format}.
     */
    static Unit< ? > getUnit( final String unitName ) throws FactoryException {
        if (contains(unitName, METERS)) {
            return SI.METRE;
        } else if (contains(unitName, DEGREES)) {
            return NonSI.DEGREE_ANGLE;
        } else if (contains(unitName, SECONDS)) {
            return SI.SECOND;
        } else if (contains(unitName, MINUTES)) {
            return SI.MINUTE;
        } else if (contains(unitName, HOURS)) {
            return SI.HOUR;
        } else if (contains(unitName, DAYS)) {
            return SI.DAY;
        } else {
            try {
                return (Unit< ? >) UNIT_FORMAT.parse(unitName);
            } catch (UnsupportedOperationException e) {
                throw new FactoryException("Unit not known : " + unitName, e);
            }
        }
    }

