    /**
     * Returns a {@code NetcdfDataset} given an input object
     * 
     * @param input
     *                the input object (usually a {@code File}, a
     *                {@code String} or a {@code FileImageInputStreamExt).
     * @return {@code NetcdfDataset} in case of success.
     * @throws IOException
     *                 if some error occur while opening the dataset.
     * @throws {@link IllegalArgumentException}
     *                 in case the specified input is a directory
     */
    public static NetcdfDataset getDataset(Object input) throws IOException {
        NetcdfDataset dataset = null;
        if (input instanceof URI) {
            dataset = acquireDataset((URI) input);
        }
        else if (input instanceof File) {
            final File file= (File) input;
            if (!file.isDirectory()) {
                dataset = acquireDataset(file.toURI());
            } else {
                throw new IllegalArgumentException("Error occurred during NetCDF file reading: The input file is a Directory.");
            }
        } else if (input instanceof String) {
            File file = new File((String) input);
            if (!file.isDirectory()) {
                dataset = acquireDataset(file.toURI());
            } else {
                throw new IllegalArgumentException( "Error occurred during NetCDF file reading: The input file is a Directory.");
            }
        } else if (input instanceof URL) {
            final URL tempURL = (URL) input;
            String protocol = tempURL.getProtocol();
            if (protocol.equalsIgnoreCase("file")) {
                File file = ImageIOUtilities.urlToFile(tempURL);
                if (!file.isDirectory()) {
                    dataset = acquireDataset(file.toURI());
                } else {
                    throw new IllegalArgumentException( "Error occurred during NetCDF file reading: The input file is a Directory.");
                }
            } else if (protocol.equalsIgnoreCase("http") || protocol.equalsIgnoreCase("dods")) {
                try {
                    dataset = acquireDataset(tempURL.toURI());
                } catch (URISyntaxException e) {
                    throw new IOException(e);
                }
            }
        } else if (input instanceof AccessibleStream) {
            final AccessibleStream<?> stream= (AccessibleStream<?>) input;
            if (stream.getBinding().isAssignableFrom(File.class)) {
                final File file = ((AccessibleStream<File>) input).getTarget();
                if (!file.isDirectory()) {
                    dataset = acquireDataset(file.toURI());
                } else {
                    throw new IllegalArgumentException("Error occurred during NetCDF file reading: The input file is a Directory.");
                }
            } else if (stream.getBinding().isAssignableFrom(URI.class)) {
                final URI uri = ((AccessibleStream<URI>) input).getTarget();
                dataset = acquireDataset(uri);
            } 
        }
        return dataset;
    }

