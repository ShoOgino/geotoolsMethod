    /**
     * Create the {@link DataStoreConfiguration} using the external datastoreIndexFile if provided,
     * or the H2 based default.
     *
     * @return
     * @throws IOException
     */
    public DataStoreConfiguration getDatastoreConfiguration() throws IOException {
        DataStoreConfiguration datastoreConfiguration = null;
        if (datastoreIndexFile != null) {
            URL datastoreURL = URLs.fileToUrl(datastoreIndexFile);
            Properties properties = CoverageUtilities.loadPropertiesFromURL(datastoreURL);
            if (properties != null) {
                String storeName = properties.getProperty(NetCDFUtilities.STORE_NAME);
                if (storeName != null) {
                    return new DataStoreConfiguration(storeName);
                } else {
                    final String SPIClass = properties.getProperty("SPI");
                    try {
                        // create a datastore as instructed
                        final DataStoreFactorySpi spi =
                                (DataStoreFactorySpi) Class.forName(SPIClass).newInstance();
                        Map<String, Serializable> datastoreParams =
                                Utils.filterDataStoreParams(properties, spi);

                        // create a datastore configuration using the specified SPI and
                        // datastoreParams
                        datastoreConfiguration = new DataStoreConfiguration(spi, datastoreParams);
                        datastoreConfiguration.setDatastoreSpi(spi);
                        datastoreConfiguration.setParams(datastoreParams);
                        datastoreConfiguration.setShared(true);
                        // update params for the shared case
                        checkStoreWrapping(datastoreConfiguration);
                    } catch (Exception e) {
                        final IOException ioe = new IOException();
                        throw (IOException) ioe.initCause(e);
                    }
                }
            }
        } else {
            File parentFile = slicesIndexFile.getParentFile();
            String database =
                    FilenameUtils.removeExtension(
                                    FilenameUtils.getName(slicesIndexFile.getCanonicalPath()))
                            .replace(".", "");
            datastoreConfiguration =
                    new DataStoreConfiguration(
                            DataStoreConfiguration.getDefaultParams(database, parentFile));
        }
        return datastoreConfiguration;
    }

