    public AncillaryFileManager(final File netcdfFile, final String indexFilePath) throws IOException, JAXBException, NoSuchAlgorithmException {
        org.geotools.util.Utilities.ensureNonNull("file", netcdfFile);
        if (!netcdfFile.exists()) {
            throw new IllegalArgumentException("The specified file doesn't exist: " + netcdfFile);
        }

        // Set files  
        fileSetManager = new FileSystemFileSetManager();
        ncFile = netcdfFile;
        parentDirectory = new File(ncFile.getParent());

        // Look for external folder configuration
        final String baseFolder = NetCDFUtilities.EXTERNAL_DATA_DIR;
        File baseDir = null;
        if (baseFolder != null) {
            baseDir = new File(baseFolder);
            // Check it again in case it has been deleted in the meantime:
            baseDir = NetCDFUtilities.isValidDir(baseDir) ? baseDir : null;
        }

        String mainFilePath = ncFile.getCanonicalPath();

        // Selection of the hashcode for creating a unique directory of the auxiliary files
        MessageDigest md = MessageDigest.getInstance("SHA-1");
        md.update(mainFilePath.getBytes());
        String hashCode = convertToHex(md.digest());
        
        String mainName = FilenameUtils.getName(mainFilePath);
        //TODO: Improve that check on extensions.
        String extension = FilenameUtils.getExtension(mainName);
        String baseName = cutExtension(extension) ? FilenameUtils.removeExtension(mainName) : mainName;
        String outputLocalFolder = "." + baseName + "_" + hashCode;
        destinationDir = new File(parentDirectory, outputLocalFolder);

        // append base file folder tree to the optional external data dir
        if (baseDir != null) {
            destinationDir = new File(baseDir, outputLocalFolder);
        }

        boolean createdDir = false;
        if (!destinationDir.exists()) {
            createdDir = destinationDir.mkdirs();
            // Creation of an origin.txt file with the absolute file path internally written
            File origin = new File(destinationDir, "origin.txt");
            FileUtils.write(origin, ncFile.getAbsolutePath());
        }

        // Init auxiliary file names
        slicesIndexFile = new File(destinationDir, baseName + ".idx");
        if (indexFilePath != null) {
            indexerFile = new File(indexFilePath);
            if (!indexerFile.exists() || !indexerFile.canRead()) {
                indexerFile = null;
            }
        }else{
            // Compose the path to an optional XML auxiliary file in the same directory of the input file
            // (filename.xml)
            String optionalAuxiliaryPath = parentDirectory.getAbsolutePath() + File.separator + 
                    baseName + INDEX_SUFFIX;
            indexerFile = new File(optionalAuxiliaryPath);
            if (!indexerFile.exists() || !indexerFile.canRead()) {
                // Compose the path to an optional XML auxiliary file inside a directory of with the same 
                // name of the file but with a dot before (.filename/filename.xml) 
                optionalAuxiliaryPath = parentDirectory.getAbsolutePath() + File.separator + "." + 
                        baseName + File.separator + baseName + INDEX_SUFFIX;
                indexerFile = new File(optionalAuxiliaryPath);
                if (!indexerFile.exists() || !indexerFile.canRead()) {
                    indexerFile = null;
                }
            }
        }

        if (indexerFile == null) {
            indexerFile = new File(destinationDir, baseName + INDEX_SUFFIX);
        }
        
        if (!createdDir) {
            // Check for index to be reset only in case we didn't created a new directory.
            checkReset(ncFile, slicesIndexFile, destinationDir);
        }
        fileSetManager.addFile(destinationDir.getAbsolutePath());

        // init
        initIndexer();
    }

