    /**
     * Build a Projected {@link CoordinateReferenceSystem} parsing Conversion parameters and
     * Ellipsoid
     *
     * @param props
     * @param parameters
     * @param ellipsoid
     * @return
     * @throws NoSuchIdentifierException
     * @throws FactoryException
     */
    public static CoordinateReferenceSystem buildCRS(
            Map<String, ?> props, ParameterValueGroup parameters, Ellipsoid ellipsoid)
            throws NoSuchIdentifierException, FactoryException {
        // Refine the parameters by adding the required ellipsoid's related params
        updateEllipsoidParams(parameters, ellipsoid);

        // Datum
        final GeodeticDatum datum = createGeodeticDatum(DEFAULT_DATUM_NAME, ellipsoid);

        // Base Geographic CRS
        GeographicCRS baseCRS = createGeographicCRS(NetCDFUtilities.UNKNOWN, datum);

        // create math transform
        String name = NetCDFUtilities.UNKNOWN;
        Unit unit = getUnit(props);
        if (props != null && !props.isEmpty() && props.containsKey(NetCDFUtilities.NAME)) {
            name = (String) props.get(NetCDFUtilities.NAME);
        }
        DefiningConversion conversionFromBase = new DefiningConversion(name, parameters);
        DefaultCartesianCS derivedCS = createCartesianCS(name, unit);

        MathTransform transform = mtFactory.createBaseToDerived(baseCRS, parameters, derivedCS);
        OperationMethod method = conversionFromBase.getMethod();
        if (!(method instanceof MathTransformProvider)) {
            OperationMethod opMethod = mtFactory.getLastMethodUsed();
            if (opMethod instanceof MathTransformProvider) {
                final Map<String, Object> copy = new HashMap<String, Object>(props);
                copy.put(
                        DefaultProjectedCRS.CONVERSION_TYPE_KEY,
                        ((MathTransformProvider) opMethod).getOperationType());
                props = copy;
            }
        }

        return ProjectionBuilder.createProjectedCRS(
                props, baseCRS, conversionFromBase, transform, derivedCS);
    }

