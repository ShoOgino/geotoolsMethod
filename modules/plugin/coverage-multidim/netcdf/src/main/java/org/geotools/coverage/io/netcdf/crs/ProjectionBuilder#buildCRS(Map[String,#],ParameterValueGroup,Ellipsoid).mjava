    /**
     * Build a Projected {@link CoordinateReferenceSystem} parsing Conversion parameters and
     * Ellipsoid
     */
    public static CoordinateReferenceSystem buildCRS(
            Map<String, ?> props, ParameterValueGroup parameters, Ellipsoid ellipsoid)
            throws NoSuchIdentifierException, FactoryException {
        // Refine the parameters by adding the required ellipsoid's related params
        updateEllipsoidParams(parameters, ellipsoid);

        // Datum
        final GeodeticDatum datum = createGeodeticDatum(DEFAULT_DATUM_NAME, ellipsoid);

        // Base Geographic CRS
        GeographicCRS baseCRS = createGeographicCRS(NetCDFUtilities.UNKNOWN, datum);

        // create math transform
        String name = NetCDFUtilities.UNKNOWN;
        Unit unit = getUnit(props);
        if (props != null && !props.isEmpty() && props.containsKey(NetCDFUtilities.NAME)) {
            name = (String) props.get(NetCDFUtilities.NAME);
        }
        DefiningConversion conversionFromBase = getConversion(parameters, name);
        AbstractCS derivedCS = createCoordinateSystem(name, unit);

        MathTransform transform = mtFactory.createBaseToDerived(baseCRS, parameters, derivedCS);
        OperationMethod method = conversionFromBase.getMethod();
        if (!(method instanceof MathTransformProvider)) {
            OperationMethod opMethod = mtFactory.getLastMethodUsed();
            if (opMethod instanceof MathTransformProvider) {
                final Map<String, Object> copy = new HashMap<String, Object>(props);
                copy.put(
                        DefaultProjectedCRS.CONVERSION_TYPE_KEY,
                        ((MathTransformProvider) opMethod).getOperationType());
                props = copy;
            }
        }

        if (derivedCS instanceof DefaultCartesianCS) {
            return ProjectionBuilder.createProjectedCRS(
                    props, baseCRS, conversionFromBase, transform, (CartesianCS) derivedCS);
        } else {
            CoordinateSystemAxis axis1 =
                    new DefaultCoordinateSystemAxis(
                            new SimpleInternationalString(name + " axis 0"),
                            "0",
                            AxisDirection.OTHER,
                            AbstractUnit.ONE);
            CoordinateSystemAxis axis2 =
                    new DefaultCoordinateSystemAxis(
                            new SimpleInternationalString(name + " axis 1"),
                            "1",
                            AxisDirection.OTHER,
                            AbstractUnit.ONE);
            final CoordinateSystem cs =
                    new AbstractCS(
                            Collections.singletonMap("name", name),
                            new CoordinateSystemAxis[] {axis1, axis2});
            CRSFactory factory = ReferencingFactoryFinder.getCRSFactory(null);
            final Conversion conversion =
                    new DefiningConversion(
                            singletonMap(IdentifiedObject.NAME_KEY, method.getName().getCode()),
                            method,
                            transform);
            return factory.createDerivedCRS(
                    Collections.singletonMap("name", name), baseCRS, conversion, cs);
        }
    }

