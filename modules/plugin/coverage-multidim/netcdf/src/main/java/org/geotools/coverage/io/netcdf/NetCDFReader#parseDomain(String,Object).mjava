    /**
     * Parse a domain 
     * @param name
     * @param domain
     * @return
     * @throws IOException
     */
    private String parseDomain(String name, Object domain) throws IOException {
        name = name.toLowerCase();
        if (domain instanceof VerticalDomain) {
            
            // Vertical domain management
            VerticalDomain verticalDomain = (VerticalDomain) domain;
            if (name.endsWith("domain")) {
                
                // global domain
                SortedSet<? extends NumberRange<Double>> verticalElements = verticalDomain.getVerticalElements(true, null);
                return buildVerticalList(verticalElements);
            } else if (name.endsWith("datatype")) {
                return Double.class.getName();
            } else {
                // min or max requests
                SortedSet<? extends NumberRange<Double>> verticalElements = verticalDomain.getVerticalElements(false, null);
                NumberRange<Double> overall = verticalElements.iterator().next();
                if (name.endsWith("maximum")) {
                    return Double.toString(overall.getMaximum());
                } else if (name.endsWith("minimum")) {
                    return Double.toString(overall.getMinimum());
                } else {
                    throw new IllegalArgumentException("Unsupported metadata name");
                }
            }
        } else if (domain instanceof TemporalDomain) {
            
            // Temporal domain management
            TemporalDomain temporalDomain = (TemporalDomain) domain;
            if (name.endsWith("domain")) {
                // global domain
                SortedSet<? extends DateRange> temporalElements = temporalDomain.getTemporalElements(true, null);
                return buildTemporalList(temporalElements);
            } else if (name.endsWith("datatype")) {
                return Date.class.getName();
            } else {
                SortedSet<? extends DateRange> temporalElements = temporalDomain.getTemporalElements(false, null);
                DateRange overall = temporalElements.iterator().next();
                // min or max requests
                if (name.endsWith("maximum")) {
                    return ConvertersHack.convert(overall.getMaxValue(), String.class);
                } else if (name.endsWith("minimum")) {
                    return ConvertersHack.convert(overall.getMinValue(), String.class);
                } else {
                    throw new IllegalArgumentException("Unsupported metadata name");
                }
            }
        } else if (domain instanceof AdditionalDomain) {
            
            // Vertical domain management
            AdditionalDomain additionalDomain = (AdditionalDomain) domain;
            if (name.endsWith("domain")) {
                Set<Object> elements = additionalDomain.getElements(false, null);
                return buildElementsList(elements);
            } else if (name.endsWith("datatype")) {
                switch (additionalDomain.getType()) {
                    case NUMBER:
                        return Double.class.getName();
                    case DATE:
                        return Date.class.getName();
                    default:
                        return String.class.getName();
                }
            } else {
                // min or max requests
                Set<Object> elements = additionalDomain.getElements(true, null);
                Range<?> range = (Range<?>) elements.iterator().next();
                if (name.endsWith("maximum")) {
                    return ConvertersHack.convert(range.getMaxValue(), String.class);
                } else if (name.endsWith("minimum")) {
                    return ConvertersHack.convert(range.getMinValue(), String.class);
                } else {
                    throw new IllegalArgumentException("Unsupported metadata name");
                }
            }
        } else {
            throw new IllegalArgumentException("Unsupported domain ");
        }
    }

