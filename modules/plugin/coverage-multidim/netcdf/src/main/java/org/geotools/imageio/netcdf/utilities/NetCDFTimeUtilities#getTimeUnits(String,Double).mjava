    /**
     * Converts NetCDF time units into opportune Calendar ones.
     *
     * @param units {@link String}
     * @return int
     */
    public static int getTimeUnits(String units, Double vd) {
        if (units == null || units.isEmpty()) {
            return -1;
        }
        String unit = units.toLowerCase();
        if (MONTH_SET.contains(unit)) {
            if (vd == null || vd == 0.0) return Calendar.MONTH;
            else {
                // Using Panoply approach where a month is made of 30 days
                // Note that UCAR recommends not using "month" as unit
                double days = vd * 30;
                if (days - Math.floor(days) == 0.0) return Calendar.DAY_OF_MONTH;

                double hours = days * 24;
                if (hours - Math.floor(hours) == 0.0) return Calendar.HOUR;

                double minutes = hours * 60;
                if (minutes - Math.floor(minutes) == 0.0) return Calendar.MINUTE;

                double seconds = minutes * 60;
                if (seconds - Math.floor(seconds) == 0.0) return Calendar.SECOND;

                return Calendar.MILLISECOND;
            }
        } else if (DAY_SET.contains(unit)) {
            if (vd == null || vd == 0.0) return Calendar.DATE;
            else {
                double hours = vd * 24;
                if (hours - Math.floor(hours) == 0.0) return Calendar.HOUR;

                double minutes = vd * 24 * 60;
                if (minutes - Math.floor(minutes) == 0.0) return Calendar.MINUTE;

                double seconds = vd * 24 * 60 * 60;
                if (seconds - Math.floor(seconds) == 0.0) return Calendar.SECOND;

                return Calendar.MILLISECOND;
            }
        } else if (HOUR_SET.contains(unit)) {
            if (vd == null || vd == 0.0) return Calendar.HOUR;
            else {
                double minutes = vd * 60;
                if (minutes - Math.floor(minutes) == 0.0) return Calendar.MINUTE;

                double seconds = vd * 60 * 60;
                if (seconds - Math.floor(seconds) == 0.0) return Calendar.SECOND;

                return Calendar.MILLISECOND;
            }
        } else if (MINUTE_SET.contains(unit)) {
            if (vd == null || vd == 0.0) return Calendar.MINUTE;
            else {
                double seconds = vd * 60;
                if (seconds - Math.floor(seconds) == 0.0) return Calendar.SECOND;

                return Calendar.MILLISECOND;
            }
        } else if (SECOND_SET.contains(unit)) {
            if (vd == null || vd == 0.0) return Calendar.SECOND;
            else {
                return Calendar.MILLISECOND;
            }
        }

        return -1;
    }

