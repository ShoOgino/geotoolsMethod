    /**
     * Check that a GRIB2 file is interpreted as a rotated pole projection with expected parameters.
     * 
     * @param gribFileName name of the GRIB2 file
     * @param expectedCentralMeridian expected central meridian of rotated pole projection
     * @param expectedLatitudeOfOrigin expected latitude of origin of the rotated pole projection
     */
    private void checkRotatedPole(String gribFileName, double expectedCentralMeridian,
            double expectedLatitudeOfOrigin) throws Exception {
        File file = TestData.file(this, gribFileName);
        NetCDFReader reader = null;
        try {
            reader = new NetCDFReader(file, null);
            String[] coverages = reader.getGridCoverageNames();
            CoordinateReferenceSystem crs = reader.getCoordinateReferenceSystem(coverages[0]);
            NetCDFCoordinateReferenceSystemType crsType = NetCDFCoordinateReferenceSystemType
                    .parseCRS(crs);
            assertSame(NetCDFCoordinateReferenceSystemType.ROTATED_POLE, crsType);
            assertSame(NetCDFCoordinateReferenceSystemType.NetCDFCoordinate.RLATLON_COORDS,
                    crsType.getCoordinates());
            assertSame(NetCDFProjection.ROTATED_POLE, crsType.getNetCDFProjection());
            assertTrue(crs instanceof ProjectedCRS);
            ProjectedCRS projectedCRS = ((ProjectedCRS) crs);
            Projection projection = projectedCRS.getConversionFromBase();
            MathTransform transform = projection.getMathTransform();
            assertTrue(transform instanceof RotatedPole);
            RotatedPole rotatedPole = (RotatedPole) transform;
            ParameterValueGroup values = rotatedPole.getParameterValues();
            assertEquals(expectedCentralMeridian,
                    values.parameter(NetCDFUtilities.CENTRAL_MERIDIAN).doubleValue(), DELTA);
            assertEquals(expectedLatitudeOfOrigin,
                    values.parameter(NetCDFUtilities.LATITUDE_OF_ORIGIN).doubleValue(), DELTA);
        } finally {
            if (reader != null) {
                reader.dispose();
            }
        }
    }

