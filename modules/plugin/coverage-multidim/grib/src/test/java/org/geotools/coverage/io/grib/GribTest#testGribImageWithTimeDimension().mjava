    /** Test on a Grib image with temporal bands, querying different bands */
    @Test
    public void testGribImageWithTimeDimension() throws MalformedURLException, IOException {
        // Selection of the input file
        final File inputFile = TestData.file(this, "tpcprblty.2019100912.incremental.grib2");
        // Get format
        final AbstractGridFormat format =
                GridFormatFinder.findFormat(inputFile.toURI().toURL(), null);
        assertTrue(format.accepts(inputFile));
        AbstractGridCoverage2DReader reader = null;
        assertNotNull(format);
        try {

            reader = format.getReader(inputFile, null);
            assertNotNull(reader);

            // Selection of all the Coverage names
            String[] names = reader.getGridCoverageNames();
            assertNotNull(names);

            // Name of the first coverage
            String coverageName = names[0];

            // Parsing metadata values
            assertEquals(
                    "true",
                    reader.getMetadataValue(coverageName, GridCoverage2DReader.HAS_TIME_DOMAIN));
            assertEquals(
                    "false",
                    reader.getMetadataValue(
                            coverageName, GridCoverage2DReader.HAS_ELEVATION_DOMAIN));

            // Get the envelope
            final ParameterValue<GridGeometry2D> gg =
                    AbstractGridFormat.READ_GRIDGEOMETRY2D.createValue();
            final GeneralEnvelope originalEnvelope = reader.getOriginalEnvelope(coverageName);
            // gg.setValue(originalEnvelope);

            // Selecting the same gridRange
            GridEnvelope gridRange = reader.getOriginalGridRange(coverageName);

            final ParameterValue<List> time =
                    new DefaultParameterDescriptor<>("TIME", List.class, null, null).createValue();
            // 2019-10-09T18:00:00.000Z
            time.setValue(new ArrayList<>(Collections.singletonList(new Date(1570644000000L))));

            // HEIGHT_ABOVE_GROUND = "[10.0]"
            final ParameterValue<List> height =
                    new DefaultParameterDescriptor<>("HEIGHT_ABOVE_GROUND", List.class, null, null)
                            .createValue();
            height.setValue(new ArrayList<>(Collections.singletonList(10.0)));

            GeneralParameterValue[] values = new GeneralParameterValue[] {gg, time, height};

            // Read with 0th date
            GridCoverage2D grid = reader.read(coverageName, values);
            assertNotNull(grid);

            // Read with 12th date
            // 2019-10-12T18:00:00.000Z
            time.setValue(new ArrayList<>(Collections.singletonList(new Date(1570903200000L))));
            grid = reader.read(coverageName, values);
            assertNotNull(grid);
        } finally {
            // Dispose
            if (reader != null) {
                try {
                    reader.dispose();
                } catch (Throwable t) {
                    // Does nothing
                }
            }
        }
    }

