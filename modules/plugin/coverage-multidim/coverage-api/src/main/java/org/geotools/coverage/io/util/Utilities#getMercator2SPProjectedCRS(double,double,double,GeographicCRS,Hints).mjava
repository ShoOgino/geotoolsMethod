    /**
     * Simple utility method which allows to build a Mercator2SP Projected CRS given the set of
     * required parameters. It will be used by several Terascan products.
     */
    @SuppressWarnings("deprecation")
    public static CoordinateReferenceSystem getMercator2SPProjectedCRS(
            final double standardParallel,
            final double centralMeridian,
            final double natOriginLat,
            GeographicCRS sourceCRS,
            Hints hints)
            throws DataSourceException {
        CoordinateReferenceSystem projectedCRS = null;

        // //
        //
        // Creating a proper projected CRS
        //
        // //
        final ReferencingFactoryContainer fg = ReferencingFactoryContainer.instance(hints);
        ParameterValueGroup params;
        try {
            params = mtFactory.getDefaultParameters("Mercator_2SP");
            params.parameter("standard_parallel_1").setValue(standardParallel);
            params.parameter("central_meridian").setValue(centralMeridian);
            params.parameter("false_northing").setValue(0);
            params.parameter("false_easting").setValue(0);
            params.parameter("latitude_of_origin").setValue(natOriginLat);

            // //
            //
            // Setting the CRS
            //
            // //

            final Map<String, Object> props = new HashMap<>();
            props.put("name", "Mercator CRS");
            OperationMethod method = null;
            final MathTransform mt =
                    fg.getMathTransformFactory()
                            .createBaseToDerived(sourceCRS, params, DefaultCartesianCS.PROJECTED);
            if (method == null) {
                method = fg.getMathTransformFactory().getLastMethodUsed();
            }
            projectedCRS =
                    ((ReferencingObjectFactory) fg.getCRSFactory())
                            .createProjectedCRS(
                                    props, method, sourceCRS, mt, DefaultCartesianCS.PROJECTED);
        } catch (FactoryException e) {
            throw new DataSourceException(e);
        }
        return projectedCRS;
    }

