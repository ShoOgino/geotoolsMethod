    /**
     * Returns all the {@link Driver}s that can read the supplied {@link URL} url.
     *
     * @param url is the object to search a {@link Driver} that is able to read
     * @return an unmodifiable {@link Set} comprising all the {@link Driver} that can read the
     *     {@link URL} url.
     */
    public static Set<Driver> findDrivers(URL url) {
        final Set<? extends Driver> availableDrivers = CoverageIO.getAvailableDrivers();
        final Set<Driver> drivers = new HashSet<>();
        final Iterator<? extends Driver> it = availableDrivers.iterator();
        while (it.hasNext()) {
            // get the factory
            final Driver spi = it.next();
            // check if we can accept it
            Map<String, Serializable> params = new HashMap<>();
            params.put("url", url);
            if (spi.isAvailable() && spi.canAccess(DriverCapabilities.CONNECT, params))
                drivers.add(spi);
        }

        return Collections.unmodifiableSet(drivers);
    }

