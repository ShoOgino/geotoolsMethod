    protected void testFeatureReader(String configName) {

        try {
            PreGeneralizedDataStore ds = getDataStore(configName);

            SimpleFeatureSource fs = ds.getFeatureSource("GenStreams");
            assertTrue(fs.getSupportedHints().contains(Hints.GEOMETRY_DISTANCE));

            Filter filter = CQL.toFilter("CAT_ID = 2");

            Query[] queries = new Query[2];
            queries[0] = new Query("GenStreams");
            queries[1] = new Query("GenStreams", filter, new String[] {"the_geom", "CAT_ID"});

            for (Query q : queries) {

                FeatureReader<SimpleFeatureType, SimpleFeature> reader;
                String typeName;

                q.getHints().put(Hints.GEOMETRY_DISTANCE, 1.0);
                reader = ds.getFeatureReader(q, Transaction.AUTO_COMMIT);
                typeName = reader.getFeatureType().getTypeName();
                assertEquals("GenStreams", typeName);
                assertEquals(
                        "the_geom", reader.getFeatureType().getGeometryDescriptor().getLocalName());
                while (reader.hasNext()) {
                    SimpleFeature f = reader.next();
                    checkPoints(f, 0.0);
                }
                reader.close();

                q.getHints().put(Hints.GEOMETRY_DISTANCE, 5.0);
                reader = ds.getFeatureReader(q, Transaction.AUTO_COMMIT);
                typeName = reader.getFeatureType().getTypeName();
                assertEquals("GenStreams", typeName);
                assertEquals(
                        "the_geom", reader.getFeatureType().getGeometryDescriptor().getLocalName());
                while (reader.hasNext()) {
                    SimpleFeature f = reader.next();
                    checkPoints(f, 5.0);
                }
                reader.close();

                q.getHints().put(Hints.GEOMETRY_DISTANCE, 10.0);
                reader = ds.getFeatureReader(q, Transaction.AUTO_COMMIT);
                typeName = reader.getFeatureType().getTypeName();
                assertEquals("GenStreams", typeName);
                assertEquals(
                        "the_geom", reader.getFeatureType().getGeometryDescriptor().getLocalName());
                while (reader.hasNext()) {
                    SimpleFeature f = reader.next();
                    checkPoints(f, 10.0);
                }
                reader.close();

                q.getHints().put(Hints.GEOMETRY_DISTANCE, 20.0);
                reader = ds.getFeatureReader(q, Transaction.AUTO_COMMIT);
                typeName = reader.getFeatureType().getTypeName();
                assertEquals("GenStreams", typeName);
                assertEquals(
                        "the_geom", reader.getFeatureType().getGeometryDescriptor().getLocalName());
                while (reader.hasNext()) {
                    SimpleFeature f = reader.next();
                    checkPoints(f, 20.0);
                }
                reader.close();

                q.getHints().put(Hints.GEOMETRY_DISTANCE, 50.0);
                reader = ds.getFeatureReader(q, Transaction.AUTO_COMMIT);
                typeName = reader.getFeatureType().getTypeName();
                assertEquals("GenStreams", typeName);
                assertEquals(
                        "the_geom", reader.getFeatureType().getGeometryDescriptor().getLocalName());
                while (reader.hasNext()) {
                    SimpleFeature f = reader.next();
                    checkPoints(f, 50.0);
                }
                reader.close();
            }
        } catch (Exception ex) {
            Assert.fail(ex.getMessage());
        }
    }

