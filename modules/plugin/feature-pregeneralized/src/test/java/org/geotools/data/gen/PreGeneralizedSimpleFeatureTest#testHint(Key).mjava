    private boolean testHint(Key hintKey) {
        String baseName = "streams";
        String typeName = "GenStreams";
        try {
            // Get base features
            DataStore baseDs = TestSetup.REPOSITORY.dataStore("dsStreams");
            SimpleFeatureSource fs = baseDs.getFeatureSource(baseName);
            SimpleFeatureCollection fColl = fs.getFeatures();
            Geometry original = null;
            try (SimpleFeatureIterator iterator = fColl.features()) {
                if (iterator.hasNext()) {
                    original = (Geometry) iterator.next().getDefaultGeometry();
                }
            }
            double width = original.getEnvelope().getEnvelopeInternal().getWidth();

            // Get generalized features
            GeneralizationInfosProvider provider = new GeneralizationInfosProviderImpl();
            GeneralizationInfos ginfos =
                    provider.getGeneralizationInfos("src/test/resources/geninfo_horizontal.xml");
            PreGeneralizedDataStore ds = new PreGeneralizedDataStore(ginfos, TestSetup.REPOSITORY);
            fs = ds.getFeatureSource(typeName);
            Query query = new Query();
            if (hintKey != null) {
                Hints hints = new Hints(Hints.GEOMETRY_SIMPLIFICATION, width / 2);
                query.setHints(hints);
            }
            Geometry simplified = null;
            fColl = fs.getFeatures(query);
            try (SimpleFeatureIterator iterator = fColl.features()) {
                if (iterator.hasNext())
                    simplified = (Geometry) iterator.next().getDefaultGeometry();
            }
            return original.getNumPoints() > simplified.getNumPoints();
        } catch (IOException ex) {
            java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", ex);
            Assert.fail();
            return false;
        }
    }

