    protected void testGetFeatures3(String configName) {
        try {
            PreGeneralizedDataStore ds = getDataStore(configName);

            SimpleFeatureSource fs = ds.getFeatureSource("GenStreams");
            assertTrue(fs.getSupportedHints().contains(Hints.GEOMETRY_DISTANCE));

            SimpleFeatureCollection fCollection;
            String typeName;

            fCollection = fs.getFeatures();
            typeName = fCollection.getSchema().getTypeName();
            assertEquals("GenStreams", typeName);
            assertTrue(fCollection.size() > 0);
            assertFalse(fCollection.isEmpty());

            Object[] array = fCollection.toArray();
            assertEquals(array.length, fCollection.size());
            assertNotNull(array[0]);
            assertTrue(array[0] instanceof PreGeneralizedSimpleFeature);

            array = fCollection.toArray(new Object[fCollection.size()]);
            assertEquals(array.length, fCollection.size());
            assertNotNull(array[0]);
            assertTrue(array[0] instanceof PreGeneralizedSimpleFeature);

            assertEquals(fCollection.getBounds(), fs.getBounds());
            assertTrue(fCollection.contains(array[0]));

            List<Object> list = new ArrayList<>();
            list.add(array[0]);
            list.add(array[1]);
            assertTrue(fCollection.containsAll(list));

            SimpleFeatureCollection subCollection = fCollection.subCollection(Filter.INCLUDE);
            typeName = subCollection.getSchema().getTypeName();
            assertEquals("GenStreams", typeName);
            assertEquals(fCollection.size(), subCollection.size());
            assertTrue(subCollection.contains(array[0]));

            // subCollection = fCollection.subCollection(Filter.EXCLUDE);
            // typeName=subCollection.getSchema().getTypeName();
            // assertTrue("GenStreams".equals(typeName));
            // assertTrue(subCollection.size()==0);
            // assertFalse(subCollection.contains(array[0]));

            // SortBy2 sortBy = new SortByImpl(new
            // AttributeExpressionImpl("CAT_ID"),SortOrder.ASCENDING);
            SortBy sortBy =
                    new SortBy() {
                        public PropertyName getPropertyName() {
                            return new AttributeExpressionImpl("CAT_ID");
                        }

                        public SortOrder getSortOrder() {
                            return SortOrder.ASCENDING;
                        }
                    };
            SimpleFeatureCollection sortedCollection = fCollection.sort(sortBy);
            // null here

            // /typeName=sortedCollection.getSchema().getTypeName();
            // assertTrue("GenStreams".equals(typeName))
            // assertTrue(fCollection.size()==sortedCollection.size());

            final List<Long> catIds = new ArrayList<>();

            FeatureVisitor checkSortVisitor =
                    new FeatureVisitor() {

                        public void visit(Feature feature) {
                            SimpleFeature sf = (SimpleFeature) feature;
                            assertTrue(feature instanceof PreGeneralizedSimpleFeature);
                            long catid = (Long) sf.getAttribute("CAT_ID");
                            catIds.add(catid);
                        }
                    };

            try {
                fCollection.accepts(checkSortVisitor, null);
            } catch (Throwable e) {
                Assert.fail();
            }
            assertEquals(catIds.size(), fCollection.size());
            ds.dispose();

        } catch (Exception ex) {
            Assert.fail(ex.getMessage());
        }
    }

