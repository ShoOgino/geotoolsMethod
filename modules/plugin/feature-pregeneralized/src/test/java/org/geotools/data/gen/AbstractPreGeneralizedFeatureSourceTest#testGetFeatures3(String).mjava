    protected void testGetFeatures3(String configName) {
        try {
            PreGeneralizedDataStore ds = getDataStore(configName);

            SimpleFeatureSource fs = ds.getFeatureSource("GenStreams");
            Assert.assertTrue(fs.getSupportedHints().contains(Hints.GEOMETRY_DISTANCE));

            SimpleFeatureCollection fCollection = fs.getFeatures();
            String typeName = fCollection.getSchema().getTypeName();
            Assert.assertEquals("GenStreams", typeName);
            Assert.assertTrue(fCollection.size() > 0);
            Assert.assertFalse(fCollection.isEmpty());

            Object[] array = fCollection.toArray();
            Assert.assertEquals(array.length, fCollection.size());
            Assert.assertNotNull(array[0]);
            Assert.assertTrue(array[0] instanceof PreGeneralizedSimpleFeature);

            array = fCollection.toArray(new Object[fCollection.size()]);
            Assert.assertEquals(array.length, fCollection.size());
            Assert.assertNotNull(array[0]);
            Assert.assertTrue(array[0] instanceof PreGeneralizedSimpleFeature);

            Assert.assertEquals(fCollection.getBounds(), fs.getBounds());
            Assert.assertTrue(fCollection.contains(array[0]));

            List<Object> list = new ArrayList<>();
            list.add(array[0]);
            list.add(array[1]);
            Assert.assertTrue(fCollection.containsAll(list));

            SimpleFeatureCollection subCollection = fCollection.subCollection(Filter.INCLUDE);
            typeName = subCollection.getSchema().getTypeName();
            Assert.assertEquals("GenStreams", typeName);
            Assert.assertEquals(fCollection.size(), subCollection.size());
            Assert.assertTrue(subCollection.contains(array[0]));

            final List<Long> catIds = new ArrayList<>();
            FeatureVisitor checkSortVisitor =
                    feature -> {
                        SimpleFeature sf = (SimpleFeature) feature;
                        Assert.assertTrue(feature instanceof PreGeneralizedSimpleFeature);
                        long catid = (Long) sf.getAttribute("CAT_ID");
                        catIds.add(catid);
                    };

            try {
                fCollection.accepts(checkSortVisitor, null);
            } catch (Throwable e) {
                Assert.fail();
            }
            Assert.assertEquals(catIds.size(), fCollection.size());
            ds.dispose();

        } catch (Exception ex) {
            Assert.fail(ex.getMessage());
        }
    }

