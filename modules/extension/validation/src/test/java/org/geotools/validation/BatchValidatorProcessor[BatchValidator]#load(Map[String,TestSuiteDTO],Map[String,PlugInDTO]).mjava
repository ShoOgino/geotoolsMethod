    /**
     * load purpose.
     *
     * <p>loads this instance data into this instance.
     */
    public void load(Map<String, TestSuiteDTO> testSuites, Map<String, PlugInDTO> plugIns) {
        // step 1 make a list required plug-ins
        Set<String> plugInNames = new HashSet<>();
        Iterator<String> suiteNames = testSuites.keySet().iterator();

        // go through each test suite
        while (suiteNames.hasNext()) {
            TestSuiteDTO dto = testSuites.get(suiteNames.next());
            Iterator j = dto.getTests().keySet().iterator();
            // go through each test plugIn
            while (j.hasNext()) {
                TestDTO tdto = (TestDTO) dto.getTests().get(j.next());
                plugInNames.add(tdto.getPlugIn().getName());
            }
        }

        Iterator<PlugInDTO> plugins = plugIns.values().iterator();
        Map<Object, Object> errors = new HashMap<>();

        // go through each plugIn and add it to errors
        while (plugins.hasNext()) errors.put(plugins.next(), Boolean.FALSE);

        // step 2 configure plug-ins with defaults
        Map<String, PlugIn> defaultPlugIns = new HashMap<>(plugInNames.size());
        Iterator<String> pluginNames = plugInNames.iterator();

        // go through each plugIn
        while (pluginNames.hasNext()) {
            String plugInName = pluginNames.next();
            PlugInDTO dto = plugIns.get(plugInName);
            Class plugInClass = null;

            try {
                plugInClass = Class.forName(dto.getClassName());
            } catch (ClassNotFoundException e) {
                // Error, using default.
                errors.put(dto, e);
                java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e);
            }

            if (plugInClass == null) {
                plugInClass = Validation.class;
            }

            Map<String, Object> plugInArgs = dto.getArgs();

            if (plugInArgs == null) {
                plugInArgs = new HashMap<>();
            }

            try {
                PlugIn plugIn =
                        new org.geotools.validation.PlugIn(
                                plugInName, plugInClass, dto.getDescription(), plugInArgs);
                defaultPlugIns.put(plugInName, plugIn);
            } catch (ValidationException e) {
                java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e);
                errors.put(dto, e);

                // error should log here
                continue;
            }

            errors.put(dto, Boolean.TRUE); // store the plugIn
        }

        // step 3 configure plug-ins with tests + add to processor
        suiteNames = testSuites.keySet().iterator();

        // for each TEST SUITE
        while (suiteNames.hasNext()) {
            TestSuiteDTO tdto = (TestSuiteDTO) testSuites.get(suiteNames.next());
            Iterator j = tdto.getTests().keySet().iterator();

            // for each TEST in the test suite
            while (j.hasNext()) {
                TestDTO dto = (TestDTO) tdto.getTests().get(j.next());

                // deal with test
                @SuppressWarnings("unchecked")
                Map<String, Object> testArgs = (Map) dto.getArgs();

                if (testArgs == null) {
                    testArgs = new HashMap<>();
                } else {
                    Map<String, Object> m = new HashMap<>();
                    Iterator<String> k = testArgs.keySet().iterator();

                    while (k.hasNext()) {
                        ArgumentDTO adto = (ArgumentDTO) testArgs.get(k.next());
                        m.put(adto.getName(), adto.getValue());
                    }

                    testArgs = m;
                }

                try {
                    PlugIn plugIn =
                            (org.geotools.validation.PlugIn)
                                    defaultPlugIns.get(dto.getPlugIn().getName());
                    Validation validation =
                            plugIn.createValidation(dto.getName(), dto.getDescription(), testArgs);

                    if (validation instanceof FeatureValidation) {
                        addValidation((FeatureValidation) validation);
                    }

                    if (validation instanceof IntegrityValidation) {
                        addValidation((IntegrityValidation) validation);
                    }
                } catch (ValidationException e) {
                    java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e);
                    errors.put(dto, e);

                    // error should log here
                    continue;
                }

                errors.put(dto, Boolean.TRUE);
            }

            errors.put(tdto, Boolean.TRUE);
        } // end while each test suite
    } // end load method

