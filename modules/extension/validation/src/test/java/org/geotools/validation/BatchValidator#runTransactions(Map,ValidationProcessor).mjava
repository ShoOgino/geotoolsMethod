    private static void runTransactions(Map dsm, ValidationProcessor v) {
        if ((dsm == null) || (dsm.size() == 0)) {
            System.out.println("No Datastores were defined.");

            return;
        }

        if (v == null) {
            System.err.println("An error occured: Cannot run without a ValidationProcessor.");

            return;
        }

        Iterator it = dsm.keySet().iterator();

        /** set up the data repository */
        while (it.hasNext()) {
            String typeRef = it.next().toString();
            DataStore ds = (DataStore) dsm.get(typeRef);
            try {
                dataRepository.register(typeRef, ds);
            } catch (IOException e) {
                java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e);
            }
        }
        validator = new Validator(dataRepository, v);

        /** validator is now ready to go */

        /** do the feature type validation dance */
        for (DataStore store : dataRepository.getDataStores()) {
            String typeNames[] = null;
            try {
                typeNames = store.getTypeNames();
            } catch (IOException e) {
                java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e);
            }
            // HACK: get ALL feature types and smash through their features
            // this is really really slow and will be fixed
            for (String typeName : typeNames) {
                try {
                    validator.featureValidation(
                            typeName, store.getFeatureSource(typeName).getFeatures(), null);
                } catch (Exception e1) {
                    java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e1);
                }
            }
        }

        ReferencedEnvelope envelope = makeEnvelope();

        /** do the integrity validation dance */
        try {
            validator.integrityValidation(dsm, envelope, null);
        } catch (Exception e1) {
            java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e1);
        }

        if (true) // HACK premature evacuation
        return;

        // --------------------------------------------------
        // start of the old code

        // v.integrityValidation()
        // v.featureValidation( , fs.getSchema(),fs.getFeatures().features(), vr);

        it = dsm.keySet().iterator();
        while (it.hasNext()) {
            Map sources = new HashMap();
            String key = it.next().toString();
            DataStore ds = (DataStore) dsm.get(key);
            String t = transProp.getProperty(key + ".Sources");
            String[] ss = t.split(",");

            for (int j = 0; j < ss.length; j++) {
                ss[j] = ss[j].trim();

                try {
                    SimpleFeatureSource fs = ds.getFeatureSource(ss[j]);
                    sources.put(ss, fs);

                    // BatchValidationResults vr = new BatchValidationResults();

                    // v.runFeatureTests( "" /** fix me */, fs.getSchema(),
                    // fs.getFeatures().features(), vr);
                    // System.out.println("Feature Test Results for " + key + ":"
                    // + ss[j]);
                    // System.out.println(vr.toString());
                } catch (Exception e) {
                    java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e);
                }
            }

            Envelope env = null;

            try {
                double minx = Double.parseDouble(transProp.getProperty("Bounds.minX"));
                double miny = Double.parseDouble(transProp.getProperty("Bounds.maxX"));
                double maxx = Double.parseDouble(transProp.getProperty("Bounds.maxX"));
                double maxy = Double.parseDouble(transProp.getProperty("Bounds.maxY"));
                env = new Envelope(minx, miny, maxx, maxy);
            } catch (Exception e) {
                System.err.println("Envelope not specified in Transaction.properties.");
                env = new Envelope();
            }

            if (env == null) {
                env =
                        new Envelope(
                                Integer.MIN_VALUE,
                                Integer.MIN_VALUE,
                                Integer.MAX_VALUE,
                                Integer.MAX_VALUE);
            }

            try {
                BatchValidationResults vr = new BatchValidationResults();

                // v.runIntegrityTests( null /* fix me */, sources, env, vr);
                System.out.println("Feature Integrety Test Results");
                System.out.println(vr.toString());
            } catch (Exception e) {
                java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e);
            }
        }
    }

