	public void testLinesIntersectIV_CorrectData()
	{
		// the visitor
		RoadNetworkValidationResults roadValidationResults = new RoadNetworkValidationResults();
		 
		LinesNotIntersectValidation noIntersectingLinesValidatorAll 
					= new LinesNotIntersectValidation();
        noIntersectingLinesValidatorAll.setName("linesIntersect"); 
        noIntersectingLinesValidatorAll.setDescription("Tests to see if any line geometries cross!"); 
        noIntersectingLinesValidatorAll.setLineTypeRef("road");
        noIntersectingLinesValidatorAll.setLineTypeRef("river");        
	
		try {
			processor.addValidation(noIntersectingLinesValidatorAll);
		} catch (Exception e) {
			assertTrue(false);
		}
		
		
//		Feature[] roads = new Feature[2];
//		roads[0] = roadFeatures[0];
//		roads[1] = newRoad;
//		roadFeatures = null;
//		roadFeatures = new Feature[2];
//		roadFeatures = roads;
//		
//		Feature[] rivers = new Feature[1];
//		rivers[0] = riverFeatures[1];
//		rivers[0] = newRiver;
//		riverFeatures = null;
//		riverFeatures = new Feature[2];
//		riverFeatures = roads;
//		
//		store = new MemoryDataStore();
//		store.addFeatures( roadFeatures );
//		store.addFeatures( riverFeatures );
		
		
		HashMap layers = new HashMap();
		try {
			layers.put("dataStoreId:road", DataUtilities.source(new SimpleFeature[] {newRoad}));
			layers.put("dataStoreId:river", DataUtilities.source(riverFeatures));
		}
		catch (Exception e) {
			assertTrue(false);
		}
	
	
		try {
			processor.runIntegrityTests( null, layers, null, roadValidationResults);
		} catch (Exception e1) {
			assertTrue(false);
		}
		
		System.out.println("NoLinesIntersect - correct");
		String[] messages = roadValidationResults.getFailedMessages();
		for (int i=0; i<messages.length; i++)
			System.out.println(messages[i]);
		assertTrue(roadValidationResults.getFailedMessages().length == 0);
	
	}

