    public void testURLConnection() {
        String place = "Vancouver";
        try {
            URL gazetteerURL =
                    new URL(
                            "http://cgdi-dev.geoconnections.org/cgi-bin/prototypes/cgdigaz/cgdigaz.cgi?version=1.0&request=GetPlacenameGeometry&wildcards=false&geomtype=bbox&placename="
                                    + place);
            HttpURLConnection gazetteerConnection =
                    (HttpURLConnection) gazetteerURL.openConnection();
            //            gazetteerConnection.setConnectTimeout(100);
            if (!("OK".equals(gazetteerConnection.getResponseMessage())))
                throw new Exception("An error occured creating the connection to the Gazetteer.");
            InputStream gazetteerInputStream = gazetteerConnection.getInputStream();
            InputStreamReader gazetteerInputStreamReader =
                    new InputStreamReader(gazetteerInputStream);
            BufferedReader gazetteerBufferedReader = new BufferedReader(gazetteerInputStreamReader);

            InputSource gazetteerInputSource = new InputSource(gazetteerBufferedReader);
            DocumentBuilderFactory dfactory = DocumentBuilderFactory.newInstance();
            dfactory.setNamespaceAware(true);

            // TODO turn on validation
            dfactory.setValidating(false);
            dfactory.setIgnoringComments(true);
            dfactory.setCoalescing(true);
            dfactory.setIgnoringElementContentWhitespace(true);

            Document serviceDoc = dfactory.newDocumentBuilder().parse(gazetteerInputSource);
            Element elem = serviceDoc.getDocumentElement();

            // elem == SimpleFeatureCollection at this point

            elem = getChildElement(elem, "queryInfo");
            if (elem == null)
                throw new NullPointerException("Invalid DOM tree returned by gazetteer.");

            // this number is the number of instances found.
            int number = Integer.parseInt(getChildText(elem, "numberOfResults"));

            if (number > 0) {
                // found vancouver!
            } else {
                // did not find vancouver
                // (but out plugin worked so we still pass the test
            }
        } catch (ConnectException timedOut) {
            return; // ignore server must be down
        } catch (Exception e) {
            java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e);
            fail(e.toString());
        }
    }

