    /**
     * Ensure Polygon is not covered by the Polygon.
     *
     * <p>
     *
     * @param layers a HashMap of key="TypeName" value="FeatureSource"
     * @param envelope The bounding box of modified features
     * @param results Storage for the error and warning messages
     * @return True if no features intersect. If they do then the validation failed.
     * @see org.geotools.validation.IntegrityValidation#validate(java.util.Map,
     *     org.locationtech.jts.geom.Envelope, org.geotools.validation.ValidationResults)
     */
    public boolean validate(
            Map<String, SimpleFeatureSource> layers, Envelope envelope, ValidationResults results)
            throws Exception {
        SimpleFeatureSource polySource1 = layers.get(getPolygonTypeRef());
        SimpleFeatureSource polySource2 = layers.get(getRestrictedPolygonTypeRef());

        Object[] poly1 = polySource1.getFeatures().toArray();
        Object[] poly2 = polySource2.getFeatures().toArray();

        if (!envelope.contains(polySource1.getBounds())) {
            results.error(
                    (SimpleFeature) poly1[0],
                    "Polygon Feature Source is not contained within the Envelope provided.");

            return false;
        }

        if (!envelope.contains(polySource2.getBounds())) {
            results.error(
                    (SimpleFeature) poly1[0],
                    "Restricted Polygon Feature Source is not contained within the Envelope provided.");

            return false;
        }

        for (Object value : poly2) {
            SimpleFeature tmp = (SimpleFeature) value;
            Geometry gt = (Geometry) tmp.getDefaultGeometry();

            for (Object o : poly1) {
                SimpleFeature tmp2 = (SimpleFeature) o;
                Geometry gt2 = (Geometry) tmp2.getDefaultGeometry();

                if (gt2.within(gt)) {
                    return false;
                }
            }
        }

        return true;
    }

