    /**
     * getChildText purpose.
     * 
     * <p>
     * Used to help with XML manipulations. Returns the text value of the
     * specified element name.  An exception occurs when the node is required
     * and not found.
     * </p>
     *
     * @param elem The root element to look for children in.
     * @param mandatory true when an exception should be thrown if the text
     *        does not exist.
     *
     * @return The value if the text was found, the null otherwise.
     *
     * @throws SAXException When text is required and not found.
     */
    public static String getElementText(Element elem, boolean mandatory)
        throws SAXException {
        String value = null;

        LOGGER.finest("getting element text for " + elem);

        if (elem != null) {
            Node child;

            NodeList childs = elem.getChildNodes();

            int nChilds = childs.getLength();

            for (int i = 0; i < nChilds; i++) {
                child = childs.item(i);

                if (child.getNodeType() == Node.TEXT_NODE) {
                    value = child.getNodeValue();

                    if (mandatory && "".equals(value.trim())) {
                        throw new SAXException(elem.getNodeName()
                            + " text is empty");
                    }

                    break;
                }
            }

            if (mandatory && (value == null)) {
                throw new SAXException(elem.getNodeName()
                    + " element does not contains text");
            }
        } else {
            throw new SAXException("Argument element can't be null");
        }

        return value;
    }

