    /**
     * Implementation of validate.
     *
     * @see org.geotools.validation.FeatureValidation#validate(org.geotools.feature.Feature,
     *     org.geotools.feature.FeatureType, org.geotools.validation.ValidationResults)
     */
    public boolean validate(
            SimpleFeature feature,
            SimpleFeatureType type,
            ValidationResults results) { // throws Exception {

        String place = (String) feature.getAttribute(attributeName);
        URL gazetteerURL = null;

        try {
            gazetteerURL = new URL(gazetteer.toString() + "&placename=" + place);
        } catch (MalformedURLException e) {
            results.error(feature, e.toString());

            return false;
        }

        try {
            HttpURLConnection gazetteerConnection =
                    (HttpURLConnection) gazetteerURL.openConnection();

            if (!("OK".equals(gazetteerConnection.getResponseMessage()))) {
                results.error(
                        feature, "An error occured creating the connection to the Gazetteer.");
            }

            try (BufferedReader reader =
                    new BufferedReader(
                            new InputStreamReader(gazetteerConnection.getInputStream()))) {
                InputSource gazetteerInputSource = new InputSource(reader);
                DocumentBuilderFactory dfactory = DocumentBuilderFactory.newInstance();
                dfactory.setNamespaceAware(true);

                // TODO turn on validation
                dfactory.setValidating(false);
                dfactory.setIgnoringComments(true);
                dfactory.setCoalescing(true);
                dfactory.setIgnoringElementContentWhitespace(true);

                Document serviceDoc = null;

                try {
                    serviceDoc = dfactory.newDocumentBuilder().parse(gazetteerInputSource);
                } catch (Exception e) {
                    results.error(feature, e.toString());
                    return false;
                }

                Element elem = serviceDoc.getDocumentElement();

                // elem == SimpleFeatureCollection at this point
                elem = getChildElement(elem, "queryInfo");

                if (elem == null) {
                    results.error(feature, "Invalid DOM tree returned by gazetteer.");
                    return false;
                }

                // this number is the number of instances found.
                int number = Integer.parseInt(getChildText(elem, "numberOfResults"));

                return number > 0;
            }
        } catch (IOException e) {
            results.error(feature, e.toString());

            return false;
        }
    }

