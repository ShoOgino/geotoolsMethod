    /**
     * <b>validateSingleLayer Purpose:</b> <br>
     *
     * <p>This validation tests for a geometry crosses another geometry. Uses JTS'
     * Geometry.crosses(Geometry) method. The DE-9IM intersection matrix for crosses is T*T******
     * (for a point and a curve, a point and an area or a line and an area) 0******** (for two
     * curves) <b>Description:</b><br>
     *
     * <p>The function filters the SimpleFeatureSource using the given bounding box. It creates
     * iterators over the filtered FeatureSource. It calls overlaps() and contains() using the
     * geometries in the SimpleFeatureSource layer. Tests the results of the method calls against
     * the given expected results. Returns true if the returned results and the expected results are
     * true, false otherwise. * Author: bowens<br>
     * Created on: Apr 27, 2004<br>
     *
     * @param featureSourceA - the SimpleFeatureSource to pull the original geometries from. This
     *     geometry is the one that is tested for overlapping itself
     * @param expected - boolean value representing the user's expected outcome of the test
     * @param results - ValidationResults
     * @param bBox - Envelope - the bounding box within which to perform the overlaps() and
     *     contains()
     * @return boolean result of the test
     * @throws Exception - IOException if iterators improperly closed
     */
    private boolean validateSingleLayer(
            SimpleFeatureSource featureSourceA,
            boolean expected,
            ValidationResults results,
            ReferencedEnvelope bBox)
            throws Exception {
        boolean success = true;

        // FeatureResults featureResults = featureSourceA.getFeatures(filter);
        SimpleFeatureCollection featureResults = featureSourceA.getFeatures();

        SimpleFeatureIterator fr1 = null;
        SimpleFeatureIterator fr2 = null;
        try {
            fr1 = featureResults.features();

            if (fr1 == null) return success;

            while (fr1.hasNext()) {
                // System.out.println("Single layer Outer loop count: " + loopCt1);
                SimpleFeature f1 = fr1.next();
                //				System.out.println("overlapFilter " + overlapsFilter.contains(f1));
                //				System.out.println("containsFilter " + containsFilter.contains(f1));
                // System.out.println("Filter " + filter.contains(f1));
                //				System.out.println("f1 = " + f1.getDefaultGeometry().getEnvelope());
                //				System.out.println("env1 = " + bBox);

                Geometry g1 = (Geometry) f1.getDefaultGeometry();

                // FeatureResults featureResults2 = featureSourceA.getFeatures(filter2);
                SimpleFeatureCollection featureResults2 = featureSourceA.getFeatures();
                fr2 = featureResults2.features();
                while (fr2 != null && fr2.hasNext()) {
                    SimpleFeature f2 = fr2.next();
                    // System.out.println("Filter2 " + filter2.contains(f2));
                    Geometry g2 = (Geometry) f2.getDefaultGeometry();
                    // System.out.println("Do the two overlap?->" + g1.overlaps(g2));
                    // System.out.println("Does the one contain the other?->" + g1.contains(g2));
                    if (!usedIDs.contains(f2.getID())) {

                        if (!f1.getID().equals(f2.getID())) // if they are the same feature, move
                        // onto the next one
                        {
                            if (g1.crosses(g2) != expected) {
                                // results.error( f1, f1.getDefaultGeometry().getGeometryType()+"
                                // "+getGeomTypeRefA()+"("+f1.getID()+")"+" crossed
                                // "+getGeomTypeRefA()+"("+f2.getID()+"), Result was not "+expected
                                // );
                                results.error(
                                        f1,
                                        getGeomTypeRefA()
                                                + "("
                                                + f1.getID()
                                                + ")"
                                                + " crossed "
                                                + getGeomTypeRefA()
                                                + "("
                                                + f2.getID()
                                                + ")");
                                // System.out.println(
                                //                                        ((Geometry)
                                // f1.getDefaultGeometry()).getGeometryType()
                                //                                                + " "
                                //                                                +
                                // getGeomTypeRefA()
                                //                                                + "("
                                //                                                + f1.getID()
                                //                                                + ")"
                                //                                                + " crossed "
                                //                                                +
                                // getGeomTypeRefA()
                                //                                                + "("
                                //                                                + f2.getID()
                                //                                                + "), Result was
                                // not "
                                //                                                + expected);
                                success = false;
                            }
                        }
                    }
                }
                usedIDs.add(f1.getID());
            }
        } finally {
            if (fr1 != null) fr1.close();
            if (fr2 != null) fr2.close();
        }

        return success;
    }

