    /**
     * Create a Validation based on provided <code>test</code> definition.
     *
     * <p>Creates the required Java Bean and configures according to the provided test definition,
     * using this plugIn's defaults.
     *
     * @param name Map defining User's test.
     * @return Validation ready for use by the ValidationProcessor
     * @throws ValidationException when an error occurs
     */
    public Validation createValidation(String name, String description, Map<String, Object> args)
            throws ValidationException {
        BeanDescriptor beanDescriptor = beanInfo.getBeanDescriptor();
        Class<?> type = beanDescriptor.getBeanClass();

        Constructor create;

        try {
            create = type.getConstructor(new Class[0]);
        } catch (SecurityException | IllegalArgumentException | NoSuchMethodException e) {
            throw new ValidationException(
                    "Could not create '" + plugInName + "' as " + type.getName(), e);
        }

        Validation validate;

        try {
            validate = (Validation) create.newInstance(new Object[0]);
        } catch (InstantiationException | InvocationTargetException | IllegalAccessException e) {
            throw new ValidationException(
                    "Could not create '" + name + "' as plugIn " + plugInName, e);
        }

        validate.setName(name);
        validate.setDescription(description);
        configure(validate, defaults);
        configure(validate, transArgs(args));

        return validate;
    }

