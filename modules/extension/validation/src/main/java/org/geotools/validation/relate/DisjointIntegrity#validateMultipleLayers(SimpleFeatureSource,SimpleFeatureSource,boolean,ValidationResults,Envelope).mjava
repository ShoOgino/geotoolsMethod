    /**
     * <b>validateMultipleLayers Purpose:</b> <br>
     *
     * <p>This validation tests for a geometry is disjoint with another geometry. Uses JTS'
     * Geometry.disjoint(Geometry) method. <b>Description:</b><br>
     *
     * <p>The function filters the FeatureSources using the given bounding box. It creates iterators
     * over both filtered FeatureSources. It calls disjoint() using the geometries in the
     * SimpleFeatureSource layers. Tests the results of the method call against the given expected
     * results. Returns true if the returned results and the expected results are true, false
     * otherwise. Author: bowens<br>
     * Created on: Apr 27, 2004<br>
     *
     * @param featureSourceA - the SimpleFeatureSource to pull the original geometries from. This
     *     geometry is the one that is tested for disjoint with the other
     * @param featureSourceB - the SimpleFeatureSource to pull the other geometries from - these
     *     geometries will be those that may be disjoint with the first geometry
     * @param expected - boolean value representing the user's expected outcome of the test
     * @param results - ValidationResults
     * @param bBox - Envelope - the bounding box within which to perform the disjoint()
     * @return boolean result of the test
     * @throws Exception - IOException if iterators improperly closed
     */
    private boolean validateMultipleLayers(
            SimpleFeatureSource featureSourceA,
            SimpleFeatureSource featureSourceB,
            boolean expected,
            ValidationResults results,
            Envelope bBox)
            throws Exception {
        boolean success = true;

        Filter filter = null;

        SimpleFeatureCollection FeatureCollectionA = featureSourceA.getFeatures(filter);
        SimpleFeatureCollection FeatureCollectionB = featureSourceB.getFeatures(filter);

        SimpleFeatureIterator fr1 = null;
        SimpleFeatureIterator fr2 = null;
        try {
            fr1 = FeatureCollectionA.features();

            if (fr1 == null) return false;

            while (fr1.hasNext()) {
                SimpleFeature f1 = fr1.next();
                Geometry g1 = (Geometry) f1.getDefaultGeometry();
                fr2 = FeatureCollectionB.features();

                while (fr2 != null && fr2.hasNext()) {
                    SimpleFeature f2 = fr2.next();
                    Geometry g2 = (Geometry) f2.getDefaultGeometry();
                    if (g1.disjoint(g2) != expected) {
                        results.error(
                                f1,
                                ((Geometry) f1.getDefaultGeometry()).getGeometryType()
                                        + " "
                                        + getGeomTypeRefA()
                                        + " is disjoint from "
                                        + getGeomTypeRefB()
                                        + "("
                                        + f2.getID()
                                        + "), Result was not "
                                        + expected);
                        success = false;
                    }
                }
            }
        } finally {
            fr1.close();
            fr2.close();
        }

        return success;
    }

