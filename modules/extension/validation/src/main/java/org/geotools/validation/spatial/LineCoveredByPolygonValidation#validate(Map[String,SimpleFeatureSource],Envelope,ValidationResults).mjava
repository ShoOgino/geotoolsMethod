    /**
     * Check that lineTypeRef is convered by polygonTypeRef.
     *
     * <p>Detailed description...
     *
     * @param layers Map of SimpleFeatureSource by "dataStoreID:typeName"
     * @param envelope The bounding box that encloses the unvalidated data
     * @param results Used to coallate results information
     * @return <code>true</code> if all the features pass this test.
     */
    public boolean validate(
            Map<String, SimpleFeatureSource> layers, Envelope envelope, ValidationResults results)
            throws Exception {

        boolean r = true;

        SimpleFeatureSource fsLine = layers.get(getLineTypeRef());

        SimpleFeatureCollection fcLine = fsLine.getFeatures();
        try (SimpleFeatureIterator fLine = fcLine.features()) {

            SimpleFeatureSource fsPoly =
                    (SimpleFeatureSource) layers.get(getRestrictedPolygonTypeRef());

            ListFeatureCollection fcPoly = new ListFeatureCollection(fsPoly.getFeatures());

            while (fLine.hasNext()) {
                SimpleFeature line = fLine.next();
                try (SimpleFeatureIterator fPoly = fcPoly.features()) {
                    Geometry lineGeom = (Geometry) line.getDefaultGeometry();
                    if (envelope.contains(lineGeom.getEnvelopeInternal())) {
                        // 	check for valid comparison
                        if (LineString.class.isAssignableFrom(lineGeom.getClass())) {
                            while (fPoly.hasNext()) {
                                SimpleFeature poly = fPoly.next();
                                Geometry polyGeom = (Geometry) poly.getDefaultGeometry();
                                if (envelope.contains(polyGeom.getEnvelopeInternal())) {
                                    if (Polygon.class.isAssignableFrom(polyGeom.getClass())) {
                                        if (!polyGeom.contains(lineGeom)) {
                                            results.error(
                                                    poly,
                                                    "Polygon does not contain the specified Line.");
                                            r = false;
                                        }
                                        // do next.
                                    } else {
                                        fcPoly.remove(poly);
                                        results.warning(
                                                poly,
                                                "Invalid type: this feature is not a derivative of a Polygon");
                                    }
                                } else {
                                    fcPoly.remove(poly);
                                }
                            }
                        } else {
                            results.warning(
                                    line,
                                    "Invalid type: this feature is not a derivative of a LineString");
                        }
                    }
                }
            }
        }
        return r;
    }

