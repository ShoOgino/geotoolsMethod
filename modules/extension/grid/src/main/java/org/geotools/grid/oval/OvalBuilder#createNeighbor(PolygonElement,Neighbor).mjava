    /**
     * Creates a new {@code Oval} positioned at the given neighbor position relative to the
     * reference element.
     *
     * @param el the reference oval
     * @param neighbor a neighbour position
     * @return a new {@code Oval} object
     * @throws IllegalArgumentException if either argument is {@code null} or if {@code el} is not
     *     an instance of {@code Oval}
     */
    @Override
    public Oval createNeighbor(PolygonElement el, Neighbor neighbor) {
        if (el == null || neighbor == null) {
            throw new IllegalArgumentException("el and neighbour position must both be non-null");
        }

        if (!(el instanceof Oval)) {
            throw new IllegalArgumentException("el must be an instance of Oval");
        }

        Oval oval = (Oval) el;
        ReferencedEnvelope bounds = oval.getBounds();
        double dx, dy;

        switch (neighbor) {
            case LEFT:
                dx = -bounds.getWidth();
                dy = 0.0;
                break;

            case LOWER:
                dx = 0.0;
                dy = -bounds.getHeight();
                break;

            case LOWER_LEFT:
                dx = -bounds.getWidth();
                dy = -bounds.getHeight();
                break;

            case LOWER_RIGHT:
                dx = bounds.getWidth();
                dy = -bounds.getHeight();
                break;

            case RIGHT:
                dx = bounds.getWidth();
                dy = 0.0;
                break;

            case UPPER:
                dx = 0.0;
                dy = bounds.getHeight();
                break;

            case UPPER_LEFT:
                dx = -bounds.getWidth();
                dy = bounds.getHeight();
                break;

            case UPPER_RIGHT:
                dx = bounds.getWidth();
                dy = bounds.getHeight();
                break;

            default:
                throw new IllegalArgumentException("Unrecognized value for neighbor");
        }

        return Ovals.create(
                bounds.getMinX() + dx,
                bounds.getMinY() + dy,
                bounds.getWidth(),
                bounds.getHeight(),
                bounds.getCoordinateReferenceSystem());
    }

