    /**
     * Overrides to return the value of the "typeName" attribute as a single String instead of a
     * List. Otherwise typeName gets encoded as the {@link QueryType#getTypeName()} toString's value
     * which depends on the toString implementation of the internal java.util.List.
     * <p>
     * Also, if the requested property is "SortBy" and the QueryType has an empty sortby list,
     * returns null to avoid encoding an empty sortBy list
     * </p>
     */
    @Override
    public Object getProperty(Object object, QName name) throws Exception {
        if ("typeName".equals(name.getLocalPart())) {
            QueryType query = (QueryType) object;
            List typeName = query.getTypeName();
            StringBuilder typeNameList = new StringBuilder();
            if (typeName != null) {
                for (Iterator it = typeName.iterator(); it.hasNext();) {
                    Object o = it.next();
                    if (o instanceof QName) {
                        QName qName = (QName) o;
                        o = qName.getPrefix() + ":" + qName.getLocalPart(); 
                    }
                    
                    typeNameList.append(o);
                    if (it.hasNext()) {
                        typeNameList.append(",");
                    }
                }
            }
            return typeNameList.toString();
        } else if ("SortBy".equals(name.getLocalPart())) {
            QueryType query = (QueryType) object;
            List sortBy = query.getSortBy();
            if (sortBy != null && sortBy.size() == 0) {
                return null;
            }
        }

        return super.getProperty(object, name);
    }

