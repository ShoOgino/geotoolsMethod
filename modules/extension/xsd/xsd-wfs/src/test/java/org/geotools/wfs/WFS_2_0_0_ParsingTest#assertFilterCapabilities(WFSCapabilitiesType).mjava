    void assertFilterCapabilities(WFSCapabilitiesType caps) {
        FilterCapabilities fc = caps.getFilterCapabilities();

        Assert.assertNotNull(fc.getSpatialCapabilities());
        Assert.assertNotNull(fc.getSpatialCapabilities().getSpatialOperators());
        Assert.assertNotNull(fc.getSpatialCapabilities().getSpatialOperators().getOperators());
        Assert.assertEquals(
                11, fc.getSpatialCapabilities().getSpatialOperators().getOperators().size());

        Assert.assertNotNull(
                fc.getSpatialCapabilities().getSpatialOperators().getOperator("Disjoint"));
        Assert.assertNotNull(
                fc.getSpatialCapabilities().getSpatialOperators().getOperator("Equals"));
        Assert.assertNotNull(
                fc.getSpatialCapabilities().getSpatialOperators().getOperator("DWithin"));
        Assert.assertNotNull(
                fc.getSpatialCapabilities().getSpatialOperators().getOperator("Beyond"));
        Assert.assertNotNull(
                fc.getSpatialCapabilities().getSpatialOperators().getOperator("Intersect"));
        Assert.assertNotNull(
                fc.getSpatialCapabilities().getSpatialOperators().getOperator("Touches"));
        Assert.assertNotNull(
                fc.getSpatialCapabilities().getSpatialOperators().getOperator("Crosses"));
        Assert.assertNotNull(
                fc.getSpatialCapabilities().getSpatialOperators().getOperator("Within"));
        Assert.assertNotNull(
                fc.getSpatialCapabilities().getSpatialOperators().getOperator("Contains"));
        Assert.assertNotNull(
                fc.getSpatialCapabilities().getSpatialOperators().getOperator("Overlaps"));
        Assert.assertNotNull(fc.getSpatialCapabilities().getSpatialOperators().getOperator("BBOX"));

        Assert.assertNotNull(fc.getScalarCapabilities());
        Assert.assertTrue(fc.getScalarCapabilities().hasLogicalOperators());
        Assert.assertNotNull(fc.getScalarCapabilities().getArithmeticOperators());
        Assert.assertNotNull(fc.getScalarCapabilities().getComparisonOperators());

        Assert.assertTrue(
                fc.getScalarCapabilities().getArithmeticOperators().hasSimpleArithmetic());
        Assert.assertNotNull(fc.getScalarCapabilities().getArithmeticOperators().getFunctions());
        Assert.assertEquals(
                7,
                fc.getScalarCapabilities()
                        .getArithmeticOperators()
                        .getFunctions()
                        .getFunctionNames()
                        .size());

        Collection<Operator> operators =
                fc.getScalarCapabilities().getComparisonOperators().getOperators();

        Assert.assertEquals(3, operators.size()); // "Simple_Comparisons" is commented out on
        // purpose

        Assert.assertNotNull(
                fc.getScalarCapabilities().getComparisonOperators().getOperator("Between"));
        Assert.assertNotNull(
                fc.getScalarCapabilities().getComparisonOperators().getOperator("Like"));
        Assert.assertNotNull(
                fc.getScalarCapabilities().getComparisonOperators().getOperator("NullCheck"));
    }

