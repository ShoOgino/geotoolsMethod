    @SuppressWarnings("unchecked")
    @Test
    @Ignore
    public void testParseGetFeature() throws Exception {
        File tmp = File.createTempFile("geoserver-DescribeFeatureType", "xml");
        tmp.deleteOnExit();

        try (InputStream in = getClass().getResourceAsStream("geoserver-DescribeFeatureType.xml")) {
            Files.copy(in, tmp.toPath());
        }

        try (InputStream in = getClass().getResourceAsStream("geoserver-GetFeature.xml")) {

            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
            dbf.setNamespaceAware(true);

            DocumentBuilder db = dbf.newDocumentBuilder();
            Document doc = db.parse(in);

            // http://cite.opengeospatial.org/gmlsf
            // http://localhost:8080/geoserver/wfs?service=WFS&amp;version=1.1.0&amp;request=DescribeFeatureType&amp;typeName=sf:PrimitiveGeoFeature
            String schemaLocation =
                    doc.getDocumentElement()
                            .getAttributeNS(
                                    "http://www.w3.org/2001/XMLSchema-instance", "schemaLocation");
            String absolutePath = URLs.fileToUrl(tmp).toExternalForm();

            schemaLocation =
                    schemaLocation.replaceAll(
                            "http://cite.opengeospatial.org/gmlsf .*",
                            "http://cite.opengeospatial.org/gmlsf " + absolutePath);
            doc.getDocumentElement()
                    .setAttributeNS(
                            "http://www.w3.org/2001/XMLSchema-instance",
                            "schemaLocation",
                            schemaLocation);

            tmp = File.createTempFile("geoserver-GetFeature", "xml");
            tmp.deleteOnExit();

            Transformer tx = TransformerFactory.newInstance().newTransformer();
            tx.transform(new DOMSource(doc), new StreamResult(tmp));
        }

        try (InputStream in = new FileInputStream(tmp)) {

            Parser parser = new Parser(configuration);
            FeatureCollectionType fc = (FeatureCollectionType) parser.parse(in);
            Assert.assertNotNull(fc);

            List featureCollections = fc.getMember();
            Assert.assertEquals(1, featureCollections.size());

            SimpleFeatureCollection featureCollection =
                    (SimpleFeatureCollection) featureCollections.get(0);
            Assert.assertEquals(5, featureCollection.size());

            try (SimpleFeatureIterator features = featureCollection.features()) {
                Assert.assertTrue(features.hasNext());

                SimpleFeature f = features.next();

                Assert.assertEquals("PrimitiveGeoFeature.f001", f.getID());
                Assert.assertNull(f.getDefaultGeometry());

                Assert.assertNotNull(f.getAttribute("pointProperty"));
                Point p = (Point) f.getAttribute("pointProperty");

                Assert.assertEquals(39.73245, p.getX(), 0.1);
                Assert.assertEquals(2.00342, p.getY(), 0.1);

                Object intProperty = f.getAttribute("intProperty");
                Assert.assertNotNull(intProperty);
                Assert.assertTrue(
                        intProperty.getClass().getName(), intProperty instanceof BigInteger);

                Assert.assertEquals(BigInteger.valueOf(155), intProperty);
                Assert.assertEquals(
                        new URI("http://www.opengeospatial.org/"), f.getAttribute("uriProperty"));
                Assert.assertEquals(Float.valueOf(12765.0f), f.getAttribute("measurand"));
                Assert.assertTrue(f.getAttribute("dateProperty") instanceof Date);
                Assert.assertEquals(BigDecimal.valueOf(5.03), f.getAttribute("decimalProperty"));
            }
        }
    }

