    /**
     * Builds a {@link QueryType} instance equivalent to the test query in the
     * file <code>test-data/QueryTypeBinding.xml</code> in the
     * <code>org.geotools.wfs.bindings</code> package of the test resources.
     * 
     * @return
     */
    @SuppressWarnings("unchecked")
    private QueryType buildTestQuery() {
        FilterFactory ff = CommonFactoryFinder.getFilterFactory(null);

        final Function function1 = ff.function("MAX", new Expression[] { ff.literal(1),
                ff.literal(2) });
        final Function function2 = ff.function("MIN", new Expression[] { ff.literal(1),
                ff.literal(2) });

        final XlinkPropertyNameType xlinkPropertyName1 = factory.createXlinkPropertyNameType();
        xlinkPropertyName1.setTraverseXlinkExpiry(BigInteger.valueOf(10));
        xlinkPropertyName1.setTraverseXlinkDepth("*");
        xlinkPropertyName1.setValue("propertyA/propertyB");

        final XlinkPropertyNameType xlinkPropertyName2 = factory.createXlinkPropertyNameType();
        xlinkPropertyName2.setTraverseXlinkDepth("1");
        xlinkPropertyName2.setValue("propertyC/propertyD");

        // The first property is a Choice[0..*] of PropertyName,
        // XLinkPropertyName and Function
        QueryType query = factory.createQueryType();
        query.setTypeName(Collections.singletonList("typeName1"));
        query.getPropertyName().add("property1");
        query.getXlinkPropertyName().add(xlinkPropertyName1);
        query.getFunction().add(function1);
        query.getPropertyName().add("property2");
        query.getXlinkPropertyName().add(xlinkPropertyName2);
        query.getFunction().add(function2);

        query.setFilter(ff.id(Collections.singleton(ff.featureId("fid"))));
        query.getSortBy().add(ff.sort("sortProperty", SortOrder.DESCENDING));

        return query;
    }

