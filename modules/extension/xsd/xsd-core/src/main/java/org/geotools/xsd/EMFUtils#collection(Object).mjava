    /**
     * Returns a collection view for value, taking care of the case where value is of an array type,
     * in which case the collection returned contains the array elements, not the array itself.
     *
     * @param value a value to be added to an EObject collection property
     * @return value wrapped in a collection, or a collection containing the array elements in case
     *     value is an array.
     * @see #add(EObject, String, Object)
     */
    private static Collection collection(Object value) {
        if (null == value) {
            return Collections.emptyList();
        } else if (value.getClass().isArray()) {
            final int len = java.lang.reflect.Array.getLength(value);
            List list = new ArrayList(len);

            for (int i = 0; i < len; i++) {
                Object val = Array.get(value, i);
                list.add(val);
            }
            return list;
        } else if (value instanceof FeatureCollection) {
            return Collections.singletonList(value); // force singleton for FeatureCollectionType
        } else if (value instanceof Collection) {
            return (Collection) value;
        }

        return Collections.singletonList(value);
    }

