    /**
     * Returns a flat list of imports from the specified schema.
     *
     * <p>The method recurses into imported schemas. The list returned is filtered so that duplicate
     * includes are removed. Two includes are considered equal if they have the same target
     * namespace.
     *
     * @param schema The top-level schema.
     * @return A list containing objects of type {@link XSDImport}.
     */
    public static final List getImports(XSDSchema schema) {
        LinkedList<XSDSchema> queue = new LinkedList<>();
        ArrayList<XSDImport> imports = new ArrayList<>();
        Set<String> added = new HashSet<>();

        queue.addLast(schema);

        while (!queue.isEmpty()) {
            schema = queue.removeFirst();

            List contents = schema.getContents();

            for (Object o : contents) {
                XSDSchemaContent content = (XSDSchemaContent) o;

                if (content instanceof XSDImport) {
                    XSDImport imprt = (XSDImport) content;

                    if (!added.contains(imprt.getNamespace())) {
                        imports.add(imprt);
                        added.add(imprt.getNamespace());

                        XSDSchema resolvedSchema = imprt.getResolvedSchema();
                        if (resolvedSchema == null) {
                            LOGGER.info(
                                    "Schema import wasn't resolved: "
                                            + imprt.getNamespace()
                                            + " declared location: "
                                            + imprt.getSchemaLocation());
                        } else {
                            queue.addLast(resolvedSchema);
                        }
                    }
                }
            }
        }

        return imports;
    }

