    /**
     *
     * <!-- begin-user-doc -->
     * A quick approx of the available content:
     *
     * <p>This method returns a {@link Map} in which the names of children and attributes are keys,
     * and the parsed children and attributes are the values. If the element being parsed contains
     * child text, it is available under the <code>nulll</code> key.
     *
     * @return Map,
     *     <!-- end-user-doc -->
     * @generated modifiable
     */
    public Object parse(ElementInstance instance, Node node, Object value) throws Exception {
        String text = null;

        if ((value != null) && value instanceof String) {
            text = ((String) value);

            if ("".equals(text.trim())) {
                text = null;
            }
        }

        // if there is just some text, return it
        if (node.getChildren().isEmpty() && node.getAttributes().isEmpty() && (text != null)) {
            return text;
        }

        // if there is only a single child, return it
        if ((node.getChildren().size() == 1) && node.getAttributes().isEmpty() && (text == null)) {
            return node.getChildValue(0);
        }

        // if there is a single attribute, return it
        if ((node.getAttributes().size() == 1) && node.getChildren().isEmpty() && (text == null)) {
            return node.getAttributes().get(0).getValue();
        }

        // create a map of the elements and attributes
        Map<String, Object> map = new HashMap<>();
        List attributes = node.getAttributes();
        List children = node.getChildren();
        mapBinding(map, attributes);
        mapBinding(map, children);

        if ((text != null) && !"".equals(text.trim())) {
            map.put(null, text);
        }

        return map;
    }

