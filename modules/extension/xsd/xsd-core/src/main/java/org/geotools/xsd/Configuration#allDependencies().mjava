    /**
     * Returns all dependencies in the configuration dependency tree.
     *
     * <p>The return list contains no duplicates.
     *
     * @return All dependencies in the configuration dependency tree.
     */
    public final List<Configuration> allDependencies() {
        LinkedList<Configuration> unpacked = new LinkedList<>();

        Stack<Configuration> stack = new Stack<>();
        stack.push(this);

        while (!stack.isEmpty()) {
            Configuration c = stack.pop();

            if (!unpacked.contains(c)) {
                unpacked.addFirst(c);
                stack.addAll(c.getDependencies());
            }
        }

        if (unpacked.size() < 2) {
            return unpacked;
        }

        // create a graph of the dependencies
        DepGraph g = new DepGraph();
        for (Configuration c : unpacked) {
            for (Configuration d : c.getDependencies()) {
                g.addEdge(c, d);
            }
        }

        PriorityQueue<DepNode> q =
                new PriorityQueue<>(
                        g.nodes.size(),
                        (o1, o2) ->
                                Integer.valueOf(o1.outgoing().size())
                                        .compareTo(o2.outgoing().size()));
        for (DepNode n : g.nodes.values()) {
            q.add(n);
        }

        unpacked = new LinkedList<>();
        while (!q.isEmpty()) {
            DepNode n = q.remove();
            if (n.outgoing().size() != 0) {
                throw new IllegalStateException();
            }

            unpacked.add(n.config);
            for (DepNode i : n.incoming()) {
                g.removeEdge(i.config, n.config);
                /*
                 * PriorityQueue.remove(Object) is broken in Java 5
                 * http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6207984
                 * http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6268068
                 */
                q.removeAll(Collections.singletonList(i));
                q.add(i);
            }
        }

        return unpacked;
    }

