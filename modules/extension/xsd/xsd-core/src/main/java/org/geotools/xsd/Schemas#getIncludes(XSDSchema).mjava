    /**
     * Returns a flat list of includes from the specified schema.
     *
     * <p>The method recurses into included schemas. The list returned is filtered so that duplicate
     * includes are removed. Two includes are considered equal if they have the same uri location
     *
     * @param schema The top-level schema.
     * @return A list containing objects of type {@link XSDInclude}.
     */
    public static final List getIncludes(XSDSchema schema) {
        LinkedList<XSDSchema> queue = new LinkedList<>();
        List<XSDInclude> includes = new ArrayList<>();
        Set<String> added = new HashSet<>();

        queue.addLast(schema);

        while (!queue.isEmpty()) {
            schema = queue.removeFirst();

            List contents = schema.getContents();

            for (Iterator itr = contents.iterator(); itr.hasNext(); ) {
                XSDSchemaContent content = (XSDSchemaContent) itr.next();

                if (content instanceof XSDInclude) {
                    XSDInclude include = (XSDInclude) content;

                    if (!added.contains(include.getSchemaLocation())) {
                        includes.add(include);
                        added.add(include.getSchemaLocation());

                        if (include.getIncorporatedSchema() != null) {
                            queue.addLast(include.getIncorporatedSchema());
                        } else {
                            if (LOGGER.isLoggable(Level.FINE)) {
                                LOGGER.fine("include: " + include + " resulted in null schema");
                            }
                        }
                    }
                }
            }
        }

        return includes;
    }

