    /**
     * Dynamically tries to determine the type of the object using emf naming conventions and the
     * name returned by {@link Binding#getTarget()}.
     *
     * <p>This implementation is a heuristic and is not guaranteed to work. Subclasses may override
     * to provide the type explicitly.
     */
    public Class<?> getType() {
        if (type != null) {
            return type;
        }

        // try to build up a class name
        String pkg = factory.getClass().getPackage().getName();

        if (pkg.endsWith(".impl")) {
            pkg = pkg.substring(0, pkg.length() - 5);
        }

        String localName = getTarget().getLocalPart();

        try {
            return Class.forName(pkg + "." + localName);
        } catch (ClassNotFoundException e) {
            //
            // check for anonymous complex type
            //
            int i = localName.indexOf('_');
            if (i != -1) {
                String className = localName.substring(i + 1) + "Type";

                try {
                    return Class.forName(pkg + "." + className);
                } catch (ClassNotFoundException e1) {
                }
            }
        }

        throw new RuntimeException("Could not map an EMF model class to:" + localName);
    }

