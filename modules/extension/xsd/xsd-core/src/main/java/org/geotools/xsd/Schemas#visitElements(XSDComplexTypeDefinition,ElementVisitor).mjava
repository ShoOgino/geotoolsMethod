    private static void visitElements(XSDComplexTypeDefinition cType, ElementVisitor visitor) {
        // simple content cant define children
        if ((cType.getContent() == null)
                || (cType.getContent() instanceof XSDSimpleTypeDefinition)) {
            return;
        }

        // use a queue to simulate the recursion
        LinkedList queue = new LinkedList();
        queue.addLast(cType.getContent());

        while (!queue.isEmpty()) {
            XSDParticle particle = (XSDParticle) queue.removeFirst();

            // analyze type of particle content
            int pType = XSDUtil.nodeType(particle.getElement());

            if (pType == XSDConstants.ELEMENT_ELEMENT) {
                visitor.visit(particle);
            } else {
                // model group
                XSDModelGroup grp = null;

                switch (pType) {
                    case XSDConstants.GROUP_ELEMENT:
                        XSDModelGroupDefinition grpDef =
                                (XSDModelGroupDefinition) particle.getContent();

                        if (grpDef.isModelGroupDefinitionReference()) {
                            grpDef = grpDef.getResolvedModelGroupDefinition();
                        }

                        grp = grpDef.getModelGroup();

                        break;

                    case XSDConstants.CHOICE_ELEMENT:
                    case XSDConstants.ALL_ELEMENT:
                    case XSDConstants.SEQUENCE_ELEMENT:
                        grp = (XSDModelGroup) particle.getContent();

                        break;
                }

                if (grp != null) {
                    // enqueue all particles in the group
                    List parts = grp.getParticles();

                    // TODO: this check is a bit hacky... figure out why this is the case
                    if (parts.isEmpty()) {
                        parts = grp.getContents();
                    }

                    // add in reverse order to front of queue to maintain order
                    for (int i = parts.size() - 1; i >= 0; i--) {
                        queue.addFirst(parts.get(i));
                    }
                }
            }
        } // while
    }

