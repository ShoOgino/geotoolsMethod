    /**
     * Encodes an object.
     * <p>
     * An object is encoded as an object, name pair, where the name is the name
     * of an element declaration in a schema.
     * </p>
     * @param object The object being encoded.
     * @param name The name of the element being encoded in the schema.
     * @param out The output stream.
     *
     * @throws IOException
     */
    public void encode(Object object, QName name, OutputStream out)
        throws IOException {
        if ( inline ) {
            String msg = "Must use 'encode(Object,QName,ContentHandler)' when inline flag is set";
            throw new IllegalStateException( msg );
        }
        
        // create the document serializer
        SAXTransformerFactory txFactory = 
            (SAXTransformerFactory) SAXTransformerFactory.newInstance();
        
        TransformerHandler xmls;
        try {
            xmls = txFactory.newTransformerHandler();
        } catch (TransformerConfigurationException e) {
            throw new IOException(e);
        }
        xmls.getTransformer().setOutputProperties(outputProps);
        xmls.getTransformer().setOutputProperty(OutputKeys.METHOD, "xml");
        xmls.setResult(new StreamResult(out));
        
        //TODO
        //xmls.setNamespaces(namespaceAware);
        try {
            encode(object, name, xmls);
        } 
        catch (SAXException e) {
            // SAXException does not sets initCause(). Instead, it holds its own
            // "exception" field.
            if (e.getException() != null && e.getCause() == null) {
                e.initCause(e.getException());
            }
            throw (IOException) new IOException().initCause(e); 
        }
    }

