    /**
     * Returns the minimum number of occurences of an element within a complex type.
     *
     * @param type The type definition containg the declaration <code>element</code>
     * @param element The declaration of the element.
     * @return The minimum number of occurences.
     * @throws IllegalArgumentException If the element declaration cannot be locaated withing the
     *     type definition.
     */
    public static final int getMinOccurs(
            XSDComplexTypeDefinition type, XSDElementDeclaration element) {
        final XSDElementDeclaration fElement = element;
        final ArrayList minOccurs = new ArrayList();

        ElementVisitor visitor =
                new ElementVisitor() {
                    public void visit(XSDParticle particle) {
                        XSDElementDeclaration decl = (XSDElementDeclaration) particle.getContent();

                        if (decl.isElementDeclarationReference()) {
                            decl = decl.getResolvedElementDeclaration();
                        }

                        if (decl == fElement) {
                            if (particle.isSetMinOccurs()) {
                                minOccurs.add(Integer.valueOf(particle.getMinOccurs()));
                            } else if (particle.getContainer() instanceof XSDModelGroup
                                    && particle.getContainer().getContainer()
                                            instanceof XSDParticle) {
                                particle = (XSDParticle) particle.getContainer().getContainer();
                                minOccurs.add(Integer.valueOf(particle.getMinOccurs()));
                            } else {
                                minOccurs.add(1);
                            }
                        }
                    }
                };

        visitElements(type, visitor, true);

        if (minOccurs.isEmpty()) {
            throw new IllegalArgumentException(
                    "Element: " + element + " not found in type: " + type);
        }

        return ((Integer) minOccurs.get(0)).intValue();
    }

