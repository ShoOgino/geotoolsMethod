    /**
     * Returns an element declaration that is contained in the type of another element declaration.
     * The following strategy is used to locate the child element declaration.
     *
     * <ol>
     *   <li>The immediate children of the specified element are examined, if a match is found, it
     *       is returned. If 1. does not match, global elements that derive from the immediate
     *       children are examined.
     * </ol>
     *
     * @param parent the containing element declaration
     * @param qName the qualified name of the contained element
     * @return The contained element declaration, or false if containment is not satisfied.
     */
    public static final XSDElementDeclaration getChildElementDeclaration(
            XSDElementDeclaration parent, QName qName) {
        // look for a match in a direct child
        List children = getChildElementDeclarations(parent.getType());

        for (Object value : children) {
            XSDElementDeclaration element = (XSDElementDeclaration) value;

            if (nameMatches(element, qName)) {
                return element;
            }
        }

        // couldn't find one, look for match in derived elements
        ArrayList<XSDElementDeclaration> derived = new ArrayList<>();

        for (Object o : children) {
            XSDElementDeclaration child = (XSDElementDeclaration) o;
            derived.addAll(getDerivedElementDeclarations(child));
        }

        for (XSDElementDeclaration child : derived) {
            if (nameMatches(child, qName)) {
                return child;
            }
        }

        return null;
    }

