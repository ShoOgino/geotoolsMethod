    private Handler getChildHandlerInternal(QName qName) {
        SchemaIndex index = parser.getSchemaIndex();

        XSDElementDeclaration element = index.getChildElement(content, qName);

        if (element != null) {
            // TODO: determine whether the element is complex or simple, and create
            ElementHandler handler =
                    parser.getHandlerFactory().createElementHandler(element, this, parser);

            return handler;
        }

        // could not find the element as a direct child of the parent, check
        // for a global element, and then check its substitution group
        element = index.getElementDeclaration(qName);

        if (element != null) {
            XSDElementDeclaration sub = element.getSubstitutionGroupAffiliation();

            if (sub != null) {
                QName subQName = new QName(sub.getTargetNamespace(), sub.getName());
                Handler handler = getChildHandlerInternal(subQName);

                if (handler != null) {
                    // this means that the element is substitutable for an
                    // actual child. Now we have a choice, do we return
                    // a handler for the actual element, or the element it
                    // substitutable for - the answer is to check the bindings
                    // TODO: ask the binding
                    handler =
                            parser.getHandlerFactory().createElementHandler(element, this, parser);
                    return handler;
                }
            }
        }

        // if
        return null;
    }

