    /**
     * Internal method for reflectively setting the property of an eobject.
     *
     * <p>Subclasses may override.
     */
    protected void setProperty(EObject eObject, String property, Object value, boolean lax) {
        try {
            if (EMFUtils.has(eObject, property)) {
                // dont do in lax mode since that means its a second pass
                if (lax && EMFUtils.isSet(eObject, property)) {
                    return;
                }

                try {
                    if (EMFUtils.isCollection(eObject, property)) {
                        EMFUtils.add(eObject, property, value);
                    } else {
                        EMFUtils.set(eObject, property, value);
                    }
                } catch (ClassCastException e) {
                    // convert to the correct type
                    EStructuralFeature feature = EMFUtils.feature(eObject, property);
                    Class target = feature.getEType().getInstanceClass();

                    Object converted = convert(value, target, e);
                    try {
                        EMFUtils.set(eObject, property, converted);
                    } catch (ClassCastException e1) {
                        // try to convert based on method return type
                        // JD: this is a hack
                        try {
                            Method g =
                                    eObject.getClass()
                                            .getMethod(
                                                    "get"
                                                            + property.substring(0, 1).toUpperCase()
                                                            + property.substring(1),
                                                    null);
                            if (g == null) {
                                throw e;
                            }

                            target = g.getReturnType();
                            converted = convert(value, target, e);

                            EMFUtils.set(eObject, property, converted);
                        } catch (Exception e2) {
                            throw e;
                        }
                    }
                }
            } else {
                // search by type, this is a bit of a hack so we only do it if the
                // lax flag is set
                if (lax && value != null) {
                    List features = EMFUtils.features(eObject, value.getClass());

                    if (features.size() > 1) {
                        // strip out any features bound to simply Object
                        for (Iterator it = features.iterator(); it.hasNext(); ) {
                            EStructuralFeature feature = (EStructuralFeature) it.next();
                            if (feature.getEType().getInstanceClass() == Object.class) {
                                it.remove();
                            }
                        }
                    }
                    if (features.size() == 1) {
                        EStructuralFeature feature = (EStructuralFeature) features.get(0);

                        if (EMFUtils.isCollection(eObject, feature)) {
                            EMFUtils.add(eObject, feature, value);
                        } else {
                            // only set if not previous set
                            if (!eObject.eIsSet(feature)) {
                                eObject.eSet(feature, value);
                            }
                        }
                    }
                }
            }
        } catch (RuntimeException e) {
            String msg = "Unable to set property: " + property + " for eobject: " + getTarget();
            throw new RuntimeException(msg, e);
        }
    }

