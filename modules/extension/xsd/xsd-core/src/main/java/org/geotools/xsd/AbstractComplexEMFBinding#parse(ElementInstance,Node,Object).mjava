    /**
     * Uses EMF reflection to create an instance of the EMF model object this binding maps to.
     *
     * <p>The properties of the resulting object are set using the the contents of
     * <param>node</param>. In the case that the name of a child element or attributes does not
     * match the name of a property on the object, subclasses may wish to extend this method and set
     * the property explicitly.
     */
    @Override
    public Object parse(ElementInstance instance, Node node, Object value) throws Exception {
        // does this binding actually map to an eObject?
        if (EObject.class.isAssignableFrom(getType()) && (factory != null)) {
            EObject eObject = createEObject(value);
            if (eObject == null) {
                return value;
            }

            setProperties(eObject, node, false);
            setProperties(eObject, node, true);

            // check for a complex type with simpleContent, in this case use
            // the string value (if any) to set the value property
            if (instance.getElementDeclaration().getTypeDefinition().getBaseType()
                    instanceof XSDTypeDefinition) {
                if ((value != null) && EMFUtils.has(eObject, "value")) {
                    setProperty(eObject, "value", value, false);
                }
            }

            return eObject;
        }

        // could not do it, just return whatever was passed in
        return value;
    }

