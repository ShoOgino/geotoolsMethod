    /**
     * Returns the base type defintion of <code>type</code> named <code>parentTypeName<code>.
     * <p>
     * This method will handle the case in which the <code>parentTypeName == type.getTypeName()</code>.
     * If no such parent type is found this method will return <code>null</code>.
     * </p>
     * @param type The type.
     * @param parentTypeName The name of the base type to return.
     *
     * @return The base type, or null if it could not be found.
     */
    public static final XSDTypeDefinition getBaseTypeDefinition(
            XSDTypeDefinition type, final QName parentTypeName) {
        final List<XSDTypeDefinition> found = new ArrayList<>();

        TypeWalker.Visitor visitor =
                new TypeWalker.Visitor() {
                    public boolean visit(XSDTypeDefinition type) {
                        if (nameMatches(type, parentTypeName)) {
                            found.add(type);

                            return false;
                        }

                        return true;
                    }
                };

        new TypeWalker().walk(type, visitor);

        return found.isEmpty() ? null : found.get(0);
    }

