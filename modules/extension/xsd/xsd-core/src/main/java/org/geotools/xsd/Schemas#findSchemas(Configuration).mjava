    /**
     * Finds all the XSDSchemas used by the {@link Configuration configuration} by looking at the
     * configuration's schema locator and its dependencies.
     *
     * @param configuration the {@link Configuration} for which to find all its related schemas
     * @return a {@link SchemaIndex} holding the schemas related to <code>configuration</code>
     */
    public static final SchemaIndex findSchemas(Configuration configuration) {
        Set<Configuration> configurations = new HashSet<>(configuration.allDependencies());
        configurations.add(configuration);

        List<XSDSchema> resolvedSchemas = new ArrayList<>(configurations.size());

        for (Iterator it = configurations.iterator(); it.hasNext(); ) {
            Configuration conf = (Configuration) it.next();

            if (LOGGER.isLoggable(Level.FINE)) {
                LOGGER.fine("looking up schema for " + conf.getNamespaceURI());
            }

            XSDSchemaLocator locator = new SchemaLocator(conf.getXSD());

            if (locator == null) {
                LOGGER.fine("No schema locator for " + conf.getNamespaceURI());

                continue;
            }

            String namespaceURI = conf.getNamespaceURI();
            String schemaLocation = null;

            try {
                URL location = new URL(conf.getXSD().getSchemaLocation());
                schemaLocation = location.toExternalForm();
            } catch (MalformedURLException e) {
                throw new RuntimeException(e);
            }

            if (LOGGER.isLoggable(Level.FINE)) {
                LOGGER.fine("schema location: " + schemaLocation);
            }

            XSDSchema schema = locator.locateSchema(null, namespaceURI, schemaLocation, null);

            if (schema != null) {
                resolvedSchemas.add(schema);
            }
        }

        XSDSchema[] schemas = resolvedSchemas.toArray(new XSDSchema[resolvedSchemas.size()]);
        SchemaIndex index = new SchemaIndexImpl(schemas);

        return index;
    }

