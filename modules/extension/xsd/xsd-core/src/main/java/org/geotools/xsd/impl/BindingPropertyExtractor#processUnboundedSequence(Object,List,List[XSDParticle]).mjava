    private void processUnboundedSequence(
            Object object, List properties, List<XSDParticle> children) {
        final ComplexAttribute complexAttr = (ComplexAttribute) object;
        final Deque<Attribute> attrDeque = getChildrenAttributes(complexAttr);
        // separate into repeat tuples
        final int tuplesNumber = children.size();
        final List<List<Attribute>> attributeTuples = new ArrayList<>();
        while (!attrDeque.isEmpty()) {
            final List<Attribute> attrTuple = new ArrayList<>();
            for (int i = 0; i < tuplesNumber; i++) attrTuple.add(attrDeque.poll());
            attributeTuples.add(attrTuple);
        }
        // iterate every tuple and generate the properties
        for (final List<Attribute> tuple : attributeTuples) {
            if (!CollectionUtils.isEmpty(tuple)) {
                for (XSDParticle particle : children) {
                    XSDElementDeclaration childAux = (XSDElementDeclaration) particle.getContent();
                    if (childAux.isElementDeclarationReference())
                        childAux = childAux.getResolvedElementDeclaration();
                    final XSDElementDeclaration child = childAux;
                    final Optional<Attribute> attributeOpt =
                            tuple.stream()
                                    .filter(
                                            x ->
                                                    Optional.ofNullable(x)
                                                                    .map(a -> a.getDescriptor())
                                                                    .map(a -> a.getName())
                                                                    .map(a -> a.getLocalPart())
                                                                    .isPresent()
                                                            && Objects.equals(
                                                                    child.getName(),
                                                                    x.getDescriptor()
                                                                            .getName()
                                                                            .getLocalPart())
                                                            && Objects.equals(
                                                                    child.getTargetNamespace(),
                                                                    x.getDescriptor()
                                                                            .getName()
                                                                            .getNamespaceURI()))
                                    .findFirst();
                    if (attributeOpt.isPresent()) {
                        final Attribute attribute = attributeOpt.get();
                        properties.add(new Object[] {particle, attribute.getValue()});
                    }
                }
            }
        }
    }

