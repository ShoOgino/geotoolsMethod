    /**
     * Encodes an object, element name pair explicitly specifying the type of the root element.
     *
     * @param object The object to encode.
     * @param element The name of the element to encode.
     * @param type The type of the element
     * @return The object encoded.
     */
    protected Document encode(Object object, QName element, QName type) throws Exception {
        Configuration configuration = createConfiguration();

        if (type != null) {
            // set the hint
            configuration
                    .getContext()
                    .registerComponentInstance("http://geotools.org/typeDefinition", type);
        }

        XSDSchema schema = configuration.getXSD().getSchema();

        Encoder encoder = new Encoder(configuration, schema);

        // additional namespaces
        for (Map.Entry<String, String> stringStringEntry : namespaceMappings.entrySet()) {
            Map.Entry mapping = (Map.Entry) stringStringEntry;
            String prefix = (String) mapping.getKey();
            String uri = (String) mapping.getValue();

            encoder.getNamespaces().declarePrefix(prefix, uri);
        }

        ByteArrayOutputStream output = new ByteArrayOutputStream();
        encoder.encode(object, element, output);

        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        dbf.setNamespaceAware(true);

        return dbf.newDocumentBuilder().parse(new ByteArrayInputStream(output.toByteArray()));
    }

