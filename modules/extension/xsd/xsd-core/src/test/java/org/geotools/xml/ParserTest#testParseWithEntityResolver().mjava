    /**
     * Test Parser with an XML document containing an external entity: <!ENTITY c SYSTEM
     * "file:///this/file/does/not/exist">
     */
    public void testParseWithEntityResolver() throws Exception {
        Parser parser = new Parser(new MLConfiguration());

        try {
            parser.parse(
                    MLSchemaLocationResolver.class.getResourceAsStream(
                            "mails-external-entities.xml"));
            fail("parsing should throw an exception since referenced file does not exist");
        } catch (FileNotFoundException e) {
        }

        // Set an EntityResolver implementation to prevent usage of external entities.
        // When parsing an XML entity, the empty InputSource returned by this resolver provokes
        // a java.net.MalformedURLException
        parser.setEntityResolver(
                new EntityResolver2() {
                    @Override
                    public InputSource resolveEntity(String publicId, String systemId)
                            throws SAXException, IOException {
                        return new InputSource();
                    }

                    @Override
                    public InputSource getExternalSubset(String name, String baseURI)
                            throws SAXException, IOException {
                        return new InputSource();
                    }

                    @Override
                    public InputSource resolveEntity(
                            String name, String publicId, String baseURI, String systemId)
                            throws SAXException, IOException {
                        return new InputSource();
                    }
                });

        try {
            parser.parse(
                    MLSchemaLocationResolver.class.getResourceAsStream(
                            "mails-external-entities.xml"));
            fail("parsing an XML with external entities should throw a MalformedURLException");
        } catch (MalformedURLException e) {
        }

        // Set another EntityResolver
        parser.setEntityResolver(
                new EntityResolver2() {
                    @Override
                    public InputSource resolveEntity(String publicId, String systemId)
                            throws SAXException, IOException {
                        if ("file:///this/file/does/not/exist".equals(systemId)) {
                            return new InputSource(new StringReader("hello"));
                        } else {
                            return new InputSource();
                        }
                    }

                    @Override
                    public InputSource getExternalSubset(String name, String baseURI)
                            throws SAXException, IOException {
                        // TODO Auto-generated method stub
                        return null;
                    }

                    @Override
                    public InputSource resolveEntity(
                            String name, String publicId, String baseURI, String systemId)
                            throws SAXException, IOException {
                        if ("file:///this/file/does/not/exist".equals(systemId)) {
                            return new InputSource(new StringReader("hello"));
                        } else {
                            return new InputSource();
                        }
                    }
                });

        // parsing shouldn't throw an exception
        parser.parse(
                MLSchemaLocationResolver.class.getResourceAsStream("mails-external-entities.xml"));
    }

