    /**
     * Convenience method for obtaining an instance of a binding.
     *
     * @param name The qualified name of the element,attribute,or type the binding "binds" to, the
     *     key of the binding in the container.
     * @return The binding.
     */
    protected Binding binding(QName name) {
        Configuration configuration = createConfiguration();

        // create the context
        MutablePicoContainer context = new DefaultPicoContainer();
        context = configuration.setupContext(context);

        // create the binding container
        Map<QName, Object> bindings = configuration.setupBindings();
        BindingLoader bindingLoader = new BindingLoader(bindings);
        //        MutablePicoContainer container = bindingLoader.getContainer();
        //        container = configuration.setupBindings(container);
        //        bindingLoader.setContainer(container);

        // register cmponents available to bindings at runtime
        context.registerComponentInstance(new BindingFactoryImpl(bindingLoader));

        // binding walker support
        context.registerComponentInstance(new BindingWalkerFactoryImpl(bindingLoader, context));

        // logger
        context.registerComponentInstance(logger);

        // setup the namespace support
        NamespaceSupport namespaces = new NamespaceSupport();
        Map<String, String> mappings = new HashMap<>();

        try {
            for (XSD xsd : configuration.getXSD().getDependencies()) {
                XSDSchema schema = xsd.getSchema();

                mappings.putAll(schema.getQNamePrefixToNamespaceMap());
            }

            mappings.putAll(configuration.getXSD().getSchema().getQNamePrefixToNamespaceMap());
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        for (Map.Entry<String, String> stringStringEntry : mappings.entrySet()) {
            Map.Entry mapping = (Map.Entry) stringStringEntry;
            String key = (String) mapping.getKey();

            if (key == null) {
                key = "";
            }

            namespaces.declarePrefix(key, (String) mapping.getValue());
        }

        context.registerComponentInstance(namespaces);
        context.registerComponentInstance(new NamespaceSupportWrapper(namespaces));

        XSDSchema result;
        try {
            result = configuration.getXSD().getSchema();
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        SchemaIndex index = new SchemaIndexImpl(new XSDSchema[] {result});
        context.registerComponentInstance(index);

        context.registerComponentInstance(configuration);

        return bindingLoader.loadBinding(name, context);
    }

