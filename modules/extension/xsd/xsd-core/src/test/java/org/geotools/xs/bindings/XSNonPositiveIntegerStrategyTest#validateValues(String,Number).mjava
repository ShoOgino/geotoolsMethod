    /**
     * nonPositiveInteger has a lexical representation consisting of an
     * optional preceding sign followed by a finite-length sequence of
     * decimal digits (#x30-#x39). The sign may be "+" or may be omitted
     * only for lexical forms denoting zero; in all other lexical forms,
     * the negative sign ("-") must be present.
     *
     * For example: -1, 0, -12678967543233, -100000.
     * @throws Exception
     *
     */
    public void validateValues(String text, Number expected)
        throws Exception {
        Object value = new BigInteger(text.trim());

        Object result = strategy.parse(element(text, qname), value);

        if (!(result instanceof BigInteger) && result instanceof Number) {
            result = BigInteger.valueOf(((Number) result).longValue());
        }

        assertEquals(integer(expected), integer(result));
    }

