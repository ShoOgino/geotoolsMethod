    public void assertInputs(EList<InputDescriptionType> inputs) {
        Assert.assertNotNull(inputs);
        Assert.assertEquals(2, inputs.size());

        InputDescriptionType desc = inputs.get(0);
        assertLanguageString(desc.getTitle(), 1, Arrays.asList("Geometry to be buffered"));
        assertLanguageString(
                desc.getAbstract(),
                1,
                Arrays.asList("Simple Features geometry input in GML or GeoJson"));
        Assert.assertNotNull(desc.getIdentifier());
        Assert.assertEquals("INPUT_GEOMETRY", desc.getIdentifier().getValue());
        Assert.assertNotNull(desc.getDataDescription());

        ComplexDataType complexData = (ComplexDataType) desc.getDataDescription();
        Assert.assertNotNull(complexData);
        Assert.assertNotNull(complexData.getFormat());
        Assert.assertEquals(2, complexData.getFormat().size());

        desc = inputs.get(1);
        assertLanguageString(desc.getTitle(), 1, Arrays.asList("Distance"));
        assertLanguageString(
                desc.getAbstract(), 1, Arrays.asList("Distance to be used to calculate buffer."));
        Assert.assertNotNull(desc.getIdentifier());
        Assert.assertEquals("DISTANCE", desc.getIdentifier().getValue());

        Assert.assertNotNull(desc.getDataDescription());

        LiteralDataType literalData = (LiteralDataType) desc.getDataDescription();
        Assert.assertNotNull(literalData.getLiteralDataDomain());
        Assert.assertNotNull(literalData.getLiteralDataDomain().get(0));
        Assert.assertNotNull(literalData.getLiteralDataDomain().get(0).getAllowedValues());
        Assert.assertNotNull(
                literalData.getLiteralDataDomain().get(0).getAllowedValues().getRange());
        Assert.assertNotNull(
                literalData.getLiteralDataDomain().get(0).getAllowedValues().getRange().get(0));
        Assert.assertEquals(
                "INF",
                literalData
                        .getLiteralDataDomain()
                        .get(0)
                        .getAllowedValues()
                        .getRange()
                        .get(0)
                        .getMaximumValue()
                        .getValue());
        Assert.assertEquals(
                "-INF",
                literalData
                        .getLiteralDataDomain()
                        .get(0)
                        .getAllowedValues()
                        .getRange()
                        .get(0)
                        .getMinimumValue()
                        .getValue());
        Assert.assertNotNull(literalData.getLiteralDataDomain().get(0).getDataType());
        Assert.assertNotNull(
                "Double", literalData.getLiteralDataDomain().get(0).getDataType().getValue());
    }

