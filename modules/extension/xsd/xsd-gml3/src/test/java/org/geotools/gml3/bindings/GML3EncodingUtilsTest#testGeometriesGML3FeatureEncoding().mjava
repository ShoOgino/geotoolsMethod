    @Test
    public void testGeometriesGML3FeatureEncoding() throws Exception {
        // create a schema index for GML 3.1
        Configuration configuration = new GMLConfiguration();
        SchemaIndex index = Schemas.findSchemas(configuration);
        // create a simple feature type with multi lines and multi polygons
        SimpleFeatureType featureType = DataUtilities.createType("feature",
                "geometry1:LineString,geometry2:MultiLineString,geometry3:Polygon," +
                        "geometry4:MultiPolygon,geometry5:Point,geometry6:MultiPoint");
        // both GML 3.1 and GML 3.2 encoding utils delegate most of the work on the GML encoding utils
        GMLEncodingUtils encoder = new GMLEncodingUtils(GML.getInstance());
        // create the XSD type definition for our feature type
        XSDTypeDefinition type = encoder.createXmlTypeFromFeatureType(featureType, index, Collections.emptySet());
        // get the XSD elements representing our geometries attributes
        List<XSDElementDeclaration> elements = Schemas.getChildElementDeclarations(type, false);
        assertThat(elements, notNullValue());
        assertThat(elements.size(), is(6));
        // extract the type names and ignore the NULL values
        List<String> typesNames = elements.stream()
                .map(XSDFeature::getType)
                .filter(elementType -> elementType != null)
                .map(XSDNamedComponent::getName)
                .collect(Collectors.toList());
        // check that our geometries have the correct type
        assertThat(typesNames.size(), is(6));
        assertThat(typesNames, hasItems("LineStringPropertyType", "MultiLineStringPropertyType", "PolygonPropertyType",
                "MultiPolygonPropertyType", "PointPropertyType", "MultiPointPropertyType"));
    }

