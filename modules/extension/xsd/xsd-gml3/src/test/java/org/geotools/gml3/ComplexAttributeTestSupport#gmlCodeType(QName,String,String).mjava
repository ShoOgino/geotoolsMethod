    /*
     * can extend this later to generate more generate complex attributes - lets start with
     * something concrete
     */
    public ComplexAttribute gmlCodeType(QName typeName, String value, String codeSpace) {
        Name myType = new NameImpl(typeName.getNamespaceURI(), typeName.getLocalPart());

        List<Property> properties = new ArrayList<>();
        List<PropertyDescriptor> propertyDescriptors = new ArrayList<>();

        Name attName = new NameImpl("codeSpace");
        // Name name, Class<?> binding, boolean isAbstract, List<Filter> restrictions,
        // PropertyType superType, InternationalString description
        AttributeType p =
                new AttributeTypeImpl(attName, String.class, false, false, null, null, null);
        AttributeDescriptor pd = new AttributeDescriptorImpl(p, attName, 0, 0, false, null);

        propertyDescriptors.add(pd);
        properties.add(new AttributeImpl(codeSpace, pd, null));

        p =
                new AttributeTypeImpl(
                        new NameImpl("simpleContent"),
                        String.class,
                        false,
                        false,
                        null,
                        null,
                        null);
        AttributeDescriptor pd2 =
                new AttributeDescriptorImpl(p, new NameImpl("simpleContent"), 0, 0, false, null);

        properties.add(new AttributeImpl(value, pd2, null));
        propertyDescriptors.add(pd2);

        ComplexTypeImpl at =
                new ComplexTypeImpl(
                        myType,
                        propertyDescriptors,
                        false,
                        false,
                        Collections.emptyList(),
                        null,
                        null);

        AttributeDescriptorImpl ai = new AttributeDescriptorImpl(at, myType, 0, 0, false, null);

        return new ComplexAttributeImpl(properties, ai, null);
    }

