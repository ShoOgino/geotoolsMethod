    /**
     * Defines the circle based on three points. All three points must be on on
     * the circumference of the circle, and hence, the 3 points cannot be have
     * any pair equal, and cannot form a line. Therefore, each point given is
     * one radius measure from the circle's center.
     *
     * @param p1 A point on the desired circle
     * @param p2 A point on the desired circle
     * @param p3 A point on the desired circle
     */
    private void initThreePointCircle(Coordinate p1, Coordinate p2,
            Coordinate p3) {
        double a13, b13, c13;
        double a23, b23, c23;
        double x = 0., y = 0., rad = 0.;

        // begin pre-calculations for linear system reduction
        a13 = 2 * (p1.x - p3.x);
        b13 = 2 * (p1.y - p3.y);
        c13 = (p1.y * p1.y - p3.y * p3.y) + (p1.x * p1.x - p3.x * p3.x);
        a23 = 2 * (p2.x - p3.x);
        b23 = 2 * (p2.y - p3.y);
        c23 = (p2.y * p2.y - p3.y * p3.y) + (p2.x * p2.x - p3.x * p3.x);
        // testsuite-suite to be certain we have three distinct points passed
        double smallNumber = 0.01;
        if ((Math.abs(a13) < smallNumber && Math.abs(b13) < smallNumber)
                || (Math.abs(a13) < smallNumber && Math.abs(b13) < smallNumber)) {
            // // points too close so set to default circle
            x = 0;
            y = 0;
            rad = 0;
        } else {
            // everything is acceptable do the y calculation
            y = (a13 * c23 - a23 * c13) / (a13 * b23 - a23 * b13);
            // x calculation
            // choose best formula for calculation
            if (Math.abs(a13) > Math.abs(a23)) {
                x = (c13 - b13 * y) / a13;
            } else {
                x = (c23 - b23 * y) / a23;
            }
            // radius calculation
            rad = Math.sqrt((x - p1.x) * (x - p1.x) + (y - p1.y) * (y - p1.y));
        }
        this.center.x = x;
        this.center.y = y;
        this.radius = rad;
    }

