    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated modifiable
     */
    @Override
    public Object parse(ElementInstance instance, Node node, Object value)
        throws Exception {

        LineString arcLineString = GML3ParsingUtils.lineString(node, gFactory, csFactory);
        
        Coordinate[] arcCoordinates = arcLineString.getCoordinates();
        if (arcCoordinates.length != 3) {
            // maybe log this instead and return null
            throw new RuntimeException(
                    "GML3 parser exception: The number of coordinates of an Arc should be 3. It currently is: " + arcCoordinates.length + "; " + arcLineString);
        }

        Coordinate c1 = arcCoordinates[0];
        Coordinate c2 = arcCoordinates[1];
        Coordinate c3 = arcCoordinates[2];

        // determine whether we need to reverse our input.
        boolean mustReverse = laidOutClockwise(c1, c2, c3);

        if (mustReverse) {
            // swap coords 1 and 3
            Coordinate cTemp = c1;
            c1 = c3;
            c3 = cTemp;
        }

        Circle circle = new Circle(c1, c2, c3);
        double tolerance = arcParameters.getLinearizationTolerance().getTolerance(circle);
        Coordinate[] resultCoordinates = circle.linearizeArc(c1, c2, c3, tolerance);

        if (mustReverse) {
            // reverse back
            List<Coordinate> reversingCoordinates = Arrays.asList(resultCoordinates);
            Collections.reverse(reversingCoordinates);
            resultCoordinates = (Coordinate[])
                    reversingCoordinates.toArray(new Coordinate[reversingCoordinates.size()]);
        }

        LineString resultLineString = gFactory.createLineString(resultCoordinates);

        return resultLineString;
    }

