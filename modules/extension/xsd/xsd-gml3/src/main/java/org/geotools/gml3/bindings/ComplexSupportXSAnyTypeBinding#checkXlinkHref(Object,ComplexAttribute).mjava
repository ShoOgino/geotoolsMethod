    /**
     * Check if the complex attribute contains a feature which id is pre-existing in the document.
     * If it's true, make sure it's only encoded as an xlink:href to the existing id.
     *
     * @param value The complex attribute value
     * @param att The complex attribute itself
     */
    private void checkXlinkHref(Object value, ComplexAttribute att) {
        if (value != null && value instanceof ComplexAttribute) {
            ComplexAttribute object = (ComplexAttribute) value;
            // Only worry about features for now, as non feature types don't get ids encoded yet.
            // See GEOS-3738. To encode xlink:href to an id that doesn't exist in the doc is wrong
            if (!(object.getType() instanceof FeatureTypeImpl)) {
                // we are checking the type, not the object as FeatureImpl, because they could still
                // be non-features that are constructed as features for the purpose of feature
                // chaining.
                return;
            }
            Identifier ident = object.getIdentifier();
            if (ident == null) {
                return;
            }
            String id = Converters.convert(ident.getID(), String.class);
            if (idSet.idExists(id)) {
                // XSD type ids can only appear once in the same document, otherwise the document is
                // not schema valid. Attributes of the same ids should be encoded as xlink:href to
                // the existing attribute.
                Object clientProperties = att.getUserData().get(Attributes.class);
                Map<Name, Object> map = null;
                if (clientProperties == null) {
                    map = new HashMap<>();
                    att.getUserData().put(Attributes.class, map);
                } else {
                    map = (Map<Name, Object>) clientProperties;
                }
                map.put(toTypeName(XLINK.HREF), "#" + id.toString());
                // make sure the value is not encoded
                att.setValue(Collections.emptyList());
            }
        }
    }

