    /**
     * Turns a xml type definition into a geotools feature type.
     *
     * @param element The element declaration.
     * @param bwFactory The binding walker factory.
     * @param crs The coordinate reference system to use on this feature type.
     * @return The corresponding geotools feature type.
     */
    public static SimpleFeatureType featureType(
            XSDElementDeclaration element,
            BindingWalkerFactory bwFactory,
            CoordinateReferenceSystem crs)
            throws Exception {
        SimpleFeatureTypeBuilder ftBuilder = new SimpleFeatureTypeBuilder();
        ftBuilder.setName(element.getName());
        ftBuilder.setNamespaceURI(element.getTargetNamespace());

        // build the feature type by walking through the elements of the
        // actual xml schema type
        List children = Schemas.getChildElementParticles(element.getType(), true);

        for (Object child : children) {
            XSDParticle particle = (XSDParticle) child;
            XSDElementDeclaration property = (XSDElementDeclaration) particle.getContent();

            if (property.isElementDeclarationReference()) {
                property = property.getResolvedElementDeclaration();
            }

            final List<Binding> bindings = new ArrayList<>();
            BindingWalker.Visitor visitor =
                    new BindingWalker.Visitor() {
                        public void visit(Binding binding) {
                            bindings.add(binding);
                        }
                    };

            bwFactory.walk(property, visitor);

            if (bindings.isEmpty()) {
                // could not find a binding, use the defaults
                LOGGER.fine(
                        "Could not find binding for "
                                + property.getQName()
                                + ", using XSAnyTypeBinding.");
                bindings.add(new XSAnyTypeBinding());
            }

            // get the last binding in the chain to execute
            Binding last = bindings.get(bindings.size() - 1);
            Class theClass = last.getType();

            if (theClass == null) {
                throw new RuntimeException("binding declares null type: " + last.getTarget());
            }

            // get the attribute properties
            int min = particle.getMinOccurs();
            int max = particle.getMaxOccurs();

            // check for uninitialized values
            if (min == -1) {
                min = 0;
            }

            if (max == -1) {
                max = 1;
            }

            // if the next property is of type geometry, let's set its CRS
            if (Geometry.class.isAssignableFrom(theClass) && crs != null) {
                ftBuilder.crs(crs);
            }

            // create the type
            ftBuilder.minOccurs(min).maxOccurs(max).add(property.getName(), theClass);

            // set the default geometry explicitly. Note we're comparing the GML namespace
            // with String.startsWith to catch up on the GML 3.2 namespace too, which is hacky.
            final String propNamespace = property.getTargetNamespace();
            if (Geometry.class.isAssignableFrom(theClass)
                    && (propNamespace == null || !propNamespace.startsWith(GML.NAMESPACE))) {
                // only set if non-gml, we do this because of "gml:location",
                // we dont want that to be the default if the user has another
                // geometry attribute
                if (ftBuilder.getDefaultGeometry() == null) {
                    ftBuilder.setDefaultGeometry(property.getName());
                }
            }
        }
        ftBuilder.userData(PARSED_FROM_SCHEMA_KEY, true);

        return ftBuilder.buildFeatureType();
    }

