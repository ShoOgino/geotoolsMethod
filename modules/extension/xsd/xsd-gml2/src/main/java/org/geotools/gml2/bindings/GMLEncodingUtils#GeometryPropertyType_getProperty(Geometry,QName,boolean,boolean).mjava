    public Object GeometryPropertyType_getProperty(Geometry geometry, QName name,
            boolean includeAbstractGeometry, boolean makeEmpty) {

        if (name.equals(gml.qName("Point")) || name.equals(gml.qName("LineString"))
                || name.equals(gml.qName("Polygon")) || name.equals(gml.qName("MultiPoint"))
                || name.equals(gml.qName("MultiLineString"))
                || name.equals(gml.qName("MultiPolygon")) || name.equals(gml.qName("MultiSurface"))
                || name.equals(gml.qName("AbstractSurface")) || name.equals(gml.qName("_Surface"))
                || name.equals(gml.qName("_Curve")) || name.equals(gml.qName("AbstractCurve"))
                || name.equals(gml.qName("MultiCurve"))
                || (includeAbstractGeometry && name.equals(gml.qName("_Geometry")))) {
            // if the geometry is null, return null
            if (isEmpty(geometry) || makeEmpty) {
                return null;
            }

            return geometry;
        }

        if (geometry.getUserData() instanceof Map) {
            Map<Name, Object> clientProperties = (Map<Name, Object>) ((Map) geometry.getUserData())
                    .get(Attributes.class);

            Name cname = toTypeName(name);
            if (clientProperties != null && clientProperties.keySet().contains(cname))
                return clientProperties.get(cname);
        }

        if (XLINK.HREF.equals(name)) {
            // only process if geometry is empty and ID exists
            String id = getID(geometry);
            if ((makeEmpty || isEmpty(geometry)) && id != null) {
                return "#" + id;
            }
        }

        return null;

    }

