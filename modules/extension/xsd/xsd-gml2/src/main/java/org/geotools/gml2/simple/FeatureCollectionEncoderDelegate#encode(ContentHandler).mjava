    public void encode(ContentHandler handler) throws Exception {
        GMLWriter output =
                new GMLWriter(
                        handler,
                        namespaces,
                        gml.getNumDecimals(),
                        gml.forceDecimalEncoding(),
                        gml.padWithZeros(),
                        gml.getGmlPrefix(),
                        gml.getEncodeMeasures());
        boolean featureBounds =
                !encoder.getConfiguration().hasProperty(GMLConfiguration.NO_FEATURE_BOUNDS);

        try (SimpleFeatureIterator fi = features.features()) {
            if (!fi.hasNext()) {
                return;
            }

            @SuppressWarnings("unchecked")
            ObjectEncoder<Object> ee = gml.createEnvelopeEncoder(encoder);

            gml.startFeatures(output);

            AttributesImpl idatts = new AttributesImpl();
            gml.initFidAttribute(idatts);

            // scroll over the features, encode each of them
            SimpleFeature f = fi.next();
            FeatureTypeContextCache ftCache = new FeatureTypeContextCache();
            while (f != null) {
                // special handling for joined features, they need to be split and
                // encoded inside a tuple
                if (GMLEncodingUtils.isJoinedFeature(f) && gml.supportsTuples()) {
                    SimpleFeature[] splitted = GMLEncodingUtils.splitJoinedFeature(f);
                    gml.startTuple(output);
                    for (SimpleFeature feature : splitted) {
                        encodeFeature(output, featureBounds, ee, idatts, feature, ftCache);
                    }
                    gml.endTuple(output);
                } else {
                    encodeFeature(output, featureBounds, ee, idatts, f, ftCache);
                }

                if (fi.hasNext()) {
                    f = fi.next();
                } else {
                    f = null;
                }
            }

            gml.endFeatures(output);
        }
    }

