    /**
     *
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated modifiable
     */
    @Override
    public Object parse(ElementInstance instance, Node node, Object value) throws Exception {
        // The following CssParameters may be used:
        // &quot;stroke&quot; (color),
        // &quot;stroke-opacity&quot;
        // &quot;stroke-width&quot;,
        // &quot;stroke-linejoin&quot;
        // &quot;stroke-linecap&quot;,
        // &quot;stroke-dasharray&quot;,
        // &quot;stroke-dashoffset&quot;.
        Expression color = null;

        // The following CssParameters may be used:
        // &quot;stroke&quot; (color),
        // &quot;stroke-opacity&quot;
        // &quot;stroke-width&quot;,
        // &quot;stroke-linejoin&quot;
        // &quot;stroke-linecap&quot;,
        // &quot;stroke-dasharray&quot;,
        // &quot;stroke-dashoffset&quot;.
        Expression opacity = null;

        // The following CssParameters may be used:
        // &quot;stroke&quot; (color),
        // &quot;stroke-opacity&quot;
        // &quot;stroke-width&quot;,
        // &quot;stroke-linejoin&quot;
        // &quot;stroke-linecap&quot;,
        // &quot;stroke-dasharray&quot;,
        // &quot;stroke-dashoffset&quot;.
        Expression width = null;

        // The following CssParameters may be used:
        // &quot;stroke&quot; (color),
        // &quot;stroke-opacity&quot;
        // &quot;stroke-width&quot;,
        // &quot;stroke-linejoin&quot;
        // &quot;stroke-linecap&quot;,
        // &quot;stroke-dasharray&quot;,
        // &quot;stroke-dashoffset&quot;.
        Expression lineJoin = null;
        Expression lineCap = null;
        Expression dashArray = null;
        Expression dashOffset = null;

        for (CssParameter css : node.getChildValues(CssParameter.class)) {
            Expression exp = css.getExpression();
            if (exp == null) {
                continue;
            }

            if ("stroke".equals(css.getName())) {
                color = exp;
            } else if ("stroke-opacity".equals(css.getName())) {
                opacity = exp;
            } else if ("stroke-width".equals(css.getName())) {
                width = exp;
            } else if ("stroke-linejoin".equals(css.getName())) {
                lineJoin = exp;
            } else if ("stroke-linecap".equals(css.getName())) {
                lineCap = exp;
            } else if ("stroke-dasharray".equals(css.getName())) {
                dashArray = exp;
            } else if ("stroke-dashoffset".equals(css.getName())) {
                dashOffset = exp;
            }
        }

        float[] dash = null;

        if (dashArray != null) {
            String[] string = Filters.asString(dashArray).split(" +");
            dash = new float[string.length];

            for (int i = 0; i < string.length; i++) {
                dash[i] = Float.parseFloat(string[i]);
            }
        }

        // &lt;xsd:choice minOccurs="0"&gt;
        //   &lt;xsd:element ref="sld:GraphicFill"/&gt;
        //   &lt;xsd:element ref="sld:GraphicStroke"/&gt;
        // &lt;/xsd:choice&gt;
        Graphic graphicFill = (Graphic) node.getChildValue("GraphicFill");
        Graphic graphicStroke = (Graphic) node.getChildValue("GraphicStroke");

        return styleFactory.createStroke(
                color,
                width,
                opacity,
                lineJoin,
                lineCap,
                dash,
                dashOffset,
                graphicFill,
                graphicStroke);
    }

