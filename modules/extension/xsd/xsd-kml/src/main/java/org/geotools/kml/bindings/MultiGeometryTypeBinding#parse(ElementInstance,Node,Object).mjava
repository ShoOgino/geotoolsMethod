    /**
     *
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @generated modifiable
     */
    public Object parse(ElementInstance instance, Node node, Object value) throws Exception {
        List<Geometry> geometries = node.getChildValues(Geometry.class);

        if (geometries.isEmpty()) {
            return geometryFactory.createGeometryCollection(new Geometry[] {});
        }

        // try to be smart about which subclass to return
        int i = 0;
        Class<?> geometryClass = geometries.get(i++).getClass();

        for (; i < geometries.size(); i++) {
            Class<?> clazz = geometries.get(i).getClass();

            if (!clazz.isAssignableFrom(geometryClass) && !geometryClass.isAssignableFrom(clazz)) {
                geometryClass = null;

                break;
            }
        }

        if (geometryClass != null) {
            if (geometryClass == Point.class) {
                // create a multi point
                return geometryFactory.createMultiPoint(
                        geometries.toArray(new Point[geometries.size()]));
            }

            if ((geometryClass == LineString.class) || (geometryClass == LinearRing.class)) {
                // create a multi line string
                return geometryFactory.createMultiLineString(
                        geometries.toArray(new LineString[geometries.size()]));
            }

            if (geometryClass == Polygon.class) {
                // create a multi polygon
                return geometryFactory.createMultiPolygon(
                        geometries.toArray(new Polygon[geometries.size()]));
            }
        }

        return geometryFactory.createGeometryCollection(
                geometries.toArray(new Geometry[geometries.size()]));
    }

