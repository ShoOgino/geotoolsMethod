    /**
     * Given a CRS and a Set of type String consisting of EPSG CRS codes
     * (such as "EPSG:4326"), it will check the transform that exists between
     * each EPSG code's CRS and the given CRS. If this is the identity
     * transform, meaning the CRS is equivalent to the EPSG code, 
     * the used EPSG code will be returned. The first valid EPSG code found
     * is returned, so it is possibly that multiple valid codes exist.
     * 
     * If no such identity transform can be found, null will be returned.
     * 
     * If this method is succesful, the result is stored in a cache, which is
     * called in subsequent calls. 
     * 
     * @param crs a CRS that is to be compared to each EPSG code in codes
     * @param codes a Set of type String containing EPSG codes
     * @return an EPSG code that correspondes to crs, or null if one can't be found
     */
    public static String matchEPSG(CoordinateReferenceSystem crs, Set codes) {
    	
    	TreeSet previous = (TreeSet) crsCache.get(crs);
    	if (previous != null) {
    		
    		Iterator iter = previous.iterator();
    		while (iter.hasNext()) {
    			String code = (String) iter.next();
    			
    			if (codes.contains(code)) {
    				return code;
    			}
    		}
    	}
    	
    	Iterator iter = crs.getIdentifiers().iterator();
    	while (iter.hasNext()) {
    		Identifier ident = (Identifier) iter.next();
    		String epsgCode = ident.toString();
    		if (codes.contains(epsgCode)) {
    			if (crsCache.get(crs) == null) {
    				crsCache.put(crs, new TreeSet());
    			}
    			TreeSet set = (TreeSet) crsCache.get(crs);
    			set.add(epsgCode);
    			
    			return epsgCode;
    		}
    	}
    	
    	iter = null;
    	
    	iter = codes.iterator();
    	while (iter.hasNext()) {
    		String epsgCode = (String) iter.next();
    		
    		CoordinateReferenceSystem epsgCRS;
			try {
				epsgCRS = CRS.decode(epsgCode);
			} catch (Exception e) {
//				e.printStackTrace();
				continue;
			}
    		
    		MathTransform transform;
			try {
				transform = CRS.findMathTransform(crs, epsgCRS, true);
			} catch (FactoryException e) {
//				e.printStackTrace();
				continue;
			}
    		
    		if (transform.isIdentity()) {
    			if (crsCache.get(crs) == null) {
    				crsCache.put(crs, new TreeSet());
    			}
    			TreeSet set = (TreeSet) crsCache.get(crs);
    			set.add(epsgCode);
    			
    			return epsgCode;
    		}
    	}
    	return null;
    }

