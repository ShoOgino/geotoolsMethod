    /**
     * Access all layers.
     *
     * @return list of layers
     */
    public List<MBLayer> layers() {
        JSONArray layers = parse.getJSONArray(json, "layers");
        List<MBLayer> layersList = new ArrayList<>();
        int labelPriority = 0;
        for (Object obj : layers) {
            if (obj instanceof JSONObject) {

                JSONObject jsonObject = (JSONObject) obj;

                MBLayer mbLayer = null;
                if (jsonObject.containsKey("ref")) {
                    String refLayer = jsonObject.get("ref").toString();
                    JSONObject refObject = referenceLayer(layers, refLayer);
                    if (refObject.size() > 0) {
                        // At a minimum, a type is needed to create a layer
                        applyReferenceObject(jsonObject, refObject);
                        mbLayer = MBLayer.create(jsonObject);
                    }
                } else {
                    mbLayer = MBLayer.create((JSONObject) obj);
                }
                // adjust label priority so that the labels of the last layer are painted first
                if (mbLayer instanceof SymbolMBLayer) {
                    ((SymbolMBLayer) mbLayer)
                            .setLabelPriority(labelPriority += DEFAULT_LABEL_PRIORITY);
                }
                layersList.add(mbLayer);
            } else {
                throw new MBFormatException("Unexpected layer definition " + obj);
            }
        }
        return layersList;
    }

