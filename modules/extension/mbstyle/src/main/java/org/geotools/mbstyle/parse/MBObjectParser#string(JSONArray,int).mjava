    /**
     * Convert the value in the provided JSONArray at index to a string Literal, or a Function.
     *
     * @param json The JSONArray in which to look up the value
     * @param index The index in the JSONArray at which to look up the value
     * @return String GeoTools Expression based on provided json, or literal if json was null.
     */
    public Expression string(JSONArray json, int index) {
        Object obj = json.get(index);
        if (obj == null) {
            return ff.literal(null);
        } else if (obj instanceof String) {
            String str = (String) obj;
            return ff.literal(str);
        } else if (obj instanceof Number) {
            Number number = (Number) obj;
            return ff.literal(number);
        } else if (obj instanceof Boolean) {
            Boolean bool = (Boolean) obj;
            return ff.literal(bool);
        } else if (obj instanceof JSONObject) {
            MBFunction function = new MBFunction(this, (JSONObject) obj);
            return function.function(String.class);
        } else if (obj instanceof JSONArray) {
            JSONArray array = (JSONArray) obj;
            if (isString(array, 0)) {
                String expressionName = get(array, 0);
                if (MBExpression.canCreate(expressionName)) {
                    return MBExpression.transformExpression(array);
                } else {
                    throw new MBFormatException(
                            context
                                    + " string unavailable: data expression \""
                                    + expressionName
                                    + "\" invalid. It may be misspelled or not supported by this implementation");
                }
            } else {
                throw new MBFormatException(
                        context
                                + " string unavailable: Conversion from a JSONArray not a supported: "
                                + array);
            }
        } else {
            throw new IllegalArgumentException(
                    context
                            + " string unavailable: json contents invalid - value limited to String, Number, Boolean, JSONArray or JSONObject but was "
                            + obj.getClass().getSimpleName());
        }
    }

