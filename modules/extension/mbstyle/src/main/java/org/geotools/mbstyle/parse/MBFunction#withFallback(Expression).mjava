    /**
     * Takes an expression and wraps it with a function that falls back to this {@link MBFunction}'s
     * default return value.
     *
     * <p>If the input expression evaluates to null, the wrapper function will return the fallback
     * value instead.
     *
     * @param expression The expression to wrap with a fallback to this {@link MBFunction}'s return
     *     value.
     */
    private Expression withFallback(Expression expression) {
        Object defaultValue = getDefault();
        if (defaultValue != null) {
            return ff.function("DefaultIfNull", expression, ff.literal(defaultValue));
        } else {
            return expression;
        }
    }

