    /**
     * Access a JSONArray at the provided tag in the provided JSONObject, with a fallback if no
     * JSONArray is found at that tag.
     *
     * @param json The JSONObject in which to lookup the provided tag and return a JSONArray
     * @param name The tag to look up in the provided JSONObject
     * @param fallback The JSONArray to return if the provided json does not contain a JSONArray for
     *     that tag.
     * @return The JSONArray at the provided tag, or the fallback JSONArray.
     */
    public JSONArray getJSONArray(JSONObject json, String name, JSONArray fallback) {
        if (json == null) {
            throw new IllegalArgumentException("json required");
        } else if (name == null) {
            throw new IllegalArgumentException("name required for json object access");
        } else if (!json.containsKey(name) || json.get(name) == null) {
            return fallback;
        } else if (json.containsKey(name) && json.get(name) instanceof JSONArray) {
            return (JSONArray) json.get(name);
        } else {
            throw new MBFormatException("\"" + name + "\" requires JSONArray");
        }
    }

