    /**
     * Parse obj into a color expression (literal or function).
     *
     * @param context
     * @param obj
     * @param fallback
     * @return color expression (literal or function)
     */
    private Expression color(String context, Object obj, Color fallback) {
        if (obj == null) {
            return fallback == null ? null : ff.literal(fallback);
        } else if (obj instanceof String) {
            String str = (String) obj;
            return color(str);
        } else if (obj instanceof Number) {
            throw new MBFormatException(context + " color from Number not supported");
        } else if (obj instanceof Boolean) {
            throw new MBFormatException(context + "  color from Boolean not supported");
        } else if (obj instanceof JSONObject) {
            MBFunction function = new MBFunction((JSONObject) obj);
            return function.color();
        } else if (obj instanceof JSONArray) {
            if (((JSONArray) obj).get(0) instanceof String) {
                return MBExpression.transformExpression((JSONArray) obj);
            } else {
                throw new MBFormatException(context + " color from JSONArray not supported");
            }
        } else {
            throw new IllegalArgumentException(
                    "json contents invalid, "
                            + context
                            + " limited to String or JSONObject but was "
                            + obj.getClass().getSimpleName());
        }
    }

