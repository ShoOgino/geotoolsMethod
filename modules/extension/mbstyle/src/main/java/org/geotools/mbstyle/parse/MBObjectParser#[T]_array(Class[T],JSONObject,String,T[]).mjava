    /**
     * Lookup an array of the provided type in the provided JSONObject at 'tag', with a fallback if
     * that tag is not found. Throws an exception if that tag is something other than an array, or
     * if its contents cannot be cast to type.
     *
     * @param type The type of the array
     * @param json The JSONObject in which to look up the array
     * @param name The tag at which to look up the array
     * @param fallback The fallback array
     * @return An array of the provided type, or the fallback array.
     */
    @SuppressWarnings("unchecked")
    public <T> T[] array(Class<T> type, JSONObject json, String name, T[] fallback) {
        if (json.containsKey(name)) {
            Object obj = json.get(name);
            if (obj instanceof JSONArray) {
                JSONArray array = (JSONArray) obj;
                T[] returnArray = (T[]) Array.newInstance(type, array.size());
                for (int i = 0; i < array.size(); i++) {
                    Object value = array.get(i);
                    if (Number.class.isAssignableFrom(type) && value instanceof Number) {
                        if (type == Double.class) {
                            returnArray[i] = (T) Double.valueOf(((Number) value).doubleValue());
                            continue;
                        } else if (type == Integer.class) {
                            returnArray[i] = (T) Integer.valueOf(((Number) value).intValue());
                            continue;
                        }
                    }
                    returnArray[i] = type.cast(array.get(i));
                }
                return returnArray;
            } else {
                throw new MBFormatException(
                        "\""
                                + name
                                + "\" required as JSONArray of "
                                + type.getSimpleName()
                                + ": Unexpected "
                                + obj.getClass().getSimpleName());
            }
        }
        return fallback;
    }

