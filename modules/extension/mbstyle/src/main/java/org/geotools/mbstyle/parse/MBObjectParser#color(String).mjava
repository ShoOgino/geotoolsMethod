    /**
     * Handles literal color definitions supplied as a string, returning a {@link Literal}.
     *
     * <ul>
     *   <li>
     *       <pre>{"line-color": "yellow"</pre>
     *       named: a few have been put in pass test cases, prnding: plan to use {@link
     *       Hints#COLOR_DEFINITION} to allow for web colors.
     *   <li>
     *       <pre>{"line-color": "#ffff00"}</pre>
     *       hex: hex color conversion are supplied by {@link ColorConverterFactory}
     *   <li>
     *       <pre>{"line-color": "#ff0"}</pre>
     *       hex: we will need to special case this
     *   <li>
     *       <pre>{"line-color": "rgb(255, 255, 0)"}</pre>
     *       - we will need to special case this
     *   <li>
     *       <pre>{"line-color": "rgba(255, 255, 0, 1)"}</pre>
     *       - we will need to special case this
     *   <li>
     *       <pre>{"line-color": "hsl(100, 50%, 50%)"}</pre>
     *       - we will need to special case this
     *   <li>
     *       <pre>{"line-color": "hsla(100, 50%, 50%, 1)"}</pre>
     *       - we will need to special case this
     *   <li>
     * </ul>
     *
     * This method uses {@link Hints#COLOR_DEFINITION} "CSS" to support the use of web colors names.
     *
     * @param color name of color (CSS or "web" colors)
     * @return appropriate java color, or null if not available.
     */
    public Literal color(String color) {
        if (color == null) {
            return null;
        }
        return ff.literal(convertToColor(color));
    }

