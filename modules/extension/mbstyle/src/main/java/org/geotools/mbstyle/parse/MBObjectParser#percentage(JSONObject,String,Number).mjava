    /**
     * Convert json to Expression number between 0 and 1, or a function.
     *
     * @param json json representation
     * @param name The tag at which to look up the percentage
     * @param fallback default value if json is null
     * @return Percentage GeoTools Expression based on provided json, or literal if json was null.
     */
    public Expression percentage(JSONObject json, String name, Number fallback)
            throws MBFormatException {
        if (json == null) {
            return fallback == null ? null : ff.literal(fallback);
        }
        Object obj = json.get(name);

        if (obj == null) {
            return ff.literal(fallback);
        } else if (obj instanceof String) {
            String str = (String) obj;
            return ff.literal(str);
        } else if (obj instanceof Number) {
            Number number = (Number) obj;
            return ff.literal(number);
        } else if (obj instanceof Boolean) {
            throw new MBFormatException(
                    "\""
                            + name
                            + "\" percentage from boolean "
                            + obj
                            + " not supported, expected value between 0 and 1");
        } else if (obj instanceof JSONObject) {
            MBFunction function = new MBFunction(this, (JSONObject) obj);
            return function.numeric();
        } else if (obj instanceof JSONArray) {
            if (((JSONArray) obj).get(0) instanceof String) {
                return MBExpression.transformExpression((JSONArray) obj);
            } else {
                throw new MBFormatException(context + " number from JSONArray not supported");
            }
        } else {
            throw new IllegalArgumentException(
                    "json contents invalid, \""
                            + name
                            + "\" value limited to Number or JSONObject but was "
                            + obj.getClass().getSimpleName());
        }
    }

