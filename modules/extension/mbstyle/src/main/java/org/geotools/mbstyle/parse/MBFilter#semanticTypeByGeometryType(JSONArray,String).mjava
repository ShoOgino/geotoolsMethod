    private Set<SemanticType> semanticTypeByGeometryType(JSONArray array, String operator) {
        if ("in".equals(operator) || "==".equals(operator)) {
            Set<SemanticType> semanticTypes = new HashSet<>();
            List<?> types = array.subList(2, array.size());
            for (Object type : types) {
                if (type instanceof String) {
                    String jsonText = (String) type;
                    SemanticType semanticType = translateSemanticType(jsonText);
                    semanticTypes.add(semanticType);
                } else {
                    throw new MBFormatException(
                            "[\"in\",\"$type\", ...] limited to Point, LineString, Polygon: "
                                    + type);
                }
            }
            if ("==".equals(operator) && types.size() != 1) {
                throw new MBFormatException(
                        "[\"==\",\"$type\", ...] limited one geometry type, to test more than one use \"in\" operator.");
            }
            return semanticTypes;
        } else if ("!in".equals(operator) || "!=".equals(operator)) {
            Set<SemanticType> semanticTypes = new HashSet<>(Arrays.asList(SemanticType.values()));
            List<?> types = array.subList(2, array.size());
            for (Object type : types) {
                if (type instanceof String) {
                    String jsonText = (String) type;
                    SemanticType semanticType = translateSemanticType(jsonText);
                    semanticTypes.remove(semanticType);
                } else {
                    throw new MBFormatException(
                            "[\"!in\",\"$type\", ...] limited to Point, LineString, Polygon: "
                                    + type);
                }
            }
            if ("!=".equals(operator) && types.size() != 1) {
                throw new MBFormatException(
                        "[\"!=\",\"$type\", ...] limited one geometry type, to test more than one use \"!in\" operator.");
            }
            return semanticTypes;
        }
        return Collections.emptySet();
    }

