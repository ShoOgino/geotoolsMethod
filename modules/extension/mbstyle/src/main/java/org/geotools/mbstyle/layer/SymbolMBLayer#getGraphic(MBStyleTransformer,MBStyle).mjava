    /**
     * Get a graphic for this style's 'icon-image'. It will usually be an {@link ExternalGraphic} to
     * be handled by the {@link SpriteGraphicFactory}, but this method also supports GeoTools {@link
     * Mark}s as a special case.
     *
     * @param styleContext The containing style (used to get the sprite source)
     * @return A graphic based on this style's 'icon-image' property.
     */
    private Graphic getGraphic(MBStyleTransformer transformer, MBStyle styleContext) {
        // If the iconImage is a literal string (not a function), then
        // we need to support Mapbox token replacement.
        // Note: the URL is expected to be a CQL STRING ...
        Expression iconExpression = iconImage();
        if (iconExpression instanceof Literal) {
            iconExpression =
                    transformer.cqlExpressionFromTokens(
                            iconExpression.evaluate(null, String.class));
        }

        Expression graphicSize = null;
        GraphicalSymbol gs;

        // In the special case that the 'sprite' source designates the internal GeoTools marks, then
        // create a mark graphic.
        // Otherwise, create a sprite-based external graphic.
        String spriteSheetLocation =
                styleContext.getSprite() == null
                        ? ""
                        : styleContext.getSprite().trim().toLowerCase();
        Expression iconSize = iconSize();
        if (MARK_SHEET_ALIASES.contains(spriteSheetLocation)) {
            Fill f = sf.fill(null, iconColor(), null);
            Stroke s = sf.stroke(iconColor(), null, null, null, null, null, null);
            gs = sf.mark(iconExpression, f, s);
        } else {
            gs = transformer.createExternalGraphicForSprite(iconExpression, iconSize, styleContext);
        }

        if (gs instanceof Mark) {
            // The graphicSize is specified in pixels, so only set it on the Graphic if the
            // GraphicalSymbol is a mark.
            // If it is an ExternalGraphic from a sprite sheet, the absolute size of the icon is
            // unknown at this point.
            graphicSize = ff.multiply(ff.literal(MARK_ICON_DEFAULT_SIZE), iconSize);
        }

        Graphic g =
                sf.graphic(Arrays.asList(gs), iconOpacity(), graphicSize, iconRotate(), null, null);
        // From the specification:
        // Offset distance of icon from its anchor. Positive values indicate right and down, while
        // negative values indicate left and up. Each component is multiplied by the value of
        // icon-size to obtain the final offset in pixels
        Displacement d = iconOffsetDisplacement();
        d.setDisplacementY(
                ff.multiply(iconSize, ff.multiply(ff.literal(-1), d.getDisplacementY())));
        d.setDisplacementX(ff.multiply(iconSize, d.getDisplacementX()));
        g.setDisplacement(d);
        g.setAnchorPoint(iconAnchorPoint());

        return g;

        // ADD A VENDOR OPTION FOR THE POINT INDEPENDENT LOCATION!!
    }

