    /**
     * Maps a json value at 'tag' in the provided JSONObject to a {@link Displacement}.
     *
     * @param json The JSONObject in which to look up a displacement value
     * @param name The tag in the JSONObject
     * @param fallback The fallback displacement, if no value is found at that tag.
     * @return A displacement from the json
     */
    public Displacement displacement(JSONObject json, String name, Displacement fallback) {
        Object defn = json.get(name);
        if (defn == null) {
            return fallback;
        } else if (defn instanceof JSONArray) {
            JSONArray array = (JSONArray) defn;
            return sf.displacement(number(array, 0, 0), number(array, 1, 0));
        } else if (defn instanceof JSONObject) {
            // Function case
            MBFunction function = new MBFunction(this, (JSONObject) defn);
            if (!function.isArrayFunction()) {
                throw new MBFormatException(
                        "\""
                                + name
                                + "\": Exception parsing displacement from Mapbox function: function values must all be arrays with length 2.");
            }

            List<MBFunction> functionForEachDimension;
            try {
                functionForEachDimension = function.splitArrayFunction();
            } catch (ParseException pe) {
                throw new MBFormatException(
                        "\""
                                + name
                                + "\": Exception parsing displacement from Mapbox function: "
                                + pe.getMessage(),
                        pe);
            } catch (Exception e) {
                throw new MBFormatException(
                        "\""
                                + name
                                + "\": Exception parsing displacement from Mapbox function: "
                                + e.getMessage(),
                        e);
            }

            if (functionForEachDimension.size() != 2) {
                throw new MBFormatException(
                        "\""
                                + name
                                + "\": Exception parsing displacement from Mapbox function: function values must all be arrays with length 2.");
            }

            Expression xFn = functionForEachDimension.get(0).numeric();
            Expression yFn = functionForEachDimension.get(1).numeric();
            return sf.displacement(xFn, yFn);
        } else {
            throw new MBFormatException(
                    "\""
                            + name
                            + "\": Expected array or function, but was "
                            + defn.getClass().getSimpleName());
        }
    }

