    /**
     * Transform {@link FillExtrusionMBLayer} to GeoTools FeatureTypeStyle.
     *
     * @param styleContext The MBStyle to which this layer belongs, used as a context for things
     *     like resolving sprite and glyph names to full urls.
     */
    @Override
    public List<FeatureTypeStyle> transformInternal(MBStyle styleContext) {
        List<FeatureTypeStyle> fillExtrusion = new ArrayList<>();
        MBStyleTransformer transformer = new MBStyleTransformer(parse);

        // from fill pattern or fill color
        Fill fill;

        //        DisplacementImpl displacement = new DisplacementImpl();
        //
        //        displacement.setDisplacementX(getFillExtrusionBase().doubleValue());
        //        displacement.setDisplacementY(getFillExtrusionHeight().doubleValue());

        if (getFillExtrusionPattern() != null) {
            // Fill graphic (with external graphics)
            ExternalGraphic eg =
                    transformer.createExternalGraphicForSprite(
                            getFillExtrusionPattern(), styleContext);
            GraphicFill gf =
                    sf.graphicFill(
                            Arrays.asList(eg), fillExtrusionOpacity(), null, null, null, null);
            fill = sf.fill(gf, null, null);
        } else {
            fill = sf.fill(null, fillExtrusionColor(), fillExtrusionOpacity());
        }

        // Create 3 symbolizers one each for shadow, sides, and roof.
        PolygonSymbolizer shadowSymbolizer = sf.createPolygonSymbolizer();
        PolygonSymbolizer sidesSymbolizer = sf.createPolygonSymbolizer();
        PolygonSymbolizer roofSymbolizer = sf.createPolygonSymbolizer();

        shadowSymbolizer.setName("shadow");
        shadowSymbolizer.setGeometry(
                ff.function(
                        "offset",
                        ff.property((String) null),
                        ff.literal(0.005),
                        ff.literal(-0.005)));
        shadowSymbolizer.setDescription(sf.description(Text.text("fill"), null));
        shadowSymbolizer.setUnitOfMeasure(Units.PIXEL);
        shadowSymbolizer.setStroke(null);
        shadowSymbolizer.setFill(fill);
        shadowSymbolizer.setDisplacement(null);
        shadowSymbolizer.setPerpendicularOffset(ff.literal(0));

        sidesSymbolizer.setName("sides");
        sidesSymbolizer.setGeometry(
                ff.function(
                        "isometric",
                        ff.property((String) null),
                        ff.literal(fillExtrusionHeight())));
        sidesSymbolizer.setDescription(sf.description(Text.text("fill"), null));
        sidesSymbolizer.setUnitOfMeasure(Units.PIXEL);
        sidesSymbolizer.setStroke(null);
        sidesSymbolizer.setFill(fill);
        sidesSymbolizer.setDisplacement(null);
        sidesSymbolizer.setPerpendicularOffset(ff.literal(0));

        roofSymbolizer.setName("roof");
        roofSymbolizer.setGeometry(
                ff.function(
                        "offset",
                        ff.property((String) null),
                        ff.literal(fillExtrusionBase()),
                        ff.literal(fillExtrusionHeight())));
        roofSymbolizer.setDescription(sf.description(Text.text("fill"), null));
        roofSymbolizer.setUnitOfMeasure(Units.PIXEL);
        roofSymbolizer.setStroke(null);
        roofSymbolizer.setFill(fill);
        roofSymbolizer.setDisplacement(null);
        roofSymbolizer.setPerpendicularOffset(ff.literal(0));

        //        PolygonSymbolizer shadowSymbolizer = sf.polygonSymbolizer("shadow",
        //                ff.function("offset", ff.property("the_geom"), ff.literal(0.005),
        // ff.literal(-0.005)),
        //                sf.description(Text.text("fill"),null),
        //                Units.PIXEL,
        //                null,
        //                fill,
        //                null,
        //                ff.literal(0));

        //        PolygonSymbolizer sidesSymbolizer = sf.polygonSymbolizer("sides",
        //                ff.function("isometric", ff.property("the_geom"),
        // ff.literal(fillExtrusionHeight())),
        //                sf.description(Text.text("fill"),null),
        //                Units.PIXEL,
        //                null,
        //                fill,
        //                null,
        //                ff.literal(0));

        //        PolygonSymbolizer roofSymbolizer = sf.polygonSymbolizer("shadow",
        //                ff.function("offset", ff.property("the_geom"),
        // ff.literal(fillExtrusionBase()), ff.literal(fillExtrusionHeight())),
        //                sf.description(Text.text("fill"),null),
        //                Units.PIXEL,
        //                null,
        //                fill,
        //                null,
        //                ff.literal(0));

        MBFilter filter = getFilter();

        // Each symbolizer needs a rule.
        Rule shadowRule =
                sf.rule(
                        getId(),
                        null,
                        null,
                        0.0,
                        Double.POSITIVE_INFINITY,
                        Arrays.asList(shadowSymbolizer),
                        filter.filter());

        Rule sidesRule =
                sf.rule(
                        getId(),
                        null,
                        null,
                        0.0,
                        Double.POSITIVE_INFINITY,
                        Arrays.asList(sidesSymbolizer),
                        filter.filter());

        Rule roofRule =
                sf.rule(
                        getId(),
                        null,
                        null,
                        0.0,
                        Double.POSITIVE_INFINITY,
                        Arrays.asList(roofSymbolizer),
                        filter.filter());

        // Finally we create the FeatureTypeStyles for the extrusion.
        FeatureTypeStyle shadow =
                sf.featureTypeStyle(
                        getId(),
                        sf.description(
                                Text.text("MBStyle " + getId()),
                                Text.text("Generated for " + getSourceLayer())),
                        null, // (unused)
                        Collections.emptySet(),
                        filter.semanticTypeIdentifiers(),
                        Arrays.asList(shadowRule));

        FeatureTypeStyle sides =
                sf.featureTypeStyle(
                        getId(),
                        sf.description(
                                Text.text("MBStyle " + getId()),
                                Text.text("Generated for " + getSourceLayer())),
                        null, // (unused)
                        Collections.emptySet(),
                        filter.semanticTypeIdentifiers(),
                        Arrays.asList(sidesRule));

        FeatureTypeStyle roof =
                sf.featureTypeStyle(
                        getId(),
                        sf.description(
                                Text.text("MBStyle " + getId()),
                                Text.text("Generated for " + getSourceLayer())),
                        null, // (unused)
                        Collections.emptySet(),
                        filter.semanticTypeIdentifiers(),
                        Arrays.asList(roofRule));

        fillExtrusion.add(shadow);
        fillExtrusion.add(sides);
        fillExtrusion.add(roof);

        return fillExtrusion;
    }

