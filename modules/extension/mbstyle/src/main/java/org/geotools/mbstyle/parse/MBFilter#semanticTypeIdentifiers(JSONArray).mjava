    /**
     * Utility method to convert json to set of {@link SemanticType}.
     *
     * <p>This method is called recursively to handle <code>all</code> and <code>any</code> filter
     * operators.
     *
     * @param array JSON array defining filter
     * @return SemanticTypes from provided json, may be nested
     */
    Set<SemanticType> semanticTypeIdentifiers(JSONArray array) {
        if (array == null || array.isEmpty()) {
            throw new MBFormatException("MBFilter expected");
        }
        String operator = parse.get(array, 0);
        if (("==".equals(operator)
                        || "!=".equals(operator)
                        || "in".equals(operator)
                        || "!in".equals(operator))
                && parse.isString(array, 1)
                && "$type".equals(parse.get(array, 1))) {
            return semanticTypeByGeometryType(array, operator);
        }
        if ("all".equals(operator)) {
            return semanticTypeAll(array);
        } else if ("any".equals(operator)) {
            return semanticTypeAny(array);
        } else if ("none".equals(operator)) {
            return semanticTypeNone(array);
        }
        return Collections.emptySet();
    }

