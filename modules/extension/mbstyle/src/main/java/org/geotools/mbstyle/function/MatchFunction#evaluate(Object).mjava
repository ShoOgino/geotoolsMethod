    /** @see org.geotools.filter.FunctionExpressionImpl#equals(java.lang.Object) */
    @Override
    public Object evaluate(Object feature) {
        // get the first expression. It's the InputType to match.
        final Object inputType = params.get(0).evaluate(feature);
        // if it's not a Number or String, it's not formatted correctly
        if (inputType == null
                || (!Number.class.isAssignableFrom(inputType.getClass())
                        && !String.class.isAssignableFrom(inputType.getClass()))) {
            throw new MBFormatException(
                    String.format(
                            "MBDecision \"match\" requires a number or string expression for input type, found %s",
                            inputType != null ? inputType.getClass().getName() : null));
        }
        int labelIndex = 1;
        int outputIndex = 2;
        while (outputIndex < params.size()) {
            // evaluate the label
            Object label = params.get(labelIndex).evaluate(feature);
            if (label != null) {
                // if the label is a Number or String, compare it to the InputType
                if (Number.class.isAssignableFrom(label.getClass())
                        || String.class.isAssignableFrom(label.getClass())
                                && MBFunctionUtil.argsEqual(label, inputType)) {
                    // found a matching label
                    return params.get(outputIndex).evaluate(feature);
                } else if (JSONArray.class.isAssignableFrom(label.getClass())) {
                    // potential label is an array. Loop through the values tosee if we have a match
                    final JSONArray jsonArray = (JSONArray) label;
                    if (jsonArray.contains(inputType)) {
                        // found a match
                        return params.get(outputIndex).evaluate(feature);
                    }
                }
            }
            // no match yet, increment indecies
            labelIndex += 2;
            outputIndex += 2;
        }
        // no label match, return default, if provided
        if (labelIndex < params.size()) {
            // we have a default
            return params.get(labelIndex).evaluate(feature);
        }
        // no label match and no default
        return null;
    }

