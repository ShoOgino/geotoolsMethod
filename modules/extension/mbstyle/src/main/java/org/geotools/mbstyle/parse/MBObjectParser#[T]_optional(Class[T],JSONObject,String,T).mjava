    /**
     * Optional lookup, will return fallback if not available.
     *
     * @param <T> Class to return
     * @param type Type to lookup
     * @param json The JSONObject in which to lookup the value
     * @param tag The tag at which to lookupthe value in the JSONObject
     * @param fallback The fallback value to use if the JSONObject is null or does not contain the
     *     provided tag
     * @return value for the provided tag, or fallback if not available
     * @throws MBFormatException If value is found and is not the expected type
     */
    public <T> T optional(Class<T> type, JSONObject json, String tag, T fallback) {
        if (json == null) {
            throw new IllegalArgumentException("json required");
        } else if (tag == null) {
            throw new IllegalArgumentException("tag required for json access");
        } else if (!json.containsKey(tag)) {
            return fallback;
        } else {
            Object value = json.get(tag);
            if (!json.containsKey(tag) || json.get(tag) == null) {
                return fallback;
            } else if (Number.class.isAssignableFrom(type)) {
                T number = Converters.convert(value, type);
                if (number == null) {
                    throw new MBFormatException(
                            context.getSimpleName()
                                    + " optional \""
                                    + tag
                                    + "\" expects "
                                    + type.getSimpleName()
                                    + " value");
                } else {
                    return type.cast(number);
                }
            } else if (type.isInstance(value)) {
                return type.cast(value);
            } else {
                throw new MBFormatException(
                        context.getSimpleName()
                                + " optional \""
                                + tag
                                + "\" expects "
                                + type.getSimpleName()
                                + " value");
            }
        }
    }

