    /**
     * Convert the provided object to a string Expression (or function), with a fallback value if
     * the object is null.
     *
     * @param context The json context of the object, used for error messages.
     * @param obj The object to convert
     * @param fallback The fallback value, used when the provided object is null.
     * @return A string GeoTools Expression for the provided json object
     */
    private Expression string(String context, Object obj, String fallback) {
        if (obj == null) {
            return fallback == null ? null : ff.literal(fallback);
        } else if (obj instanceof String) {
            String str = (String) obj;
            return ff.literal(str);
        } else if (obj instanceof Number) {
            Number number = (Number) obj;
            return ff.literal(number.toString());
        } else if (obj instanceof Boolean) {
            Boolean bool = (Boolean) obj;
            return ff.literal(bool.toString());
        } else if (obj instanceof JSONObject) {
            MBFunction function = new MBFunction(this, (JSONObject) obj);
            return function.function(String.class);
        } else if (obj instanceof JSONArray) {
            if (((JSONArray) obj).get(0) instanceof String) {
                return MBExpression.transformExpression((JSONArray) obj);
            } else {
                throw new MBFormatException(context + " string from JSONArray not supported");
            }
        } else {
            throw new IllegalArgumentException(
                    "json contents invalid, "
                            + context
                            + " value limited to String, Number, Boolean or JSONObject but was "
                            + obj.getClass().getSimpleName());
        }
    }

