    /**
     * Access layers matching provided source.
     *
     * @param source Data source
     * @return list of layers matching provided source
     */
    public List<MBLayer> layers(String source) throws MBFormatException {
        JSONArray layers = parse.getJSONArray(json, "layers");
        List<MBLayer> layersList = new ArrayList<>();
        for (Object obj : layers) {
            if (obj instanceof JSONObject) {
                JSONObject jsonObject = (JSONObject) obj;
                if (jsonObject.containsKey("ref")) {
                    String refLayer = jsonObject.get("ref").toString();
                    JSONObject refObject = referenceLayer(layers, refLayer);

                    if (refObject.size() > 0) {
                        applyReferenceObject(jsonObject, refObject);

                        MBLayer layer = MBLayer.create(jsonObject);
                        if (source.equals(layer.getSource())) {
                            layersList.add(layer);
                        }
                    }
                } else {
                    MBLayer layer = MBLayer.create(jsonObject);
                    if (source.equals(layer.getSource())) {
                        layersList.add(layer);
                    }
                }
            } else {
                throw new MBFormatException("Unexpected layer definition " + obj);
            }
        }
        return layersList;
    }

