    /**
     * Takes the name of an icon, and an {@link MBStyle} as a context, and returns an External
     * Graphic referencing the full URL of the image for consumption by the {@link
     * SpriteGraphicFactory}. (The format of the image will be {@link SpriteGraphicFactory#FORMAT}).
     *
     * @see org.geotools.mbstyle.sprite.SpriteGraphicFactory
     * @param iconName The name of the icon inside the spritesheet.
     * @param iconSize The size (scale multiplier) to apply to the icon. (Nullable).
     * @param styleContext The style context in which to resolve the icon name to the full sprite
     *     URL (for consumption by the {@link SpriteGraphicFactory}).
     * @return An external graphic with the full URL of the mage for the {@link
     *     SpriteGraphicFactory}.
     */
    public ExternalGraphic createExternalGraphicForSprite(
            Expression iconName, Expression iconSize, MBStyle styleContext) {
        String spriteUrl;
        String iconNameCql = ECQL.toCQL(ff.function("strURLEncode", iconName));

        String iconSizeCql = null;
        if (iconSize != null) {
            iconSizeCql = ECQL.toCQL(ff.function("strURLEncode", iconSize));
        }

        /*
         * Note: The provided iconName {@link Expression} will be embedded in the {@link ExternalGraphic}'s URL as a CQL string, in order to support
         * Mapbox functions. The {@link SLDStyleFactory} will transform it back into a proper {@link Expression} before sending it to the {@link
         * SpriteGraphicFactory}.
         */

        if (styleContext != null && styleContext.getSprite() != null) {
            String spriteBase = styleContext.getSprite().trim();

            String fragment;
            if (iconSizeCql != null) {
                fragment = "icon=${" + iconNameCql + "}&size=${" + iconSizeCql + "}";
            } else {
                fragment = "icon=${" + iconNameCql + "}";
            }

            spriteUrl = spriteBase + "#" + fragment;
        } else {
            spriteUrl = iconNameCql;
        }

        return sf.createExternalGraphic(spriteUrl, SpriteGraphicFactory.FORMAT);
    }

