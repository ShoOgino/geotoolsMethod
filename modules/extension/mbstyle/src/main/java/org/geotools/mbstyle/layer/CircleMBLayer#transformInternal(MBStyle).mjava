    /**
     * Transform {@link CircleMBLayer} to GeoTools FeatureTypeStyle.
     *
     * @param styleContext The MBStyle to which this layer belongs, used as a context for things
     *     like resolving sprite and glyph names to full urls.
     * @return FeatureTypeStyle
     */
    @Override
    public List<FeatureTypeStyle> transformInternal(MBStyle styleContext) {
        // default linecap because StrokeImpl.getOpacity has a bug. If lineCap == null, it returns a
        // default opacity.
        Stroke s =
                sf.stroke(
                        circleStrokeColor(),
                        circleStrokeOpacity(),
                        circleStrokeWidth(),
                        null,
                        Stroke.DEFAULT.getLineCap(),
                        null,
                        null);
        Fill f = sf.fill(null, circleColor(), circleOpacity());
        Mark m = sf.mark(ff.literal("circle"), f, s);

        Graphic gr =
                sf.graphic(
                        Arrays.asList(m),
                        null,
                        ff.multiply(ff.literal(2), circleRadius()),
                        null,
                        null,
                        circleTranslateDisplacement());
        gr.graphicalSymbols().clear();
        gr.graphicalSymbols().add(m);

        PointSymbolizer ps =
                sf.pointSymbolizer(
                        getId(),
                        ff.property((String) null),
                        sf.description(
                                Text.text("MBStyle " + getId()),
                                Text.text("Generated for " + getSourceLayer())),
                        Units.PIXEL,
                        gr);

        MBFilter filter = getFilter();

        List<org.opengis.style.Rule> rules = new ArrayList<>();
        Rule rule =
                sf.rule(
                        getId(),
                        null,
                        null,
                        0.0,
                        Double.POSITIVE_INFINITY,
                        Arrays.asList(ps),
                        filter.filter());

        rules.add(rule);

        return Collections.singletonList(
                sf.featureTypeStyle(
                        getId(),
                        sf.description(
                                Text.text("MBStyle " + getId()),
                                Text.text("Generated for " + getSourceLayer())),
                        null,
                        Collections.emptySet(),
                        filter.semanticTypeIdentifiers(),
                        rules));
    }

