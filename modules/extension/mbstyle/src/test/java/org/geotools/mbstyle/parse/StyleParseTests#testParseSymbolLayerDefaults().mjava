    /** Verify that symbol layer properties have correct defaults. */
    @Test
    public void testParseSymbolLayerDefaults() throws IOException, ParseException {
        JSONObject jsonObject = MapboxTestUtils.parseTestStyle("symbolStyleTestDefaults.json");
        MBStyle s = new MBStyle(jsonObject);
        SymbolMBLayer l = getSingleLayerOfType(s, SymbolMBLayer.class);
        assertEquals("symbol", l.getType());
        assertEquals("testid", l.getId());
        assertEquals("testsource", l.getSource());

        assertEquals(SymbolPlacement.POINT, l.getSymbolPlacement());
        assertEquals(250.0, l.getSymbolSpacing().doubleValue(), .00001);
        assertEquals(false, l.getSymbolAvoidEdges());
        assertEquals(false, l.getIconAllowOverlap());
        assertEquals(false, l.getIconIgnorePlacement());
        assertEquals(false, l.getIconOptional());
        assertEquals(Alignment.AUTO, l.getIconRotationAlignment());
        assertEquals(1.0, l.getIconSize().doubleValue(), .00001);
        assertEquals(IconTextFit.NONE, l.getIconTextFit());
        // assertEquals( l.getIconTextFitPadding());
        assertNull(l.getIconImage());
        assertEquals(0.0, l.getIconRotate().doubleValue(), .00001);
        assertEquals(2.0, l.getIconPadding().doubleValue(), .00001);
        assertEquals(false, l.getIconKeepUpright());

        assertEquals(2, l.getIconOffset().length);
        assertEquals(0, l.getIconOffset()[0], .00001);
        assertEquals(0, l.getIconOffset()[1], .00001);

        assertEquals(Alignment.AUTO, l.getTextPitchAlignment());
        assertEquals(Alignment.AUTO, l.getTextRotationAlignment());
        assertEquals("", l.getTextField());
        assertEquals(
                Arrays.asList("Open Sans Regular", "Arial Unicode MS Regular"), l.getTextFont());
        assertEquals(16.0, l.getTextSize().doubleValue(), .00001);
        assertEquals(10.0, l.getTextMaxWidth().doubleValue(), .00001);
        assertEquals(1.2, l.getTextLineHeight().doubleValue(), .00001);
        assertEquals(0.0, l.getTextLetterSpacing().doubleValue(), .00001);
        assertEquals(Justification.CENTER, l.getTextJustify());
        assertEquals(TextAnchor.CENTER, l.getTextAnchor());
        assertEquals(45.0, l.getTextMaxAngle().doubleValue(), .00001);
        assertEquals(2.0, l.getTextPadding().doubleValue(), .00001);
        assertEquals(true, l.getTextKeepUpright());
        assertEquals(TextTransform.NONE, l.getTextTransform());

        assertEquals(2, l.getTextOffset().length);
        assertEquals(0, l.getTextOffset()[0], .00001);
        assertEquals(0, l.getTextOffset()[1], .00001);

        assertEquals(false, l.getTextAllowOverlap());
        assertEquals(false, l.getTextIgnorePlacement());
        assertEquals(false, l.getTextOptional());
        assertEquals(1.0, l.getIconOpacity().doubleValue(), .00001);
        assertEquals(new Color(0x000000), l.getIconColor());
        assertEquals(new Color(0, 0, 0, 0), l.getIconHaloColor());
        assertEquals(0, l.getIconHaloWidth().doubleValue(), .00001);
        assertEquals(0, l.getIconHaloBlur().doubleValue(), .00001);

        assertEquals(2, l.getIconTranslate().length);
        assertEquals(0, l.getIconTranslate()[0], .00001);
        assertEquals(0, l.getIconTranslate()[1], .00001);

        assertEquals(TranslateAnchor.MAP, l.getIconTranslateAnchor());
        assertEquals(1, l.getTextOpacity().doubleValue(), .00001);
        assertEquals(Color.black, l.getTextColor());
        assertEquals(new Color(0, 0, 0, 0), l.getTextHaloColor());
        assertEquals(0.0, l.getTextHaloWidth().doubleValue(), .00001);
        assertEquals(0.0, l.getTextHaloBlur().doubleValue(), .00001);
        assertEquals(TranslateAnchor.MAP, l.getTextTranslateAnchor());

        assertEquals(2, l.getTextTranslate().length);
        assertEquals(0, l.getTextTranslate()[0], .00001);
        assertEquals(0, l.getTextTranslate()[1], .00001);
    }

