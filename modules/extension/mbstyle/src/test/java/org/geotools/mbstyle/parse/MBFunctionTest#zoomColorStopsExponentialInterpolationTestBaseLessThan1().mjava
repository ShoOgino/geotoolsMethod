    /**
     * Tests that a MapBox exponential zoom function (outputting a color) correctly interpolates
     * color values for zoom levels between stops, when the exponential base is &lt; 1.
     */
    @Test
    public void zoomColorStopsExponentialInterpolationTestBaseLessThan1() throws Exception {
        SimpleFeatureType SAMPLE =
                DataUtilities.createType("SAMPLE", "id:\"\",temperature:0.0,location=4326");
        SimpleFeature feature = DataUtilities.createFeature(SAMPLE, "measure1=A|50.0|POINT(0,0)");

        // Set scale denominator to the equivalent of zoomLevel 9
        String scaleDenomForZoom9 = "545978.773389";
        EnvFunction.setGlobalValue("wms_scale_denominator", scaleDenomForZoom9);

        // Verify environment has expected scale denominator (and zoom level)
        assertEquals(
                545978.773389,
                ff.function("env", ff.literal("wms_scale_denominator"))
                        .evaluate(null, Number.class)
                        .doubleValue(),
                .00001);
        verifyEnvironmentZoomLevel(9);

        // Create a Mapbox Function (used to have a base of 0.1, but that puts it so close
        // to the lime color that it becomes lime due to integer rounding)
        String jsonStr =
                "{'type':'exponential', 'base': 0.5, 'stops':[[0,'blue'],[6,'red'],[12, 'lime']]}";
        JSONObject json = MapboxTestUtils.object(jsonStr);
        MBFunction function = new MBFunction(json);

        // Assert it is an exponential function with the correct base
        assertEquals(
                "Is a zoom function",
                EnumSet.of(MBFunction.FunctionCategory.ZOOM),
                function.category());
        assertEquals(MBFunction.FunctionType.EXPONENTIAL, function.getType());
        assertEquals(0.5, function.getBase().doubleValue(), .00001);

        Function fn = (Function) function.color();
        Color result = fn.evaluate(feature, Color.class);

        assertTrue(
                "Color has no red, but should be interpolated mix of red and green",
                result.getRed() > 0);
        assertTrue(
                "Color has full green, but should be interpolated mix of red and green",
                result.getGreen() < 255);

        // We are interpolating at the halfway point, so the linear interpolation would have been
        // (128, 128, 0).
        assertTrue(
                "Exponential interpolation base is < 1, so the interpolated green value should lead the linear interpolation.",
                result.getGreen() > 128);
        assertTrue(
                "Exponential interpolation base is < 1, so the interpolated red value should lead the linear interpolation.",
                result.getRed() < 128);
    }

