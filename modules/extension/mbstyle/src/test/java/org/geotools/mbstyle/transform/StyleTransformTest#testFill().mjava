    /** Test parsing a Mapbox fill layer */
    @Test
    public void testFill() throws IOException, ParseException {

        JSONObject jsonObject = parseTestStyle("fillStyleTest.json");

        // Parse to MBStyle
        MBStyle mbStyle = new MBStyle(jsonObject);
        List<MBLayer> layers = mbStyle.layers("geoserver-states");

        assertEquals(1, layers.size());

        // Find the MBFillLayer and assert it contains the correct FeatureTypeStyle.
        assertTrue(layers.get(0) instanceof FillMBLayer);
        FillMBLayer mbFill = (FillMBLayer) layers.get(0);
        List<FeatureTypeStyle> fts = mbFill.transform(mbStyle);

        PolygonSymbolizer psym = SLD.polySymbolizer(fts.get(0));

        Expression expr = psym.getFill().getColor();
        assertNotNull("fillColor set", expr);
        assertEquals(Color.decode("#FF595E"), expr.evaluate(null, Color.class));
        assertEquals(Double.valueOf(.84), psym.getFill().getOpacity().evaluate(null, Double.class));

        Expression colorStroke = psym.getStroke().getColor();
        assertNotNull("stroke color set", colorStroke);
        assertEquals(Color.decode("#1982C4"), colorStroke.evaluate(null, Color.class));

        assertNotNull("displacement not null", psym.getDisplacement());
        assertNotNull("displacementX not null", psym.getDisplacement().getDisplacementX());
        assertNotNull("displacementY not null", psym.getDisplacement().getDisplacementY());
        assertEquals(
                Integer.valueOf(20),
                psym.getDisplacement().getDisplacementX().evaluate(null, Integer.class));
        assertEquals(
                Integer.valueOf(20),
                psym.getDisplacement().getDisplacementY().evaluate(null, Integer.class));
    }

