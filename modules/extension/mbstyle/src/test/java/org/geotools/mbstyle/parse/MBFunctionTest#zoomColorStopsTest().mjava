    /**
     * Tests that a MapBox zoom function (outputting a color) correctly creates a GeoTools
     * interpolation function.
     */
    @Test
    public void zoomColorStopsTest() throws Exception {
        SimpleFeatureType SAMPLE =
                DataUtilities.createType("SAMPLE", "id:\"\",temperature:0.0,location=4326");
        SimpleFeature feature = DataUtilities.createFeature(SAMPLE, "measure1=A|50.0|POINT(0,0)");

        EnvFunction.setGlobalValue("wms_scale_denominator", "1066.364792");

        JSONObject json =
                MapboxTestUtils.object(
                        "{'type':'exponential','stops':[[0,'blue'],[6,'red'],[12, 'lime']]}");
        MBFunction function = new MBFunction(json);

        assertEquals(
                "Is a zoom function",
                EnumSet.of(MBFunction.FunctionCategory.ZOOM),
                function.category());
        assertEquals(MBFunction.FunctionType.EXPONENTIAL, function.getType());
        Function fn = (Function) function.color();
        assertNotNull(fn);
        assertEquals("Interpolate", fn.getName());

        Expression zoomLevel = fn.getParameters().get(0);
        Number n = zoomLevel.evaluate(null, Number.class);
        // This should be zoom level 17
        assertEquals(18.0, n.doubleValue(), .000001);

        Literal stop1 = (Literal) fn.getParameters().get(1);
        assertEquals(Integer.valueOf(0), stop1.evaluate(null, Integer.class));

        Literal color1 = (Literal) fn.getParameters().get(2);
        assertEquals(Color.BLUE, color1.evaluate(null, Color.class));

        Literal stop2 = (Literal) fn.getParameters().get(3);
        assertEquals(Integer.valueOf(6), stop2.evaluate(null, Integer.class));

        Literal color2 = (Literal) fn.getParameters().get(4);
        assertEquals(Color.RED, color2.evaluate(null, Color.class));

        Literal stop3 = (Literal) fn.getParameters().get(5);
        assertEquals(Integer.valueOf(12), stop3.evaluate(null, Integer.class));

        Literal color3 = (Literal) fn.getParameters().get(6);
        assertEquals(Color.GREEN, color3.evaluate(null, Color.class));

        // We are taking care to check that the function method has been supplied
        Literal method = (Literal) fn.getParameters().get(7);
        assertEquals("color", method.evaluate(null, String.class));

        Color result = fn.evaluate(feature, Color.class);
        assertEquals(new Color(0, 255, 0), result);
    }

