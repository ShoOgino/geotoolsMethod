    /** Test an {@link MBFunction} (type = interval) that returns a numeric value. */
    @Test
    public void numericIntervalFunctionTest() throws Exception {

        String jsonStr =
                "{'property': 'temperature', 'default':0, 'type': 'interval','stops': [[0, 2],[100, 4],[1000, 6]]}";
        MBFunction function = new MBFunction(MapboxTestUtils.object(jsonStr));
        assertThat(function, categories(containsInAnyOrder(MBFunction.FunctionCategory.PROPERTY)));
        assertThat(function, hasProperty("type", is(MBFunction.FunctionType.INTERVAL)));

        Expression outputExpression = function.numeric();

        // Test each interval
        final SimpleFeatureType SAMPLE =
                DataUtilities.createType("SAMPLE", "id:\"\",temperature,location=4326");
        java.util.function.Function<Long, SimpleFeature> features =
                (temp) -> DataUtilities.createFeature(SAMPLE, "measure1=A|" + temp + "|POINT(0,0)");

        // Bellow the first stop is undefined (return default value)
        assertThat(outputExpression, evaluatesTo(features.apply(-1L), Number.class, equalInt(0)));

        assertThat(outputExpression, evaluatesTo(features.apply(0L), Number.class, equalInt(2)));
        assertThat(outputExpression, evaluatesTo(features.apply(20L), Number.class, equalInt(2)));

        assertThat(outputExpression, evaluatesTo(features.apply(100L), Number.class, equalInt(4)));
        assertThat(outputExpression, evaluatesTo(features.apply(200L), Number.class, equalInt(4)));

        assertThat(outputExpression, evaluatesTo(features.apply(1000L), Number.class, equalInt(6)));
        assertThat(outputExpression, evaluatesTo(features.apply(2000L), Number.class, equalInt(6)));
    }

