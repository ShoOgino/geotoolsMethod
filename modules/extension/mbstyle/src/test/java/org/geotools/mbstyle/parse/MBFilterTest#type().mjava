    @Test
    public void type() throws ParseException {

        // common $type examples
        JSONArray json = array("['in', '$type','LineString']");
        MBFilter mbfilter = new MBFilter(json);
        Set<SemanticType> types = mbfilter.semanticTypeIdentifiers();
        assertTrue(types.contains(SemanticType.LINE) && types.size() == 1);
        Filter filter = mbfilter.filter();
        assertEquals("dimension(geometry()) IN (1)", ECQL.toCQL(filter));

        json = array("['in', '$type','Polygon']");
        mbfilter = new MBFilter(json);
        types = mbfilter.semanticTypeIdentifiers();
        assertTrue(types.contains(SemanticType.POLYGON) && types.size() == 1);
        filter = mbfilter.filter();
        assertEquals(
                "(dimension(geometry()) = 2 AND NOT (isCoverage() = true))", ECQL.toCQL(filter));

        json = array("['==', '$type','Point']");
        mbfilter = new MBFilter(json);
        types = mbfilter.semanticTypeIdentifiers();
        assertTrue(types.contains(SemanticType.POINT) && types.size() == 1);
        filter = mbfilter.filter();
        assertEquals("dimension(geometry()) = 0", ECQL.toCQL(filter));

        json = array("['in', '$type','Point', 'LineString']");
        mbfilter = new MBFilter(json, null);
        types = mbfilter.semanticTypeIdentifiers();
        assertTrue(
                types.contains(SemanticType.POINT)
                        && types.contains(SemanticType.LINE)
                        && types.size() == 2);
        filter = mbfilter.filter();
        assertEquals("dimension(geometry()) IN (0,1)", ECQL.toCQL(filter));
        try {
            json = array("['==', '$type','Point', 'LineString']");
            mbfilter = new MBFilter(json, null);
            types = mbfilter.semanticTypeIdentifiers();
            fail("expected format exception due to '==' having too many arguments above");
        } catch (MBFormatException expected) {
        }

        // not
        json = array("['!in', '$type','Point', 'LineString']");
        mbfilter = new MBFilter(json, null);
        types = mbfilter.semanticTypeIdentifiers();
        assertTrue(types.contains(SemanticType.POLYGON) && !types.contains(SemanticType.LINE));
        filter = mbfilter.filter();
        assertEquals("NOT (dimension(geometry()) IN (0,1))", ECQL.toCQL(filter));

        // test default handling
        json = array("['==', 'key', 'value']");
        mbfilter = new MBFilter(json);
        types = mbfilter.semanticTypeIdentifiers();
        assertTrue(types.isEmpty());

        json = array("['!=', 'key', 'value']");
        mbfilter = new MBFilter(json, null, SemanticType.LINE);
        types = mbfilter.semanticTypeIdentifiers();
        assertTrue(types.contains(SemanticType.LINE) && types.size() == 1);
    }

