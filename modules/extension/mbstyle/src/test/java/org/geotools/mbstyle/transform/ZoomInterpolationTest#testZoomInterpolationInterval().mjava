    // Zoom function, Interval Number -> Number, Number -> String
    @Test
    public void testZoomInterpolationInterval() throws ParseException {
        // Define an interval zoom function
        String functionJson = "{'type':'interval', 'stops':[[0,0],[6,256],[12,1024]]}";
        JSONObject json = MapboxTestUtils.object(functionJson);
        MBFunction function = new MBFunction(json);
        Expression fn = function.numeric();

        // Set the zoom level to be between the lower stops
        // Set scale denominator to the equivalent of zoomLevel ~ 4.25
        EnvFunction.setGlobalValue("wms_scale_denominator", "29383141.974265");

        // Assert output is interpolated
        Double d = fn.evaluate(null, Number.class).doubleValue();
        double expectedVal = 0;
        assertEquals("Interval function", expectedVal, d, .000001);

        // Set the zoom level to be between the higher stops
        // Set scale denominator to the equivalent of zoomLevel ~ 11.25
        EnvFunction.setGlobalValue("wms_scale_denominator", "229555.796674");

        d = fn.evaluate(null, Number.class).doubleValue();
        expectedVal = 256;
        assertEquals("Interval function", expectedVal, d, .000001);

        // Set the zoom level to be above the highest stop
        // Set scale denominator to the equivalent of zoomLevel ~ 15.5
        EnvFunction.setGlobalValue("wms_scale_denominator", "12064.540408");

        d = fn.evaluate(null, Number.class).doubleValue();
        expectedVal = 1024;
        assertEquals("Interval function", expectedVal, d, .000001);
    }

