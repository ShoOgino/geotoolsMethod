    @Test
    public void exponentialFunctionNumeric() throws Exception {
        //
        // base 1.0 works as a simple interpolate
        //
        Function expr = (Function) ECQL.toExpression("Exponential( 0, 1.0, 0,0, 10,100)");
        assertEquals(0, (int) expr.evaluate(null, Integer.class));

        expr = (Function) ECQL.toExpression("Exponential( 5, 1.0, 0,0, 10,100)");
        assertEquals(50, (int) expr.evaluate(null, Integer.class));

        expr = (Function) ECQL.toExpression("Exponential(10, 1.0, 0,0, 10,100)");
        assertEquals(100, (int) expr.evaluate(null, Integer.class));

        //
        // base 0.7 increases curve
        //
        expr = (Function) ECQL.toExpression("Exponential( 0, 0.7, 0,0, 10,100)");
        assertEquals(0, (int) expr.evaluate(null, Integer.class));

        expr = (Function) ECQL.toExpression("Exponential( 5, 0.7, 0,0, 10,100)");
        assertTrue(50 < (int) expr.evaluate(null, Integer.class));

        expr = (Function) ECQL.toExpression("Exponential(10, 0.7, 0,0, 10,100)");
        assertEquals(100, (int) expr.evaluate(null, Integer.class));

        //
        // base 1.4 decreases curve
        //
        expr = (Function) ECQL.toExpression("Exponential( 0, 1.4, 0,0, 10,100)");
        assertEquals(0, (int) expr.evaluate(null, Integer.class));

        expr = (Function) ECQL.toExpression("Exponential( 5, 1.4, 0,0, 10,100)");
        assertTrue(50 > (int) expr.evaluate(null, Integer.class));

        expr = (Function) ECQL.toExpression("Exponential(10, 1.5, 0,0, 10,100)");
        assertEquals(100, (int) expr.evaluate(null, Integer.class));
    }

