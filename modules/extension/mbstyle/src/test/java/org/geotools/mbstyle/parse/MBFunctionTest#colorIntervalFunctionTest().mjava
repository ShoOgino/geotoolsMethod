    /** Test an {@link MBFunction} (type = interval) that returns a color value. */
    @Test
    public void colorIntervalFunctionTest() throws Exception {
        SimpleFeatureType SAMPLE =
                DataUtilities.createType("SAMPLE", "id:\"\",numbervalue,location=4326");
        java.util.function.Function<Long, SimpleFeature> features =
                (value) ->
                        DataUtilities.createFeature(SAMPLE, "measure1=A|" + value + "|POINT(0,0)");

        String jsonStr =
                "{'property': 'numbervalue', 'type': 'interval', 'default': '#0F0F0F', 'stops': [[-1000, '#000000'], [-30, '#00FF00'], [0, '#0000FF'], [100, '#FFFFFF']]}";
        MBFunction function = new MBFunction(MapboxTestUtils.object(jsonStr));
        assertEquals(
                "Function category is \"property\"",
                EnumSet.of(MBFunction.FunctionCategory.PROPERTY),
                function.category());
        assertEquals(
                "Function type is \"interval\"",
                MBFunction.FunctionType.INTERVAL,
                function.getType());

        Expression outputExpression = function.color();

        // Before the first stop is undefined (return default value)
        assertThat(
                outputExpression,
                evaluatesTo(features.apply(-10000L), Color.class, equalTo(new Color(0x0F0F0F))));

        // Test each interval
        assertThat(
                outputExpression,
                evaluatesTo(features.apply(-900L), Color.class, equalTo(Color.BLACK)));
        assertThat(
                outputExpression,
                evaluatesTo(features.apply(-20L), Color.class, equalTo(Color.GREEN)));
        assertThat(
                outputExpression,
                evaluatesTo(features.apply(10L), Color.class, equalTo(Color.BLUE)));
        assertThat(
                outputExpression,
                evaluatesTo(features.apply(500L), Color.class, equalTo(Color.WHITE)));

        // Test at stops
        assertThat(
                outputExpression,
                evaluatesTo(features.apply(-1000L), Color.class, equalTo(Color.BLACK)));
        assertThat(
                outputExpression,
                evaluatesTo(features.apply(-30L), Color.class, equalTo(Color.GREEN)));
        assertThat(
                outputExpression,
                evaluatesTo(features.apply(0L), Color.class, equalTo(Color.BLUE)));
        assertThat(
                outputExpression,
                evaluatesTo(features.apply(100L), Color.class, equalTo(Color.WHITE)));
    }

