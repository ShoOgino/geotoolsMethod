    /** Test filtering attributes on nested features. */
    @Test
    public void testFilters() throws Exception {
        // make sure filter query can be made on MappedFeature based on GU properties
        //
        // <ogc:Filter>
        // <ogc:PropertyIsLike>
        // <ogc:PropertyName>
        // gsml:specification/gsml:GeologicUnit/gml:description
        // </ogc:PropertyName>
        // <ogc:Literal>Olivine basalt, tuff, microgabbro, minor sedimentary rocks</ogc:Literal>
        // </ogc:PropertyIsLike>
        // </ogc:Filter>

        Expression property =
                ff.property("gsml:specification/gsml:GeologicUnit/gml:description", namespaces);
        Filter filter =
                ff.like(property, "Olivine basalt, tuff, microgabbro, minor sedimentary rocks");
        FeatureCollection<FeatureType, Feature> filteredResults = mfSource.getFeatures(filter);
        assertEquals(3, size(filteredResults));
        FeatureIterator<Feature> iterator = filteredResults.features();
        Feature feature = iterator.next();
        assertEquals("mf1", feature.getIdentifier().toString());
        feature = iterator.next();
        assertEquals("mf2", feature.getIdentifier().toString());
        feature = iterator.next();
        assertEquals("mf3", feature.getIdentifier().toString());
        iterator.close();

        /** Test filtering on multi valued properties */
        FeatureSource<FeatureType, Feature> guSource =
                AppSchemaDataAccessRegistry.getFeatureSource(GEOLOGIC_UNIT_NAME);
        // composition part is a multi valued property
        // we're testing that we can get a geologic unit which has a composition part with a
        // significant proportion value
        property =
                ff.property(
                        "gsml:composition/gsml:CompositionPart/gsml:proportion/gsml:CGI_TermValue/gsml:value",
                        namespaces);
        filter = ff.equals(property, ff.literal("significant"));
        filteredResults = guSource.getFeatures(filter);
        assertEquals(2, size(filteredResults));
        iterator = filteredResults.features();
        feature = iterator.next();
        assertEquals("gu.25678", feature.getIdentifier().toString());
        feature = iterator.next();
        assertEquals("gu.25682", feature.getIdentifier().toString());
        iterator.close();

        /** Test filtering client properties on chained features */
        property =
                ff.property(
                        "gsml:specification/gsml:GeologicUnit/gsml:occurrence/@xlink:href",
                        namespaces);
        filter = ff.like(property, "urn:cgi:feature:MappedFeature:mf1");
        filteredResults = mfSource.getFeatures(filter);
        assertEquals(1, size(filteredResults));
        feature = filteredResults.features().next();
        assertEquals("mf1", feature.getIdentifier().toString());

        /** Test filtering on denormalised view, see GEOT-2927 */
        property = ff.property("gml:name");
        filter = ff.equals(property, ff.literal("Yaugher Volcanic Group 2"));
        filteredResults = guSource.getFeatures(filter);
        assertEquals(1, size(filteredResults));
        // There are 2 rows for 1 feature that matches this filter:
        // gu.25678=-Py|Yaugher Volcanic Group 1
        // gu.25678=-Py|Yaugher Volcanic Group 2
        // Check that all 3 names are there:
        // - Yaugher Volcanic Group 1, Yaugher Volcanic Group 2 and -Py
        feature = filteredResults.features().next();
        assertEquals("gu.25678", feature.getIdentifier().toString());
        Collection<Property> properties = feature.getProperties(Types.typeName(GMLNS, "name"));
        assertTrue(properties.size() == 3);
        Iterator<Property> propIterator = properties.iterator();
        ComplexAttribute complexAttribute;
        Collection<? extends Property> values;
        // first
        complexAttribute = (ComplexAttribute) propIterator.next();
        values = complexAttribute.getValue();
        assertEquals(1, values.size());
        assertEquals(
                "Yaugher Volcanic Group 1", GML3EncodingUtils.getSimpleContent(complexAttribute));
        // second
        complexAttribute = (ComplexAttribute) propIterator.next();
        values = complexAttribute.getValue();
        assertEquals(1, values.size());
        assertEquals(
                "Yaugher Volcanic Group 2", GML3EncodingUtils.getSimpleContent(complexAttribute));
        // third
        complexAttribute = (ComplexAttribute) propIterator.next();
        values = complexAttribute.getValue();
        assertEquals(1, values.size());
        assertEquals("-Py", GML3EncodingUtils.getSimpleContent(complexAttribute));
        /** Same case as above, but the multi-valued property is feature chained */
        property = ff.property("gsml:exposureColor/gsml:CGI_TermValue/gsml:value", namespaces);
        filter = ff.equals(property, ff.literal("Yellow"));
        filteredResults = guSource.getFeatures(filter);
        assertEquals(1, size(filteredResults));
        feature = filteredResults.features().next();
        // ensure it's the right feature
        assertEquals("gu.25678", feature.getIdentifier().toString());
        properties = feature.getProperties(Types.typeName(GSMLNS, "exposureColor"));
        assertTrue(properties.size() == 2);
        propIterator = properties.iterator();
        values = (Collection) propIterator.next().getValue();
        assertEquals(1, values.size());
        Feature cgiFeature = (Feature) values.iterator().next();
        // and that both gsml:exposureColor values from 2 denormalised view rows are there
        assertEquals("Blue", cgiFeature.getIdentifier().toString());
        values = (Collection) propIterator.next().getValue();
        assertEquals(1, values.size());
        cgiFeature = (Feature) values.iterator().next();
        assertEquals("Yellow", cgiFeature.getIdentifier().toString());
    }

