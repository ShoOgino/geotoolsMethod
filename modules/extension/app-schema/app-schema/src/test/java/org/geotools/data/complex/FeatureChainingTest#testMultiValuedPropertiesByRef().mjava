    /**
     * Test chaining multi-valued by reference (xlink:href). It should result with multiple
     * attributes with no nested attributes, but only client property with xlink:href.
     */
    @Test
    public void testMultiValuedPropertiesByRef() throws Exception {
        final String MF_PREFIX = "urn:cgi:feature:MappedFeature:";
        final String OCCURENCE = "occurrence";
        final Map<String, String> guToOccurrenceMap =
                new HashMap<String, String>() {
                    {
                        put("gu.25699", "mf1");
                        put("gu.25678", "mf2;mf3");
                        put("gu.25682", "mf4");
                    }
                };

        ArrayList<String> processedFeatureIds = new ArrayList<>();

        try (FeatureIterator<Feature> guIterator = guFeatures.features()) {
            while (guIterator.hasNext()) {
                Feature guFeature = guIterator.next();
                String guId = guFeature.getIdentifier().toString();
                String[] mfIds = guToOccurrenceMap.get(guId).split(";");
                Collection<Property> properties = guFeature.getProperties(OCCURENCE);

                assertEquals(mfIds.length, properties.size());

                int propertyIndex = 0;
                for (Property property : properties) {
                    Object clientProps = property.getUserData().get(Attributes.class);
                    assertNotNull(clientProps);
                    assertTrue(clientProps instanceof HashMap);
                    Object hrefValue =
                            ((Map) clientProps).get(AbstractMappingFeatureIterator.XLINK_HREF_NAME);

                    // ensure the right href:xlink is there
                    assertEquals(MF_PREFIX + mfIds[propertyIndex], hrefValue);

                    // ensure no attributes would be encoded
                    assertTrue(((Collection) property.getValue()).isEmpty());
                    propertyIndex++;
                }
                processedFeatureIds.add(guId);
            }

            assertEquals(guToOccurrenceMap.size(), processedFeatureIds.size());
            assertTrue(processedFeatureIds.containsAll(guToOccurrenceMap.keySet()));
        }
    }

