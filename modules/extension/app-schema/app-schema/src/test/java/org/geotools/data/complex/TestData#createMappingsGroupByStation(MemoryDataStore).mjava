    /**
     * <p>
     * Flat FeatureType:
     * <ul>
     * wq_ir_results
     * <li> station_no</li>
     * <li> sitename</li>
     * <li> anzlic_no</li>
     * <li> project_no</li>
     * <li> id</li>
     * <li> sample_collection_date</li>
     * <li> determinand_description</li>
     * <li> results_value</li>
     * <li> location</li>
     * </ul>
     * </p>
     * <p>
     * Complex type:
     * <ul>
     * wq_plus
     * <li>sitename
     * <li>anzlic_no
     * <li>project_no
     * <li>location
     * <li>measurement (0..*)
     * <ul>
     * <li>determinand_description</li>
     * <li>result</li>
     * </ul>
     * </li>
     * </ul>
     * </p>
     * <p>
     * Mappings definition:
     * 
     * <pre>
     *       &lt;strong&gt;wq_ir_results&lt;/strong&gt;			&lt;strong&gt;wq_plus&lt;/strong&gt;
     *        station_no		--&gt;	wq_plus@id
     *        sitename		--&gt;	sitename	
     *        anzlic_no		--&gt;	anzlic_no
     *        project_no		--&gt;	project_no
     *        id		--&gt;	measurement/@id
     *        sample_collection_date--&gt; [not used]
     *        determinand_description--&gt;measurement/determinand_description	
     *        results_value		--&gt;measurement/result
     *        location		--&gt;location
     * </pre>
     * 
     * </p>
     * 
     * @param simpleStore
     * @return
     * @throws Exception
     */
    public static FeatureTypeMapping createMappingsGroupByStation(MemoryDataStore simpleStore)
            throws Exception {
        Name sourceTypeName = WATERSAMPLE_TYPENAME;
        final FeatureSource<SimpleFeatureType, SimpleFeature> wsSource = simpleStore
                .getFeatureSource(sourceTypeName);

        FeatureType targetType = createComplexWaterQualityType();
        FeatureTypeFactory tf = new UniqueNameFeatureTypeFactoryImpl();
        AttributeDescriptor targetFeature = tf.createAttributeDescriptor(targetType, targetType
                .getName(), 0, Integer.MAX_VALUE, true, null);

        List mappings = new LinkedList();
        Expression id;
        Expression source;
        String target;

        FilterFactory ff = CommonFactoryFinder.getFilterFactory(null);

        id = ff.property("station_no");
        source = Expression.NIL;
        target = "wq_plus";
        NamespaceSupport namespaces = new NamespaceSupport();
        mappings.add(new AttributeMapping(id, source, XPath
                .steps(targetFeature, target, namespaces)));

        source = ff.property("sitename");
        target = "wq_plus/sitename";
        mappings.add(new AttributeMapping(null, source, XPath.steps(targetFeature, target,
                namespaces)));

        source = ff.property("anzlic_no");
        target = "wq_plus/anzlic_no";
        mappings.add(new AttributeMapping(null, source, XPath.steps(targetFeature, target,
                namespaces)));

        source = ff.property("project_no");
        target = "wq_plus/project_no";
        mappings.add(new AttributeMapping(null, source, XPath.steps(targetFeature, target,
                namespaces)));

        id = ff.property("id[1]");
        source = null;
        target = "wq_plus/measurement";
        mappings.add(new AttributeMapping(id, source, XPath
                .steps(targetFeature, target, namespaces), null, true, null));

        source = ff.property("determinand_description");
        target = "wq_plus/measurement/determinand_description";
        mappings.add(new AttributeMapping(null, source, XPath.steps(targetFeature, target,
                namespaces)));

        source = ff.property("results_value");
        target = "wq_plus/measurement/result";
        mappings.add(new AttributeMapping(null, source, XPath.steps(targetFeature, target,
                namespaces)));

        source = ff.property("location");
        target = "wq_plus/location";
        mappings.add(new AttributeMapping(null, source, XPath.steps(targetFeature, target,
                namespaces)));

        return new FeatureTypeMapping(wsSource, targetFeature, mappings,
                namespaces);

    }

