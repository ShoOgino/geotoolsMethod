    @Test
    public void testMultipleIds() throws Exception {
        SimpleFeatureTypeBuilder builder = new SimpleFeatureTypeBuilder();
        builder.setName("test");
        SimpleFeatureType origType = builder.buildFeatureType();

        JoiningQuery query = new JoiningQuery();
        JoiningQuery.QueryJoin join = new JoiningQuery.QueryJoin();
        join.getIds().add("one");
        join.getIds().add("two");
        query.setQueryJoins(Collections.singletonList(join));

        JDBCDataStore mockStore = Mockito.mock(JDBCDataStore.class);
        ContentEntry mockEntry = Mockito.mock(ContentEntry.class);
        Mockito.when(mockStore.getPrimaryKey(origType))
                .thenReturn(new PrimaryKey(null, Collections.emptyList()));

        Mockito.when(mockStore.getSQLDialect()).thenReturn(new PostGISDialect(mockStore));
        Mockito.when(mockEntry.getDataStore()).thenReturn(mockStore);
        JoiningJDBCFeatureSource source =
                new JoiningJDBCFeatureSource(new JDBCFeatureSource(mockEntry, null));
        SimpleFeatureType type = source.getFeatureType(origType, query);
        assertNotNull(type);
        assertEquals("FOREIGN_ID_0_0", type.getDescriptor(0).getName().getLocalPart());
        assertEquals("FOREIGN_ID_0_1", type.getDescriptor(1).getName().getLocalPart());
    }

