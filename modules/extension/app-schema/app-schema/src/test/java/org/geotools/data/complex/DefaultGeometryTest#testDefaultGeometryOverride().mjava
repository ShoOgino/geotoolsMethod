    /**
     * Tests that the default geometry configuration overrides the default geometry that would be
     * automatically picked up by the feature type building machinery.
     */
    @Test
    public void testDefaultGeometryOverride() throws IOException {
        FeatureTypeMapping mappingWithGeom =
                stationsDataAccess.getMappingByName(STATION_WITH_GEOM_FEATURE);
        assertNotNull(mappingWithGeom);
        // no default geometry configured
        assertNull(mappingWithGeom.getDefaultGeometryXPath());

        FeatureType ftWithGeom = stationsDataAccess.getSchema(STATION_WITH_GEOM_FEATURE);
        assertNotNull(ftWithGeom.getGeometryDescriptor());
        // the direct child geometry property is automatically picked as default geometry
        assertEquals(
                Types.typeName(STATIONS_NS, "geometry"),
                ftWithGeom.getGeometryDescriptor().getName());

        // same feature type, this time default geometry is configured
        FeatureTypeMapping mappingDefaultGeomOverride =
                stationsDataAccess.getMappingByName(STATION_DEFAULT_GEOM_OVERRIDE_MAPPING);
        assertEquals(
                mappingWithGeom.getTargetFeature().getName(),
                mappingDefaultGeomOverride.getTargetFeature().getName());
        assertNotNull(mappingDefaultGeomOverride);
        assertEquals(
                "st:location/st:position", mappingDefaultGeomOverride.getDefaultGeometryXPath());

        FeatureType ftDefaultGeomOverride =
                stationsDataAccess.getSchema(STATION_DEFAULT_GEOM_OVERRIDE_MAPPING);
        assertEquals(ftWithGeom.getName(), ftDefaultGeomOverride.getName());
        assertNotNull(ftDefaultGeomOverride.getGeometryDescriptor());
        // the direct child geometry property is automatically picked as default geometry
        assertEquals(
                ComplexFeatureConstants.DEFAULT_GEOMETRY_LOCAL_NAME,
                ftDefaultGeomOverride.getGeometryDescriptor().getLocalName());
    }

