    /**
     * An x-path expression may target a "client property" mapping (in xml land, an xml attribute
     * rather than a xml element).
     */
    @Test
    public void testPropertyNameWithGmlIdAttribute() throws Exception {
        final String XMMLNS = "http://www.opengis.net/xmml";
        final Name typeName = new NameImpl(XMMLNS, "Borehole");

        AppSchemaDataAccess complexDs = (AppSchemaDataAccess) mappingDataStore;

        mapping = complexDs.getMappingByNameOrElement(typeName);

        NamespaceSupport namespaces = new NamespaceSupport();
        namespaces.declarePrefix("gml", GML.NAMESPACE);
        namespaces.declarePrefix("xmml", XMMLNS);
        namespaces.declarePrefix("xlink", XLINK.NAMESPACE);

        visitor = new UnmappingFilterVisitor(mapping);
        FilterFactory2 ff = new FilterFactoryImplNamespaceAware(namespaces);

        {
            String xpathExpression = "@gml:id";
            PropertyName propNameExpression = ff.property(xpathExpression);

            @SuppressWarnings("unchecked")
            List<Expression> unrolled = (List) propNameExpression.accept(visitor, null);
            assertNotNull(unrolled);
            assertEquals(1, unrolled.size());
            assertTrue(unrolled.get(0) instanceof Expression);
            assertEquals(((Expression) unrolled.get(0)).toString(), "strConcat([bh.], [BGS_ID])");
        }

        {
            String xpathExpression = "/@gml:id";
            Expression propNameExpression = ff.property(xpathExpression);

            @SuppressWarnings("unchecked")
            List unrolled = (List) propNameExpression.accept(visitor, null);
            assertNotNull(unrolled);
            assertEquals(1, unrolled.size());
            assertTrue(unrolled.get(0) instanceof Expression);
            assertEquals(((Expression) unrolled.get(0)).toString(), "strConcat([bh.], [BGS_ID])");
        }

        {
            String xpathExpression = "xmml:Borehole/@gml:id";
            Expression propNameExpression = ff.property(xpathExpression);

            @SuppressWarnings("unchecked")
            List<Expression> unrolled = (List) propNameExpression.accept(visitor, null);
            assertNotNull(unrolled);
            assertEquals(1, unrolled.size());
            assertTrue(unrolled.get(0) instanceof Expression);
            assertEquals(((Expression) unrolled.get(0)).toString(), "strConcat([bh.], [BGS_ID])");
        }
    }

