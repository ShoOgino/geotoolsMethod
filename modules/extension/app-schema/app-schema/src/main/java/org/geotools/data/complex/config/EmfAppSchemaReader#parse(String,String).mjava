    /**
     * Parses the gml schema referenced by <code>location</code> into a {@link SchemaIndex}
     * 
     * @param nameSpace
     *            the location namespace
     * @param location
     *            the physical location of the root xsd schema that comprises the application schema
     *            to parse.
     * @throws IOException
     *             if any non recoverable problem occurs while parsing the application schema
     *             pointed out by <code>location</code> or one of its dependencies.
     */
    public SchemaIndex parse(String nameSpace, String schemaLocation) throws IOException {
        AppSchemaConfiguration configuration = new AppSchemaConfiguration(nameSpace,
                schemaLocation, resolver);
        Configuration gmlConfig = findGmlConfiguration(configuration);
        if (gmlConfig != null) {
            configuration.addDependency(gmlConfig);
		} else {
			// No GML configuration found.. could be deliberate
			// where there is no direct connection between the primary schema
			// (GML based)
			// and secondary schemaUri.. but possible by using anyType
			// will warn in AppSchemaDataAccessConfiguration
			Logger LOGGER = org.geotools.util.logging.Logging
					.getLogger(EmfAppSchemaReader.class.getPackage().getName());
			LOGGER.warning("Non GML based schema found in schemaURI: "
					+ schemaLocation
					+ "! This may result in corrupted data as some types may not be encoded correctly.");
		}
        return parse(configuration);
    }

