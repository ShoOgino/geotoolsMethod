    private static QName deglose(final String prefixedName, final AttributeDescriptor root,
            final NamespaceSupport namespaces, boolean isXmlAttribute) {
        if (prefixedName == null) {
            throw new NullPointerException("prefixedName");
        }

        QName name = null;

        String prefix;
        final String namespaceUri;
        final String localName;

        int prefixIdx = prefixedName.indexOf(':');

        if (prefixIdx == -1) {
            localName = prefixedName;
            final Name rootName = root.getName();
            // don't use default namespace for client properties (xml attribute), and FEATURE_LINK
            final String defaultNamespace = (isXmlAttribute
                    || localName.equals(ComplexFeatureConstants.FEATURE_CHAINING_LINK_NAME
                            .getLocalPart()) || rootName.getNamespaceURI() == null) ? XMLConstants.NULL_NS_URI
                    : namespaces.getURI("") == null ? rootName.getNamespaceURI() : namespaces
                            .getURI("");
            namespaceUri = defaultNamespace;
            if (XMLConstants.NULL_NS_URI.equals(defaultNamespace)) {
                prefix = XMLConstants.DEFAULT_NS_PREFIX;
            } else {
                if (!localName.equals(rootName.getLocalPart())) {
                    LOGGER.warning("Using root's namespace " + defaultNamespace
                            + " for step named '" + localName + "', as no prefix was stated");
                }
                prefix = namespaces.getPrefix(defaultNamespace);

                if (prefix == null) {
                    //throw new IllegalStateException("Default namespace is not mapped to a prefix: "
                    //        + defaultNamespace);
                    prefix = "";
                }
            }
        } else {
            prefix = prefixedName.substring(0, prefixIdx);
            localName = prefixedName.substring(prefixIdx + 1);
            namespaceUri = namespaces.getURI(prefix);
        }

        name = new QName(namespaceUri, localName, prefix);

        return name;
    }

