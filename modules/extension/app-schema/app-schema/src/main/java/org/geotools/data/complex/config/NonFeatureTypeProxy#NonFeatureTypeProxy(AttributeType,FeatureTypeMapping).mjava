    /**
     * Sole constructor
     *
     * @param type The underlying non feature type
     */
    public NonFeatureTypeProxy(final AttributeType type, final FeatureTypeMapping mapping) {
        super(type.getName(), null);

        subject = type;

        AttributeDescriptor originalTarget = mapping.getTargetFeature();
        int maxOccurs = originalTarget.getMaxOccurs();
        int minOccurs = originalTarget.getMinOccurs();
        boolean nillable = originalTarget.isNillable();
        Object defaultValue = originalTarget.getDefaultValue();
        Name name = originalTarget.getName();

        // create a new descriptor with the wrapped type and set it to the mapping
        ComplexFeatureTypeFactoryImpl typeFactory = new ComplexFeatureTypeFactoryImpl();
        AttributeDescriptor descriptor =
                typeFactory.createAttributeDescriptor(
                        this, name, minOccurs, maxOccurs, nillable, defaultValue);
        descriptor.getUserData().putAll(originalTarget.getUserData());
        mapping.setTargetFeature(descriptor);
        // smuggle FEATURE_LINK descriptor
        descriptors =
                new ArrayList<PropertyDescriptor>() {
                    {
                        add(ComplexFeatureConstants.FEATURE_CHAINING_LINK);
                    }
                };
        if (subject instanceof ComplexType) {
            descriptors.addAll(((ComplexType) subject).getDescriptors());
        }
    }

