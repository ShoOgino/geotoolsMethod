    // builds a JoiningQuery with QueryJoins retrieved
    // from the chainedAttributes descriptors
    private JoiningQuery buildJoiningQuery(
            List<FeatureChainedAttributeDescriptor> descriptors,
            JoiningQuery unmappedQuery,
            FeatureTypeMapping rootMapping) {
        List<JoiningQuery.QueryJoin> joins = new ArrayList<>();
        for (FeatureChainedAttributeDescriptor d : descriptors) {
            List<FeatureChainedAttributeVisitor.FeatureChainLink> links = d.getFeatureChain();
            for (int j = 0; j < links.size() - 1; j++) {
                FeatureChainedAttributeVisitor.FeatureChainLink link = links.get(j);
                if (link.hasNestedFeature()) {
                    StepList nestedTargetXpath = link.getNestedFeatureAttribute().nestedTargetXPath;
                    FeatureChainedAttributeVisitor.FeatureChainLink link2 = links.get(j + 1);
                    List<AttributeMapping> mappings2 =
                            link2.getFeatureTypeMapping().getAttributeMappings();
                    // retrieve the attribute mapping corresponding to the featureLink in the parent
                    AttributeMapping mappingAttr =
                            mappings2
                                    .stream()
                                    .filter(
                                            m ->
                                                    m.getTargetXPath()
                                                            .equalsIgnoreIndex(nestedTargetXpath))
                                    .findFirst()
                                    .get();
                    Expression parent = link.getNestedFeatureAttribute().getSourceExpression();
                    Expression nested = mappingAttr.getSourceExpression();
                    JoiningQuery.QueryJoin join = new JoiningQuery.QueryJoin();
                    join.setForeignKeyName(nested);
                    join.setJoiningKeyName(parent);
                    FeatureTypeMapping nestedTypeMapping = link2.getFeatureTypeMapping();
                    ContentFeatureSource source =
                            (ContentFeatureSource) nestedTypeMapping.getSource();
                    join.setJoiningTypeName(source.getEntry().getTypeName());
                    FeatureTypeMapping parentTypeMapping = link.getFeatureTypeMapping();
                    ContentFeatureSource sourceParent =
                            (ContentFeatureSource) parentTypeMapping.getSource();
                    join.setJoinedTypeName(sourceParent.getEntry().getTypeName());
                    if (!joins.contains(join)) joins.add(join);
                }
            }
        }
        unmappedQuery.setQueryJoins(joins);
        unmappedQuery.setRootMapping(rootMapping);
        unmappedQuery.setCoordinateSystem(null);
        unmappedQuery.setCoordinateSystemReproject(null);
        return unmappedQuery;
    }

