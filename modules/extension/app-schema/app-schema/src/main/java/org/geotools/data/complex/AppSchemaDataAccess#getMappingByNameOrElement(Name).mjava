    /**
     * Returns the mapping suite for the given target type name. This name would be the mappingName
     * in the TypeMapping if it exists, otherwise it's the target element name.
     *
     * <p>Note this method is public just for unit testing purposes
     *
     * @param typeName
     * @return
     * @throws IOException
     */
    public FeatureTypeMapping getMappingByNameOrElement(Name typeName) throws IOException {
        FeatureTypeMapping mapping = (FeatureTypeMapping) this.mappings.get(typeName);
        if (mapping != null) {
            return mapping;
        }

        // lookup by mapping name failed, try to lookup by target element
        // NOTE: in this case, there is a risk of ambiguity. E.g. consider a (questionable) mapping
        // configuration where multiple mappings of the
        // same type have been specified, each with its own mappingName: they would have the same
        // targetElement, and we wouldn't know which one to
        // pick. The result would be unpredictable in such a situation.
        for (FeatureTypeMapping typeMapping : mappings.values()) {
            if (typeMapping.getTargetFeature().getName().equals(typeName)) {
                return typeMapping;
            }
        }
        throw new DataSourceException(
                typeName + " not found. Available: " + mappings.keySet().toString());
    }

