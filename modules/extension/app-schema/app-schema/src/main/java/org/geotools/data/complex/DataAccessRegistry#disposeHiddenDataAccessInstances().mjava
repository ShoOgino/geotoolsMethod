    // utility method to clear up hidden app-schema data accesses (i.e. configured via a separate mapping file, specified in the <includedTypes>
    // directive of some top-level app-schema data access) that are no longer needed (i.e. they are not referenced by any top-level data access).
    private void disposeHiddenDataAccessInstances() throws IOException {
        // step 1: collect all hidden data access instances that are still referenced by some other data access
        boolean canSafelyRemove = true;
        Set<DataAccess<?, ?>> stillReferencedHiddenDataAccesses = new HashSet<DataAccess<?, ?>>();
        for (DataAccess<FeatureType, Feature> da : registry) {
            if (da instanceof AppSchemaDataAccess) {
                AppSchemaDataAccess asda = (AppSchemaDataAccess) da;
                if (!asda.hidden) {
                    // reach out to all referenced (directly or indirectly) DataAccesses
                    Set<DataAccess<?, ?>> reachedDataAccesses = new HashSet<DataAccess<?, ?>>();
                    canSafelyRemove = canSafelyRemove
                            && reachOutToReferencedDataAccesses(asda,
                                    stillReferencedHiddenDataAccesses, reachedDataAccesses);

                    if (!canSafelyRemove) {
                        break;
                    }
                }
            }
        }

        // step 2: remove hidden data access instances that are no more referenced;
        // this step is performed only if no polymorphic nested mapping was found
        if (canSafelyRemove) {
            List<DataAccess<FeatureType, Feature>> copyRegistry = new ArrayList<DataAccess<FeatureType, Feature>>(
                    registry);
            for (DataAccess<FeatureType, Feature> da : copyRegistry) {
                if (da instanceof AppSchemaDataAccess) {
                    AppSchemaDataAccess asda = (AppSchemaDataAccess) da;
                    if (asda.hidden && !stillReferencedHiddenDataAccesses.contains(asda)) {
                        asda.dispose();
                    }
                }
            }
        }
    }

