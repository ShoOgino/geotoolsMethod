    /** Return value converted into a type suitable for this descriptor. */
    @SuppressWarnings("serial")
    private Object convertValue(final AttributeDescriptor descriptor, final Object value) {
        final AttributeType type = descriptor.getType();
        Class<?> binding = type.getBinding();

        if (type instanceof ComplexType && binding == Collection.class) {
            if (!(value instanceof Collection)) {
                boolean isSimpleContent = Types.isSimpleContentType(type);
                boolean canHaveTextContent = Types.canHaveTextContent(type);
                if (isSimpleContent || canHaveTextContent) {
                    ArrayList<Property> list = new ArrayList<>();
                    if (value == null && !descriptor.isNillable()) {
                        return list;
                    }
                    if (isSimpleContent) {
                        list.add(buildSimpleContent(type, value));
                    } else if (canHaveTextContent) {
                        list.add(buildTextContent(type, value));
                    }
                    return list;
                }
            } else {
                // no conversion required
                boolean isSimpleContent = Types.isSimpleContentType(type);
                boolean canHaveTextContent = Types.canHaveTextContent(type);
                if (isSimpleContent || canHaveTextContent) {
                    ArrayList<Property> list = new ArrayList<>();
                    for (Object v : (Collection) value) {
                        if (v instanceof Property) {
                            list.add((Property) v);
                            continue;
                        }
                        if (isSimpleContent) {
                            list.add(buildSimpleContent(type, v));
                        } else if (canHaveTextContent) {
                            list.add(buildTextContent(type, v));
                        }
                    }
                    return list;
                }
                return value;
            }
        }
        if (binding == String.class && value instanceof Collection) {
            // if it's a single value in a collection, strip the square brackets
            String collectionString = value.toString();
            return collectionString.substring(1, collectionString.length() - 1);
        }
        if (value instanceof Literal) {
            final Literal literal = (Literal) value;
            return literal.evaluate(literal.getValue(), binding);
        }
        return FF.literal(value).evaluate(value, binding);
    }

