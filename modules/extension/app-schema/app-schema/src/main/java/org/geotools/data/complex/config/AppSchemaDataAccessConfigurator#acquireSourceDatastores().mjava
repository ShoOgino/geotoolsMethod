    /**
     * @return a Map&lt;String,DataStore&gt; where the key is the id given to the datastore in the
     *     configuration.
     */
    private Map<String, DataAccess<FeatureType, Feature>> acquireSourceDatastores()
            throws IOException {
        AppSchemaDataAccessConfigurator.LOGGER.entering(
                getClass().getName(), "acquireSourceDatastores");

        final Map<String, DataAccess<FeatureType, Feature>> datastores =
                new LinkedHashMap<String, DataAccess<FeatureType, Feature>>();
        @SuppressWarnings("unchecked")
        final List<SourceDataStore> dsParams = config.getSourceDataStores();
        String id;

        for (SourceDataStore dsconfig : dsParams) {
            id = dsconfig.getId();

            @SuppressWarnings("unchecked")
            Map<String, Serializable> datastoreParams = dsconfig.getParams();

            datastoreParams = resolveRelativePaths(datastoreParams);

            AppSchemaDataAccessConfigurator.LOGGER.fine("looking for datastore " + id);

            DataAccess<FeatureType, Feature> dataStore = null;
            if (dataStoreMap != null) {
                if (dataStoreMap.containsKey(datastoreParams)) {
                    dataStore = dataStoreMap.get(datastoreParams);
                } else {
                    // let's check if any data store provided a custom syntax for its configuration
                    List<CustomSourceDataStore> extensions = CustomSourceDataStore.loadExtensions();
                    dataStore = buildDataStore(extensions, dsconfig, config);
                    // if no custom data store handled this configuration let's fallback on the
                    // default
                    // constructor
                    dataStore =
                            dataStore == null
                                    ? DataAccessFinder.getDataStore(datastoreParams)
                                    : dataStore;
                    // store the store in the data stores map
                    dataStoreMap.put(datastoreParams, dataStore);
                }
            }

            if (dataStore == null) {
                AppSchemaDataAccessConfigurator.LOGGER.log(
                        Level.SEVERE, "Cannot find a DataAccess for parameters " + datastoreParams);
                throw new DataSourceException(
                        "Cannot find a DataAccess for parameters "
                                + "(some not shown) "
                                + filterDatastoreParams(datastoreParams));
            }

            AppSchemaDataAccessConfigurator.LOGGER.fine("got datastore " + dataStore);
            datastores.put(id, dataStore);
        }

        return datastores;
    }

