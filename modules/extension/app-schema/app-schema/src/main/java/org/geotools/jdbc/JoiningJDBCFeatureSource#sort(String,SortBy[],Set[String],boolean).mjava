    /**
     * Create order by field for specific table name
     * 
     * @param tableName
     * @param sort
     * @param orderByFields
     * @throws IOException
     * @throws SQLException
     */
    protected void sort(String tableName, SortBy[] sort , Set<String> orderByFields, boolean alias) throws IOException, SQLException {        
        for (int i = 0; i < sort.length; i++) {
            if(SortBy.NATURAL_ORDER.equals(sort[i])|| SortBy.REVERSE_ORDER.equals(sort[i])) {
                throw new IOException("Cannot do natural order in joining queries");                    
            } else {
                StringBuffer sql = new StringBuffer();
                if (alias) {
                   encodeColumnName2(sort[i].getPropertyName().getPropertyName(), tableName, sql, null);
                } else {
                   encodeColumnName(sort[i].getPropertyName().getPropertyName(), tableName, sql, null);
                }
                if (sort[i].getSortOrder() == SortOrder.DESCENDING) {
                    sql.append(" DESC");
                } else {
                    sql.append(" ASC");
                }
                if (!sql.toString().isEmpty()) {
                    orderByFields.add(sql.toString());
                }
            }
        }
    }

