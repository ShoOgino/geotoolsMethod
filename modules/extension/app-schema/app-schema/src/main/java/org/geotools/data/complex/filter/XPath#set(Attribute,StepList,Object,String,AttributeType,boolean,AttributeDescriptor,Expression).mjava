    public Attribute set(
            final Attribute att,
            final StepList xpath,
            Object value,
            String id,
            AttributeType targetNodeType,
            boolean isXlinkRef,
            AttributeDescriptor targetDescriptor,
            Expression sourceExpression) {
        if (XPath.LOGGER.isLoggable(Level.CONFIG)) {
            XPath.LOGGER.entering(
                    "XPath", "set", new Object[] {att, xpath, value, id, targetNodeType});
        }

        final StepList steps = new StepList(xpath);

        Attribute parent = att;
        Name rootName = null;
        AttributeDescriptor parentDescriptor = parent.getDescriptor();
        if (parentDescriptor != null) {
            rootName = parentDescriptor.getName();
            Step rootStep = steps.get(0);
            QName stepName = rootStep.getName();
            if (Types.equals(rootName, stepName)) {
                // first step is the self reference to att, so skip it
                if (steps.size() > 1) {
                    steps.remove(0);
                } else {
                    // except when the xpath is the root itself
                    // where it is done for feature chaining for simple content
                    if (Types.isSimpleContentType(parent.getType())
                            || Types.canHaveTextContent(parent.getType())) {
                        return setSimpleContentValue(parent, value);
                    } else if (Types.isGeometryType(parent.getType())) {
                        ComplexFeatureTypeFactoryImpl typeFactory =
                                new ComplexFeatureTypeFactoryImpl();
                        GeometryType geomType;
                        if (parent.getType() instanceof GeometryType) {
                            geomType = (GeometryType) parent.getType();
                        } else {
                            geomType =
                                    (GeometryType)
                                            ((NonFeatureTypeProxy) parent.getType()).getSubject();
                        }
                        GeometryDescriptor geomDescriptor =
                                typeFactory.createGeometryDescriptor(
                                        geomType,
                                        rootName,
                                        parentDescriptor.getMinOccurs(),
                                        parentDescriptor.getMaxOccurs(),
                                        parentDescriptor.isNillable(),
                                        parentDescriptor.getDefaultValue());
                        GeometryAttributeImpl geom =
                                new GeometryAttributeImpl(value, geomDescriptor, null);
                        ArrayList<Property> geomAtts = new ArrayList<>();
                        geomAtts.add(geom);
                        parent.setValue(geomAtts);
                        return geom;
                    }
                }
            }
        }

        Iterator stepsIterator = steps.iterator();

        while (stepsIterator.hasNext()) {
            final XPath.Step currStep = (Step) stepsIterator.next();
            AttributeDescriptor currStepDescriptor = null;
            final boolean isLastStep = !stepsIterator.hasNext();
            final QName stepName = currStep.getName();
            final Name attributeName = org.geotools.feature.type.Types.toTypeName(stepName);

            final AttributeType _parentType = parent.getType();
            if (_parentType.getName().equals(XSSchema.ANYTYPE_TYPE.getName())
                    && targetDescriptor != null) {
                // this needs to be passed on if casting anyType to something else, since it won't
                // exist in the schema
                currStepDescriptor = targetDescriptor;
            } else {
                ComplexType parentType = (ComplexType) _parentType;

                if (!isLastStep || targetNodeType == null) {
                    if (null == attributeName.getNamespaceURI()) {
                        currStepDescriptor =
                                (AttributeDescriptor)
                                        Types.findDescriptor(
                                                parentType, attributeName.getLocalPart());
                    } else {
                        currStepDescriptor =
                                (AttributeDescriptor)
                                        Types.findDescriptor(parentType, attributeName);
                    }

                    if (currStepDescriptor == null) {
                        // need to take the non easy way, may be the instance has a
                        // value for this step with a different name, of a derived
                        // type of the one declared in the parent type
                        String prefixedStepName = currStep.toString();
                        PropertyName name = FF.property(prefixedStepName);
                        Attribute child = (Attribute) name.evaluate(parent);
                        if (child != null) {
                            currStepDescriptor = child.getDescriptor();
                        }
                    }
                } else {
                    AttributeDescriptor actualDescriptor;
                    if (null == attributeName.getNamespaceURI()) {
                        actualDescriptor =
                                (AttributeDescriptor)
                                        Types.findDescriptor(
                                                parentType, attributeName.getLocalPart());
                    } else {
                        actualDescriptor =
                                (AttributeDescriptor)
                                        Types.findDescriptor(parentType, attributeName);
                    }

                    if (actualDescriptor != null) {
                        int minOccurs = actualDescriptor.getMinOccurs();
                        int maxOccurs = actualDescriptor.getMaxOccurs();
                        boolean nillable = actualDescriptor.isNillable();
                        if (actualDescriptor instanceof GeometryDescriptor) {
                            // important to maintain CRS information encoding
                            if (Geometry.class.isAssignableFrom(targetNodeType.getBinding())) {
                                if (!(targetNodeType instanceof GeometryType)) {
                                    targetNodeType =
                                            new GeometryTypeImpl(
                                                    targetNodeType.getName(),
                                                    targetNodeType.getBinding(),
                                                    crs != null
                                                            ? crs
                                                            : ((GeometryDescriptor)
                                                                            actualDescriptor)
                                                                    .getCoordinateReferenceSystem(),
                                                    targetNodeType.isIdentified(),
                                                    targetNodeType.isAbstract(),
                                                    targetNodeType.getRestrictions(),
                                                    targetNodeType.getSuper(),
                                                    targetNodeType.getDescription());
                                }
                                currStepDescriptor =
                                        descriptorFactory.createGeometryDescriptor(
                                                (GeometryType) targetNodeType,
                                                attributeName,
                                                minOccurs,
                                                maxOccurs,
                                                nillable,
                                                null);
                            } else {
                                throw new IllegalArgumentException(
                                        "Can't set targetNodeType: "
                                                + targetNodeType.toString()
                                                + " for attribute mapping: "
                                                + attributeName
                                                + " as it is not a Geometry type!");
                            }
                        } else {
                            currStepDescriptor =
                                    descriptorFactory.createAttributeDescriptor(
                                            targetNodeType,
                                            attributeName,
                                            minOccurs,
                                            maxOccurs,
                                            nillable,
                                            null);
                        }
                    }
                }

                if (currStepDescriptor == null) {
                    StringBuffer parentAtts = new StringBuffer();
                    Collection properties = parentType.getDescriptors();
                    for (Iterator it = properties.iterator(); it.hasNext(); ) {
                        PropertyDescriptor desc = (PropertyDescriptor) it.next();
                        Name name = desc.getName();
                        parentAtts.append(name.getNamespaceURI());
                        parentAtts.append("#");
                        parentAtts.append(name.getLocalPart());
                        if (it.hasNext()) {
                            parentAtts.append(", ");
                        }
                    }
                    throw new IllegalArgumentException(
                            currStep
                                    + " is not a valid location path for type "
                                    + parentType.getName()
                                    + ". "
                                    + currStep
                                    + " ns: "
                                    + currStep.getName().getNamespaceURI()
                                    + ", "
                                    + parentType.getName().getLocalPart()
                                    + " properties: "
                                    + parentAtts);
                }
            }

            if (isLastStep) {
                // reached the leaf
                if (currStepDescriptor == null) {
                    throw new IllegalArgumentException(
                            currStep
                                    + " is not a valid location path for type "
                                    + _parentType.getName());
                }

                return setLeafAttribute(
                        currStepDescriptor,
                        currStep,
                        id,
                        value,
                        parent,
                        targetNodeType,
                        isXlinkRef);
            } else {
                // parent = appendComplexProperty(parent, currStep,
                // currStepDescriptor);
                int index = currStep.isIndexed() ? currStep.getIndex() : -1;
                parent =
                        setValue(
                                currStepDescriptor,
                                null,
                                new ArrayList<Property>(),
                                index,
                                parent,
                                null,
                                false);
            }
        }
        throw new IllegalStateException();
    }

