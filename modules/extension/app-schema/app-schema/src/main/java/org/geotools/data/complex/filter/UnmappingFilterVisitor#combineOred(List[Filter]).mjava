    /**
     * Used by methods that visited a filter that produced one or more filters over the surrogate
     * feature type to combine them in an Or filter if necessary.
     */
    private Filter combineOred(List<Filter> combinedFilters) {
        switch (combinedFilters.size()) {
            case 0:
                throw new IllegalArgumentException("No filters to combine");
            case 1:
                return (Filter) combinedFilters.get(0);
            default:
                return ff.or(combinedFilters);
        }
    }

