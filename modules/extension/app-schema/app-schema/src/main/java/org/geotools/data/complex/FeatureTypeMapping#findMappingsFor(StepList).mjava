    /**
     * Looks up for attribute mappings matching the xpath expression <code>propertyName</code>.
     * <p>
     * If any step in <code>propertyName</code> has index greater than 1, any mapping for the same
     * property applies, regardless of the mapping. For example, if there are mappings for
     * <code>gml:name[1]</code>, <code>gml:name[2]</code> and <code>gml:name[3]</code>, but
     * propertyName is just <code>gml:name</code>, all three mappings apply.
     * </p>
     * 
     * @param propertyName
     * @return
     */
    public List<Expression> findMappingsFor(final StepList propertyName) {
        // collect all the mappings for the given property
        List candidates;

        // get all matching mappings if index is not specified, otherwise
        // get the specified mapping
        if (!propertyName.toString().contains("[")) {
            candidates = getAttributeMappingsIgnoreIndex(propertyName);
        } else {
            candidates = new ArrayList<AttributeMapping>();
            AttributeMapping mapping = getAttributeMapping(propertyName);
            if (mapping != null) {
                candidates.add(mapping);
            }
        }
        List expressions = getExpressions(candidates);

        // does the last step refer to a client property of the parent step?
        // i.e. a client property maps to an xml attribute, and the step list
        // could have been generated from an xpath of the form
        // propA/propB@attName
        if (candidates.size() == 0 && propertyName.size() > 1) {
            XPath.Step clientPropertyStep = (Step) propertyName.get(propertyName.size() - 1);
            Name clientPropertyName = Types.toTypeName(clientPropertyStep.getName());

            XPath.StepList parentPath = new XPath.StepList(propertyName);
            parentPath.remove(parentPath.size() - 1);

            candidates = getAttributeMappingsIgnoreIndex(parentPath);

            expressions = getClientPropertyExpressions(candidates, clientPropertyName, parentPath);
            if (expressions.isEmpty()) {
                // this might be a wrapper mapping for another complex mapping
                // look for the client properties there
                FeatureTypeMapping inputMapping = getUnderlyingComplexMapping();
                if (inputMapping != null) {
                    return getClientPropertyExpressions(inputMapping
                            .getAttributeMappingsIgnoreIndex(parentPath), clientPropertyName,
                            parentPath);
                }
            }
        }
        return expressions;
    }

