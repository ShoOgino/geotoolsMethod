    /**
     * Get matching input features that are stored in this mapping using a supplied link value.
     *
     * @return The matching input feature
     */
    public List<Feature> getInputFeatures(
            Object caller,
            Object foreignKeyValue,
            List<Object> idValues,
            Object feature,
            CoordinateReferenceSystem reprojection,
            List<PropertyName> selectedProperties,
            boolean includeMandatory)
            throws IOException {
        if (isSameSource()) {
            // if linkField is null, this method shouldn't be called because the mapping
            // should use the same table, and handles it differently
            throw new UnsupportedOperationException(
                    "Link field is missing from feature chaining mapping!");
        }
        boolean isMultiple = false;
        if (source == null || isConditional) {
            // We can't initiate this in the constructor because the feature type mapping
            // might not be built yet.
            Object featureTypeName = getNestedFeatureType(feature);
            if (featureTypeName == null || !(featureTypeName instanceof Name)) {
                // this could be legitimate, for some null values polymorphism use case
                // or that it's set to be xlink:href
                return Collections.emptyList();
            }
            FeatureTypeMapping featureTypeMapping =
                    AppSchemaDataAccessRegistry.getMappingByName((Name) featureTypeName);
            if (featureTypeMapping == null) {
                LOGGER.info(
                        "FeatureTypeMapping for '"
                                + featureTypeName
                                + "' not found when evaluating filter!");
                return Collections.emptyList();
            }

            nestedIdExpression = featureTypeMapping.getFeatureIdExpression();

            source = featureTypeMapping.getSource();

            if (source == null) {
                LOGGER.info(
                        "Feature source for '"
                                + featureTypeName
                                + "' not found when evaluating filter");
                return Collections.emptyList();
            }

            AttributeMapping mapping = getMapping(featureTypeMapping);
            nestedSourceExpression = mapping.getSourceExpression();
            isMultiple = mapping.isMultiValued();
        }

        return getFilteredFeatures(foreignKeyValue, isMultiple);
    }

