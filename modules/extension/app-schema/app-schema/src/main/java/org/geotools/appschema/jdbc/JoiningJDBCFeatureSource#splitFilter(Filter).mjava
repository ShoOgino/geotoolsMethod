    @Override
    protected Filter[] splitFilter(Filter original) {
        Filter[] split = new Filter[2];
        if (original != null) {
            // create a filter splitter
            PostPreProcessFilterSplittingVisitor splitter =
                    new PostPreProcessFilterSplittingVisitor(
                            getDataStore().getFilterCapabilities(), null, null);
            original.accept(splitter, null);

            split[0] = splitter.getFilterPre();
            split[1] = splitter.getFilterPost();
        }

        SimplifyingFilterVisitor visitor =
                new SimplifyingFilterVisitor() {

                    @Override
                    public Object visit(PropertyName propertyName, Object extraData) {
                        // preserve the JoinPropertyName
                        if (propertyName instanceof JoinPropertyName) {
                            JoinPropertyName joinPropertyName = (JoinPropertyName) propertyName;
                            return new JoinPropertyName(
                                    joinPropertyName.getFeatureType(),
                                    joinPropertyName.getAlias(),
                                    joinPropertyName.getPropertyName());
                        }
                        return super.visit(propertyName, extraData);
                    }
                };
        visitor.setFIDValidator(new PrimaryKeyFIDValidator(this));
        split[0] = (Filter) split[0].accept(visitor, null);
        split[1] = (Filter) split[1].accept(visitor, null);

        return split;
    }

