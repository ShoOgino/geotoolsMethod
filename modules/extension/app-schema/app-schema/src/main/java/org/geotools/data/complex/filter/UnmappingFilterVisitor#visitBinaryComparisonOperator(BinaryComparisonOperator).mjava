    /**
     * Returns a CompareFilter of the same type than <code>filter</code>, but built on the unmapped
     * expressions pointing to the surrogate type attributes.
     *
     * @return the scalar product of the evaluation of both expressions
     */
    public Expression[][] visitBinaryComparisonOperator(BinaryComparisonOperator filter) {
        Expression left = filter.getExpression1();
        Expression right = filter.getExpression2();

        List leftExpressions = (List) left.accept(this, null);
        List rightExpressions = (List) right.accept(this, null);

        if (leftExpressions.size() == 0) {
            throw new IllegalStateException(left + " mapping not found");
        }

        if (rightExpressions.size() == 0) {
            throw new IllegalStateException(right + " mapping not found");
        }

        Expression[][] product = buildExpressionsMatrix(leftExpressions, rightExpressions);

        return product;
    }

