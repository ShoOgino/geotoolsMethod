    /**
     * see {@link org.geotools.filter.AttributeExpressionImpl#evaluate(Object)}
     */
    @Override
    public Object evaluate(Object object) {
        if (object == null) {
            return null;
        }

        // only simple/complex features are supported
        if (!(object instanceof Feature)) {
            throw new UnsupportedOperationException(
                    "Expecting a feature to apply filter, but found: " + object);
        }

        // if (object instanceof FeatureImpl) {
        // AttributeExpressionImpl exp = new AttributeExpressionImpl(attPath, new Hints(
        // FeaturePropertyAccessorFactory.NAMESPACE_CONTEXT, namespaces));
        // List<Object> values = new ArrayList<Object>(1);
        // values.add(exp.evaluate(object));
        // return values;
        // }

        List<Feature> roots = new ArrayList<Feature>();
        roots.add((Feature) object);
        
//        if (isConditional()) {
//            fullSteps = XPath.steps(((Feature) object).getDescriptor(), this.attPath, this.namespaceSupport);            
//            String fTypeString = function.evaluate(object, String.class);
//            if (fTypeString != null) {
//                Name fTypeName = Types.degloseName(fTypeString, this.namespaceSupport);
//                try {
//                    FeatureSource<FeatureType, Feature> fSource = DataAccessRegistry.getFeatureSource(fTypeName);
//                    if (fSource != null && fSource instanceof MappingFeatureSource) {
//                        mappings = ((MappingFeatureSource) fSource).getMapping();
//                    } else {
//                        return null;
//                    }
//                } catch (IOException e) {
//                    return null;
//                }
//            } else {
//                return null;
//            }
//        }

        return getValues(0, 0, roots, mappings, null);
    }

