    public Object visit(PropertyIsBetween filter, Object arg1) {
        Expression expression = filter.getExpression();
        Expression lower = filter.getLowerBoundary();
        Expression upper = filter.getUpperBoundary();

        List expressions = (List) expression.accept(this, null);
        List lowerExpressions = (List) lower.accept(this, null);
        List upperExpressions = (List) upper.accept(this, null);

        final int combinedSize =
                expressions.size() * lowerExpressions.size() * upperExpressions.size();
        List<Filter> combinedFilters = new ArrayList<>(combinedSize);

        for (Object lowerExpression : lowerExpressions) {
            Expression floor = (Expression) lowerExpression;
            for (Object o : expressions) {
                Expression prop = (Expression) o;
                for (Object upperExpression : upperExpressions) {
                    Expression roof = (Expression) upperExpression;
                    Filter newFilter = ff.between(prop, floor, roof, filter.getMatchAction());
                    combinedFilters.add(newFilter);
                }
            }
        }

        Filter unrolled = combineOred(combinedFilters);
        return unrolled;
    }

