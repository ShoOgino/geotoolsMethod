    private AttributeDescriptor retypeAddingDefaultGeometry(AttributeDescriptor descriptor,
            String defaultGeomXPath) {
        AttributeDescriptor newDescriptor = descriptor;
        FeatureType type = (FeatureType) descriptor.getType();

        GeometryDescriptor geom = getDefaultGeometryDescriptor(type, defaultGeomXPath);
        if (geom != null) {
            FeatureTypeFactoryImpl ftf = new ComplexFeatureTypeFactoryImpl();

            String defGeomNamespace = type.getName().getNamespaceURI();
            String defGeomLocalName = ComplexFeatureConstants.DEFAULT_GEOMETRY_LOCAL_NAME;
            GeometryDescriptor defGeom = ftf.createGeometryDescriptor(geom.getType(),
                    new NameImpl(defGeomNamespace, defGeomLocalName), geom.getMinOccurs(),
                    geom.getMaxOccurs(), geom.isNillable(), geom.getDefaultValue());

            Collection<PropertyDescriptor> descriptors = new HashSet<>(type.getDescriptors());
            descriptors.add(defGeom);

            FeatureType newType = ftf.createFeatureType(type.getName(), descriptors, defGeom,
                    type.isAbstract(), type.getRestrictions(), type.getSuper(),
                    type.getDescription());
            newType.getUserData().putAll(type.getUserData());

            newDescriptor = new AttributeDescriptorImpl(newType, descriptor.getName(),
                    descriptor.getMinOccurs(), descriptor.getMaxOccurs(), descriptor.isNillable(),
                    descriptor.getDefaultValue());
            newDescriptor.getUserData().putAll(descriptor.getUserData());
        } else {
            throw new IllegalArgumentException(String.format(
                    "Default geometry descriptor could not be found for type \"%s\" at x-path \"%s\"",
                    descriptor.getName().toString(), defaultGeomXPath));
        }

        return newDescriptor;
    }

