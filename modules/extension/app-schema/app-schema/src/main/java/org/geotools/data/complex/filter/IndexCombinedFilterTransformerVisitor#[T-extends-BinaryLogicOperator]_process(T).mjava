    private <T extends BinaryLogicOperator> T process(T filter) {
        // is this the logic-operator to replace?
        if (filter.equals(indexedParentLogicOperator)) {
            // build AND/OR children:
            List<Filter> gfilters = new ArrayList<>();
            // add ID IN () filter
            gfilters.add(idInFilter);
            // add non-indexed filters (duplicates):
            indexedParentLogicOperator
                    .getChildren()
                    .stream()
                    .filter(f -> indexedFilters.stream().noneMatch(i -> i.equals(f)))
                    .forEach(f -> gfilters.add(duplicateFilter(f)));
            // build replace operator filter
            return createOperator(filter, gfilters);
        } else {
            return null;
        }
    }

