    public DataAccess<FeatureType, Feature> createDataStore(
            Map<String, ?> params,
            boolean hidden,
            DataAccessMap sourceDataStoreMap,
            final Set<AppSchemaDataAccess> registeredAppSchemaStores,
            URL parentUrl)
            throws IOException {

        URL configFileUrl = (URL) AppSchemaDataAccessFactory.URL.lookUp(params);
        XMLConfigDigester configReader = new XMLConfigDigester();
        AppSchemaDataAccessDTO config = configReader.parse(configFileUrl);

        // load related types that are mapped separately, and not visible on their own
        // this is when the related types are not feature types, so they don't appear
        // on getCapabilities, and getFeature also shouldn't return anything etc.
        List<String> includes = config.getIncludes();
        Map<String, Object> extendedParams = new HashMap<>(params);
        for (String include : includes) {
            extendedParams.put("url", buildIncludeUrl(configFileUrl, include));
            // this will register the related data access, to enable feature chaining;
            // sourceDataStoreMap is passed on to keep track of the already created source data
            // stores
            // and avoid creating the same data store twice (this enables feature iterators sharing
            // the same transaction to re-use the connection instead of opening a new one for each
            // joined type)
            createDataStore(
                    extendedParams,
                    true,
                    sourceDataStoreMap,
                    registeredAppSchemaStores,
                    parentUrl == null ? configFileUrl : parentUrl);
        }

        Set<FeatureTypeMapping> mappings =
                AppSchemaDataAccessConfigurator.buildMappings(config, sourceDataStoreMap);

        AppSchemaDataAccess dataStore = new AppSchemaDataAccess(mappings, hidden);
        dataStore.url = configFileUrl;
        dataStore.parentUrl = parentUrl;
        registeredAppSchemaStores.add(dataStore);
        return dataStore;
    }

