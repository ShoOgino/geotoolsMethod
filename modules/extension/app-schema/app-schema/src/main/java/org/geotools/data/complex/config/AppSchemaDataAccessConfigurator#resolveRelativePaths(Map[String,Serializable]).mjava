    /**
     * Resolves any source datastore parameter settled as a file path relative to the location of
     * the xml mappings configuration file as an absolute path and returns a new Map with it.
     *
     * @return parameter map with resolved file url
     */
    private Map<String, Serializable> resolveRelativePaths(
            final Map<String, Serializable> datastoreParams) {
        Map<String, Serializable> resolvedParams = new HashMap<>();

        AppSchemaDataAccessConfigurator.LOGGER.entering(
                getClass().getName(), "resolveRelativePaths");
        for (Map.Entry<String, Serializable> entry :
                (Set<Map.Entry<String, Serializable>>) datastoreParams.entrySet()) {
            String key = (String) entry.getKey();
            String value = (String) entry.getValue();

            if (value != null && value.startsWith("file:")) {
                // a parameter prefix of "file:" is the only case that will be resolved
                // any file paths entered without this prefix will remain unchanged
                String oldValue = value;
                String resolvedDataPath = null;
                String inputDataPath = (String) value.substring("file:".length());
                File f = new File(inputDataPath);

                if (!f.isAbsolute()) {
                    AppSchemaDataAccessConfigurator.LOGGER.fine(
                            "resolving original parameter "
                                    + value
                                    + " for datastore parameter "
                                    + key);
                    try {
                        // use of URL here should be safe as the base schema url should
                        // not yet have undergone any conversion to file or
                        // encoding/decoding
                        URL mappingFileUrl = new URL(config.getBaseSchemasUrl());
                        AppSchemaDataAccessConfigurator.LOGGER.finer(
                                "mapping file URL is " + mappingFileUrl.toString());

                        String mappingFileDirPath = URLs.urlToFile(mappingFileUrl).getParent();
                        AppSchemaDataAccessConfigurator.LOGGER.finer(
                                "mapping file parent directory is " + mappingFileDirPath);

                        // FilenameUtils.concat handles a number of system-dependent issues here
                        // but it might be better to add this method to DataUtilities
                        resolvedDataPath = FilenameUtils.concat(mappingFileDirPath, inputDataPath);
                        if (resolvedDataPath == null) {
                            throw new RuntimeException(
                                    "Relative path to datastore is incompatible with"
                                            + " the base path - check double dot steps.");
                        }
                    } catch (Exception e) {
                        AppSchemaDataAccessConfigurator.LOGGER.throwing(
                                getClass().getName(), "resolveRelativePaths", e);
                        throw new RuntimeException(e);
                    }
                } else {
                    resolvedDataPath = inputDataPath;
                }
                AppSchemaDataAccessConfigurator.LOGGER.finer(
                        "Path to data has been resolved to " + resolvedDataPath);

                /*
                 * Shapefile expects the protocol "file:" at the beginning of the parameter value,
                 * other file-based datastores do not. We can distinguish shapefiles from other
                 * cases because the key is "url" and as of 2010-09-25 no other file-based datastore
                 * uses this key (properties files use the key "directory"). If a new file-based
                 * datastore is created, everything will work fine provided the key "url" is used if
                 * and only if the datastore expects a parameter value starting with "file:"
                 */
                if ("url".equals(key) || key.startsWith("WSDataStoreFactory")) {
                    value = "file:" + resolvedDataPath;
                } else {
                    value = resolvedDataPath;
                }
                AppSchemaDataAccessConfigurator.LOGGER.fine(
                        "Resolved " + oldValue + " -> " + value);
            }
            resolvedParams.put(key, value);
        }
        return resolvedParams;
    }

