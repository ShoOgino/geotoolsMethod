    private void getNestedClientProperties(NestedAttributeMapping mapping, List<Feature> features,
            List<Object> values, boolean isXlinkHref) {
        FeatureTypeMapping nextFMapping = null;
        for (Feature f : features) {
            try {
                nextFMapping = mapping.getFeatureTypeMapping(f);
                if (nextFMapping != null) {
                    List<Feature> nestedFeatures;
                    nestedFeatures = getNestedFeatures(f, mapping, nextFMapping);
                    if (nestedFeatures == null || nestedFeatures.isEmpty()) {
                        continue;
                    }
                    if (isXlinkHref) {
                        // xlink:href mapping done in the root mapping file
                        // there is no need to find attributeMapping in the nested feature type mapping
                        getClientProperties(mapping, values, nestedFeatures);
                    } else {
                        List<AttributeMapping> nestedAttMappings = nextFMapping
                            .getAttributeMappingsIgnoreIndex(mapping.getTargetXPath());
                        AttributeMapping attMapping = null;
                        boolean found = false;
                        if (!nestedAttMappings.isEmpty()) {
                            attMapping = nestedAttMappings.get(0);
                            found = getClientProperties(attMapping, values, nestedFeatures);
                        }
                        if (!found && getLastStep().isId()) {
                            setIdValues(attMapping, nestedFeatures, values);
                        }
                    }
                }
            } catch (IOException e) {
                throw new RuntimeException("Failed evaluating filter expression: '" + attPath
                        + "'. Caused by: " + e.getMessage());
            } catch (IllegalArgumentException e) {
                // might be a polymorphic case where it's looking for an attribute
                // from another type
                // that doesn't match this, but might match another database row
                // so just continue
                continue;
            }
        }

    }

