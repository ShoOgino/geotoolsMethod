    /**
     * Returns true if the type is either <code>xs:anyType</code> or is derived from <code>
     * xs:anyType</code> by extension and has mixed content.
     *
     * <p>Example:
     *
     * <pre>
     *  &lt;complexType name="TestType"&gt;
     *    &lt;complexContent&gt;
     *      &lt;extension base="anyType"&gt;
     *        &lt;attribute name="attr1" type="string" /&gt;
     *      &lt;/extension&gt;
     *    &lt;/complexContent&gt;
     *  &lt;/complexType&gt;
     * </pre>
     *
     * @param type
     * @return
     */
    public static boolean canHaveTextContent(PropertyType type) {
        if (type == XSSchema.ANYTYPE_TYPE) {
            return true;
        }
        PropertyType superType = type.getSuper();
        if (superType == XSSchema.ANYTYPE_TYPE) {
            // type was derived from xs:anyType: check derivation mode and content type category
            Map<Object, Object> userData = type.getUserData();
            if (userData != null && userData.get(XSDTypeDefinition.class) != null) {
                XSDTypeDefinition typeDef =
                        (XSDTypeDefinition) userData.get(XSDTypeDefinition.class);
                if (typeDef instanceof XSDComplexTypeDefinition) {
                    XSDComplexTypeDefinition complexTypeDef = (XSDComplexTypeDefinition) typeDef;
                    XSDContentTypeCategory category = complexTypeDef.getContentTypeCategory();
                    XSDDerivationMethod derivMethod = complexTypeDef.getDerivationMethod();

                    boolean hasMixedContent = XSDContentTypeCategory.MIXED_LITERAL.equals(category);
                    boolean isExtension = XSDDerivationMethod.EXTENSION_LITERAL.equals(derivMethod);
                    return isExtension && hasMixedContent;
                }
            } else {
                if (LOGGER.isLoggable(Level.FINER)) {
                    LOGGER.finer("No XSDTypeDefinition found for type " + type.getName());
                }
            }
        }
        return false;
    }

