    @Override
    public Object evaluate(Object feature) {
        if (!(getExpression(0) instanceof PropertyName)) {
            throw new IllegalArgumentException(
                    "literate function first argument must be index property name");
        }
        PropertyName indexName = (PropertyName) getExpression(0);
        Integer size = getExpression(1).evaluate(feature, Integer.class);
        if (size == null || size < 0) {
            throw new IllegalArgumentException(
                    "literate function requires non-null, positive size");
        }

        List<Object> result = new ArrayList<>();
        for (int i = 0; i < size; i++) {
            final int index = i;
            ExpressionVisitor indexVisitor =
                    new DuplicatingFilterVisitor() {
                        public Object visit(PropertyName name, Object data) {
                            if (name.equals(indexName)) {
                                return new LiteralExpressionImpl(index);
                            }
                            return name;
                        };
                    };
            Expression indexedExpression = (Expression) getExpression(2).accept(indexVisitor, null);
            result.add(indexedExpression.evaluate(feature));
        }

        return result;
    }

