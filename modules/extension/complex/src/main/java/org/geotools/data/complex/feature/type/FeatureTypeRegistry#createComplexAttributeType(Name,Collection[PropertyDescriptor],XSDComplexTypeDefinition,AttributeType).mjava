    /** NOTE: to be called only by {@link #createType(Name, XSDTypeDefinition)} */
    private AttributeType createComplexAttributeType(
            final Name assignedName,
            final Collection<PropertyDescriptor> schema,
            final XSDComplexTypeDefinition typeDefinition,
            final AttributeType superType) {

        boolean isAbstract = false; // TODO
        List<Filter> restrictions = Collections.emptyList();
        InternationalString description = null; // TODO

        AttributeType type;
        if (helper.isFeatureType(typeDefinition)) {
            type =
                    typeFactory.createFeatureType(
                            assignedName,
                            schema,
                            null,
                            isAbstract,
                            restrictions,
                            superType,
                            description);
        } else {
            boolean isIdentifiable = helper.isIdentifiable(typeDefinition);
            type =
                    typeFactory.createComplexType(
                            assignedName,
                            schema,
                            isIdentifiable,
                            isAbstract,
                            restrictions,
                            superType,
                            description);
        }
        return type;
    }

