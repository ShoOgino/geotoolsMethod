    /**
     * Checks if the visitor is accessing only properties available in the specified feature type,
     * checks if the target schema contains transformed attributes or as a special case, if it's a
     * count visitor accessing no properties at all
     *
     * @param visitor
     * @param featureType
     * @return
     */
    protected boolean isTypeCompatible(FeatureVisitor visitor, SimpleFeatureType featureType) {
        if (visitor instanceof CountVisitor) {
            // pass through if the CountVisitor has been recognized
            return true;
        } else if (visitor instanceof FeatureAttributeVisitor) {
            // allow passing down if the properties requested are not computed not renamed,
            // thus can be passed to the delegate collection as is
            for (Expression e : ((FeatureAttributeVisitor) visitor).getExpressions()) {
                if (!(e instanceof PropertyName)) {
                    return false;
                }
                PropertyName externalName = (PropertyName) e;
                Expression attributeExpression =
                        transformer.getExpression(externalName.getPropertyName());
                if (!(attributeExpression instanceof PropertyName)) {
                    return false;
                }
                if (!((PropertyName) attributeExpression)
                        .getPropertyName()
                        .equals(externalName.getPropertyName())) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }

