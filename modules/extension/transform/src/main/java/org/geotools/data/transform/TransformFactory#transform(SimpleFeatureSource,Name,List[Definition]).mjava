    /**
     * Creates a transformed SimpleFeatureSource/SimpleFeatureStore from the original source, giving
     * it a certain name and a set of computed properties
     *
     * @returns A transformed SimpleFeatureStore in case at least one of the definitions was
     *     invertible, a transformed SimpleFeatureSource otherwise
     */
    public static SimpleFeatureSource transform(
            SimpleFeatureSource source, Name name, List<Definition> definitions)
            throws IOException {
        if (source instanceof SimpleFeatureStore) {
            try {
                return new TransformFeatureStore((SimpleFeatureStore) source, name, definitions);
            } catch (IllegalArgumentException e) {
                LOGGER.log(
                        Level.FINEST,
                        "Could not transform the provided store, will turn it into a read "
                                + "only SimpleFeatureSource instead (this is not a problem unless you "
                                + "actually needed to write on the store)",
                        e);
            }
        }

        return new TransformFeatureSource(source, name, definitions);
    }

