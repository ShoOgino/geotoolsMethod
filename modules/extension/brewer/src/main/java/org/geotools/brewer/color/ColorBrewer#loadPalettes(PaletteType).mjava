    /**
     * Loads into the ColorBrewer instance the set of palettes which have the PaletteType matching
     * that of the parameter.
     *
     * @param type The PaletteType for the palettes to load.
     */
    public void loadPalettes(PaletteType type) {
        if (type.equals(ALL)) {
            loadPalettes();

            return;
        } else if (type.equals(SUITABLE_RANGED)) {
            loadPalettes(SEQUENTIAL);
            loadPalettes(DIVERGING);

            return;
        } else if (type.equals(SUITABLE_UNIQUE)) {
            loadPalettes(QUALITATIVE);

            return;
        }

        if (type.getName() == null) {
            return;
        }

        // force to lower case with US locale for http://jira.codehaus.org/browse/UDIG-1265
        String paletteSet = type.getName().toLowerCase(Locale.US);
        URL url = getClass().getResource("resources/" + paletteSet + ".xml");

        try (InputStream stream = url.openStream()) {
            load(stream, type);
        } catch (IOException e) {
            LOGGER.log(Level.SEVERE, "couldn't open input stream to load palette", e);

            return;
        }
    }

