    /**
     * <p>
     * Converts an array of styleExpressions and attributes into Filters
     * </p>
     * <p>
     * <code>styleExpression[0] = "1..5";</code><br>
     * <code>styleExpression[1] = "5..10";</code><br>
     * <code>styleExpression[2] = "11, -13";</code><br>
     * <code>---></code><br>
     * <code>filter[0] = [[1 <= attr] AND [attr < 5]]</code><br>
     * <code>filter[1] = [[6 <= attr] AND [attr <= 10]]</code><br>
     * <code>filter[2] = [[attr = 11] OR [attr = -13]]</code>
     * </p>
     *
     * @param styleExpression
     *            strings of ranged expressions "lowValue..highValue" or
     *            explicit values "value1, value2"
     * @param featureType
     * @param attributeTypeName
     * @return an array with all the filters
     * @throws IllegalFilterException
     */
    public static Filter[] toFilter(String[] styleExpression, SimpleFeatureType[] featureType,
        String[] attributeTypeName) throws IllegalFilterException {
        Filter[] filter = new Filter[styleExpression.length];

        // prepare the styleExpressions (fix out if they are ranged, and if so
        // their min and max values too
        boolean[] isRangedExpr = new boolean[styleExpression.length];
        List<String> min = new ArrayList<String>();
        String[] max = new String[styleExpression.length];

        for (int i = 0; i < styleExpression.length; i++) {
            if (isRanged(styleExpression[i])) {
                isRangedExpr[i] = true;

                String[] exprPart = styleExpression[i].split("\\.\\."); //$NON-NLS-1$
                min.add(exprPart[0]);
                max[i] = exprPart[1];
            } else {
                isRangedExpr[i] = false;
            }
        }

        // create each filter
        for (int i = 0; i < styleExpression.length; i++) {
            // is it ranged or specific?
            if (isRangedExpr[i]) {
                boolean upperBoundClosed = true;

                // check for lower bounds of the same value as the current upper
                // bound
                if (min.contains(max[i])) {
                    upperBoundClosed = false;
                }

                filter[i] = toRangedFilter(styleExpression[i], featureType[i],
                        attributeTypeName[i], upperBoundClosed);
            } else { // specific
                filter[i] = toExplicitFilter(styleExpression[i], featureType[i],
                        attributeTypeName[i]);
            }
        }

        return filter;
    }

