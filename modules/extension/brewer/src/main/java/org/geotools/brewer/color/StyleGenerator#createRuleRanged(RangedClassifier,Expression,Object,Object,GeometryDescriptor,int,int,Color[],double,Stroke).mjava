    private static Rule createRuleRanged(RangedClassifier classifier, Expression expression,
        Object localMin, Object localMax, GeometryDescriptor geometryAttrType, int i,
        int elseMode, Color[] colors, double opacity, Stroke defaultStroke)
        throws IllegalFilterException {
        // 1.0 --> 1
        // (this makes our styleExpressions more readable. Note that the
        // filter always converts to double, so it doesn't care what we
        // do).
        localMin = chopInteger(localMin);
        localMax = chopInteger(localMax);

        // generate a title
        String title = classifier.getTitle(i);

        // construct filters
        Filter filter = null;

        if (localMin == localMax) {
            // build filter: =
            filter = ff.equals(expression, ff.literal(localMax)); 
        } else {
            // build filter: [min <= x] AND [x < max]
            Filter lowBoundFilter = null;
            Filter hiBoundFilter = null;
            
            if(localMin != null) {
                lowBoundFilter = ff.greaterOrEqual(expression, ff.literal(localMin));
            }
            if(localMax != null) {
                // if this is the global maximum, include the max value
                if (i == (classifier.getSize() - 1)) {
                    hiBoundFilter = ff.lessOrEqual(expression, ff.literal(localMax));
                } else {
                    hiBoundFilter = ff.less(expression, ff.literal(localMax));
                }
            }

            if ((localMin != null) && (localMax != null)) {
                filter = ff.and(lowBoundFilter, hiBoundFilter);
            } else if ((localMin == null) && (localMax != null)) {
                filter = hiBoundFilter;
            } else if ((localMin != null) && (localMax == null)) {
                filter = lowBoundFilter;
            }
        }

        // create a symbolizer
        Symbolizer symb = createSymbolizer(geometryAttrType, getColor(elseMode, colors, i),
                opacity, defaultStroke);

        // create a rule
        Rule rule = sb.createRule(symb);
        rule.setFilter(filter);
        rule.setTitle(title);
        rule.setName(getRuleName(i + 1));

        return rule;
    }

