    /**
     * Creates a filter for a range of values.
     *
     * <p>Examples:<br>
     * "1..5", closed=true --> [[1 <= attr] AND [attr <= 5]]<br>
     * "1..10", closed=false --> [[1 <= attr] AND [attr < 10]] "..10, closed=true --> [attr <= 10]
     *
     * @param styleExpression the ranged style expression (minValue..maxValue)
     * @param featureType the featureType
     * @param attributeTypeName the attributeTypeName whose values correspond to
     * @param upperBoundClosed does the upper bound include the max value? (true: <=, false: <)
     * @return a filter
     * @throws IllegalFilterException
     */
    public static Filter toRangedFilter(
            String styleExpression,
            SimpleFeatureType featureType,
            String attributeTypeName,
            boolean upperBoundClosed)
            throws IllegalFilterException {
        PropertyName attrib = ff.property(attributeTypeName);
        String[] strs = styleExpression.split("\\.\\."); // $NON-NLS-1$

        if (strs.length != 2) {
            throw new IllegalArgumentException(
                    "A ranged filter could not be created from the styleExpression given.");
        }

        Literal localMin = ff.literal(strs[0]);
        Literal localMax = ff.literal(strs[1]);
        Filter lowerBound = ff.lessOrEqual(localMin, localMax);
        Filter upperBound;
        if (upperBoundClosed) {
            upperBound = ff.lessOrEqual(attrib, localMax);
        } else {
            upperBound = ff.less(attrib, localMax);
        }

        return ff.and(lowerBound, upperBound);
    }

