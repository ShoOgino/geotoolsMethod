    /**
     * Takes an {@link Expression} and encodes it as YSLD. Literals are encoded as Strings.
     * Concatenation expressions are removed, as they are implicit in the YSLD syntax.
     * Other non-literal expressions are wrapped in ${}.
     *
     * If the resulting string can be converted to the number, returns an appropriate {@link Number} object.
     * Otherwise returns a {@link String}.
     * Returns null if the passed expressison was null
     *
     *
     * @param expr Expression to encode
     * @param isname
     * @return {@link String} or {@link Number} representation of expr, or null if expr is null.
     */
    Object toObjOrNull(Expression expr, boolean isname) {
        if (isNull(expr))
            return null;

        List<Expression> subExpressions = Util.splitConcatenates(expr);
        StringBuilder builder = new StringBuilder();
        for (Expression subExpr : subExpressions) {
            if (isNull(subExpr)) {
                // Do nothing
            } else if (subExpr instanceof Literal) {
                builder.append(escapeForEmbededCQL(((Literal) subExpr).getValue().toString()));
            } else {
                builder.append("${").append(escapeForEmbededCQL(ECQL.toCQL(subExpr))).append("}");
            }
        }

        Object result = Util.makeNumberIfPossible(builder.toString());

        return result;
    }

