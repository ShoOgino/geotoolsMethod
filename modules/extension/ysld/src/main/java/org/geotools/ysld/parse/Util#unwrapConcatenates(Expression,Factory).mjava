    /**
     * Simplifies an {@link Expression} which may contain multiple {@link ConcatenateFunction} into
     * a single top-level {@link ConcatenateFunction} with a flat list of parameters.
     *
     * <p>If the passed {@link Expression} performs no concatenation, it is returned as-is. If the
     * passed {@link Expression} represents an empty value, a {@link Literal} expression with value
     * null is returned.
     *
     * @param factory Function factory
     * @return Simplified expression
     */
    public static Expression unwrapConcatenates(Expression expr, Factory factory) {
        List<Expression> list = splitConcatenates(expr);
        if (list.isEmpty()) {
            return factory.filter.literal(null);
        } else if (list.size() == 1) {
            return list.get(0);
        } else {
            return factory.filter.function("Concatenate", list.toArray(new Expression[] {}));
        }
    }

