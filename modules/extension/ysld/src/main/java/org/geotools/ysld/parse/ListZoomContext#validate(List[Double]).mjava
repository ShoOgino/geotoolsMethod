    /**
     * Checks if the list contains a decreasing sequence of finite, positive, non-null values.
     *
     * @param scales
     * @throws IllegalArgumentException if the values are not decreasing, positive, and finite.
     * @throws NullPointerException if any values are null.
     */
    public static void validate(List<Double> scales) {
        double last = Double.POSITIVE_INFINITY;
        for (double x : scales) {
            if (x >= last)
                throw new IllegalArgumentException("Scale denominator list must be decreasing");
            if (x <= 0) throw new IllegalArgumentException("Scale Denominators must be positive");
            if (Double.isInfinite(x) || Double.isNaN(x))
                throw new IllegalArgumentException("Scale Denominators must be finite");
        }
    }

