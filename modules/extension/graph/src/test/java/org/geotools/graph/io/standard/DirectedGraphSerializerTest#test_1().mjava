    /**
     * Create a perfect binary tree, serialize it and deserialize it. <br>
     * <br>
     * Expected: 1. Same structure before and after.
     */
    public void test_1() {
        final int k = 5;
        Object[] obj = GraphTestUtil.buildPerfectBinaryTree(builder(), k);
        final Node root = (Node) obj[0];
        final Map obj2node = (Map) obj[1];

        try {
            File victim = File.createTempFile("graph", null);
            victim.deleteOnExit();

            serializer().setProperty(SerializedReaderWriter.FILENAME, victim.getAbsolutePath());

            serializer().write(builder().getGraph());

            Graph before = builder().getGraph();
            Graph after = serializer().read();

            // ensure same number of nodes and edges
            assertEquals(before.getNodes().size(), after.getNodes().size());
            assertEquals(before.getEdges().size(), after.getEdges().size());

            // ensure same structure
            GraphVisitor visitor =
                    new GraphVisitor() {
                        public int visit(Graphable component) {
                            DirectedNode n = (DirectedNode) component;
                            String id = (String) n.getObject();

                            assertNotNull(obj2node.get(id));

                            StringTokenizer st = new StringTokenizer(id, ".");

                            if (st.countTokens() == 1) {
                                // root
                                assertEquals(2, n.getDegree());

                                Node n0 = n.getEdges().get(0).getOtherNode(n);
                                Node n1 = n.getEdges().get(1).getOtherNode(n);

                                assertTrue(
                                        n0.getObject().equals("0.0") && n1.getObject().equals("0.1")
                                                || n0.getObject().equals("0.1")
                                                        && n1.getObject().equals("0.0"));
                            } else if (st.countTokens() == k + 1) {
                                // leaf
                                assertEquals(1, n.getDegree());

                                Node parent = ((DirectedEdge) n.getInEdges().get(0)).getInNode();
                                String parentid = (String) parent.getObject();

                                assertEquals(parentid, id.substring(0, id.length() - 2));
                            } else {
                                // internal
                                assertEquals(3, n.getDegree());

                                String parent =
                                        ((DirectedEdge) n.getInEdges().get(0))
                                                .getInNode()
                                                .getObject()
                                                .toString();
                                String c0 =
                                        ((DirectedEdge) n.getOutEdges().get(0))
                                                .getOutNode()
                                                .getObject()
                                                .toString();
                                String c1 =
                                        ((DirectedEdge) n.getOutEdges().get(1))
                                                .getOutNode()
                                                .getObject()
                                                .toString();

                                String parentid = id.substring(0, id.length() - 2);

                                assertTrue(
                                        parent.equals(parentid)
                                                        && c0.equals(id + ".0")
                                                        && c1.equals(id + ".1")
                                                || parent.equals(parentid)
                                                        && c1.equals(id + ".0")
                                                        && c0.equals(id + ".1"));
                            }

                            return (0);
                        }
                    };
            after.visitNodes(visitor);

        } catch (Exception e) {
            java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e);
            fail();
        }
    }

