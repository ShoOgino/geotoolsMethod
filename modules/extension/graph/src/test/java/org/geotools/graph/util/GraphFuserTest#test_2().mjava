    /**
     * Create a graph with no bifurcations and a cycle between containing three nodes and fuse it.
     * <br>
     * <br>
     * Expected: 1. The graph should have 4 nodes and 4 edges. <br>
     * <br>
     * _____ _____ / \ / \ O---O-...-O---O---O-...-O---O ==FUSER=> O--...-O------O-...--O
     */
    @Test
    public void test_2() {
        final int nnodes = 100;
        final int cyc = 50;

        Node[] ends = GraphTestUtil.buildNoBifurcations(generator(), nnodes);
        generator().add(new Object[] {String.valueOf(cyc), String.valueOf(cyc + 2)});
        GraphGenerator fused = createGenerator();

        GraphFuser fuser =
                new GraphFuser(
                        generator().getGraph(), generator().getGraphBuilder(), createEdgeMerger());
        Assert.assertTrue(fuser.fuse());

        Assert.assertEquals(4, generator().getGraph().getNodes().size());
        Assert.assertEquals(4, generator().getGraph().getEdges().size());

        GraphVisitor visitor =
                new GraphVisitor() {
                    public int visit(Graphable component) {
                        String id = (String) component.getObject();
                        Assert.assertTrue(
                                (id.equals("0") || id.equals(String.valueOf(nnodes - 1)))
                                        || (id.equals(String.valueOf(cyc))
                                                || id.equals(String.valueOf(cyc + 2))));
                        return (0);
                    }
                };
        generator().getGraph().visitNodes(visitor);

        visitor =
                new GraphVisitor() {
                    public int visit(Graphable component) {
                        Edge e = (Edge) component;
                        String id0 = (String) e.getNodeA().getObject();
                        String id1 = (String) e.getNodeB().getObject();

                        Assert.assertTrue(
                                (id0.equals("0") && id1.equals(String.valueOf(cyc)))
                                        || (id0.equals(String.valueOf(cyc)) && id1.equals("0"))
                                        || (id0.equals(String.valueOf(cyc))
                                                && id1.equals(String.valueOf(cyc + 2)))
                                        || (id0.equals(String.valueOf(cyc + 2))
                                                && id1.equals(String.valueOf(cyc)))
                                        || (id0.equals(String.valueOf(cyc + 2))
                                                && id1.equals(String.valueOf(nnodes - 1)))
                                        || (id0.equals(String.valueOf(nnodes - 1))
                                                && id1.equals(String.valueOf(cyc + 2))));

                        return (0);
                    }
                };
        generator().getGraph().visitEdges(visitor);
    }

