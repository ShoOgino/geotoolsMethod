    /**
     * Create a no bifurcation graph and fuse it. <br>
     * <br>
     * Expected: 1. Resulting graph should only have 2 nodes and 1 edge. <br>
     * <br>
     * O---O---O-...-O---O---O ==FUSER=> O-------...-------O
     */
    @Test
    public void test_0() {
        final int nnodes = 100;
        Node[] ends = GraphTestUtil.buildNoBifurcations(generator(), nnodes);
        GraphGenerator fused = createGenerator();

        GraphFuser fuser =
                new GraphFuser(
                        generator().getGraph(), generator().getGraphBuilder(), createEdgeMerger());
        Assert.assertTrue(fuser.fuse());

        Assert.assertEquals(2, generator().getGraph().getNodes().size());
        Assert.assertEquals(1, generator().getGraph().getEdges().size());

        GraphVisitor visitor =
                new GraphVisitor() {
                    public int visit(Graphable component) {
                        String id = (String) component.getObject();
                        Assert.assertTrue(id.equals("0") || id.equals(String.valueOf(nnodes - 1)));
                        return (0);
                    }
                };
        generator().getGraph().visitNodes(visitor);

        visitor =
                new GraphVisitor() {
                    public int visit(Graphable component) {
                        Edge e = (Edge) component;
                        String id0 = (String) e.getNodeA().getObject();
                        String id1 = (String) e.getNodeB().getObject();

                        Assert.assertTrue(
                                (id0.equals("0") && id1.equals(String.valueOf(nnodes - 1)))
                                        || (id0.equals(String.valueOf(nnodes - 1))
                                                && id1.equals("0")));

                        return (0);
                    }
                };
        generator().getGraph().visitEdges(visitor);
    }

