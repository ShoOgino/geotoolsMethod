    @Test
    public void test_getRelated() {
        Iterator itr = m_edge.getRelated();

        OptDirectedEdge de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(de == m_inEdge || de == m_outEdge);

        de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(de == m_inEdge || de == m_outEdge);

        Assert.assertFalse(itr.hasNext());

        // add an edge that has the same nodes, in the same direction
        addSame();

        itr = m_edge.getRelated();

        de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(de == m_inEdge || de == m_outEdge || de == m_same);

        de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(de == m_inEdge || de == m_outEdge || de == m_same);

        de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(de == m_inEdge || de == m_outEdge || de == m_same);

        Assert.assertFalse(itr.hasNext());

        // add another edge in the same direction
        addSame2();

        itr = m_edge.getRelated();

        de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(de == m_inEdge || de == m_outEdge || de == m_same || de == m_same2);

        de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(de == m_inEdge || de == m_outEdge || de == m_same || de == m_same2);

        de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(de == m_inEdge || de == m_outEdge || de == m_same || de == m_same2);

        de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(de == m_inEdge || de == m_outEdge || de == m_same || de == m_same2);

        Assert.assertFalse(itr.hasNext());

        addOpp();
        // add an edge that has the same nodes, opposite direction
        m_edge.getInNode().addIn(m_opp);
        m_edge.getOutNode().addOut(m_opp);

        itr = m_edge.getRelated();

        de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(de == m_inEdge || de == m_outEdge || de == m_opp);

        de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(de == m_inEdge || de == m_outEdge || de == m_opp);

        de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(de == m_inEdge || de == m_outEdge || de == m_opp);

        Assert.assertFalse(itr.hasNext());

        // add another edge in opposite direction
        addOpp2();

        itr = m_edge.getRelated();

        de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(de == m_inEdge || de == m_outEdge || de == m_opp || de == m_opp2);

        de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(de == m_inEdge || de == m_outEdge || de == m_opp || de == m_opp2);

        de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(de == m_inEdge || de == m_outEdge || de == m_opp || de == m_opp2);

        de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(de == m_inEdge || de == m_outEdge || de == m_opp || de == m_opp2);

        Assert.assertFalse(itr.hasNext());

        // add loops
        addLoops();

        itr = m_edge.getRelated();

        de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(de == m_inEdge || de == m_outEdge || de == m_inloop || de == m_outloop);

        de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(de == m_inEdge || de == m_outEdge || de == m_inloop || de == m_outloop);

        de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(de == m_inEdge || de == m_outEdge || de == m_inloop || de == m_outloop);

        de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(de == m_inEdge || de == m_outEdge || de == m_inloop || de == m_outloop);

        Assert.assertFalse(itr.hasNext());

        // add an incoming edge to the out node and an outgoing edge to the in node
        addInOutEdges();

        itr = m_edge.getRelated();

        de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(
                de == m_inEdge || de == m_outEdge || de == m_inoutEdge || de == m_outinEdge);

        de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(
                de == m_inEdge || de == m_outEdge || de == m_inoutEdge || de == m_outinEdge);

        de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(
                de == m_inEdge || de == m_outEdge || de == m_inoutEdge || de == m_outinEdge);

        de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(
                de == m_inEdge || de == m_outEdge || de == m_inoutEdge || de == m_outinEdge);

        Assert.assertFalse(itr.hasNext());
    }

