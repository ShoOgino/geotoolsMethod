    /**
     * Create a simple graph with a single bifurcation and do a full traversal.
     *
     * <p>Exepected: 1. The traversal should stop at the bifurcating node. 2. Every node after the
     * bifurcating node should not be visited.
     */
    @Test
    public void test_3() {
        int nnodes = 100;
        final int bif = 50;
        Node[] ends = GraphTestUtil.buildSingleBifurcation(builder(), nnodes, bif);

        CountingWalker walker = new CountingWalker();
        NoBifurcationIterator iterator = createIterator();
        iterator.setSource(ends[0]);

        BasicGraphTraversal traversal =
                new BasicGraphTraversal(builder().getGraph(), walker, iterator);
        traversal.init();
        traversal.traverse();

        GraphVisitor visitor =
                new GraphVisitor() {
                    public int visit(Graphable component) {
                        if (component.getID() < bif) {
                            Assert.assertTrue(component.isVisited());
                        } else if (component.getID() >= bif) {
                            Assert.assertFalse(component.isVisited());
                        }

                        return (0);
                    }
                };
        builder().getGraph().visitNodes(visitor);
        Assert.assertEquals(walker.getCount(), nnodes - bif);
    }

