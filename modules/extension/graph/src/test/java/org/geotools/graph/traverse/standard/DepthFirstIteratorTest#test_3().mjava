    /**
     * Create a balanced binary tree and do a normal traversal starting at root. <br>
     * <br>
     * Expected: 1. Every node should be visited. 2. For each node, every node in one of its two
     * subtrees should have been visited before every node in the other subtree.
     */
    @Test
    public void test_3() {
        int k = 4;
        Object[] obj = GraphTestUtil.buildPerfectBinaryTree(builder(), k);
        Node root = (Node) obj[0];
        final Map obj2node = (Map) obj[1];

        CountingWalker walker =
                new CountingWalker() {
                    @Override
                    public int visit(Graphable element, GraphTraversal traversal) {
                        element.setCount(getCount());
                        return super.visit(element, traversal);
                    }
                };

        DepthFirstIterator iterator = createIterator();
        BasicGraphTraversal traversal =
                new BasicGraphTraversal(builder().getGraph(), walker, iterator);
        traversal.init();

        iterator.setSource(root);
        traversal.traverse();

        GraphVisitor visitor =
                component -> {
                    // ensure component visited
                    Assert.assertTrue(component.isVisited());

                    Node ln = (Node) obj2node.get(component.getObject().toString() + ".0");
                    Node rn = (Node) obj2node.get(component.getObject().toString() + ".1");

                    if (ln != null) {
                        Node n1 = ln;
                        Node n2 = rn;
                        if (ln.getCount() > rn.getCount()) {
                            n1 = rn;
                            n2 = ln;
                        }

                        Queue<Graphable> queue = new ArrayDeque<>(256);
                        queue.add(n1);

                        // ensure all subnodes of n1 visited before n2
                        while (!queue.isEmpty()) {
                            Node n = (Node) queue.remove();

                            ln = (Node) obj2node.get(n.getObject().toString() + ".0");
                            rn = (Node) obj2node.get(n.getObject().toString() + ".1");

                            if (ln == null) continue;

                            Assert.assertTrue(ln.getCount() < n2.getCount());
                            Assert.assertTrue(rn.getCount() < n2.getCount());

                            queue.add(ln);
                            queue.add(rn);
                        }
                    }
                    return 0;
                };

        builder().getGraph().visitNodes(visitor);

        // ensure nodes only visited once
        Assert.assertEquals(walker.getCount(), (int) Math.pow(2, k + 1) - 1);
    }

