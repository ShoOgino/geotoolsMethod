    public void test_getOutRelated() {
        Iterator itr = m_edge.getOutRelated();

        OptDirectedEdge de = (OptDirectedEdge) itr.next();
        assertTrue(de == m_outEdge);

        assertTrue(!itr.hasNext());

        // add same edge (shouldn't show up in iterator this time)
        addSame();

        itr = m_edge.getOutRelated();

        de = (OptDirectedEdge) itr.next();
        assertTrue(de == m_outEdge);

        assertTrue(!itr.hasNext());

        // add multiple same edge (shouldn't show up in iterator this time)
        addSame2();

        itr = m_edge.getOutRelated();

        de = (OptDirectedEdge) itr.next();
        assertTrue(de == m_outEdge);

        assertTrue(!itr.hasNext());

        // add opposite edge
        addOpp();

        itr = m_edge.getOutRelated();

        de = (OptDirectedEdge) itr.next();
        assertTrue(de == m_outEdge || de == m_opp);

        de = (OptDirectedEdge) itr.next();
        assertTrue(de == m_outEdge || de == m_opp);

        assertTrue(!itr.hasNext());

        // add another opposite edge
        addOpp2();

        itr = m_edge.getOutRelated();

        de = (OptDirectedEdge) itr.next();
        assertTrue(de == m_outEdge || de == m_opp || de == m_opp2);

        de = (OptDirectedEdge) itr.next();
        assertTrue(de == m_outEdge || de == m_opp || de == m_opp2);

        de = (OptDirectedEdge) itr.next();
        assertTrue(de == m_outEdge || de == m_opp || de == m_opp2);

        assertTrue(!itr.hasNext());

        // add loop
        addLoops();

        itr = m_edge.getOutRelated();

        de = (OptDirectedEdge) itr.next();
        assertTrue(de == m_outEdge || de == m_outloop);

        de = (OptDirectedEdge) itr.next();
        assertTrue(de == m_outEdge || de == m_outloop);

        assertTrue(!itr.hasNext());
    }

