    /**
     * Create a simple graph with no bifurcations and serialize, then deserialize <br>
     * <br>
     * Expected: 1. before and after graph should have same structure.
     */
    @Test
    public void test_0() throws Exception {
        final int nnodes = 100;
        GraphTestUtil.buildNoBifurcations(builder(), nnodes);
        File victim = File.createTempFile("graph", null);
        victim.deleteOnExit();

        m_serializer.setProperty(SerializedReaderWriter.FILENAME, victim.getAbsolutePath());

        m_serializer.write(builder().getGraph());

        Graph before = builder().getGraph();
        Graph after = m_serializer.read();

        // ensure same number of nodes and edges
        Assert.assertEquals(before.getNodes().size(), after.getNodes().size());
        Assert.assertEquals(before.getEdges().size(), after.getEdges().size());

        // ensure same graph structure
        GraphVisitor visitor =
                new GraphVisitor() {
                    public int visit(Graphable component) {
                        Edge e = (Edge) component;

                        Assert.assertEquals(e.getNodeA().getID(), e.getID());
                        Assert.assertEquals(e.getNodeB().getID(), e.getID() + 1);

                        return (0);
                    }
                };
        after.visitEdges(visitor);

        visitor =
                new GraphVisitor() {
                    public int visit(Graphable component) {
                        Node n = (Node) component;

                        if (n.getDegree() == 1) {
                            Assert.assertTrue(n.getID() == 0 || n.getID() == nnodes - 1);
                        } else {
                            Assert.assertEquals(2, n.getDegree());

                            Edge e0 = n.getEdges().get(0);
                            Edge e1 = n.getEdges().get(1);

                            Assert.assertTrue(
                                    (e0.getID() == n.getID() - 1 && e1.getID() == n.getID())
                                            || (e1.getID() == n.getID() - 1
                                                    && e0.getID() == n.getID()));
                        }

                        return (0);
                    }
                };
        after.visitNodes(visitor);
    }

