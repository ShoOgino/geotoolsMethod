    /**
     * Create a simple graph with no bifurcations and serialize, then deserialize <br>
     * <br>
     * Expected: 1. before and after graph should have same structure.
     */
    @Override
    @Test
    public void test_0() {
        final int nnodes = 100;
        GraphTestUtil.buildNoBifurcations(builder(), nnodes);

        try {
            // String filename = System.getProperty("user.dir") + File.sptmp.tmp";
            File victim = File.createTempFile("graph", null);
            victim.deleteOnExit();

            serializer().setProperty(SerializedReaderWriter.FILENAME, victim.getAbsolutePath());

            serializer().write(builder().getGraph());

            Graph before = builder().getGraph();
            Graph after = serializer().read();

            // ensure same number of nodes and edges
            assertEquals(before.getNodes().size(), after.getNodes().size());
            assertEquals(before.getEdges().size(), after.getEdges().size());

            // ensure same graph structure
            GraphVisitor visitor =
                    component -> {
                        DirectedEdge e = (DirectedEdge) component;

                        assertEquals(e.getInNode().getID(), e.getID());
                        assertEquals(e.getOutNode().getID(), e.getID() + 1);

                        return (0);
                    };
            after.visitEdges(visitor);

            visitor =
                    component -> {
                        DirectedNode n = (DirectedNode) component;

                        if (n.getDegree() == 1) {
                            assertTrue(n.getID() == 0 || n.getID() == nnodes - 1);
                        } else {
                            assertEquals(2, n.getDegree());

                            Edge in = n.getInEdges().get(0);
                            Edge out = n.getOutEdges().get(0);

                            assertTrue((in.getID() == n.getID() - 1 && out.getID() == n.getID()));
                        }

                        return (0);
                    };
            after.visitNodes(visitor);

        } catch (Exception e) {
            java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e);
            fail();
        }
    }

