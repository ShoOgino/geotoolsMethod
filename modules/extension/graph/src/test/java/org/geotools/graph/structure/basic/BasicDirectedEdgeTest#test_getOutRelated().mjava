    public void test_getOutRelated() {
        Iterator itr = m_edge.getOutRelated();

        BasicDirectedEdge de = (BasicDirectedEdge) itr.next();
        assertSame(de, m_outEdge);

        assertFalse(itr.hasNext());

        // add same edge (shouldn't show up in iterator this time)
        m_edge.getInNode().addOut(m_same);
        m_edge.getOutNode().addIn(m_same);

        itr = m_edge.getOutRelated();

        de = (BasicDirectedEdge) itr.next();
        assertSame(de, m_outEdge);

        assertFalse(itr.hasNext());

        m_edge.getInNode().removeOut(m_same);
        m_edge.getOutNode().removeIn(m_same);

        // add opposite edge
        m_edge.getInNode().addIn(m_opp);
        m_edge.getOutNode().addOut(m_opp);

        itr = m_edge.getOutRelated();

        de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_outEdge || de == m_opp);

        de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_outEdge || de == m_opp);

        assertFalse(itr.hasNext());

        // add another opposite edge
        m_edge.getInNode().addIn(m_opp2);
        m_edge.getOutNode().addOut(m_opp2);

        itr = m_edge.getOutRelated();

        de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_outEdge || de == m_opp || de == m_opp2);

        de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_outEdge || de == m_opp || de == m_opp2);

        de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_outEdge || de == m_opp || de == m_opp2);

        assertFalse(itr.hasNext());

        m_edge.getInNode().removeIn(m_opp);
        m_edge.getOutNode().removeOut(m_opp);

        m_edge.getInNode().removeIn(m_opp2);
        m_edge.getOutNode().removeOut(m_opp2);

        // add loop
        m_edge.getOutNode().addIn(m_outloop);
        m_edge.getOutNode().addOut(m_outloop);

        itr = m_edge.getOutRelated();

        de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_outEdge || de == m_outloop);

        de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_outEdge || de == m_outloop);

        assertFalse(itr.hasNext());
    }

