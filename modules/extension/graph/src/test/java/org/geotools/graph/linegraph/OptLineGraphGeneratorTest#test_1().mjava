    /**
     * Build a circular graph of line segments that join at endpoints. <br>
     * <br>
     * Expected: 1. Number of edges = number of nodes = number of lines.
     */
    @Test
    public void test_1() {

        final Coordinate base = new Coordinate(0d, 0d);
        final int n = 100;
        for (int i = 1; i <= n; i++) {
            Edge e =
                    (Edge)
                            generator()
                                    .add(
                                            new LineSegment(
                                                    new Coordinate(
                                                            base.x + (i - 1), base.y + (i - 1)),
                                                    new Coordinate(base.x + i, base.y + i)));
        }

        // complete the circle
        generator().add(new LineSegment(new Coordinate(base.x + n, base.y + n), base));

        generator().generate();
        Graph built = generator().getGraph();

        Assert.assertEquals(built.getEdges().size(), n + 1);
        Assert.assertEquals(built.getNodes().size(), n + 1);

        // all nodes should be of degree 2
        Assert.assertEquals(built.getNodesOfDegree(2).size(), built.getNodes().size());

        // ensure coordinates
        GraphVisitor visitor =
                new GraphVisitor() {
                    public int visit(Graphable component) {
                        Edge e = (Edge) component;
                        XYNode a = (XYNode) e.getNodeA();
                        XYNode b = (XYNode) e.getNodeB();

                        if (b.getCoordinate().equals(base)) {
                            Assert.assertEquals(a.getCoordinate(), new Coordinate(n, n));
                        } else {
                            Assert.assertTrue(
                                    Math.abs(a.getCoordinate().x - b.getCoordinate().x) == 1
                                            && Math.abs(a.getCoordinate().y - b.getCoordinate().y)
                                                    == 1);
                        }

                        return (0);
                    }
                };
        built.visitEdges(visitor);
    }

