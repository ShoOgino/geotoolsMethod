  public void test_getRelated() {
  	BasicEdge be;
    Iterator itr;
    
    //nodes share single edge
    itr = m_edge.getRelated();
    assertTrue(itr.hasNext());
    
    be = (BasicEdge)itr.next();
    assertTrue(
      be.equals(m_other1) || be.equals(m_other2) ||
      be.equals(m_other3) || be.equals(m_other4)
    );
    assertTrue(itr.hasNext());
    
    be = (BasicEdge)itr.next();
    assertTrue(
      be.equals(m_other1) || be.equals(m_other2) ||
      be.equals(m_other3) || be.equals(m_other4)
    );
    assertTrue(itr.hasNext());
    be = (BasicEdge)itr.next();
    assertTrue(
      be.equals(m_other1) || be.equals(m_other2) ||
      be.equals(m_other3) || be.equals(m_other4)
    );
    assertTrue(itr.hasNext());
    
    be = (BasicEdge)itr.next();
    assertTrue(
      be.equals(m_other1) || be.equals(m_other2) ||
      be.equals(m_other3) || be.equals(m_other4)
    );
    assertTrue(!itr.hasNext());
  
    //nodes share multiple edges (same direction)
    m_nodeA.add(m_same);
    m_nodeB.add(m_same);
    
    itr = m_edge.getRelated();
    assertTrue(itr.hasNext());
    
    be = (BasicEdge)itr.next();
    assertTrue(
      be.equals(m_other1) || be.equals(m_other2) || 
      be.equals(m_other3) || be.equals(m_other4) || be.equals(m_same)
    );
    assertTrue(itr.hasNext());

    be = (BasicEdge)itr.next();
    assertTrue(
      be.equals(m_other1) || be.equals(m_other2) || 
      be.equals(m_other3) || be.equals(m_other4) || be.equals(m_same)
    );
    assertTrue(itr.hasNext());
    
    be = (BasicEdge)itr.next();
    assertTrue(
      be.equals(m_other1) || be.equals(m_other2) || 
      be.equals(m_other3) || be.equals(m_other4) || be.equals(m_same)
    );
    assertTrue(itr.hasNext());

    be = (BasicEdge)itr.next();
    assertTrue(
      be.equals(m_other1) || be.equals(m_other2) || 
      be.equals(m_other3) || be.equals(m_other4) || be.equals(m_same)
    );
    assertTrue(itr.hasNext());
    
    be = (BasicEdge)itr.next();
    assertTrue(
      be.equals(m_other1) || be.equals(m_other2) || 
      be.equals(m_other3) || be.equals(m_other4) || be.equals(m_same)
    );
    assertTrue(!itr.hasNext());
    m_nodeA.remove(m_same);
    m_nodeB.remove(m_same);
    
    //nodes share multiple edges (differnt direction)
    m_nodeB.add(m_opp);
    m_nodeA.add(m_opp);
    
    itr = m_edge.getRelated();
    assertTrue(itr.hasNext());
    
    be = (BasicEdge)itr.next();
    assertTrue(
      be.equals(m_other1) || be.equals(m_other2) || 
      be.equals(m_other3) || be.equals(m_other4) || be.equals(m_opp)
    );
    assertTrue(itr.hasNext());
    
    be = (BasicEdge)itr.next();
    assertTrue(
      be.equals(m_other1) || be.equals(m_other2) || 
      be.equals(m_other3) || be.equals(m_other4) || be.equals(m_opp)
    );
    assertTrue(itr.hasNext());
    
    be = (BasicEdge)itr.next();
    assertTrue(
      be.equals(m_other1) || be.equals(m_other2) || 
      be.equals(m_other3) || be.equals(m_other4) || be.equals(m_opp)
    );
    assertTrue(itr.hasNext());
    
    be = (BasicEdge)itr.next();
    assertTrue(
      be.equals(m_other1) || be.equals(m_other2) || 
      be.equals(m_other3) || be.equals(m_other4) || be.equals(m_opp)
    );
    assertTrue(itr.hasNext());
    
    be = (BasicEdge)itr.next();
    assertTrue(
      be.equals(m_other1) || be.equals(m_other2) || 
      be.equals(m_other3) || be.equals(m_other4) || be.equals(m_opp)
    );
    assertTrue(!itr.hasNext());
    
    m_nodeA.remove(m_opp);
    m_nodeB.remove(m_opp);
    
    //loop on one of nodes
    m_nodeA.add(m_loopA);
    
    itr = m_edge.getRelated();
    assertTrue(itr.hasNext());
    
    be = (BasicEdge)itr.next();
    assertTrue(
      be.equals(m_other1) || be.equals(m_other2) || 
      be.equals(m_other3) || be.equals(m_other4) || be.equals(m_loopA)
    );
    assertTrue(itr.hasNext());
    
    be = (BasicEdge)itr.next();
    assertTrue(
      be.equals(m_other1) || be.equals(m_other2) || 
      be.equals(m_other3) || be.equals(m_other4) || be.equals(m_loopA)
    );
    
    be = (BasicEdge)itr.next();
    assertTrue(
      be.equals(m_other1) || be.equals(m_other2) || 
      be.equals(m_other3) || be.equals(m_other4) || be.equals(m_loopA)
    );
    
    be = (BasicEdge)itr.next();
    assertTrue(
      be.equals(m_other1) || be.equals(m_other2) || 
      be.equals(m_other3) || be.equals(m_other4) || be.equals(m_loopA)
    );
    assertTrue(itr.hasNext());
    
    be = (BasicEdge)itr.next();
    assertTrue(
      be.equals(m_other1) || be.equals(m_other2) || 
      be.equals(m_other3) || be.equals(m_other4) || be.equals(m_loopA)
    );
    assertTrue(!itr.hasNext());
    
    m_nodeA.remove(m_loopA);
    
    //test loop on other node
    m_nodeB.add(m_loopB);
    
    itr = m_edge.getRelated();
    assertTrue(itr.hasNext());
    
    be = (BasicEdge)itr.next();
    assertTrue(
      be.equals(m_other1) || be.equals(m_other2) || 
      be.equals(m_other3) || be.equals(m_other4) || be.equals(m_loopB)
    );
    assertTrue(itr.hasNext());
    
    be = (BasicEdge)itr.next();
    assertTrue(
      be.equals(m_other1) || be.equals(m_other2) || 
      be.equals(m_other3) || be.equals(m_other4) || be.equals(m_loopB)
    );
    
    be = (BasicEdge)itr.next();
    assertTrue(
      be.equals(m_other1) || be.equals(m_other2) || 
      be.equals(m_other3) || be.equals(m_other4) || be.equals(m_loopB)
    );
    
    be = (BasicEdge)itr.next();
    assertTrue(
      be.equals(m_other1) || be.equals(m_other2) || 
      be.equals(m_other3) || be.equals(m_other4) || be.equals(m_loopB)
    );
    assertTrue(itr.hasNext());
    
    be = (BasicEdge)itr.next();
    assertTrue(
      be.equals(m_other1) || be.equals(m_other2) || 
      be.equals(m_other3) || be.equals(m_other4) || be.equals(m_loopB)
    );
    assertTrue(!itr.hasNext());
    
    //test loop on both nodes
    m_nodeA.add(m_loopA);
    itr = m_edge.getRelated();
    assertTrue(itr.hasNext());
    
    be = (BasicEdge)itr.next();
    assertTrue(
      be.equals(m_other1) || be.equals(m_other2) || be.equals(m_loopA) ||
      be.equals(m_other3) || be.equals(m_other4) || be.equals(m_loopB)
    );
    assertTrue(itr.hasNext());
    
    be = (BasicEdge)itr.next();
    assertTrue(
      be.equals(m_other1) || be.equals(m_other2) || be.equals(m_loopA) ||
      be.equals(m_other3) || be.equals(m_other4) || be.equals(m_loopB)
    );
    
    be = (BasicEdge)itr.next();
    assertTrue(
      be.equals(m_other1) || be.equals(m_other2) || be.equals(m_loopA) ||
      be.equals(m_other3) || be.equals(m_other4) || be.equals(m_loopB)
    );
    
    be = (BasicEdge)itr.next();
    assertTrue(
      be.equals(m_other1) || be.equals(m_other2) || be.equals(m_loopA) ||
      be.equals(m_other3) || be.equals(m_other4) || be.equals(m_loopB)
    );
    assertTrue(itr.hasNext());
    
    be = (BasicEdge)itr.next();
    assertTrue(
      be.equals(m_other1) || be.equals(m_other2) || be.equals(m_loopA) ||
      be.equals(m_other3) || be.equals(m_other4) || be.equals(m_loopB)
    );
    assertTrue(itr.hasNext());
    
    be = (BasicEdge)itr.next();
    assertTrue(
      be.equals(m_other1) || be.equals(m_other2) || be.equals(m_loopA) ||
      be.equals(m_other3) || be.equals(m_other4) || be.equals(m_loopB)
    );
    assertTrue(!itr.hasNext());
    
  }

