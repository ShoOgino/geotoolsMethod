    /**
     * Create a balanced binary tree and calculate a path from root to a leaf. <br>
     * <br>
     * Expected 1. Path should be links from leaf to root.
     */
    @Test
    public void test_2() {
        int k = 4;
        Object[] obj = GraphTestUtil.buildPerfectBinaryTree(builder(), k);
        Node root = (Node) obj[0];
        Map id2node = (Map) obj[1];

        DijkstraShortestPathFinder pfinder =
                new DijkstraShortestPathFinder(builder().getGraph(), root, costFunction());
        pfinder.calculate();

        for (Node node : builder().getGraph().getNodes()) {
            String id = node.getObject().toString();

            if (id2node.get(id + ".0") == null) {
                Path p = pfinder.getPath(node);
                Assert.assertEquals(p.size(), k + 1);

                for (Node n : p) {
                    Assert.assertEquals(n.getObject().toString(), id);
                    if (id.length() > 2) id = id.substring(0, id.length() - 2);
                }
            }
        }
    }

