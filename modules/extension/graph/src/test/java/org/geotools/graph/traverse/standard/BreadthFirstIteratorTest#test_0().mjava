    /**
     * Create a simple graph which has no bifurcations and do a normal traversal. <br>
     * <br>
     * Expected: 1. Every node should be visited. 2. Nodes should be visited in order.
     */
    public void test_0() {
        int nnodes = 100;
        Node[] ends = GraphTestUtil.buildNoBifurcations(builder(), nnodes);

        CountingWalker walker =
                new CountingWalker() {
                    public int visit(Graphable element, GraphTraversal traversal) {
                        element.setCount(getCount());
                        super.visit(element, traversal);

                        // nodes should be visited in order
                        assertEquals(element.getID(), getCount() - 1);
                        return (GraphTraversal.CONTINUE);
                    }
                };

        BreadthFirstIterator iterator = createIterator();
        BasicGraphTraversal traversal =
                new BasicGraphTraversal(builder().getGraph(), walker, iterator);
        traversal.init();

        iterator.setSource(ends[0]);
        traversal.traverse();

        // every node should have been visited
        assertEquals(walker.getCount(), builder().getGraph().getNodes().size());

        // ensure nodes only visited once
        assertEquals(walker.getCount(), nnodes);
    }

