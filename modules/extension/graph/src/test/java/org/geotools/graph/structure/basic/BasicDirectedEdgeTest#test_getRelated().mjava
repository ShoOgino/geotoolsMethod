    public void test_getRelated() {
        Iterator itr = m_edge.getRelated();

        BasicDirectedEdge de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_inEdge || de == m_outEdge);

        de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_inEdge || de == m_outEdge);

        assertFalse(itr.hasNext());

        // add an edge that has the same nodes, in the same direction
        m_edge.getInNode().addOut(m_same);
        m_edge.getOutNode().addIn(m_same);

        itr = m_edge.getRelated();

        de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_inEdge || de == m_outEdge || de == m_same);

        de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_inEdge || de == m_outEdge || de == m_same);

        de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_inEdge || de == m_outEdge || de == m_same);

        assertFalse(itr.hasNext());

        // add another edge in the same direction
        m_edge.getInNode().addOut(m_same2);
        m_edge.getOutNode().addIn(m_same2);

        itr = m_edge.getRelated();

        de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_inEdge || de == m_outEdge || de == m_same || de == m_same2);

        de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_inEdge || de == m_outEdge || de == m_same || de == m_same2);

        de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_inEdge || de == m_outEdge || de == m_same || de == m_same2);

        de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_inEdge || de == m_outEdge || de == m_same || de == m_same2);

        assertFalse(itr.hasNext());

        m_edge.getInNode().removeOut(m_same);
        m_edge.getOutNode().removeIn(m_same);

        m_edge.getInNode().removeOut(m_same2);
        m_edge.getOutNode().removeIn(m_same2);

        // add an edge that has the same nodes, opposite direction
        m_edge.getInNode().addIn(m_opp);
        m_edge.getOutNode().addOut(m_opp);

        itr = m_edge.getRelated();

        de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_inEdge || de == m_outEdge || de == m_opp);

        de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_inEdge || de == m_outEdge || de == m_opp);

        de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_inEdge || de == m_outEdge || de == m_opp);

        assertFalse(itr.hasNext());

        // add another edge in opposite direction
        m_edge.getInNode().addIn(m_opp2);
        m_edge.getOutNode().addOut(m_opp2);

        itr = m_edge.getRelated();

        de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_inEdge || de == m_outEdge || de == m_opp || de == m_opp2);

        de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_inEdge || de == m_outEdge || de == m_opp || de == m_opp2);

        de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_inEdge || de == m_outEdge || de == m_opp || de == m_opp2);

        de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_inEdge || de == m_outEdge || de == m_opp || de == m_opp2);

        assertFalse(itr.hasNext());

        m_edge.getInNode().removeIn(m_opp);
        m_edge.getOutNode().removeOut(m_opp);

        m_edge.getInNode().removeIn(m_opp2);
        m_edge.getOutNode().removeOut(m_opp2);

        // add loops
        m_edge.getInNode().addIn(m_inloop);
        m_edge.getInNode().addOut(m_inloop);

        m_edge.getOutNode().addIn(m_outloop);
        m_edge.getOutNode().addOut(m_outloop);

        itr = m_edge.getRelated();

        de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_inEdge || de == m_outEdge || de == m_inloop || de == m_outloop);

        de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_inEdge || de == m_outEdge || de == m_inloop || de == m_outloop);

        de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_inEdge || de == m_outEdge || de == m_inloop || de == m_outloop);

        de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_inEdge || de == m_outEdge || de == m_inloop || de == m_outloop);
        assertFalse(itr.hasNext());

        m_edge.getInNode().removeIn(m_inloop);
        m_edge.getInNode().removeOut(m_inloop);

        m_edge.getOutNode().removeIn(m_outloop);
        m_edge.getOutNode().removeOut(m_outloop);

        // add an incoming edge to the out node and an outgoing edge to the in node
        m_edge.getInNode().addOut(m_inoutEdge);
        m_otherInNode.addIn(m_inoutEdge);

        m_edge.getOutNode().addIn(m_outinEdge);
        m_otherOutNode.addOut(m_outinEdge);

        itr = m_edge.getRelated();

        de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_inEdge || de == m_outEdge || de == m_inoutEdge || de == m_outinEdge);

        de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_inEdge || de == m_outEdge || de == m_inoutEdge || de == m_outinEdge);

        de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_inEdge || de == m_outEdge || de == m_inoutEdge || de == m_outinEdge);

        de = (BasicDirectedEdge) itr.next();
        assertTrue(de == m_inEdge || de == m_outEdge || de == m_inoutEdge || de == m_outinEdge);

        assertFalse(itr.hasNext());
    }

