    /**
     * Create a perfect binary tree, serialize it and deserialize it. <br>
     * <br>
     * Expected: 1. Same structure before and after.
     */
    @Test
    public void test_1() {
        final int k = 5;
        GraphTestUtil.buildPerfectBinaryTree(builder(), k);

        try {
            File victim = File.createTempFile("graph", null);
            victim.deleteOnExit();
            serializer().setProperty(SerializedReaderWriter.FILENAME, victim.getAbsolutePath());

            serializer().write(builder().getGraph());

            Graph after = serializer().read();

            Assert.assertEquals(1, after.getNodesOfDegree(2).size()); // root
            Assert.assertEquals(
                    after.getNodesOfDegree(3).size(), (int) Math.pow(2, k) - 2); // internal
            Assert.assertEquals(after.getNodesOfDegree(1).size(), (int) Math.pow(2, k)); // leaves
        } catch (Exception e) {
            java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e);
        }
    }

