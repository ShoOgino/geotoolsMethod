    /**
     * Create a graph with no bifurcations and start a traversal from start node, then kill branch,
     * and resume. <br>
     * <br>
     * Expected: After kill branch: 1. Traversal ends After resume: 2. No more nodes visited.
     */
    @Test
    public void test_2() {
        int nnodes = 100;
        Node[] ends = GraphTestUtil.buildNoBifurcations(builder(), nnodes);
        final int kill = 50;

        CountingWalker walker =
                new CountingWalker() {
                    int m_mode = 0;

                    public int visit(Graphable element, GraphTraversal traversal) {
                        super.visit(element, traversal);
                        if (m_mode == 0) {
                            if (element.getID() == kill) {
                                m_mode++;
                                return (GraphTraversal.KILL_BRANCH);
                            }
                        }

                        return (GraphTraversal.CONTINUE);
                    }
                };

        final DijkstraIterator iterator = createIterator();
        iterator.setSource(ends[0]);

        BasicGraphTraversal traversal =
                new BasicGraphTraversal(builder().getGraph(), walker, iterator);
        traversal.init();
        traversal.traverse();

        GraphVisitor visitor =
                new GraphVisitor() {
                    public int visit(Graphable component) {
                        if (component.getID() <= kill) Assert.assertTrue(component.isVisited());
                        else Assert.assertFalse(component.isVisited());

                        return 0;
                    }
                };
        builder().getGraph().visitNodes(visitor);
        Assert.assertEquals(walker.getCount(), nnodes - kill + 1);

        // resume
        traversal.traverse();
        builder().getGraph().visitNodes(visitor);
        Assert.assertEquals(walker.getCount(), nnodes - kill + 1);
    }

