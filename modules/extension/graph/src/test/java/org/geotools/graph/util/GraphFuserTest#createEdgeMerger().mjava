    protected GraphFuser.EdgeMerger createEdgeMerger() {
        return (new GraphFuser.EdgeMerger() {
            public Object merge(List<Edge> edges) {
                List<Edge> ends = new ArrayList<>();
                for (Edge edge : edges) {
                    if (edge.getNodeA().getDegree() != 2 || edge.getNodeB().getDegree() != 2)
                        ends.add(edge);
                }

                Object[] obj = new Object[2];

                if (ends.size() == 2) {
                    Edge end0 = ends.get(0);
                    Edge end1 = ends.get(1);

                    obj[0] =
                            end0.getNodeA().getDegree() == 2
                                    ? end0.getNodeB().getObject()
                                    : end0.getNodeA().getObject();
                    obj[1] =
                            end1.getNodeA().getDegree() == 2
                                    ? end1.getNodeB().getObject()
                                    : end1.getNodeA().getObject();
                } else if (ends.isEmpty()) {
                    obj[0] = edges.get(0).getNodeA().getObject();
                    obj[1] = edges.get(0).getNodeA().getObject();
                } else throw new IllegalStateException("Found " + ends.size() + " ends.");

                return (obj);
            }

            public void setMergedObject(Edge newEdge, Object merged) {
                newEdge.setObject(merged);
            }

            public void setMergedObject(Edge newEdge, Object merged, List edges) {
                newEdge.setObject(merged);
            }
        });
    }

