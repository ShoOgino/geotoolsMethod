  /**
   * Build a linear graph by adding a number of line segments that join 
   * at endpoints.
   * <BR> 
   * Expected: 1. Number of edges = number of lines added.
   *           2. Number of nodes = number of lines + 1
   *
   */
  public void test_0() {
    final Coordinate base = new Coordinate(0d,0d);
    final int n = 100;
    for (int i = 1; i <= n; i++) {
      Edge e = (Edge)generator().add(
        new LineSegment(
          new Coordinate(base.x + (i-1), base.y + (i-1)),
          new Coordinate(base.x + i, base.y + i)
        )
      );  
    }
    generator().generate();
    Graph built = generator().getGraph();
    
    //ensure correct graph structure
    assertTrue(built.getEdges().size() == n);
    assertTrue(built.getNodes().size() == n+1);
    
    assertTrue(built.getNodesOfDegree(1).size() == 2);
    assertTrue(built.getNodesOfDegree(2).size() == n-1);
    
    //ensure coordinates
    GraphVisitor visitor = new GraphVisitor() {
      public int visit(Graphable component) {
        Edge e = (Edge)component;
        XYNode a = (XYNode)e.getNodeA();
        XYNode b = (XYNode)e.getNodeB();
        
        //coordinats should be a distance of sqrt(2)
        assertTrue(
          Math.abs(a.getCoordinate().x - b.getCoordinate().x) == 1 &&
          Math.abs(a.getCoordinate().y - b.getCoordinate().y) == 1
        );
        
//        assertTrue(
//            Math.abs(a.getX() - b.getX()) == 1 
//         && Math.abs(a.getY() - b.getY()) == 1
//        );
        return(0);
      }
    };
    built.visitEdges(visitor);
  }

