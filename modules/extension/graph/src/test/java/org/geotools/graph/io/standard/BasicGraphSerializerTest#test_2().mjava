    /**
     * Create a simple graph and disconnect two nodes (remove all edges) then serialize and
     * deserialize. <br>
     * <br>
     * Exepcted: 1. Same graph structure.
     */
    @Test
    public void test_2() {
        final int nnodes = 100;
        Node[] ends = GraphTestUtil.buildNoBifurcations(builder(), nnodes);

        Set<Edge> toRemove = new HashSet<>();
        toRemove.addAll(ends[0].getEdges());
        toRemove.addAll(ends[1].getEdges());

        // disconnect end nodes
        builder().removeEdges(toRemove);

        Assert.assertEquals(builder().getGraph().getNodes().size(), nnodes);
        Assert.assertEquals(builder().getGraph().getEdges().size(), nnodes - 3);

        try {
            File victim = File.createTempFile("graph", null);
            victim.deleteOnExit();
            m_serializer.setProperty(SerializedReaderWriter.FILENAME, victim.getAbsolutePath());

            m_serializer.write(builder().getGraph());

            Graph before = builder().getGraph();
            Graph after = m_serializer.read();

            // ensure same number of nodes and edges
            Assert.assertEquals(before.getNodes().size(), after.getNodes().size());
            Assert.assertEquals(before.getEdges().size(), after.getEdges().size());

            GraphVisitor visitor =
                    component -> {
                        Node n = (Node) component;
                        if (n.getID() == 0 || n.getID() == nnodes - 1)
                            Assert.assertEquals(0, n.getDegree());
                        else if (n.getID() == 1 || n.getID() == nnodes - 2)
                            Assert.assertEquals(1, n.getDegree());
                        else Assert.assertEquals(2, n.getDegree());

                        return (0);
                    };
            after.visitNodes(visitor);
        } catch (Exception e) {
            java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e);
            Assert.fail();
        }
    }

