    /**
     * Create a simple graph which has no bifurcations and do a traversal suspending at some
     * intermediate node. Then continue traversal.
     *
     * <p>Expected: After suspend: 1. Every node of with an id greater than the id of the suspending
     * node should not be visited. After continue: 1. First node visited after continue should have
     * id = id + suspend node + 1 2. Every node should be visited.
     */
    @Test
    public void test_1() {
        int nnodes = 100;
        Node[] ends = GraphTestUtil.buildNoBifurcations(builder(), nnodes);
        final int suspend = 50;

        CountingWalker walker =
                new CountingWalker() {
                    private int m_mode = 0;

                    @Override
                    public int visit(Graphable element, GraphTraversal traversal) {
                        super.visit(element, traversal);
                        if (m_mode == 0) {
                            // check for stopping node
                            if (element.getID() == suspend) {
                                m_mode++;
                                return (GraphTraversal.SUSPEND);
                            }
                        } else if (m_mode == 1) {
                            // check first node after continue
                            Assert.assertEquals(element.getID(), suspend + 1);
                            m_mode++;
                        }
                        return (GraphTraversal.CONTINUE);
                    }
                };

        NoBifurcationIterator iterator = createIterator();
        iterator.setSource(ends[0]);

        BasicGraphTraversal traversal =
                new BasicGraphTraversal(builder().getGraph(), walker, iterator);
        traversal.init();
        traversal.traverse();

        // stopping node should be visited and nodes with greater id should not
        GraphVisitor visitor =
                component -> {
                    if (component.getID() <= suspend) Assert.assertTrue(component.isVisited());
                    else Assert.assertFalse(component.isVisited());
                    return (0);
                };
        builder().getGraph().visitNodes(visitor);
        Assert.assertEquals(walker.getCount(), nnodes - suspend + 1);

        traversal.traverse();

        // every node should now be visited
        visitor =
                component -> {
                    Assert.assertTrue(component.isVisited());
                    return (0);
                };
        builder().getGraph().visitNodes(visitor);
        Assert.assertEquals(walker.getCount(), nnodes);
    }

