    /**
     * Create a perfect binary tree, serialize it and deserialize it. <br>
     * <br>
     * Expected: 1. Same structure before and after.
     */
    @Test
    public void test_1() {
        final int k = 5;
        GraphTestUtil.buildPerfectBinaryTree(builder(), k);

        try {
            File victim = File.createTempFile("graph", null);
            victim.deleteOnExit();
            serializer().setProperty(SerializedReaderWriter.FILENAME, victim.getAbsolutePath());

            serializer().write(builder().getGraph());

            Graph before = builder().getGraph();
            Graph after = serializer().read();

            // ensure same number of nodes and edges
            Assert.assertEquals(before.getNodes().size(), after.getNodes().size());
            Assert.assertEquals(before.getEdges().size(), after.getEdges().size());

            GraphVisitor visitor =
                    component -> {
                        DirectedNode node = (DirectedNode) component;
                        if (node.getInDegree() == 0 && node.getOutDegree() == 2)
                            return (Graph.PASS_AND_CONTINUE);
                        return (Graph.FAIL_QUERY);
                    };
            Assert.assertEquals(1, after.queryNodes(visitor).size()); // root

            visitor =
                    component -> {
                        DirectedNode node = (DirectedNode) component;
                        if (node.getInDegree() == 1 && node.getOutDegree() == 2)
                            return (Graph.PASS_AND_CONTINUE);
                        return (Graph.FAIL_QUERY);
                    };
            Assert.assertEquals(
                    after.queryNodes(visitor).size(), (int) Math.pow(2, k) - 2); // internal

            visitor =
                    component -> {
                        DirectedNode node = (DirectedNode) component;
                        if (node.getInDegree() == 1 && node.getOutDegree() == 0)
                            return (Graph.PASS_AND_CONTINUE);
                        return (Graph.FAIL_QUERY);
                    };
            Assert.assertEquals(after.queryNodes(visitor).size(), (int) Math.pow(2, k)); // leaves
        } catch (Exception e) {
            java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e);
            Assert.fail();
        }
    }

