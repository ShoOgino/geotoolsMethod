    /**
     * Create a directed graph with no bifurcations and start a full traversal from start node. Test
     * getRelated at each node.<br>
     * <br>
     * Expected: 1. The last node should have no related nodes 2. All other nodes should have one
     * related node 3. Related nodes should have an id one greater than the current node
     */
    public void test_8() {
        final int nnodes = 100;
        Node[] ends = GraphTestUtil.buildNoBifurcations(directedBuilder(), nnodes);

        CountingWalker walker = new CountingWalker();

        final DijkstraIterator iterator = createIterator();
        iterator.setSource(ends[0]);

        BasicGraphTraversal traversal =
                new BasicGraphTraversal(directedBuilder().getGraph(), walker, iterator);
        traversal.init();
        traversal.traverse();

        GraphVisitor visitor =
                new GraphVisitor() {
                    public int visit(Graphable component) {

                        Iterator related = iterator.getRelated(component);
                        int count = 0;
                        int expectedCount = 1;
                        if (component.getID() == nnodes - 1) {
                            expectedCount = 0;
                        }
                        while (related.hasNext()) {
                            Graphable relatedComponent = (Graphable) related.next();
                            assertEquals(component.getID(), relatedComponent.getID() - 1);
                            count++;
                        }
                        assertEquals(expectedCount, count);

                        return 0;
                    }
                };
        directedBuilder().getGraph().visitNodes(visitor);

        assertEquals(walker.getCount(), nnodes);
    }

