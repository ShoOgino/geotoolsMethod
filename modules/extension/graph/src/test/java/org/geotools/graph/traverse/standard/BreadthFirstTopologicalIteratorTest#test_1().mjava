    /**
     * Create a balanced binary tree and do a full traversal. <br>
     * <br>
     * Expected: 1. Nodes in a lower level of the tree should be visited before nodes in a higher
     * level.
     */
    @Test
    public void test_1() {
        int k = 4;
        GraphTestUtil.buildPerfectBinaryTree(builder(), k);

        CountingWalker walker =
                new CountingWalker() {
                    public int visit(Graphable element, GraphTraversal traversal) {
                        element.setCount(getCount());
                        return super.visit(element, traversal);
                    }
                };

        BreadthFirstTopologicalIterator iterator = createIterator();

        BasicGraphTraversal traversal =
                new BasicGraphTraversal(builder().getGraph(), walker, iterator);
        traversal.init();
        traversal.traverse();

        // ensure that each node in lower level visited before node in higher level
        GraphVisitor visitor =
                new GraphVisitor() {
                    public int visit(Graphable component) {
                        String id = component.getObject().toString();

                        for (Node other : builder().getGraph().getNodes()) {
                            if (other.getObject().toString().length() < id.length()) {
                                Assert.assertTrue(other.getCount() > component.getCount());
                            }
                        }
                        return 0;
                    }
                };
        builder().getGraph().visitNodes(visitor);

        Assert.assertEquals(walker.getCount(), (int) Math.pow(2, k + 1) - 1);
    }

