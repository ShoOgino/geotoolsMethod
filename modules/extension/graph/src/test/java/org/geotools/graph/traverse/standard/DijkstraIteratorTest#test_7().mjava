    /**
     * Create an undirected graph with no bifurcations and start a full traversal from start node.
     * Test getRelated at each node.<br>
     * <br>
     * Expected: 1. The first and last node should have one related node. 2. All other nodes should
     * have two related nodes 3. Related nodes should have an id one greater or one less than the
     * current node
     */
    @Test
    public void test_7() {
        final int nnodes = 100;
        Node[] ends = GraphTestUtil.buildNoBifurcations(builder(), nnodes);

        CountingWalker walker = new CountingWalker();

        final DijkstraIterator iterator = createIterator();
        iterator.setSource(ends[0]);

        BasicGraphTraversal traversal =
                new BasicGraphTraversal(builder().getGraph(), walker, iterator);
        traversal.init();
        traversal.traverse();

        GraphVisitor visitor =
                component -> {
                    Iterator related = iterator.getRelated(component);
                    int count = 0;
                    int expectedCount = 2;
                    if (component.getID() == 0 || component.getID() == nnodes - 1) {
                        expectedCount = 1;
                    }
                    while (related.hasNext()) {
                        Graphable relatedComponent = (Graphable) related.next();
                        Assert.assertTrue(
                                component.getID() == relatedComponent.getID() - 1
                                        || component.getID() == relatedComponent.getID() + 1);
                        count++;
                    }
                    Assert.assertEquals(expectedCount, count);

                    return 0;
                };
        builder().getGraph().visitNodes(visitor);

        Assert.assertEquals(walker.getCount(), nnodes);
    }

