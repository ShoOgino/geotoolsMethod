    @Test
    public void test_getEdges_1() {
        m_node.addIn(m_inEdge1);
        m_node.addIn(m_inEdge2);

        m_node.addOut(m_outEdge1);
        m_node.addOut(m_outEdge2);

        Assert.assertTrue(m_node.getEdges(m_inNode1).contains(m_inEdge1));
        Assert.assertTrue(m_node.getEdges(m_inNode2).contains(m_inEdge2));
        Assert.assertTrue(m_node.getEdges(m_outNode1).contains(m_outEdge1));
        Assert.assertTrue(m_node.getEdges(m_outNode2).contains(m_outEdge2));

        // add duplicates
        m_node.addIn(m_inEdge1);
        m_node.addIn(m_inEdge2);

        m_node.addOut(m_outEdge1);
        m_node.addOut(m_outEdge2);

        Assert.assertTrue(m_node.getEdges(m_inNode1).contains(m_inEdge1));
        Assert.assertEquals(2, m_node.getEdges(m_inNode1).size());
        Assert.assertTrue(m_node.getEdges(m_inNode2).contains(m_inEdge2));
        Assert.assertEquals(2, m_node.getEdges(m_inNode2).size());
        Assert.assertTrue(m_node.getEdges(m_outNode1).contains(m_outEdge1));
        Assert.assertEquals(2, m_node.getEdges(m_outNode1).size());
        Assert.assertTrue(m_node.getEdges(m_outNode2).contains(m_outEdge2));
        Assert.assertEquals(2, m_node.getEdges(m_outNode2).size());
    }

