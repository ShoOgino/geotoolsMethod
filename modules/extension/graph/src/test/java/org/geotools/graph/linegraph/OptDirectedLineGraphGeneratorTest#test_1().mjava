    /**
     * Build a circular graph of line segments that join at endpoints. <br>
     * <br>
     * Expected: 1. Number of edges = number of nodes = number of lines.
     */
    @Test
    public void test_1() {
        final Coordinate base = new Coordinate(0d, 0d);
        final int n = 100;
        for (int i = 1; i <= n; i++) {
            generator()
                    .add(
                            new LineSegment(
                                    new Coordinate(base.x + (i - 1), base.y + (i - 1)),
                                    new Coordinate(base.x + i, base.y + i)));
        }

        // complete the circle
        generator().add(new LineSegment(new Coordinate(base.x + n, base.y + n), base));

        generator().generate();

        Graph built = generator().getGraph();

        Assert.assertEquals(built.getEdges().size(), n + 1);
        Assert.assertEquals(built.getNodes().size(), n + 1);

        Assert.assertEquals(built.getNodesOfDegree(2).size(), n + 1);

        // ensure coordinates
        GraphVisitor visitor =
                component -> {
                    Edge e = (Edge) component;
                    XYNode a = (XYNode) e.getNodeA();
                    XYNode b = (XYNode) e.getNodeB();

                    // coordinats should be a distance of sqrt(2)
                    if (b.getCoordinate().equals(base))
                        Assert.assertEquals(a.getCoordinate(), new Coordinate(n, n));
                    else
                        Assert.assertEquals(
                                b.getCoordinate(),
                                new Coordinate(a.getCoordinate().x + 1, a.getCoordinate().y + 1));

                    //        if (b.getX() == base.x && b.getY() == base.y)
                    //          assertTrue(a.getX() == n && a.getY() == n);
                    //        else assertTrue(b.getX() == a.getX() + 1 && b.getY() == a.getY() +
                    // 1);

                    return (0);
                };
        built.visitEdges(visitor);
    }

