    @Test
    public void test_getRelated() {

        // nodes share single edge
        Iterator itr = m_edge.getRelated();
        Assert.assertTrue(itr.hasNext());

        OptEdge be = (OptEdge) itr.next();
        Assert.assertTrue(
                be.equals(m_other1)
                        || be.equals(m_other2)
                        || be.equals(m_other3)
                        || be.equals(m_other4));
        Assert.assertTrue(itr.hasNext());

        be = (OptEdge) itr.next();
        Assert.assertTrue(
                be.equals(m_other1)
                        || be.equals(m_other2)
                        || be.equals(m_other3)
                        || be.equals(m_other4));
        Assert.assertTrue(itr.hasNext());
        be = (OptEdge) itr.next();
        Assert.assertTrue(
                be.equals(m_other1)
                        || be.equals(m_other2)
                        || be.equals(m_other3)
                        || be.equals(m_other4));
        Assert.assertTrue(itr.hasNext());

        be = (OptEdge) itr.next();
        Assert.assertTrue(
                be.equals(m_other1)
                        || be.equals(m_other2)
                        || be.equals(m_other3)
                        || be.equals(m_other4));
        Assert.assertFalse(itr.hasNext());

        // nodes share multiple edges (same direction)
        addSame();

        itr = m_edge.getRelated();
        Assert.assertTrue(itr.hasNext());

        be = (OptEdge) itr.next();
        Assert.assertTrue(
                be.equals(m_other1)
                        || be.equals(m_other2)
                        || be.equals(m_other3)
                        || be.equals(m_other4)
                        || be.equals(m_same));
        Assert.assertTrue(itr.hasNext());

        be = (OptEdge) itr.next();
        Assert.assertTrue(
                be.equals(m_other1)
                        || be.equals(m_other2)
                        || be.equals(m_other3)
                        || be.equals(m_other4)
                        || be.equals(m_same));
        Assert.assertTrue(itr.hasNext());

        be = (OptEdge) itr.next();
        Assert.assertTrue(
                be.equals(m_other1)
                        || be.equals(m_other2)
                        || be.equals(m_other3)
                        || be.equals(m_other4)
                        || be.equals(m_same));
        Assert.assertTrue(itr.hasNext());

        be = (OptEdge) itr.next();
        Assert.assertTrue(
                be.equals(m_other1)
                        || be.equals(m_other2)
                        || be.equals(m_other3)
                        || be.equals(m_other4)
                        || be.equals(m_same));
        Assert.assertTrue(itr.hasNext());

        be = (OptEdge) itr.next();
        Assert.assertTrue(
                be.equals(m_other1)
                        || be.equals(m_other2)
                        || be.equals(m_other3)
                        || be.equals(m_other4)
                        || be.equals(m_same));
        Assert.assertFalse(itr.hasNext());

        // nodes share multiple edges (differnt direction)
        addOpp();

        itr = m_edge.getRelated();
        Assert.assertTrue(itr.hasNext());

        be = (OptEdge) itr.next();
        Assert.assertTrue(
                be.equals(m_other1)
                        || be.equals(m_other2)
                        || be.equals(m_other3)
                        || be.equals(m_other4)
                        || be.equals(m_opp));
        Assert.assertTrue(itr.hasNext());

        be = (OptEdge) itr.next();
        Assert.assertTrue(
                be.equals(m_other1)
                        || be.equals(m_other2)
                        || be.equals(m_other3)
                        || be.equals(m_other4)
                        || be.equals(m_opp));
        Assert.assertTrue(itr.hasNext());

        be = (OptEdge) itr.next();
        Assert.assertTrue(
                be.equals(m_other1)
                        || be.equals(m_other2)
                        || be.equals(m_other3)
                        || be.equals(m_other4)
                        || be.equals(m_opp));
        Assert.assertTrue(itr.hasNext());

        be = (OptEdge) itr.next();
        Assert.assertTrue(
                be.equals(m_other1)
                        || be.equals(m_other2)
                        || be.equals(m_other3)
                        || be.equals(m_other4)
                        || be.equals(m_opp));
        Assert.assertTrue(itr.hasNext());

        be = (OptEdge) itr.next();
        Assert.assertTrue(
                be.equals(m_other1)
                        || be.equals(m_other2)
                        || be.equals(m_other3)
                        || be.equals(m_other4)
                        || be.equals(m_opp));
        Assert.assertFalse(itr.hasNext());

        // loop on one of nodes
        addLoopA();

        itr = m_edge.getRelated();
        Assert.assertTrue(itr.hasNext());

        be = (OptEdge) itr.next();
        Assert.assertTrue(
                be.equals(m_other1)
                        || be.equals(m_other2)
                        || be.equals(m_other3)
                        || be.equals(m_other4)
                        || be.equals(m_loopA));
        Assert.assertTrue(itr.hasNext());

        be = (OptEdge) itr.next();
        Assert.assertTrue(
                be.equals(m_other1)
                        || be.equals(m_other2)
                        || be.equals(m_other3)
                        || be.equals(m_other4)
                        || be.equals(m_loopA));

        be = (OptEdge) itr.next();
        Assert.assertTrue(
                be.equals(m_other1)
                        || be.equals(m_other2)
                        || be.equals(m_other3)
                        || be.equals(m_other4)
                        || be.equals(m_loopA));

        be = (OptEdge) itr.next();
        Assert.assertTrue(
                be.equals(m_other1)
                        || be.equals(m_other2)
                        || be.equals(m_other3)
                        || be.equals(m_other4)
                        || be.equals(m_loopA));
        Assert.assertTrue(itr.hasNext());

        be = (OptEdge) itr.next();
        Assert.assertTrue(
                be.equals(m_other1)
                        || be.equals(m_other2)
                        || be.equals(m_other3)
                        || be.equals(m_other4)
                        || be.equals(m_loopA));
        Assert.assertFalse(itr.hasNext());

        // loop on other node
        addLoopB();

        itr = m_edge.getRelated();
        Assert.assertTrue(itr.hasNext());

        be = (OptEdge) itr.next();
        Assert.assertTrue(
                be.equals(m_other1)
                        || be.equals(m_other2)
                        || be.equals(m_other3)
                        || be.equals(m_other4)
                        || be.equals(m_loopB));
        Assert.assertTrue(itr.hasNext());

        be = (OptEdge) itr.next();
        Assert.assertTrue(
                be.equals(m_other1)
                        || be.equals(m_other2)
                        || be.equals(m_other3)
                        || be.equals(m_other4)
                        || be.equals(m_loopB));

        be = (OptEdge) itr.next();
        Assert.assertTrue(
                be.equals(m_other1)
                        || be.equals(m_other2)
                        || be.equals(m_other3)
                        || be.equals(m_other4)
                        || be.equals(m_loopB));

        be = (OptEdge) itr.next();
        Assert.assertTrue(
                be.equals(m_other1)
                        || be.equals(m_other2)
                        || be.equals(m_other3)
                        || be.equals(m_other4)
                        || be.equals(m_loopB));
        Assert.assertTrue(itr.hasNext());

        be = (OptEdge) itr.next();
        Assert.assertTrue(
                be.equals(m_other1)
                        || be.equals(m_other2)
                        || be.equals(m_other3)
                        || be.equals(m_other4)
                        || be.equals(m_loopB));
        Assert.assertFalse(itr.hasNext());

        // loop on both
        addLoopAB();

        itr = m_edge.getRelated();
        Assert.assertTrue(itr.hasNext());

        be = (OptEdge) itr.next();
        Assert.assertTrue(
                be.equals(m_other1)
                        || be.equals(m_other2)
                        || be.equals(m_loopA)
                        || be.equals(m_other3)
                        || be.equals(m_other4)
                        || be.equals(m_loopB));
        Assert.assertTrue(itr.hasNext());

        be = (OptEdge) itr.next();
        Assert.assertTrue(
                be.equals(m_other1)
                        || be.equals(m_other2)
                        || be.equals(m_loopA)
                        || be.equals(m_other3)
                        || be.equals(m_other4)
                        || be.equals(m_loopB));

        be = (OptEdge) itr.next();
        Assert.assertTrue(
                be.equals(m_other1)
                        || be.equals(m_other2)
                        || be.equals(m_loopA)
                        || be.equals(m_other3)
                        || be.equals(m_other4)
                        || be.equals(m_loopB));

        be = (OptEdge) itr.next();
        Assert.assertTrue(
                be.equals(m_other1)
                        || be.equals(m_other2)
                        || be.equals(m_loopA)
                        || be.equals(m_other3)
                        || be.equals(m_other4)
                        || be.equals(m_loopA));
        Assert.assertTrue(itr.hasNext());

        be = (OptEdge) itr.next();
        Assert.assertTrue(
                be.equals(m_other1)
                        || be.equals(m_other2)
                        || be.equals(m_loopA)
                        || be.equals(m_other3)
                        || be.equals(m_other4)
                        || be.equals(m_loopB));

        be = (OptEdge) itr.next();
        Assert.assertTrue(
                be.equals(m_other1)
                        || be.equals(m_other2)
                        || be.equals(m_loopA)
                        || be.equals(m_other3)
                        || be.equals(m_other4)
                        || be.equals(m_loopB));

        Assert.assertFalse(itr.hasNext());
    }

