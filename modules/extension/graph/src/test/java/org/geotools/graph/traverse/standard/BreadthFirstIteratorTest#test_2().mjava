    /**
     * Create a simple graph which has no bifurcations and do a kill branch at some intermediate
     * node. Then continue the traversal.
     *
     * <p>Expected: After kill: 1. Every node of with an id greater than the id of the killing node
     * should not be visited. After continue: 2. No more nodes should be visited.
     */
    @Test
    public void test_2() {
        int nnodes = 100;
        Node[] ends = GraphTestUtil.buildNoBifurcations(builder(), nnodes);
        final int kill = 50;

        CountingWalker walker =
                new CountingWalker() {
                    private int m_mode = 0;

                    @Override
                    public int visit(Graphable element, GraphTraversal traversal) {
                        super.visit(element, traversal);
                        if (m_mode == 0) {
                            // check for stopping node
                            if (element.getID() == kill) {
                                m_mode++;
                                return (GraphTraversal.KILL_BRANCH);
                            }
                        } else if (m_mode == 1) {
                            // should never get here
                            Assert.fail();
                        }
                        return (GraphTraversal.CONTINUE);
                    }
                };

        BreadthFirstIterator iterator = createIterator();
        BasicGraphTraversal traversal =
                new BasicGraphTraversal(builder().getGraph(), walker, iterator);
        traversal.init();

        iterator.setSource(ends[0]);
        traversal.traverse();

        // kill node should be visited and nodes with greater id should not
        GraphVisitor visitor =
                component -> {
                    if (component.getID() <= kill) Assert.assertTrue(component.isVisited());
                    else Assert.assertFalse(component.isVisited());
                    return (0);
                };
        builder().getGraph().visitNodes(visitor);

        // ensure nodes only visited once
        Assert.assertEquals(walker.getCount(), nnodes - kill + 1);

        // continue, no more nodes should be visited

        traversal.traverse();

        // ensure nodes only visited once
        Assert.assertEquals(walker.getCount(), nnodes - kill + 1);
    }

