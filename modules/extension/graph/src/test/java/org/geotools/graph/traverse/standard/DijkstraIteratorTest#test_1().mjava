    /**
     * Create a graph with no bifurcations and start a traversal from start node, then suspend, and
     * resume. <br>
     * <br>
     * Expected: After supsend: 1. Nodes from 0 to suspend node should be visted, others not.
     *
     * <p>After resume: 1. Next node visited should have id suspend node id + 1 2. Every node should
     * have a cost associated with it == id 3. Every node should have a parent with id node id + 1
     */
    public void test_1() {
        int nnodes = 100;
        Node[] ends = GraphTestUtil.buildNoBifurcations(builder(), nnodes);
        final int suspend = 50;

        CountingWalker walker =
                new CountingWalker() {
                    int m_mode = 0;

                    public int visit(Graphable element, GraphTraversal traversal) {
                        super.visit(element, traversal);
                        if (m_mode == 0) {
                            if (element.getID() == suspend) {
                                m_mode++;
                                return (GraphTraversal.SUSPEND);
                            }
                        } else if (m_mode == 1) {
                            assertEquals(element.getID(), suspend + 1);
                            m_mode++;
                        }
                        return (GraphTraversal.CONTINUE);
                    }
                };

        final DijkstraIterator iterator = createIterator();
        iterator.setSource(ends[0]);

        BasicGraphTraversal traversal =
                new BasicGraphTraversal(builder().getGraph(), walker, iterator);
        traversal.init();
        traversal.traverse();

        GraphVisitor visitor =
                new GraphVisitor() {
                    public int visit(Graphable component) {
                        if (component.getID() <= suspend) assertTrue(component.isVisited());
                        else assertFalse(component.isVisited());
                        return 0;
                    }
                };
        builder().getGraph().visitNodes(visitor);
        assertEquals(walker.getCount(), nnodes - suspend + 1);

        // resume
        traversal.traverse();

        visitor =
                new GraphVisitor() {
                    public int visit(Graphable component) {
                        assertTrue(component.isVisited());
                        assertEquals(iterator.getCost(component), (double) component.getID());
                        if (component.getID() == 0) assertNull(iterator.getParent(component));
                        else
                            assertEquals(
                                    iterator.getParent(component).getID(), component.getID() - 1);

                        return 0;
                    }
                };
        builder().getGraph().visitNodes(visitor);
        assertEquals(walker.getCount(), nnodes);
    }

