    @Test
    public void test_getInRelated() {
        Iterator itr = m_edge.getInRelated();

        OptDirectedEdge de = (OptDirectedEdge) itr.next();
        Assert.assertSame(de, m_inEdge);

        Assert.assertFalse(itr.hasNext());

        // add same edge (shouldn't show up in iterator this time)
        addSame();

        itr = m_edge.getInRelated();

        de = (OptDirectedEdge) itr.next();
        Assert.assertSame(de, m_inEdge);

        Assert.assertFalse(itr.hasNext());

        // add multiple same edges
        addSame2();

        itr = m_edge.getInRelated();

        de = (OptDirectedEdge) itr.next();
        Assert.assertSame(de, m_inEdge);

        Assert.assertFalse(itr.hasNext());

        // add opposite edge
        addOpp();

        itr = m_edge.getInRelated();

        de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(de == m_inEdge || de == m_opp);

        de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(de == m_inEdge || de == m_opp);

        Assert.assertFalse(itr.hasNext());

        // add multiple opposites
        addOpp2();

        itr = m_edge.getInRelated();

        de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(de == m_inEdge || de == m_opp || de == m_opp2);

        de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(de == m_inEdge || de == m_opp || de == m_opp2);

        de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(de == m_inEdge || de == m_opp || de == m_opp2);

        Assert.assertFalse(itr.hasNext());

        addLoops();

        // add loop
        m_edge.getInNode().addIn(m_inloop);
        m_edge.getInNode().addOut(m_inloop);

        itr = m_edge.getInRelated();

        de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(de == m_inEdge || de == m_inloop);

        de = (OptDirectedEdge) itr.next();
        Assert.assertTrue(de == m_inEdge || de == m_inloop);

        Assert.assertFalse(itr.hasNext());
    }

