    /**
     * Create a graph with no bifurcations and do a full traversal. <br>
     * <br>
     * Expected: 1. Nodes should be visited from one end to other in order.
     */
    public void test_0() {
        int nnodes = 100;
        GraphTestUtil.buildNoBifurcations(builder(), nnodes);

        CountingWalker walker =
                new CountingWalker() {
                    public int visit(Graphable element, GraphTraversal traversal) {
                        element.setCount(getCount());
                        return super.visit(element, traversal);
                    }
                };
        DepthFirstTopologicalIterator iterator = createIterator();
        BasicGraphTraversal traversal =
                new BasicGraphTraversal(builder().getGraph(), walker, iterator);
        traversal.init();
        traversal.traverse();

        assertEquals(walker.getCount(), nnodes);

        boolean flip = false;

        for (Node node : builder().getGraph().getNodes()) {
            if (node.getID() == 0 && node.getCount() != 0) {
                flip = true;
                break;
            }
        }

        for (Node node : builder().getGraph().getNodes()) {
            if (flip) assertEquals(node.getCount(), 100 - 1 - node.getID());
            else assertEquals(node.getCount(), node.getID());
        }
    }

