    private static void expandComponent(
            final Node node,
            final Collection<Edge> edges,
            final Collection<Node> componentNodes,
            final Collection<Edge> componentEdges) {
        if (!componentNodes.contains(node)) {
            componentNodes.add(node);
            //            LOGGER.finer("Adding " + node + " to component");
            Vector<Edge> adjacentEdges =
                    findAdjacentEdges(
                            node,
                            edges); // yes, I know node.getEdges() should do this, but this method
            // could be out of data by the time I use this in AutoClust
            adjacentEdges.trimToSize();
            componentEdges.addAll(adjacentEdges);
            //            LOGGER.finer("Adding " + adjacentEdges + " to component");

            Iterator<Edge> aeIt = adjacentEdges.iterator();
            while (aeIt.hasNext()) {
                Edge next = (Edge) aeIt.next();
                //                LOGGER.finer("looking at edge " + next);
                Node additionalNode = next.getOtherNode(node);
                //                LOGGER.finer("its other node is " + additionalNode);
                if (additionalNode == null) {
                    throw new RuntimeException(
                            "I tried to get the other node of this edge "
                                    + next
                                    + " but it doesn't have "
                                    + node);
                }
                expandComponent(additionalNode, edges, componentNodes, componentEdges);
            }
            adjacentEdges.clear();
        }
    }

