        public RelatedIterator(OptEdge edge) {
            ArrayList edges =
                    new ArrayList(
                            m_nodeA.getDegree()
                                    + m_nodeB.getDegree()
                                    - 2
                                    - m_nodeA.getEdges(m_nodeB).size());

            // add all edges of node A except this edge
            for (int i = 0; i < m_nodeA.getEdgeArray().length; i++) {
                Edge e = (Edge) m_nodeA.getEdgeArray()[i];
                if (!e.equals(edge)) edges.add(m_nodeA.getEdgeArray()[i]);
            }

            // add only edges from node b that are node shared with node a
            for (int i = 0; i < m_nodeB.getEdgeArray().length; i++) {
                Edge e = (Edge) m_nodeB.getEdgeArray()[i];
                if (!e.getOtherNode(m_nodeB).equals(m_nodeA)) edges.add(e);
            }

            m_itr = edges.iterator();
        }

