    /**
     * Returns a path <B>from</B> the target <B>to</B> the source. If the desired path is the
     * opposite (from the source to the target), the <i>reverse</i> or the <i>riterator</i> methods
     * from the <b>Path<b> class can be used.
     *
     * @see Path#riterator()
     * @see Path#reverse()
     * @return A path from the target to the source.
     */
    public Path getPath() throws WrongPathException {
        Path path = new Path();

        path.add(m_target);
        Node parent = m_iterator.getParent(m_target);
        while (parent != null) {
            path.add(parent);
            parent = m_iterator.getParent(parent);
        }
        if (!path.getLast().equals(m_iterator.getSource())) {
            throw new WrongPathException("getPath: The path obtained doesn't begin correctly");
        }
        return (path);
    }

