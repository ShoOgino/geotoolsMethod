    /**
     * Builds internal priority queue to manage node costs.
     *
     * @see org.geotools.graph.traverse.GraphIterator#init(Graph)
     */
    @Override
    public void init(Graph graph, GraphTraversal traversal) {
        // initialize data structures
        nodemap = new HashMap<>();

        queue = new PriorityQueue<>(graph.getNodes().size(), comparator);

        // place nodes into priority queue
        graph.visitNodes(
                new GraphVisitor() {
                    @Override
                    public int visit(Graphable component) {
                        // create a Dijkstra node with infinite cost
                        DijkstraNode dn = new DijkstraNode((Node) component, Double.MAX_VALUE);

                        // create the mapping
                        nodemap.put(component, dn);

                        // source component gets a cost of 0
                        if (component == getSource()) dn.cost = 0d;

                        // place into priority queue
                        queue.add(dn);

                        return 0;
                    }
                });
    }

