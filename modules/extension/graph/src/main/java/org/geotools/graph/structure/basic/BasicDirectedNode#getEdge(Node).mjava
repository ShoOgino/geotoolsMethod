  /**
   * First searches for an in edge with an out node == this, and in 
   * node == other. If none is found an edge with out node == other, and in 
   * node == this is searched for.
   * 
   * @see Node#remove(Edge)
   */
  public Edge getEdge(Node other) {
    Edge e = getInEdge((DirectedNode)other);
    if (e != null) return(e);
    return(getOutEdge((DirectedNode)other));
  }

