    /**
     * Returns an iterator over all edges incident to both the in and out nodes.
     *
     * @see org.geotools.graph.structure.Graphable#getRelated()
     */
    public Iterator getRelated() {
        HashSet related = new HashSet();

        // add all edges incident to both nodes
        related.addAll(m_in.getEdges());
        related.addAll(m_out.getEdges());

        // remove this edge
        related.remove(this);

        return (related.iterator());

        //
        //    ArrayList related = new ArrayList();
        //
        //    related.addAll(m_in.getInEdges());
        //
        //    //add out edges, look for an opposite edge, it will have already
        //    // been added so dont add it
        //    for (Iterator itr = m_out.getOutEdges().iterator(); itr.hasNext();) {
        //      DirectedEdge de = (DirectedEdge)itr.next();
        //      switch(de.compareNodes(this)) {
        //        case OPPOSITE_NODE_ORIENTATION: continue;
        //      }
        //      related.add(de);
        //    }
        //
        //    //look for duplicate edges (same direction) if not equal add
        //    // dont add opposite edges
        //    // dont add loops
        //    for (Iterator itr = m_in.getOutEdges().iterator(); itr.hasNext();) {
        //      DirectedEdge de = (DirectedEdge)itr.next();
        //      switch(de.compareNodes(this)) {
        //      	case EQUAL_NODE_ORIENTATION:
        //      	  if (!de.equals(this))
        //      	    related.add(de);
        //      	  continue;
        //        case OPPOSITE_NODE_ORIENTATION:
        //          continue;
        //        case UNEQUAL_NODE_ORIENTATION:
        //          if (de.getNodeA().equals(de.getNodeB())) continue;
        //          related.add(de);
        //      }
        //    }
        //
        //    return(related.iterator());
    }

