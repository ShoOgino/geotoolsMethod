    /**
     * Performs the partition.
     *
     * @return True if the partition was successful, otherwise false.
     */
    public boolean partition() {
        // strategy is to perform a depth first search from a node, every node is
        // reaches is connected therefore in the same partition
        // when traversal ends, start from a new source, repeat until no more
        // sources

        try {
            m_nvisited = m_graph.getNodes().size();

            DepthFirstIterator iterator = new DepthFirstIterator();
            BasicGraphTraversal traversal = new BasicGraphTraversal(m_graph, this, iterator);

            Iterator<?> sources = m_graph.getNodes().iterator();

            traversal.init();
            m_partition = new ArrayList<>();

            while (m_nvisited > 0) {

                // find a node that hasn't been visited and set as source of traversal
                Node source = null;
                while (sources.hasNext()) {
                    source = (Node) sources.next();
                    if (!source.isVisited()) break;
                }

                // if we could not find a source, return false
                if (source == null || source.isVisited()) return (false);

                iterator.setSource(source);
                traversal.traverse();
            }

            // create the individual graphs
            HashSet<Node> nodes = null;
            HashSet<Edge> edges = null;
            ArrayList<Serializable> graphs = new ArrayList<>();

            for (Serializable mPartition : m_partitions) {
                m_partition = (ArrayList<Serializable>) mPartition;
                if (m_partition.size() == 0) continue;

                nodes = new HashSet<>();
                edges = new HashSet<>();
                for (Serializable serializable : m_partition) {
                    Node node = (Node) serializable;
                    nodes.add(node);
                    edges.addAll(node.getEdges());
                }

                graphs.add(new BasicGraph(nodes, edges));
            }

            m_partitions = graphs;

            return (true);
        } catch (Exception e) {
            java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e);
        }
        return (false);
    }

