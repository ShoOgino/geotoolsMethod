    public Graph triangleListToGraph(Vector<Triangle> tList) {
        // turn what I've got into a proper GeoTools2 Graph!
        // But don't include the three temporary nodes and all incident edges.
        Vector<Edge> edgeList = new Vector<>();
        Vector<Node> nodeList = new Vector<>();
        Iterator<Triangle> triangleIterator = tList.iterator();
        while (triangleIterator.hasNext()) {
            Triangle next = triangleIterator.next();
            Edge[] edges = next.getEdges();
            for (int i = 0; i < 3; i++) {
                if (!(((DelaunayEdge) edges[i]).hasEndPoint(temp1)
                        || // this test ensures that we don't
                        ((DelaunayEdge) edges[i]).hasEndPoint(temp2)
                        || // add to the edge list any edges referring
                        ((DelaunayEdge) edges[i]).hasEndPoint(temp3))) { // to the temporary nodes
                    if (!(edgeList.contains(edges[i]))) {
                        edgeList.add(edges[i]);
                        edges[i].getNodeA().add(edges[i]);
                        edges[i].getNodeB().add(edges[i]);
                        if (!(nodeList.contains(edges[i].getNodeA()))) {
                            nodeList.add(edges[i].getNodeA());
                        }
                        if (!(nodeList.contains(edges[i].getNodeB()))) {
                            nodeList.add(edges[i].getNodeB());
                        }
                    }
                }
            }
        }

        return new BasicGraph(nodeList, edgeList);
    }

