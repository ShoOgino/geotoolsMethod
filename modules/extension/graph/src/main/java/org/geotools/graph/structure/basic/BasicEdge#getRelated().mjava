    /**
     * Returns all edges that are adjacent to both the A and B nodes. This iterator is generated by
     * calculating an underlying collection upon each method call.
     *
     * @see org.geotools.graph.structure.Graphable#getRelated()
     */
    public Iterator getRelated() {
        ArrayList adj = new ArrayList();

        for (Iterator itr = m_nodeA.getEdges().iterator(); itr.hasNext(); ) {
            Edge e = (Edge) itr.next();
            switch (e.compareNodes(this)) {
                case EQUAL_NODE_ORIENTATION: // same node orientation
                    if (e.equals(this)) continue;
                case OPPOSITE_NODE_ORIENTATION: // opposite node orientation
                case UNEQUAL_NODE_ORIENTATION: // different
                    adj.add(e);
            }
        }

        for (Iterator itr = m_nodeB.getEdges().iterator(); itr.hasNext(); ) {
            Edge e = (Edge) itr.next();
            switch (e.compareNodes(this)) {
                case EQUAL_NODE_ORIENTATION:
                case OPPOSITE_NODE_ORIENTATION:
                    continue; // edges already added from other node
                case UNEQUAL_NODE_ORIENTATION:
                    adj.add(e);
            }
        }

        return (adj.iterator());
    }

