    /**
     * Returns a path <B>from</B> g <B>to</B> the source. If the desired path is the opposite (from
     * the source to g) can be used.
     *
     * @param g The start node of the path to be calculated.
     * @see Path#riterator()
     * @return A path from g to the source.
     */
    public Path getPath(Graphable g) {
        Path p = new Path();
        p.add(g);

        Graphable parent = g;
        while ((parent = m_iterator.getParent(parent)) != null) p.add(parent);

        if (!p.getLast().equals(m_iterator.getSource())) return (null);

        return (p);
    }

