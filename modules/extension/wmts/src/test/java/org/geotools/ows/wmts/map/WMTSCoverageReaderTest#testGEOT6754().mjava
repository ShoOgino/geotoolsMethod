    @Test
    public void testGEOT6754() throws Exception {
        HTTPClient httpClientMock =
                new MockHttpClient() {
                    @Override
                    public HTTPResponse get(URL url, Map<String, String> headers)
                            throws IOException {
                        if (url.toString().toLowerCase().contains("request=gettile")) {
                            return new MockHTTPResponse("test-data/world.png");
                        } else {
                            throw new NotImplementedException(
                                    "request is not implemented. " + url.toString());
                        }
                    }
                };
        File fileCapabilities = getResourceFile("test-data/topp_states.getcapa.xml");
        WMTSCapabilities capabilities = createCapabilities(fileCapabilities);
        WebMapTileServer server =
                new WebMapTileServer(
                        new URL("http://fake.fake/fake"), httpClientMock, capabilities);

        WMTSLayer layer = server.getCapabilities().getLayer("topp:states");
        WMTSCoverageReader coverageReader = new WMTSCoverageReader(server, layer);

        ReferencedEnvelope requestedEnvelope =
                new ReferencedEnvelope(-100, -98, 41, 43, CRS.decode("EPSG:4326", true));
        GridGeometry2D gridGeometry =
                new GridGeometry2D(new GridEnvelope2D(0, 0, 1018, 632), requestedEnvelope);

        final Parameter<Interpolation> paramInterpolation =
                (Parameter<Interpolation>) AbstractGridFormat.INTERPOLATION.createValue();
        paramInterpolation.setValue(Interpolation.getInstance(Interpolation.INTERP_NEAREST));
        Parameter<GridGeometry2D> paramGridGeometry =
                (Parameter<GridGeometry2D>) AbstractGridFormat.READ_GRIDGEOMETRY2D.createValue();
        paramGridGeometry.setValue(gridGeometry);

        coverageReader.read(new GeneralParameterValue[] {paramInterpolation, paramGridGeometry});
    }

