    @Test
    public void testParser3() throws Exception {
        WMTSCapabilities capabilities = createCapabilities("nasa.getcapa.xml");
        try {
            Assert.assertEquals("1.0.0", capabilities.getVersion());

            WMTSService service = (WMTSService) capabilities.getService();
            Assert.assertEquals("OGC WMTS", service.getName());
            Assert.assertEquals(
                    "NASA Global Imagery Browse Services for EOSDIS", service.getTitle());

            String[] keywordList = service.getKeywordList();
            Assert.assertNotNull(keywordList);
            Assert.assertEquals("World", keywordList[0]);
            Assert.assertEquals("Global", keywordList[1]);

            WMTSRequest request = capabilities.getRequest();

            OperationType getTile = request.getGetTile();
            Assert.assertNotNull(getTile);

            Assert.assertEquals(519, capabilities.getLayerList().size());

            List<WMTSLayer> layers = capabilities.getLayerList();
            WMTSLayer l0 = layers.get(0);

            Assert.assertEquals("AMSR2_Snow_Water_Equivalent", l0.getName());
            Assert.assertNull(l0.getParent());

            // assertTrue(l0.getSrs().contains("urn:ogc:def:crs:OGC:2:84")); //
            // case should not matter
            Assert.assertTrue(l0.getSrs().contains("CRS:84"));

            Assert.assertNotNull("Missing dimensions", l0.getDimensions());
            Assert.assertEquals("Bad dimensions size", 1, l0.getDimensions().size());
            String dimName = l0.getDimensions().keySet().iterator().next();
            Assert.assertTrue(
                    "Bad dimension name (Time!=" + dimName + ")", "Time".equalsIgnoreCase(dimName));

            CRSEnvelope bbox = layers.get(1).getBoundingBoxes().get("EPSG:4326");
            Assert.assertNotNull(bbox);

        } catch (Exception e) {
            java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e);
            if ((e.getMessage() != null) && e.getMessage().indexOf("timed out") > 0) {
                LOGGER.warning("Unable to test - timed out: " + e);
            } else {
                throw (e);
            }
        }
    }

