    public void testParser3() throws Exception {
        WMTSCapabilities capabilities = createCapabilities("nasa.getcapa.xml");
        try {
            assertEquals("1.0.0", capabilities.getVersion());

            WMTSService service = (WMTSService)capabilities.getService();
            assertEquals("OGC WMTS", service.getName());
            assertEquals("NASA Global Imagery Browse Services for EOSDIS", service.getTitle());

            String[] keywordList = service.getKeywordList();
            assertNotNull(keywordList);
            assertEquals("World", keywordList[0]);
            assertEquals("Global", keywordList[1]);

            WMTSRequest request = capabilities.getRequest();

            OperationType getTile = request.getGetTile();
            assertNotNull(getTile);

            assertEquals(519,capabilities.getLayerList().size());

            Layer[] layers = (Layer[]) capabilities.getLayerList()
                    .toArray(new Layer[capabilities.getLayerList().size()]);

            Layer l0 = layers[0];

            assertEquals("AMSR2_Snow_Water_Equivalent", l0.getName());
            assertNull(l0.getParent());
            
            //assertTrue(l0.getSrs().contains("urn:ogc:def:crs:OGC:2:84")); // case should not matter
            assertTrue(l0.getSrs().contains("CRS:84"));

            assertNotNull("Missing dimensions", l0.getDimensions());
            assertEquals("Bad dimensions size", 1, l0.getDimensions().size());
            String dimName = l0.getDimensions().keySet().iterator().next();
            assertTrue("Bad dimension name (Time!="+dimName+")", "Time".equalsIgnoreCase(dimName));

            CRSEnvelope bbox = (CRSEnvelope) layers[1].getBoundingBoxes().get("EPSG:4326");
            assertNotNull(bbox);


        } catch (Exception e) {
            e.printStackTrace();
            if ((e.getMessage() != null) && e.getMessage().indexOf("timed out") > 0) {
                System.err.println("Unable to test - timed out: " + e);
            } else {
                throw (e);
            }
        }
    }

