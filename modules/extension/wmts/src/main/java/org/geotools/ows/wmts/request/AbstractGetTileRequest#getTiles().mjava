    /** Compute the set of tiles needed to generate the image. */
    @Override
    public Set<Tile> getTiles() throws ServiceException {
        Set<Tile> tiles;
        if (layer == null) {
            throw new ServiceException("GetTiles called with no layer set");
        }

        if (LOGGER.isLoggable(Level.FINE)) LOGGER.fine("getTiles: layer:" + layer);

        String layerString = "";
        String styleString = "";

        try {
            // spaces are converted to plus signs, but must be %20 for url calls
            // [GEOT-4317]
            layerString = URLEncoder.encode(layer.getName(), "UTF-8").replaceAll("\\+", "%20");
        } catch (UnsupportedEncodingException | NullPointerException e) {
            layerString = layerString + layer.getName();
        }
        styleName = styleName == null ? "" : styleName;
        try {
            styleString = URLEncoder.encode(styleName, "UTF-8").replaceAll("\\+", "%20");
        } catch (UnsupportedEncodingException | NullPointerException e1) {
            styleString = styleString + styleName;
        }

        setProperty(LAYER, layerString);
        setProperty(STYLE, styleString);

        if (LOGGER.isLoggable(Level.FINE))
            LOGGER.fine(
                    "getTiles:  layer:"
                            + layer
                            + " w:"
                            + requestedWidth
                            + " x h:"
                            + requestedHeight);

        TileMatrixSet matrixSet = selectMatrixSet();

        String requestUrl = onlineResource.toString();
        if (WMTSServiceType.REST.equals(type)) {
            String format = (String) getProperties().get("Format");
            if (format == null || format.isEmpty()) {
                format = "image/png";
                if (LOGGER.isLoggable(Level.FINE))
                    LOGGER.fine("Format not set, trying with " + format);
            }
            requestUrl = layer.getTemplate(format);
            if (requestUrl == null) {
                if (LOGGER.isLoggable(Level.INFO))
                    LOGGER.info("Template URL not available for format  " + format);
                format = layer.getFormats().get(0);
                if (LOGGER.isLoggable(Level.FINE)) {
                    LOGGER.fine(
                            "Available formats: " + layer.getFormats() + " -- Selecting " + format);
                }
                requestUrl = layer.getTemplate(format);
            }
        }

        WMTSTileService wmtsService =
                new WMTSTileService(requestUrl, type, layer, styleString, matrixSet);

        wmtsService.getDimensions().put(WMTSTileService.DIMENSION_TIME, requestedTime);

        ((Map)
                        (wmtsService
                                .getExtrainfo()
                                .computeIfAbsent(
                                        WMTSTileService.EXTRA_HEADERS, extra -> new HashMap<>())))
                .putAll(this.headers);

        // zoomLevel = factory.getZoomLevel(zoom, wmtsService);
        int scale = 0;

        try {
            scale =
                    (int)
                            Math.round(
                                    RendererUtilities.calculateScale(
                                            requestedBBox, requestedWidth, requestedHeight, DPI));
        } catch (FactoryException | TransformException ex) {
            LOGGER.log(Level.WARNING, "Failed to calculate scale", ex);
            throw new ServiceException("Failed to calculate scale: " + ex.getMessage());
        }

        // these are all the tiles available in the tilematrix within the requested bbox
        tiles = wmtsService.findTilesInExtent(requestedBBox, scale, false, MAXTILES);
        if (LOGGER.isLoggable(Level.FINE))
            LOGGER.fine("found " + tiles.size() + " tiles in " + requestedBBox);
        if (tiles.isEmpty()) {
            return tiles;
        }
        Tile first = tiles.iterator().next();
        int z = first.getTileIdentifier().getZ();

        TileMatrixSetLink tmsl = layer.getTileMatrixLinks().get(matrixSet.getIdentifier());
        TileMatrixLimits limit = WMTSTileFactory.getLimits(tmsl, matrixSet, z);

        // remove tiles outside layer's limits
        List<Tile> tilesOutsideLimits = new ArrayList<>();
        for (Tile tile : tiles) {

            int x = tile.getTileIdentifier().getX();
            int y = tile.getTileIdentifier().getY();
            if (x < limit.getMincol() || x > limit.getMaxcol()) {
                if (LOGGER.isLoggable(Level.FINE))
                    LOGGER.fine(
                            "col "
                                    + x
                                    + " outside limits "
                                    + limit.getMincol()
                                    + " "
                                    + limit.getMaxcol());
                tilesOutsideLimits.add(tile);
                continue;
            }

            if (y < limit.getMinrow() || y > limit.getMaxrow()) {
                if (LOGGER.isLoggable(Level.FINE))
                    LOGGER.fine(
                            "row "
                                    + y
                                    + " outside limits "
                                    + limit.getMinrow()
                                    + " "
                                    + limit.getMaxrow());
                tilesOutsideLimits.add(tile);
            }
        }
        tiles.removeAll(tilesOutsideLimits);

        return tiles;
    }

