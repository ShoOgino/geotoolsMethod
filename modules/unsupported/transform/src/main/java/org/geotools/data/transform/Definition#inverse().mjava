    /**
     * Returns the inverse to this Definition, that is, the definition of the source attribute
     * corresponding to this computed attribute, if any. Only a small set of expression
     * are invertible in general, and a smaller subset of that can be inverted by this method.     
     * Implementor can override this method to provide a custom inversion logic.
     * 
     * @return The inverse of this definition, or null if not invertible or if the inversion
     *         logic for the specified case is missing
     */
    public List<Definition> inverse() {
        if(expression instanceof PropertyName) {
            PropertyName pn = (PropertyName) expression;
            return Arrays.asList(new Definition(pn.getPropertyName(), FF.property(name)));
        } 
        
        // add a Point(x,y) function and then have it be split into x,y here (two definitions)
        
        // TODO: look into algebraic inversion (e.g y = x + 3 -> x = y  - 3) and into creating a concept
        // of invertible function (which would work, with a bit of a loss in precision, 
        // for some math functions for example)
        
        return null;
    }

