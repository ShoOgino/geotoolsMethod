    @Override
    protected Iterator<SimpleFeature> openIterator() {
        try {
            // build the query against the original store
            Query txQuery = transformer.transformQuery(query);
            
            // let the world know about the query re-shaping
            if (LOGGER.isLoggable(Level.FINE)) {
                LOGGER.log(Level.FINE,
                        "The original query for feature extraction {0} has been transformed to {1}",
                        new Object[] { query, txQuery });
            }
            
            // grab the original features
            SimpleFeatureIterator fi = transformer.getSource().getFeatures(txQuery).features();
            SimpleFeatureIterator transformed = new TransformFeatureIteratorWrapper(fi, transformer);
            
            // see if we have to apply sort
            if(query.getSortBy() != null && txQuery.getSortBy() == null) {
                transformed = new SortedFeatureIterator(transformed, getSchema(), query.getSortBy(), -1);
            }
            
            // see if we have to apply the offset manually
            if(query.getStartIndex() != null && txQuery.getStartIndex() == null) {
                for (int i = 0; i < query.getStartIndex() && transformed.hasNext(); i++) {
                    transformed.next();
                }
            }
            
            // do we also have to apply limits?
            if(txQuery.getMaxFeatures() > query.getMaxFeatures()) {
                transformed = new MaxFeaturesIterator(transformed, query.getMaxFeatures());
            }
            
            return new SimpleFeatureIteratorIterator(transformed);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

