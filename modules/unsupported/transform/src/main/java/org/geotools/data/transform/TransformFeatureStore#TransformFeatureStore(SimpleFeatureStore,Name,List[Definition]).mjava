    public TransformFeatureStore(SimpleFeatureStore store, Name name, List<Definition> definitions)
            throws IOException {
        super(store, name, definitions);
        this.store = store;

        // build the inverted definitions
        List<Definition> inverted = new ArrayList<Definition>();
        for (Definition definition : definitions) {
            List<Definition> inverses = definition.inverse();
            if (inverses != null) {
                inverted.addAll(inverses);
            }
        }

        // check it was possible to invert at least one definition
        if (inverted.size() == 0) {
            throw new IllegalArgumentException("None of the expressions could be inverted, cannot "
                    + "create a writable transformer");
        }

        // check we have enough to compute all required fields
        List<String> requiredAttributes = getRequiredAttributes(store.getSchema());
        for (Definition id : inverted) {
            requiredAttributes.remove(id.getName());
        }
        if (requiredAttributes.size() > 0) {
            throw new IllegalArgumentException(
                    "The inverted expressions do not cover some of the required attributes, "
                            + "cannot create a writable transformer. The missing mandatory attributes are: "
                            + requiredAttributes);
        }

        // ah, all is in order, create the inverse transformer then
        invertedTransformer = new Transformer(this, store.getName(), inverted, store.getSchema());
    }

