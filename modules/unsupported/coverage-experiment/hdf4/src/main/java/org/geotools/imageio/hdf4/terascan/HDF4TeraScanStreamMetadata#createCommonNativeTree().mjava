    /**
     * Returns the XML DOM <code>Node</code> object that represents the root
     * of a tree of metadata contained within this object on its native format.
     * 
     * @return a root node containing common metadata exposed on its native
     *         format.
     */
    protected Node createCommonNativeTree() {
        // Create root node
        final IIOMetadataNode root = new IIOMetadataNode(nativeMetadataFormatName);

        // ////////////////////////////////////////////////////////////////////
        //
        // GlobalAttributes
        //
        // ////////////////////////////////////////////////////////////////////
        final IIOMetadataNode node = new IIOMetadataNode(GLOBAL_ATTRIBUTES);
        if (imageReader instanceof HDF4TeraScanImageReader) {
            final HDF4TeraScanImageReader reader = (HDF4TeraScanImageReader) imageReader;
            final int numAttributes = reader.getNumGlobalAttributes();
            try {
                for (int i = 0; i < numAttributes; i++) {
                	 final KeyValuePair keyValuePair = reader.getGlobalAttribute(i);
                     String attribName = keyValuePair.getKey();
                     final String attribValue = keyValuePair.getValue();
                    // //
                    // Note: IIOMetadata doesn't allow to set attribute name
                    // containing "\". Therefore we replace that char
                    // //
                    if (attribName.contains("\\"))
                    	attribName = Utilities.adjustAttributeName(attribName);
                    node.setAttribute(attribName, attribValue);
                }
            } catch (IOException e) {
                throw new IllegalArgumentException("Unable to parse attribute",e);
            }

            root.appendChild(node);
        }
        return root;
    }

