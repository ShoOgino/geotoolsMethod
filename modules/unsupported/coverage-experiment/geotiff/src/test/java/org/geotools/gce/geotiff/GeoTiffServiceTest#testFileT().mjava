	public void testFileT() throws Exception {
//		File file = TestData.file(GeoTiffReaderTest.class, "t.tiff");
//		
//		Map<String,Serializable> params = new HashMap<String,Serializable>();
//		params.put("url",file.toURI().toURL());
//		CoverageAccess access = CoverageIO.connect(params);
//		assertNotNull(access);
//		
//		assertTrue( access.getSupportedAccessTypes().contains( AccessType.READ_ONLY ));
//		assertTrue( access.getDriver() instanceof GeoTiffDriver );
//		assertEquals( params, access.getConnectParameters() );
//		
//		ServiceInfo info = access.getInfo(null);
//		assertNotNull( "info required", info );
//		assertNotNull( "title based on filename", info.getTitle() );
//		assertNotNull( "description", info.getDescription() );
//		assertEquals( "expected source to match file URI", file.toURI(), info.getSource() );
//		
//		// An example of schema would be "GTOPO30" data produce by http://www.usgs.gov/
//		// schema may be: http://edc.usgs.gov/products/elevation/gtopo30/gtopo30.html
//		//
//		assertNotNull( "expected schema to be DEM", info.getSchema() );
//		Map<String, Parameter<?>> parameterInfo;
//		
//		parameterInfo = access.getAccessParameterInfo(AccessType.READ_ONLY);
//		assertNotNull( parameterInfo );
//		
//		parameterInfo = access.getAccessParameterInfo(AccessType.READ_WRITE);
//		assertNotNull( parameterInfo );
//		
//		List<Name> names = access.getNames( null );
//		assertFalse( names.isEmpty() );
//		assertEquals( names.size(), access.getCoveragesNumber(null) );
//		for( Name name : names ){
//			Envelope extent = access.getExtent(name, null );
//			assertNotNull( extent );
//			assertNotNull( extent.getCoordinateReferenceSystem() );
//			assertTrue( extent.getSpan(0) > 0 );
//			assertTrue( extent.getSpan(1) > 0 );
//			
//			CoverageSource source = access.access( name, null, AccessType.READ_ONLY, null, null );
//			assertNotNull( "read access", source );
//			
//			CoverageStore store = (CoverageStore) access.access( name, null, AccessType.READ_WRITE, null, null );
//			assertNotNull( "write access", store );
//			
//		}
	}

