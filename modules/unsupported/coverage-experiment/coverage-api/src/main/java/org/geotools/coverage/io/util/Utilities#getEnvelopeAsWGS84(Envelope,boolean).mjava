/**
     * Get a WGS84 envelope for the specified envelope. The get2D parameter
     * allows to specify if we need the returned coverage as an
     * {@code Envelope2D} or a more general {@code GeneralEnvelope} instance.
     * 
     * @param envelope
     * @param get2D
     *                if {@code true}, the requested envelope will be an
     *                instance of {@link Envelope2D}. If {@code false} it will
     *                be an instance of {@link GeneralEnvelope
     * @return a WGS84 envelope as {@link Envelope2D} in case of request for a
     *         2D WGS84 Envelope, or a {@link GeneralEnvelope} otherwise.
     * @throws FactoryException
     * @throws TransformException
     */
    public static Envelope getEnvelopeAsWGS84(final Envelope envelope, boolean get2D)
            throws FactoryException, TransformException {
        if (envelope == null)
            throw new IllegalArgumentException("Specified envelope is null");
        Envelope requestedWGS84;
        final MathTransform transformToWGS84;
        final CoordinateReferenceSystem crs = envelope.getCoordinateReferenceSystem();

        // //
        //
        // get a math transform to go to WGS84
        //
        // //
        if (!CRS.equalsIgnoreMetadata(crs, DefaultGeographicCRS.WGS84)) {
            transformToWGS84 = CRS.findMathTransform(crs, DefaultGeographicCRS.WGS84, true);
        } else {
            transformToWGS84 = IdentityTransform.create(2);
        }

        // do we need to transform the requested envelope?
        if (!transformToWGS84.isIdentity()) {
            GeneralEnvelope env = CRS.transform(transformToWGS84, envelope);
            if (get2D) {
                requestedWGS84 = new Envelope2D(env);
                ((Envelope2D) requestedWGS84)
                        .setCoordinateReferenceSystem(DefaultGeographicCRS.WGS84);
            } else {
                requestedWGS84 = env;
                ((GeneralEnvelope) requestedWGS84)
                        .setCoordinateReferenceSystem(DefaultGeographicCRS.WGS84);
            }
            return requestedWGS84;

        } else {
            if (get2D)
                return new Envelope2D(envelope);
            else
                return new GeneralEnvelope(envelope);
        }
    }

