    /**
     * Test to see if this factory is suitable for processing the data pointed to by the params map.
     * 
     * <p>
     * If this datasource requires a number of parameters then this method should check that they
     * are all present and that they are all valid. If the datasource is a file reading data source
     * then the extensions or mime types of any files specified should be checked. For example, a
     * Shapefile datasource should check that the url param ends with shp, such tests should be case
     * insensitive.
     * </p>
     * 
     * @param params
     *                The full set of information needed to construct a live data source.
     * 
     * @return boolean true if and only if this factory can process the resource indicated by the
     *         param set and all the required params are present.
     */
    public static boolean canConnect(java.util.Map<String, Serializable> params) {
        for (Driver driver : getAvailableDrivers()) {

            boolean canProcess = false;
            try {
                canProcess = driver.canProcess(DriverOperation.CONNECT,params);
            } catch (Throwable t) {
                LOGGER.log(Level.WARNING, "Error asking " + driver.getTitle()
                        + " if it can process request", t);
                // Protect against DataStores that don't carefully code
                // canProcess
                continue;
            }
            if (canProcess) {
                boolean isAvailable = false;
                try {
                    isAvailable = driver.isAvailable();
                } catch (Throwable t) {
                    LOGGER.log(Level.WARNING, "Error when checking if " + driver.getTitle()
                            + " is available" , t);
                    // Protect against Drivers that don't carefully code
                    // isAvailable
                    continue;
                }
                if (isAvailable) {
                    try {
                        if( driver.canProcess(DriverOperation.CONNECT,params))
                        	return true;
                    } catch (Exception couldNotConnect) {
                        LOGGER.log(Level.WARNING, driver.getTitle()
                                + " could not connect", couldNotConnect);
                    }
                } 
            }
        }
        return false;
    }

