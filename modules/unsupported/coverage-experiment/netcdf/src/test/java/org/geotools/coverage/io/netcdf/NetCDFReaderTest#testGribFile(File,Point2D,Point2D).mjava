    /**
     * Private method for checking if the selected point are nodata or not. This ensures that the images are flipped vertically only if needed. If the
     * image is not correctly flipped then, validpoint and nodatapoint should be inverted.
     *
     * @param inputFile
     * @param validPoint
     * @param nodataPoint
     * @throws MalformedURLException
     * @throws DataSourceException
     * @throws IOException
     */
    private void testGribFile(final File inputFile, Point2D validPoint, Point2D nodataPoint)
            throws MalformedURLException, DataSourceException, IOException {
        // Get format
        final AbstractGridFormat format = (AbstractGridFormat) GridFormatFinder.findFormat(
                inputFile.toURI().toURL(), null);
        final NetCDFReader reader = new NetCDFReader(inputFile, null);
        assertNotNull(format);
        assertNotNull(reader);
        try {
            // Selection of all the Coverage names
            String[] names = reader.getGridCoverageNames();
            assertNotNull(names);
            // Selections of one Coverage
            GridCoverage2D grid = reader.read(names[1], null);
            assertNotNull(grid);
            // Selection of one coordinate from the Coverage and check if the
            // value is not a NaN
            float[] result = new float[1];
            grid.evaluate(validPoint, result);
            assertTrue(!Float.isNaN(result[0]));
            // Selection of one coordinate from the Coverage and check if the
            // value is NaN
            float[] result_2 = new float[1];
            grid.evaluate(nodataPoint, result_2);
            assertTrue(Float.isNaN(result_2[0]));
        } finally {
            if (reader != null) {
                try {
                    reader.dispose();
                } catch (Throwable t) {
                    // Does nothing
                }
            }
        }
    }

