    /**
     * Adding CoordinateReferenceSystem nodes to this
     * {@link SpatioTemporalMetadata} instance.
     * 
     * @param cs
     *                the available {@link CoordinateSystem} netcdf object
     *                obtained from the current netCDF variable.
     */
    private void addCoordinateReferenceSystem(CoordinateSystem cs) {
        String crsType, csType;
        // TODO: fix this to handle Vertical instead of Geographic3D
        if (cs == null)
            throw new IllegalArgumentException(
                    "Provided CoordinateSystem is null");

        if (cs.isLatLon()) {
            crsType = cs.hasVerticalAxis() ? SpatioTemporalMetadataFormat.GEOGRAPHIC_3D
                    : SpatioTemporalMetadataFormat.GEOGRAPHIC;
            csType = SpatioTemporalMetadataFormat.ELLIPSOIDAL;
        } else if (cs.isGeoXY()) {
            crsType = cs.hasVerticalAxis() ? SpatioTemporalMetadataFormat.PROJECTED_3D
                    : SpatioTemporalMetadataFormat.PROJECTED;
            csType = SpatioTemporalMetadataFormat.CARTESIAN;
        } else {
            crsType = null;
            csType = null;
        }

        // ////
        //
        // Setting up the AbstractCoordinateReferenceSystem
        //
        // ////
        CoordinateReferenceSystem crs = getCRS(crsType);
        if (crsType == SpatioTemporalMetadataFormat.GEOGRAPHIC
                || crsType == SpatioTemporalMetadataFormat.GEOGRAPHIC_3D) {
            crs.setIdentification(new Identification("WGS 84", null, null,"EPSG:4326"));
            crs.setCoordinateSystem(new Identification("WGS 84", null, null, null));

            // //
            // Datum and Ellipsoid
            // //
            crs.setDatum(Datum.GEODETIC_DATUM, new Identification("WGS_1984", "World Geodetic System 1984", null, "EPSG:6326"));
            crs.addPrimeMeridian("0.0", new Identification("Greenwich", null, null, "EPSG:8901"));
            crs.addEllipsoid("6378137.0", null, "298.257223563", "meter", new Identification("WGS 84", null, null, "EPSG:7030"));
        } else if (crsType == SpatioTemporalMetadataFormat.PROJECTED
                || crsType == SpatioTemporalMetadataFormat.PROJECTED_3D) {
            // TODO Handle this case ... we need an example of netCDF projected
            // CoordinateReferenceSystem
        }

        /*
         * Adds the axis in reverse order, because the NetCDF image reader put
         * the last dimensions in the rendered image. Typical NetCDF convention
         * is to put axis in the (time, depth, latitude, longitude) order, which
         * typically maps to (longitude, latitude, depth, time) order in
         * GeoTools referencing framework.
         */
        final List<CoordinateAxis> axes = cs.getCoordinateAxes();
        for (int i = axes.size(); --i >= cs.getRankDomain() - 2;) {
            addCoordinateAxis(crs, axes.get(i));
        }

        // ////
        //
        // VerticalCRS
        //
        // ////
        if (cs.getRankDomain() > 2 && cs.hasVerticalAxis()) {
            setHasVerticalCRS(true);
            VerticalCRS vCRS = getVerticalCRS();
            vCRS.setDatum(new Identification("Mean Sea Level", null, null,
                    "EPSG:5100"));

            if (cs.getElevationAxis() != null || cs.getAzimuthAxis() != null
                    || cs.getZaxis() != null)
                vCRS.addVerticalDatumType("geoidal");
            else if (cs.getHeightAxis() != null) {
                CoordinateAxis axis = cs.getHeightAxis();
                if (!axis.getName().equalsIgnoreCase("height")) {
                    vCRS.addVerticalDatumType("depth");
                    vCRS.setIdentification(new Identification(
                            "mean sea level depth", null, null, "EPSG:5715"));
                } else {
                    vCRS.addVerticalDatumType("geoidal");
                    vCRS.setIdentification(new Identification(
                            "mean sea level height", null, null, "EPSG:5714"));
                }
            } else if (cs.getPressureAxis() != null)
                vCRS.addVerticalDatumType("barometric");
            else
                vCRS.addVerticalDatumType("other_surface");

            addCoordinateAxis(vCRS, axes.get(cs.getRankDomain() - NetCDFUtilities.Z_DIMENSION));
        }

        // ////
        //
        // TemporalCRS
        //
        // ////
        if (cs.getRankDomain() > 2 && cs.hasTimeAxis()) {
            setHasTemporalCRS(true);
            TemporalCRS tCRS = getTemporalCRS();
            tCRS.setDatum(new Identification("ISO8601", null, null, null));
            addCoordinateAxis(tCRS, axes.get(0));
        }
    }

