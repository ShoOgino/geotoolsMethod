    /**
     * Checks the input provided to this {@link BaseGridCoverage2DReader} and
     * sets all the other objects and flags accordingly.
     * 
     * @param input
     *                provided to this {@link BaseGridCoverage2DReader}.
     * 
     * @param hints
     *                Hints to be used by this reader throughout his life.
     * 
     * @throws UnsupportedEncodingException
     * @throws DataSourceException
     * @throws IOException
     * @throws FileNotFoundException
     */
    protected void checkSource(Object input)
            throws UnsupportedEncodingException, DataSourceException,
            IOException, FileNotFoundException {
        if (input == null) {
            final DataSourceException ex = new DataSourceException(
                    "No source set to read this coverage.");

            if (LOGGER.isLoggable(Level.SEVERE)) {
                LOGGER.log(Level.SEVERE, ex.getLocalizedMessage(), ex);
            }

            throw ex;
        }

        this.source = null;

        // //
        //
        // URL to FIle
        //
        // //
        // if it is an URL pointing to a File I convert it to a file.
        if (input instanceof URL) {
            // URL that point to a file
            final URL sourceURL = ((URL) input);
            this.source = sourceURL;
            if (sourceURL.getProtocol().compareToIgnoreCase("file") == 0) {
                final File fileCheck = new File(URLDecoder.decode(sourceURL
                        .getFile(), "UTF-8"));
                final String path = fileCheck.getAbsolutePath();
                final int imageSpecifierIndex = path.lastIndexOf(":");
                final File file;
                if (imageSpecifierIndex > 1
                        && imageSpecifierIndex > path.indexOf(":")) {
                    file = new File(path.substring(0, imageSpecifierIndex));
                    try {
                        imageIndex = Integer.parseInt(path.substring(
                                imageSpecifierIndex + 1, path.length()));
                    } catch (NumberFormatException nfe) {
                        if (LOGGER.isLoggable(Level.WARNING)) {
                            LOGGER
                                    .log(Level.WARNING,
                                            "Unable to parse the specified 0-based imageIndex");
                        }
                    }

                } else
                    file = fileCheck;
                inputFile = file;
                input = file;
            } else {
                throw new IllegalArgumentException("Unsupported input type");
            }
        }

        if (input instanceof FileImageInputStreamExt) {
            if (source == null) {
                source = input;
            }

            inputFile = ((FileImageInputStreamExt) input).getFile();
            input = inputFile;
        }

        // //
        //        
        // File
        //        
        // //
        if (input instanceof File) {
            final File fileCheck = (File) input;
            final String path = fileCheck.getAbsolutePath();
            final int imageSpecifierIndex = path.lastIndexOf(":");
            final File file;
            if (imageSpecifierIndex > 1
                    && imageSpecifierIndex > path.indexOf(":")) {
                file = new File(path.substring(0, imageSpecifierIndex));
                try {
                    imageIndex = Integer.parseInt(path.substring(
                            imageSpecifierIndex + 1, path.length()));
                } catch (NumberFormatException nfe) {
                    if (LOGGER.isLoggable(Level.WARNING)) {
                        LOGGER
                                .log(Level.WARNING,
                                        "Unable to parse the specified 0-based imageIndex");
                    }
                }

            } else
                file = fileCheck;

            final File sourceFile = file;

            if (source == null) {
                source = sourceFile;
            }

            if (inputFile == null) {
                inputFile = sourceFile;
            }

            if (!sourceFile.exists() || sourceFile.isDirectory()
                    || !sourceFile.canRead()) {
                throw new DataSourceException(
                        "Provided file does not exist or is a directory or is not readable!");
            }

            this.parentPath = sourceFile.getParent();
            coverageName = sourceFile.getName();

            final int dotIndex = coverageName.indexOf(".");
            coverageName = (dotIndex == -1) ? coverageName : coverageName
                    .substring(0, dotIndex);
        } else {
            throw new IllegalArgumentException("Unsupported input type");
        }
    }

