    /**
     * Returns the user object associated as an instance of the specified class.
     * If the value returned by {@link #getUserObject()} is not of the expected
     * type, then this method will tries to parse it as a string.
     * 
     * @param type
     *                The expected class.
     * @return The user object, or {@code null} if none.
     * @throws ClassCastException
     *                 if the user object can not be casted to the specified
     *                 type.
     * 
     * @see #getUserObject()
     * @see #setUserObject
     */
    protected <T> T getUserObject(Class<? extends T> type) throws ClassCastException {
        type = Classes.primitiveToWrapper(type).asSubclass(type);
        Object value = getUserObject();
        if (value instanceof CharSequence) {
            if (Number.class.isAssignableFrom(type)) {
                value = Classes.valueOf(type, value.toString());
            } else {
                final Class<?> component = Classes.primitiveToWrapper(type.getComponentType());
                if (Double.class.equals(component)) {
                    value = parseSequence(value.toString(), false, false);
                } else if (Integer.class.equals(component)) {
                    value = parseSequence(value.toString(), false, true);
                }
            }
        }
        return type.cast(value);
    }

