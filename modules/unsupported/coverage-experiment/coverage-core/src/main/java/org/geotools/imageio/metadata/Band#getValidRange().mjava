    /**
     * Returns the range of valid values for this band. The range use the
     * {@link Integer} type if possible, or the {@link Double} type otherwise.
     * Note that range {@linkplain NumberRange#getMinValue minimum value},
     * {@linkplain NumberRange#getMaxValue maximum value} or both may be null if
     * no {@code "minValue"} or {@code "maxValue"} attribute were found for the
     * {@code "Bands/Band"} element.
     */
    public NumberRange getValidRange() {
        Number minimum, maximum;
        minimum = getInteger("minValue");
        maximum = getInteger("maxValue");
        final Class<? extends Number> type;
        if (minimum == null || maximum == null) {
            minimum = getDouble("minValue");
            maximum = getDouble("maxValue");
            type = Double.class;
        } else {
            type = Integer.class;
        }
        // Note: minimum and/or maximum may be null, in which case the range in
        // unbounded.
        return new NumberRange(type, minimum, true, maximum, true);
    }

