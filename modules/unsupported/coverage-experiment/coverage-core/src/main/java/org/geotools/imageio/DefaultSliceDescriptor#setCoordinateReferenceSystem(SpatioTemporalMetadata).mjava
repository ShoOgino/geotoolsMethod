    /**
     * 
     * @param metadata
     */
    protected void setCoordinateReferenceSystem(SpatioTemporalMetadata metadata) {
        final ReferencingFactoryContainer factories = getFactoryContainer();
        final CSFactory csFactory = factories.getCSFactory();
        final DatumFactory datumFactory = factories.getDatumFactory();
        final CRSFactory crsFactory = factories.getCRSFactory();

        // ////
        // Check if a TemporalCRS is defined
        // ////
        TemporalCRS temporalCRS = null;
        // get the metadata for the temporal CRS
        org.geotools.imageio.metadata.TemporalCRS metaTemporalCRS = metadata.getTemporalCRS();

        try {
            if (metaTemporalCRS != null) {
                // Creating the Time Coordinate System
                String csName = metaTemporalCRS.getCoordinateSystem().getName();
                if (csName == null) {
                    csName = "Unknown";
                }
                final Map<String, String> csMap = Collections.singletonMap("name", csName);
                final Axis timeAxis = metaTemporalCRS.getAxis(0);
                final TimeCS timeCS = csFactory.createTimeCS(csMap, getAxis(timeAxis.getIdentification().getName(), getDirection(timeAxis.getDirection()), timeAxis.getUnits()));

                // Creating the Temporal Datum
                String datumName = metaTemporalCRS.getDatum().getName();
                if (datumName == null) {
                    datumName = "Unknown";
                }
                final Map<String, String> datumMap = Collections.singletonMap("name", datumName);
                final Position timeOrigin = new DefaultPosition(new SimpleInternationalString(metaTemporalCRS.getOrigin()));
                final TemporalDatum temporalDatum = datumFactory.createTemporalDatum(datumMap, timeOrigin.getDate());

                // Finally creating the Temporal CoordinateReferenceSystem
                String crsName = metaTemporalCRS.getIdentification() != null ? metaTemporalCRS.getIdentification().getName(): null;
                if (crsName == null) {
                    crsName = "Unknown";
                }
                final Map<String, String> crsMap = Collections.singletonMap("name", crsName);
                temporalCRS = crsFactory.createTemporalCRS(crsMap,temporalDatum, timeCS);
            }
        } catch (FactoryException e) {
            if (LOGGER.isLoggable(Level.FINE))
                LOGGER.log(Level.FINE, "Unable to parse temporal CRS", e);
            temporalCRS = null;
        } catch (ParseException e) {
            if (LOGGER.isLoggable(Level.FINE))
                LOGGER.log(Level.FINE, "Unable to parse temporal CRS", e);
            temporalCRS = null;
        }

        // ////
        // Check if a VerticalCRS is defined
        // ////
        VerticalCRS verticalCRS = null;
        org.geotools.imageio.metadata.VerticalCRS metaVerticalCRS = metadata.getVerticalCRS();

        try {
            if (metaVerticalCRS != null) {
                // Creating the Vertical Coordinate System
                String csName = metaVerticalCRS.getCoordinateSystem().getName();
                if (csName == null) {
                    csName = "Unknown";
                }
                final Map<String, String> csMap = Collections.singletonMap(
                        "name", csName);
                final Axis verticalAxis = metaVerticalCRS.getAxis(0);
                VerticalCS verticalCS = csFactory.createVerticalCS(csMap,getAxis(verticalAxis.getIdentification().getName(),getDirection(verticalAxis.getDirection()),verticalAxis.getUnits()));

                // Creating the Vertical Datum
                String datumName = metaVerticalCRS.getDatum().getName();
                if (datumName == null) {
                    datumName = "Unknown";
                }
                final Map<String, String> datumMap = Collections.singletonMap("name", datumName);
                final VerticalDatum verticalDatum = datumFactory.createVerticalDatum( datumMap, VerticalDatumType.valueOf(metaVerticalCRS .getVerticalDatumType()));

                // Finally creating the Vertical CoordinateReferenceSystem
                String crsName = metaVerticalCRS.getIdentification() != null ? metaVerticalCRS.getIdentification().getName(): null;
                if (crsName == null) {
                    crsName = "Unknown";
                }
                final Map<String, String> crsMap = Collections.singletonMap("name", crsName);
                verticalCRS = crsFactory.createVerticalCRS(crsMap,verticalDatum, verticalCS);
            }
        } catch (FactoryException e) {
            if (LOGGER.isLoggable(Level.FINE))
                LOGGER.log(Level.FINE, "Unable to parse vertical CRS", e);
            verticalCRS = null;
        }

        // ////
        // Creating the CoordinateReferenceSystem
        // ////
        org.opengis.referencing.crs.CoordinateReferenceSystem crs = null;
        final CoordinateReferenceSystem metaCRS = metadata.getCRS();
        String name = metaCRS.getCRS().getName();
        if (name == null) {
            name = "Unknown";
        }
        if (name.contains("WGS84") || name.contains("WGS 84")) {
            crs = (name.contains("3D")) ? DefaultGeographicCRS.WGS84_3D: wgs84Crs;
        }

        if (crs == null) {
            String type = metaCRS.getCrsType();
            if (type == null) {
                type = (metaCRS.getBaseCRS() == null) ? SpatioTemporalMetadataFormat.GEOGRAPHIC: SpatioTemporalMetadataFormat.PROJECTED;
            }
            final Map<String, String> map = Collections.singletonMap("name",
                    name);
            try {
                if (type.equalsIgnoreCase(SpatioTemporalMetadataFormat.GEOGRAPHIC) || type.equalsIgnoreCase(SpatioTemporalMetadataFormat.GEOGRAPHIC_3D)) {
                    crs = crsFactory.createGeographicCRS(map,(GeodeticDatum) getDatum(metaCRS),(EllipsoidalCS) getCoordinateSystem(metaCRS));
                } else {
                    final Map<String, String> baseMap = Collections.singletonMap("name", metaCRS.getBaseCRS().getName());
                    final GeographicCRS baseCRS = crsFactory.createGeographicCRS(baseMap,(GeodeticDatum) getDatum(metaCRS), DefaultEllipsoidalCS.GEODETIC_2D);
                    crs = crsFactory.createProjectedCRS(map, baseCRS,getProjection(metaCRS),(CartesianCS) getCoordinateSystem(metaCRS));
                }
            }catch (Throwable e) {
                crs = null;
            }
        }

        // ////
        // Finally setting up the Coordinate Reference System
        // ////
        if (temporalCRS != null && verticalCRS != null && crs != null) {
        	// build a compound crs
        	final CompoundCRS compoundCRS=
        		new DefaultCompoundCRS("CompoundCRS",
        				new org.opengis.referencing.crs.CoordinateReferenceSystem[] {temporalCRS, verticalCRS, crs});
            setCoordinateReferenceSystem(compoundCRS);
            
            //
            // set the crs types
            //
            CRSTypes = new CRSType[3];
            CRSTypes[0] = CRSType.TEMPORAL;
            CRSTypes[1] = CRSType.VERTICAL;
            
            // horizontal
            if(metaCRS.getBaseCRS() != null )	// Do we have a prohect crs
            	if(metaCRS.getDimension() < 3)
            		CRSTypes[2] = CRSType.PROJECTED;
            	else
            		CRSTypes[2] = CRSType.PROJECTED3D;
            else
            	if(metaCRS.getDimension() < 3)
            		CRSTypes[2] = CRSType.GEO2D;
            	else
            		CRSTypes[2] = CRSType.GEO3D;
            
        } else if (temporalCRS != null && verticalCRS == null && crs != null) {
            setCoordinateReferenceSystem(new DefaultCompoundCRS(
                    // metaCRS.getIdentification().getName(),
                    "CompoundCRS",
                    new org.opengis.referencing.crs.CoordinateReferenceSystem[] {temporalCRS,crs}));
            CRSTypes = new CRSType[2];
            CRSTypes[0] = CRSType.TEMPORAL;
            // horizontal
            if(metaCRS.getBaseCRS() != null )	// Do we have a prohect crs
            	if(metaCRS.getDimension() < 3)
            		CRSTypes[1] = CRSType.PROJECTED;
            	else
            		CRSTypes[1] = CRSType.PROJECTED3D;
            else
            	if(metaCRS.getDimension() < 3)
            		CRSTypes[1] = CRSType.GEO2D;
            	else
            		CRSTypes[1] = CRSType.GEO3D;
          
        } else if (temporalCRS == null && verticalCRS != null && crs != null) {
            setCoordinateReferenceSystem(new DefaultCompoundCRS(
                    // metaCRS.getIdentification().getName(),
                    "CompoundCRS",
                    new org.opengis.referencing.crs.CoordinateReferenceSystem[] {verticalCRS ,crs}));
            CRSTypes = new CRSType[2];
            CRSTypes[0] = CRSType.VERTICAL;
            // horizontal
            if(metaCRS.getBaseCRS() != null )	// Do we have a prohect crs
            	if(metaCRS.getDimension() < 3)
            		CRSTypes[1] = CRSType.PROJECTED;
            	else
            		CRSTypes[1] = CRSType.PROJECTED3D;
            else
            	if(metaCRS.getDimension() < 3)
            		CRSTypes[1] = CRSType.GEO2D;
            	else
            		CRSTypes[1] = CRSType.GEO3D;
        } else if (temporalCRS != null && verticalCRS != null && crs == null) {
            setCoordinateReferenceSystem(new DefaultCompoundCRS(
                    // metaCRS.getIdentification().getName(),
                    "CompoundCRS",
                    new org.opengis.referencing.crs.CoordinateReferenceSystem[] {temporalCRS,verticalCRS }));
            CRSTypes = new CRSType[2];
            CRSTypes[1] = CRSType.TEMPORAL;
            CRSTypes[0] = CRSType.VERTICAL;
        } else if (temporalCRS != null && verticalCRS == null && crs == null) {
            setCoordinateReferenceSystem(temporalCRS);
            CRSTypes = new CRSType[1];
            CRSTypes[0] = CRSType.TEMPORAL;

        } else if (temporalCRS == null && verticalCRS != null && crs == null) {
            setCoordinateReferenceSystem(verticalCRS);
            CRSTypes = new CRSType[1];
            CRSTypes[0] = CRSType.VERTICAL;
        } else if (temporalCRS == null && verticalCRS == null && crs != null) {
            setCoordinateReferenceSystem(crs);
            CRSTypes = new CRSType[1];
            // horizontal
            if(metaCRS.getBaseCRS() != null )	// Do we have a prohect crs
            	if(metaCRS.getDimension() < 3)
            		CRSTypes[0] = CRSType.PROJECTED;
            	else
            		CRSTypes[0] = CRSType.PROJECTED3D;
            else
            	if(metaCRS.getDimension() < 3)
            		CRSTypes[0] = CRSType.GEO2D;
            	else
            		CRSTypes[0] = CRSType.GEO3D;
        }
    }

