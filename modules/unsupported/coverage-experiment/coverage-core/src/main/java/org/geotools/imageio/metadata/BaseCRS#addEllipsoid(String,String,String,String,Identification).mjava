    /**
     * <p>
     * An ellipsoid is a geometric figure that can be used to describe the
     * approximate shape of the earth. In mathematical terms, it is a surface
     * formed by the rotation of an ellipse about its minor axis.
     * </p>
     * <p>
     * <ul>
     * <li>semiMajorAxis: Length of the semi-major axis of the ellipsoid.</li>
     * <li>secondDefiningParameter: Definition of the second parameter that
     * describes the shape of this ellipsoid.
     * <ul>
     * <li>Inverse flattening: Inverse flattening value of the ellipsoid.</li>
     * <li>Length of semi-minor axis: Length of the semi-minor axis of the
     * ellipsoid.</li>
     * <li>�Ellipsoid = Sphere� indicator: The ellipsoid is degenerate and is
     * actually a sphere. The sphere is completely defined by the semi-major
     * axis, which is the radius of the sphere. This attribute has the fixed
     * text value "sphere".</li>
     * </ul>
     * </li>
     * </ul>
     * </p>
     */
    public void addEllipsoid(final String semiMajorAxis, final String semiMinorAxis, final String invFlattening,
            final String unit, Identification ellipsoidId) {
        if (datum.getSelectedChoice() == Datum.GEODETIC_DATUM) {
            ellipsoid = new IdentifiableMetadataAccessor(datum.getChild(),
                    SpatioTemporalMetadataFormat.MD_DTM_GD_ELLIPSOID, null, ellipsoidId);

            this.semiMajorAxis = new MetadataAccessor(ellipsoid, SpatioTemporalMetadataFormat.MD_DTM_GD_EL_SEMIMAJORAXIS, null);
            this.semiMajorAxis.setString(SpatioTemporalMetadataFormat.MD_COMM_ATTRIBUTEVALUE, semiMajorAxis);
            ellipsoid.setString(SpatioTemporalMetadataFormat.MD_DTM_GD_EL_UNIT, unit);

            this.secondDefiningParameter = new MetadataAccessor(ellipsoid,
                    SpatioTemporalMetadataFormat.MD_DTM_GD_EL_SECONDDEFPARAM, null);
            if (Utilities.ensureValidString(semiMajorAxis, semiMinorAxis) && semiMajorAxis.equals(semiMinorAxis)) {
                this.secondDefiningParameter.setString(SpatioTemporalMetadataFormat.MD_DTM_GD_EL_SPHERE, "true");
            } else if (Utilities.ensureValidString(semiMinorAxis)) {
                this.secondDefiningParameter.setString(SpatioTemporalMetadataFormat.MD_COMM_ATTRIBUTETYPE, SpatioTemporalMetadataFormat.MD_DTM_GD_EL_SEMIMINORAXIS);
                this.secondDefiningParameter.setString(SpatioTemporalMetadataFormat.MD_COMM_ATTRIBUTEVALUE, semiMinorAxis);
            } else if (Utilities.ensureValidString(invFlattening)) {
                this.secondDefiningParameter.setString(SpatioTemporalMetadataFormat.MD_COMM_ATTRIBUTETYPE,
                                SpatioTemporalMetadataFormat.MD_DTM_GD_EL_INVERSEFLATTENING);
                this.secondDefiningParameter.setString(SpatioTemporalMetadataFormat.MD_COMM_ATTRIBUTEVALUE, invFlattening);
            } else {
                throw new IllegalArgumentException("Second Defining Parameter is mandatory for Geodetic Datum Ellipsoid!");
            }
        } else
            throw new IllegalArgumentException("Could not set Prime Meridian for non-Geodetic Datum type");
    }

