    /**
     * Returns the ellipsoid. Depending on whether
     * {@link ImageReferencing#semiMinorAxis} or
     * {@link ImageReferencing#inverseFlattening} has been defined, the default
     * implementation will construct an ellispoid using
     * {@link DatumFactory#createEllipsoid} or
     * {@link DatumFactory#createFlattenedSphere} respectively.
     * 
     * @throws MetadataException
     *                 if the operation failed to create the
     *                 {@linkplain Ellipsoid ellipsoid}.
     * 
     * @see #getUnit(String)
     */
    private Ellipsoid getEllipsoid(final CoordinateReferenceSystem metaCRS) throws Exception {
        final String name = metaCRS.getEllipsoid().getName();
        if (name != null) {
            for (final DefaultEllipsoid ellipsoid : ELLIPSOIDS) {
                if (ellipsoid.nameMatches(name)) {
                    return ellipsoid;
                }
            }
        } else {
            throw new Exception("Ellipsoid name not defined.");
        }
        // It has a name defined, but it is not present in the list of known
        // ellipsoids.
        final double semiMajorAxis = Double.parseDouble(metaCRS.getSemiMajorAxis());
        if (Double.isNaN(semiMajorAxis)) {
            throw new Exception("Ellipsoid semi major axis not defined.");
        }
        final String ellipsoidUnit = metaCRS.getEllipsoidUnit();
        if (ellipsoidUnit == null) {
            throw new Exception("Ellipsoid unit not defined.");
        }
        final Unit unit = getUnit(ellipsoidUnit);
        final Map<String, String> map = Collections.singletonMap("name", name);
        try {
            final DatumFactory datumFactory = getFactoryContainer().getDatumFactory();
            return (metaCRS.getSecondDefinigParameterType()
                    .equals(SpatioTemporalMetadataFormat.MD_DTM_GD_EL_SEMIMINORAXIS)) ? datumFactory
                    .createEllipsoid(map, semiMajorAxis, Double .parseDouble(metaCRS.getSecondDefinigParameterValue()), unit)
                    : datumFactory.createFlattenedSphere(map, semiMajorAxis,Double.parseDouble(metaCRS.getSecondDefinigParameterValue()), unit);
        } catch (FactoryException e) {
            throw new Exception(e.getLocalizedMessage());
        }
    }

