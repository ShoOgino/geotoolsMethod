    /**
     * Returns the datum. The default implementation performs the following
     * steps:
     * <p>
     * <ul>
     * <li>Verifies if the datum name contains {@code WGS84}, and returns a
     * {@link DefaultGeodeticDatum#WGS84} geodetic datum if it is the case.
     * </li>
     * <li>Builds a {@linkplain PrimeMeridian prime meridian} using information
     * stored into the metadata tree. </li>
     * <li>Returns a {@linkplain DefaultGeodeticDatum geodetic datum} built on
     * the prime meridian. </li>
     * </ul>
     * </p>
     * 
     * @throws MetadataException
     *                 if the datum is not defined, or if the
     *                 {@link #getEllipsoid} method fails.
     * 
     * @todo: The current implementation only returns a
     *        {@linkplain GeodeticDatum geodetic datum}, other kind of datum
     *        have to be generated too.
     * 
     * @see #getEllipsoid
     */
    private Datum getDatum(final CoordinateReferenceSystem metaCRS) throws Exception {
        Identification id = metaCRS.getBaseCRS();
        org.geotools.imageio.metadata.Identification identDatum = id != null ? id : metaCRS.getIdentification();
        if (identDatum == null) {
            throw new Exception("The datum is not defined.");
        }
        final String name = identDatum.getName();
        if (name == null) {
            throw new Exception("Datum name not defined.");
        }
        if (name.toUpperCase().contains("WGS84")) {
            return DefaultGeodeticDatum.WGS84;
        }
        final String primeMeridianName = metaCRS.getPrimeMeridian().getName();
        final PrimeMeridian primeMeridian;
        /*
         * By default, if the prime meridian name is not defined, or if it is
         * defined with {@code Greenwich}, one chooses the {@code Greenwich}
         * meridian as prime meridian. Otherwise one builds it, using the
         * {@code greenwichLongitude} parameter.
         */
        if ((primeMeridianName == null)
                || (primeMeridianName != null && primeMeridianName.toLowerCase().contains("greenwich"))) {
            primeMeridian = DefaultPrimeMeridian.GREENWICH;
        } else {
            final double greenwichLon = Double.parseDouble(metaCRS.getGreenwichLongitude());
            primeMeridian = (Double.isNaN(greenwichLon)) ? DefaultPrimeMeridian.GREENWICH
                    : new DefaultPrimeMeridian(primeMeridianName, greenwichLon);
        }
        return new DefaultGeodeticDatum(name, getEllipsoid(metaCRS), primeMeridian);
    }

