    /**
     * Returns a {@code PlanarImage} given a set of parameter specifying the
     * type of read operation to be performed.
     * 
     * @param new
     *                FileImageInputStreamExtImplinput the input
     *                {@code ImageInputStream} to be used for reading the image.
     * @param useJAI
     *                {@code true} if we need to use a JAI ImageRead operation,
     *                {@code false} if we need a simple direct
     *                {@code ImageReader.read(...)} call.
     * @param imageReadParam
     *                an {@code ImageReadParam} specifying the read parameters
     * @param useMultithreading
     *                {@code true} if a JAI ImageRead operation is requested
     *                with support for multithreading. This parameter will be
     *                ignored if requesting a direct read operation.
     * @return the read {@code PlanarImage}
     * @throws IOException
     */
    protected PlanarImage readRaster(final File input, final boolean useJAI,
            final ImageReadParam imageReadParam, final boolean useMultithreading)
            throws IOException {
        PlanarImage raster;
        ImageReader reader;
        if (useJAI) {
            final ParameterBlock pbjImageRead = new ParameterBlock();
            pbjImageRead.add(new FileImageInputStreamExtImpl(input));
            pbjImageRead.add(imageIndex);
            pbjImageRead.add(Boolean.FALSE);
            pbjImageRead.add(Boolean.FALSE);
            pbjImageRead.add(Boolean.FALSE);
            pbjImageRead.add(null);
            pbjImageRead.add(null);
            pbjImageRead.add(imageReadParam);
            reader = readerSpi.createReaderInstance();
            pbjImageRead.add(reader);

            // Check if to use a simple JAI ImageRead operation or a
            // multithreaded one
            final String jaiOperation = useMultithreading ? "ImageReadMT"
                    : "ImageRead";
            raster = JAI.create(jaiOperation, pbjImageRead, hints);
        } else {
            reader = readerSpi.createReaderInstance();
            reader.setInput(new FileImageInputStreamExtImpl(input), true, true);
            raster = PlanarImage.wrapRenderedImage(reader.read(imageIndex,
                    imageReadParam));
            reader.dispose();
        }
        return raster;
    }

