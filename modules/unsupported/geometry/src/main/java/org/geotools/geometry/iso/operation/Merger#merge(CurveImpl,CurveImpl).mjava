    /**
     * Constructs a new Curve by merging this Curve with another Curve The two input curves will not
     * be modified. There will be no more references to positions or lists of the input curves, all
     * values are copied.
     *
     * @param curve1
     * @param curve2
     * @return new curve
     */
    public CurveImpl merge(CurveImpl curve1, CurveImpl curve2) {
        CurveImpl firstCurve = null;
        CurveImpl secondCurve = null;

        if (curve1.getStartPoint().equals(curve2.getEndPoint())) {
            firstCurve = curve2;
            secondCurve = curve1;
        } else if (curve1.getEndPoint().equals(curve2.getStartPoint())) {
            firstCurve = curve1;
            secondCurve = curve2;
        } else throw new IllegalArgumentException("Curves do not share a start and end point ");

        List<CurveImpl> curves = new ArrayList<CurveImpl>();
        curves.add(firstCurve);
        curves.add(secondCurve);

        return this.mergeContinuousCurves(curves);
    }

