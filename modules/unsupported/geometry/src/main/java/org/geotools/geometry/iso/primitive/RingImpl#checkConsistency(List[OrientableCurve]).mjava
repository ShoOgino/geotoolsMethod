    /** Check consistency of the given curve list: - Continuity - Simplicity - Closeness */
    private void checkConsistency(List<OrientableCurve> aGenerator) {
        CurveImpl oc0 = (CurveImpl) aGenerator.get(0).getPrimitive();
        CurveImpl oc1 = (CurveImpl) aGenerator.get(aGenerator.size() - 1).getPrimitive();

        // Check Closeness
        if (!oc0.getStartPoint().equals(oc1.getEndPoint()))
            throw new IllegalArgumentException(
                    "Start point of first element has to be at the same position as end point of last element"); // $NON-NLS-1$

        // Check Continuity and merge all curves into a new curve
        CurveImpl newCurve = oc0;
        for (int i = 1; i < aGenerator.size(); i++) {
            CurveImpl nextCurve = (CurveImpl) aGenerator.get(i);
            DirectPosition startPoint = nextCurve.getStartPoint();
            DirectPosition endPoint = newCurve.getEndPoint();
            if (!endPoint.equals(startPoint))
                throw new IllegalArgumentException(
                        "The curve segments are not continuous"); // $NON-NLS-1$
            newCurve = newCurve.merge(nextCurve);
        }

        // Check Simplicity
        IsSimpleOp isSimple = new IsSimpleOp();
        if (!isSimple.isSimple(newCurve))
            throw new IllegalArgumentException(
                    "The curve segments are not simple, but intersect"); // $NON-NLS-1$
    }

