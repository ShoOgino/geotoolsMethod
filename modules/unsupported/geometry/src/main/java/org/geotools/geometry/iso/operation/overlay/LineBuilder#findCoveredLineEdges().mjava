	/**
	 * Find and mark L edges which are "covered" by the result area (if any). L
	 * edges at nodes which also have A edges can be checked by checking their
	 * depth at that node. L edges at nodes which do not have A edges can be
	 * checked by doing a point-in-polygon test with the previously computed
	 * result areas.
	 */
	private void findCoveredLineEdges() {
		// first set covered for all L edges at nodes which have A edges too
		for (Iterator nodeit = op.getGraph().getNodes().iterator(); nodeit
				.hasNext();) {
			Node node = (Node) nodeit.next();
			// node.print(System.out);
			((DirectedEdgeStar) node.getEdges()).findCoveredLineEdges();
		}

		/**
		 * For all L edges which weren't handled by the above, use a
		 * point-in-poly test to determine whether they are covered
		 */
		for (Iterator it = op.getGraph().getEdgeEnds().iterator(); it.hasNext();) {
			DirectedEdge de = (DirectedEdge) it.next();
			Edge e = de.getEdge();
			if (de.isLineEdge() && !e.isCoveredSet()) {
				boolean isCovered = op.isCoveredByA(de.getCoordinate());
				e.setCovered(isCovered);
			}
		}
	}

