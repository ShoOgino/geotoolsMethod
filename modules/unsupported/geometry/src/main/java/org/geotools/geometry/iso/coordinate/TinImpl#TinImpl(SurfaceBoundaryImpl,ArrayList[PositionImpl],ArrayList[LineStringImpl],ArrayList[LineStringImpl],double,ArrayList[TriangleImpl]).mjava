    // public TinImpl(TinImpl tin) {
    // super(tin);
    // if (tin.breakLines!=null) {
    // this.breakLines = new ArrayList<LineStringImpl>(tin.breakLines);
    // } else {
    // this.breakLines = null;
    // }
    // if (tin.stopLines != null) {
    // this.stopLines = new ArrayList<LineStringImpl>(tin.stopLines);
    // } else {
    // tin.stopLines = null;
    // }
    // this.maxLength = tin.maxLength;
    // this.minLength = tin.minLength;
    // if ( tin.mFront!=null ) {
    // this.mFront = new ArrayList<LineSegmentImpl>(tin.mFront);
    // } else {
    // tin.mFront = null;
    // }
    // this.controlPoint = new ArrayList<PositionImpl>();
    //
    // HashMap<PositionImpl,PositionImpl> hm = new
    // HashMap<PositionImpl,PositionImpl>();
    // for (PositionImpl otherPos : tin.getPosts()) {
    // PositionImpl thisPos = new PositionImpl(otherPos.getDirectPosition());
    // this.controlPoint.add(thisPos);
    // hm.put(otherPos,thisPos);
    // }
    // ArrayList<TriangleImpl> thisTriangles = new ArrayList<TriangleImpl>();
    // for (Triangle otherTri : tin.getTriangles()) {
    // Position[] otherPositions = otherTri.getCorners();
    // Position[] thisPositions = new PositionImpl[3];
    // thisPositions[0] = hm.get(otherPositions[0]);
    // thisPositions[1] = hm.get(otherPositions[1]);
    // thisPositions[2] = hm.get(otherPositions[2]);
    // TriangleImpl thisTriangle =
    // CoordinateFactory.getDefault().createTriangle(null,
    // thisPositions[0].getPosition(),
    // thisPositions[1].getPosition(),
    // thisPositions[2].getPosition());
    // thisTriangles.add(thisTriangle);
    // }
    // this.setTriangles(thisTriangles, null);
    // }
    /**
     * This constructor delegates the mesh generation to different mesh generators. GM_Factory
     * transforms the results of the mesh generation into input parameters
     */
    public TinImpl(
            SurfaceBoundaryImpl surfBdry,
            ArrayList<PositionImpl> post,
            ArrayList<LineStringImpl> stopLines,
            ArrayList<LineStringImpl> breakLines,
            double maxLength,
            ArrayList<TriangleImpl> triangles) {
        super(surfBdry);
        this.controlPoint = post;
        this.breakLines = breakLines;
        this.stopLines = stopLines;
        this.maxLength = maxLength;
        super.setTriangles(triangles);
    }

