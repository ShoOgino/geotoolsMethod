    /**
     * The function "asLineString" constructs a line string (sequence of line segments) where the
     * control points (ends of the segments) lie on this curve. If "maxSpacing" is given (not zero),
     * then the distance between control points along the generated curve is not more than
     * "maxSpacing". If "maxOffset" is given (not zero), the distance between generated curve at any
     * point and the original curve is be more than the "maxOffset". If both parameters are set,
     * then both criteria are met. If the original control points of the curve lie on the curve,
     * then they are included in the returned LineString's controlPoints. If both parameters are set
     * to zero, then the line string returned is constructed from the control points of the original
     * curve.
     *
     * <p>GenericCurve::asLineString(spacing : Distance = 0, offset : Distance = 0) : LineString
     *
     * <p>NOTE This function is useful in creating linear approximations of the curve for simple
     * actions such as display. It is often referred to as a "stroked curve". For this purpose, the
     * "maxOffset" version is useful in maintaining a minimal representation of the curve
     * appropriate for the display device being targeted. This function is also useful in preparing
     * to transform a curve from one coordinate reference system to another by transforming its
     * control points. In this case, the "maxSpacing" version is more appropriate. Allowing both
     * parameters to default to zero does not seem to have any useful geographic nor geometric
     * interpretation unless further information is known about how the curves were constructed.
     *
     * @return an <code>LineString</code> value
     */
    public List<LineSegment> asLineSegments() {
        /* Schleife ueber alle CurveSegments */
        ArrayList<LineSegment> mergedSegments = new ArrayList<LineSegment>();
        for (CurveSegment curveSegment : this.curveSegments) {
            LineString lineString = curveSegment.asLineString(0, 0);
            List<LineSegment> lineSegments = lineString.asLineSegments();
            for (LineSegment lineSegment : lineSegments) mergedSegments.add(lineSegment);
        }
        return mergedSegments;
    }

