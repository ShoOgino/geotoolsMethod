    /**
     * Same method as public static boolean isCCW(Coordinate[] ring) based on a DirectPosition list.
     * ===================================================== Computes whether a ring defined by an
     * array of {@link Coordinate} is oriented counter-clockwise.
     *
     * <ul>
     *   <li>The list of points is assumed to have the first and last points equal.
     *   <li>This will handle coordinate lists which contain repeated points.
     * </ul>
     *
     * This algorithm is <b>only</b> guaranteed to work with valid rings. If the ring is invalid
     * (e.g. self-crosses or touches), the computed result <b>may</b> not be correct.
     *
     * @param ring a list of direct positions forming a ring
     * @return <code>true</code> if the ring is oriented counter-clockwise.
     */
    public static boolean isCCW(List<DirectPosition> ring) {
        Coordinate[] coords = CoordinateArrays.toCoordinateArray(ring);
        return isCCW(coords);
    }

