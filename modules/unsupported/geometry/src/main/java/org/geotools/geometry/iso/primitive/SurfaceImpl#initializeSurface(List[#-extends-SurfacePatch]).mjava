    /**
     * Initializes the Surface: - Sets the surface patches - Sets the Boundary, or calculates it if
     * doesn´t exist
     *
     * @param patch List of SurfacePatch´s
     */
    private void initializeSurface(List<? extends SurfacePatch> patch) {

        if (patch == null)
            throw new IllegalArgumentException("Empty array SurfacePatch."); // $NON-NLS-1$

        if (patch.isEmpty())
            throw new IllegalArgumentException("Empty array SurfacePatch."); // $NON-NLS-1$

        // Calculate the boundary for the SurfacePatches. The continuity of the SurfacePatches is
        // checked within the creation of the surface boundary
        this.boundary = this.createBoundary(patch);

        /* Add patches to patch list */
        ArrayList<SurfacePatch> newPatchList = new ArrayList<SurfacePatch>();
        for (SurfacePatch p : patch) {
            if (p != null) newPatchList.add(p);
        }
        this.patch = newPatchList;

        // Build the envelope for the Surface based on the SurfacePatch envelopes
        SurfacePatchImpl tFirstPatch = (SurfacePatchImpl) patch.get(0);
        // this.envelope = new EnvelopeImpl(tFirstPatch.getEnvelope());
        this.envelope = new EnvelopeImpl(tFirstPatch.getEnvelope());
        for (SurfacePatch p : patch)
            ((EnvelopeImpl) this.envelope).expand(((SurfacePatchImpl) p).getEnvelope());
    }

