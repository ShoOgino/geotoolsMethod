	/**
	 * Insert an edge from one of the noded input graphs. Checks edges that are
	 * inserted to see if an identical edge already exists. If so, the edge is
	 * not inserted, but its label is merged with the existing edge.
	 */
	protected void insertUniqueEdge(Edge e) {
		// <FIX> MD 8 Oct 03 speed up identical edge lookup
		// fast lookup
		Edge existingEdge = edgeList.findEqualEdge(e);

		// If an identical edge already exists, simply update its label
		if (existingEdge != null) {
			Label existingLabel = existingEdge.getLabel();

			Label labelToMerge = e.getLabel();
			// check if new edge is in reverse direction to existing edge
			// if so, must flip the label before merging it
			if (!existingEdge.isPointwiseEqual(e)) {
				labelToMerge = new Label(e.getLabel());
				labelToMerge.flip();
			}
			Depth depth = existingEdge.getDepth();
			// if this is the first duplicate found for this edge, initialize
			// the depths
			// /*
			if (depth.isNull()) {
				depth.add(existingLabel);
			}
			// */
			depth.add(labelToMerge);
			existingLabel.merge(labelToMerge);
			// Debug.print("inserted edge: "); Debug.println(e);
			// Debug.print("existing edge: "); Debug.println(existingEdge);

		} else { // no matching existing edge was found
			// add this new edge to the list of edges in this graph
			// e.setName(name + edges.size());
			// e.getDepth().add(e.getLabel());
			edgeList.add(e);
		}
	}

