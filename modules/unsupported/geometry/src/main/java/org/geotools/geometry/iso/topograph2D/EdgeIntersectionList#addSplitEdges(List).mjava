    /**
     * Creates new edges for all the edges that the intersections in this list split the parent edge
     * into. Adds the edges to the input list (this is so a single list can be used to accumulate
     * all split edges for a Geometry).
     *
     * @param edgeList a list of EdgeIntersections
     */
    public void addSplitEdges(List edgeList) {
        // ensure that the list has entries for the first and last point of the
        // edge
        // e.g., add the end points of the geometry this edgeIntersectionList
        addEndpoints();

        // Iterator of the Edge Intersections
        Iterator it = iterator();
        // there should always be at least two entries in the list
        // SJ TODO The EdgeIntersection are ordered, thatÂ´s making the edge
        // generation easier - but how comes? where is the list of
        // edgeIntersections generated in ordered sequence?
        EdgeIntersection eiPrev = (EdgeIntersection) it.next();
        while (it.hasNext()) {
            EdgeIntersection ei = (EdgeIntersection) it.next();
            // Create new Edge from Previous EdgeIntersection to the actual
            // EdgeIntersection; apply the same label as the edge which inhibts
            // the EdgeIntersections
            Edge newEdge = createSplitEdge(eiPrev, ei);
            edgeList.add(newEdge);

            eiPrev = ei;
        }
    }

