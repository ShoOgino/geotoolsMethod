    /**
     * Merges a list of continuous curves into a new single curve. In order two neighboured curves
     * are merged, their end and startpoint must be equal.
     */
    private CurveImpl mergeContinuousCurves(List<CurveImpl> curves) {

        List<Position> positionList = new ArrayList<Position>();

        int i = 0;
        int j = 0;
        for (i = 0; i < curves.size(); i++) {
            List<DirectPosition> dPList = curves.get(i).asDirectPositions();
            for (j = 0; j < dPList.size() - 1; j++) {
                positionList.add(new DirectPositionImpl(dPList.get(j)));
            }
        }
        positionList.add(curves.get(curves.size() - 1).getEndPoint());

        // Create List of CurveSegment´s (LineString´s)
        LineStringImpl lineString = new LineStringImpl(new PointArrayImpl(positionList), 0.0);
        // LineStringImpl lineString =
        // coordFactory.createLineString(aPositions);
        List<CurveSegment> segments = new ArrayList<CurveSegment>();
        segments.add(lineString);

        // Create List of OrientableCurve´s (Curve´s)
        // test OK
        if (segments == null) throw new NullPointerException();

        // A curve will be created
        // - The curve will be set as parent curves for the Curve segments
        // - Start and end params for the CurveSegments will be set
        return new CurveImpl(crs, segments);
    }

