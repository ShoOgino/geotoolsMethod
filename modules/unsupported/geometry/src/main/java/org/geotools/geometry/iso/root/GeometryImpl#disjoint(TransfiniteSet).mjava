    /**
     * This operator tests, whether an object is spatially disjoint with this Geometry object
     *
     * @param pointSet The other object
     * @return TRUE, if the other object is disjoint with this object
     */
    public boolean disjoint(TransfiniteSet pointSet) {
        GeometryImpl geom = GeometryImpl.castToGeometryImpl(pointSet);

        // Return true, if the envelopes doesnÂ´t intersect
        if (!((EnvelopeImpl) this.getEnvelope()).intersects(geom.getEnvelope())) return true;

        //		String intersectionPatternMatrix = "";
        //		if (this instanceof PrimitiveImpl) {
        //			if (geom instanceof PrimitiveImpl) {
        //				// Primitive / Primitive
        //				// Empty: I/I
        //				// B/I, I/B, B/B may intersect
        //				intersectionPatternMatrix = "F********";
        //			} else
        //			if (geom instanceof ComplexImpl) {
        //				// Primitive / Complex
        //				// Empty: I/I, I/B
        //				// B/I, B/B may intersect
        //				intersectionPatternMatrix = "FF*******";
        //			} else {
        //				Assert.isTrue(false);
        //			}
        //		} else
        //		if (this instanceof ComplexImpl) {
        //			if (geom instanceof PrimitiveImpl) {
        //				// Complex / Primitive
        //				// Empty: I/I, B/I
        //				// I/B, B/B may intersect
        //				intersectionPatternMatrix = "F**F*****";
        //			} else
        //			if (geom instanceof ComplexImpl) {
        //				// Complex / Complex
        //				// Empty: I/I, B/I, I/B, B/B
        //				intersectionPatternMatrix = "FF*FF****";
        //			} else {
        //				Assert.isTrue(false);
        //			}
        //		}

        String intersectionPatternMatrix = "FF*FF****";

        try {
            IntersectionMatrix tIM = RelateOp.relate(this, geom);
            boolean rValue = tIM.matches(intersectionPatternMatrix);
            return rValue;

        } catch (UnsupportedDimensionException e) {
            e.printStackTrace();
            return false;
        }
    }

