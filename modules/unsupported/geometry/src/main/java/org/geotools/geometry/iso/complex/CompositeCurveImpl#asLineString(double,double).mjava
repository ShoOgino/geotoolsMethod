	/**
	 * @param maxSpacing
	 * @param maxOffset
	 * @return LineStringImpl
	 */
	public LineStringImpl asLineString(double maxSpacing, double maxOffset) {
		// The function "asLineString" constructs a line string (sequence of
		// line segments) where the control points (ends of
		// the segments) lie on this curve. If "maxSpacing" is given (not zero),
		// then the distance between control points along
		// the generated curve shall be not more than "maxSpacing". If
		// "maxOffset" is given (not zero), the distance between
		// generated curve at any point and the original curve shall not be more
		// than the "maxOffset". If both parameters are
		// set, then both criteria shall be met. If the original control points
		// of the curve lie on the curve, then they shall be
		// included in the returned LineString's controlPoints. If both
		// parameters are set to zero, then the line string
		// returned shall be constructed from the control points of the original
		// curve.
		// GenericCurve::asLineString(spacing : Distance = 0, offset : Distance
		// = 0)
		// : LineString
		// NOTE This function is useful in creating linear approximations of the
		// curve for simple actions such as display. It is often
		// referred to as a "stroked curve". For this purpose, the "maxOffset"
		// version is useful in maintaining a minimal representation of
		// the curve appropriate for the display device being targeted. This
		// function is also useful in preparing to transform a curve from
		// one coordinate reference system to another by transforming its
		// control points. In this case, the "maxSpacing" version is more
		// appropriate. Allowing both parameters to default to zero does not
		// seem to have any useful geographic nor geometric
		// interpretation unless further information is known about how the
		// curves were constructed.

		List<Primitive> primitives = this.getElements();
		if (primitives == null || primitives.isEmpty())
			return null;
		// JR error: parameter maxSpacing and maxOffset were not passed
		LineStringImpl result = ((CurveImpl) primitives.get(0)).asLineString(
				maxSpacing, maxOffset);
		for (int i = 1; i < primitives.size(); ++i) {
			CurveImpl curve = ((CurveImpl) primitives.get(i));
			result = result.merge(curve.asLineString(maxSpacing, maxOffset));
		}
		return result;

	}

