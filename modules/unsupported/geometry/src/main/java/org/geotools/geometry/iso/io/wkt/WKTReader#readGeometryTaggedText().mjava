    /**
     * Creates a <code>Geometry</code> using the next token in the stream.
     *
     * @return a <code>Geometry</code> specified by the next token in the stream
     * @throws ParseException if the coordinates used to create a <code>Polygon</code> shell and
     *     holes do not form closed linestrings, or if an unexpected token was encountered
     * @throws IOException if an I/O error occurs
     */
    private Geometry readGeometryTaggedText() throws IOException, ParseException {
        String type = getNextWord();

        if (type.equals(WKTConstants.WKT_POINT)) {
            return readPointText();
        } else if (type.equalsIgnoreCase(WKTConstants.WKT_CURVE)) {
            return readLineStringText();
        } else if (type.equalsIgnoreCase(WKTConstants.WKT_SURFACE)
                || type.equalsIgnoreCase(WKTConstants.WKT_POLYGON)) {
            return readPolygonText();
        }
        throw new ParseException("Unknown geometry type: " + type);
    }

