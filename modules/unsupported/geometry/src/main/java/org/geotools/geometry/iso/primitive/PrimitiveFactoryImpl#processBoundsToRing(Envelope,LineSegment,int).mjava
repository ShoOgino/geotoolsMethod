	/**
	 * This is pass #2 ...
	 * @return
	 */
	public Ring processBoundsToRing( Envelope bounds, LineSegment segment, final int D ){
		DirectPosition one = positionFactory.createDirectPosition(segment.getStartPoint().getCoordinate()); //new DirectPositionImpl( segment.getStartPoint() );
		one.setOrdinate( D, bounds.getMinimum(D) );
		
		DirectPosition two = positionFactory.createDirectPosition(segment.getEndPoint().getCoordinate()); //new DirectPositionImpl( segment.getEndPoint() );
		two.setOrdinate( D, bounds.getMinimum(D) );
		
		DirectPosition three = positionFactory.createDirectPosition(two.getCoordinate()); //new DirectPositionImpl( two );
		three.setOrdinate( D, bounds.getMaximum(D) );
		
		DirectPosition four = positionFactory.createDirectPosition(one.getCoordinate()); //new DirectPositionImpl( one );
		four.setOrdinate( D, bounds.getMaximum(D) );
		
		LineSegment edge1 = new LineSegmentImpl( one, two, 0.0 );
		LineSegment edge2 = new LineSegmentImpl( two, three, 0.0 );
		LineSegment edge3 = new LineSegmentImpl( three, four, 0.0 );
		LineSegment edge4 = new LineSegmentImpl( four, one, 0.0 );
		
		List<OrientableCurve> edges = new ArrayList<OrientableCurve>();
		edges.add( new CurveImpl( edge1 ));
		edges.add( new CurveImpl( edge2 ));
		edges.add( new CurveImpl( edge3 ));
		edges.add( new CurveImpl( edge4 ));
		return this.createRing(edges);
	}

