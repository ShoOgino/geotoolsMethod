	/**
	 * The operation "samplePoint" returns an ordered array of point values
	 * (PointArray) that lie on the CurveSegment. In most cases, these will be
	 * related to control points used in the construction of the segment.
	 * 
	 * CurveSegment::samplePoint() : PointArray
	 * 
	 * NOTE The controlPoints of a curve segment are use to control its shape,
	 * and are not always on the curve segment itself. For example in a spline
	 * curve, the curve segment is given as a weighted vector sum of the
	 * controlPoints. Each weight function will have a maximum within the
	 * constructive parameter interval, which will roughly correspond to the
	 * point on the curve where it passes closest that the corresponding
	 * controlPoint. These points, the values of the curve at the maxima of the
	 * weight functions, will be the sample points for the curve segment.
	 * 
	 * @return
	 */
	// public abstract PointArray samplePoint();
	/**
	 * The operation "boundary" on CurveSegment operates with the same semantics
	 * as that on Curve except that the end points of a CurveSegment are not
	 * necessarily existing Points and thus the boundary may contain transient
	 * Points.
	 * 
	 * CurveSegment::boundary() : CurveBoundary
	 * 
	 * NOTE The above CurveBoundary will almost always be two distinct
	 * positions, but, like Curves, CurveSegments can be cycles in themselves.
	 * The most likely scenario is that all of the points used will be
	 * transients (constructed to support the return value), except for the
	 * startPoint and endPoint of the aggregated Curve. These two positions, in
	 * the case where the Curve is involved in a Complex, will be represented as
	 * Points in the same Complex.
	 * 
	 * @return
	 */
	// public abstract CurveBoundary getBoundary();
	/**
	 * The reverse of a CurveSegment simply reverses the orientation of the
	 * parameterizations of the segment. CurveSegment::reverse() : CurveSegment
	 * 
	 * @return DirectPositionImpl
	 */
	// public abstract CurveSegment reverse();
	public abstract DirectPosition getStartPoint();

