    /**
     * Compares coordinates of Direct Positions and allows a tolerance value in the comparison
     *
     * @param position Direct Position to compare with
     * @param tol Epsilon tolerance value
     * @return TRUE, if coordinates accord concording to the tolerance value, FALSE if they dont.
     */
    public boolean equals(DirectPosition position, double tol) {
        int D = position.getCoordinateReferenceSystem().getCoordinateSystem().getDimension();
        if (D != crs.getCoordinateSystem().getDimension()) return false;

        // use CRS.equalsIgnoreMetadata for effeciency and to avoid various issues with comparing
        // CRS such as coordinate order.
        if (!CRS.equalsIgnoreMetadata(
                getCoordinateReferenceSystem(), position.getCoordinateReferenceSystem())) {
            return false;
        }

        // comparing a NaN ordinate to a non-NaN ordinate should return false, but two
        // ordinates that are both NaN should considered equal.
        for (int i = 0; i < D; ++i) {
            if (Double.isNaN(position.getOrdinate(i)) && Double.isNaN(this.coordinate[i])) continue;
            if (Math.abs(DoubleOperation.subtract(position.getOrdinate(i), this.coordinate[i]))
                    > tol) return false;
        }
        return true;
    }

