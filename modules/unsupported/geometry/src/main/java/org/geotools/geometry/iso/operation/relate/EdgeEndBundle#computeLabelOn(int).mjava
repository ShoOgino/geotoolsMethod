    /**
     * Compute the overall ON location for the list of EdgeStubs. (This is essentially equivalent to
     * computing the self-overlay of a single Geometry) edgeStubs can be either on the boundary (eg
     * Polygon edge) OR in the interior (e.g. segment of a LineString) of their parent Geometry. In
     * addition, GeometryCollections use the mod-2 rule to determine whether a segment is on the
     * boundary or not. Finally, in GeometryCollections it can still occur that an edge is both on
     * the boundary and in the interior (e.g. a LineString segment lying on top of a Polygon edge.)
     * In this case as usual the Boundary is given precendence. <br>
     * These observations result in the following rules for computing the ON location:
     *
     * <ul>
     *   <li>if there are an odd number of Bdy edges, the attribute is Bdy
     *   <li>if there are an even number >= 2 of Bdy edges, the attribute is Int
     *   <li>if there are any Int edges, the attribute is Int
     *   <li>otherwise, the attribute is NULL.
     * </ul>
     *
     * @param geomIndex
     */
    private void computeLabelOn(int geomIndex) {
        // compute the ON location value
        int boundaryCount = 0;
        boolean foundInterior = false;

        for (Iterator it = iterator(); it.hasNext(); ) {
            EdgeEnd e = (EdgeEnd) it.next();
            int loc = e.getLabel().getLocation(geomIndex);
            if (loc == Location.BOUNDARY) boundaryCount++;
            if (loc == Location.INTERIOR) foundInterior = true;
        }
        int loc = Location.NONE;
        if (foundInterior) loc = Location.INTERIOR;
        if (boundaryCount > 0) {
            loc = GeometryGraph.determineBoundary(boundaryCount);
        }
        label.setLocation(geomIndex, loc);
    }

