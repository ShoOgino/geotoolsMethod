    /**
     * Determines nodes which are in the result, and creates {@link Point}s for them.
     *
     * <p>This method determines nodes which are candidates for the result via their labelling and
     * their graph topology.
     *
     * @param opCode the overlay operation
     */
    private void extractNonCoveredResultNodes(int opCode) {
        // testing only
        // if (true) return resultNodeList;

        for (Iterator nodeit = op.getGraph().getNodes().iterator(); nodeit.hasNext(); ) {
            Node n = (Node) nodeit.next();

            // filter out nodes which are known to be in the result
            if (n.isInResult()) continue;
            // if an incident edge is in the result, then the node coordinate is
            // included already
            if (n.isIncidentEdgeInResult()) continue;
            if (n.getEdges().getDegree() == 0 || opCode == OverlayOp.INTERSECTION) {

                /**
                 * For nodes on edges, only INTERSECTION can result in edge nodes being included
                 * even if none of their incident edges are included
                 */
                Label label = n.getLabel();
                if (OverlayOp.isResultOfOp(label, opCode)) {
                    filterCoveredNodeToPoint(n);
                }
            }
        }
        // System.out.println("connectedResultNodes collected = " +
        // connectedResultNodes.size());
    }

