	/**
	 * If the Geometries are disjoint, we need to enter their dimension and
	 * boundary dimension in the EXTERIOR rows in the IM
	 */
	private void computeDisjointIM(IntersectionMatrix im) {
		GeometryImpl ga = arg[0].getGeometry();
//		if (!ga.isEmpty()) {
//			im.set(Location.INTERIOR, Location.EXTERIOR, ga.getDimension());
//			im.set(Location.BOUNDARY, Location.EXTERIOR, ga
//					.getBoundaryDimension());
//		}
		im.set(Location.INTERIOR, Location.EXTERIOR, ga.getDimension(null));
		if (ga.getBoundary() == null) {
			im.set(Location.BOUNDARY, Location.EXTERIOR, Dimension.FALSE);
		}
		else {
			im.set(Location.BOUNDARY, Location.EXTERIOR, ga.getBoundary().getDimension(null));
		}
		
		GeometryImpl gb = arg[1].getGeometry();
//		if (!gb.isEmpty()) {
//			im.set(Location.EXTERIOR, Location.INTERIOR, gb.getDimension());
//			im.set(Location.EXTERIOR, Location.BOUNDARY, gb
//					.getBoundaryDimension());
//		}
		im.set(Location.EXTERIOR, Location.INTERIOR, gb.getDimension(null));
		if (gb.getBoundary() == null) {
			im.set(Location.EXTERIOR, Location.BOUNDARY, Dimension.FALSE);
		}
		else {
			im.set(Location.EXTERIOR, Location.BOUNDARY, gb.getBoundary().getDimension(null));
		}
		
	}

