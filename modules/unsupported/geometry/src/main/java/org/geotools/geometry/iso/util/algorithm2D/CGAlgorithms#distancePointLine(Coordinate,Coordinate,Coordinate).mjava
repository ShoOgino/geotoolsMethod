    /**
     * Computes the distance from a point p to a line segment AB
     *
     * <p>Note: NON-ROBUST!
     *
     * @param p the point to compute the distance for
     * @param A one point of the line
     * @param B another point of the line (must be different to A)
     * @return the distance from p to line segment AB
     */
    public static double distancePointLine(Coordinate p, Coordinate A, Coordinate B) {
        // if start==end, then use pt distance
        if (A.equals(B)) return p.distance(A);

        // otherwise use comp.graphics.algorithms Frequently Asked Questions
        // method
        /*
         * (1) AC dot AB r = --------- ||AB||^2 r has the following meaning: r=0
         * P = A r=1 P = B r<0 P is on the backward extension of AB r>1 P is on
         * the forward extension of AB 0<r<1 P is interior to AB
         */

        double r =
                ((p.x - A.x) * (B.x - A.x) + (p.y - A.y) * (B.y - A.y))
                        / ((B.x - A.x) * (B.x - A.x) + (B.y - A.y) * (B.y - A.y));

        if (r <= 0.0) return p.distance(A);
        if (r >= 1.0) return p.distance(B);

        /*
         * (2) (Ay-Cy)(Bx-Ax)-(Ax-Cx)(By-Ay) s = -----------------------------
         * L^2
         *
         * Then the distance from C to P = |s|*L.
         */

        double s =
                ((A.y - p.y) * (B.x - A.x) - (A.x - p.x) * (B.y - A.y))
                        / ((B.x - A.x) * (B.x - A.x) + (B.y - A.y) * (B.y - A.y));

        return Math.abs(s) * Math.sqrt(((B.x - A.x) * (B.x - A.x) + (B.y - A.y) * (B.y - A.y)));
    }

