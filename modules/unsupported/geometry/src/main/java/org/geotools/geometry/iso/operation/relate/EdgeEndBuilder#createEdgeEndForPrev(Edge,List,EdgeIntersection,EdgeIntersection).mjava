    /**
     * Create a EdgeStub for the edge before the intersection eiCurr. The previous intersection is
     * provided in case it is the endpoint for the stub edge. Otherwise, the previous point from the
     * parent edge will be the endpoint. <br>
     * eiCurr will always be an EdgeIntersection, but eiPrev may be null.
     *
     * @param edge
     * @param l
     * @param eiCurr
     * @param eiPrev
     */
    private void createEdgeEndForPrev(
            Edge edge, List l, EdgeIntersection eiCurr, EdgeIntersection eiPrev) {

        int iPrev = eiCurr.segmentIndex;
        if (eiCurr.dist == 0.0) {
            // if at the start of the edge there is no previous edge
            if (iPrev == 0) return;
            iPrev--;
        }
        Coordinate pPrev = edge.getCoordinate(iPrev);
        // if prev intersection is past the previous vertex, use it instead
        if (eiPrev != null && eiPrev.segmentIndex >= iPrev) pPrev = eiPrev.coord;

        Label label = new Label(edge.getLabel());
        // since edgeStub is oriented opposite to it's parent edge, have to flip
        // sides for edge label
        label.flip();
        EdgeEnd e = new EdgeEnd(edge, eiCurr.coord, pPrev, label);
        // e.print(System.out); System.out.println();
        l.add(e);
    }

