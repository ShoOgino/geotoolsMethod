    /**
     * Compute the overlay according to the given operation code parameter
     *
     * @param opCode Operation code
     */
    private void computeOverlay(int opCode) {

        // copy points from input Geometries.
        // This ensures that any Point geometries
        // in the input are considered for inclusion in the result set
        this.copyPoints(0);
        this.copyPoints(1);

        // node the input Geometries
        this.arg[0].computeSelfNodes(li, false);
        this.arg[1].computeSelfNodes(li, false);

        // compute intersections between edges of the two input geometries
        this.arg[0].computeEdgeIntersections(arg[1], li, true);

        List baseSplitEdges = new ArrayList();
        this.arg[0].computeSplitEdges(baseSplitEdges);
        this.arg[1].computeSplitEdges(baseSplitEdges);

        // add the noded edges to this result graph
        insertUniqueEdges(baseSplitEdges);

        // Labels the Edges
        this.computeLabelsFromDepths();

        this.replaceCollapsedEdges();

        // debugging only
        // NodingValidator nv = new NodingValidator(edgeList.getEdges());
        // nv.checkValid();

        this.graph.addEdges(this.edgeList.getEdges());
        this.computeLabelling();

        this.labelIncompleteNodes();

        /**
         * The ordering of building the result Geometries is important. Areas must be built before
         * lines, which must be built before points. This is so that lines which are covered by
         * areas are not included explicitly, and similarly for points.
         */
        findResultAreaEdges(opCode);
        cancelDuplicateResultEdges();
        PolygonBuilder polyBuilder = new PolygonBuilder(crs, cga);
        polyBuilder.add(this.graph);

        this.resultPolyList = polyBuilder.getPolygons();

        LineBuilder lineBuilder = new LineBuilder(this, crs, ptLocator);
        this.resultLineList = lineBuilder.build(opCode);

        PointBuilder pointBuilder = new PointBuilder(this, crs, ptLocator);
        this.resultPointList = pointBuilder.build(opCode);

        // gather the results from all calculations into a single Geometry for
        // the result set
        this.resultGeom = this.computeGeometry(resultPointList, resultLineList, resultPolyList);
    }

