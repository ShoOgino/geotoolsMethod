    /** SURFACE / SURFACE TESTS */
    private void _testSurfaceSurface() {

        //		Parameters:
        //		1) shouldBeEqual,
        //		2) shouldIntersectAndNotBeDisjoint,
        //		3) shouldOverlap,
        //		4) shouldTouch,
        //		5) shouldContain,
        //		6) shouldbeWithin,
        //		7) shouldCover,
        //		8) shouldBeCoveredBy

        // (P1)
        // Overlap
        // Simple Overlap Intersection
        this.testAndAssertTest("P1", surfaceAwithoutHole, surfaceBwithoutHole, F, T, T, F, F, F, F);

        // (P2)
        // Overlap
        // Simple Overlap Intersection with holes
        this.testAndAssertTest("P2", surfaceAwithHole, surfaceBwithHole, F, T, T, F, F, F, F);

        // (P3)
        // Not touches
        // Polygon Boundary intersects Polygon Boundary: Point-Edge
        this.testAndAssertTest("P3", surfaceAwithoutHole, surfaceC, F, T, F, T, F, F, F);

        // (P4)
        // Not touches
        // Polygon Boundary intersects Boundary Polygon in Edge (Edge-Edge Touch)
        this.testAndAssertTest("P4", surfaceAwithoutHole, surfaceD, F, T, F, T, F, F, F);

        // (P5)
        // Contains
        // Polygon E within Polygon A
        // E touching A in Corner (point-point) (from inner side)
        this.testAndAssertTest("P5", surfaceAwithoutHole, surfaceE, F, T, F, F, T, F, F);

        // (P6)
        // Contains
        // Polygon C within Polygon B, without touching
        this.testAndAssertTest("P6", surfaceBwithoutHole, surfaceC, F, T, F, F, T, F, F);

        // (P7)
        // Contains
        // Polygon E within Polygon A with 2 holes, touching hole
        this.testAndAssertTest("P7", surfaceAwithTwoHoles, surfaceE, F, T, F, F, T, F, F);

        // (P8)
        // Overlap
        // Polygon D within Polygon B with 1 hole, overlapping the hole
        this.testAndAssertTest("P8", surfaceBwithHole, surfaceD, F, T, T, F, F, F, F);

        // (P9)
        // Equal (=within and contains)
        this.testAndAssertTest("P9", surfaceBwithHole, surfaceBwithHole, T, T, F, F, T, T, F);
    }

