    @Test
    public void type() throws ParseException {
        JSONArray json;
        MBFilter mbfilter;
        Filter filter;
        Set<SemanticType> types;
        
        // common $type examples
        json = array("['in', '$type','LineString']");
        mbfilter = new MBFilter(json);
        types = mbfilter.semanticTypeIdentifiers();
        assertTrue( types.contains(SemanticType.LINE) && types.size()==1);
        filter = mbfilter.filter();
        assertEquals("INCLUDE", ECQL.toCQL(filter) );
        
        json = array("['in', '$type','Polygon']");
        mbfilter = new MBFilter(json);
        types = mbfilter.semanticTypeIdentifiers();
        assertTrue( types.contains(SemanticType.POLYGON) && types.size()==1);
        filter = mbfilter.filter();
        assertEquals("INCLUDE", ECQL.toCQL(filter) );
        
        json = array("['==', '$type','Point']");
        mbfilter = new MBFilter(json);
        types = mbfilter.semanticTypeIdentifiers();
        assertTrue( types.contains(SemanticType.POINT) && types.size()==1);
        filter = mbfilter.filter();
        assertEquals("INCLUDE", ECQL.toCQL(filter) );
        
        json = array("['in', '$type','Point', 'LineString']");
        mbfilter = new MBFilter(json, null );
        types = mbfilter.semanticTypeIdentifiers();
        assertTrue(types.contains(SemanticType.POINT) && types.contains(SemanticType.LINE)
                && types.size() == 2);
        filter = mbfilter.filter();
        assertEquals("INCLUDE", ECQL.toCQL(filter) );
        try {
            json = array("['==', '$type','Point', 'LineString']");
            mbfilter = new MBFilter(json, null );
            types = mbfilter.semanticTypeIdentifiers();
            fail("expected format exception due to '==' having too many arguments above");
        }
        catch (MBFormatException expected){
        }
        
        // not
        json = array("['!in', '$type','Point', 'LineString']");
        mbfilter = new MBFilter(json, null );
        types = mbfilter.semanticTypeIdentifiers();
        assertTrue(types.contains(SemanticType.POLYGON) && !types.contains(SemanticType.LINE));
        filter = mbfilter.filter();
        assertEquals("INCLUDE", ECQL.toCQL(filter) );
        
        // test default handling 
        json = array("['==', 'key', 'value']");
        mbfilter = new MBFilter(json);
        types = mbfilter.semanticTypeIdentifiers();
        assertTrue( types.isEmpty() );
        
        json = array("['!=', 'key', 'value']");
        mbfilter = new MBFilter(json, null, SemanticType.LINE);
        types = mbfilter.semanticTypeIdentifiers();
        assertTrue( types.contains(SemanticType.LINE) && types.size()==1);
    }

