    @Test
    public void testLineGapStopWidth()
            throws IOException, ParseException, TransformerException, CQLException {
        JSONObject jsonObject = parseTestStyle("lineStyleGapStopsTest.json");

        // Find the LineMBLayer and assert it contains the correct FeatureTypeStyle.
        MBStyle mbStyle = new MBStyle(jsonObject);
        List<MBLayer> layers = mbStyle.layers("test-source");
        assertEquals(1, layers.size());
        assertTrue(layers.get(0) instanceof LineMBLayer);
        LineMBLayer mbLine = (LineMBLayer) layers.get(0);

        StyledLayerDescriptor sld = mbStyle.transform();
        List<FeatureTypeStyle> fts = MapboxTestUtils.getStyle(sld, 0).featureTypeStyles();
        assertEquals(fts.size(), 2);

        // first fts
        assertEquals(1, fts.get(0).rules().size());
        Rule r0 = fts.get(0).rules().get(0);
        assertEquals(2, r0.symbolizers().size());
        LineSymbolizer s_0_0 = (LineSymbolizer) r0.symbolizers().get(0);
        assertEquals(
                Integer.valueOf(10), s_0_0.getStroke().getWidth().evaluate(null, Integer.class));
        Expression exected_po_0_0 =
                CQL.toExpression(
                        "8 - (Interpolate(zoomLevel(env('wms_scale_denominator'), 'EPSG:3857'), 12, 0, "
                                + "'numeric') + 10) / 2");
        assertEquals(exected_po_0_0, s_0_0.getPerpendicularOffset());

        LineSymbolizer s_0_1 = (LineSymbolizer) r0.symbolizers().get(1);
        assertEquals(
                Integer.valueOf(10), s_0_1.getStroke().getWidth().evaluate(null, Integer.class));
        Expression exected_po_0_1 =
                CQL.toExpression(
                        "8 + (Interpolate(zoomLevel(env('wms_scale_denominator'), 'EPSG:3857'), 12, 0, "
                                + "'numeric') + 10) / 2");
        assertEquals(exected_po_0_1, s_0_1.getPerpendicularOffset());

        // second fts
        assertEquals(1, fts.get(1).rules().size());
        Rule r1 = fts.get(1).rules().get(0);
        assertEquals(2, r1.symbolizers().size());
        LineSymbolizer s_1_0 = (LineSymbolizer) r1.symbolizers().get(0);
        assertEquals(
                Integer.valueOf(10), s_1_0.getStroke().getWidth().evaluate(null, Integer.class));
        Expression exected_po_1_0 =
                CQL.toExpression(
                        "8 - (Interpolate(zoomLevel(env('wms_scale_denominator'), 'EPSG:3857'), 20, 6, "
                                + "'numeric') + 10) / 2");
        assertEquals(exected_po_1_0, s_1_0.getPerpendicularOffset());

        LineSymbolizer s_1_1 = (LineSymbolizer) r1.symbolizers().get(1);
        assertEquals(
                Integer.valueOf(10), s_1_1.getStroke().getWidth().evaluate(null, Integer.class));
        Expression exected_po_1_1 =
                CQL.toExpression(
                        "8 + (Interpolate(zoomLevel(env('wms_scale_denominator'), 'EPSG:3857'), 20, 6, "
                                + "'numeric') + 10) / 2");
        assertEquals(exected_po_1_1, s_1_1.getPerpendicularOffset());
    }

