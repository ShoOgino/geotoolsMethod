    /**
     * Tests for the {@link DefaultIfNullFunction} to verify that it falls back to the provided
     * value when the input value is null in various contexts.
     */
    @Test
    public void defaultIfNullFunctionTest() throws Exception {

        // Test that is passes through non-null values
        Function f = (Function) ECQL.toExpression("DefaultIfNull('#FF0000', '#000000')");
        assertEquals(Color.RED, f.evaluate(null, Color.class));

        // Test fallback to default when input arg is null
        f = ff.function("DefaultIfNull", ff.literal(null), ff.literal("#000000"));
        assertEquals(Color.BLACK, f.evaluate(null, Color.class));

        // Test fallback to default when the input conversion fails and returns null
        SimpleFeatureType SAMPLE =
                DataUtilities.createType("SAMPLE", "id:\"\",temperature:0.0,location=4326");
        SimpleFeature feature =
                DataUtilities.createFeature(SAMPLE, "measure1=A|NOT_A_VALID_NUMBER|POINT(0,0)");
        f = ff.function("DefaultIfNull", ff.property("temperature"), ff.literal(789));
        assertEquals(789, f.evaluate(feature, Number.class).intValue());

        // Test fallback to default when exponential fails and returns null)
        Function exp =
                ff.function(
                        "Exponential",
                        ff.property("temperature"),
                        ff.literal(1),
                        ff.literal(0),
                        ff.literal("#000000"),
                        ff.literal(10),
                        ff.literal("#ffffff"));
        f = ff.function("DefaultIfNull", exp, ff.literal(789));
        assertEquals(789, f.evaluate(feature, Number.class));

        // Test fallback to default when recode returns null
        Function recode =
                ff.function(
                        "Recode",
                        ff.property("temperature"),
                        ff.literal(1),
                        ff.literal("Output1"),
                        ff.literal(2),
                        ff.literal("Output2"));
        f = ff.function("DefaultIfNull", recode, ff.literal("DefautValue"));
        assertEquals("DefautValue", f.evaluate(feature, String.class));
    }

