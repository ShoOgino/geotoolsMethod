    /**
     * 
     * Test an {@link MBFunction} (type = interval) that returns a color value.
     * 
     */
    @Test
    public void enumIntervalFunctionTest() throws Exception {
        SimpleFeatureType SAMPLE = DataUtilities.createType("SAMPLE",
                "id:\"\",numbervalue,location=4326");
        java.util.function.Function<Long, SimpleFeature> features = (value)->
            DataUtilities.createFeature(SAMPLE, "measure1=A|"+value+"|POINT(0,0)");
        
        String jsonStr = "{'property': 'numbervalue', 'type': 'interval', 'default': 1, 'stops': [[-1000, 'INTERVAL'], [-30, 'CATEGORICAL'], [0, 'EXPONENTIAL'], [100, 'IDENTITY']]}";
        MBFunction function = new MBFunction(MapboxTestUtils.object(jsonStr));
        assertTrue("Function category is \"property\"", EnumSet.of(MBFunction.FunctionCategory.PROPERTY).equals(function.category()));
        assertEquals("Function type is \"interval\"", MBFunction.FunctionType.INTERVAL, function.getType());        
        
        Expression outputExpression = function.enumeration(MBFunction.FunctionType.class);
        
        // Before the first stop is undefined
        assertThat(outputExpression, evaluatesTo(features.apply(-10000L), String.class, any(String.class)));
        
        // Test each interval
        assertThat(outputExpression, evaluatesTo(features.apply(-900L), String.class, equalTo("interval")));
        assertThat(outputExpression, evaluatesTo(features.apply(-20L), String.class, equalTo("categorical")));
        assertThat(outputExpression, evaluatesTo(features.apply(10L), String.class, equalTo("exponential")));
        assertThat(outputExpression, evaluatesTo(features.apply(500L), String.class, equalTo("identity")));
        
        // Test at stops
        assertThat(outputExpression, evaluatesTo(features.apply(-1000L), String.class, equalTo("interval")));
        assertThat(outputExpression, evaluatesTo(features.apply(-30L), String.class, equalTo("categorical")));
        assertThat(outputExpression, evaluatesTo(features.apply(0L), String.class, equalTo("exponential")));
        assertThat(outputExpression, evaluatesTo(features.apply(100L), String.class, equalTo("identity")));
    }

