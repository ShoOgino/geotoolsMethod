    /**
     * Verify that the "literal" MBTypes expression can be parsed correctly.
     */
    @Test
    public void testParseLiteralExpression() {

        JSONObject layer = testLayersById.get("literalExpression");
        Optional<JSONObject> o = traverse(layer, JSONObject.class, "paint");
        JSONObject j = o.get();

        // test for literal JSONArray
        assertEquals(JSONArray.class, j.get("circle-radius").getClass());
        JSONArray arr0 = (JSONArray) j.get("circle-radius");
        assertEquals(MBTypes.class, MBExpression.create(arr0).getClass());
        Expression litArr = MBExpression.transformExpression(arr0);
        Object array = litArr.evaluate(litArr);
        assertTrue(array instanceof JSONArray);
        JSONArray jarray = (JSONArray)array;
        assertEquals(4, jarray.size());
        assertEquals("string", (jarray.get(1)));

        // test for literal JSONObject
        assertEquals(JSONArray.class, j.get("circle-color").getClass());
        JSONArray arr1 = (JSONArray) j.get("circle-color");
        assertEquals(MBTypes.class, MBExpression.create(arr1).getClass());
        Expression litObj = MBExpression.transformExpression(arr1);
        Object obj = litObj.evaluate(litObj);
        assertTrue(obj instanceof JSONObject);
        JSONObject jobj = (JSONObject) obj;
        assertEquals(2, jobj.size());
        assertEquals(jobj.get("object"), "test");

    }

