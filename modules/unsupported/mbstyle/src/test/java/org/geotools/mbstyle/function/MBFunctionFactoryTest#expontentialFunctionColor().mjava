    @Test
    public void expontentialFunctionColor() throws Exception {
        //
        // base 1.0 works as a simple interpolate
        //
        Function expr = (Function) ECQL.toExpression("Exponential( 0, 1.0, 0,'#000000', 10,'#ffffff')");
        assertEquals(  Color.BLACK, expr.evaluate(null,Color.class));
        
        expr = (Function) ECQL.toExpression("Exponential( 5, 1.0, 0,'#000000', 10,'#ffffff')");
        assertEquals(  Color.GRAY, expr.evaluate(null,Color.class));
        
        expr = (Function) ECQL.toExpression("Exponential(10, 1.0, 0,'#000000', 10,'#ffffff')");
        assertEquals(  Color.WHITE, expr.evaluate(null,Color.class));
        
        //
        // base 0.7 increases curve
        //
        expr = (Function) ECQL.toExpression("Exponential( 0, 0.7, 0,'#000000', 10,'#ffffff')");
        assertEquals(  Color.BLACK, expr.evaluate(null,Color.class));
        
        expr = (Function) ECQL.toExpression("Exponential( 5, 0.7, 0,'#000000', 10,'#ffffff')");
        assertTrue( Color.GRAY.getRed() < expr.evaluate(null,Color.class).getRed() );
        
        expr = (Function) ECQL.toExpression("Exponential(10, 0.7, 0,'#000000', 10,'#ffffff')");
        assertEquals(  Color.WHITE, expr.evaluate(null,Color.class));
        
        //
        // base 1.4 decreases curve
        //
        expr = (Function) ECQL.toExpression("Exponential( 0, 1.4, 0,'#000000', 10,'#ffffff')");
        assertEquals(  Color.BLACK, expr.evaluate(null,Color.class));
        
        expr = (Function) ECQL.toExpression("Exponential( 5, 1.4, 0,'#000000', 10,'#ffffff')");
        assertTrue( Color.GRAY.getRed() > expr.evaluate(null,Color.class).getRed() );
        
        expr = (Function) ECQL.toExpression("Exponential(10, 1.4, 0,'#000000', 10,'#ffffff')");
        assertEquals(  Color.WHITE, expr.evaluate(null,Color.class));
    }

