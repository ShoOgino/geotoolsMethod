    @Test
    public void testReducePropertyAndZoomFloatStopsFunctions() throws IOException, ParseException {
        JSONObject jsonObject = MapboxTestUtils.parseTestStyle("functionParseFloatStopsTest.json");
        MBStyle mbStyle = new MBStyle(jsonObject);
        List<MBLayer> layers = mbStyle.layers();
        if (layers.isEmpty()) {
            throw new MBFormatException("layers empty");
        }
        for (MBLayer layer : layers) {
            MBObjectStops mbObjectStops = new MBObjectStops(layer);
            if ("function4".equals(layer.getId())) {
                assertTrue(mbObjectStops.ls.hasStops());
                assertEquals(2, mbObjectStops.stops.size());
                assertEquals(1.5, mbObjectStops.stops.get(0), 0.1);
                assertEquals(20.5, mbObjectStops.stops.get(1), 0.1);
                assertEquals(2, mbObjectStops.layersForStop.size());
                int i = 0;
                for (MBLayer l : mbObjectStops.layersForStop) {
                    if (i == 0) {
                        JSONObject circleRadius = (JSONObject) l.getPaint().get("circle-radius");
                        JSONArray stopsArray = (JSONArray) circleRadius.get("stops");
                        assertEquals("rating", circleRadius.get("property"));
                        assertEquals(2, stopsArray.size());
                        Object stop0Obj = stopsArray.get(0);
                        assertTrue(stop0Obj instanceof JSONArray);
                        JSONArray stop0 = (JSONArray) stop0Obj;
                        // For zoom level 0, Expect: [0, 0]
                        assertEquals(0L, stop0.get(0));
                        assertEquals(0L, stop0.get(1));

                        Object stop1Obj = stopsArray.get(1);
                        assertTrue(stop1Obj instanceof JSONArray);
                        // For zoom level 0,  Expect: [5, 5]
                        JSONArray stop1 = (JSONArray) stop1Obj;
                        assertEquals(5L, stop1.get(0));
                        assertEquals(5L, stop1.get(1));
                    } else if (i == 1) {
                        JSONObject circleRadius = (JSONObject) l.getPaint().get("circle-radius");
                        JSONArray stopsArray = (JSONArray) circleRadius.get("stops");
                        assertEquals("rating", circleRadius.get("property"));
                        assertEquals(2, stopsArray.size());
                        Object stop0Obj = stopsArray.get(0);
                        assertTrue(stop0Obj instanceof JSONArray);
                        JSONArray stop0 = (JSONArray) stop0Obj;
                        // For zoom level 0, Expect: [0, 0]
                        assertEquals(0L, stop0.get(0));
                        assertEquals(0L, stop0.get(1));

                        Object stop1Obj = stopsArray.get(1);
                        assertTrue(stop1Obj instanceof JSONArray);
                        // For zoom level 20,  Expect: [5, 20]
                        JSONArray stop1 = (JSONArray) stop1Obj;
                        assertEquals(5L, stop1.get(0));
                        assertEquals(20L, stop1.get(1));
                    }
                    i++;
                }
            }
        }
    }

