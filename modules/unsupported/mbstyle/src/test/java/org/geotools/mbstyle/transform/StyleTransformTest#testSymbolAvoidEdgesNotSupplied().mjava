    /**
     * MapBox symbol-avoid-edges defaults to false, If true, the symbols will not cross tile edges
     * to avoid mutual collisions. This concept is represented by using the Partials option in
     * GeoTools. The partials options instructs the renderer to render labels that cross the map
     * extent, which are normally not painted since there is no guarantee that a map put on the side
     * of the current one (tiled rendering) will contain the other half of the label. By enabling
     * “partials” the style editor takes responsibility for the other half being there (maybe
     * because the label points have been placed by hand and are assured not to conflict with each
     * other, at all zoom levels).
     *
     * <p>Based upon the above if symbol-avoid-edges is true we do not need to add the partials
     * option as the renderer will do this by default. But if symbol-avoid-edges is missing or set
     * to false, then we do need to add the partials option set to true.
     *
     * @throws IOException
     * @throws ParseException
     */
    @Test
    public void testSymbolAvoidEdgesNotSupplied() throws IOException, ParseException {
        JSONObject jsonObject = parseTestStyle("symbolTextAndIconTest.json");
        JSONArray jsonLayers = (JSONArray) jsonObject.get("layers");
        JSONObject jsonLayer = (JSONObject) jsonLayers.get(0);
        JSONObject layout = (JSONObject) jsonLayer.get("layout");

        assertNull(layout.get("symbol-avoid-edges"));

        MBStyle mbStyle = new MBStyle(jsonObject);
        List<MBLayer> layers = mbStyle.layers("test-source");
        List<FeatureTypeStyle> fts = layers.get(0).transform(mbStyle);
        Rule r = fts.get(0).rules().get(0);
        Symbolizer symbolizer = r.symbolizers().get(0);
        assertEquals("true", ((TextSymbolizerImpl) symbolizer).getOptions().get("partials"));
    }

