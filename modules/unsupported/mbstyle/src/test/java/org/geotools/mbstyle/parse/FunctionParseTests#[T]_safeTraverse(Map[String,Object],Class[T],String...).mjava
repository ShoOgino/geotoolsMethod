    /**
     * Traverse a nested map using the array of strings, and cast the result to the provided class, or return {@link Optional#empty()}.
     */
    private <T> Optional<T> safeTraverse(Map<String, Object> map, Class<T> clazz,
            String... strings) {
        if (strings == null || strings.length == 0) {
            return Optional.empty();
        }

        Object curObj = map;
        for (String s : Arrays.asList(strings)) {
            if (curObj instanceof Map) {
                Map m = (Map) curObj;
                if (m.containsKey(s)) {
                    curObj = m.get(s);
                } else {
                    return Optional.empty();
                }
            } else {
                return Optional.empty();
            }
        }

        return Optional.of(clazz.cast(curObj));
    }

