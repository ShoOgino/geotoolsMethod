    /**
     * Tests that a MapBox exponential zoom function (outputting a numeric value) correctly interpolates values
     * for zoom levels between stops.
     * 
     * @throws Exception
     */
    @Test
    public void zoomStopsNumericInterpolationTest() throws Exception {
        SimpleFeatureType SAMPLE = DataUtilities.createType("SAMPLE",
                "id:\"\",temperature:0.0,location=4326");
        SimpleFeature feature = DataUtilities.createFeature(SAMPLE, "measure1=A|50.0|POINT(0,0)");
        
        // Set scale denominator to the equivalent of zoomLevel 9
        String scaleDenomForZoom9 = "1091957.546779";
        EnvFunction.setGlobalValue("wms_scale_denominator", scaleDenomForZoom9);

        // Verify environment has expected scale denominator (and zoom level)
        assertEquals(1091957.546779, ff.function("env", ff.literal("wms_scale_denominator"))
                .evaluate(null, Number.class).doubleValue(), .00001);
        verifyEnvironmentZoomLevel(9);

        // -------- Test interpolation for base > 1
        // Create a Mapbox Function for base > 1
        String jsonStr = "{'base': 1.9, 'stops':[[0,12],[6,24],[12,48]]}";
        MBFunction function = new MBFunction(object(jsonStr));
        
        // Assert it is an exponential function with the correct base
        assertTrue("Is a zoom function", EnumSet.of(MBFunction.FunctionCategory.ZOOM).equals(function.category()));
        assertEquals(MBFunction.FunctionType.EXPONENTIAL, function.getType());
        assertEquals(1.9, function.getBase().doubleValue(), .00001);
        
        Function fn = (Function) function.numeric();
        Number result = fn.evaluate(feature, Number.class);       
           
        assertTrue("Interpolated value should be above lower stop", result.doubleValue() > 24);    
        assertTrue("Interpolated value should be below midpoint (for base > 1)", result.doubleValue() < 36);
        
        // -------- Test interpolation for base < 1
        jsonStr = "{'base': 0.1, 'stops':[[0,12],[6,24],[12,48]]}";
        function = new MBFunction(object(jsonStr));
        
        // Assert it is an exponential function with the correct base
        assertTrue("Is a zoom function", EnumSet.of(MBFunction.FunctionCategory.ZOOM).equals(function.category()));
        assertEquals(MBFunction.FunctionType.EXPONENTIAL, function.getType());
        assertEquals(0.1, function.getBase().doubleValue(), .00001);
        
        fn = (Function) function.numeric();
        result = fn.evaluate(feature, Number.class);       
        
        assertTrue("Interpolated value should be above lower stop", result.doubleValue() > 24);    
        assertTrue("Interpolated value should be above midpoint (for base < 1)", result.doubleValue() > 36);
        
        // -------- Test interpolation for base = 1        
        jsonStr = "{'base': 1.0, 'stops':[[0,12],[6,24],[12,48]]}";
        function = new MBFunction(object(jsonStr));
        
        // Assert it is an exponential function with the correct base
        assertTrue("Is a zoom function", EnumSet.of(MBFunction.FunctionCategory.ZOOM).equals(function.category()));
        assertEquals(MBFunction.FunctionType.EXPONENTIAL, function.getType());
        assertEquals(1.0, function.getBase().doubleValue(), .00001);
        
        fn = (Function) function.numeric();
        result = fn.evaluate(feature, Number.class);       
        
        assertTrue("Interpolated value should be above lower stop", result.doubleValue() > 24);    
        assertEquals("Interpolated value should = midpoint (for base = 1)", result.doubleValue(), 36.0, .0001);
    }

