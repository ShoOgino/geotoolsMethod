    /**
     * Generates a color expression for the output of this {@link MBFunction} (as an exponential
     * function), based on the provided input Expression.
     *
     * @param expression The expression for the function input
     * @return The expression for the output of this function (as an exponential function)
     */
    private Expression colorGenerateExponential(Expression expression, double base) {
        List<Expression> parameters = new ArrayList<>();
        parameters.add(expression);
        parameters.add(ff.literal(base));
        for (Object obj : getStops()) {
            JSONArray entry = parse.jsonArray(obj);
            Object stop = entry.get(0);
            Object value = entry.get(1);
            Expression color = parse.color((String) value);
            if (color == null) {
                throw new MBFormatException(
                        "Could not convert stop " + stop + " color " + value + " into a color");
            }
            parameters.add(ff.literal(stop));
            parameters.add(color);
        }
        return withFallback(
                ff.function("Exponential", parameters.toArray(new Expression[parameters.size()])));
    }

