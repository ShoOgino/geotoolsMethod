    /**
     * Transform {@link FillExtrusionMBLayer} to GeoTools FeatureTypeStyle.
     *
     * @param styleContext The MBStyle to which this layer belongs, used as a context for things like resolving sprite and glyph names to full urls.
     */
    public List<FeatureTypeStyle> transformInternal(MBStyle styleContext) {
        List<FeatureTypeStyle> fillExtrusion = new ArrayList<>();
        PolygonSymbolizer symbolizer;
        MBStyleTransformer transformer = new MBStyleTransformer(parse);

        // from fill pattern or fill color
        Fill fill;

        DisplacementImpl displacement = new DisplacementImpl();

        displacement.setDisplacementX(getFillExtrusionBase().doubleValue());
        displacement.setDisplacementY(getFillExtrusionHeight().doubleValue());

        if (getFillExtrusionPattern() != null) {
            //Fill graphic (with external graphics)
            ExternalGraphic eg = transformer.createExternalGraphicForSprite(getFillExtrusionPattern(), styleContext);
            GraphicFill gf = sf.graphicFill(Arrays.asList(eg), fillExtrusionOpacity(), null, null, null, displacement);
            fill = sf.fill(gf, null, null);
        } else {
            fill = sf.fill(null, fillExtrusionColor(), fillExtrusionOpacity());
        }

        // Create 3 symbolizers one each for shadow, sides, and roof.
        PolygonSymbolizer shadowSymbolizer = sf.polygonSymbolizer("shadow",
                ff.function("offset", ff.property("the_geom"), ff.literal(0.005), ff.literal(-0.005)),
                sf.description(Text.text("fill"),null),
                NonSI.PIXEL,
                null,
                fill,
                displacement,
                ff.literal(0));

        PolygonSymbolizer sidesSymbolizer = sf.polygonSymbolizer("sides",
                ff.function("isometric", ff.property("the_geom"), ff.literal(fillExtrusionHeight())),
                sf.description(Text.text("fill"),null),
                NonSI.PIXEL,
                null,
                fill,
                displacement,
                ff.literal(0));
        PolygonSymbolizer roofSymbolizer = sf.polygonSymbolizer("shadow",
                ff.function("offset", ff.property("the_geom"), ff.literal(fillExtrusionBase()), ff.literal(fillExtrusionHeight())),
                sf.description(Text.text("fill"),null),
                NonSI.PIXEL,
                null,
                fill,
                displacement,
                ff.literal(0));

        MBFilter filter = getFilter();

        // Each symbolizer needs a rule.
        Rule shadowRule = sf.rule(
                getId(),
                null,
                null,
                0.0,
                Double.POSITIVE_INFINITY,
                Arrays.asList(shadowSymbolizer),
                filter.filter());

        Rule sidesRule = sf.rule(
                getId(),
                null,
                null,
                0.0,
                Double.POSITIVE_INFINITY,
                Arrays.asList(sidesSymbolizer),
                filter.filter());

        Rule roofRule = sf.rule(
                getId(),
                null,
                null,
                0.0,
                Double.POSITIVE_INFINITY,
                Arrays.asList(roofSymbolizer),
                filter.filter());

        // Set legend graphic to null.
        //setLegend(null) to empty list.
        shadowRule.setLegendGraphic(new Graphic[0]);
        sidesRule.setLegendGraphic(new Graphic[0]);
        roofRule.setLegendGraphic(new Graphic[0]);

        // Finally we create the FeatureTypeStyles for the extrusion.
        FeatureTypeStyle shadow = sf.featureTypeStyle(
                getId(),
                sf.description(
                        Text.text("MBStyle "+getId()),
                        Text.text("Generated for "+getSourceLayer())),
                null, // (unused)
                Collections.emptySet(),
                filter.semanticTypeIdentifiers(),
                Arrays.asList(shadowRule));

        FeatureTypeStyle sides = sf.featureTypeStyle(
                getId(),
                sf.description(
                        Text.text("MBStyle "+getId()),
                        Text.text("Generated for "+getSourceLayer())),
                null, // (unused)
                Collections.emptySet(),
                filter.semanticTypeIdentifiers(),
                Arrays.asList(sidesRule));

        FeatureTypeStyle roof = sf.featureTypeStyle(
                getId(),
                sf.description(
                        Text.text("MBStyle "+getId()),
                        Text.text("Generated for "+getSourceLayer())),
                null, // (unused)
                Collections.emptySet(),
                filter.semanticTypeIdentifiers(),
                Arrays.asList(roofRule));

        fillExtrusion.add(shadow);
        fillExtrusion.add(sides);
        fillExtrusion.add(roof);

        return fillExtrusion;
    }

