    /**
     * Translate "$type": the feature type we need This key may be used with the "==",  "!=", "in", and "!in" operators.
     * Possible values are  "Point", "LineString", and "Polygon".</li>
     * 
     * @param layer MBLayer type (as each has a different default SemanticType)
     * @return
     */
    public Set<SemanticType> semanticTypeIdentifiers(){
        if (json == null || json.isEmpty()) {
            // return the default for this layer type
            return semanticTypeIdentifiersDefaults();
        }
        
        String operator = parse.get(json, 0);
        if(("==".equals(operator) || "!=".equals(operator) ||
                "in".equals(operator) || "!in".equals(operator))&&
                "$type".equals(parse.get(json, 1))){
            if( "in".equals(operator) || "==".equals(operator)){
                Set<SemanticType> semanticTypes = new HashSet<>();
                List<?> types = json.subList(2, json.size());
                for(Object type : types ){
                    if( type instanceof String ){
                        String jsonText = (String) type;
                        SemanticType semanticType = translateSemanticType(jsonText);
                        semanticTypes.add(semanticType);
                    }
                    else {
                        throw new MBFormatException("[\"in\",\"$type\", ...] limited to Point, LineString, Polygion: "+type);
                    }
                }
                if("==".equals(operator) && types.size() != 1){
                    throw new MBFormatException("[\"==\",\"$type\", ...] limited one geometry type, to test more than one use \"in\" operator.");
                }
                return semanticTypes;
            }
            else if( "!in=".equals(operator)){
                Set<SemanticType> semanticTypes = new HashSet<>( Arrays.asList(SemanticType.values()) );
                List<?> types = json.subList(2, json.size()-1);
                for(Object type : types ){
                    if( type instanceof String ){
                        String jsonText = (String) type;
                        SemanticType semanticType = translateSemanticType(jsonText);
                        semanticTypes.remove(semanticType);
                    }
                    else {
                        throw new MBFormatException("[\"!in\",\"$type\", ...] limited to Point, LineString, Polygion: "+type);
                    }
                }
                if("!=".equals(operator) && types.size() != 1){
                    throw new MBFormatException("[\"!=\",\"$type\", ...] limited one geometry type, to test more than one use \"!in\" operator.");
                }
                return semanticTypes;
            }
        }
        return semanticTypeIdentifiersDefaults();
    }

