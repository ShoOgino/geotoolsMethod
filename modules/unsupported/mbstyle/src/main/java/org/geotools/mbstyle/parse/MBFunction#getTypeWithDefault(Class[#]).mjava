    /**
     * <p>
     * Return the function type, falling back to the default function type for the provided {@link Class} if no function
     * type is explicitly declared.
     * The parameter is necessary because different output classes will have different default function types.
     * </p>
     *
     * <p>
     * Examples (For a function with no explicitly declared type):
     * </p>
     * 
     * <pre>
     * getTypeWithDefault(String.class); // -> "interval" function type
     * getTypeWithDefault(Number.class); // -> "exponential" function type
     * </pre>
     * 
     * @see <a href="https://www.mapbox.com/mapbox-gl-js/style-spec/#types-function">The "type" header under Mapbox
     * Spec: Functions</a>
     * @param clazz The class for which to return the default function type
     * @return The function type, falling back to the default when the provided {@link Class} is the return type.
     */
    public FunctionType getTypeWithDefault(Class<?> clazz) {

        // If a function type is explicitly declared, return that.
        FunctionType declaredType = getType();

        if (declaredType != null) {
            return declaredType;
        }

        // Otherwise, return the correct default type for the provided class.
        if (Color.class.isAssignableFrom(clazz) || Number.class.isAssignableFrom(clazz)) {
            return FunctionType.EXPONENTIAL;
        } else {
            return FunctionType.INTERVAL;
        }
    }

