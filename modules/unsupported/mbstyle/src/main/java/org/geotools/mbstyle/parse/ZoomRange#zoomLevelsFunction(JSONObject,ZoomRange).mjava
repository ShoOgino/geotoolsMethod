    private static List<ZoomRange> zoomLevelsFunction(JSONObject function, ZoomRange layerRange){
        if(!isZoomAndPropertyFunction(function)){
            return Collections.emptyList();
        }
        SortedSet<Integer> set = new TreeSet<>();
        set.add(layerRange.getMin());
        set.add(layerRange.getMax());
        
        JSONArray stops = (JSONArray) function.get("stops");
        for( Object obj : stops ){
            JSONObject stop = (JSONObject) ((JSONArray) obj).get(0);
            Object value = stop.get("zoom");
            if(!(value instanceof Number)){
                throw new MBFormatException("Zoom level required to be integer, was "+value.getClass().getSimpleName());
            }
            int zoom = ((Number)value).intValue();
            set.add(zoom);
        }

        List<ZoomRange> levels = new ArrayList<>();
        Iterator<Integer> iterator = set.iterator();
        int zoom = iterator.next();
        while( iterator.hasNext() ){
            ZoomRange range = new  ZoomRange();
            range.setMin(zoom);
            zoom = iterator.next();
            range.setMax(zoom);
            
            levels.add(range);
        }
        return levels;
    }

