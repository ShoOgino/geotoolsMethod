    /**
     * Transform MBStyle to a GeoTools UserLayer.
     * 
     * @param mbStyle MBStyle
     * @return user layer
     */
    public StyledLayerDescriptor transform(MBStyle mbStyle) {
        JSONParser parser = new JSONParser();

        List<MBLayer> layers = mbStyle.layers();
        if (layers.isEmpty()) {
            throw new MBFormatException("layers empty");
        }


        StyledLayerDescriptor sld = sf.createStyledLayerDescriptor();
        Style style = sf.createStyle();

        for (MBLayer layer : layers) {
            Boolean hasStops = false;
            if (layer.visibility()) {
                if (layer.getPaint() != null) {
                    hasStops = MBObjectStops.hasStops(layer.getPaint());
                }
                if (layer.getLayout() != null && !hasStops) {
                    hasStops = MBObjectStops.hasStops(layer.getLayout());
                }
                FeatureTypeStyle featureTypeStyle = null;
                List<Long> stopLevels = MBObjectStops.getStopLevels(layer);
                if (stopLevels.size() > 0 && hasStops) {
                    try {
                        List<MBLayer> stopLayers = MBObjectStops.getLayerStyleForStops(layer, stopLevels);
                        for (MBLayer l : stopLayers) {
                            long stopLevel = MBObjectStops.getStop(l);
                            List<long[]> ranges = MBObjectStops.getStopLevelRanges(stopLevels);
                            long[] rangeForStopLevel = MBObjectStops.getRangeForStop(stopLevel, ranges);
                            Double minScaleDenominator = MBObjectStops.zoomLevelToScaleDenominator(rangeForStopLevel[0]);
                            Double maxScaleDenominator = null;
                            if (stopLevel != rangeForStopLevel[1] && rangeForStopLevel[1] != -1) {
                                maxScaleDenominator = MBObjectStops.zoomLevelToScaleDenominator(rangeForStopLevel[1]);
                            }
                            
                            featureTypeStyle = transform(l, mbStyle, minScaleDenominator, maxScaleDenominator);
//                            Rule rule = featureTypeStyle.rules().get(0);
//                            
//                            rule.setMinScaleDenominator(minScaleDenominator);
//                            rule.setMaxScaleDenominator(maxScaleDenominator);
                            
                            style.featureTypeStyles().add(featureTypeStyle);
                        }
                    } catch (ParseException e) {

                    }

                } else {
                    featureTypeStyle = transform(layer, mbStyle);
                    style.featureTypeStyles().add(featureTypeStyle);
                }
            }
        }
        
        if( style.featureTypeStyles().isEmpty() ){
            throw new MBFormatException("No visibile layers");
        }
        
        UserLayer userLayer = sf.createUserLayer();
        userLayer.userStyles().add(style);
        
        sld.layers().add(userLayer);
        sld.setName(mbStyle.getName());
        return sld;
    }

