    @Override
    public Function function(Name name, List<Expression> args, Literal fallback) {
        if (ZoomLevelFunction.NAME.getFunctionName().equals(name)) {
            ZoomLevelFunction f = new ZoomLevelFunction();
            f.setParameters(args);
            f.setFallbackValue(fallback);
            return f;
        }
        if (ExponentialFunction.NAME.getFunctionName().equals(name)) {
            ExponentialFunction f = new ExponentialFunction();
            f.setParameters(args);
            f.setFallbackValue(fallback);

            return f;
        }
        if (CSSFunction.NAME.getFunctionName().equals(name)) {
            CSSFunction f = new CSSFunction();
            f.setParameters(args);
            f.setFallbackValue(fallback);

            return f;
        }
        if (DefaultIfNullFunction.NAME.getFunctionName().equals(name)) {
            DefaultIfNullFunction f = new DefaultIfNullFunction();
            f.setParameters(args);
            f.setFallbackValue(fallback);
            return f;
        }
        if (StringTransformFunction.NAME.getFunctionName().equals(name)) {
            StringTransformFunction f = new StringTransformFunction();
            f.setParameters(args);
            f.setFallbackValue(fallback);
            return f;
        }
        if (ToRgb.NAME.getFunctionName().equals(name)){
            ToRgb f = new ToRgb();
            f.setParameters(args);
            f.setFallbackValue(fallback);
            return f;
        }
        if (MBFunction_equalTo.NAME.getFunctionName().equals(name)) {
            MBFunction_equalTo f = new MBFunction_equalTo();
            f.setParameters(args);
            f.setFallbackValue(fallback);
            return f;
        }
        if (MBFunction_notEqualTo.NAME.getFunctionName().equals(name)) {
            MBFunction_notEqualTo f = new MBFunction_notEqualTo();
            f.setParameters(args);
            f.setFallbackValue(fallback);
            return f;
        }
        if (MBFunction_all.NAME.getFunctionName().equals(name)) {
            MBFunction_all f = new MBFunction_all();
            f.setParameters(args);
            f.setFallbackValue(fallback);
            return f;
        }
        if (MBFunction_any.NAME.getFunctionName().equals(name)) {
            MBFunction_any f = new MBFunction_any();
            f.setParameters(args);
            f.setFallbackValue(fallback);
            return f;
        }
        if (MBFunction_case.NAME.getFunctionName().equals(name)) {
            MBFunction_case f = new MBFunction_case();
            f.setParameters(args);
            f.setFallbackValue(fallback);
            return f;
        }
        if (MBFunction_coalesce.NAME.getFunctionName().equals(name)) {
            MBFunction_coalesce f = new MBFunction_coalesce();
            f.setParameters(args);
            f.setFallbackValue(fallback);
            return f;
        }
        if (MBFunction_match.NAME.getFunctionName().equals(name)) {
            MBFunction_match f = new MBFunction_match();
            f.setParameters(args);
            f.setFallbackValue(fallback);
            return f;
        }
        if (ListSizeFunction.NAME.getFunctionName().equals(name)){
            ListSizeFunction f = new ListSizeFunction();
            f.setParameters(args);
            f.setFallbackValue(fallback);
            return f;
        }
        if (MBFunction_length.NAME.getFunctionName().equals(name)){
            MBFunction_length f = new MBFunction_length();
            f.setParameters(args);
            f.setFallbackValue(fallback);
            return f;
        }
        if (MBFunction_at.NAME.getFunctionName().equals(name)){
            MBFunction_at f = new MBFunction_at();
            f.setParameters(args);
            f.setFallbackValue(fallback);
            return f;
        }
        if (MBFunction_get.NAME.getFunctionName().equals(name)){
            MBFunction_get f = new MBFunction_get();
            f.setParameters(args);
            f.setFallbackValue(fallback);
            return f;
        }
        if (MBFunction_has.NAME.getFunctionName().equals(name)){
            MBFunction_has f = new MBFunction_has();
            f.setParameters(args);
            f.setFallbackValue(fallback);
            return f;
        }
        if (MBFunction_remainder.NAME.getFunctionName().equals(name)){
            MBFunction_remainder f = new MBFunction_remainder();
            f.setParameters(args);
            f.setFallbackValue(fallback);
            return f;
        }
        if (MBFunction_typeOf.NAME.getFunctionName().equals(name)) {
            MBFunction_typeOf f = new MBFunction_typeOf();
            f.setParameters(args);
            f.setFallbackValue(fallback);
            return f;
        }
        if (MBFunction_type.NAME.getFunctionName().equals(name)) {
            MBFunction_type f = new MBFunction_type();
            f.setParameters(args);
            f.setFallbackValue(fallback);
            return f;
        }
        if (MBFunction_toBool.NAME.getFunctionName().equals(name)) {
            MBFunction_toBool f = new MBFunction_toBool();
            f.setParameters(args);
            f.setFallbackValue(fallback);
            return f;
        }
        if (MBFunction_toString.NAME.getFunctionName().equals(name)) {
            MBFunction_toString f = new MBFunction_toString();
            f.setParameters(args);
            f.setFallbackValue(fallback);
            return f;
        }
        if (MBFunction_toNumber.NAME.getFunctionName().equals(name)) {
            MBFunction_toNumber f = new MBFunction_toNumber();
            f.setParameters(args);
            f.setFallbackValue(fallback);
            return f;
        }
        if (MBFunction_toColor.NAME.getFunctionName().equals(name)) {
            MBFunction_toColor f = new MBFunction_toColor();
            f.setParameters(args);
            f.setFallbackValue(fallback);
            return f;
        }
        return null;
    }

