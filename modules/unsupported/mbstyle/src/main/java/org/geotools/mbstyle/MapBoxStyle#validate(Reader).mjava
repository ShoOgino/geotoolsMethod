    /**
     * Validate ability to read json, and parse each layer.
     * @param reader
     * @return 
     * @throws IOException
     * @throws ParseException
     */
    public static List<Exception> validate(Reader reader) {
        List<Exception> problems = new ArrayList<Exception>();
        MBStyleParser parser = new MBStyleParser();
        MBStyle style;
        try {
            style = parser.parse(reader);
        }
        catch (Exception invalid){
            problems.add( invalid );
            return problems;
        }
        MBStyleTransformer transform = new MBStyleTransformer();
        if( style.layers().isEmpty()){
            problems.add( new MBFormatException("No layers defined"));
        }
        else {
            boolean hasVisibleLayer = false;
            for (MBLayer layer : style.layers()) {
                if(!layer.visibility() ){
                    continue;
                }
                try {
                    FeatureTypeStyle featureTypeStyle = transform.transform(layer, style);
                    if( featureTypeStyle != null ){
                        hasVisibleLayer = true;
                    }
                }
                catch (Exception invalid){
                    problems.add((MBFormatException) new MBFormatException(
                            "Layer " + layer.getId() + ":" + invalid.getMessage()).initCause(invalid));
                    return problems;
                }
            }
            if( !hasVisibleLayer){
                problems.add( new MBFormatException("No layers were visible"));
            }
        }
        return problems;
    }

