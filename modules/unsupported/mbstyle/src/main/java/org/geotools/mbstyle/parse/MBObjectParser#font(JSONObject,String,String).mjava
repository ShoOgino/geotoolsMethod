    //
    // Font
    //
    /**
     * Convert the provided object to a numeric Expression (or function), with a fallback value if
     * the object is null.
     *
     * @param json The json context of the object, used for error messages.
     * @param tag The object to convert
     * @param fallback The fallback value, used when the provided object is null.
     * @return A numeric expression for the provided object
     */
    private Expression font(JSONObject json, String tag, String fallback) throws MBFormatException {
        if (json == null) {
            return fallback == null ? null : ff.literal(fallback);
        }
        Object obj = json.get(tag);

        if (obj == null) {
            return ff.literal(fallback);
        }
        if (obj instanceof JSONObject) {
            MBFunction function = new MBFunction(this, (JSONObject) obj);
            return function.font();
        }
        if (obj instanceof JSONArray) {
            if (((JSONArray) obj).get(0) instanceof String) {
                return MBExpression.transformExpression((JSONArray) obj);
            } else {
                throw new MBFormatException(context + " font from JSONArray not supported");
            }
        } else {
            throw new IllegalArgumentException(
                    "json contents invalid, "
                            + tag
                            + " value limited to JSONArray, or JSONObject but was "
                            + obj.getClass().getSimpleName());
        }
    }

