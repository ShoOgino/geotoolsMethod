    /**
     * Generates a color expression for the output of this {@link MBFunction} (as a interpolate function), based on the provided input Expression.
     * 
     * @param expression The expression for the function input
     * @return The expression for the output of this function (as an interpolate function)
     */
    private Expression colorGenerateInterpolation(Expression expression) {
        List<Expression> parameters = new ArrayList<>();
        parameters.add(expression);
        for (Object obj : getStops()) {
            JSONArray entry = parse.jsonArray(obj);
            Object stop = entry.get(0);
            Object value = entry.get(1);
            Expression color = parse.color((String)value); // handles web colors
            if( color == null ){
                throw new MBFormatException("Could not convert stop "+stop+" color "+value+" into a color");
            }
            parameters.add(ff.literal(stop));
            parameters.add(color);
        }
        parameters.add(ff.literal("color"));
        return withFallback(ff.function("Interpolate", parameters.toArray(new Expression[parameters.size()])));
    }

