    /**
     * Transform {@link SymbolMBLayer} to GeoTools FeatureTypeStyle.
     * <p>
     * Notes:
     * </p>
     * <ul>
     * </ul>
     * 
     * @param layer Describing symbol styling
     * @return FeatureTypeStyle
     */
    FeatureTypeStyle transform(SymbolMBLayer layer, MBStyle styleContext) {
        List<Symbolizer> symbolizers = new ArrayList<Symbolizer>();

        LabelPlacement labelPlacement;
        
        // Create point or line placement
        
        // Functions not yet supported for symbolPlacement, so try to evaluate or use default.
        String symbolPlacementVal = requireLiteral(layer.symbolPlacement(), String.class, "point", "symbol-placement", layer.getId());
        
        if ("point".equalsIgnoreCase(symbolPlacementVal.trim())) {
            // Point Placement (default)            
            PointPlacement pointP = sb.createPointPlacement();
            // Set anchor point (translated by text-translate)
            // TODO - GeoTools AnchorPoint doesn't seem to have an effect on PointPlacement    
            pointP.setAnchorPoint(layer.anchorPoint());

            // MapBox text-offset: +y means down
            Displacement textTranslate = layer.textTranslateDisplacement();             
            textTranslate.setDisplacementY(ff.multiply(ff.literal(-1), textTranslate.getDisplacementY()));
            pointP.setDisplacement(textTranslate);

            pointP.setRotation(layer.textRotate());

            labelPlacement = pointP;
        } else {
            // Line Placement
            
            LinePlacement lineP = sb.createLinePlacement(null);
            lineP.setRepeated(true);
            
            // TODO pixels (geotools) vs ems (mapbox) for text-offset
            lineP.setPerpendicularOffset(
                    ff.multiply(ff.literal(-1), layer.textOffsetDisplacement().getDisplacementY()));

            labelPlacement = lineP;
        }

        Halo halo = sf.halo(sf.fill(null, layer.textHaloColor(), null), layer.textHaloWidth());
        Fill fill = sf.fill(null, layer.textColor(), layer.textOpacity());

        Font font;
        if (layer.getTextFont() == null) {
            font = sb.createFont(ff.literal(defaultFonts), ff.literal("normal"),
                    ff.literal("normal"), layer.textSize());
        } else {
            // TODO fonts
            font = sb.createFont(ff.literal(layer.getTextFont()), ff.literal("normal"),
                    ff.literal("normal"), layer.textSize());
        }

        // If the textField is a literal string (not a function), then
        // we need to support Mapbox token replacement.
        Expression textExpression = layer.textField();
        if (textExpression instanceof Literal) {
            String text = textExpression.evaluate(null, String.class);
            if (text.trim().isEmpty()) {
                textExpression = ff.literal(" ");
            } else {
                textExpression = cqlExpressionFromTokens(text);
            }
        }

        TextSymbolizer2 symbolizer = (TextSymbolizer2) sf.textSymbolizer(layer.getId(),
                ff.property((String) null), sf.description(Text.text("text"), null), NonSI.PIXEL,
                textExpression, font, labelPlacement, halo, fill);        

        // TODO Vendor options can't be expressions.
        Number symbolSpacing = requireLiteral(layer.symbolSpacing(), Number.class, 250,
                "symbol-spacing", layer.getId());
        symbolizer.getOptions().put("repeat", String.valueOf(symbolSpacing));

        // text max angle
        // layer.getTextMaxAngle();
        // symbolizer.getOptions().put("maxAngleDelta", "40");

        // conflictResolution
        // Mapbox allows text overlap and icon overlap separately. GeoTools only has conflictResolution.       
        Boolean textAllowOverlap = requireLiteral(layer.textAllowOverlap(), Boolean.class, false,
                "text-allow-overlap", layer.getId());
        Boolean iconAllowOverlap = requireLiteral(layer.iconAllowOverlap(), Boolean.class, false,
                "icon-allow-overlap", layer.getId());

        symbolizer.getOptions().put("conflictResolution",
                String.valueOf(!(textAllowOverlap || iconAllowOverlap)));      
        
        // TODO Vendor options can't be expressions
        
        String textFitVal = requireLiteral(layer.iconTextFit(), String.class, "none", "icon-text-fit", layer.getId()).trim();                
        if ("height".equalsIgnoreCase(textFitVal) || "width".equalsIgnoreCase(textFitVal)) {
            symbolizer.getOptions().put("graphic-resize",
                    "stretch");
        } else if ("both".equalsIgnoreCase(textFitVal)) {
            symbolizer.getOptions().put("graphic-resize",
                    "proportional");  
        } else {
            // Default
            symbolizer.getOptions().put("graphic-resize",
                    "none");
        }
        
        // TODO Mapbox allows you to sapecify an array of values, one for each side
        if (layer.getIconTextFitPadding() != null && !layer.getIconTextFitPadding().isEmpty()) {
            symbolizer.getOptions().put("graphic-margin",
                    String.valueOf(layer.getIconTextFitPadding().get(0)));
        } else {
            symbolizer.getOptions().put("graphic-margin",
                    "0");
        }

        // halo blur
        // layer.textHaloBlur();

        // auto wrap
        // symbolizer.getOptions().put("autoWrap", layer.textMaxWidth()); // TODO - Pixels (GS) vs ems (MB); Vendor options with expressions?

        // If the layer has an icon image, add it to our symbolizer
        if (layer.hasIconImage()) {

            // If the iconImage is a literal string (not a function), then
            // we need to support Mapbox token replacement.
            // Note: the URL is expected to be a CQL STRING ...
            Expression iconExpression = layer.iconImage();
            if (iconExpression instanceof Literal) {
                iconExpression = cqlExpressionFromTokens(iconExpression.evaluate(null, String.class));
            }

            ExternalGraphic eg = createExternalGraphicForSprite(iconExpression, styleContext);
            // TODO layer.iconSize() - MapBox uses multiplier, GeoTools uses pixels
            Graphic g = sf.graphic(Arrays.asList(eg), layer.iconOpacity(), null,
                    layer.iconRotate(), null, null);
            Displacement d = layer.iconOffsetDisplacement();
            d.setDisplacementY(d.getDisplacementY());
            g.setDisplacement(d);
            symbolizer.setGraphic(g);
        }

        symbolizers.add(symbolizer);

        // List of opengis rules here (needed for constructor)
        List<org.opengis.style.Rule> rules = new ArrayList<>();
        Rule rule = sf.rule(layer.getId(), null, null, 0.0, Double.POSITIVE_INFINITY, symbolizers,
                layer.filter());
        rule.setLegendGraphic(new Graphic[0]);

        rules.add(rule);
        return sf.featureTypeStyle(layer.getId(),
                sf.description(Text.text("MBStyle " + layer.getId()),
                        Text.text("Generated for " + layer.getSourceLayer())),
                null, // (unused)
                Collections.emptySet(), Collections.singleton(SemanticType.POLYGON), // we only expect this to be applied to polygons
                rules);
    }

