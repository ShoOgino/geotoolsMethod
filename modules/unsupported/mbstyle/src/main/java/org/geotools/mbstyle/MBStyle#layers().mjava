    /**
     * Access all layers.
     *
     * @return list of layers
     */
    public List<MBLayer> layers(){
        JSONArray layers = parse.getJSONArray(json, "layers");
        List<MBLayer> layersList = new ArrayList<>();
        for (Object obj : layers) {
            if (obj instanceof JSONObject) {
                if (((JSONObject) obj).containsKey("ref")) {
                    String refLayer = ((JSONObject) obj).get("ref").toString();
                    JSONObject refObject = new JSONObject();
                    for (Object layer : layers) {
                        if (refLayer.equalsIgnoreCase(((JSONObject)layer).get("id").toString())) {
                            refObject = (JSONObject) layer;
                        }
                    }
                    if (refObject.size() > 0) {
                        // At a minimum, a type is needed to create a layer
                        ((JSONObject) obj).put("type", refObject.get("type"));
                        ((JSONObject) obj).put("source", refObject.get("source"));
                        ((JSONObject) obj).put("source-layer", refObject.get("source-layer"));
                        ((JSONObject) obj).put("minzoom", refObject.get("minzoom"));
                        ((JSONObject) obj).put("maxzoom", refObject.get("maxzoom"));
                        ((JSONObject) obj).put("filter", refObject.get("filter"));
                        if(!((JSONObject) obj).containsKey("layout")){
                            ((JSONObject) obj).put("layout", refObject.get("layout"));
                        }
                        if(!((JSONObject) obj).containsKey("paint")){
                            ((JSONObject) obj).put("paint", refObject.get("paint"));
                        }

                        MBLayer layer = MBLayer.create((JSONObject) obj);
                        layersList.add(layer);
                    }
                } else {
                    MBLayer layer = MBLayer.create((JSONObject) obj);
                    layersList.add(layer);
                }
            } else {
                throw new MBFormatException("Unexpected layer definition " + obj);
            }
        }
        return layersList;
    }

