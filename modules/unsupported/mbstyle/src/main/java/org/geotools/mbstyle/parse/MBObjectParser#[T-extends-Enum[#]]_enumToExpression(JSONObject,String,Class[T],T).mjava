    /**
     *
     * <p>Parse a Mapbox enumeration property to a GeoTools Expression that evaluates to a GeoTools constant (supports the property being specified as a
     * mapbox function). </p>
     *
     * <p>For example, converts {@link LineJoin#BEVEL} to an expression that evaluates to the String value "bevel", or
     * {@link LineJoin#MITER} to an expression that evaluates to "mitre".</p>
     *
     * @param json The json object containing the property
     * @param tag The json key corresponding to the property
     * @param enumeration The Mapbox enumeration that the value should be an instance of
     * @param fallback The fallback enumeration value, if the value is missing or invalid for the provided enumeration.
     * @return A GeoTools expression corresponding to the Mapbox enumeration value, evaluating to a GeoTools constant.
     */
    public <T extends Enum<?>> Expression enumToExpression(JSONObject json, String tag,
                                                           Class<T> enumeration, T fallback) {
        // Function name is inconsistent because "enum" is not a valid function name.
        Object value = json.get(tag);
        if (value == null) {
            return constant(fallback.toString(), enumeration);
        } else if (value instanceof String) {
            String stringVal = (String) value;
            if ("".equals(stringVal.trim())) {
                return constant(fallback.toString(), enumeration);
            }
            try {
                return constant(stringVal, enumeration);
            } catch (Exception e) {
                LOGGER.log(Level.WARNING, "\"" + stringVal + "\" Exception parsing value for enumeration "
                        + enumeration.getSimpleName() + ", falling back to default value.");
                return constant(fallback.toString(), enumeration);
            }
        } else if (value instanceof JSONObject) {
            MBFunction function = new MBFunction(this, (JSONObject) value);
            return function.enumeration(enumeration);
        } else {
            throw new MBFormatException(
                    "Conversion of \"" + tag + "\" value from " + value.getClass().getSimpleName()
                            + " to " + enumeration.getSimpleName() + " not supported.");
        }
    }

