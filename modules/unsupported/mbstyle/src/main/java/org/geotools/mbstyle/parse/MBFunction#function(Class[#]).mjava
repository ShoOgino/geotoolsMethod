    //
    // General Purpose
    //
    @SuppressWarnings("unchecked")
    public Expression function(Class<?> clazz){
        // check for special cases
        if (clazz.isAssignableFrom(Color.class)) {
            return color();
        } else if (clazz.isAssignableFrom(Number.class)) {
            return numeric();
        } else if (clazz.isAssignableFrom(Enum.class)) {
            return enumeration((Class<? extends Enum<?>>) clazz);
        }
        
        Expression input = value();
        FunctionType type = getType();
        if( type == null || type == FunctionType.INTERVAL){
            return generateCategorize(input);
        }
        else if( type == FunctionType.CATEGORICAL){
            return generateRecode(input);
        }
        else if( type == FunctionType.IDENITY){
            return input;
        }
        throw new UnsupportedOperationException("Function unavailable for '"+type+"' function with "+clazz.getSimpleName());
    }

