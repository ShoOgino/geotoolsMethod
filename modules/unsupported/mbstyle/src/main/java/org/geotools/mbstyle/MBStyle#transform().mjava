    /**
     * Transform MBStyle to a GeoTools StyledLayerDescriptor.
     *
     * @return StyledLayerDescriptor
     */
    public StyledLayerDescriptor transform() {
        StyleFactory sf = parse.getStyleFactory();
        StyledLayerDescriptor sld = sf.createStyledLayerDescriptor();

        List<MBLayer> layers = layers();
        if (layers.isEmpty()) {
            throw new MBFormatException("layers empty");
        }

        // TODO: Just track last NamedLayer
        NamedLayer currentNamedLayer = null;
        String currentName = null;
        for (MBLayer layer : layers) {
            List<FeatureTypeStyle> featureTypeStyles = new ArrayList<>();
            MBObjectStops mbObjectStops = new MBObjectStops(layer);

            int layerMaxZoom = layer.getMaxZoom();
            int layerMinZoom = layer.getMinZoom();
            Double layerMinScaleDenominator =
                    layerMaxZoom == Integer.MAX_VALUE
                            ? null
                            : MBObjectStops.zoomLevelToScaleDenominator(
                                    Math.min(25d, layerMaxZoom));
            Double layerMaxScaleDenominator =
                    layerMinZoom == Integer.MIN_VALUE
                            ? null
                            : MBObjectStops.zoomLevelToScaleDenominator(
                                    Math.max(-25d, layerMinZoom));

            if (layer.visibility()) {
                // check for property and zoom functions, if true we will have a layer for each one
                // that becomes a feature type style.
                if (mbObjectStops.ls.zoomPropertyStops) {
                    List<Double> stopLevels = mbObjectStops.stops;
                    int i = 0;
                    for (MBLayer l : mbObjectStops.layersForStop) {
                        double s = stopLevels.get(i);
                        double[] rangeForStopLevel =
                                mbObjectStops.getRangeForStop(s, mbObjectStops.ranges);
                        Double maxScaleDenominator =
                                MBObjectStops.zoomLevelToScaleDenominator(rangeForStopLevel[0]);
                        Double minScaleDenominator = null;
                        if (rangeForStopLevel[1] != -1) {
                            minScaleDenominator =
                                    MBObjectStops.zoomLevelToScaleDenominator(rangeForStopLevel[1]);
                        }

                        featureTypeStyles.addAll(
                                l.transform(this, minScaleDenominator, maxScaleDenominator));
                        i++;
                    }
                } else {
                    featureTypeStyles.addAll(
                            layer.transform(
                                    this, layerMinScaleDenominator, layerMaxScaleDenominator));
                }
            }

            if (!featureTypeStyles.isEmpty()) {

                if (layer instanceof BackgroundMBLayer) {
                    // clear current layer data
                    currentNamedLayer = null;
                    currentName = null;

                    // Background does not use a source; construct a user later with a world extent
                    // inline feature
                    // so that we still have a valid SLD.
                    UserLayer userLayer = sf.createUserLayer();
                    Style style = sf.createStyle();
                    style.featureTypeStyles().addAll(featureTypeStyles);

                    final SimpleFeatureTypeBuilder ftb = new SimpleFeatureTypeBuilder();
                    final PrecisionModel pm = new PrecisionModel(PrecisionModel.FLOATING);
                    final GeometryFactory jtsFactory = new GeometryFactory(pm, 4326);

                    // must include a geometry so that the layer is rendered
                    try {
                        CoordinateReferenceSystem crs = CRS.decode("EPSG:4326");

                        ftb.add("geometry", org.locationtech.jts.geom.Polygon.class, crs);
                        ftb.setCRS(crs);
                        ftb.setDefaultGeometry("geometry");
                        ftb.setName("background");
                        SimpleFeatureType featureType = ftb.buildFeatureType();

                        final DefaultFeatureCollection fc = new DefaultFeatureCollection();
                        fc.add(
                                SimpleFeatureBuilder.build(
                                        featureType,
                                        new Object[] {
                                            jtsFactory.toGeometry(
                                                    new ReferencedEnvelope(CRS.getEnvelope(crs)))
                                        },
                                        "background"));

                        userLayer.setInlineFeatureType(featureType);
                        userLayer.setInlineFeatureDatastore(DataUtilities.dataStore(fc));
                        userLayer.setName("background");

                        userLayer.userStyles().add(style);
                        sld.layers().add(userLayer);
                    } catch (FactoryException e) {
                        throw new MBFormatException("Error constructing background layer", e);
                    }
                } else {
                    String sourceLayer = layer.getSourceLayer();
                    if (sourceLayer == null) {
                        // If source-layer is not set, assume the source just has one layer which
                        // shares its name
                        sourceLayer = layer.getSource();
                    }
                    // Append to existing namedlayer if source name is the same, otherwise create a
                    // new one
                    if (currentNamedLayer == null || !sourceLayer.equals(currentName)) {
                        currentNamedLayer = sf.createNamedLayer();
                        currentName = sourceLayer;
                        currentNamedLayer.setName(currentName);
                        // TODO: When NamedLayer supports description, use layer.getId() for
                        // description

                        Style style = sf.createStyle();
                        currentNamedLayer.styles().add(style);

                        sld.layers().add(currentNamedLayer);
                    }
                    // Add all featureTypeStyles to the first (and only) UserStyle
                    currentNamedLayer.styles().get(0).featureTypeStyles().addAll(featureTypeStyles);
                }
            }
        }

        if (sld.layers().isEmpty()) {
            throw new MBFormatException("No visibile layers");
        }

        sld.setName(getName());
        return sld;
    }

