    /**
     * Used to calculate a numeric value.
     * <p>
     * Example adjusts circle size between 2 and 180 pixels when zooming between levels 12 and 22.
     * <pre><code>'circle-radius': {
     *   'base': 1.75,
     *   'stops': [[12, 2], [22, 180]]
     * }</pre></code>
     * 
     * @param value
     * @return
     */
    private Expression numericExponential(Expression value){
        
        // See FilterFunction_pow: pow( base, exponent ): power
//        Expression base = parse.number(json, "base", null);
//        if( base == null ){
//            base = ff.literal(1.0);
//        }
        double base = Double.valueOf( (String) json.get("base"));
        JSONArray stops = getStops();
        JSONArray entry1 = parse.jsonArray(stops.get(0));
        double stop1 = Double.valueOf((String)entry1.get(0));
        double value1 = Double.valueOf((String)entry1.get(1));
        
      
        JSONArray entry2 = parse.jsonArray(stops.get(1));
        double stop2 = Double.valueOf((String)entry2.get(0));
        double value2 = Double.valueOf((String)entry2.get(1));
        
        double scale = (value2-value1)/(Math.pow(stop2, base) - Math.pow(stop1, base));
        double offset = value1-scale*Math.pow(stop1, base);
        
        return ff.add(
                ff.literal(offset),
                ff.multiply(
                        ff.literal(scale),
                        ff.function("pow", value, ff.literal(base))
                    )
                );
    }

