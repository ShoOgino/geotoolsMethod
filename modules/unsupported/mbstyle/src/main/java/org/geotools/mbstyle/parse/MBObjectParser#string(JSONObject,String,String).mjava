    /**
     * Convert json to Expression string, or a function.
     * 
     * @param json json representation
     * @param fallback default value if json is null
     * @return Expression based on provided json, or literal if json was null.
     * @throws MBFormatException
     */
    public static Expression string(JSONObject json, String tag, String fallback)
            throws MBFormatException {
        if (json == null) {
            return ff.literal(fallback);
        }
        Object obj = json.get(tag);

        if (obj instanceof String) {
            String str = (String) obj;
            return ff.literal(str);
        } else if (obj instanceof Number) {
            Number number = (Number) obj;
            return ff.literal(number.toString());
        } else if (obj instanceof Boolean) {
            Boolean bool = (Boolean) obj;
            return ff.literal(bool.toString());
        } else if (obj instanceof JSONObject) {
            throw new UnsupportedOperationException(
                    "\"" + tag + "\" string from Function not yet supported");
        } else if (obj instanceof JSONArray) {
            throw new MBFormatException("\"" + tag + "\" string from JSONArray not supported");
        } else {
            throw new IllegalArgumentException("json contents invalid, \"" + tag
                    + "\" value limited to String, Number, Boolean or JSONObject but was "
                    + obj.getClass().getSimpleName());
        }
    }

