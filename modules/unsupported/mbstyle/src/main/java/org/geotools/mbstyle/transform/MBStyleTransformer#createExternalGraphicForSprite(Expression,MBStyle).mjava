    /**
     * Takes the name of an icon, and an {@link MBStyle} as a context, and returns an External Graphic referencing the full URL of the image for consumption
     * by the {@link MapboxGraphicFactory}. (The format of the image will be {@link MapboxGraphicFactory#FORMAT}).
     * 
     * @see {@link MapboxGraphicFactory} for more information.
     * 
     * @param iconName The name of the icon inside the spritesheet.
     * @param styleContext The style context in which to resolve the icon name to the full sprite URL (for consumption by the {@link MapboxGraphicFactory}).
     * @return An external graphic with the full URL of the mage for the {@link MapboxGraphicFactory}.
     */
    private ExternalGraphic createExternalGraphicForSprite(Expression iconName, MBStyle styleContext) {
        Expression spriteUrl;
        
        if (styleContext != null && styleContext.getSprite() != null) {
            String spriteBase = styleContext.getSprite().trim() + "?icon=";
            spriteUrl = ff.function("Concatenate", ff.literal(spriteBase),
                    iconName);
        } else {
            spriteUrl = iconName;
        }

        // TODO: (Functions milestone) The icon name can be a function, so evaluating the expression to a string (below) is wrong.
        // Evaluate it for now, because (for now) External Graphics do not take an expression for the URL.
        // TODO: Allow External Graphics to take an expression for the URL
        String spriteUrlStr = spriteUrl.evaluate(null, String.class);

        return sf.createExternalGraphic(spriteUrlStr, MapboxGraphicFactory.FORMAT);

    }

