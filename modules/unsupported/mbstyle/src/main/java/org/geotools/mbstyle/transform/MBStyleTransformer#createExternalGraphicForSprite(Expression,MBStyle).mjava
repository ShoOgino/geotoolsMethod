    /**
     * <p>
     * Takes the name of an icon, and an {@link MBStyle} as a context, and returns an External Graphic referencing the full URL of the image for
     * consumption by the {@link SpriteGraphicFactory}. (The format of the image will be {@link SpriteGraphicFactory#FORMAT}).
     * </p>
     * 
     * @see {@link SpriteGraphicFactory} for more information.
     * 
     * @param iconName The name of the icon inside the spritesheet.
     * @param styleContext The style context in which to resolve the icon name to the full sprite URL (for consumption by the
     *        {@link SpriteGraphicFactory}).
     * @return An external graphic with the full URL of the mage for the {@link SpriteGraphicFactory}.
     */
    private ExternalGraphic createExternalGraphicForSprite(Expression iconName, MBStyle styleContext) {
        String spriteUrl;
        String iconNameCql = ECQL.toCQL(iconName);
        
        /*
         * Note: The provided iconName {@link Expression} will be embedded in the {@link ExternalGraphic}'s URL as a CQL string, in order to support
         * Mapbox functions. The {@link SLDStyleFactory} will transform it back into a proper {@link Expression} before sending it to the {@link
         * SpriteGraphicFactory}.
         */

        if (styleContext != null && styleContext.getSprite() != null) {
            String spriteBase = styleContext.getSprite().trim() + "#";
            spriteUrl = spriteBase + "${" + iconNameCql + "}"; 
        } else {
            spriteUrl = iconNameCql;
        }

        return sf.createExternalGraphic(spriteUrl, SpriteGraphicFactory.FORMAT);
    }

