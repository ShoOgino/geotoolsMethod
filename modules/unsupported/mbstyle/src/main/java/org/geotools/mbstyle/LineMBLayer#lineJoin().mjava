    /**
     * Maps {@link #getLineJoin()} to {@link Stroke#getLineJoin()} values of "mitre", "round", and "bevel" Literals. Defaults to "mitre".
     * <p>
     * Since piecewise constant functions is supported a {@link RecodeFunction} may be generated.
     * 
     * @return Expression for {@link Stroke#getLineJoin()()} use.
     */
    public Expression lineJoin() {
        Object obj = layout.get("line-join");

        if (obj == null) {
            return ff.literal("mitre");
        } else if (obj instanceof String) {
            LineJoin lj = parse.toEnum(layout, "line-join", LineJoin.class, LineJoin.MITER);
            if (lj.equals(LineJoin.MITER)) {
                // miter (MapBox) -> mitre (GeoTools)
                return ff.literal("mitre");
            } else {
                return ff.literal(lj.name().toLowerCase());
            }
        } else if (obj instanceof Number) {
            throw new UnsupportedOperationException("\"line-join\": Number not supported");
        } else if (obj instanceof Boolean) {
            throw new UnsupportedOperationException("\"line-join\": Boolean not supported");
        } else if (obj instanceof JSONObject) {
            throw new UnsupportedOperationException("\"line-join\": Function not yet supported");
        } else if (obj instanceof JSONArray) {
            throw new MBFormatException("\"line-join\": JSONArray not supported");
        } else {
            throw new IllegalArgumentException(
                    "json contents invalid: \"line-join\" value limited to String or JSONObject but was "
                            + obj.getClass().getSimpleName());
        }
    }

