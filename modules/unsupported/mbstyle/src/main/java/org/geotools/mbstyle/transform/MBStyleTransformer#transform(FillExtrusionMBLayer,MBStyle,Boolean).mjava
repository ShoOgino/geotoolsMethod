    List<FeatureTypeStyle> transform(FillExtrusionMBLayer layer, MBStyle styleContext, Boolean useMultipleFeatureTypeStyles) {
        PolygonSymbolizer symbolizer;

        // from fill pattern or fill color
        Fill fill;

        DisplacementImpl displacement = new DisplacementImpl();

        displacement.setDisplacementX(layer.getFillExtrusionBase().doubleValue());
        displacement.setDisplacementY(layer.getFillExtrusionHeight().doubleValue());

        if (layer.getFillExtrusionPattern() != null) {
            // TODO: Fill graphic (with external graphics)
            ExternalGraphic eg = createExternalGraphicForSprite(layer.getFillExtrusionPattern(), styleContext);
            GraphicFill gf = sf.graphicFill(Arrays.asList(eg), layer.fillExtrusionOpacity(), null, null, null, displacement);
            fill = sf.fill(gf, null, null);
        } else {
            fill = sf.fill(null, layer.fillExtrusionColor(), layer.fillExtrusionOpacity());
        }

        // Creating 3D polygons from the fill Extrusion
        // Extrusions require 3 FeatureTypeStyles 2 with offset functions and 1 isometric function
        // Using hard coded values for now.

        // TODO: figure out how to use property values from the data.
        Expression shadows = ff.function("offset", ff.property("geom"),
                ff.literal(3),
                ff.literal(-3));
        Expression sides = ff.function("isometric", ff.property("geom"), ff.literal(5));
        Expression roofs = ff.function("offset", ff.property("geom"),
                ff.literal(0),
                ff.literal(5));

        List<Expression> extrusionExpressions = new ArrayList<>();
        extrusionExpressions.add(shadows);
        extrusionExpressions.add(sides);
        extrusionExpressions.add(roofs);

        List<Symbolizer> symbolizers = new ArrayList<>();
        List<org.opengis.style.Rule> rules = new ArrayList<>();

        for (Expression e : extrusionExpressions) {
            symbolizer = sf.createPolygonSymbolizer();
            symbolizer.setName(layer.getId());
            symbolizer.setGeometry(e);
            symbolizer.setDescription(sf.description(Text.text("fill"),null));
            symbolizer.setUnitOfMeasure(NonSI.PIXEL);
            symbolizer.setStroke(null);
            symbolizer.setFill(fill);
            symbolizer.setDisplacement(displacement);
//            symbolizer = sf.polygonSymbolizer(
//                    layer.getId(),
//                    e,
//                    sf.description(Text.text("fill"),null),
//                    NonSI.PIXEL,
//                    null,
//                    fill,
//                    displacement,
//                    ff.literal(0));
            symbolizers.add(symbolizer);
        }


        // TODO: Is there a better way to select the first geometry?
        List<FeatureTypeStyle> ftsList = new ArrayList<>();
        for (Symbolizer s : symbolizers) {
            FeatureTypeStyle fs = sf.createFeatureTypeStyle();
            Rule rule = sf.rule(
                    layer.getId(),
                    null,
                    null,
                    0.0,
                    Double.POSITIVE_INFINITY,
                    Arrays.asList(s),
                    layer.filter());
            // Set legend graphic to null.
            //TODO: How do other style transformers set a null legend? SLD/SE difference - fix setLegend(null) to empty list.
            rule.setLegendGraphic(new Graphic[0]);
            fs.rules().add(rule);
            ftsList.add(fs);
        }

        return ftsList;
    }

