    /**
     * Used to calculate a numeric value.
     *
     * <p>Example adjusts circle size between 2 and 180 pixels when zooming between levels 12 and
     * 22.
     *
     * <pre><code>'circle-radius': {
     *   'stops': [[12, 2], [22, 180]]
     * }</pre></code>
     *
     * @param input The expression for the function input
     * @return The expression for the output of this function (as an interpolate function)
     */
    private Expression numericGenerateInterpolation(Expression input) {
        List<Expression> parameters = new ArrayList<>();
        parameters.add(input);
        for (Object obj : getStops()) {
            JSONArray entry = parse.jsonArray(obj);
            Object stop = entry.get(0);
            Object value = entry.get(1);
            if (value == null || !(value instanceof Number)) {
                throw new MBFormatException(
                        "Could not convert stop " + stop + " color " + value + " into a numeric");
            }
            parameters.add(ff.literal(stop));
            parameters.add(ff.literal(value));
        }
        parameters.add(ff.literal("numeric"));
        return withFallback(
                ff.function("Interpolate", parameters.toArray(new Expression[parameters.size()])));
    }

