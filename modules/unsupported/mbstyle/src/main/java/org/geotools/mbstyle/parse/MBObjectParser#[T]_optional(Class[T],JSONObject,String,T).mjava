    /**
     * Optional lookup, will return fallback if not available.
     * @param type Type to lookup
     * @param json
     * @param tag
     * @param fallback
     * @return value for the provided tag, or fallback if not available
     * @throws MBFormatException If alue is found and is not the expected type
     */
    public <T> T optional( Class<T> type, JSONObject json, String tag, T fallback ){
        if (json == null) {
            throw new IllegalArgumentException("json required");
        }
        else if (tag == null) {
            throw new IllegalArgumentException("tag required for json access");
        }
        else if (!json.containsKey(tag) || json.get(tag)==null){
            return fallback;
        }
        if (json.containsKey(tag) && type.isInstance(json.get(tag))) {
            return type.cast(json.get(tag));
        } else if (json.containsKey(tag) && !type.isInstance(json.get(tag))) {
            return fallback;
        } else {
                throw new MBFormatException(context.getSimpleName() + " requires \"" + tag + "\" "+type.getSimpleName()+" field");
        }

    }

