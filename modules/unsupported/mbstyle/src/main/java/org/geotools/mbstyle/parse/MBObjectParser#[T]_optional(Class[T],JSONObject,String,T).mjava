    /**
     * Optional lookup, will return fallback if not available.
     * @param type Type to lookup
     * @param json
     * @param tag
     * @param fallback
     * @return value for the provided tag, or fallback if not available
     * @throws MBFormatException If alue is found and is not the expected type
     */
    public <T> T optional( Class<T> type, JSONObject json, String tag, T fallback ){
        if (json == null) {
            throw new IllegalArgumentException("json required");
        }
        else if (tag == null) {
            throw new IllegalArgumentException("tag required for json access");
        }
        else if (!json.containsKey(tag)){
            return fallback;
        }
        else {
            Object value = json.get(tag);
            if (!json.containsKey(tag) || json.get(tag)==null){
                return fallback;
            }
            else if( Number.class.isAssignableFrom(type)){
                T number = Converters.convert(value, type);
                if( number == null){
                    throw new MBFormatException(context.getSimpleName() + " optional \"" + tag + "\" expects "+type.getSimpleName()+" value");
                }
                else {
                    return type.cast(number);
                }
            }
            else if (type.isInstance(value)) {
                return type.cast(value);
            } else {
                throw new MBFormatException(context.getSimpleName() + " optional \"" + tag + "\" expects "+type.getSimpleName()+" value");
            }
        }
    }

