    @Override
    public Object evaluate(Object feature) {
        Color c;
        for (Integer i = 1; i <= this.params.size() - 1; i++) {
            Object evaluation = this.params.get(i).evaluate(feature);
            if (evaluation instanceof Color) {
                return evaluation;
            }
            if (evaluation instanceof JSONArray) {
                JSONArray je = (JSONArray) evaluation;
                if (je.size() == 3 || je.size() == 4) {
                    Long r = (Long) je.get(0);
                    Long g = (Long) je.get(1);
                    Long b = (Long) je.get(2);
                    if (je.size() == 3) {
                        try {
                            c = new Color(r.intValue(), g.intValue(), b.intValue());
                            return c;
                        } catch (Exception e) {
                        }
                    }
                    if (je.size() == 4) {
                        Double a = (Double) je.get(3);
                        Integer alpha = ((Long) Math.round(a * 255)).intValue();
                        try {
                            c = new Color(r.intValue(), g.intValue(), b.intValue(), alpha);
                            return c;
                        } catch (Exception e) {
                        }
                    }
                }
            }
            if (evaluation instanceof String) {
                try {
                    return parse.convertToColor(evaluation.toString());
                } catch (Exception e) {
                }
            }
        }
        throw new IllegalArgumentException("No arguments provided to the \"toColor\" function can be converted to a Color value");
    }

