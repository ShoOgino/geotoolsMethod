    /**
     * @param currentFeature
     * @throws IOException
     * @throws JsonProcessingException
     */
    private void writeFeature(SimpleFeature currentFeature, JsonGenerator g)
            throws IOException, JsonProcessingException {
        Geometry defaultGeometry = (Geometry) currentFeature.getDefaultGeometry();
        if (isEncodeFeatureBounds() && notWritenBbox) {
            final BoundingBox bbox = currentFeature.getDefaultGeometryProperty().getBounds();
            if (bounds == null) {
                this.bounds = new ReferencedEnvelope(bbox);
            } else {
                bounds.expandToInclude((Envelope) bbox);
            }
        }
        g.writeStartObject();
        g.writeStringField("type", "Feature");

        g.writeFieldName("properties");
        g.writeStartObject();
        for (Property p : currentFeature.getProperties()) {
            PropertyType type = p.getType();
            if (type instanceof GeometryType) {
                continue;
            }
            Object value = p.getValue();
            String name = p.getName().getLocalPart();
            if (value == null) {
                g.writeNullField(name);
                continue;
            }
            Class<?> binding = p.getType().getBinding();
            g.writeFieldName(name);
            writeValue(g, value, binding);
        }
        g.writeEndObject();

        // Check CRS and Axis order before writing out to comply with
        // https://tools.ietf.org/html/rfc7946 unless they asked nicely
        if (!encodeFeatureCollectionCRS) {
            defaultGeometry = reprojectGeometry(currentFeature);
        }

        if (defaultGeometry != null) {
            if (isEncodeFeatureBounds()) {
                writeBbox(g, defaultGeometry);
            }
            g.writeFieldName("geometry");
            String gString = mapper.writeValueAsString(defaultGeometry);

            g.writeRawValue(gString);
            g.writeStringField("id", currentFeature.getID());
        } else {
            g.writeNull();
        }
        g.writeEndObject();
        g.flush();
    }

