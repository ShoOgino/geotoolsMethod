    /**
     * Returns statistics about the sample values in the specified image. This is for informative
     * purpose only and may be used when the {@linkplain #getImageMetadata metadata} do not provides
     * useful information about valid minimum and maximum values. Note that this method requires a
     * full scan of image data and may be slow.
     *
     * @param  imageIndex The index of the image to analyze.
     * @return Statistics on the sample values in the given image.
     * @throws IOException if an I/O error occured while reading the sample values.
     */
    public Statistics getStatistics(final int imageIndex) throws IOException {
        final double[] fillValues;
        final GeographicMetadata metadata = getGeographicMetadata(imageIndex);
        if (metadata != null && metadata.getNumBands() >= 1) {
            fillValues = metadata.getBand(0).getNoDataValues();
            // TODO: What should we do with other bands? For now we assume that
            //       every bands have the same fill values.
        } else {
            fillValues = null;
        }
        final Array      array = variable.read();
        final IndexIterator it = array.getIndexIterator();
        final Statistics stats = new Statistics();
        if (fillValues == null || fillValues.length == 0) {
            while (it.hasNext()) {
                stats.add(it.getDoubleNext());
            }
        } else if (fillValues.length == 1) {
            final double fillValue = fillValues[0];
            while (it.hasNext()) {
                final double value = it.getDoubleNext();
                if (value != fillValue) {
                    stats.add(value);
                }
            }
        } else {
scan:       while (it.hasNext()) {
                final double value = it.getDoubleNext();
                if (fillValues != null) {
                    for (int i=0; i<fillValues.length; i++) {
                        if (fillValues[i] == value) {
                            continue scan;
                        }
                    }
                }
                stats.add(value);
            }
        }
        return stats;
    }

