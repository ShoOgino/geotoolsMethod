    /**
     * Adds the specified coordinate axis. This method is invoked recursively
     * by {@link #addCoordinateSystem}.
     *
     * @param axis The axis to add.
     */
    public void addCoordinateAxis(final CoordinateAxis axis) {
        final String name = getName(axis);
        final AxisType type = axis.getAxisType();
        String units = axis.getUnitsString();
        /*
         * Gets the axis direction, taking in account the possible reversal or vertical axis.
         * Note that geographic and projected CRS have the same directions. We can distinguish
         * them either using the ISO CRS type ("geographic" or "projected"), the ISO CS type
         * ("ellipsoidal" or "cartesian") or the units ("degrees" or "m").
         */
        String direction = null;
        AxisDirection directionCode = DIRECTIONS.get(type);
        if (directionCode != null) {
            if (CoordinateAxis.POSITIVE_DOWN.equalsIgnoreCase(axis.getPositive())) {
                directionCode = directionCode.opposite();
            }
            direction = directionCode.name();
            final int offset = units.lastIndexOf('_');
            if (offset >= 0) {
                final String unitsDirection = units.substring(offset + 1).trim();
                final String opposite = directionCode.opposite().name();
                if (unitsDirection.equalsIgnoreCase(opposite)) {
                    warning("addCoordinateAxis", ErrorKeys.INCONSISTENT_AXIS_ORIENTATION_$2,
                            new String[] {name, direction});
                    direction = opposite;
                }
                if (unitsDirection.equalsIgnoreCase(direction)) {
                    units = units.substring(0, offset).trim();
                }
            }
        }
        /*
         * Gets the axis origin. In the particular case of time axis, units are typically
         * written in the form "days since 1990-01-01 00:00:00". We extract the part before
         * "since" as the units and the part after "since" as the date.
         */
        final Axis axisNode = getReferencing().addAxis(name, direction, units);
        if (AxisType.Time.equals(type)) {
            String origin = null;
            final String[] unitsParts = units.split("(?i)\\s+since\\s+");
            if (unitsParts.length == 2) {
                units  = unitsParts[0].trim();
                origin = unitsParts[1].trim();
            } else {
                final Attribute attribute = axis.findAttribute("time_origin");
                if (attribute != null) {
                    origin = attribute.getStringValue();
                }
            }
            Date epoch = null;
            if (origin != null) {
                origin = MetadataAccessor.trimFractionalPart(origin);
                epoch = parse(type, origin, Date.class, "addCoordinateAxis");
            }
            axisNode.setTimeOrigin(epoch);
            axisNode.setUnits(units);
        }
        /*
         * If the axis is not numeric, we can't process any further.
         * If it is, then adds the coordinate and index ranges.
         */
        if (!axis.isNumeric()) {
            return;
        }
        if (axis instanceof CoordinateAxis1D) {
            final CoordinateAxis1D axis1D = (CoordinateAxis1D) axis;
            final ImageGeometry geometry = getGeometry();
            final double[] values = axis1D.getCoordValues();
            geometry.addOrdinates(0, values);
        }
    }

