    /**
     * for a given FeatureSource, makes the following assertions:
     *
     * <ul>
     *   <li>it's not null
     *   <li>.getDataStore() != null
     *   <li>.getDataStore() == the datastore obtained in setUp()
     *   <li>.getSchema() != null
     *   <li>.getBounds() != null
     *   <li>.getBounds().isNull() == false
     *   <li>.getFeatures().getCounr() > 0
     *   <li>.getFeatures().reader().hasNex() == true
     *   <li>.getFeatures().reader().next() != null
     * </ul>
     */
    private void testGetFeatureSource(SimpleFeatureSource fsource) throws IOException {
        assertNotNull(fsource);
        assertNotNull(fsource.getDataStore());
        assertEquals(fsource.getDataStore(), store);
        assertNotNull(fsource.getSchema());

        SimpleFeatureCollection results = fsource.getFeatures();
        int count = results.size();
        assertTrue("size returns " + count, count > 0);
        LOGGER.fine("feature count: " + count);

        Envelope env1;
        Envelope env2;
        env1 = fsource.getBounds();
        assertNotNull(env1);
        assertFalse(env1.isNull());
        env2 = fsource.getBounds(Query.ALL);
        assertNotNull(env2);
        assertFalse(env2.isNull());
        env1 = results.getBounds();
        assertNotNull(env1);
        assertFalse(env1.isNull());

        SimpleFeatureIterator reader = results.features();
        assertTrue(reader.hasNext());

        try {
            assertNotNull(reader.next());
        } catch (NoSuchElementException ex) {
            java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", ex);
            fail(ex.getMessage());
        }

        reader.close();
    }

