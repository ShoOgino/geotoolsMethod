    @Test
    public void testEditVersionedTableTransactionConcurrently() throws Exception {
        Map<String, Serializable> conProps = testData.getConProps();

        final ArcSDEDataStore dataStore1 = (ArcSDEDataStore) DataStoreFinder.getDataStore(conProps);
        final ArcSDEDataStore dataStore2 = (ArcSDEDataStore) DataStoreFinder.getDataStore(conProps);
        assertNotSame(dataStore1, dataStore2);
        assertNotSame(dataStore1.connectionPool, dataStore2.connectionPool);

        final SimpleFeatureStore store1, store2;

        store1 = (SimpleFeatureStore) dataStore1.getFeatureSource(tableName);

        store2 = (SimpleFeatureStore) dataStore2.getFeatureSource(tableName);

        Transaction transaction1 = new DefaultTransaction();
        store1.setTransaction(transaction1);

        Transaction transaction2 = new DefaultTransaction();
        store2.setTransaction(transaction2);

        final SimpleFeatureType schema = store1.getSchema();

        final int initialCount = store1.getCount(Query.ALL);
        assertEquals(0, initialCount);

        final WKTReader reader = new WKTReader();
        Object[] content = new Object[2];
        SimpleFeature feature;
        SimpleFeatureCollection collection;

        // add a feature to store1
        content[0] = "Feature name 1";
        content[1] = reader.read("POINT (10 10)");
        feature = SimpleFeatureBuilder.build(schema, content, (String) null);
        collection = DataUtilities.collection(feature);
        store1.addFeatures(collection);

        // transaction not committed, store1 expects a count of 1, store2 still 0
        assertEquals(1, store1.getCount(Query.ALL));

        assertEquals(0, store2.getCount(Query.ALL));

        // add a feature to store2
        content[0] = "Feature name 2";
        content[1] = reader.read("POINT (20 20)");
        feature = SimpleFeatureBuilder.build(schema, content, (String) null);
        collection = DataUtilities.collection(feature);
        store2.addFeatures(collection);

        // neither transaction committed, both stores expect a count of 1
        assertEquals(1, store1.getCount(Query.ALL));

        assertEquals(1, store2.getCount(Query.ALL));

        // commit t1, store1 still counts 1, store2 counts 2
        transaction1.commit();
        assertEquals(1, store1.getCount(Query.ALL));

        // /assertEquals(2, store2.getCount(Query.ALL));
        assertEquals(1, store2.getCount(Query.ALL));

        // commit t2, overrides the state commited by t1
        transaction2.commit();
        assertEquals(1, store1.getCount(Query.ALL));
        assertEquals(1, store2.getCount(Query.ALL));
    }

