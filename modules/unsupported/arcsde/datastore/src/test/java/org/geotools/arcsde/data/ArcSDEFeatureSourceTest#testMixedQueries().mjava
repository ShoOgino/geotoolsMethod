    /**
     * tests the datastore behavior when fetching data based on mixed queries.
     *
     * <p>"Mixed queries" refers to mixing alphanumeric and geometry based filters, since that is
     * the natural separation of things in the Esri Java API for ArcSDE. This is necessary since
     * mixed queries sometimes are problematic. So this test ensures that:
     *
     * <ul>
     *   <li>A mixed query respects all filters
     *   <li>A mixed query does not fails when getBounds() is performed
     *   <li>A mixed query does not fails when size() is performed
     * </ul>
     */
    @Test
    public void testMixedQueries() throws Exception {
        final int EXPECTED_RESULT_COUNT = 1;
        SimpleFeatureSource fs = store.getFeatureSource(testData.getTempTableName());
        SimpleFeatureType schema = fs.getSchema();
        Filter bboxFilter =
                ff.bbox(
                        schema.getGeometryDescriptor().getLocalName(),
                        -60,
                        -55,
                        -40,
                        -20,
                        schema.getCoordinateReferenceSystem().getName().getCode());
        Filter sqlFilter = CQL.toFilter("INT32_COL < 5");
        LOGGER.fine("Geometry filter: " + bboxFilter);
        LOGGER.fine("SQL filter: " + sqlFilter);

        And mixedFilter = ff.and(sqlFilter, bboxFilter);

        Not not =
                ff.not(
                        ff.id(
                                Collections.singleton(
                                        ff.featureId(testData.getTempTableName() + ".90000"))));

        mixedFilter = ff.and(mixedFilter, not);

        LOGGER.fine("Mixed filter: " + mixedFilter);

        // verify both filter constraints are met
        try {
            testFilter(mixedFilter, fs, EXPECTED_RESULT_COUNT);
        } catch (Exception e) {
            java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e);
            throw e;
        }
        // check that getBounds and size do function
        SimpleFeatureIterator reader = null;
        SimpleFeatureCollection results = fs.getFeatures(mixedFilter);
        Envelope bounds = results.getBounds();
        assertNotNull(bounds);
        LOGGER.fine("results bounds: " + bounds);

        reader = results.features();
        try {
            /*
             * verify that when features are already being fetched, getBounds and size still work
             */
            reader.next();
            bounds = results.getBounds();
            assertNotNull(bounds);
            LOGGER.fine("results bounds when reading: " + bounds);

            int count = results.size();
            assertEquals(EXPECTED_RESULT_COUNT, count);
            LOGGER.fine("wooohoooo...");

        } finally {
            reader.close();
        }
    }

