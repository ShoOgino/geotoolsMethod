            @Override
            public byte[] getImgBandData(
                    int imgWidth, int imgHeight, final int bandN, final int numBands) {
                final int DATA_TYPE_DEPTH = 2;
                // luckily the byte-packed data format in MultiPixelPackedSampleModel is identical
                // to the one-bit-per-pixel format expected by ArcSDE.
                final int dataSize = DATA_TYPE_DEPTH * imgWidth * imgHeight;
                final ByteArrayOutputStream out = new ByteArrayOutputStream(dataSize);
                final DataOutputStream writer = new DataOutputStream(out);

                int pixelValue;
                final int MIN = 0;
                final int MAX = 65535;
                final float step = ((float) MAX - (float) MIN) / (float) imgWidth;
                pixelValue = MIN;
                try {
                    for (int x = 0; x < imgWidth; x++) {
                        for (int y = 0; y < imgHeight; y++) {
                            writer.writeShort(pixelValue);
                        }
                        pixelValue += step;
                    }
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
                final byte[] imgBandData = out.toByteArray();
                return imgBandData;

                // final byte[] imgBandData = new byte[DATA_TYPE_DEPTH * imgWidth * imgHeight];
                // int pixelIndex;
                // int pixelValue;
                // byte ushortByte1;
                // byte ushortByte2;
                // final int MIN = 0;
                // final int MAX = 65535;
                // final float step = ((float) MAX - (float) MIN) / (float) imgWidth;
                // pixelValue = MIN;
                // for (int x = 0; x < imgWidth; x++) {
                // ushortByte1 = (byte) ((pixelValue >>> 8) & 0xFF);
                // ushortByte2 = (byte) ((pixelValue >>> 0) & 0xFF);
                // for (int y = 0; y < imgHeight; y++) {
                // pixelIndex = (x * imgHeight) + y;
                // imgBandData[DATA_TYPE_DEPTH * pixelIndex] = ushortByte1;
                // imgBandData[DATA_TYPE_DEPTH * pixelIndex + 1] = ushortByte2;
                // {
                // int decodedPixelValue = 0;
                // decodedPixelValue |= ushortByte1 & 0xFF;
                // decodedPixelValue <<= 8;
                // decodedPixelValue |= ushortByte2 & 0xFF;
                // if (pixelValue != decodedPixelValue) {
                // throw new IllegalStateException(pixelValue + " != "
                // + decodedPixelValue);
                // }
                // }
                // }
                // pixelValue += step;
                // }
                // return imgBandData;
            }

