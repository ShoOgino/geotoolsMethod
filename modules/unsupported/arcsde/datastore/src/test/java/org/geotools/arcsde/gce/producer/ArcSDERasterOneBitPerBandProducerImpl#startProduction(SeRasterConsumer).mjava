    /**
     * @see
     *     com.esri.sde.sdk.client.SeRasterProducer#startProduction(com.esri.sde.sdk.client.SeRasterConsumer)
     *     Also take a look at {@link SeRasterScanLineProducer} for an (opaque) ESRI supplied
     *     implementation of this functionality that only works with some sort of 8-bit images. Note
     *     that due to some synchronization problems inherent in the SDE api code, the
     *     startProduction() method MUST return before consumer.setScanLines() or
     *     consumer.setRasterTiles() is called. Hence the thread implementation.
     */
    public void startProduction(final SeRasterConsumer consumer) {

        Thread runme;
        if (consumer instanceof SeRasterRenderedImage) {

            runme =
                    new Thread() {
                        @Override
                        public void run() {
                            try {
                                final int imageHeight = sourceImage.getHeight();

                                // for each band...
                                for (int i = 0; i < sourceImage.getData().getNumBands(); i++) {
                                    // luckily the byte-packed data format in
                                    // MultiPixelPackedSampleModel is
                                    // identical
                                    // to the one-bit-per-pixel format expected by ArcSDE.
                                    final byte[] imgBandData =
                                            ((DataBufferByte) sourceImage.getData().getDataBuffer())
                                                    .getData(i);
                                    consumer.setScanLines(imageHeight, imgBandData, null);
                                    consumer.rasterComplete(SeRasterConsumer.SINGLEFRAMEDONE);
                                }
                                consumer.rasterComplete(SeRasterConsumer.STATICIMAGEDONE);
                            } catch (Exception se) {
                                java.util.logging.Logger.getGlobal()
                                        .log(java.util.logging.Level.INFO, "", se);
                                consumer.rasterComplete(SeRasterConsumer.IMAGEERROR);
                            }
                        }
                    };
        } else {
            throw new IllegalArgumentException(
                    "You must set SeRasterAttr.setImportMode(false) to "
                            + "load data using this SeProducer implementation.");
        }

        runme.start();
    }

