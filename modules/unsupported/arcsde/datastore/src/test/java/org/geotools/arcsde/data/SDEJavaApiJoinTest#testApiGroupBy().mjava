    /**
     * Meant as example to be sure we're using the ArcSDE java api correctly Nasty thing about group
     * by is that is seems that we cannot include/use the geometry column :(
     *
     * @throws Exception
     */
    @Test
    public void testApiGroupBy() throws Exception {
        ISession session = store.getSession(Transaction.AUTO_COMMIT);

        SeSqlConstruct sqlConstruct = new SeSqlConstruct();
        String[] tables = {InProcessViewSupportTestData.MASTER, InProcessViewSupportTestData.CHILD};
        sqlConstruct.setTables(tables);
        String where =
                InProcessViewSupportTestData.CHILD
                        + ".MASTER_ID = "
                        + InProcessViewSupportTestData.MASTER
                        + ".ID";
        sqlConstruct.setWhere(where);

        // tricky part is that SHAPE column must always be the last one
        String[] propertyNames = {
            InProcessViewSupportTestData.MASTER + ".ID",
            InProcessViewSupportTestData.CHILD + ".NAME" /*
                                                              * , MASTER + ".SHAPE"
                                                              */
        };

        // final int shapeIndex = 5;
        final int expectedCount = 6;

        final SeQueryInfo queryInfo = new SeQueryInfo();
        queryInfo.setConstruct(sqlConstruct);
        queryInfo.setColumns(propertyNames);

        String groupBy =
                InProcessViewSupportTestData.MASTER
                        + ".ID, "
                        + InProcessViewSupportTestData.CHILD
                        + ".NAME, "
                        + InProcessViewSupportTestData.MASTER
                        + ".SHAPE";

        queryInfo.setByClause(
                " GROUP BY "
                        + groupBy
                        + " ORDER BY "
                        + InProcessViewSupportTestData.CHILD
                        + ".NAME DESC");

        // final int[] expectedShapeIndicators = { SeRow.SE_IS_NOT_NULL_VALUE,
        // // child6
        // // (&&
        // // child7)
        // SeRow.SE_IS_REPEATED_FEATURE, // child5
        // SeRow.SE_IS_REPEATED_FEATURE, // child4
        // SeRow.SE_IS_NOT_NULL_VALUE, // child3
        // SeRow.SE_IS_REPEATED_FEATURE, // child2
        // SeRow.SE_IS_NOT_NULL_VALUE // child1
        // };

        SeQuery query =
                session.issue(
                        new Command<SeQuery>() {
                            @Override
                            public SeQuery execute(ISession session, SeConnection connection)
                                    throws SeException, IOException {
                                SeQuery query = new SeQuery(connection);
                                query.prepareQueryInfo(queryInfo);
                                query.execute();
                                return query;
                            }
                        });
        try {
            SdeRow row = session.fetch(query);
            int count = 0;
            while (row != null) {
                // duplicate shapes are not returned by arcsde.
                // in that case indicator has the value
                // SeRow.SE_IS_REPEATED_FEATURE
                // int indicator = row.getIndicator(shapeIndex);

                // assertEquals("at index " + count,
                // expectedShapeIndicators[count], indicator);

                count++;
                row = session.fetch(query);
            }
            assertEquals(expectedCount, count);
        } catch (Exception e) {
            java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e);
            throw e;
        } finally {
            session.dispose();
        }
    }

