    /**
     * Builds an array of JTS <code>Coordinate</code> instances that's geometrically equals to the
     * <code>SeShape</code> single coordinates array passed as argument.
     *
     * @param coordList array of coordinates of a single shape part to build a <code>Coordinate
     *     </code> from
     * @return a geometrically equal to <code>coordList</code> array of <code>Coordinate</code>
     *     instances
     */
    protected final CoordinateSequence toCoords(
            double[] coordList, final CoordinateSequenceFactory csFact) {

        final int dimension = 2;

        CoordinateSequence cs;

        if (csFact instanceof LiteCoordinateSequenceFactory) {
            cs = ((LiteCoordinateSequenceFactory) csFact).create(coordList, dimension);
        } else {
            final int nCoords = coordList.length / dimension;
            cs = JTS.createCS(csFact, nCoords, dimension);
            for (int coordN = 0; coordN < nCoords; coordN++) {
                cs.setOrdinate(coordN, 0, coordList[dimension * coordN]);
                cs.setOrdinate(coordN, 1, coordList[dimension * coordN + 1]);
            }
        }
        return cs;
    }

