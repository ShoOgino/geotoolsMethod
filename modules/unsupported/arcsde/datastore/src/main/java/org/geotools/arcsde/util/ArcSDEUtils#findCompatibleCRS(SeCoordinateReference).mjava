    /**
     * Gets the coordinate system that will be associated to the {@link GridCoverage}.
     *
     * @return if {@code seCoordRef.getcoordSys()} is {@code null} returns {@link
     *     DefaultEngineeringCRS#CARTESIAN_2D}, otherwise an equivalent CRS from the EPSG database
     *     if found, or a CRS built from the seCoordRef WKT otherwise.
     */
    public static CoordinateReferenceSystem findCompatibleCRS(
            final SeCoordinateReference seCoordRef) throws DataSourceException {

        if (seCoordRef == null) {
            LOGGER.fine(
                    "SeCoordinateReference is null, " + "using DefaultEngineeringCRS.CARTESIAN_2D");
            return DefaultEngineeringCRS.CARTESIAN_2D;
        }

        final PeCoordinateSystem coordSys = seCoordRef.getCoordSys();

        if (coordSys == null) {
            LOGGER.fine(
                    "SeCoordinateReference.getCoordSys() is null, "
                            + "using DefaultEngineeringCRS.CARTESIAN_2D");
            return DefaultEngineeringCRS.CARTESIAN_2D;
        }

        final String peCoordSysName = coordSys.getName();

        CoordinateReferenceSystem crs = PE_CS_TO_EPSG.get(peCoordSysName);

        if (crs == null) {
            Integer epsgCode = findEpsgCode(coordSys);
            try {
                if (epsgCode == null) {
                    LOGGER.warning(
                            "Couldn't determine EPSG code for this raster."
                                    + "  Using SDE's WKT-like coordSysDescription() instead.");
                    crs = CRS.parseWKT(seCoordRef.getCoordSysDescription());
                } else {
                    crs = CRS.decode("EPSG:" + epsgCode);
                }

                PE_CS_TO_EPSG.put(peCoordSysName, crs);

            } catch (FactoryException e) {
                LOGGER.log(Level.SEVERE, "", e);
                throw new DataSourceException(e);
            }
        }

        return crs;
    }

