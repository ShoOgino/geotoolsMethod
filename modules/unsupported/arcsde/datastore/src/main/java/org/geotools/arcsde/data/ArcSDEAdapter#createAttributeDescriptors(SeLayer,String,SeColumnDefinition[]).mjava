    private static List<AttributeDescriptor> createAttributeDescriptors(
            SeLayer sdeLayer, String namespace, SeColumnDefinition[] seColumns)
            throws DataSourceException {
        String attName;
        boolean isNilable;
        int fieldLen;
        Object defValue;
        CoordinateReferenceSystem metadata = null;

        final int nCols = seColumns.length;
        List<AttributeDescriptor> attDescriptors = new ArrayList<>(nCols);

        Class<?> typeClass = null;

        for (SeColumnDefinition colDef : seColumns) {
            // didn't found in the ArcSDE Java API the way of knowing
            // if an SeColumnDefinition is nillable
            attName = colDef.getName();
            isNilable = colDef.allowsNulls();
            defValue = null;
            fieldLen = colDef.getSize();

            final Integer sdeType = Integer.valueOf(colDef.getType());

            if (sdeType.intValue() == SeColumnDefinition.TYPE_SHAPE) {
                CoordinateReferenceSystem crs = null;

                crs = parseCRS(sdeLayer);
                metadata = crs;

                int seShapeType = sdeLayer.getShapeTypes();
                typeClass = getGeometryTypeFromLayerMask(seShapeType);
                isNilable = (seShapeType & SeLayer.SE_NIL_TYPE_MASK) == SeLayer.SE_NIL_TYPE_MASK;
                defValue = isNilable ? null : ArcSDEGeometryBuilder.defaultValueFor(typeClass);
            } else {
                typeClass = getJavaBinding(sdeType);
                if (typeClass == null) {
                    LOGGER.info(
                            "Found an unsupported ArcSDE data type: "
                                    + sdeType
                                    + " for column "
                                    + attName
                                    + ". Ignoring it.");
                    continue;
                }
                // @TODO: add restrictions once the Restrictions utility methods
                // are implemented
                // Set restrictions = Restrictions.createLength(name, typeClass,
                // fieldLen);
            }
            final int rowIdType = colDef.getRowIdType();
            if (rowIdType == SeRegistration.SE_REGISTRATION_ROW_ID_COLUMN_TYPE_SDE) {
                continue; // skip over things we cannot edit modify or otherwise treat as
                // attributes
            }
            AttributeTypeBuilder b = new AttributeTypeBuilder();
            // call setDefaultValue before setBinding
            b.setDefaultValue(defValue);
            b.setBinding(typeClass);
            b.setName(attName);
            b.setNillable(isNilable);
            if (fieldLen > 0) {
                b.setLength(fieldLen);
            }
            // only set CRS if its a geometry type, otherwise
            // AttributeTypeBuilder
            // creates a GeometryAttributeType disregarding the class binding
            if (Geometry.class.isAssignableFrom(typeClass)) {
                b.setCRS(metadata);
            }

            AttributeDescriptor buildDescriptor = b.buildDescriptor(attName);
            attDescriptors.add(buildDescriptor);
        }

        return attDescriptors;
    }

