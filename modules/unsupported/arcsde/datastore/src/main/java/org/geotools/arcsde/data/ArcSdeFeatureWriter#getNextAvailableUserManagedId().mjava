    /**
     * Called when the layer row id is user managed to ask ArcSDE for the next available ID.
     *
     * @return a new available id if possible, {@code null} if thre seems not to be a sequence for
     *     the table
     */
    private Number getNextAvailableUserManagedId() throws IOException, SeException {

        // TODO: refactor, this is expensive to do for each row to insert
        // TODO: refactor to some sort of strategy object like done for
        // FIDReader
        final SeLayer layer = getLayer();
        final SeTable table = getTable();
        // ArcSDE JavaDoc only says: "Returns a range of row id values"
        // http://edndoc.esri.com/arcsde/9.1/java_api/docs/com/esri/sde/sdk/client/setable.html#getIds
        // (int)
        /*
         * I've checked empirically it is to return a range of available ids. And also found it
         * works for layers but not for registered tables with non spatial layer.. sigh..
         */
        final SeTableIdRange ids = layer == null ? null : table.getIds(1);
        if (ids == null) {
            return null;
        }
        final SeObjectId startId = ids.getStartId();
        final long id = startId.longValue();
        final Long newId = Long.valueOf(id);

        final AttributeDescriptor rowIdAtt = featureType.getDescriptor(fidReader.getFidColumn());
        final Class<?> binding = rowIdAtt.getType().getBinding();
        final Number userFidValue;
        if (Long.class == binding) {
            userFidValue = newId;
        } else if (Integer.class == binding) {
            userFidValue = Integer.valueOf(newId.intValue());
        } else if (Double.class == binding) {
            userFidValue = Double.valueOf(newId.doubleValue());
        } else if (Float.class == binding) {
            userFidValue = Float.valueOf(newId.floatValue());
        } else {
            throw new IllegalArgumentException(
                    "Can't handle a user managed row id of type " + binding);
        }

        return userFidValue;
    }

