    /**
     * Sets the SeRow property values by index, taking the index from the mutableColumns keys and
     * the values from <code>feature</code>, using the mutableColumns values to get the feature
     * properties by name.
     *
     * <p>This method is intended to be called from inside a {@link Command#execute(Session,
     * SeConnection)} method
     *
     * @param feature the Feature where to get the property values from
     * @param seCoordRef
     * @param mutableColumns
     * @param row
     * @throws SeException
     * @throws IOException
     */
    private static void setRowProperties(
            final SimpleFeature feature,
            final SeCoordinateReference seCoordRef,
            Map<Integer, String> mutableColumns,
            final SeRow row)
            throws SeException, IOException {

        // Now set the values for the new row here...
        int seRowIndex;
        String attName;
        Object value;
        for (Map.Entry<Integer, String> entry : mutableColumns.entrySet()) {
            seRowIndex = entry.getKey().intValue();
            attName = entry.getValue();
            value = feature.getAttribute(attName);
            setRowValue(row, seRowIndex, value, seCoordRef, attName);
        }
    }

