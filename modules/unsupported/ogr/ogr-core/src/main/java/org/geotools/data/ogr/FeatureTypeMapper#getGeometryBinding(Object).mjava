    /**
     * Returns the JTS geometry type equivalent to the layer native one
     * 
     * @param definition
     * @return
     * @throws IOException
     */
    private Class<? extends Geometry> getGeometryBinding(Object definition) throws IOException {
        long value = ogr.LayerGetGeometryType(definition);
        
        // for line and polygon we return multi in any case since OGR will declare simple for
        // multigeom
        // anyways and then return simple or multi in the actual geoemtries depending on
        // what it finds
        if (value == ogr.GetPointType()
                || value == ogr.GetPoint25DType()) {
            return Point.class;
        } else if (value == ogr.GetLinearRingType()) {
            return LinearRing.class;
        } else if (value == ogr.GetLineStringType()
                || value == ogr.GetLineString25DType()
                || value == ogr.GetMultiLineStringType()
                || value == ogr.GetMultiLineString25DType()) {
            return MultiLineString.class;
        } else if (value == ogr.GetPolygonType()
                || value == ogr.GetPolygon25DType()
                || value == ogr.GetMultiPolygonType()
                || value == ogr.GetMultiPolygon25DType()) {
            return MultiPolygon.class;
        } else if (value == ogr.GetGeometryCollectionType()
                || value == ogr.GetGeometryCollection25DType()) {
            return GeometryCollection.class;
        } else if (value == ogr.GetGeometryNoneType()) {
            return null;
        } else if (value == ogr.GetGeometryUnknownType()) {
            return Geometry.class;
        } else {
            throw new IOException("Unknown geometry type: " + value);
        }
    }

