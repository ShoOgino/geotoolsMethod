    /**
     * Reads the current feature's specified field using the most appropriate OGR field extraction
     * method
     * 
     * @param ad
     * @return
     */
    Object getOgrField(AttributeDescriptor ad, org.gdal.ogr.Feature ogrFeature) throws IOException {
        String name = ad.getLocalName();
        Class clazz = ad.getType().getBinding();

        // check for null fields
        if (!ogrFeature.IsFieldSet(name))
            return null;

        // hum, ok try and parse it
        if (clazz.equals(String.class)) {
            return ogrFeature.GetFieldAsString(name);
        } else if (clazz.equals(Integer.class)) {
            return new Integer(ogrFeature.GetFieldAsInteger(name));
        } else if (clazz.equals(Double.class)) {
            return new Double(ogrFeature.GetFieldAsDouble(name));
        } else if (clazz.equals(Float.class)) {
            return new Float(ogrFeature.GetFieldAsDouble(name));
        } else if (clazz.equals(Integer.class)) {
            return new Integer(ogrFeature.GetFieldAsInteger(name));
        } else if (clazz.equals(java.util.Date.class)) {
            String date = ogrFeature.GetFieldAsString(name);
            if (date == null || date.trim().equals(""))
                return null;
            int ogrType = ogrFeature.GetFieldType(name);
            try {
                if (ogrType == ogr.OFTDateTime)
                    return dateTimeFormat.parse(date);
                else if (ogrType == ogr.OFTDate)
                    return dateFormat.parse(date);
                else if (ogrType == ogr.OFTTime)
                    return timeFormat.parse(date);
            } catch (java.text.ParseException e) {
                throw new DataSourceException("Could not parse date value", e);
            }
            throw new IOException("Date attribute, but field type is not compatible: " + ogrType);
        } else {
            throw new IllegalArgumentException("Don't know how to read " + clazz.getName()
                    + " fields");
        }
    }

