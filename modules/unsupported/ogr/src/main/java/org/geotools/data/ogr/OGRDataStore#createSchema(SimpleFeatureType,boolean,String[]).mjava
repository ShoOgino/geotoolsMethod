    /**
     * Creates a new OGR layer with provided schema and options
     * 
     * @param schema the geotools schema
     * @param approximateFields if true, OGR will try to create fields that are approximations of
     *        the required ones when an exact match cannt be provided
     * @param options OGR data source/layer creation options
     * @throws IOException
     */
    public void createSchema(SimpleFeatureType schema, boolean approximateFields, String[] options)
            throws IOException {
        Pointer dataSource = null;
        Pointer layer = null;

        try {
            // either open datasource, or try creating one
            Pointer<Pointer<Byte>> optionsPointer = null;
            if (options != null && options.length > 0) {
                optionsPointer = pointerToCStrings(options);
            }
            try {
                dataSource = openOGRDataSource(true);
            } catch (IOException e) {
                if (ogrDriver != null) {
                    Pointer driver = OGRGetDriverByName(pointerToCString(ogrDriver));
                    dataSource = OGR_Dr_CreateDataSource(driver, pointerToCString(ogrSourceName),
                            optionsPointer);
                    driver.release();

                    if (dataSource == null)
                        throw new IOException("Could not create OGR data source with driver "
                                + ogrDriver + " and options " + options);
                } else {
                    throw new DataSourceException("Driver not provided, and could not "
                            + "open data source neither");
                }
            }

            FeatureTypeMapper mapper = new FeatureTypeMapper();

            // get the spatial reference corresponding to the default geometry
            GeometryDescriptor geomType = schema.getGeometryDescriptor();
            ValuedEnum<OGRwkbGeometryType> ogrGeomType = mapper.getOGRGeometryType(geomType);
            Pointer spatialReference = mapper.getSpatialReference(geomType
                    .getCoordinateReferenceSystem());

            // create the layer
            layer = OGR_DS_CreateLayer(dataSource, pointerToCString(schema.getTypeName()),
                    spatialReference, ogrGeomType, optionsPointer);
            if (layer == null) {
                throw new DataSourceException("Could not create the OGR layer: "
                        + OGRUtils.getCString(CPLGetLastErrorMsg()));
            }

            // create fields
            for (int i = 0; i < schema.getAttributeCount(); i++) {
                AttributeDescriptor ad = schema.getDescriptor(i);
                if (ad == schema.getGeometryDescriptor())
                    continue;

                Pointer fieldDefinition = mapper.getOGRFieldDefinition(ad);
                OGR_L_CreateField(layer, fieldDefinition, approximateFields ? 1 : 0);
            }
        } finally {
            OGRUtils.releaseLayer(layer);
            OGRUtils.releaseDataSource(dataSource);
        }
    }

