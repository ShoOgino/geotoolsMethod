    /**
     * Creates a new OGR layer with provided schema and options
     * 
     * @param schema
     *            the geotools schema
     * @param approximateFields
     *            if true, OGR will try to create fields that are approximations of the required
     *            ones when an exact match cannt be provided
     * @param options
     *            OGR data source/layer creation options
     * @throws IOException
     */
    public void createSchema(SimpleFeatureType schema, boolean approximateFields, String[] options)
            throws IOException {
        DataSource ds = null;
        Layer l = null;

        try {
            // either open datasource, or try creating one
            Vector optVector = options != null ? new Vector(Arrays.asList(options)) : null;
            try {
                ds = getOGRDataSource(TRUE);
            } catch (IOException e) {
                if (ogrDriverName != null) {
                    Driver d = ogr.GetDriverByName(ogrDriverName);
                    ds = d.CreateDataSource(ogrSourceName, optVector);
                    d.delete();

                    if (ds == null)
                        throw new IOException("Could not create OGR data source with driver "
                                + ogrDriverName + " and options " + optVector);
                } else {
                    throw new DataSourceException("Driver not provided, and could not "
                            + "open data source neither");
                }
            }

            // get the spatial reference corresponding to the default geometry
            GeometryDescriptor geomType = schema.getGeometryDescriptor();
            int ogrGeomType = getOGRGeometryType(geomType);
            SpatialReference sr = null;
            if (geomType.getCoordinateReferenceSystem() != null) {
                // use tostring to get a lenient wkt translation
                String wkt = geomType.getCoordinateReferenceSystem().toString();
                sr = new SpatialReference(null);
                if (sr.ImportFromWkt(wkt) != 0) {
                    sr = null;
                    LOGGER.warning("OGR could not parse the geometry WKT," + " detailed error is: "
                            + gdal.GetLastErrorMsg() + "\n" + "WKT was: " + wkt);
                }
            }

            // create the layer
            l = ds.CreateLayer(schema.getTypeName(), sr, ogrGeomType, optVector);
            if (l == null) {
                throw new DataSourceException("Could not create the OGR layer: "
                        + gdal.GetLastErrorMsg());
            }

            // create fields
            for (int i = 0; i < schema.getAttributeCount(); i++) {
                AttributeDescriptor ad = schema.getDescriptor(i);
                if (ad == schema.getGeometryDescriptor())
                    continue;

                FieldDefn definition = getOGRFieldDefinition(ad);
                l.CreateField(definition, approximateFields ? TRUE : FALSE);
            }
        } finally {
            if (l != null) {
                l.delete();
            }
            if (ds != null)
                ds.delete();
        }
    }

