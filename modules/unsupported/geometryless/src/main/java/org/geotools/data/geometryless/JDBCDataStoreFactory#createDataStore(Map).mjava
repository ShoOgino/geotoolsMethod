    /**
     * Construct a postgis data store using the params.
     *
     * @param params The full set of information needed to construct a live
     *        data source.  Should have  dbtype equal to postgis, as well as
     *        host, user, passwd, database, and table.
     *
     * @return The created DataSource, this may be null if the required
     *         resource was not found or if insufficent parameters were given.
     *         Note that canProcess() should have returned false if the
     *         problem is to do with insuficent parameters.
     *
     * @throws IOException See DataSourceException
     * @throws DataSourceException Thrown if there were any problems creating
     *         or connecting the datasource.
     */
    public DataStore createDataStore(Map params) throws IOException {
        if (canProcess(params)) {
        } else {
            throw new IOException("The parameteres map isn't correct!!");
        }

 //       String host = (String) HOST.lookUp(params);
        String user = (String) USER.lookUp(params);
        String passwd = (String) PASSWD.lookUp(params);
 //       String port = (String) PORT.lookUp(params);
 //       String database = (String) DATABASE.lookUp(params);
        Charset charSet = (Charset) CHARSET.lookUp(params);
        String schema = (String) SCHEMA.lookUp( params ); 

        String namespace = (String) NAMESPACE.lookUp(params);
        String driver =   (String) DRIVER.lookUp(params);
        String urlprefix =   (String) URLPREFIX.lookUp(params);

        // Try processing params first so we can get an error message
        // back to the user
        //
        if (!canProcess(params)) {
            return null;
        }
/*
 * 
 *   All this stuff replaced with the  DataSource implementation
 *   
 *   which is basically exactly the same pattern here...
 *  
 *   JDBCConnectionFactory connFact = new JDBCConnectionFactory( urlprefix, driver );

 //  MySQLConnectionFactory connFact = new MySQLConnectionFactory(host,            Integer.parseInt(port), database);
           
        connFact.setLogin(user, passwd);

        if (charSet != null) {
            connFact.setCharSet(charSet.name());
        }

        ConnectionPool pool;

        try {
            pool = connFact.getConnectionPool();
            
            java.sql.Connection c = pool.getConnection();
            if( c == null )
            {
          	throw new SQLException("Pool created but connection null ");
            }
            else {
             	c.close();
            }
        } catch (SQLException e) {
            throw new DataSourceException("Could not create connection", e);
        }
*/

        DataSource dataSource = DataSourceUtil.buildDefaultDataSource(urlprefix, driver, user, passwd, null);
        
        JDBCDataStore dataStore;
        if (namespace != null) {
            dataStore = new JDBCDataStore(dataSource, schema, namespace);
        } else {
            dataStore = new JDBCDataStore(dataSource);
        }
        
        ViewRegisteringFactoryHelper.registerSqlViews(dataStore, params);
        
        return dataStore;
    }

