    /**
     * Construct a postgis data store using the params.
     *
     * @param params The full set of information needed to construct a live
     *        data source.  Should have  dbtype equal to BBOX, as well as
     *        host, user, passwd, database, and table.
     *
     * @return The created DataSource, this may be null if the required
     *         resource was not found or if insufficent parameters were given.
     *         Note that canProcess() should have returned false if the
     *         problem is to do with insuficent parameters.
     *
     * @throws IOException See DataSourceException
     * @throws DataSourceException Thrown if there were any problems creating
     *         or connecting the datasource.
     */
    public DataStore createDataStore(Map params) throws IOException {
        if (canProcess(params)) {
        } else {
            throw new IOException("The parameteres map isn't correct!!");
        }

//        String host = (String) HOST.lookUp(params);
        String user = (String) USER.lookUp(params);
        String passwd = (String) PASSWD.lookUp(params);
//        String port = (String) PORT.lookUp(params);
 //       String database = (String) DATABASE.lookUp(params);
        String schema = (String) SCHEMA.lookUp(params);
                Charset charSet = (Charset) CHARSET.lookUp(params);
        String namespace = (String) NAMESPACE.lookUp(params);
        String driver =   (String) DRIVER.lookUp(params);
        String urlprefix =   (String) URLPREFIX.lookUp(params);
      String minxcolumn =   (String) MINXCOLUMN.lookUp(params);
      String minycolumn =   (String) MINYCOLUMN.lookUp(params);
      String maxxcolumn =   (String) MAXXCOLUMN.lookUp(params);
      String maxycolumn =   (String) MAXYCOLUMN.lookUp(params);
      String geom_name = (String) GEOMNAME.lookUp(params);

        // Try processing params first so we can get an error message
        // back to the user
        //
        if (!canProcess(params)) {
            return null;
        }
        /*
         * 
         *    JDBCConnectionFactory connFact = new JDBCConnectionFactory( urlprefix, driver  );

 //  MySQLConnectionFactory connFact = new MySQLConnectionFactory(host,            Integer.parseInt(port), database);
           
        connFact.setLogin(user, passwd);

        if (charSet != null) {
            connFact.setCharSet(charSet.name());
        }

        ConnectionPool pool;

        try {
            pool = connFact.getConnectionPool();
            
            java.sql.Connection c = pool.getConnection();
            if( c == null )
            {
          	throw new SQLException("Pool created but connection null ");
            }
            else {
             	c.close();
            }
        } catch (SQLException e) {
            throw new DataSourceException("Could not create connection", e);
        }
*/
        DataSource dataSource = DataSourceUtil.buildDefaultDataSource(urlprefix, driver, user, passwd, null);
        
	if (geom_name == null) {
	    geom_name = GEOM_NAME_DEFAULT;
	}
        if (namespace != null) {
            return new BBOXDataStore(dataSource, schema, namespace, minxcolumn,
                                            minycolumn,maxxcolumn,maxycolumn, geom_name);
        } else {
            return new BBOXDataStore(dataSource);
        }
    }

