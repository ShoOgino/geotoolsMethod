	/**
	 * Parse the driver URL and extract the properties.
	 * 
	 * @param url
	 *            The URL to parse.
	 * @param info
	 *            Any existing properties already loaded in a Properties object.
	 * @return The URL properties as a <code>Properties</code> object.
	 */
	private static Properties parseURL(String url, Properties info) {
		Properties props = new Properties();

		// Take local copy of existing properties
		for (Enumeration e = info.keys(); e.hasMoreElements();) {
			String key = (String) e.nextElement();
			String value = info.getProperty(key);

			if (value != null) {
				props.setProperty(key.toUpperCase(), value);
			}
		}

		StringBuffer token = new StringBuffer(128);
		int pos = 0;

		pos = nextToken(url, pos, token);
		// LOGGER.fine(token.toString());

		if (!token.toString().equalsIgnoreCase("jdbc")) {
			LOGGER.severe("expected token jdbc in urlprefix " + url);
			return null; // jdbc: missing
		}

		pos = nextToken(url, pos, token); // Skip jtds
		// LOGGER.fine(token.toString());

		if (!token.toString().equalsIgnoreCase("postgresql")) {
			LOGGER.severe("expected token postgresql in urlprefix " + url);			
			return null; // postgresql: missing
		}

		pos = nextToken(url, pos, token); // Null token between : and //
		if (token.length() > 0) {
			LOGGER.severe("There should be no token between : and // in urlprefix " + url);			
			return null; // There should not be one!
		}

		pos = nextToken(url, pos, token); // Get server name
		// LOGGER.fine(token.toString());

		String host = token.toString();
		if (host == null || host.length() == 0) {
			LOGGER.severe("Missing server (host) name in urlprefix " + url);			
			return null; // Server name missing
		}
		props.setProperty("ServerName", host);
		
		if (url.charAt(pos - 1) == ':' && pos < url.length()) {
			pos = nextToken(url, pos, token); // Get port number
			// LOGGER.fine(token.toString());			

			try {
				int port = Integer.parseInt(token.toString());
				props.setProperty("PortNumber", Integer
						.toString(port));
			} catch (NumberFormatException e) {
				LOGGER.severe("Bad port number in urlprefix " + url);			
				return null; // Bad port number
			}
		}

		if (url.charAt(pos - 1) == '/' && pos < url.length()) {
			pos = nextToken(url, pos, token); // Get database name
			// LOGGER.fine(token.toString());			
			props.setProperty("DatabaseName", token.toString());
		}

		//
		// Process any additional properties in URL
		//
		
		// but we ignore anyway - pb
/*		
		while (url.charAt(pos - 1) == ';' && pos < url.length()) {
			pos = nextToken(url, pos, token);
			String tmp = token.toString();
			int index = tmp.indexOf('=');

			if (index > 0 && index < tmp.length() - 1) {
				props.setProperty(tmp.substring(0, index).toUpperCase(), tmp
						.substring(index + 1));
			} else {
				props.setProperty(tmp.toUpperCase(), "");
			}
		}
*/			
		return props;
	}

