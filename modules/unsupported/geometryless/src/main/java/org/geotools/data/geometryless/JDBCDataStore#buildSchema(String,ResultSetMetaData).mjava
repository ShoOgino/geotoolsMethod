    /**
     * Creates a FeatureType from a <code>java.sql.ResultSetMetaData</code>
     * object, obtained from the execution of a SQL query configured as the
     * source of an in-process view.
     * 
     * @param typeName
     * @param rsmd
     * @return
     * @throws IOException
     * @throws SQLException
     */
    private SimpleFeatureType buildSchema(String typeName, ResultSetMetaData rsmd) throws IOException,
            SQLException {
        SimpleFeatureType viewType;

        final int NAME_COLUMN = 4;
        final int TYPE_NAME = 6;

        ResultSet tableInfo = null;
        FIDMapper mapper = new NullFIDMapper();
        // the mapping from resultset medatada to the
        // resultset schema expected by JDBCDataStore
        tableInfo = new RsMd2DbMdResultSet(rsmd);

        try {
            List attributeDescriptors = new ArrayList();

            boolean tableInfoFound = false;

            while (tableInfo.next()) {
                tableInfoFound = true;
                try {
                    String columnName = tableInfo.getString(NAME_COLUMN);

                    if (!mapper.returnFIDColumnsAsAttributes()) {
                        boolean isPresent = false;

                        for (int i = 0; i < mapper.getColumnCount(); i++) {
                            if (columnName.equalsIgnoreCase(mapper.getColumnName(i))) {
                                isPresent = true;
                                break;
                            }
                        }
                        if (isPresent) {
                            continue;
                        }
                    }

                    // AttributeDescriptor attribute =
                    // buildAttributeDescriptor(tableInfo);
                    AttributeDescriptor attribute = buildAttributeType(tableInfo);

                    if (attribute != null) {
                        attributeDescriptors.add(attribute);
                    } else {
                        LOGGER.finest("Unknown SQL Type: (may be consumed) "
                                + tableInfo.getString(TYPE_NAME));
                    }
                } catch (DataSourceException dse) {
                    String msg = "Error building attribute type. The column will be ignored";
                    LOGGER.log(Level.WARNING, msg, dse);
                }
            }

            if (!tableInfoFound) {
                throw new SchemaNotFoundException(typeName);

            }

            URI namespace = getNameSpace();
            String ns = null;
            if (namespace != null) {
                ns = namespace.toString();
            }

            // AttributeName ftName = new AttributeName(ns, typeName);
            // viewType = (FeatureType)tf.createFeatureType(ftName, schema,
            // null);

            AttributeDescriptor[] types = (AttributeDescriptor[]) attributeDescriptors
                    .toArray(new AttributeDescriptor[0]);
            
            SimpleFeatureTypeBuilder tb = new SimpleFeatureTypeBuilder();
            tb.setName( typeName );
            tb.setNamespaceURI( namespace );
            tb.addAll( types );
            
            viewType = tb.buildFeatureType();
            return viewType;

        } catch (Exception sqlException) {
            throw new DataSourceException("SQL Error building FeatureType for " + typeName + " "
                    + sqlException.getMessage(), sqlException);
        } finally {
            JDBCUtils.close(tableInfo);
        }
    }

