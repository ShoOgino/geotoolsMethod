    /**
     * Constructs an AttributeType from a row in a ResultSet. The ResultSet
     * contains the information retrieved by a call to  getColumns() on the
     * DatabaseMetaData object.  This information  can be used to construct an
     * Attribute Type.
     * 
     * <p>
     * In addition to standard SQL types, this method identifies MySQL 4.1's geometric
     * datatypes and creates attribute types accordingly.  This happens when the
     * datatype, identified by column 5 of the ResultSet parameter, is equal to
     * java.sql.Types.OTHER.  If a Types.OTHER ends up not being geometric, this
     * method simply calls the parent class's buildAttributeType method to do something
     * with it.
     * </p>
     * 
     * <p>
     * Note: Overriding methods must never move the current row pointer in the
     * result set.
     * </p>
     *
     * @param rs The ResultSet containing the result of a
     *        DatabaseMetaData.getColumns call.
     *
     * @return The AttributeType built from the ResultSet.
     *
     * @throws SQLException If an error occurs processing the ResultSet.
     * @throws DataSourceException Provided for overriding classes to wrap
     *         exceptions caused by other operations they may perform to
     *         determine additional types.  This will only be thrown by the
     *         default implementation if a type is present that is not present
     *         in the TYPE_MAPPINGS.
     */
    protected AttributeDescriptor buildAttributeType(ResultSet rs) throws IOException {
        final int COLUMN_NAME = 4;
        final int DATA_TYPE = 5;
        final int TYPE_NAME = 6;

        try {
            int dataType = rs.getInt(DATA_TYPE);
	    String colName = rs.getString(COLUMN_NAME);
	    LOGGER.fine("dataType: " + dataType + " " + rs.getString(TYPE_NAME) + " " + colName );
	    Class type = (Class) TYPE_MAPPINGS.get(new Integer(dataType));

	     //This should be improved - first should probably check for 
	     //presence of both the x and y columns, only create the geometry
	     //if both are found, instead of just ignoring the y - right now
	     //the y could just not exist.  And then if either do not exist
	     //an exception should be thrown.
	     //Also, currently the name of the geometry is hard coded - 
	     //do we want it to be user configurable?  ch
	     if (colName.equals(XMinColumnName)) {
		 //do type checking here, during config, not during reading.
		 if (Number.class.isAssignableFrom(type)) {
		     return new AttributeTypeBuilder().binding(Polygon.class)
		         .buildDescriptor(geomName);
		 } else {
		     String excMesg = "Specified MIN X column of " + colName + 
			 " of type: " + type + ", can not be used as BBOX element";
		     throw new DataSourceException(excMesg);
		 }
      
	     } else if (colName.equals(YMinColumnName)) {
		 if (Number.class.isAssignableFrom(type)) {
		     return null;
		 } else {
		     String excMesg = "Specified Y column of " + colName + 
			 " of type: " + type + ", can not be used as as BBOX element";
		     throw new DataSourceException(excMesg);
		 }
	     } else if (colName.equals(XMaxColumnName)) {
		 if (Number.class.isAssignableFrom(type)) {
		     return null;
		 } else {
		     String excMesg = "Specified X column of " + colName + 
			 " of type: " + type + ", can not be used as as BBOX element";
		     throw new DataSourceException(excMesg);
		 }
	     }else if (colName.equals(YMaxColumnName)) {
		 if (Number.class.isAssignableFrom(type)) {
		     return null;
		 } else {
		     String excMesg = "Specified Y column of " + colName + 
			 " of type: " + type + ", can not be used as as BBOX element";
		     throw new DataSourceException(excMesg);
		 }
	     } else {
		 return super.buildAttributeType(rs);
            }
        } catch (SQLException e) {
            throw new IOException("SQL exception occurred: " + e.getMessage());
        }
    }

