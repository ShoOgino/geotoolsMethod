    /**
     * A utility method for creating a JDBCDataStore from database connection
     * parameters, using the default port (3306) for MySQL.
     * 
     * @param host
     *            the host name or IP address of the database server
     * @param schema
     *            the name of the database instance
     * @param username
     *            the database username
     * @param password
     *            the password corresponding to <code>username</code>
     * @return a JDBCDataStore for the specified parameters
     * 
     * public static JDBCDataStore getInstance( String host, String schema,
     * String username, String password) throws IOException, SQLException {
     * return getInstance(host, 3306, schema, username, password); }
     */
    /**
     * Utility method for creating a JDBCDataStore from database connection
     * parameters.
     * 
     * @param host
     *            the host name or IP address of the database server
     * @param port
     *            the port number of the database
     * @param schema
     *            the name of the database instance
     * @param username
     *            the database username
     * @param password
     *            the password corresponding to <code>username</code>
     * @throws IOException
     *             if the JDBCDataStore cannot be created because the database
     *             cannot be properly accessed
     * @throws SQLException
     *             if a MySQL connection pool cannot be established
     * 
     * public static JDBCDataStore getInstance( String host, int port, String
     * schema, String username, String password) throws IOException,
     * SQLException { return new JDBCDataStore( new MySQLConnectionFactory(host,
     * port, schema).getConnectionPool(username, password)); }
     */
    /**
     * Utility method for getting a FeatureWriter for modifying existing
     * features, using no feature filtering and auto-committing. Not used for
     * adding new features.
     * 
     * @param typeName
     *            the feature type name (the table name)
     * @return a FeatureWriter for modifying existing features
     * @throws IOException
     *             if the database cannot be properly accessed
     */
    public FeatureWriter<SimpleFeatureType, SimpleFeature> getFeatureWriter(String typeName) throws IOException {
        return getFeatureWriter(typeName, Filter.INCLUDE, Transaction.AUTO_COMMIT);
    }

