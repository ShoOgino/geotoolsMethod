    /**
     * Produces the select information required.
     * 
     * <p>
     * The featureType, if known, is always requested.
     * </p>
     * 
     * <p>
     * sql: <code>featureID (,attributeColumn)</code>
     * </p>
     * 
     * <p>
     * We may need to provide AttributeReaders with a hook so they can request a
     * wrapper function.
     * </p>
     * 
     * @param sql
     * @param mapper
     * @param attributes
     */
    public void sqlColumns(StringBuffer sql, FIDMapper mapper, AttributeDescriptor[] attributes) {
        for (int i = 0; i < mapper.getColumnCount(); i++) {
            LOGGER.finest(mapper.getColumnName(i));
            sql.append(mapper.getColumnName(i));

            if ((attributes.length > 0) || (i < (mapper.getColumnCount() - 1))) {
                sql.append(", ");
            }
        }

        for (int i = 0; i < attributes.length; i++) {
            Name colName = attributes[i].getName();

            LOGGER.finest(attributes[i].getName() + " isGeom: "
                    + (attributes[i] instanceof GeometryDescriptor));

            // Here we want the x and y columns to be requested.
            if (attributes[i] instanceof GeometryDescriptor) {

                sql.append(xCoordColumnName + ", " + yCoordColumnName);

                // "AsText(" + attributes[i].getName() + ") AS " +
                // attributes[i].getName());
            } else {
                sql.append(colName.getLocalPart());
            }

            if (i < (attributes.length - 1)) {
                sql.append(", ");
            }
        }
    }

