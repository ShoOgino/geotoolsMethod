    /**
     * Returns a List with distinct-unique values
     *
     * @param visitor with unique field setting
     * @return List with distinct unique values
     */
    protected List<String> getUniqueScalarList(Query query, UniqueVisitor visitor)
            throws IOException {
        List<String> values;
        try {
            SolrDataStore store = getDataStore();
            Filter[] split = splitFilter(query.getFilter(), this);
            Filter preFilter = split[0];
            Query preQuery = new Query(query);
            preQuery.setFilter(preFilter);
            // set start and maz results in query
            preQuery.setStartIndex(visitor.getStartIndex());
            preQuery.setMaxFeatures(visitor.getMaxFeatures());

            @SuppressWarnings("PMD.CloseResource") // not managed here
            HttpSolrClient solrServer = store.getSolrServer();
            SolrQuery q = store.selectUniqueValues(getSchema(), preQuery, visitor);
            QueryResponse rsp = solrServer.query(q);
            values =
                    rsp.getGroupResponse()
                            .getValues()
                            .stream()
                            .filter(g -> g.getName().equals(visitor.getExpression().toString()))
                            .flatMap(gr -> gr.getValues().stream())
                            .map(g -> g.getGroupValue())
                            .collect(Collectors.toList());

        } catch (Throwable e) {
            if (e instanceof Error) {
                throw (Error) e;
            } else {
                throw (IOException) new IOException().initCause(e);
            }
        }
        return values;
    }

