    @Test
    public void testBuildClient() throws IOException {
        when(statusLine.getStatusCode()).thenReturn(200);
        assertNotNull(dataStoreFactory.createDataStore(params));
        assertEquals(2, dataStoreFactory.getClients().size());
        verify(clientBuilder, times(2)).build();
        assertEquals(1, hostsCaptor.getValue().length);
        assertEquals("localhost", hostsCaptor.getValue()[0].getHostName());
        assertEquals(9200, hostsCaptor.getValue()[0].getPort());

        assertEquals(2, configCallbackCaptor.getAllValues().size());
        configCallbackCaptor.getAllValues().get(0).customizeHttpClient(httpClientBuilder);
        Credentials adminCredentials = credentialsProviderCaptor.getValue().getCredentials(new AuthScope("localhost", 9200));
        assertNotNull(adminCredentials);
        assertEquals("admin", adminCredentials.getUserPrincipal().getName());
        assertEquals("admin", adminCredentials.getPassword());
        configCallbackCaptor.getAllValues().get(1).customizeHttpClient(httpClientBuilder);
        Credentials proxyCredentials = credentialsProviderCaptor.getValue().getCredentials(new AuthScope("localhost", 9200));
        assertNotNull(proxyCredentials);
        assertEquals("proxy", proxyCredentials.getUserPrincipal().getName());
        assertEquals("proxy", proxyCredentials.getPassword());

        assertEquals(2, threadFactoryCaptor.getAllValues().size());
        ThreadFactory adminThreadFactory = threadFactoryCaptor.getAllValues().get(0);
        Thread adminThread = adminThreadFactory.newThread(mock(Runnable.class));
        assertEquals("esrest-asynchttp-ADMIN-1", adminThread.getName());
        ThreadFactory proxyThreadFactory = threadFactoryCaptor.getAllValues().get(1);
        Thread proxyThread = proxyThreadFactory.newThread(mock(Runnable.class));
        assertEquals("esrest-asynchttp-PROXY-2", proxyThread.getName());

        assertNotNull(requestConfigCallbackCaptor.getValue().customizeRequestConfig(requestConfigBuilder));
    }

