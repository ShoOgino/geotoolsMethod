    @Before
    public void setUp() throws IOException {
        dataStoreFactory = Mockito.spy(new ElasticDataStoreFactory());
        clientBuilder = mock(RestClientBuilder.class);
        hostsCaptor = ArgumentCaptor.forClass(HttpHost[].class);
        Mockito.doReturn(clientBuilder)
                .when(dataStoreFactory)
                .createClientBuilder(hostsCaptor.capture());
        final RestClient restClient = mock(RestClient.class);
        when(clientBuilder.build()).thenReturn(restClient);
        final DataStore dataStore = mock(DataStore.class);
        Mockito.doReturn(dataStore)
                .when(dataStoreFactory)
                .createDataStore(any(RestClient.class), any(), anyMap());
        configCallbackCaptor =
                ArgumentCaptor.forClass(RestClientBuilder.HttpClientConfigCallback.class);
        when(clientBuilder.setHttpClientConfigCallback(configCallbackCaptor.capture()))
                .thenReturn(clientBuilder);
        httpClientBuilder = mock(HttpAsyncClientBuilder.class);
        credentialsProviderCaptor = ArgumentCaptor.forClass(CredentialsProvider.class);
        when(httpClientBuilder.setDefaultCredentialsProvider(credentialsProviderCaptor.capture()))
                .thenReturn(httpClientBuilder);
        threadFactoryCaptor = ArgumentCaptor.forClass(ThreadFactory.class);
        when(httpClientBuilder.setThreadFactory(threadFactoryCaptor.capture()))
                .thenReturn(httpClientBuilder);
        requestConfigCallbackCaptor =
                ArgumentCaptor.forClass(RestClientBuilder.RequestConfigCallback.class);
        when(clientBuilder.setRequestConfigCallback(requestConfigCallbackCaptor.capture()))
                .thenReturn(clientBuilder);
        requestConfigBuilder = mock(RequestConfig.Builder.class);
        when(requestConfigBuilder.setAuthenticationEnabled(true)).thenReturn(requestConfigBuilder);

        params = getParams("localhost", 9200, "admin", "proxy");
        ElasticDataStoreFactory.httpThreads.set(1);
    }

