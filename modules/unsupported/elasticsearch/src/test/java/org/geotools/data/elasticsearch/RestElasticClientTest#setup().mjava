    @Before
    public void setup() throws UnsupportedOperationException, IOException {
        mockRestClient = mock(RestClient.class);
        mockProxyRestClient = mock(RestClient.class);
        mockResponse = mock(Response.class);
        mockEntity = mock(HttpEntity.class);
        mockStatusLine = mock(StatusLine.class);
        mockAuth = mock(Authentication.class);
        mockStx = mock(SecurityContext.class);

        when(mockResponse.getEntity()).thenReturn(mockEntity);
        when(mockResponse.getStatusLine()).thenReturn(mockStatusLine);
        when(mockStatusLine.getStatusCode()).thenReturn(200);

        final Response mockDefaultResponse = mock(Response.class);
        final StatusLine mockDefaultStatusLine = mock(StatusLine.class);
        when(mockDefaultResponse.getStatusLine()).thenReturn(mockDefaultStatusLine);
        when(mockDefaultStatusLine.getStatusCode()).thenReturn(500);
        when(mockRestClient.performRequest(any())).thenReturn(mockDefaultResponse);

        when(mockStx.getAuthentication()).thenReturn(mockAuth);
        when(mockAuth.isAuthenticated()).thenReturn(true);
        when(mockAuth.getName()).thenReturn("runAsTest");
        SecurityContextHolder.setContext(mockStx);

        client = new RestElasticClient(mockRestClient);
        proxyClient = new RestElasticClient(mockRestClient, mockProxyRestClient, true);

        InputStream inputStream = new ByteArrayInputStream("{}".getBytes());
        when(mockEntity.getContent()).thenReturn(inputStream);
    }

