    /**
     * Writes the FilterBuilder for the PropertyIsBetween Filter.
     *
     * @param filter the Filter to be visited.
     *
     */
    public Object visit(PropertyIsBetween filter, Object extraData) {
        LOGGER.finer("exporting PropertyIsBetween");

        Expression expr = (Expression) filter.getExpression();
        Expression lowerbounds = (Expression) filter.getLowerBoundary();
        Expression upperbounds = (Expression) filter.getUpperBoundary();

        Class context;
        boolean nested = false;
        AttributeDescriptor attType = (AttributeDescriptor)expr.evaluate(featureType);
        if (attType != null) {
            context = attType.getType().getBinding();
            if (attType.getUserData().containsKey(NESTED)) {
                nested = (Boolean) attType.getUserData().get(NESTED);
            }
        } else {
            //assume it's a string?
            context = String.class;
        }

        expr.accept(this, extraData);
        final String key = (String) field;
        lowerbounds.accept(this, context);
        final Object lower = field;
        upperbounds.accept(this, context);
        final Object upper = field;
        filterBuilder = FilterBuilders.rangeFilter(key).gte(lower).lte(upper);
        if(nested) {
            String path = extractNestedPath(key);
            filterBuilder = FilterBuilders.nestedFilter(path,filterBuilder);
        }

        return extraData;
    }

