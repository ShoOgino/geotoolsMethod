    /**
     * Converts an Elasticsearch distance string consisting of value and unit
     * into metres.
     * @param distanceWithUnit String of the form of a decimal number
     * concatenated with a unit string as defined in
     * {@link FilterToElasticHelper#UNITS_MAP}. If the unit string is missing
     * then the number is assumed to be metres.
     * @return distance in metres.
     * @throws IllegalArgumentException
     */
    static final double convertToMeters(String distanceWithUnit) throws IllegalArgumentException {
        if (distanceWithUnit == null || distanceWithUnit.isEmpty()) {
            throw new IllegalArgumentException("Null of zero length distance string argument");
        }
        final Matcher matcher = ELASTIC_DISTANCE_PATTERN.matcher(distanceWithUnit);
        if (matcher.matches()) {
            final double distance = Double.valueOf(matcher.group(1));
            final String unit = matcher.group(3);
            Double conversion = FilterToElasticHelper.UNITS_MAP.get(unit);
            if (conversion == null) {
                if (unit != null && ! unit.isEmpty()) {
                    throw new IllegalArgumentException("Illegal unit: " + unit);
                } else {
                    conversion = new Double(1.0);
                }
            }
            return distance * conversion;
        } else {
            throw new IllegalArgumentException("Distance string argument has incorrect format");
        }
    }

