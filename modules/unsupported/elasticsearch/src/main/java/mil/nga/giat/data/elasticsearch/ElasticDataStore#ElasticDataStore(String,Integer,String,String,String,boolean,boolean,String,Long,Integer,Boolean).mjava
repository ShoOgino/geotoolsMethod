    public ElasticDataStore(String searchHost, Integer hostPort, 
            String indexName, String searchIndices, String clusterName,
            boolean localNode, boolean storeData, String dataPath, 
            Long scrollSize, Integer scrollTime, Boolean scrollEnabled) {

        LOGGER.fine("initializing data store " + searchHost + ":" + hostPort + "/" + indexName);

        this.indexName = indexName;
        
        if (searchIndices != null) {
            this.searchIndices = searchIndices;
        } else {
            this.searchIndices = indexName;
        }
        
        this.scrollEnabled = scrollEnabled;
        this.scrollSize = scrollSize;
        this.scrollTime = scrollTime;

        if (dataPath != null) {
            Settings build = ImmutableSettings.builder()
                    .put("path.data", dataPath)
                    .put("http.enabled", false)
                    .build();
            node = nodeBuilder()
                    .settings(build)
                    .local(true)
                    .clusterName(clusterName)
                    .node();
            client = node.client();
            isLocal = true;
        } else if (localNode) {
            node = nodeBuilder()
                    .data(storeData)
                    .clusterName(clusterName)
                    .node();
            client = node.client();
            isLocal = false;
        } else {
            final TransportAddress address;
            address = new InetSocketTransportAddress(getInetAddress(searchHost), hostPort);
            Settings settings = Settings.settingsBuilder()
                    .put("cluster.name", clusterName).build();
            this.client = TransportClient.builder().settings(settings).build().addTransportAddress(address);
        }
        LOGGER.fine("client connection established");

        final ClusterStateRequest clusterStateRequest;
        clusterStateRequest = Requests.clusterStateRequest()
                .local(isLocal)
                .indices(indexName);

        LOGGER.fine("querying cluster state");
        final ClusterState state;
        state = client.admin()
                .cluster()
                .state(clusterStateRequest)
                .actionGet().getState();

        IndexMetaData metadata = state.metaData().index(indexName);
        if (metadata != null) {
            final ImmutableOpenMap<String, MappingMetaData> mappings;
            mappings = state.metaData().index(indexName).getMappings();
            final Iterator<String> elasticTypes = mappings.keysIt();
            final Vector<Name> names = new Vector<Name>();
            while (elasticTypes.hasNext()) {
                names.add(new NameImpl(elasticTypes.next()));
            }
            baseTypeNames = names;
        } else {
            baseTypeNames = new ArrayList<>();
        }
        
        layerConfigurations = new ConcurrentHashMap<>();
        docTypes = new HashMap<>();
    }

