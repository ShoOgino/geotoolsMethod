    /**
     * Build a RestClient.
     * 
     * @param type String descriptor of this client purpose ADMIN|PROXY
     * @param searchHost String csv of hosts
     * @param hostPort Integer
     * @param user String
     * @param password String
     * @return RestClient
     * @throws IOException when the client can't be created
     */
    private RestClient buildClient(String type, String searchHost, Integer hostPort, String user, String password) {
        final String[] nodes = searchHost.split(",");
        final AuthScope[] auths = new AuthScope[nodes.length];
        final HttpHost[] hosts = new HttpHost[nodes.length];

        for (int i = 0; i < nodes.length; i++) {
            final String node = nodes[i];
            auths[i] = new AuthScope(node, hostPort);
            hosts[i] = new HttpHost(node, hostPort, "https");
        }

        final RestClientBuilder builder = createClientBuilder(hosts);

        builder.setRequestConfigCallback((b) -> {
            LOGGER.fine(String.format("Calling %s setRequestConfigCallback", type));
            return b.setAuthenticationEnabled(true);
        });

        builder.setHttpClientConfigCallback((httpClientBuilder) -> {
            LOGGER.fine(String.format("Calling %s customizeHttpClient", type));
            httpClientBuilder.setThreadFactory((run) -> {
                final Thread thread = new Thread(run);
                thread.setDaemon(true);
                thread.setName(String.format("esrest-asynchttp-%s-%d", type, httpThreads.getAndIncrement()));
                return thread;
            });
            httpClientBuilder.useSystemProperties();
            final CredentialsProvider credentialsProvider = new BasicCredentialsProvider();
            final Credentials credentials = new org.apache.http.auth.UsernamePasswordCredentials(user, password);
            for (AuthScope scope : auths) {
                credentialsProvider.setCredentials(scope, credentials);
            }

            httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider);
            return httpClientBuilder;
        });

        LOGGER.info(String.format("Building a %s RestClient for %s @ %s:%d", type, user, searchHost, hostPort));
        return builder.build();
    }

