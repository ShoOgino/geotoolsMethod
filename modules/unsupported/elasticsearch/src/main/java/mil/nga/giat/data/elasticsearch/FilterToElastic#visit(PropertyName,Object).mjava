    /**
     * Writes the FilterBuilder for the attribute Expression.
     * 
     * @param expression the attribute.
     *
     */
    @Override
    public Object visit(PropertyName expression, Object extraData) {
        LOGGER.finer("exporting PropertyName");

        Class target = null;
        if(extraData instanceof Class) {
            target = (Class) extraData;
        }

        SimpleFeatureType featureType = this.featureType;

        //check for join
        String prefix = "";
        if (expression instanceof JoinPropertyName) {
            //encode the prefix
            prefix =((JoinPropertyName)expression).getAlias();
            prefix += ".";
        }

        //first evaluate expression against feature type get the attribute, 
        //  this handles xpath
        AttributeDescriptor attribute = null;
        try {
            attribute = (AttributeDescriptor) expression.evaluate(featureType);
        }
        catch( Exception e ) {
            //just log and fall back on just encoding propertyName straight up
            String msg = "Error occured mapping " + expression + " to feature type";
            LOGGER.log( Level.WARNING, msg, e );
        }
        String encodedField; 
        if ( attribute != null ) {
            encodedField = attribute.getLocalName();
            if(target != null && target.isAssignableFrom(attribute.getType().getBinding())) {
                // no need for casting, it's already the right type
                target = null;
            }
        } else {
            // fall back to just encoding the property name
            encodedField = expression.getPropertyName();
        }

        if (extraData == Double.class) {
            field = Double.valueOf(encodedField);
        } else if (extraData == Long.class) {
            field = Long.valueOf(encodedField);
        } else if (extraData == Integer.class) {
            field = Integer.valueOf(encodedField);
        } else if (extraData == Float.class) {
            field = Float.valueOf(encodedField);
        } else if (extraData == Boolean.class) {
            field = Boolean.valueOf(encodedField);
        } else {
            field = prefix + encodedField;
        }
        return extraData;
    }

