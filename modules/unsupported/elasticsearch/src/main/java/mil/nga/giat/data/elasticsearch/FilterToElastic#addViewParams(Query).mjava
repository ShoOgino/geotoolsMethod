    @SuppressWarnings("unchecked")
    protected void addViewParams(Query query) {
        if (query.getHints() != null && query.getHints().get(Hints.VIRTUAL_TABLE_PARAMETERS) != null) {
            parameters = (Map<String, String>) query.getHints().get(Hints.VIRTUAL_TABLE_PARAMETERS);

            nativeOnly = false;
            for (final Map.Entry<String, String> entry : parameters.entrySet()) {
                if (entry.getKey().equalsIgnoreCase("native-only")) {
                    nativeOnly = Boolean.valueOf(entry.getValue());
                }
            }
            if (nativeOnly) {
                LOGGER.fine("Ignoring GeoServer filter (Elasticsearch native query/post filter only)");
                queryBuilder = MATCH_ALL;
            }

            for (final Map.Entry<String, String> entry : parameters.entrySet()) {
                if (entry.getKey().equalsIgnoreCase("q")) {
                    final String value = entry.getValue();
                    try {
                        nativeQueryBuilder = mapReader.readValue(value);
                    } catch (Exception e) {
                        // retry with decoded value
                        try {
                            nativeQueryBuilder = mapReader.readValue(ElasticParserUtil.urlDecode(value));
                        } catch (Exception e2) {
                            throw new FilterToElasticException("Unable to parse native query", e);
                        }
                    }
                }
                if (entry.getKey().equalsIgnoreCase("a")) {
                    final ObjectMapper mapper = new ObjectMapper();
                    final TypeReference<Map<String, Map<String,Map<String,Object>>>> type;
                    type = new TypeReference<Map<String, Map<String,Map<String,Object>>>>() {};
                    final String value = entry.getValue();
                    try {
                        this.aggregations = mapper.readValue(value, type);
                    } catch (Exception e) {
                        try {
                            this.aggregations = mapper.readValue(ElasticParserUtil.urlDecode(value), type);
                        } catch (Exception e2) {
                            throw new FilterToElasticException("Unable to parse aggregation", e);
                        }
                    }
                }
            }
        }
    }

