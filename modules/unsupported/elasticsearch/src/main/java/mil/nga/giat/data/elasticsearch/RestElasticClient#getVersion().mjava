    @Override
    public double getVersion() {
        if (version != null) {
            return version;
        }

        final Pattern pattern = Pattern.compile("(\\d+\\.\\d+)\\.\\d+");
        try {
            final Response response = performRequest("GET", "/", null);
            try (final InputStream inputStream = response.getEntity().getContent()) {
                Map<String,Object> info = mapper.readValue(inputStream, new TypeReference<Map<String, Object>>() {});
                @SuppressWarnings("unchecked")
                Map<String,Object> ver = (Map<String,Object>) info.getOrDefault("version", Collections.EMPTY_MAP);
                final Matcher m = pattern.matcher((String) ver.get("number"));
                if (!m.find()) {
                    version = DEFAULT_VERSION;
                } else {
                    version = Double.valueOf(m.group(1));
                }
            }
        } catch (Exception e) {
            LOGGER.warning("Error getting server version: " + e);
            version = DEFAULT_VERSION;
        }

        return version;
    }

