    /**
     * Common implementation for BinaryComparisonOperator filters.
     *
     * @param filter the comparison.
     *
     */
    protected void visitBinaryComparisonOperator(BinaryComparisonOperator filter, Object extraData) {
        LOGGER.finer("exporting FilterBuilder ComparisonFilter");

        Expression left = filter.getExpression1();
        Expression right = filter.getExpression2();
        if (isBinaryExpression(left) || isBinaryExpression(right)) {
            throw new UnsupportedOperationException("Binary expressions not supported");
        }

        Class leftContext = null, rightContext = null;
        boolean nested = false;
        if (left instanceof PropertyName) {
            // It's a propertyname, we should get the class and pass it in
            // as context to the tree walker.
            AttributeDescriptor attType = (AttributeDescriptor)left.evaluate(featureType);
            if (attType != null) {
                rightContext = attType.getType().getBinding();
                if (attType.getUserData().containsKey(NESTED)) {
                    nested = (Boolean) attType.getUserData().get(NESTED);
                }
            }
        }
        
        if (right instanceof PropertyName) {
            AttributeDescriptor attType = (AttributeDescriptor)right.evaluate(featureType);
            if (attType != null) {
                leftContext = attType.getType().getBinding();
                if (attType.getUserData().containsKey(NESTED)) {
                    nested = (Boolean) attType.getUserData().get(NESTED);
                }
            }
        }

        //case sensitivity
        if ( !filter.isMatchingCase() ) {
            //we only do for = and !=
            if ( filter instanceof PropertyIsEqualTo || 
                    filter instanceof PropertyIsNotEqualTo ) {
                //and only for strings
                if ( String.class.equals( leftContext ) 
                        || String.class.equals( rightContext ) ) {
                    //matchCase = false;
                    LOGGER.fine("Case insensitive filter not supported");
                }
            }
        }

        String type = (String) extraData;
        
        final String key;
        if (left instanceof PropertyName) {
            left.accept(this, null);
            key = (String) field;
            right.accept(this, rightContext);            
        } else {
            right.accept(this, null);
            key = (String) field;
            left.accept(this, leftContext);            
        }

        if (type.equals("=")) {
            filterBuilder = FilterBuilders.termFilter(key, field);
        } else if (type.equals("!=")) {
            TermFilterBuilder equalsFilter;
            equalsFilter = FilterBuilders.termFilter(key, field);
            filterBuilder = FilterBuilders.notFilter(equalsFilter);
        } else if (type.equals(">")) {
            filterBuilder = FilterBuilders.rangeFilter(key).gt(field);
        } else if (type.equals(">=")) {
            filterBuilder = FilterBuilders.rangeFilter(key).gte(field);
        } else if (type.equals("<")) {
            filterBuilder = FilterBuilders.rangeFilter(key).lt(field);
        } else if (type.equals("<=")) {
            filterBuilder = FilterBuilders.rangeFilter(key).lte(field);
        }
        if (nested) {
            String path = extractNestedPath(key);
            filterBuilder = FilterBuilders.nestedFilter(path,filterBuilder);
        }
    }

