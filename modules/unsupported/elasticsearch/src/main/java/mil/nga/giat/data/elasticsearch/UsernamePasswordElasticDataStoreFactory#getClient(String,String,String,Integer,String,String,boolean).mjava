    /**
     * Get the Client.
     * @param type String
     * @param key  String
     * @param host  String
     * @param port Integer
     * @param user  String
     * @param password  String
     * @param retry boolean
     * 
     * @return RestClient
     * @throws IOException when the client can't be created
     */
    @SuppressWarnings("resource")
    private RestClient getClient(String type, String key, String host, Integer port, String user, String password, boolean retry)
            throws IOException {

        RestClient client = null;
        if (clients.containsKey(key)) {
            client = clients.get(key);
        }

        if (client == null) {
            synchronized (clients) {
                if (clients.containsKey(key)) {
                    client = clients.get(key);
                }

                if (client == null) {
                    client = buildClient(type, host, port, user, password);
                    clients.put(key, client);
                }
            }
        }
        try {
            final StatusLine sl = client.performRequest("GET", "/", Collections.emptyMap()).getStatusLine();
            if (sl.getStatusCode() >= 400) {
                throw new IOException(String.format("Connection Test %d: %s", sl.getStatusCode(), sl.getReasonPhrase()));
            }
        } catch (Exception e) {
            LOGGER.info(String.format("Removing %s:%s connection due to: %s", type, user, e.getMessage()));
            clients.remove(key);
            try {
                client.close();
            } catch (Exception e2) {
                LOGGER.warning(String.format("Failed to close %s:%s connection due to: %s", type, user, e2.getMessage()));
            }
            if (retry) {
                return getClient(type, key, host, port, user, password, false);
            }
            throw new IOException(String.format("Multiple connection attempts failed for %s RestClient to %s @ %s:%d ", 
                    type, user, host, port));
        }

        return client;
    }

