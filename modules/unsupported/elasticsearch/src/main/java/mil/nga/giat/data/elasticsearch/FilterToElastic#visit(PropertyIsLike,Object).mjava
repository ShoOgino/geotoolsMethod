    /**
     * Writes the FilterBuilder for the Like Filter.
     *
     * @param filter the filter to be visited
     *
     */
    public Object visit(PropertyIsLike filter, Object extraData) {
        char esc = filter.getEscape().charAt(0);
        char multi = filter.getWildCard().charAt(0);
        char single = filter.getSingleChar().charAt(0);
        boolean matchCase = false;
        if (filter.isMatchingCase()) {
            LOGGER.fine("Case sensitive search not supported");
        }

        String literal = filter.getLiteral();
        Expression att = filter.getExpression();

        AttributeDescriptor attType = (AttributeDescriptor) att.evaluate(featureType);
        boolean analyzed = false;
        boolean nested = false;
        if (attType != null) {
            if (attType.getUserData().containsKey(ANALYZED)) {
                analyzed = (Boolean) attType.getUserData().get(ANALYZED);
            }
            if (attType.getUserData().containsKey(NESTED)) {
                nested = (Boolean) attType.getUserData().get(NESTED);
            }
            if (Date.class.isAssignableFrom(attType.getType().getBinding())) {
                updateDateFormatter(attType);
            }
        }

        att.accept(this, extraData);
        final String key = (String) field;
        
        if (analyzed) {
            // use query string query post filter for analyzed fields
            String pattern = convertToQueryString(esc, multi, single, matchCase, literal);
            filterBuilder = QueryBuilders.queryStringQuery(pattern).defaultField(key);
//            filterBuilder = FilterBuilders.queryFilter(QueryBuilders.queryString(pattern).defaultField(key));
        } else {
            // default to regexp filter
            String pattern = convertToRegex(esc, multi, single, matchCase, literal);
            filterBuilder = QueryBuilders.regexpQuery(key, pattern);
//            filterBuilder = FilterBuilders.regexpFilter(key, pattern);
        }
        if (nested) {
            String path = extractNestedPath(key);
            filterBuilder = FilterBuilders.nestedFilter(path,filterBuilder);
        }

        return extraData;
    }

