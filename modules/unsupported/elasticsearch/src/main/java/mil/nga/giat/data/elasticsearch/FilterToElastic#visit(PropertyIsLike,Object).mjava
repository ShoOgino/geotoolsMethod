    /**
     * Writes the FilterBuilder for the Like Filter.
     *
     * @param filter the filter to be visited
     *
     */
    public Object visit(PropertyIsLike filter, Object extraData) {
        char esc = filter.getEscape().charAt(0);
        char multi = filter.getWildCard().charAt(0);
        char single = filter.getSingleChar().charAt(0);
        boolean matchCase = filter.isMatchingCase();
        if (matchCase) {
            LOGGER.fine("Case sensitive search not supported");
            matchCase = false;
        }

        String literal = filter.getLiteral();
        Expression att = filter.getExpression();

        att.accept(this, extraData);
        final String key = (String) field;

        AttributeDescriptor attType = (AttributeDescriptor) att.evaluate(featureType);
        final boolean analyzed;
        if (attType.getUserData().containsKey(ANALYZED)) {
            analyzed = (Boolean) attType.getUserData().get(ANALYZED);
        } else {
            analyzed = false;
        }
        if (analyzed) {
            // use query string query post filter for analyzed fields
            String pattern = convertToQueryString(esc, multi, single, matchCase, literal);
            filterBuilder = FilterBuilders.queryFilter(QueryBuilders.queryString(pattern).defaultField(key));
        } else {
            // default to regexp filter
            String pattern = convertToRegex(esc, multi, single, matchCase, literal);
            filterBuilder = FilterBuilders.regexpFilter(key, pattern);
        }

        return extraData;
    }

