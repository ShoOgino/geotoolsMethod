    private Response performRequest(
            String method, String path, Map<String, Object> requestBody, boolean isAdmin)
            throws IOException {
        final HttpEntity entity;
        if (requestBody != null) {
            final byte[] data = this.mapper.writeValueAsBytes(requestBody);
            entity = new ByteArrayEntity(data, ContentType.APPLICATION_JSON);
        } else {
            entity = null;
        }
        if (LOGGER.isLoggable(Level.FINE)) {
            LOGGER.fine("Method: " + method);
            LOGGER.fine("Path: " + path);
            final String requestString =
                    this.mapper.writerWithDefaultPrettyPrinter().writeValueAsString(requestBody);
            LOGGER.fine("RequestBody: " + requestString);
        }

        @SuppressWarnings("PMD.CloseResource") // not managed here
        final RestClient client =
                isAdmin || this.proxyClient == null ? this.client : this.proxyClient;

        final Request request = new Request(method, path);
        request.setEntity(entity);

        if (!isAdmin && enableRunAs) {
            final SecurityContext ctx = SecurityContextHolder.getContext();
            final Authentication auth = ctx.getAuthentication();
            if (auth == null) {
                throw new IllegalStateException("Authentication could not be determined!");
            }
            if (!auth.isAuthenticated()) {
                throw new IllegalStateException(
                        String.format("User is not authenticated: %s", auth.getName()));
            }
            final RequestOptions.Builder optionsBuilder = RequestOptions.DEFAULT.toBuilder();
            optionsBuilder.addHeader(RUN_AS, auth.getName());
            request.setOptions(optionsBuilder);
            LOGGER.fine(String.format("Performing request on behalf of user %s", auth.getName()));
        } else {
            LOGGER.fine(
                    String.format(
                            "Performing request with %s credentials", isAdmin ? "user" : "proxy"));
        }
        final Response response = client.performRequest(request);
        if (response.getStatusLine().getStatusCode() >= 400) {
            throw new IOException(
                    "Error executing request: " + response.getStatusLine().getReasonPhrase());
        }
        return response;
    }

