    private Map<String, ElasticMappings.Mapping> getMappings(String indexName, String type)
            throws IOException {
        final Response response;
        try {
            final StringBuilder path = new StringBuilder("/").append(indexName).append("/_mapping");
            if (type != null && getVersion() < 7) {
                path.append("/").append(type);
            }
            response = performRequest("GET", path.toString(), null, true);
        } catch (ResponseException e) {
            if (e.getResponse().getStatusLine().getStatusCode() == 404) {
                return Collections.emptyMap();
            }
            throw e;
        }

        final String aliasedIndex = getIndices(indexName).stream().findFirst().orElse(null);

        try (final InputStream inputStream = response.getEntity().getContent()) {
            final Map<String, ElasticMappings> values;
            if (getVersion() < 7) {
                values =
                        this.mapper.readValue(
                                inputStream, new TypeReference<Map<String, ElasticMappings>>() {});
            } else {
                final Map<String, ElasticMappings.Untyped> res =
                        this.mapper.readValue(
                                inputStream,
                                new TypeReference<Map<String, ElasticMappings.Untyped>>() {});
                values = new HashMap<>();
                for (final Entry<String, ElasticMappings.Untyped> entry : res.entrySet()) {
                    final ElasticMappings mappings = new ElasticMappings();
                    mappings.setMappings(new HashMap<>());
                    if (aliasedIndex != null && aliasedIndex.equals(entry.getKey())) {
                        mappings.getMappings().put(aliasedIndex, entry.getValue().getMappings());
                        values.put(aliasedIndex, mappings);
                    } else {
                        mappings.getMappings().put(indexName, entry.getValue().getMappings());
                        values.put(entry.getKey(), mappings);
                    }
                }
            }
            final Map<String, ElasticMappings.Mapping> mappings;
            if (values.containsKey(indexName)) {
                mappings = values.get(indexName).getMappings();
            } else {
                if (values.containsKey(aliasedIndex)) {
                    mappings = values.get(aliasedIndex).getMappings();
                } else if (!values.isEmpty()) {
                    mappings = values.values().iterator().next().getMappings();
                } else {
                    LOGGER.severe("No types found for index/alias " + indexName);
                    mappings = Collections.emptyMap();
                }
            }
            return mappings;
        }
    }

