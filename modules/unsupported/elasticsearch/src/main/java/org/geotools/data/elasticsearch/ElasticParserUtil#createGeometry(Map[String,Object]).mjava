    /**
     * Create geometry given property map defining geo_shape type and coordinates or geo_point lat
     * and lon.
     *
     * @param properties Properties
     * @return Geometry
     */
    @SuppressWarnings({"rawtypes", "unchecked"})
    public Geometry createGeometry(final Map<String, Object> properties) {
        final Geometry geometry;
        switch (String.valueOf(properties.get("type")).toUpperCase()) {
            case "POINT":
                {
                    final List posList;
                    posList = (List) properties.get("coordinates");
                    final Coordinate coordinate = createCoordinate(posList);
                    geometry = geometryFactory.createPoint(coordinate);
                    break;
                }
            case "LINESTRING":
                {
                    final List<List<Object>> posList;
                    posList = (List) properties.get("coordinates");
                    final Coordinate[] coordinates = createCoordinates(posList);
                    geometry = geometryFactory.createLineString(coordinates);
                    break;
                }
            case "POLYGON":
                {
                    final List<List<List<Object>>> posList;
                    posList = (List) properties.get("coordinates");
                    geometry = createPolygon(posList);
                    break;
                }
            case "MULTIPOINT":
                {
                    final List<List<Object>> posList;
                    posList = (List) properties.get("coordinates");
                    final Coordinate[] coordinates = createCoordinates(posList);
                    geometry = geometryFactory.createMultiPointFromCoords(coordinates);
                    break;
                }
            case "MULTILINESTRING":
                {
                    final List<List<List<Object>>> posList;
                    posList = (List) properties.get("coordinates");
                    final LineString[] lineStrings = new LineString[posList.size()];
                    for (int i = 0; i < posList.size(); i++) {
                        final Coordinate[] coordinates = createCoordinates(posList.get(i));
                        lineStrings[i] = geometryFactory.createLineString(coordinates);
                    }
                    geometry = geometryFactory.createMultiLineString(lineStrings);
                    break;
                }
            case "MULTIPOLYGON":
                {
                    final List<List<List<List<Object>>>> posList;
                    posList = (List) properties.get("coordinates");
                    final Polygon[] polygons = new Polygon[posList.size()];
                    for (int i = 0; i < posList.size(); i++) {
                        polygons[i] = createPolygon(posList.get(i));
                    }
                    geometry = geometryFactory.createMultiPolygon(polygons);
                    break;
                }
            case "GEOMETRYCOLLECTION":
                {
                    final List<Map<String, Object>> list;
                    list = (List) properties.get("geometries");
                    final Geometry[] geometries = new Geometry[list.size()];
                    for (int i = 0; i < geometries.length; i++) {
                        geometries[i] = createGeometry(list.get(i));
                    }
                    geometry = geometryFactory.createGeometryCollection(geometries);
                    break;
                }
            case "ENVELOPE":
                {
                    final List<List<Object>> posList;
                    posList = (List) properties.get("coordinates");
                    final Coordinate[] coords = createCoordinates(posList);
                    final Envelope envelope = new Envelope(coords[0], coords[1]);
                    geometry = geometryFactory.toGeometry(envelope);
                    break;
                }
            case "CIRCLE":
                {
                    final List posList;
                    posList = (List) properties.get("coordinates");
                    final String radius = (String) properties.get("radius");
                    final Coordinate coordinate = createCoordinate(posList);
                    geometry = createCircle(coordinate, radius);
                    break;
                }
            default:
                // check if this is a geo_point
                final Object latObj = properties.get("lat");
                final Object lonObj = properties.get("lon");
                if (latObj != null && lonObj != null) {
                    final Double lat;
                    if (latObj instanceof Number) {
                        lat = ((Number) latObj).doubleValue();
                    } else if (latObj instanceof String) {
                        lat = Double.parseDouble((String) latObj);
                    } else {
                        lat = null;
                    }

                    final Double lon;
                    if (lonObj instanceof Number) {
                        lon = ((Number) lonObj).doubleValue();
                    } else if (lonObj instanceof String) {
                        lon = Double.parseDouble((String) lonObj);
                    } else {
                        lon = null;
                    }

                    if (lat != null && lon != null) {
                        geometry = geometryFactory.createPoint(new Coordinate(lon, lat));
                    } else {
                        geometry = null;
                    }
                } else {
                    geometry = null;
                }
                break;
        }
        return geometry;
    }

