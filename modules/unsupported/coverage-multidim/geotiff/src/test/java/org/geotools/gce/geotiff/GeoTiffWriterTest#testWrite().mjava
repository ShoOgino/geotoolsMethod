	/**
         * Testing {@link GeoTiffWriter} capabilities to write a cropped
         * coverage.
         * 
         * @throws IllegalArgumentException
         * @throws IOException
         * @throws UnsupportedOperationException
         * @throws ParseException
         * @throws FactoryException
         * @throws TransformException
         */
    public void testWrite() throws IllegalArgumentException, IOException,
            UnsupportedOperationException, ParseException, FactoryException,
            TransformException {

        final File dir = TestData.file(GeoTiffReaderTest.class, "");
        final File writedir = new File(new StringBuffer(dir.getAbsolutePath())
                .append("/testWriter/").toString());
        writedir.mkdir();
        final File files[] = dir.listFiles();
        for (File file : files) {
            StringBuffer buffer = new StringBuffer();
            final String path = file.getAbsolutePath().toLowerCase();
            if (!path.endsWith("tif") && !path.endsWith("tiff"))
                continue;

            buffer.append(file.getAbsolutePath()).append("\n");
            final URL source = file.toURI().toURL();
            if (factory.canProcess(DriverOperation.CONNECT, source, null)) {
                buffer.append("ACCEPTED").append("\n");

                // getting access to the file
                CoverageAccess access = factory.process(DriverOperation.CONNECT,source, null, null,null);
                if (access == null)
                    throw new IOException("");

                // get the names
                List<Name> names = access.getNames(null);
                for (Name name : names) {
                    // get a source
                    CoverageSource gridSource = access.access(name, null,
                            AccessType.READ_ONLY, null, null);
                    if (gridSource == null)
                        throw new IOException("");
                    // create a request
                    // reading the coverage
                    CoverageResponse response = gridSource.read(
                            new DefaultCoverageReadRequest(), null);
                    if (response == null
                            || response.getStatus() != Status.SUCCESS
                            || !response.getExceptions().isEmpty())
                        throw new IOException("");

                    Collection<? extends Coverage> results = response
                            .getResults(null);
                    for (Coverage c : results) {
                        GridCoverage2D coverage = (GridCoverage2D) c;
                        // Crs and envelope
                        if (TestData.isInteractiveTest()) {
                            buffer.append("CRS: ").append(
                                    coverage.getCoordinateReferenceSystem2D()
                                            .toWKT()).append("\n");
                            buffer.append("GG: ").append(
                                    coverage.getGridGeometry().toString())
                                    .append("\n");
                        }

                        // create an update request
                        final DefaultCoverageUpdateRequest request = new DefaultCoverageUpdateRequest();
                        request.setData(Collections.singletonList(coverage));

                        // create access

                        final File writeFile = new File(writedir, coverage
                                .getName().toString()
                                + ".tiff");
                        final GeoTiffAccess storeAccess = 
                        	(GeoTiffAccess) factory.process(
                        			DriverOperation.CREATE,
                        			writeFile.toURI().toURL(), 
                        			null, 
                        			null,
                        			null);
                        final CoverageStore gridStore = (CoverageStore) storeAccess
                                .create(name, null, null, null);

                        // write it down
                        gridStore.update(request, null);

                        // getting access to the file
                        access = factory.process(DriverOperation.CONNECT,writeFile.toURI().toURL(),null, null, null);
                        if (access == null)
                            throw new IOException("");

                        //get the names
                        names = access.getNames(null);
                        gridSource = access.access(names.iterator().next(),
                                null, AccessType.READ_ONLY, null, null);
                        if (gridSource == null)
                            throw new IOException("");
                        //create a request
                        // reading the coverage
                        response = gridSource.read(
                                new DefaultCoverageReadRequest(), null);
                        if (response == null
                                || response.getStatus() != Status.SUCCESS
                                || !response.getExceptions().isEmpty())
                            throw new IOException("");

                        results = response.getResults(null);
                        for (Coverage cov : results) {
                            GridCoverage2D coverage1 = (GridCoverage2D) cov;
                            // Crs and envelope
                            if (TestData.isInteractiveTest()) {
                                buffer
                                        .append("CRS: ")
                                        .append(
                                                coverage1
                                                        .getCoordinateReferenceSystem2D()
                                                        .toWKT()).append("\n");
                                buffer.append("GG: ").append(
                                        coverage1.getGridGeometry().toString())
                                        .append("\n");
                                coverage1.show();
                            }
                        }
                    }
                }
            } else
                buffer.append("NOT ACCEPTED").append("\n");
            if (TestData.isInteractiveTest())
                LOGGER.info(buffer.toString());
        }
    }

