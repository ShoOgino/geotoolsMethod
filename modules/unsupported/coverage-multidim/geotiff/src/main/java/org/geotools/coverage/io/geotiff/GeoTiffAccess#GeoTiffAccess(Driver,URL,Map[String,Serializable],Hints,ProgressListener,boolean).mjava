	/**
	 * Access a GeoTiff from the provided source.
	 * <p>
	 * Please note this constructor has package visibility; you are expected to
	 * use the GeoTiffDriver for any and all access.
	 * 
	 * @param source
	 * @param params
	 * @param hints
	 * @param listener
	 * @param canCreate
	 * @throws IOException
	 */
	GeoTiffAccess(
			final Driver driver, 
			URL source, 
			final Map<String, Serializable> params,
			final Hints hints, 
			ProgressListener listener, 
			final boolean canCreate)
			throws IOException {
		super(driver);

		if (listener == null)
			listener = new NullProgressListener();

		// url lookup
		if (source == null) {
			if (params.containsKey(URL.key)) {
				source = (URL) params.get(URL.key);
			}
		}
		if (source == null)
			throw new IllegalArgumentException("Source 'url' is required");

		connectionParameters = new HashMap<String, Serializable>();
		if (params != null) {
			connectionParameters.putAll(params);
		}
		connectionParameters.put(URL.key, source);
		// get the protocol
		final String protocol = source.getProtocol();
		listener.setTask(new SimpleInternationalString("connect"));
		try {
			// file
			if (protocol.equalsIgnoreCase("file")) {
				// convert to file
				final File sourceFile = BaseFileDriver.urlToFile(source);

				// does it exists?
				if (!sourceFile.exists()) {
					// can we create?
					if (!canCreate) {
						throw new FileNotFoundException("GeoTIFF file '"+ sourceFile + "' does not exist.");
					}
					// leave a flag saying that we must create it
					this.mustCreate = true;

					// get the parent dir
					final File parentDir = sourceFile.getParentFile();
					// check that it is directory,exists and can be written
					if (!parentDir.exists() || !parentDir.isDirectory()|| !parentDir.canWrite()) {
						throw new IllegalArgumentException("Invalid input");
					}
					// set access type
					this.allowedAccessTypes.add(AccessType.READ_WRITE);
				} else {
					// check that it is a file,exists and can be at least read
					if (!sourceFile.exists() || !sourceFile.isFile()|| !sourceFile.canRead()) {
						throw fail(listener, new IllegalArgumentException("Read access required to file " + sourceFile));
					}
					// set access type
					if (sourceFile.canWrite()) {
						// set access type
						this.allowedAccessTypes.add(AccessType.READ_WRITE);
					}
					// set access type
					this.allowedAccessTypes.add(AccessType.READ_ONLY);
				}
				listener.progress(0.1f);
				// set the class type
				this.inputClass = File.class;
				this.input = source;

				// initialize
				this.init();

				return;
			}

			// input stream
			if (protocol.equalsIgnoreCase("http")
					|| protocol.equalsIgnoreCase("ftp")) {
				InputStream inStream = null;
				try {
					listener.progress(0.1f);
					// check that the url actually exists and can be read
					inStream = source.openStream();

					// try and read a few bytes
					final byte[] bytes = new byte[256];
					if (inStream.read(bytes) <= 0) {
						throw new IllegalArgumentException(
								"Input stream could not be opened");
					}
					// set the input class type
					this.inputClass = InputStream.class;
					this.input = source;

					// set access type
					this.allowedAccessTypes.add(AccessType.READ_ONLY);

					// initialize
					this.init();

					return;
				} catch (Throwable t) {
					throw fail(listener, new IllegalArgumentException(
							"Could not connect to input", t));
				} finally {
					if (inStream != null)
						try {

						} catch (Exception e) {
							inStream.close();
						}
				}

			}
			// nothing else for the moment
			throw new IllegalArgumentException("Invalid input");
		} finally {
			listener.complete();
		}
	}	

