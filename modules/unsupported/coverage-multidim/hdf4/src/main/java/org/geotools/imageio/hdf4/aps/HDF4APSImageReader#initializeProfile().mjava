    /**
     * Initialize main properties for this <code>HDF4APSImageReader</code>
     */
    protected void initializeProfile() throws IOException {

        if (dataset == null) {
            throw new IOException("Unable to initialize profile due to a null dataset");
        }
        final List<Variable> variables = dataset.getVariables();
        final List<Attribute> attributes = dataset.getGlobalAttributes();
        final int numVars = variables.size();
        numGlobalAttributes = attributes.size();

        // //
        //
        // Getting projection dataset name
        //
        // //

        final String navAttrib = NetCDFUtilities.getGlobalAttributeAsString(dataset, HDF4APSProperties.PFA_NA_MAPPROJECTION);
        if (navAttrib != null && navAttrib.length() > 0) {
            projectionDatasetName = navAttrib;
        }

        final String prodAttrib = NetCDFUtilities.getGlobalAttributeAsString(dataset, HDF4APSProperties.PRODLIST);
        int numImages = 0;
        if (prodAttrib != null && prodAttrib.length() > 0) {
            String products[] = prodAttrib.split(",");
            productList = HDF4APSProperties.refineProductList(products);
            numImages = productList.length;
        } else {
            numImages = numVars;
        }
        setNumImages(numImages);
        indexMap = new HashMap<Range, APSDatasetWrapper>(numImages);

        Variable varProjection;
        // //
        //
        // Setting spatial domain
        //
        // //

        // getting map dataset
        varProjection = dataset.findVariable(projectionDatasetName);
        if (varProjection != null && varProjection.getName().equalsIgnoreCase(projectionDatasetName)) {
            // TODO: All projection share the same dataset
            // structure?
            Array data = varProjection.read();
            final int datatype = NetCDFUtilities.getRawDataType(varProjection);
            if (projectionMap == null) {
                projectionMap = buildProjectionAttributesMap(data, datatype);
                // Force UoM of MapBoundary product as the last element in
                // the map
            }
        }
        try {
            // Scanning all the datasets
            for( Variable var : variables ) {
                final String name = var.getName();
                for( int j = 0; j < numImages; j++ ) {
                    // Checking if the actual dataset is a product.
                    if (name.equals(productList[j])) {
                        // Updating the subDatasetsMap map
                        indexMap.put(new Range(j, j + 1), new APSDatasetWrapper(var));
                        break;
                    }
                }
            }
        } catch (InvalidRangeException e) {
            throw new IllegalArgumentException("Error occurred during NetCDF file parsing", e);
        }
    }

