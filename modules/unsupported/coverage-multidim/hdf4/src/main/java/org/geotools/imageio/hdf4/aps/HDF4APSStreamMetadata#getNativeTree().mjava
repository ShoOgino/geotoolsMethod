    private synchronized Node getNativeTree() {
        final IIOMetadataNode root = new IIOMetadataNode(nativeMetadataFormatName);

        // /////////////////////////////////////////////////////////////
        // 
        // Attributes Node
        //
        // /////////////////////////////////////////////////////////////
        final IIOMetadataNode attribNode = new IIOMetadataNode("Attributes");

        // /////////////////////////////////////////////////////////////
        // Standard APS Attributes
        // /////////////////////////////////////////////////////////////
        final IIOMetadataNode stdNode = new IIOMetadataNode(STD_NODE);

        // File Attributes
        final IIOMetadataNode stdFaNode = buildAttributesNodeFromMap(stdFileAttribMap, STD_FA_NODE);
        stdNode.appendChild(stdFaNode);

        // Time Attributes
        final IIOMetadataNode stdTaNode = buildAttributesNodeFromMap(stdTimeAttribMap, STD_TA_NODE);
        stdNode.appendChild(stdTaNode);

        // Sensor Attributes
        final IIOMetadataNode stdSaNode = buildAttributesNodeFromMap(stdSensorAttribMap, STD_SA_NODE);
        stdNode.appendChild(stdSaNode);

        attribNode.appendChild(stdNode);

        // ////////////////////////////////////////////////////////////////
        // File Products Attributes
        // ////////////////////////////////////////////////////////////////
        final IIOMetadataNode fpaNode = new IIOMetadataNode(PFA_NODE);

        // Input Parameter Attributes
        final IIOMetadataNode fpIpaNode = buildAttributesNodeFromMap(fileInputParamAttribMap, PFA_IPA_NODE);
        fpaNode.appendChild(fpIpaNode);

        // Navigation Attributes
        final IIOMetadataNode fpNaNode = buildAttributesNodeFromMap(fileNavAttribMap, PFA_NA_NODE);
        fpaNode.appendChild(fpNaNode);

        // Input Geographical Coverage Attributes
        final IIOMetadataNode fpIgcaNode = buildAttributesNodeFromMap(fileInGeoCovAttribMap, PFA_IGCA_NODE);
        fpaNode.appendChild(fpIgcaNode);

        attribNode.appendChild(fpaNode);

        // ////////////////////////////////////////////////////////////////
        // Generic Attributes
        // ////////////////////////////////////////////////////////////////
        final IIOMetadataNode genericNode = buildAttributesNodeFromMap(genericAttribMap, GENERICS_NODE);
        attribNode.appendChild(genericNode);
        root.appendChild(attribNode);

//        IIOMetadataNode productsNode = new IIOMetadataNode("Products");
//        productsNode.setAttribute("numberOfProducts", Integer
//                .toString(prodListNum));
//
//        final Set<String> set = productsMap.keySet();
//        final Iterator<String> productsIt = set.iterator();
//
//        while (productsIt.hasNext()) {
//            IIOMetadataNode productNode = new IIOMetadataNode("Product");
//            final String name = (String) productsIt.next();
//            productNode.setAttribute("name", name);
//            final ArrayList<Map<String,String>> attribs = productsMap.get(name);
//
//            final Map<String,String> pdsaAttribMap = (LinkedHashMap<String,String>) attribs.get(0);
//            IIOMetadataNode pdsaAttribNode = buildAttributesNodeFromMap(
//                    pdsaAttribMap, "ProductDatasetAttributes");
//            productNode.appendChild(pdsaAttribNode);
//
//            final Map<String,String> genericAttribMap = (LinkedHashMap<String,String>) attribs.get(1);
//            IIOMetadataNode genericPdsaNode = buildAttributesNodeFromMap(
//                    genericAttribMap, "ProductGenericAttributes");
//            productNode.appendChild(genericPdsaNode);
//
//            productsNode.appendChild(productNode);
//        }
//
//        root.appendChild(productsNode);
        IIOMetadataNode referencingNode = new IIOMetadataNode(REFERENCING_NODE);
        IIOMetadataNode projectionNode = buildAttributesNodeFromMap(projectionMap, PROJECTION_NODE);

        referencingNode.appendChild(projectionNode);
        root.appendChild(referencingNode);
        return root;
    }

