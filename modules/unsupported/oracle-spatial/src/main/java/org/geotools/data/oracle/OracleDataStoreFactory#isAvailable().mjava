//	public DataSourceMetadataEnity createMetadata( Map params ) throws IOException {
//	    String host = (String) HOST.lookUp( params );
//        String port = (String) PORT.lookUp( params );
//        String instance = (String) INSTANCE.lookUp( params );
//        String user = (String) USER.lookUp( params );
//        String schema = (String) SCHEMA.lookUp( params ); // checks uppercase        
//        return new DataSourceMetadataEnity( host+":"+port, instance, "Connect to oracle using schema '"+schema+"' as  "+user );
//	}
    /**
     * Returns whether the OracleDataStoreFactory would actually be able to
     * generate a DataStore.  Depends on whether the appropriate libraries
     * are on the classpath.  For now just checks for the presence of the
     * JDBC driver, should probably check for SDOAPI as well.
     * 
     * @return True if the classes to make an oracle connection are present.
     * @task Figure out a class to check the SDOAPI for, and check it.
     */
    public boolean isAvailable() {
        try {
            Class.forName(JDBC_DRIVER);
        } catch (ClassNotFoundException cnfe) {
            return false;
        } 
        return true;
        //check for sdoapi too?
    }

