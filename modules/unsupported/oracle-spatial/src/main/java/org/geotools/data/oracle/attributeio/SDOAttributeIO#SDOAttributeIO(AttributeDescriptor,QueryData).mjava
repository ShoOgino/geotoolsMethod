	public SDOAttributeIO(AttributeDescriptor attributeType, QueryData queryData)
			throws DataSourceException {
		this.queryData = queryData;
		geometryFactory = null;
		try {
			String tableName = queryData.getFeatureTypeInfo()
					.getFeatureTypeName();
			String columnName = attributeType.getLocalName();
			targetClazz = attributeType.getType().getBinding();
			LOGGER.fine("About to create Geometry convertor for " + tableName
					+ "." + columnName);

			// TODO should check that it is an OracleConnection
                        Connection conn = queryData.getConnection();
                        if(!(conn instanceof OracleConnection)) {
                            UnWrapper uw = DataSourceFinder.getUnWrapper(conn);
                            if(uw != null)
                                conn = uw.unwrap(conn);
                        }
			OracleConnection oracleConnection = (OracleConnection) conn;
			//GeometryFactory gFact = null;

			int srid = queryData.getFeatureTypeInfo().getSRID(columnName);

			if (srid != -1) {
				//SRManager srManager = OraSpatialManager.getSpatialReferenceManager(conn);
				//SpatialReference sr = srManager.retrieve(srid);
				//gFact = OraSpatialManager.getGeometryFactory(sr);
				PrecisionModel pm = new PrecisionModel();
				geometryFactory = new GeometryFactory( pm, srid );
				
			} else {
				//gFact = OraSpatialManager.getGeometryFactory();
				geometryFactory = new GeometryFactory();
			}			
			//adapterSDO = new AdapterSDO(gFact, conn);
			//adapterJTS = new AdapterJTS(gFact);
			converter = new GeometryConverter( oracleConnection, geometryFactory );
				
//		catch (SQLException e) {
//			String msg = "Error setting up SDO Geometry convertor";
//			LOGGER.log(Level.SEVERE, msg, e);
//			throw new DataSourceException(msg + ":" + e.getMessage(), e);
//		}
//		catch (SRException e) {
//			throw new DataSourceException(
//					"Error setting up SDO Geometry convertor", e);
//		}
        } catch(IOException e) {
            throw new DataSourceException(e);
        } finally {
			// hold try statement in place
		}
	}

