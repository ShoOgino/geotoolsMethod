    /**
     * Used to convert double[] to SDO_ODINATE_ARRAY.
     * <p>
     * Will return <code>null</code> as an empty <code>SDO_GEOMETRY</code></p>
     * 
     * @param geom Map to be represented as a STRUCT
     * @return STRUCT representing provided Map
     * @see net.refractions.jspatial.Converter#toDataType(java.lang.Object)
     */
    public STRUCT toSDO(Geometry geom) throws SQLException {
        if( geom == null) return asEmptyDataType();
        
        int gtype = SDO.gType( geom );
        NUMBER SDO_GTYPE = new NUMBER( gtype );
        
        int srid = SDO.SRID( geom );
        NUMBER SDO_SRID = (srid == SDO.SRID_NULL || srid == 0) ? null :
                          new NUMBER( srid );
        
        double[] point = SDO.point( geom );
        STRUCT SDO_POINT;
        
        ARRAY SDO_ELEM_INFO;
        ARRAY SDO_ORDINATES;
        
        if( point == null ){
            int elemInfo[] = SDO.elemInfo( geom );
            double ordinates[] = SDO.ordinates( geom );
            
            SDO_POINT = null;
            SDO_ELEM_INFO = toARRAY( elemInfo, "MDSYS.SDO_ELEM_INFO_ARRAY" );
            SDO_ORDINATES = toARRAY( ordinates, "MDSYS.SDO_ORDINATE_ARRAY" );                        
        }
        else { // Point Optimization
            Datum data[] = new Datum[]{
                toNUMBER( point[0] ),
                toNUMBER( point[1] ),
                toNUMBER( point[2] ),
            };
            SDO_POINT = toSTRUCT( data, "MDSYS.SDO_POINT_TYPE"  );
            SDO_ELEM_INFO = null;
            SDO_ORDINATES = null;
        }                
        Datum attributes[] = new Datum[]{
            SDO_GTYPE,
            SDO_SRID,
            SDO_POINT,
            SDO_ELEM_INFO,
            SDO_ORDINATES
        };
        return toSTRUCT( attributes, DATATYPE );        
    }

