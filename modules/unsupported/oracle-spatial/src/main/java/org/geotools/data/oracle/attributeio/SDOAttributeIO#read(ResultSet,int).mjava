	/**
	 * @see org.geotools.data.jdbc.attributeio.AttributeIO#read(java.sql.ResultSet,
	 *      int)
	 */
	public Object read(ResultSet rs, int position) throws IOException {
		try {
			Geometry geom = null;
			Object struct = rs.getObject(position);
			// oracle.sdoapi.geom.Geometry sdoGeom = adapterSDO.importGeometry(struct);
			// geom = adapterJTS.exportGeometry(Geometry.class, sdoGeom);
			
			geom = converter.asGeometry( (STRUCT) struct );
			// in Oracle you can have polygons in a column declared to be multipolygon, and so on...
			// so we better convert geometries, since our feature model is not so lenient
			if(targetClazz.equals(MultiPolygon.class) && geom instanceof Polygon)
			    return geometryFactory.createMultiPolygon(new Polygon[] {(Polygon) geom});
			else if(targetClazz.equals(MultiPoint.class) && geom instanceof Point)
                return geometryFactory.createMultiPoint(new Point[] {(Point) geom});
			else if(targetClazz.equals(MultiLineString.class) && geom instanceof LineString)
                return geometryFactory.createMultiLineString(new LineString[] {(LineString) geom});
			else if(targetClazz.equals(GeometryCollection.class))
                return geometryFactory.createGeometryCollection(new Geometry[] {geom});
			return geom;
		} catch (SQLException e) {
			String msg = "SQL Exception reading geometry column";
			LOGGER.log(Level.SEVERE, msg, e);
			throw new DataSourceException(msg, e);
		}
//		catch (InvalidGeometryException e) {
//			String msg = "Problem with the geometry";
//			LOGGER.log(Level.SEVERE, msg, e);
//			throw new DataSourceException(msg, e);
//		} catch (GeometryInputTypeNotSupportedException e) {
//			String msg = "Geometry Conversion type error";
//			LOGGER.log(Level.SEVERE, msg, e);
//			throw new DataSourceException(msg, e);
//		} catch (GeometryOutputTypeNotSupportedException e) {
//			String msg = "Geometry Conversion type error";
//			LOGGER.log(Level.SEVERE, msg, e);
//			throw new DataSourceException(msg, e);
//		}
	}

