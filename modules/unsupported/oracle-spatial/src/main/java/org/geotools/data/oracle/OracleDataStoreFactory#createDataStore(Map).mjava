    /**
     * Construct a postgis data store using the params.
     *
     * @param params The full set of information needed to construct a live
     *        data source.  Should have  dbtype equal to postgis, as well as
     *        host, user, passwd, database, and table.
     *
     * @return The created DataSource, this may be null if the required
     *         resource was not found or if insufficent parameters were given.
     *         Note that canProcess() should have returned false if the
     *         problem is to do with insuficent parameters.
     *
     * @throws DataSourceException Thrown if there were any problems creating
     *         or connecting the datasource.
     */
    public DataStore createDataStore(Map params) throws IOException {
        /* There are no defaults here. Calling canProcess verifies that
         * all these variables exist.
         */
        String host = (String) HOST.lookUp( params );
        Integer port = (Integer) PORT.lookUp( params );
        String instance = (String) INSTANCE.lookUp( params );
        String user = (String) USER.lookUp( params );
        String passwd = (String) PASSWD.lookUp( params );
        String schema = (String) SCHEMA.lookUp( params ); // checks uppercase
        String namespace = (String) NAMESPACE.lookUp( params );
        String dbtype = (String) DBTYPE.lookUp( params );
        Integer maxConn = (Integer) MAXCONN.lookUp(params);
        Integer minConn = (Integer) MINCONN.lookUp(params);
        Boolean validateConn = (Boolean) VALIDATECONN.lookUp(params);
        
        if( !"oracle".equals( dbtype )){
            throw new IOException( "Parameter 'dbtype' must be oracle");
        }
        
        if (!canProcess(params)) {
            throw new IOException("Cannot connect using provided parameters");
        }
        
        
        boolean validate = validateConn != null && validateConn.booleanValue();
        int maxActive = maxConn != null ? maxConn.intValue() : 10;
        int maxIdle = minConn != null ? minConn.intValue() : 4;
        DataSource source = getDefaultDataSource(host, user, passwd, port.intValue(), instance, maxActive, maxIdle, validate);
        OracleDataStore dataStore = new OracleDataStore(source, namespace, schema, new HashMap());

        return dataStore;
    }

