    protected Envelope getEnvelope(
        Connection conn,
        SimpleFeatureType schema,
        String geomName,
        SQLBuilder sqlBuilder,
        Filter filter)
        throws SQLException, SQLEncoderException, IOException, ParseException {
        
        StringBuffer sql = new StringBuffer();
        GeometryDescriptor gat = (GeometryDescriptor) schema.getDescriptor(geomName);
        // from the Oracle docs: "The SDO_TUNE.EXTENT_OF function has better performance than the
        // SDO_AGGR_MBR function if the data is non-geodetic and if a spatial index is defined
        // on the geometry column; however, the SDO_TUNE.EXTENT_OF function is limited to
        // two-dimensional geometries, whereas the SDO_AGGR_MBR function is not".
        // And also: "In addition, the SDO_TUNE.EXTENT_OF function computes the extent for all
        // geometries in a table; by contrast, the SDO_AGGR_MBR function can operate on
        // subsets of rows. The SDO_TUNE.EXTENT_OF function returns NULL if the data is inconsistent."
        // Long story short: under restrictive conditions SDO_TUNE.EXTENT_OF works, but we have
        // to be prepared to fall back on SDO_AGGR_MBR.
        List queries = new ArrayList();
        if(Filter.INCLUDE.equals(filter) && !(gat.getCoordinateReferenceSystem() instanceof GeodeticCRS)) {
            sql.append("SELECT SDO_TUNE.EXTENT_OF('").append(schema.getTypeName()).append("', '");
            sql.append(geomName).append("') from dual");
            queries.add(sql.toString());
            sql = new StringBuffer();
        } 
        sql.append("SELECT SDO_AGGR_MBR(").append(geomName).append(") ");
        sqlBuilder.sqlFrom(sql, schema.getTypeName());
        sqlBuilder.sqlWhere(sql, filter);
        queries.add(sql.toString());
      
        LOGGER.fine("SQL: " + sql);

        // loop over the (eventual) two sql statements, so that if the first does not provide
        // an answer, we fall back on the second
        Statement statement = null;
        ResultSet results = null;
        Envelope result = null;
        for (Iterator it = queries.iterator(); it.hasNext();) {
            String query = (String) it.next();
            try {
                statement = conn.createStatement();
                results = statement.executeQuery(query);
                
                results.next();
                
                Geometry geom = null;
                Object struct = results.getObject(1);
                UnWrapper unwrapper = DataSourceFinder.getUnWrapper(conn);
                OracleConnection oraConn = (OracleConnection) unwrapper.unwrap(conn);
                GeometryConverter converter = new GeometryConverter(oraConn, new GeometryFactory());
                geom = converter.asGeometry( (STRUCT) struct );
                
                // Oracle may return a point, a line or a polygon
                if(geom != null)
                    return geom.getEnvelopeInternal();
            } finally {
                JDBCUtils.close(results);
                JDBCUtils.close(statement);
            }
        }
        return result;
    }   

