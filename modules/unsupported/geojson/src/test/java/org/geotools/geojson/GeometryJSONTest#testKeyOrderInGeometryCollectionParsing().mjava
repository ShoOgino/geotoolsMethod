    @Test
    public void testKeyOrderInGeometryCollectionParsing() throws Exception {
        /* Test parsing of two variations of the same GeoJSON object. */

        /* input1 tests parsing when "type" occurs at the top of each sub-object */
        String input1 =
                "{"
                        + " \"type\": \"GeometryCollection\","
                        + " \"geometries\": [{"
                        + "  \"type\": \"Polygon\","
                        + "  \"coordinates\": [[[100.0, 1.0],[101.0, 1.0],[100.5, 1.5],[100.0, 1.0]]]"
                        + "  }]"
                        + "}";

        /* input2 tests parsing when "type" in a geometry of the geom collection occurs after "coordinates" */
        String input2 =
                "{"
                        + " \"type\": \"GeometryCollection\","
                        + " \"geometries\": [{"
                        + "  \"coordinates\": [[[100.0, 1.0],[101.0, 1.0],[100.5, 1.5],[100.0, 1.0]]],"
                        + "  \"type\": \"Polygon\""
                        + " }]"
                        + "}";

        /* input3 tests parsing when  "type" of the geometry collection occurs after "geometries" */
        String input3 =
                "{"
                        + " \"geometries\": [{"
                        + "  \"coordinates\": [[[100.0, 1.0],[101.0, 1.0],[100.5, 1.5],[100.0, 1.0]]],"
                        + "  \"type\": \"Polygon\""
                        + " }],"
                        + " \"type\": \"GeometryCollection\""
                        + "}";

        Point expectedLastPoint = gf.createPoint(new Coordinate(100.0, 1.0));

        org.geotools.geojson.geom.GeometryJSON geometryJSON =
                new org.geotools.geojson.geom.GeometryJSON();

        /* test input 1 */
        GeometryCollection collection = geometryJSON.readGeometryCollection(input1);
        testKeyOrderInGeometryCollectionParsing_VerifyContents(collection, expectedLastPoint);

        /* test input 2 */
        collection = geometryJSON.readGeometryCollection(input2);
        testKeyOrderInGeometryCollectionParsing_VerifyContents(collection, expectedLastPoint);

        /* test input 3 */
        collection = geometryJSON.readGeometryCollection(input3);
        testKeyOrderInGeometryCollectionParsing_VerifyContents(collection, expectedLastPoint);
    }

