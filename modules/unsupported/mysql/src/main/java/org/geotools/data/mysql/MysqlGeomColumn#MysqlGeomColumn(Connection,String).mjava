    /**
     * A convenience constructor, when you there is an open connection, and
     * only using  flat features.  This constructor will not work with feature
     * tables that contain multiple geometries as the query on the feature
     * table will return multiple rows, which will be discarded.  For multiple
     * geometries an array of MysqlGeomColumns must be created, each
     * initialized with the default constructor, filling in the values through
     * the accesssor functions.
     *
     * @param dbConnection An open connection to the database.
     * @param feaTableName The feature table that references this Geometry Col.
     *
     * @throws SQLException if there were problems accessing the database.
     * @throws SchemaException if there were problems creating the schema.
     *
     * @task TODO: Get rid of this constructor, move the functionality outside.
     */
    public MysqlGeomColumn(Connection dbConnection, String feaTableName)
        throws SQLException, SchemaException {
        this.feaTabName = feaTableName;

        try {
            Statement statement = dbConnection.createStatement();

            //MySQL does not pre-compile statements, so making prepared
            //statements leads to no performance increases.
            String sqlQuery = makeGeomSql(feaTableName);
            LOGGER.warning("SQL q = " + sqlQuery);

            ResultSet result = statement.executeQuery(sqlQuery);

            while (result.next()) {
                //only flat features for now, with multiple geometries
                //all but the last feature will be discarded
                feaTabCatalog = result.getString(1);
                feaTabSchema = result.getString(2);
                feaGeomColumn = result.getString(4);
                geomTabCatalog = result.getString(5);
                geomTabSchema = result.getString(6);
                geomTabName = result.getString(7);
                storageType = result.getInt(8);
                geomType = result.getInt(9);
                coordDimension = result.getInt(10);
                maxPPR = result.getInt(11);
                spacRefID = result.getInt(12);
            }

            LOGGER.finer("creating new geometry column with values: " + feaTabName + " "
                + feaGeomColumn + " " + geomTabName);
            result = statement.executeQuery("SELECT * FROM " + geomTabName);

            //currently selects all, should be more elegant as we get complex
            //queries.  Ideally move outside and call populate data on results.
            int gid = 0;
            String wkb = null; //now it is actually Well Known Text, waiting for WKB reader

            while (result.next()) {
                gid = result.getInt(1);
                wkb = result.getString(6);
                populateData(gid, wkb);
            }

            result.close();
            statement.close();
        } catch (SQLException e) {
            LOGGER.warning("Some sort of database connection error: " + e.getMessage());
        }
    }

