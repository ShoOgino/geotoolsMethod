    /**
     * Constructs an AttributeType from a row in a ResultSet. The ResultSet
     * contains the information retrieved by a call to  getColumns() on the
     * DatabaseMetaData object.  This information  can be used to construct an
     * Attribute Type.
     *
     * <p>
     * In addition to standard SQL types, this method identifies MySQL 4.1's geometric
     * datatypes and creates attribute types accordingly.  This happens when the
     * datatype, identified by column 5 of the ResultSet parameter, is equal to
     * java.sql.Types.OTHER.  If a Types.OTHER ends up not being geometric, this
     * method simply calls the parent class's buildAttributeType method to do something
     * with it.
     * </p>
     *
     * <p>
     * Note: Overriding methods must never move the current row pointer in the
     * result set.
     * </p>
     *
     * @param rs The ResultSet containing the result of a
     *        DatabaseMetaData.getColumns call.
     *
     * @return The AttributeType built from the ResultSet.
     *
     * @throws SQLException If an error occurs processing the ResultSet.
     * @throws DataSourceException Provided for overriding classes to wrap
     *         exceptions caused by other operations they may perform to
     *         determine additional types.  This will only be thrown by the
     *         default implementation if a type is present that is not present
     *         in the TYPE_MAPPINGS.
     * NOTE: the srid of the features stored is used to build an CRS assuming 
     * that it an ESPG srid
     */
    protected AttributeDescriptor buildAttributeType(ResultSet rs)
        throws IOException {
	// these come from the Interface DatabaseMetaData in java.sql
	final int TABLE_NAME = 3;
        final int COLUMN_NAME = 4;
        final int DATA_TYPE = 5;
        final int TYPE_NAME = 6;

        try {
            int dataType = rs.getInt(DATA_TYPE);
            if (dataType == Types.OTHER || dataType == Types.BINARY) {
                //this is MySQL-specific; handle it
                String typeName = rs.getString(TYPE_NAME);
                AttributeTypeBuilder builder = new AttributeTypeBuilder();

				Class geom = getGeomClass(typeName);
                if ( geom == null) {
                    //nothing else we can do
                    return super.buildAttributeType(rs);
                }
				builder.setBinding(geom);

				//get CRS we are making the assumtion that the srid coresponds
				// to the EPSG srid.  Which may not be true.
				int srid = determineSRID(rs.getString(TABLE_NAME), rs.getString(COLUMN_NAME) );
				CoordinateReferenceSystem crs = null;
				try{
					crs = CRS.decode("EPSG:"+ srid);
				} catch (Exception e) {
					crs = null;
				}
				builder.setCRS(crs);

				// set some other stuff like name and return
                builder.setNillable(true);
                builder.setName(rs.getString(COLUMN_NAME));
                return builder.buildDescriptor(rs.getString(COLUMN_NAME));
            } else {
                return super.buildAttributeType(rs);
            }
        } catch (SQLException e) {
            throw new IOException("SQL exception occurred: " + e.getMessage());
        }
    }

