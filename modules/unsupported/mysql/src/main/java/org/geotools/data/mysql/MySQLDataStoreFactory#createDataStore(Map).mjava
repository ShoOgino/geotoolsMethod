    /**
     * Construct a mysql data store using the params.
     *
     * @param params The full set of information needed to construct a live
     *        data source.  Should have  dbtype equal to mysql, as well as
     *        host, user, passwd, database, and table.
     *
     * @return The created DataSource, this may be null if the required
     *         resource was not found or if insufficent parameters were given.
     *         Note that canProcess() should have returned false if the
     *         problem is to do with insuficent parameters.
     *
     * @throws IOException See DataSourceException
     * @throws DataSourceException Thrown if there were any problems creating
     *         or connecting the datasource.
     */
    public DataStore createDataStore(Map params) throws IOException {
        // lookup will throw nice exceptions back to the client code
        String host = (String) HOST.lookUp(params);
        String user = (String) USER.lookUp(params);
        String passwd = (String) PASSWD.lookUp(params);
        Integer maxConn = (Integer) MAXCONN.lookUp(params);
        Integer minConn = (Integer) MINCONN.lookUp(params);
        Boolean validateConn = (Boolean) VALIDATECONN.lookUp(params);
        int port = ((Integer) PORT.lookUp(params)).intValue();
        String database = (String) DATABASE.lookUp(params);
        String namespace = (String) NAMESPACE.lookUp(params);
        Boolean wkbEnabled = (Boolean) WKBENABLED.lookUp(params);

        if (!canProcess(params)) {
            // Do this as a last sanity check.
            LOGGER.warning("Can not process : " + params);
            throw new IOException("The parameteres map isn't correct!!");
        }

        boolean validate = (validateConn != null) && validateConn.booleanValue();
        int maxActive = (maxConn != null) ? maxConn.intValue() : 10;
        int maxIdle = (minConn != null) ? minConn.intValue() : 4;
        DataSource ds = getDefaultDataSource(host, user, passwd, port, database, maxActive,
                maxIdle, validate);

        MySQLDataStore store;
        if (namespace != null) {
            store = new MySQLDataStore(ds, null, namespace);
        } else {
            store =new MySQLDataStore(ds);
        }
        if(wkbEnabled != null)
            store.setWKBEnabled(wkbEnabled.booleanValue());
        return store;
    }

