    public Coordinate[] toCoordinateArray() {
        if (theVertices == null) {
            addError("coordinate array can not be created.");
            return null;
        }

        Iterator it = theVertices.iterator();
        List<Coordinate> lc = new ArrayList<Coordinate>();
        Coordinate firstc = null;
        Coordinate lastc = null;
        while (it.hasNext()) {
            DXFLwVertex v = (DXFLwVertex) it.next();
            lastc = v.toCoordinate();
            if (firstc == null) {
                firstc = lastc;
            }
            lc.add(lastc);
        }

        // If only 2 points found, make Line
        if (lc.size() == 2) {
            setType(GeometryType.LINE);
        }

        // Forced closing polygon
        if (getType() == GeometryType.POLYGON) {
            if (!firstc.equals2D(lastc)) {
                lc.add(firstc);
            }
        }

        /* TODO uitzoeken of lijn zichzelf snijdt, zo ja nodding
         * zie jts union:
         * Collection lineStrings = . . .
         * Geometry nodedLineStrings = (LineString) lineStrings.get(0);
         * for (int i = 1; i < lineStrings.size(); i++) {
         * nodedLineStrings = nodedLineStrings.union((LineString)lineStrings.get(i));
         * */
        return rotateAndPlace(lc.toArray(new Coordinate[] {}));
    }

