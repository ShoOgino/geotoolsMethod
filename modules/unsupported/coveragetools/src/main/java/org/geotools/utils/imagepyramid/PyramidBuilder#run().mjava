	public void run() {

		// /////////////////////////////////////////////////////////////////////
		//
		// Gather reader to compute tile x and y from tile size
		//
		// /////////////////////////////////////////////////////////////////////
		final AbstractGridFormat format = (AbstractGridFormat) GridFormatFinder
				.findFormat(inputLocation);
		if (format == null) {
			String message = "Could not find a format for this coverage";
			fireException(message, 0, new IOException(message));
			return;
		}
		final AbstractGridCoverage2DReader inReader = (AbstractGridCoverage2DReader) format
				.getReader(inputLocation);
		if (inReader == null) {
			String message = "Unable to instantiate a reader for this coverage";
			fireException(message, 0, new IOException(message));
			return;
		}

		envelope = inReader.getOriginalEnvelope();
		inReader.dispose();

		// /////////////////////////////////////////////////////////////////////
		//
		// Create output directory
		//
		// /////////////////////////////////////////////////////////////////////
		if (!outputLocation.exists())
			if (!outputLocation.mkdir()) {
				String message = "Could not create output directory: "
						+ outputLocation;
				fireException(message, 0, new IOException(message));
				return;
			}

		// /////////////////////////////////////////////////////////////////////
		// 
		// Compute total steps and set current one so that slave tools progress
		// event percentages can be corrected to represent the global progress
		//
		// //////////////////////////////////////////////////////////////////////
		totalSteps = (numSteps + 1) * 2;
		currStep = 1;

		// /////////////////////////////////////////////////////////////////////
		//
		// Set up initial level using the coverage tiler
		//
		// /////////////////////////////////////////////////////////////////////
		File outputDir = new File(outputLocation, "0");
		if (!checkLayerDir(outputDir))
			return;

		// create first tiled set
		resolutions = new double[2][numSteps + 1];
		// tileInput(numTileX, numtileY, outputDir);
		tileInput(outputDir);
		if (exceptionOccurred)
			return;
		currStep++;

		// mosaic it
		double[] resolution = mosaicLevel(0);
		resolutions[0][0] = resolution[0];
		resolutions[1][0] = resolution[1];
		if (exceptionOccurred)
			return;
		currStep++;

		// /////////////////////////////////////////////////////////////////////
		//
		// Now do create a new level, and mosaic it, up to the final level
		//
		// /////////////////////////////////////////////////////////////////////
		int currLevel = scaleFactor;
		int prevLevel = 0;
		for (int step = 0; step < numSteps; step++) {
			// check output dir
			final File prevLevelDirectory = new File(outputLocation, String
					.valueOf(prevLevel));
			final File currLevelDirectory = new File(outputLocation, String
					.valueOf(currLevel));
			if (!checkLayerDir(currLevelDirectory))
				return;

			// create next tiled set
			buildNewLayer(prevLevelDirectory, currLevelDirectory);
			if (exceptionOccurred)
				return;
			currStep++;

			// mosaic it
			resolution = mosaicLevel(currLevel);
			resolutions[0][step + 1] = resolution[0];
			resolutions[1][step + 1] = resolution[1];
			if (exceptionOccurred)
				return;
			currStep++;

			// switch to next resolution level
			prevLevel = currLevel;
			currLevel *= scaleFactor;
		}

		// /////////////////////////////////////////////////////////////////////
		//
		// Finally, build the property file
		//
		// /////////////////////////////////////////////////////////////////////

		fireEvent("Creating final properties file ", 99.9);
		createPropertiesFiles();
		if (!exceptionOccurred)
			fireEvent("Done!!!", 100);
	}

