	/**
	 * This methods built up a RenderedOp for subsampling an image in order to
	 * create various previes. I wanted to use the filtered subsample but It was
	 * giving me problems in the native libraries therefore I am doing a two
	 * steps downsampling:
	 * 
	 * Step 1: low pass filtering.
	 * 
	 * Step 2: Subsampling.
	 * 
	 * @param src
	 *            Image to subsample.
	 * @param scaleTC 
	 * @param scale
	 *            Scale factor.
	 * @param interpolation
	 *            Interpolation method used.
	 * @param tileHints
	 *            Hints provided.
	 * 
	 * @return The subsampled RenderedOp.
	 */
	private RenderedOp subsample(RenderedOp src, TileCache scaleTC, final Interpolation interpolation) {
		final RenderingHints newHints = new RenderingHints(JAI.KEY_TILE_CACHE,scaleTC);
		newHints.add(ImageUtilities.DONT_REPLACE_INDEX_COLOR_MODEL);
		newHints.add(new RenderingHints(JAI.KEY_BORDER_EXTENDER, this.borderExtender));
		
		// using filtered subsample operator to do a subsampling
		final ParameterBlockJAI pb = new ParameterBlockJAI("filteredsubsample");
		pb.addSource(src);
		pb.setParameter("scaleX", new Integer(downsampleStep));
		pb.setParameter("scaleY", new Integer(downsampleStep));
		pb.setParameter("qsFilterArray", new float[] { 1.0f });
		pb.setParameter("Interpolation", interpolation);
		// remember to add the hint to avoid replacement of the original
		// IndexColorModel
		// in future versions we might want to make this parametrix XXX TODO
		// @task
		return JAI.create("filteredsubsample", pb, newHints);
	}

