    public static void main(String args[]) {
        
//            // rebuild formats at each parse, date formats are not thread safe
//            SimpleDateFormat format = new SimpleDateFormat("yyyy");
//            format.setTimeZone(TimeZone.getTimeZone("GMT"));
//            
//            /* We do not use the standard method DateFormat.parse(String), because if the parsing
//             * stops before the end of the string, the remaining characters are just ignored and
//             * no exception is thrown. So we have to ensure that the whole string is correct for
//             * the format.
//             */
//            ParsePosition pos = new ParsePosition(0);
//            Date time = format.parse("1963Z", pos);
//
//            System.out.println(time.toString());
//            System.out.println(time.toGMTString());
        
        final CommandLineCatalogBuilderRunner runner = new CommandLineCatalogBuilderRunner(args);
        // prepare the configuration
        final CatalogBuilderConfiguration configuration = new CatalogBuilderConfiguration();
        configuration.setAbsolute(runner.absolute);
        configuration.setIndexName(runner.indexName);
        configuration.setFootprintManagement(runner.footprintManagement);
        configuration.setCaching(runner.caching);
        configuration.setRootMosaicDirectory(runner.rootMosaicDirectory);
        configuration.setWildcard(runner.wildcardString);
        configuration.setLocationAttribute(runner.locationAttribute);

        final String directories = runner.indexingDirectoriesString;
        final String[] dirs_ = directories.split(",");
        final List<String> dirs = new ArrayList<String>();
        for (String dir : dirs_)
            dirs.add(dir);
        configuration.setIndexingDirectories(dirs);
        
        // prepare and run the index builder
        final CatalogBuilder builder = new CatalogBuilder(configuration);
     // this is going to help us with catching exceptions and logging them
        final Queue<Throwable> exceptions = new LinkedList<Throwable>();
        try {

                final CatalogBuilder.ProcessingEventListener listener = new CatalogBuilder.ProcessingEventListener() {

                        @Override
                        public void exceptionOccurred(ExceptionEvent event) {
                                final Throwable t = event.getException();
                                exceptions.add(t);
                                if (LOGGER.isLoggable(Level.SEVERE))
                                        LOGGER.log(Level.SEVERE, t.getLocalizedMessage(), t);

                        }

                        @Override
                        public void getNotification(ProcessingEvent event) {
                                if (LOGGER.isLoggable(Level.FINE))
                                        LOGGER.fine(event.getMessage());

                        }

                };
                builder.addProcessingEventListener(listener);
                builder.run();
        } catch (Throwable e) {
                LOGGER.log(Level.SEVERE, "Unable to build mosaic", e);
        } finally {
            builder.dispose();
        }        

    }

