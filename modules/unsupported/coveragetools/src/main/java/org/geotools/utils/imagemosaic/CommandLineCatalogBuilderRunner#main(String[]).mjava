    public static void main(String args[]) {
       
        final CommandLineCatalogBuilderRunner runner = new CommandLineCatalogBuilderRunner(args);
        // prepare the configuration
        final CatalogBuilderConfiguration configuration = new CatalogBuilderConfiguration();
        configuration.setParameter(Prop.ABSOLUTE_PATH, runner.absolute.toString());
        configuration.setParameter(Prop.INDEX_NAME, runner.indexName);
        configuration.setParameter(Prop.FOOTPRINT_MANAGEMENT, runner.footprintManagement.toString());
        configuration.setParameter(Prop.CACHING, runner.caching.toString());
        configuration.setParameter(Prop.ROOT_MOSAIC_DIR, runner.rootMosaicDirectory);
        configuration.setParameter(Prop.WILDCARD, runner.wildcardString);
        configuration.setParameter(Prop.LOCATION_ATTRIBUTE, runner.locationAttribute);
        
//        configuration.setAbsolute(runner.absolute);
//        configuration.setIndexName(runner.indexName);
//        configuration.setFootprintManagement(runner.footprintManagement);
//        configuration.setCaching(runner.caching);
//        configuration.setRootMosaicDirectory(runner.rootMosaicDirectory);
//        configuration.setWildcard(runner.wildcardString);
//        configuration.setLocationAttribute(runner.locationAttribute);

        final String directories = runner.indexingDirectoriesString;
        final String[] dirs_ = directories.split(",");
        final List<String> dirs = new ArrayList<String>();
        for (String dir : dirs_)
            dirs.add(dir);
//        configuration.setIndexingDirectories(dirs);
        configuration.setParameter(Prop.INDEXING_DIRECTORIES, directories);
        
        
        // prepare and run the index builder
        final ImageMosaicWalker builder = new ImageMosaicWalker(configuration);
     // this is going to help us with catching exceptions and logging them
        final Queue<Throwable> exceptions = new LinkedList<Throwable>();
        try {

                final ImageMosaicWalker.ProcessingEventListener listener = new ImageMosaicWalker.ProcessingEventListener() {

                        @Override
                        public void exceptionOccurred(ExceptionEvent event) {
                                final Throwable t = event.getException();
                                exceptions.add(t);
                                if (LOGGER.isLoggable(Level.SEVERE))
                                        LOGGER.log(Level.SEVERE, t.getLocalizedMessage(), t);

                        }

                        @Override
                        public void getNotification(ProcessingEvent event) {
                                if (LOGGER.isLoggable(Level.FINE))
                                        LOGGER.fine(event.getMessage());

                        }

                };
                builder.addProcessingEventListener(listener);
                builder.run();
        } catch (Throwable e) {
                LOGGER.log(Level.SEVERE, "Unable to build mosaic", e);
        } finally {
            builder.dispose();
        }        

    }

