	public boolean parseArgs(String[] args) {
		if (!super.parseArgs(args))
			return false;
		// ////////////////////////////////////////////////////////////////
		//
		// parsing command line parameters and setting up
		// Mosaic Index Builder options
		//
		// ////////////////////////////////////////////////////////////////
		sourcePath = (String) getOptionValue(locationOpt);

		// tile dim
		if (hasOption(tileDimOpt)) {
			final String tileDim = (String) getOptionValue(tileDimOpt);
			final String[] pairs = tileDim.split(",");
			tileW = Integer.parseInt(pairs[0]);
			if(pairs.length>1){
			    tileH = Integer.parseInt(pairs[1]);
			} else {
			    tileH=tileW;
			}
		}
		// //
		//
		// scale factor
		//
		// //
		final String scaleF = (String) getOptionValue(scaleFactorOpt);
		downsampleStep = Integer.parseInt(scaleF);

		// //
		//
		// wildcard
		//
		// //
		if (hasOption(wildcardOpt))
			wildcardString = (String) getOptionValue(wildcardOpt);

	        // //
                //
                // externalOverviews overviews
                //
                // //
                if (hasOption(externalOpt))
                        externalOverviews = Boolean.parseBoolean((String)getOptionValue(externalOpt));
                
                
		// //
		//
		// scaling algorithm (default to nearest neighbour)
		//
		// //
		scaleAlgorithm = (String) getOptionValue(scaleAlgorithmOpt);
		if (scaleAlgorithm == null)
			scaleAlgorithm = "nn";

		// //
		//
		// number of steps
		//
		// //
		numSteps = Integer.parseInt((String) getOptionValue(numStepsOpt));

		// //
		//
		// Compression params
		//
		// //
		// index name
		if (hasOption(compressionTypeOpt)) {
			compressionScheme = (String) getOptionValue(compressionTypeOpt);
			if (compressionScheme == "")
				compressionScheme = null;
		}
		if (hasOption(compressionRatioOpt)) {
			try {
				compressionRatio = Double
						.parseDouble((String) getOptionValue(compressionRatioOpt));
			} catch (Exception e) {
				compressionRatio = Double.NaN;
			}

		}

		return true;

	}

