	public boolean parseArgs(String[] args) {
		if (!super.parseArgs(args))
			return false;
		// ////////////////////////////////////////////////////////////////
		//
		// parsing command line parameters and setting up
		// Pyramid Builder options
		//
		// ////////////////////////////////////////////////////////////////
		inputLocation = new File((String) getOptionValue(locationOpt));

		// output files' directory
		if (hasOption(outputLocationOpt))
			outputLocation = new File(
					(String) getOptionValue(outputLocationOpt));
		else
			outputLocation = new File(inputLocation.getParentFile(), "pyramid");

		// output file name
		if (hasOption(nameOpt))
			name = (String) getOptionValue(nameOpt);
		else
			name = "pyramid";

		// shall we overwrite the output dirs?
		overwriteOutputDirs = hasOption(overwriteOpt);

		// tile dim
		final String tileDim = (String) getOptionValue(tileDimOpt);
		String[] pairs = tileDim.split(",");
		tileW = Integer.parseInt(pairs[0]);
		tileH = Integer.parseInt(pairs[1]);

		// //
		//
		// scale factor
		//
		// //
		final String scaleF = (String) getOptionValue(scaleFactorOpt);
		scaleFactor = Integer.parseInt(scaleF);

		// //
		//
		// scaling algorithm (default to nearest neighbour)
		//
		// //
		scaleAlgorithm = (String) getOptionValue(scaleAlgorithmOpt);
		if (scaleAlgorithm == null)
			scaleAlgorithm = "nn";

		// //
		//
		// number of steps
		//
		// //
		numSteps = Integer.parseInt((String) getOptionValue(numStepsOpt));

		// //
		//
		// Compression params
		//
		// //
		// index name
		if (hasOption(compressionTypeOpt)) {
			compressionScheme = (String) getOptionValue(compressionTypeOpt);
			if (compressionScheme == "")
				compressionScheme = null;
		}
		if (hasOption(compressionRatioOpt)) {
			try {
				compressionRatio = Double
						.parseDouble((String) getOptionValue(compressionRatioOpt));
			} catch (Exception e) {
				compressionRatio = Double.NaN;
			}

		}

		// //
		//
		// Internal Tile dim
		//
		// //
		final String internalTileDim = (String) getOptionValue(internalTileDimOpt);
		if (internalTileDim != null && internalTileDim.length() > 0) {
			pairs = internalTileDim.split(",");
			internalTileWidth = Integer.parseInt(pairs[0]);
			internalTileHeight = Integer.parseInt(pairs[1]);
		} else {
			internalTileWidth = tileW;
			internalTileHeight = tileH;
		}

		return true;

	}

