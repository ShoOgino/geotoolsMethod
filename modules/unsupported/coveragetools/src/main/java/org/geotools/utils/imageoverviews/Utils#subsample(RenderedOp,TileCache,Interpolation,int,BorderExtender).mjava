    /**
    	 * This methods built up a RenderedOp for subsampling an image in order to
    	 * create various previes. I wanted to use the filtered subsample but It was
    	 * giving me problems in the native libraries therefore I am doing a two
    	 * steps downsampling:
    	 * 
    	 * Step 1: low pass filtering.
    	 * 
    	 * Step 2: Subsampling.
    	 * 
    	 * @param src
    	 *            Image to subsample.
    	 * @param scaleTC 
    	 * @param scale
    	 *            Scale factor.
    	 * @param interpolation
    	 *            Interpolation method used.
    	 * @param tileHints
    	 *            Hints provided.
    	 * 
    	 * @return The subsampled RenderedOp.
    	 */
    	static RenderedOp subsample(RenderedOp src, TileCache scaleTC, final Interpolation interpolation, int downsampleStep,BorderExtender borderExtender) {
    		final RenderingHints newHints = new RenderingHints(JAI.KEY_TILE_CACHE,scaleTC);
    		newHints.add(ImageUtilities.DONT_REPLACE_INDEX_COLOR_MODEL);
    		newHints.add(new RenderingHints(JAI.KEY_BORDER_EXTENDER, borderExtender));
    		
    		return ScaleDescriptor.create(src, 
    		        Float.valueOf(1.0f/downsampleStep), 
    		        Float.valueOf(1.0f/downsampleStep), 
    		        Float.valueOf(0.0f), 
    		        Float.valueOf(0.0f), 
    		        interpolation, 
    		        newHints);
    		
    //		// using filtered subsample operator to do a subsampling
    //		final ParameterBlockJAI pb = new ParameterBlockJAI("filteredsubsample");
    //		pb.addSource(src);
    //		pb.setParameter("scaleX", Integer.valueOf(downsampleStep));
    //		pb.setParameter("scaleY", Integer.valueOf(downsampleStep));
    //		pb.setParameter("qsFilterArray", new float[] { 1.0f });
    //		pb.setParameter("Interpolation", interpolation);
    //		// remember to add the hint to avoid replacement of the original
    //		// IndexColorModel
    //		// in future versions we might want to make this parametrix XXX TODO
    //		// @task
    //		return JAI.create("filteredsubsample", pb, newHints);
    	}

