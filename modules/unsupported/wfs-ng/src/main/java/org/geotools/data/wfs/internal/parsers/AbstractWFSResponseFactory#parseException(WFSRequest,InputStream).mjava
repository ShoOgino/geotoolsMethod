    /**
     * 
     * @param originatingRequest
     * @param inputStream
     * @return An {@link WFSException}
     * @throws IOException in case the parsing of the exception report failed
     */
    public WFSException parseException(WFSRequest originatingRequest, InputStream inputStream)
            throws IOException {
        Parser parser = new Parser(originatingRequest.getStrategy().getWfsConfiguration());
        EntityResolver resolver = originatingRequest.getStrategy().getConfig().getEntityResolver();
        if (resolver != null) {
            parser.setEntityResolver(resolver);
        }
        Object parsed;
        try {
            parsed = parser.parse(inputStream);
            if (!(parsed instanceof net.opengis.ows10.ExceptionReportType
                    || parsed instanceof net.opengis.ows11.ExceptionReportType)) {
                String info = String.valueOf(parsed);
                throw new IOException("Unrecognized server error: " + info);
            }
        } catch (Exception e) {
            return new WFSException("Exception parsing server exception report", e);
        }
        if (parsed instanceof net.opengis.ows10.ExceptionReportType) {
            net.opengis.ows10.ExceptionReportType report = (net.opengis.ows10.ExceptionReportType) parsed;
            @SuppressWarnings("unchecked")
            List<net.opengis.ows10.ExceptionType> exceptions = report.getException();

            StringBuilder msg = new StringBuilder("WFS returned an exception.");
            if (originatingRequest != null) {
                msg.append(" Originating Request: ");
                msg.append(originatingRequest.toString());
            }
            WFSException result = new WFSException(msg.toString());
            for (net.opengis.ows10.ExceptionType ex : exceptions) {
                @SuppressWarnings("unchecked")
                List<String> texts = ex.getExceptionText();
                result.addExceptionDetails(ex.getExceptionCode(), ex.getLocator(), texts);
            }
            return result;
        } else if (parsed instanceof net.opengis.ows11.ExceptionReportType){
            net.opengis.ows11.ExceptionReportType report = (net.opengis.ows11.ExceptionReportType) parsed;
            @SuppressWarnings("unchecked")
            List<net.opengis.ows11.ExceptionType> exceptions = report.getException();

            StringBuilder msg = new StringBuilder("WFS returned an exception.");
            if (originatingRequest != null) {
                msg.append(" Originating Request: ");
                msg.append(originatingRequest.toString());
            }
            WFSException result = new WFSException(msg.toString());
            for (net.opengis.ows11.ExceptionType ex : exceptions) {
                @SuppressWarnings("unchecked")
                List<String> texts = ex.getExceptionText();
                result.addExceptionDetails(ex.getExceptionCode(), ex.getLocator(), texts);
            }
            return result;
        } else {
            net.opengis.ows20.ExceptionReportType report = (net.opengis.ows20.ExceptionReportType) parsed;
            List<net.opengis.ows20.ExceptionType> exceptions = report.getException();

            StringBuilder msg = new StringBuilder("WFS returned an exception.");
            if (originatingRequest != null) {
                msg.append(" Originating Request: ");
                msg.append(originatingRequest.toString());
            }
            WFSException result = new WFSException(msg.toString());
            for (net.opengis.ows20.ExceptionType ex : exceptions) {
                String text = ex.getExceptionText();
                result.addExceptionDetails(ex.getExceptionCode(), ex.getLocator(), Collections.singletonList(text));
            }
            return result;
        }


    }

