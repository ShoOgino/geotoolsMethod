    /**
     * Creates a new instance of flat feature, which must take a flat feature
     * type schema and all attributes as arguments.
     *
     * @param schema Feature type schema for this flat feature.
     * @param attributes Initial attributes for this feature.
     * @param featureID The unique ID for this feature.
     *
     * @throws IllegalAttributeException Attribtues do not conform to feature
     *         type schema.
     * @throws NullPointerException if schema is null.
     */
    protected LenientFeature(List<Attribute> attributes, SimpleFeatureType schema, String featureID)
        throws IllegalAttributeException, NullPointerException {
        super( preFix(attributes, schema), checkSchema( schema),
              SimpleFeatureBuilder.createDefaultFeatureIdentifier(featureID ));
        // superclass just punts the values in ... we are going to validate if needed
        constructing=true;
        List<Object> values = toValues( attributes );
        //values = fixed( values );
        setAttributes(values);
        constructing=false;
    }

