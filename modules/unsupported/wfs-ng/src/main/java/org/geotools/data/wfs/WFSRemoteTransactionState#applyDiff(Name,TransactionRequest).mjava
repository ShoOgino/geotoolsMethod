    private List<MutableFeatureId> applyDiff(
            final Name localTypeName, TransactionRequest transactionRequest) throws IOException {

        final WFSContentState localState = localStates.get(localTypeName);
        final WFSLocalTransactionState localTransactionState =
                localState.getLocalTransactionState();
        final WFSDiff diff = localTransactionState.getDiff();

        List<MutableFeatureId> addedFeatureIds = new LinkedList<>();

        final QName remoteTypeName = dataStore.getRemoteTypeName(localTypeName);

        applyBatchUpdates(remoteTypeName, diff, transactionRequest);

        final Set<String> ignored = diff.getBatchModified();

        final SimpleFeatureType remoteType = dataStore.getRemoteSimpleFeatureType(remoteTypeName);

        // Create a single insert element with all the inserts for this type
        final Map<String, SimpleFeature> added = diff.getAdded();
        if (!added.isEmpty()) {
            Insert insert = transactionRequest.createInsert(remoteTypeName);

            SimpleFeatureBuilder builder = new SimpleFeatureBuilder(remoteType);
            for (String fid : diff.getAddedOrder()) {
                if (ignored.contains(fid)) {
                    continue;
                }
                SimpleFeature localFeature = added.get(fid);
                MutableFeatureId addedFid = (MutableFeatureId) localFeature.getIdentifier();
                addedFeatureIds.add(addedFid);

                SimpleFeature remoteFeature = SimpleFeatureBuilder.retype(localFeature, builder);

                insert.add(remoteFeature);
            }
            transactionRequest.add(insert);
        }

        final Map<String, SimpleFeature> modified = diff.getModified();

        // Create a single delete element with all the deletes for this type
        Set<Identifier> ids = new LinkedHashSet<>();
        for (Map.Entry<String, SimpleFeature> entry : modified.entrySet()) {
            if (!(Diff.NULL == entry.getValue())) {
                continue; // not a delete
            }
            String rid = entry.getKey();
            if (ignored.contains(rid)) {
                continue;
            }
            Identifier featureId = featureId(rid);
            ids.add(featureId);
        }
        if (!ids.isEmpty()) {
            Filter deleteFilter = dataStore.getFilterFactory().id(ids);
            Delete delete = transactionRequest.createDelete(remoteTypeName, deleteFilter);
            transactionRequest.add(delete);
        }

        // Create one update element per modified feature. Batch modified ones should have been
        // added as a single update element at applyBatchUpdate before
        for (Map.Entry<String, SimpleFeature> entry : modified.entrySet()) {
            String fid = entry.getKey();
            SimpleFeature feature = entry.getValue();

            if (Diff.NULL == feature) {
                continue; // not an update
            }
            if (ignored.contains(fid)) {
                continue;
            }
            applySingleUpdate(remoteTypeName, feature, transactionRequest);
        }

        return addedFeatureIds;
    }

