    /**
     * Go through FeatureType description and convert to a SimpleFeatureType. Also ignores
     * AbstractFeatureType contributions such as name etc...
     */
    public static SimpleFeatureType toSimpleFeatureType(final FeatureType realType)
            throws DataSourceException {
        List<PropertyDescriptor> attributes;
        Collection<PropertyDescriptor> descriptors = realType.getDescriptors();
        attributes = new ArrayList<PropertyDescriptor>(descriptors);
        List<String> simpleProperties = new ArrayList<String>();

        // HACK HACK!! the parser sets no namespace to the properties so we're
        // doing a hardcode property name black list
        final Set<String> ignoreList =
                new HashSet<String>(
                        Arrays.asList(
                                new String[] {
                                    GML.location.getLocalPart(),
                                            GML.metaDataProperty.getLocalPart(),
                                    GML.description.getLocalPart(), GML.name.getLocalPart(),
                                    GML.boundedBy.getLocalPart()
                                }));

        if (attributes.size() > ignoreList.size()) {
            Set<String> firstAtts = new HashSet<String>();
            for (int i = 0; i < ignoreList.size(); i++) {
                firstAtts.add(attributes.get(i).getName().getLocalPart());
            }
            if (ignoreList.equals(firstAtts)) {
                attributes = attributes.subList(ignoreList.size(), attributes.size());
            }
        }
        // / HACK END

        for (PropertyDescriptor descriptor : attributes) {
            Class<?> binding = descriptor.getType().getBinding();
            int maxOccurs = descriptor.getMaxOccurs();
            Name name = descriptor.getName();
            if (GML.NAMESPACE.equals(name.getNamespaceURI())
                    || maxOccurs > 1
                    || Object.class.equals(binding)) {
                LOGGER.fine(
                        "Ignoring multivalued or complex property "
                                + name
                                + " on feature type "
                                + realType.getName());
                continue;
            }

            simpleProperties.add(((AttributeDescriptor) descriptor).getLocalName());
        }

        String[] properties = simpleProperties.toArray(new String[simpleProperties.size()]);
        SimpleFeatureType subsetType;
        try {
            // TODO: will need to handle FeatureType instead of direct casting
            // to SimpleFeatureType
            // once FeatureType support lands on trunk
            subsetType = DataUtilities.createSubType((SimpleFeatureType) realType, properties);
        } catch (SchemaException e) {
            throw new DataSourceException(e);
        }
        return subsetType;
    }

