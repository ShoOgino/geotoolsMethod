    /**
     * Parses the FeatureType pointed out by the {@code schemaLocation} URL and returns a subset
     * consisting only of the simple attributes found on the original schema.
     * <p>
     * Aditionally, the default properties inherited from {@code gml:AbstractFeatureType} (ie,
     * gml:name, gml:location, etc), will be ignored.
     * </p>
     * <p>
     * The returned {@link SimpleFeatureType} default geometry, thus, will be the first geometric
     * attribute distinct from {@code gml:location}.
     * </p>
     * Note: this code is borrowed and adapted from {@link ParserHandler#startDocument()}
     * 
     * @param wfsConfiguration
     *            the WFS configuration for the parser to grab {@link Binding}s from.
     * @param featureName
     *            the qualified name of the Feature element in the schema, for which the feature
     *            type is to be parsed.
     * @param schemaLocation
     *            the location of the root schema file from where to parse the feature type.
     * @param crs
     *            the CRS to be assigned to the geometric attributes in the parsed feature type.
     *            This information shall be provided here as the schema itself has no knowledge of
     *            the CRS used.
     * @return
     * @throws IOException
     */
    public static SimpleFeatureType parseSimpleFeatureType(final Configuration wfsConfiguration,
            final QName featureName, final URL schemaLocation, final CoordinateReferenceSystem crs)
            throws IOException {
        final SimpleFeatureType realType = parse(wfsConfiguration, featureName, schemaLocation, crs);
        SimpleFeatureType subsetType = toSimpleFeatureType(realType);
        return subsetType;
    }

