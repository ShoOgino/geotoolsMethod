    @Override
    @SuppressWarnings("CollectionIncompatibleType")
    protected Map<String, String> buildGetFeatureParametersForGET(GetFeatureRequest query) {
        Map<String, String> kvp = null;
        if (query.isStoredQuery()) {
            FeatureTypeInfoImpl featureTypeInfo =
                    (FeatureTypeInfoImpl) getFeatureTypeInfo(query.getTypeName());
            StoredQueryDescriptionType desc = query.getStoredQueryDescriptionType();

            StoredQueryConfiguration config = null;

            kvp = new HashMap<>();

            kvp.put("SERVICE", "WFS");
            kvp.put("VERSION", getVersion());
            kvp.put("REQUEST", "GetFeature");
            kvp.put("STOREDQUERY_ID", desc.getId());

            Filter originalFilter = query.getFilter();

            query.setUnsupportedFilter(originalFilter);

            Map<String, String> viewParams = null;
            if (query.getRequestHints() != null) {
                @SuppressWarnings("unchecked")
                Map<String, String> cast =
                        (Map<String, String>) query.getHints().get(Hints.VIRTUAL_TABLE_PARAMETERS);
                viewParams = cast;

                config = (StoredQueryConfiguration) query.getHints().get(CONFIG_KEY);
            }

            List<ParameterType> params =
                    new ParameterTypeFactory(config, desc, featureTypeInfo)
                            .buildStoredQueryParameters(viewParams, originalFilter);

            for (ParameterType p : params) {
                kvp.put(p.getName(), p.getValue());
            }

        } else {
            kvp = super.buildGetFeatureParametersForGET(query);

            // Very crude
            if (query.getMaxFeatures() != null) {
                String count = kvp.remove("MAXFEATURES");
                kvp.put("COUNT", count);
            }
            // Also crude
            String typeName = kvp.remove("TYPENAME");
            kvp.put("TYPENAMES", typeName);
        }

        return kvp;
    }

