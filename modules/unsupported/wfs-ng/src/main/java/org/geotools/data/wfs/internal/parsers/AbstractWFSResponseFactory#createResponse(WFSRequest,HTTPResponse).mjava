    /**
     * Returns either a properly parsed response object or an exception depending on what the server
     * returned.
     *
     * <p>Ideally, the decision should only be taken based on the WFS response's content-type HTTP
     * header. Truth is, some WFS implementations does not set proper HTTP response headers so a bit
     * of an heuristic may be needed in order to identify the actual response.
     *
     * @see WFSResponseFactory#createParser(WFSResponse)
     * @see FeatureCollectionParser
     * @see ExceptionReportParser
     */
    @Override
    public WFSResponse createResponse(WFSRequest request, HTTPResponse response)
            throws IOException {

        // We can't rely on the server returning the correct output format. Some, for example
        // CubeWerx, upon a successful GetFeature request, set the response's content-type
        // header to plain "text/xml" instead of "text/xml;subtype=gml/3.1.1". So we'll do a bit
        // of heuristics to find out what it actually returned
        final int buffSize;
        if (LOGGER.isLoggable(Level.FINER)) {
            buffSize = 4096;
        } else {
            buffSize = 512;
        }
        PushbackInputStream pushbackIn =
                new PushbackInputStream(response.getResponseStream(), buffSize);
        byte[] buff = new byte[buffSize];
        int readCount = 0;
        int r;
        while ((r = pushbackIn.read(buff, readCount, buffSize - readCount)) != -1) {
            readCount += r;
            if (readCount == buffSize) {
                break;
            }
        }

        String charset = response.getResponseHeader("Charset");
        try {
            Charset.forName(charset);
        } catch (Exception e) {
            charset = "UTF-8";
        }

        StringBuilder head = new StringBuilder();
        try (BufferedReader reader =
                new BufferedReader(
                        new InputStreamReader(new ByteArrayInputStream(buff), charset))) {
            String line;
            while ((line = reader.readLine()) != null) {
                head.append(line).append('\n');
            }
        }
        if (LOGGER.isLoggable(Level.FINER)) {
            LOGGER.finer("Response head:\n" + head);
        }

        pushbackIn.unread(buff, 0, readCount);

        if (isValidResponseHead(head.toString())) {
            return createResponseImpl(request, response, pushbackIn);
        } else if (head.indexOf("ExceptionReport") > 0) {
            throw parseException(request, pushbackIn);
        } else {
            throw new IllegalStateException("Unkown server response: " + head);
        }
    }

