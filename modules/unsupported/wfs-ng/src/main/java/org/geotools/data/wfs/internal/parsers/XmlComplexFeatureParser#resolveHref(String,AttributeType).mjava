    /**
     * Given a href and an expected type, return either the actual manifestation of that href's
     * target or a placeholder object. The real instance will be returned if it's already been
     * parsed, otherwise the placeholder will be returned. The placeholder will automatically be
     * replaced upon calling RegisterGmlTarget(...) once the actual object is parsed.
     *
     * @param href The href that you wish to resolve.
     * @param expectedType The attribute type that you expect the href to point to.
     * @return An attribute of the type specified, either the actual attribute or a placeholder.
     */
    private Attribute resolveHref(String href, AttributeType expectedType) {
        // See what kind of href it is:
        if (href.startsWith("#")) {
            String hrefId = href.substring(1);

            // Does the target of this href already exist in the
            // discoveredComplexAttributes object?
            if (discoveredComplexAttributes.containsKey(hrefId)) {
                // If it does, we can just return that.
                return discoveredComplexAttributes.get(hrefId);
            } else {
                // If not, then we create a placeholderComplexAttribute instead:
                Attribute placeholderComplexAttribute =
                        new AttributeImpl(Collections.<Property>emptyList(), expectedType, null);

                // I must maintain a reference back to this object so that I can
                // change it once its target is found:
                if (!placeholderComplexAttributes.containsKey(hrefId)) {
                    placeholderComplexAttributes.put(hrefId, new ArrayList<>());
                }

                // Adding it to a list allows us to have multiple hrefs pointing
                // to the same target.
                placeholderComplexAttributes.get(hrefId).add(placeholderComplexAttribute);
                return placeholderComplexAttribute;
            }
        } else {
            // NOTE: You could modify this to make it handle remote hrefs if
            // need be.
            // This is temporary code to get things to work:
            Attribute placeholderComplexAttribute =
                    new AttributeImpl(Collections.<Property>emptyList(), expectedType, null);

            return placeholderComplexAttribute;
        }
    }

