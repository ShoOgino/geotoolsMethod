    @Test
    public void testGetFeatureStoreTransactionSupport() throws Exception {
        try (Transaction t1 = new DefaultTransaction(); Transaction t2 = new DefaultTransaction()) {
    
            SimpleFeatureStore road = (SimpleFeatureStore) data.getFeatureSource(first.typeName);
            SimpleFeatureStore road1 = (SimpleFeatureStore) data.getFeatureSource(first.typeName);
            SimpleFeatureStore road2 = (SimpleFeatureStore) data.getFeatureSource(first.typeName);
    
            road1.setTransaction(t1);
            road2.setTransaction(t2);
    
            SimpleFeature feature;
            SimpleFeature[] ORIGINAL = first.features;
            SimpleFeature[] REMOVE = new SimpleFeature[ORIGINAL.length - 1];
            SimpleFeature[] ADD = new SimpleFeature[ORIGINAL.length + 1];
            SimpleFeature[] FINAL = new SimpleFeature[ORIGINAL.length];
            int i;
            int index;
            index = 0;
    
            for (i = 0; i < ORIGINAL.length; i++) {
                feature = ORIGINAL[i];
    
                if (!feature.getID().equals(first.features[0].getID())) {
                    REMOVE[index++] = feature;
                }
            }
    
            for (i = 0; i < ORIGINAL.length; i++) {
                ADD[i] = ORIGINAL[i];
            }
    
            ADD[i] = first.newFeature;
    
            for (i = 0; i < REMOVE.length; i++) {
                FINAL[i] = REMOVE[i];
            }
    
            FINAL[i] = first.newFeature;
    
            // start of with ORIGINAL
            assertTrue(covers(road.getFeatures().features(), ORIGINAL));
    
            // road1 removes road.rd1 on t1
            // -------------------------------
            // - tests transaction independence from DataStore
            road1.removeFeatures(first.feat1Filter);
    
            // still have ORIGIONAL and t1 has REMOVE
            assertTrue(covers(road.getFeatures().features(), ORIGINAL));
            assertTrue(covers(road1.getFeatures().features(), REMOVE));
    
            // road2 adds road.rd4 on t2
            // ----------------------------
            // - tests transaction independence from each other
            SimpleFeatureCollection collection = DataUtilities
                    .collection(new SimpleFeature[] { first.newFeature, });
            road2.addFeatures(collection);
    
            // We still have ORIGIONAL, t1 has REMOVE, and t2 has ADD
            assertTrue(covers(road.getFeatures().features(), ORIGINAL));
            assertTrue(covers(road1.getFeatures().features(), REMOVE));
            assertTrue(coversLax(road2.getFeatures().features(), ADD));
    
            // commit t1
            // ---------
            // -ensure that delayed writing of transactions takes place
            //
            t1.commit();
    
            // We now have REMOVE, as does t1 (which has not additional diffs)
            // t2 will have FINAL
            assertTrue(covers(road.getFeatures().features(), REMOVE));
            assertTrue(covers(road1.getFeatures().features(), REMOVE));
            assertTrue(coversLax(road2.getFeatures().features(), FINAL));
    
            // commit t2
            // ---------
            // -ensure that everyone is FINAL at the end of the day
            t2.commit();
    
            // We now have Number( remove one and add one)
            assertTrue(coversLax(road.getFeatures().features(), FINAL));
            assertTrue(coversLax(road1.getFeatures().features(), FINAL));
            assertTrue(coversLax(road2.getFeatures().features(), FINAL));
        }
    }

