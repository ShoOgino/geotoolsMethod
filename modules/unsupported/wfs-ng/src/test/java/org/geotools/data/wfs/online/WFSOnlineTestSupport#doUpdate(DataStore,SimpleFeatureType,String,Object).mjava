    public static void doUpdate(
            DataStore ds, SimpleFeatureType ft, String attributeToChange, Object newValue)
            throws Exception {
        try (Transaction t = new DefaultTransaction()) {
            SimpleFeatureStore fs = (SimpleFeatureStore) ds.getFeatureSource(ft.getTypeName());
            fs.setTransaction(t);

            AttributeDescriptor at = ft.getDescriptor(attributeToChange);
            assertNotNull("Attribute " + attributeToChange + " does not exist", at);

            FilterFactory filterFactory = CommonFactoryFinder.getFilterFactory(null);
            Filter f =
                    filterFactory.equals(
                            filterFactory.property(at.getLocalName()),
                            filterFactory.literal(newValue));

            // System.out.println("Update Read 1");
            int count1 = 0;
            Object oldValue = null;
            try (SimpleFeatureIterator fr = fs.getFeatures(f).features()) {
                if (fr != null)
                    while (fr.hasNext()) {
                        count1++;
                        oldValue = fr.next().getAttribute(attributeToChange);
                    }
            }
            // System.out.println("Update Modify");
            fs.modifyFeatures(at.getName(), newValue, Filter.INCLUDE);

            // System.out.println("Update Read 2");
            int count2 = 0;
            try (SimpleFeatureIterator fr = fs.getFeatures(f).features()) {

                while (fr.hasNext()) {
                    count2++;
                    fr.next();
                }
            }
            assertTrue("Read 1 == " + count1 + " Read 2 == " + count2, count2 > count1);

            // System.out.println("Update Commit");
            try {
                t.commit();

                // System.out.println("Update Read 3");
                int count3 = 0;
                try (SimpleFeatureIterator fr = fs.getFeatures(f).features()) {
                    while (fr.hasNext()) {
                        count3++;
                        fr.next();
                    }
                }
                assertEquals(count2, count3);
            } finally {
                // cleanup
                fs.modifyFeatures(at.getName(), oldValue, Filter.INCLUDE);
                t.commit();
            }
        }
    }

