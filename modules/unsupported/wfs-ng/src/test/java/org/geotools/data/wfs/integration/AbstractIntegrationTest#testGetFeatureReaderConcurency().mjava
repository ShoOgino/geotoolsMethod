    @Test
    public void testGetFeatureReaderConcurency() throws Exception {
        Query query = new Query(first.typeName);
        try (FeatureReader<SimpleFeatureType, SimpleFeature> reader1 =
                        data.getFeatureReader(query, Transaction.AUTO_COMMIT);
                FeatureReader<SimpleFeatureType, SimpleFeature> reader2 =
                        data.getFeatureReader(query, Transaction.AUTO_COMMIT);
                FeatureReader<SimpleFeatureType, SimpleFeature> reader3 =
                        data.getFeatureReader(
                                new Query(second.typeName), Transaction.AUTO_COMMIT)) {

            while (reader1.hasNext() || reader2.hasNext() || reader3.hasNext()) {
                assertTrue(containsFeature(first.features, reader1.next()));
                assertTrue(containsFeature(first.features, reader2.next()));

                if (reader3.hasNext()) {
                    assertTrue(containsFeature(second.features, reader3.next()));
                }
            }

            try {
                reader1.next();
                fail("next should fail with an IOException or NoSuchElementException");
            } catch (IOException | NoSuchElementException expected) {
            }

            try {
                reader2.next();
                fail("next should fail with an IOException or NoSuchElementException");
            } catch (IOException | NoSuchElementException expected) {
            }

            try {
                reader3.next();
                fail("next should fail with an IOException or NoSuchElementException");
            } catch (IOException | NoSuchElementException expected) {
            }
        }
    }

