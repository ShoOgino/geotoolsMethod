    /**
     * Uses a {@link PullParserFeatureReader} to parse the features while traversing the feature
     * collection in a test {@code wfs:FeatureCollection} document; {@code assertor} is a visitor
     * provided by the actual unit test calling this method, every feature fetched is passed to the
     * visitor who contains the specific assertions.
     *
     * @param featureName the name of the features (not the feature type) expected
     * @param getFeatureResultTestFile the name of the test file name to load in order to simulate
     *     the response of a GetFeature request
     * @param assertor a FeatureVisitor to assert the contents or structure of the features
     * @param expectedFeatureCount the number of features there should be on the feature collection,
     *     an assertion is made at the end of the method.
     * @param schemaName
     * @throws Exception
     */
    private void testParseGetFeatures(
            final QName featureName,
            final SimpleFeatureType queryFeatureType,
            final GetFeatureParser parser,
            final FeatureVisitor assertor,
            final int expectedFeatureCount)
            throws Exception {

        int featureCount = 0;
        SimpleFeature feature;

        try {
            for (int i = 0; i < expectedFeatureCount; i++) {
                feature = parser.parse();
                assertNotNull(feature);
                featureCount++;
                assertor.visit(feature);
            }
            feature = parser.parse();
            assertNull(feature);
        } finally {
            parser.close();
        }

        assertEquals(expectedFeatureCount, featureCount);
    }

