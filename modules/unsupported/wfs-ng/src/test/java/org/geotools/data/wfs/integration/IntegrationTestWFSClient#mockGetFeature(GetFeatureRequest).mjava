    @SuppressWarnings("PMD.CloseResource") // readers are wrapped and returned in the response
    protected Response mockGetFeature(GetFeatureRequest request) throws IOException {

        final QName typeName = request.getTypeName();

        String resource = "GetFeature_" + typeName.getLocalPart() + ".xml";
        URL contentUrl = new URL(baseDirectory, resource);

        String outputFormat = request.getOutputFormat();

        HTTPResponse httpResponse = new TestHttpResponse(outputFormat, "UTF-8", contentUrl);

        WFSResponse response = request.createResponse(httpResponse);

        if (!(response instanceof GetFeatureResponse)) {
            return response;
        }

        final GetFeatureResponse gfr = (GetFeatureResponse) response;
        final GetParser<SimpleFeature> allFeatures = gfr.getFeatures();

        // register custom scheme
        if (allFeatures instanceof PullParserFeatureReader) {
            ((PullParserFeatureReader) allFeatures)
                    .setContextCustomizer(
                            context -> {
                                QName key =
                                        new QName(
                                                "http://www.openplans.org/spearfish",
                                                "schemaLocationResolver");
                                context.registerComponentInstance(
                                        key,
                                        (XSDSchemaLocationResolver)
                                                (xsdSchema, namespaceURI, schemaLocationURI) -> {
                                                    if (schemaLocationURI.startsWith(
                                                            "DescribeFeatureType")) {
                                                        try {
                                                            return new URL(
                                                                            baseDirectory,
                                                                            schemaLocationURI)
                                                                    .toString();
                                                        } catch (MalformedURLException e) {
                                                            return null;
                                                        }
                                                    }
                                                    return schemaLocationURI;
                                                });
                            });
        }

        final List<SimpleFeature> originalFeatures = new ArrayList<>();
        {
            SimpleFeature feature;
            while ((feature = allFeatures.parse()) != null) {
                originalFeatures.add(feature);
            }
        }

        WFSStrategy strategy = getStrategy();

        final Filter serverFiler = strategy.splitFilters(typeName, request.getFilter())[0];

        final Diff diff = diff(typeName);

        for (Iterator<SimpleFeature> it = originalFeatures.iterator(); it.hasNext(); ) {
            if (!serverFiler.evaluate(it.next())) {
                it.remove();
            }
        }

        FeatureReader<SimpleFeatureType, SimpleFeature> allFeaturesReader = null;
        if (!originalFeatures.isEmpty()) {
            allFeaturesReader = DataUtilities.reader(originalFeatures);
        }

        final DiffFeatureReader<SimpleFeatureType, SimpleFeature> serverFilteredReader =
                new DiffFeatureReader<>(allFeaturesReader, diff, serverFiler);
        final GetParser<SimpleFeature> filteredParser =
                new GetParser<SimpleFeature>() {

                    @Override
                    public void setGeometryFactory(GeometryFactory geometryFactory) {
                        // TODO Auto-generated method stub
                    }

                    @Override
                    public SimpleFeature parse() throws IOException {
                        if (!serverFilteredReader.hasNext()) {
                            return null;
                        }
                        return serverFilteredReader.next();
                    }

                    @Override
                    @SuppressWarnings("PMD.CloseResource") // reaaders are from memory lists
                    public int getNumberOfFeatures() {
                        if (-1 != allFeatures.getNumberOfFeatures()) {
                            // only if the original response included number of features (i.e. the
                            // server
                            // does advertise it)

                            FeatureReader<SimpleFeatureType, SimpleFeature> all = null;
                            try {
                                if (!originalFeatures.isEmpty()) {
                                    all = DataUtilities.reader(originalFeatures);
                                }
                                final DiffFeatureReader<SimpleFeatureType, SimpleFeature>
                                        serverFiltered = new DiffFeatureReader<>(all, diff);
                                try {
                                    int count = 0;
                                    while (serverFiltered.hasNext()) {
                                        serverFiltered.next();
                                        count++;
                                    }
                                    return count;
                                } finally {
                                    serverFiltered.close();
                                }
                            } catch (Exception e) {
                                java.util.logging.Logger.getGlobal()
                                        .log(java.util.logging.Level.INFO, "", e);
                                throw new RuntimeException(e);
                            }
                        }
                        return -1;
                    }

                    @Override
                    public FeatureType getFeatureType() {
                        return allFeatures.getFeatureType();
                    }

                    @Override
                    public void close() throws IOException {
                        serverFilteredReader.close();
                    }
                };

        try {
            return new GetFeatureResponse(request, httpResponse, filteredParser);
        } catch (ServiceException e) {
            throw new IOException(e);
        }
    }

