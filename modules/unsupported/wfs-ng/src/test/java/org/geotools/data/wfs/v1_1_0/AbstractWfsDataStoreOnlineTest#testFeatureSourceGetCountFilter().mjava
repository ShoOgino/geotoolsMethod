    /**
     * Performs a FeatureSource.getCount(Query) with the constructor provided
     * fid filter if the filter is not null.
     * 
     * @throws IOException
     */
    @Test
    public void testFeatureSourceGetCountFilter() throws IOException {
        if (Boolean.FALSE.equals(serviceAvailable)) {
            return;
        }
        if (fidFilter == null) {
            LOGGER.info("Ignoring testFeatureSourceGetCountFilter "
                    + "since the subclass didn't provide a fid filter");
            return;
        }

        SimpleFeatureSource featureSource;
        featureSource = wfs.getFeatureSource(testType.FEATURETYPENAME);
        assertNotNull(featureSource);

        DefaultQuery query = new DefaultQuery(featureSource.getInfo().getName());
        query.setFilter(fidFilter);

        assertEquals(1, featureSource.getCount(query));
    }

