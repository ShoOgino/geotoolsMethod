    /** {@link BBOX} support? */
    @Test
    public void testDataStoreSupportsPlainBBOXInterface() throws Exception {
        if (Boolean.FALSE.equals(serviceAvailable)) {
            return;
        }
        final SimpleFeatureType ft = wfs.getSchema(testType.FEATURETYPENAME);
        SimpleFeatureSource featureSource = wfs.getFeatureSource(testType.FEATURETYPENAME);
        final ReferencedEnvelope bounds = featureSource.getBounds();
        String srsName = CRS.toSRS(bounds.getCoordinateReferenceSystem());

        final BBOX bbox =
                AxisOrder.EAST_NORTH == CRS.getAxisOrder(bounds.getCoordinateReferenceSystem())
                        ? ff.bbox(
                                "the_geom",
                                bounds.getMinX(),
                                bounds.getMinY(),
                                bounds.getMaxX(),
                                bounds.getMaxY(),
                                srsName)
                        : ff.bbox(
                                "the_geom",
                                bounds.getMinY(),
                                bounds.getMinX(),
                                bounds.getMaxY(),
                                bounds.getMaxX(),
                                srsName);

        /** This one does not implement the deprecated geotools filter interfaces */
        final BBOX strictBBox =
                new BBOX() {

                    @Override
                    public boolean evaluate(Object object) {
                        return bbox.evaluate(object);
                    }

                    @Override
                    public Object accept(FilterVisitor visitor, Object extraData) {
                        return bbox.accept(visitor, extraData);
                    }

                    @Override
                    public Expression getExpression2() {
                        return bbox.getExpression2();
                    }

                    @Override
                    public Expression getExpression1() {
                        return bbox.getExpression1();
                    }

                    @Override
                    public MatchAction getMatchAction() {
                        return MatchAction.ANY;
                    }

                    @Override
                    public BoundingBox getBounds() {
                        return bbox.getBounds();
                    }
                };

        final Query query = new Query(ft.getTypeName());
        query.setPropertyNames(new String[] {"the_geom"});
        query.setFilter(strictBBox);
        query.setHandle("testDataStoreSupportsPlainBBOXInterface");

        FeatureReader<SimpleFeatureType, SimpleFeature> reader;

        reader = wfs.getFeatureReader(query, Transaction.AUTO_COMMIT);
        assertNotNull(reader);
        assertTrue(reader.hasNext());
        reader.close();

        reader = wfs.getFeatureReader(query, Transaction.AUTO_COMMIT);
        assertNotNull(reader);
        assertTrue(reader.hasNext());
        reader.close();
    }

