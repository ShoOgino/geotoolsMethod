    /**
     * Parses the featuretype from the test file referenced by {@code schemaName} and returns a new,
     * subset FeatureType comprised of only the required {@code properties}
     * 
     * @param featureName
     *            the name of the Features produced for the target FeatureType (i.e.
     *            {@code topp:states} instead of {@code topp:states_Type})
     * @param schemaLocation2
     *            the location of the schema file under
     *            {@code org/geotools/data/wfs/impl/test-data/}
     * @param epsgCrsId
     *            the EPSG identifier for the feature type CRS (eg. {@code "EPSG:4326"})
     * @param properties
     *            the property names to include from the original schema in the one to be returned
     * @return a subset of the original featuretype containing only the required {@code properties}
     */
    private SimpleFeatureType getTypeView(final QName featureName, final URL schemaLocation,
            final String epsgCrsId, final String[] properties) throws Exception {

        CoordinateReferenceSystem crs = CRS.decode(epsgCrsId);

        SimpleFeatureType originalType = EmfAppSchemaParser.parseSimpleFeatureType(
                wfsConfiguration, featureName, schemaLocation, crs);

        SimpleFeatureType subsetType = DataUtilities.createSubType(originalType, properties);
        return subsetType;
    }

