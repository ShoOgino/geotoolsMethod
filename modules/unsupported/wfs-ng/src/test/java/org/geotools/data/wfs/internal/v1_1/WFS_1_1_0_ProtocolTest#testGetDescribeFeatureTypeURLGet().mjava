    /**
     * Test method for {@link StrictWFS_1_1_Strategy#buildDescribeFeatureTypeParametersForGET(java.lang.String)}
     * .
     * 
     * @throws IOException
     */
    @Test
    public void testGetDescribeFeatureTypeURLGet() throws IOException {
        StrictWFS_1_1_Strategy strategy = createTestProtocol(GEOS_ARCHSITES_11.CAPABILITIES,
                new StrictWFS_1_1_Strategy());
        try {
            strategy.buildDescribeFeatureTypeParametersForGET("nonExistentTypeName");
            fail("Expected IAE");
        } catch (IllegalArgumentException e) {
            assertTrue(true);
        }

        URL url;
        url = strategy.buildDescribeFeatureTypeParametersForGET(GEOS_ARCHSITES_11.FEATURETYPENAME);
        assertNotNull(url);
        String externalForm = url.toExternalForm();
        externalForm = URLDecoder.decode(externalForm, "UTF-8");

        assertTrue(externalForm.startsWith("http://localhost:8080/geoserver/wfs?"));
        assertTrue(externalForm.contains("REQUEST=DescribeFeatureType"));
        assertTrue(externalForm.contains("TYPENAME=sf:archsites"));
        assertTrue(externalForm.contains("VERSION=1.1.0"));
        assertTrue(externalForm.contains("SERVICE=WFS"));
        assertTrue(externalForm.contains("NAMESPACE=xmlns(sf=http://www.openplans.org/spearfish)"));
        // assertTrue(externalForm.contains("OUTPUTFORMAT=text/xml; subtype=gml/3.1.1"));
    }

