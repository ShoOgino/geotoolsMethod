    public Srs(
            String name,
            int srid,
            String organization,
            int organizationId,
            String wkt,
            String proj4,
            String linearUom,
            String angularUom,
            Type type,
            Double majorAxis,
            Double minorAxis,
            Double inverseFlattening,
            double minX,
            double maxX,
            double minY,
            double maxY) {
        checkNotEmpty(name, "name");
        if (srid < 0) {
            throw new IllegalArgumentException("srid must not be negative");
        }
        checkNotEmpty(organization, "organization");
        if (organizationId < 0) {
            throw new IllegalArgumentException("organizationId must not be negative");
        }
        checkNotEmpty(linearUom, "linearUom");
        if (type == null) {
            throw new NullPointerException("type must not be null");
        }
        if ((type == Type.GEOGRAPHIC) || (type == Type.FLAT)) {
            if (angularUom == null) {
                throw new NullPointerException(
                        "angularUom must not be null in case geographic or flat reference systems");
            }
            if (angularUom.isEmpty()) {
                throw new NullPointerException(
                        "angularUom must not be empty in case geographic or flat reference systems");
            }
            if (majorAxis == null) {
                throw new NullPointerException(
                        "majorAxis must not be null in case of geographic or flat reference systems");
            }
            if ((minorAxis == null) && (inverseFlattening == null)) {
                throw new NullPointerException(
                        "Either minorAxis or inverseFlattening must be given in case of geographic or flat reference systems");
            }
        }
        if ((minorAxis != null) && (inverseFlattening != null)) {
            throw new IllegalArgumentException(
                    "Either minorAxis or inverseFlattening must be given, but not both");
        }
        if ((majorAxis != null) && (majorAxis <= 0.0)) {
            throw new IllegalArgumentException("majorAxis must be greater than 0");
        }
        if ((minorAxis != null) && (minorAxis < 0.0)) {
            throw new IllegalArgumentException("minorAxis must be greater than 0");
        }
        if ((inverseFlattening != null) && (inverseFlattening <= 0.0)) {
            throw new IllegalArgumentException("inverseFlattening must be greater than 0");
        }
        if ((majorAxis == null) && ((minorAxis != null) || (inverseFlattening != null))) {
            throw new IllegalArgumentException(
                    "If minorAxis or inverseFlattening is given, majorAxis must be given as well");
        }

        this.name = name;
        this.srid = srid;
        this.organization = organization;
        this.organizationId = organizationId;
        this.wkt = nullIfEmpty(wkt);
        this.proj4 = nullIfEmpty(proj4);
        this.linearUom = linearUom;
        this.angularUom = nullIfEmpty(angularUom);
        this.type = type;
        this.majorAxis = majorAxis;
        this.minorAxis = minorAxis;
        this.inverseFlattening = inverseFlattening;
        this.minX = minX;
        this.maxX = maxX;
        this.minY = minY;
        this.maxY = maxY;
    }

