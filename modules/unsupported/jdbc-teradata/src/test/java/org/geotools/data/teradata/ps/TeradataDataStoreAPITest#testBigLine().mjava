    public void testBigLine() throws Exception {
    	try {
    	TestData td = new TestData(10);
    	td.build();
    	
/*    	SimpleFeatureBuilder.build(roadType,
                new Object[] { new Integer(1), line(new int[] { 1, 1, 2, 2, 4, 2, 5, 1 }), "r1", },
                ROAD + "." + (initialFidValue));
  */  	
//        FeatureReader<SimpleFeatureType, SimpleFeature> reader = DataUtilities.reader(new SimpleFeature[] { td.newRoad, });
        SimpleFeatureStore road = (SimpleFeatureStore) dataStore.getFeatureSource(tname("road"));

        int[] points = new int[100 * 2 * 4];
        for (int i = 0 ; i < 100 ; i++) {
        	points[i * 2 * 4] = 1;
        	points[i * 2 * 4 + 1] = 1;
        	points[i * 2 * 4 + 2] = 2;
        	points[i * 2 * 4 + 3] = 2;
        	points[i * 2 * 4 + 4] = 4;
        	points[i * 2 * 4 + 5] = 2;
        	points[i * 2 * 4 + 6] = 5;
        	points[i * 2 * 4 + 7] = 1;
        }
        SimpleFeature newRoad = SimpleFeatureBuilder.build(td.roadType,
        		new Object[] { new Integer(20), td.line(points), "r20" }, "20");
        FeatureReader<SimpleFeatureType, SimpleFeature> reader = DataUtilities.reader(new SimpleFeature[] { newRoad });
        road.addFeatures(DataUtilities.collection(reader));


        road = (SimpleFeatureStore) dataStore.getFeatureSource(tname("road"));
        SimpleFeatureCollection results = road.getFeatures();
        SimpleFeatureIterator features = results.features();
        assertTrue(features.hasNext());
        assertEquals(100 * 4, ((Geometry)features.next().getDefaultGeometry()).getNumPoints());
        results.close(features);
    	}
        catch (Exception e) {
        	e.printStackTrace();
        }
    }

