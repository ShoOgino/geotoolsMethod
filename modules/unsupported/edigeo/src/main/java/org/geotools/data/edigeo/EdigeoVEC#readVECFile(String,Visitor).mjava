    /** @param obj */
    public void readVECFile(String obj, Visitor visitor)
            throws IOException, IllegalAttributeException {
        EdigeoParser vecParser = new EdigeoParser(vecFile);
        String idObj = null;
        String buffer = "";
        String att = "";
        String value = "";

        if (obj.equals("PARCELLE_id")) {
            topo = true;
        }

        geoType = EdigeoDataStore.scdObj.get(obj).get("type").toUpperCase();

        if (logger.isLoggable(Level.INFO)) {
            logger.info("Creating Edigeo Datastore, please wait, it may take a few minutes...");
        }

        while (vecParser.readLine()) {

            if (vecParser.line.contains(VS + obj) && buffer.contains(objIdDesc)) {

                // we've got a feature
                HashMap<String, String> atts = new HashMap<String, String>();
                idObj = getValue(buffer, objIdDesc);
                List<Coordinate[]> geoms = getRelation(idObj);
                nbObjs++;

                while (vecParser.readLine()) {
                    if (vecParser.line.contains(nbAttDesc)) {
                        int nbatt = Integer.parseInt(vecParser.getValue(nbAttDesc));
                        for (int i = 0; i < nbatt; i++) {

                            //                            String charsetBuffer = "";
                            while (vecParser.readLine()) {
                                if (vecParser.line.contains(idAttDesc)) {
                                    att = vecParser.getValue(idAttDesc);
                                    att = att.substring(att.lastIndexOf(";") + 1);
                                    continue;
                                }
                                if (vecParser.line.contains(valAttrDesc)) {
                                    //                                    if (false &&
                                    // charsetBuffer.equals("TEXT 06:8859-1")) {
                                    //                                        CharsetDecoder dec =
                                    // Charset.forName("ISO-8859-1").newDecoder();
                                    //
                                    // dec.onMalformedInput(CodingErrorAction.REPORT);
                                    //
                                    // dec.onUnmappableCharacter(CodingErrorAction.REPORT);
                                    //                                        CharBuffer cb =
                                    // dec.decode(ByteBuffer.wrap(vecParser.getValue("ATVS").getBytes()));
                                    //                                        value = cb.toString();
                                    //                                        value = new
                                    // String(vecParser.getValue("ATVS").getBytes("ISO-8859-1"));
                                    //                                    } else {
                                    //                                        value =
                                    // vecParser.getValue("ATVS");
                                    //                                    }
                                    value = vecParser.getValue(valAttrDesc);
                                    value = getPrecodedValue(att, value);

                                    atts.put(att, value);
                                    break;
                                }
                                //                                charsetBuffer = vecParser.line;
                            }
                        }
                        break;
                    }
                }
                // Create the feature
                Object[] values = null;
                int nbAtt;

                // with attributes if exist
                if (!EdigeoDataStore.ftAtt.isEmpty()) {
                    int cpt = 0;
                    nbAtt = EdigeoDataStore.ftAtt.size();
                    values = new Object[nbAtt + 1];
                    Iterator<String> it = EdigeoDataStore.ftAtt.keySet().iterator();
                    while (it.hasNext()) {
                        String key = it.next();
                        if (atts.containsKey(key)) {
                            values[cpt] = atts.get(key);
                        } else {
                            values[cpt] = null;
                        }
                        cpt++;
                    }
                } else {
                    values = new Object[1];
                    nbAtt = 0;
                }

                Geometry geom = null;
                if (!geoms.isEmpty()) {
                    geom = createGeometry(geoms, idObj);
                    values[nbAtt] = geom;
                    visitor.visit(values, idObj);
                } else {
                    if (logger.isLoggable(Level.WARNING)) {
                        logger.warning("Unable to find geometry relation for FID#" + idObj);
                    }
                }
            }
            buffer = vecParser.line;
        }
        vecParser.close();
    }

