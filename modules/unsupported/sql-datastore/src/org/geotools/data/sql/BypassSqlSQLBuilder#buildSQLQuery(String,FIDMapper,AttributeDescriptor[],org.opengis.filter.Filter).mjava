	/**
	 * Constructs the full SQL SELECT statement for the supplied Filter.
	 * 
	 * <p>
	 * The statement is constructed by concatenating the SELECT column list,
	 * FROM table specification and WHERE clause appropriate to the supplied
	 * Filter.
	 * </p>
	 * 
	 * @param typeName
	 *            The name of the table (feature type) to be queried
	 * @param mapper
	 *            FIDMapper to identify the FID columns in the table
	 * @param attrTypes
	 *            The specific attribute columns to be selected
	 * @param filter
	 *            The Filter that will be used by the encoder to construct the
	 *            WHERE clause
	 * 
	 * @return The fully formed SQL SELECT statement
	 * 
	 * @throws SQLEncoderException
	 *             Not thrown by this method but may be thrown by the encoder
	 *             class
	 */
	public String buildSQLQuery(String typeName, FIDMapper mapper,
			AttributeDescriptor[] attrTypes, org.opengis.filter.Filter filter)
			throws SQLEncoderException {
		String sqlStmt;

		if (this.ftHandler != null && this.ftHandler.isView(typeName)) {
			final StringBuffer sqlBuffer = new StringBuffer();
			final String sqlQuery = ftHandler.getQuery(typeName);
			fieldAliases = parseAliases(sqlQuery);

			UnaliasSQLEncoder encoder = (UnaliasSQLEncoder) super.encoder;
			encoder.setAliases(fieldAliases);
			
			SimpleFeatureType fType;
			try {
				fType = ftHandler.getFeatureTypeInfo(typeName).getSchema();
			} catch (Exception e) {
				throw new RuntimeException("should not happen!: "
						+ e.getMessage());
			}

			//String select = getSelect(sqlQuery, fType);
			String select = "select " ; 
			sqlBuffer.append(select);

			sqlColumns(sqlBuffer, mapper, attrTypes, fieldAliases);

			String from = getFrom(sqlQuery);
			sqlBuffer.append(from);

			String where = getWhere(sqlQuery, mapper, filter);
			sqlBuffer.append(where);

			String groupBy = getGroupBy(sqlQuery);
			if(groupBy != null){
				sqlBuffer.append(groupBy);
			}

			String orderBy = getOrderBy(sqlQuery);
			if(orderBy != null){
				sqlBuffer.append(orderBy);
			}

			sqlStmt = sqlBuffer.toString();
		} else {
			sqlStmt = super.buildSQLQuery(typeName, mapper, attrTypes, filter);
		}
		LOGGER.finer(sqlStmt);
		return sqlStmt;
	}

