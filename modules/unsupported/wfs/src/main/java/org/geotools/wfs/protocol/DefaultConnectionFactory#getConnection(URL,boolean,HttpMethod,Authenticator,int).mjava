    private static HttpURLConnection getConnection(final URL url, final boolean tryGzip,
            final HttpMethod method, final Authenticator auth, final int timeoutMillis) throws IOException {
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();

        if (POST == method) {
            connection.setRequestMethod("POST");
            connection.setDoOutput(true);
            /*ESRI ArcGis has a bug when sending xml and content-type = text/xml. When omitting
            it, it works fine.*/
            if (url==null || !url.toString().contains("/ArcGIS/services/")){
                connection.setRequestProperty("Content-type", "text/xml, application/xml");
            }
        } else {
            connection.setRequestMethod("GET");
        }
        connection.setDoInput(true);
        if (tryGzip) {
            connection.addRequestProperty("Accept-Encoding", "gzip");
        }

        connection.setConnectTimeout(timeoutMillis);
        connection.setReadTimeout(timeoutMillis);


        // auth must be after connection because one branch makes the connection
        if (auth != null) {
            if (auth instanceof WFSAuthenticator) {
                WFSAuthenticator wfsAuth = (WFSAuthenticator) auth;
                String user = wfsAuth.pa.getUserName();
                char[] pass = wfsAuth.pa.getPassword();

                String combined = String.format("%s:%s", user, String.valueOf(pass));
                byte[] authBytes = combined.getBytes("US-ASCII");
                String encoded = new String(Base64.encodeBase64(authBytes));
                String authorization = "Basic " + encoded;
                connection.setRequestProperty("Authorization" ,authorization);
            } else {
                /*
                 * FIXME this could breaks uDig. Not quite sure what to do otherwise.
                 * Maybe have a mechanism that would allow an authenticator to ask the
                 * datastore itself for a previously supplied user/pass.
                 */
                synchronized (Authenticator.class) {
                    Authenticator.setDefault(auth);
                    connection.connect();
    //                Authenticator.setDefault(null);
                }
            }
        }

        return connection;
    }

