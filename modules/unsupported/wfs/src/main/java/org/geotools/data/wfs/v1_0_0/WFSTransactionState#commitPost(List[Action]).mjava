    private TransactionResult commitPost(List<Action> toCommit) throws OperationNotSupportedException,
            IOException, SAXException {
        
        URL postUrl = ds.capabilities.getTransaction().getPost();
        // System.out.println("POST Commit URL = "+postUrl);
        if (postUrl == null) {
            throw new UnsupportedOperationException("Capabilities document does not describe a valid POST url for Transaction");
            //return null;
        }

        HttpURLConnection hc = ds.protocolHandler.getConnectionFactory().getConnection(postUrl,
                POST);
        // System.out.println("connection to commit");
        Map<String,Object> hints = new HashMap<String,Object>();
        hints.put(DocumentWriter.BASE_ELEMENT, WFSSchema.getInstance().getElements()[24]); // Transaction
        Set<String> fts = new HashSet<String>();
        Iterator<Action> i = toCommit.iterator();
        while (i.hasNext()) {
            Action a = (Action) i.next();
            fts.add(a.getTypeName());
        }
        Set<String> ns = new HashSet<String>();
        ns.add(WFSSchema.NAMESPACE.toString());
        Iterator<String> i2 = fts.iterator();
        while (i2.hasNext()) {
            String target = (String) i2.next();
            SimpleFeatureType schema = ds.getSchema(target);
            
            try {
                String namespaceURI = schema.getName().getNamespaceURI();
                ns.add(namespaceURI);
                URI namespaceLocation = ds.getDescribeFeatureTypeURL(target).toURI();
                // if this is not added then sometimes the schema for the describe feature type cannot be loaded and
                // an exception will be thrown during the commit 
                SchemaFactory.getInstance(new URI(namespaceURI), namespaceLocation);
            } catch (URISyntaxException e) {
                e.printStackTrace();
            }
        }
        hints.put(DocumentWriter.SCHEMA_ORDER, ns.toArray(new String[ns.size()])); // Transaction

        // System.out.println("Ready to print Debug");
        // // DEBUG
        // StringWriter debugw = new StringWriter();
        // DocumentWriter.writeDocument(this, WFSSchema.getInstance(), debugw,
        // hints);
        // System.out.println("TRANSACTION \n\n");
        // System.out.println(debugw.getBuffer());
        // // END DEBUG

        OutputStream os = hc.getOutputStream();

        // write request
        Writer w = new OutputStreamWriter(os);
        Logger logger = Logging.getLogger("org.geotools.data.wfs");
        if (logger.isLoggable(Level.FINE)) {
            w = new LogWriterDecorator(w, logger, Level.FINE);
        }
        // special logger for communication information only.
        logger = Logging.getLogger("org.geotools.data.communication");
        if (logger.isLoggable(Level.FINE)) {
            w = new LogWriterDecorator(w, logger, Level.FINE);
        }

        DocumentWriter.writeDocument(this, WFSSchema.getInstance(), w, hints);
        w.flush();
        w.close();

        InputStream is = this.ds.protocolHandler.getConnectionFactory().getInputStream(hc);

        hints = new HashMap<String,Object>();

        TransactionResult ft = (TransactionResult) DocumentFactory.getInstance(is, hints,
                Level.WARNING);
        return ft;
    }

