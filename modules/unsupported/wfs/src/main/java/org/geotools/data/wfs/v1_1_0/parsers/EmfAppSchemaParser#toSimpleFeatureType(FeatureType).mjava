    /**
     * Go through FeatureType description and convert to a SimpleFeatureType.
     * Also ignores AbstractFeatureType contributions such as name etc...
     * 
     * @param realType
     * @return
     * @throws DataSourceException
     */
    public static SimpleFeatureType toSimpleFeatureType( final FeatureType realType )
            throws DataSourceException {
        List<PropertyDescriptor> attributes;
        Collection<PropertyDescriptor> descriptors = realType.getDescriptors();
        attributes = new ArrayList<PropertyDescriptor>(descriptors);
        List<String> simpleProperties = new ArrayList<String>();

        // HACK HACK!! the parser sets no namespace to the properties so we're
        // doing a hardcode property name black list
        final List<String> ignoreList = Arrays.asList(new String[]{GML.location.getLocalPart(),
                GML.metaDataProperty.getLocalPart(), GML.description.getLocalPart(),
                GML.name.getLocalPart(), GML.boundedBy.getLocalPart()});

        for( Iterator<PropertyDescriptor> it = attributes.iterator(); it.hasNext(); ) {
            PropertyDescriptor property = it.next();
            if (!(property instanceof AttributeDescriptor)) {
                continue;
            }
            AttributeDescriptor descriptor = (AttributeDescriptor) property;
            Name name = descriptor.getName();

            if (ignoreList.contains(name.getLocalPart())) {
                it.remove();
            }
        }
        // / HACK END

        for( PropertyDescriptor descriptor : attributes ) {
            Class< ? > binding = descriptor.getType().getBinding();
            int maxOccurs = descriptor.getMaxOccurs();
            Name name = descriptor.getName();
            if (GML.NAMESPACE.equals(name.getNamespaceURI()) || maxOccurs > 1
                    || Object.class.equals(binding)) {
                LOGGER.fine("Ignoring multivalued or complex property " + name
                        + " on feature type " + realType.getName());
                continue;
            }

            simpleProperties.add(((AttributeDescriptor) descriptor).getLocalName());
        }

        String[] properties = simpleProperties.toArray(new String[simpleProperties.size()]);
        SimpleFeatureType subsetType;
        try {
            // TODO: will need to handle FeatureType instead of direct casting
            // to SimpleFeatureType
            // once FeatureType support lands on trunk
            subsetType = DataUtilities.createSubType((SimpleFeatureType) realType, properties);
        } catch (SchemaException e) {
            throw new DataSourceException(e);
        }
        return subsetType;
    }

