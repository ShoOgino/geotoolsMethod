    /**
     * If the query is fully supported, makes a {@code GetFeature} request with
     * {@code resultType=hits} and returns the counts returned by the server, otherwise returns
     * {@code -1} as the result is too expensive to calculate.
     * 
     * @param query
     * @return the number of features returned by a GetFeature?resultType=hits request, or
     *         {@code -1} if not supported
     */
    public int getCount(Query query) throws IOException {
        Filter[] filters = wfs.splitFilters(query.getFilter());
        Filter postFilter = filters[1];
        if (!Filter.INCLUDE.equals(postFilter)) {
            // Filter not fully supported, can't know without a full scan of the results
            return -1;
        }

        // WFSProtocol.splitFilter has simplified and validated my filters
        // so I create a new Query using these supported filters
        query = createNewQuery(query, filters[0]);
        
        WFSResponse response = executeGetFeatures(query, Transaction.AUTO_COMMIT, ResultType.HITS);

        Object process = WFSExtensions.process(this, response, mappedURIs);
        if (!(process instanceof GetFeatureParser)) {
            LOGGER.info("GetFeature with resultType=hits resulted in " + process);
        }
        int hits = ((GetFeatureParser) process).getNumberOfFeatures();
        if (hits != -1 && getMaxFeatures().intValue() > 0) {
            hits = Math.min(hits, getMaxFeatures().intValue());
        }
        return hits;
    }

