    public  FeatureReader<SimpleFeatureType, SimpleFeature> getFeatureReader(Query query2, Transaction transaction) throws IOException {
        Query query = new Query(query2);
        Filter processedFilter = store.processFilter(query.getFilter());
        // process the filter to update fidfilters using the transaction.
        ((Query) query).setFilter(processedFilter);
        Filter serverFilter;
        Filter postFilter;
        {
            Filter[] filters = store.splitFilters(query, transaction); // [server][post]
            serverFilter = filters[0];
            postFilter = filters[1];
        }

        CoordinateReferenceSystem dataCRS = correctFilterForServer( query.getTypeName(), serverFilter);

        ((Query) query).setFilter(serverFilter);
         FeatureReader<SimpleFeatureType, SimpleFeature> reader = createFeatureReader(transaction, query);

        if (reader.hasNext()) { // opportunity to throw exception

            if (reader.getFeatureType() != null) {
                reader = wrapWithFilteringFeatureReader(postFilter, reader, processedFilter);
                reader = applyReprojectionDecorator(reader, query, dataCRS);
                return reader;
            }
            throw new IOException("There are features but no feature type ... odd");
        }

        return new EmptyFeatureReader<SimpleFeatureType, SimpleFeature>(store.getSchema(query.getTypeName()));
    }

