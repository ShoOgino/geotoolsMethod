    /**
     * Calculates and returns the aggregated bounds of the collection contents, potentially doing a
     * full scan.
     * <p>
     * As a bonuns, if a full scan needs to be done updates the cached collection size so a future
     * call to {@link #getCount()} does not require an extra server call.
     * </p>
     */
    @Override
    public ReferencedEnvelope getBounds() {
        if (cachedBounds != null) {
            return cachedBounds;
        }

        ReferencedEnvelope bounds = null;
        try {
            bounds = dataStore.getBounds(query);
            if (bounds == null) {
                // System.err.println("Making FC full scan at getBounds() for "
                // + this.schema.getName());
                // bad luck, do a full scan
                final Name defaultgeom = contentType.getGeometryDescriptor().getName();
                final Query geomQuery = new Query(this.query);
                geomQuery.setPropertyNames(new String[] { defaultgeom.getLocalPart() });

                FeatureReader<SimpleFeatureType, SimpleFeature> reader;
                reader = dataStore.getFeatureReader(geomQuery, Transaction.AUTO_COMMIT);
                bounds = new ReferencedEnvelope(contentType.getCoordinateReferenceSystem());
                try {
                    BoundingBox featureBounds;
                    // collect size to alleviate #getCount if needed
                    int collectionSize = 0;
                    while (reader.hasNext()) {
                        featureBounds = reader.next().getBounds();
                        bounds.expandToInclude(featureBounds.getMinX(), featureBounds.getMinY());
                        bounds.expandToInclude(featureBounds.getMaxX(), featureBounds.getMaxY());
                        collectionSize++;
                    }
                    if (this.cachedSize == -1) {
                        this.cachedSize = collectionSize;
                    }
                    // System.err.println("Done making FC full scan at getBounds() for "
                    // + this.schema.getName() + ", cachedSize=" + cachedSize + ", bounds="
                    // + bounds);
                } finally {
                    reader.close();
                }
            }
        } catch (IOException e) {
            LOGGER.log(Level.INFO, "Error getting bounds for " + query);
            bounds = new ReferencedEnvelope(getSchema().getCoordinateReferenceSystem());
        }
        return bounds;
    }

