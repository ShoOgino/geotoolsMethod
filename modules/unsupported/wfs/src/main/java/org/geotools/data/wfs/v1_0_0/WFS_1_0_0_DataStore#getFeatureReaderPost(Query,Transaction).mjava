//    private String printBBoxGet( org.opengis.filter.Filter f, String typename) throws IOException {
//        Envelope e = null;
//
//        if (gf.getLeftGeometry().getType() == ExpressionType.LITERAL_GEOMETRY) {
//            e = ((Geometry) ((LiteralExpression) gf.getLeftGeometry()).getLiteral())
//                    .getEnvelopeInternal();
//        } else {
//            if (gf.getRightGeometry().getType() == ExpressionType.LITERAL_GEOMETRY) {
//                LiteralExpression literal = (LiteralExpression) gf.getRightGeometry();
//                Geometry geometry = (Geometry) literal.getLiteral();
//                e = geometry.getEnvelopeInternal();
//            } else {
//                throw new IOException("Cannot encode BBOX:" + gf);
//            }
//        }
//
//        if (e == null || e.isNull())
//            return null;
//
//        // Cannot check against layer bbounding box because they may be in
//        // different CRS
//        // We could insert ReferencedEnvelope fun here - note a check is already
//        // performed
//        // as part clipping the request bounding box.
//
//        /*
//         * // find layer's bbox Envelope lbb = null; if(capabilities != null &&
//         * capabilities.getFeatureTypes() != null && typename!=null && !"".equals(typename)){ List
//         * fts = capabilities.getFeatureTypes(); if(!fts.isEmpty()){ for(Iterator
//         * i=fts.iterator();i.hasNext() && lbb == null;){ FeatureSetDescription fsd =
//         * (FeatureSetDescription)i.next(); if(fsd!=null && typename.equals(fsd.getName())){ lbb =
//         * fsd.getLatLongBoundingBox(); } } } } if(lbb == null || lbb.contains(e))
//         */
//        return e.getMinX() + "," + e.getMinY() + "," + e.getMaxX() + "," + e.getMaxY();
//        // return null;
//    }
    // protected for testing
    protected FeatureReader<SimpleFeatureType, SimpleFeature> getFeatureReaderPost(Query query,
            Transaction transaction) throws SAXException, IOException {
        URL postUrl = capabilities.getGetFeature().getPost();

        if (postUrl == null) {
            return null;
        }

        HttpURLConnection hc = protocolHandler.getConnectionFactory().getConnection(postUrl, POST);

        Writer w = getOutputStream(hc);

        Map hints = new HashMap();
        hints.put(DocumentWriter.BASE_ELEMENT, WFSSchema.getInstance().getElements()[2]); // GetFeature
        hints.put(DocumentWriter.ENCODING, protocolHandler.getEncoding());
        try {
            DocumentWriter.writeDocument(query, WFSSchema.getInstance(), w, hints);
        } catch (OperationNotSupportedException e) {
            LOGGER.warning(e.toString());
            throw new SAXException(e);
        } finally {
            w.flush();
            w.close();
        }

        // JE: permit possibility for GZipped data.
        InputStream is = protocolHandler.getConnectionFactory().getInputStream(hc);

        WFSTransactionState ts = null;

        if (!(transaction == Transaction.AUTO_COMMIT)) {
            ts = (WFSTransactionState) transaction.getState(this);

            if (ts == null) {
                ts = new WFSTransactionState(this);
                transaction.putState(this, ts);
            }
        }
        SimpleFeatureType schema = getSchema(query.getTypeName());

        SimpleFeatureType featureType;
        try {
            featureType = DataUtilities.createSubType(schema, query.getPropertyNames(), query
                    .getCoordinateSystem());
        } catch (SchemaException e) {
            featureType = schema;
        }
        schema.getUserData().put("lenient", true);
        WFSFeatureReader ft = WFSFeatureReader
                .getFeatureReader(is, bufferSize, timeout, ts, schema);

        if (!featureType.equals(ft.getFeatureType())) {
            LOGGER.fine("Recasting feature type to subtype by using a ReTypeFeatureReader");
            return new ReTypeFeatureReader(ft, featureType, false);
        } else
            return ft;
    }

