    /**
     * Construct <code>WFSDataStore</code>.
     * 
     * @param host
     *            - may not yet be a capabilities url
     * @param protocol
     *            - true,false,null (post,get,auto)
     * @param username
     *            - iff password
     * @param password
     *            - iff username
     * @param timeout
     *            - default 3000 (ms)
     * @param buffer
     *            - default 10 (features)
     * @param tryGZIP
     *            - indicates to use GZIP if server supports it.
     * @param lenient
     *            - if true the parsing will be very forgiving to bad data. Errors will be logged
     *            rather than exceptions.
     * @param wfsStrategy
     *            - "mapserver", "geoserver", "strict" and "nonstrict:
     * @param filterCompliance
     *            - filter compliance level
     * <ul>
     * <li>{@link XMLHandlerHints#VALUE_FILTER_COMPLIANCE_LOW}</li>
     * <li>{@link XMLHandlerHints#VALUE_FILTER_COMPLIANCE_MEDIUM}</li>
     * <li>{@link XMLHandlerHints#VALUE_FILTER_COMPLIANCE_HIGH}</li>
     * </ul>     *            
     * 
     * @throws SAXException
     * @throws IOException
     */
    public WFS_1_0_0_DataStore(HttpMethod protocol, WFS100ProtocolHandler protocolHandler,
            int timeout, int buffer, boolean lenient, String wfsStrategy, Integer filterCompliance) throws SAXException, IOException {
        super(true);
        this.capabilities = protocolHandler.getCapabilities();
        this.protocolHandler = protocolHandler;
        this.lenient = lenient;
        this.preferredProtocol = protocol;
        this.timeout = timeout;
        this.bufferSize = buffer;
        this.wfsStrategy = wfsStrategy;
        this.filterCompliance = filterCompliance; 
        determineCorrectStrategy();
    }

