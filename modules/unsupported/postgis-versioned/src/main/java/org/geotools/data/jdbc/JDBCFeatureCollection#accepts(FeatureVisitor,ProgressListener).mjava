    /**
     * Accepts FeatureVisitors.
     * 
     * <p>
     * Note for some FeatureCalc visitors an optimized code path will be used.
     * </p>
     *
     * @param visitor DOCUMENT ME!
     *
     * @throws IOException DOCUMENT ME!
     */
    public void accepts(FeatureVisitor visitor, ProgressListener progress) {
    	try {
            // TODO: review use of progress monitor
            if (progress == null)
                progress = new NullProgressListener();
            if (visitor instanceof MinVisitor) {
                progress.started();
                MinVisitor minCalc = (MinVisitor) visitor;
                Object min = min(minCalc.getExpression());

                if (min != null) {
                    // we had an optimized result, so tell the visitor the answer
                    // rather than making him visit everything
                    minCalc.setValue(min);
                    isOptimized = true;
                    progress.complete();
                    return;
                } else {
                    progress.warningOccurred("JDBCFeatureCollection.accepts(min,)", null,
                            "Optimization attempt returned null");
                }
            } else if (visitor instanceof MaxVisitor) {
                progress.started();
                MaxVisitor maxCalc = (MaxVisitor) visitor;
                Object max = max(maxCalc.getExpression());

                if (max != null) {
                    maxCalc.setValue(max); // use the optimized result
                    isOptimized = true;
                    progress.complete();
                    return;
                } else {
                    progress.warningOccurred("JDBCFeatureCollection.accepts(max,)", null,
                            "Optimization attempt returned null");
                }

            } else if (visitor instanceof MedianVisitor) {
                // Optimization is not available (i think)

                // MedianVisitor medianCalc = (MedianVisitor) visitor;
                // Object median = median(medianCalc.getExpression());
                // if (median != null) {
                // medianCalc.setValue((Comparable) median); // use the optimized result
                // isOptimized = true;
                // return;
                // }
            } else if (visitor instanceof SumVisitor) {
                progress.started();
                SumVisitor sumCalc = (SumVisitor) visitor;
                Object sum = sum(sumCalc.getExpression());

                if (sum != null) {
                    sumCalc.setValue(sum); // use the optimized result
                    isOptimized = true;
                    progress.complete();
                    return;
                } else {
                    progress.warningOccurred("JDBCFeatureCollection.accepts(sum,)", null,
                            "Optimization attempt returned null");
                }

            } else if (visitor instanceof CountVisitor) {
                progress.started();
                CountVisitor countCalc = (CountVisitor) visitor;
                Object count = count(null);

                if (count != null) {
                    countCalc.setValue(((Number) count).intValue()); // use the optimized result
                    isOptimized = true;
                    progress.complete();
                    return;
                } else {
                    progress.warningOccurred("JDBCFeatureCollection.accepts(count,)", null,
                            "Optimization attempt returned null");
                }

            } else if (visitor instanceof AverageVisitor) {
                progress.started();
                // There is no "AVERAGE" function for SQL (to my knowledge),
                // so we'll do a SUM / COUNT...
                AverageVisitor averageCalc = (AverageVisitor) visitor;
                Object sum = sum(averageCalc.getExpression());
                Object count = count(null);
                if (sum != null && count != null) {
                    averageCalc.setValue(((Number) count).intValue(), sum);
                    isOptimized = true;
                    progress.complete();
                    return;
                } else {
                    progress.warningOccurred("JDBCFeatureCollection.accepts(average,)", null,
                            "Optimization attempt returned null");
                }
            } else if (visitor instanceof UniqueVisitor) {
                progress.started();
                UniqueVisitor uniqueCalc = (UniqueVisitor) visitor;
                Object unique = unique(uniqueCalc.getExpression());

                if (unique != null) {
                    uniqueCalc.setValue(unique); // use the optimized result
                    isOptimized = true;
                    progress.complete();
                    return;
                } else {
                    progress.warningOccurred("JDBCFeatureCollection.accepts(unique,)", null,
                            "Optimization attempt returned null");
                }

            }
            // optimization was not available, or it failed
            isOptimized = false;
            super.accepts(visitor, progress);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

