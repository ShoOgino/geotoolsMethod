    /**
     * Gathers the revisions created by a certain group of users between two specified revisions
     * @param r1 the first revision
     * @param r2 the second revision
     * @param users an array of user 
     * @return
     */
    Set getRevisionsCreatedBy(String typeName, RevisionInfo r1, RevisionInfo r2, String[] users, Transaction transaction) throws IOException {
        if(users == null || users.length == 0)
            return null;
        
        List filters = new ArrayList(users.length);
        for (int i = 0; i < users.length; i++) {
            filters.add(ff.equals(ff.property("author"), ff.literal(users[i])));
        }
        Filter revisionFilter = ff.between(ff.property("revision"), ff.literal(r1.revision), ff.literal(r2.revision));
        Filter userFilter = ff.and(ff.or(filters), revisionFilter);
        
        // again, here we could filter with a join on the feature type we're investigating, but...
        Query query = new DefaultQuery(VersionedPostgisDataStore.TBL_CHANGESETS, userFilter, new String[] {"revision"});
        Set revisions = new HashSet();
         FeatureReader<SimpleFeatureType, SimpleFeature> fr = null;
        try  {
            fr = wrapped.getFeatureReader(query, transaction);
            while(fr.hasNext()) {
                SimpleFeature f = fr.next();
                revisions.add(f.getAttribute("revision"));
            }
        } catch(IllegalAttributeException e) {
            throw new DataSourceException("Error reading revisions modified by users " + Arrays.asList(users), e);
        } finally {
            if(fr != null)
                fr.close();
        }
        return revisions;
    }

