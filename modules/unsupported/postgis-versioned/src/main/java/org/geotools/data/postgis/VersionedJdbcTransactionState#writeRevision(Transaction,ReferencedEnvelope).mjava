    /**
     * Stores a commit message in the CHANGESETS table and return the associated revision number.
     * 
     * @param conn
     * @return
     * @throws IOException
     */
    protected long writeRevision(Transaction t, ReferencedEnvelope bbox) throws IOException {
        SimpleFeature f = null;
        FeatureWriter<SimpleFeatureType, SimpleFeature> writer = null;
        String author = (String) t.getProperty(VersioningDataStore.AUTHOR);
        String message = (String) t.getProperty(VersioningDataStore.MESSAGE);
        Statement st = null;
        try {
            // we need to make sure that revision N+1 is committed after N is committed, otherwise
            // the history will be ruined
            st = getConnection().createStatement();
            st.execute("LOCK TABLE " + VersionedPostgisDataStore.TBL_CHANGESETS + " IN EXCLUSIVE MODE");
            
            writer = wrapped.getFeatureWriterAppend(VersionedPostgisDataStore.TBL_CHANGESETS, t);
            f = writer.next();
            f.setAttribute("author", author);
            f.setAttribute("message", message);
            f.setAttribute("date", new Date());
            
            f.setDefaultGeometry(toLatLonRectange(bbox));
            writer.write();
        } catch (IllegalAttributeException e) {
            // if this happens there's a programming error
            throw new IOException("Could not set an attribute in changesets, "
                    + "most probably the table schema has been tampered with.");
        } catch (SQLException e) {
            throw new DataSourceException("Could not set a lock on the table changesets", e);
        } finally {
            if(st != null)
              JDBCUtils.close(st);  
            if(writer != null)
              writer.close();
        }

        return ((Long) f.getAttribute("revision")).longValue();
    }

