    /**
     * Produces the select information required.
     * <p>
     * The featureType, if known, is always requested.
     * </p>
     * <p>
     * sql: <code>featureID (,attributeColumn)</code>
     * </p>
     * <p>
     * We may need to provide AttributeReaders with a hook so they can request a wrapper function.
     * </p>
     * 
     * @param sql
     * @param mapper
     * @param attributes
     */
    public void sqlColumns(StringBuffer sql, FIDMapper mapper,
        AttributeDescriptor[] attributes) {
        for (int i = 0; i < mapper.getColumnCount(); i++) {
            sql.append("\""+mapper.getColumnName(i)+"\"");
            // DJB: add quotes in. NOTE: if FID mapper isnt oid (ie. PK - Primary Key), you could be
            // requesting PK columns multiple times
            if ((attributes.length > 0) || (i < (mapper.getColumnCount() - 1))) {
                sql.append(", ");
            }
        }

        for (int i = 0; i < attributes.length; i++) {
            AttributeDescriptor attribute = attributes[i];

                if (attribute instanceof GeometryDescriptor) {   
                    GeometryDescriptor geometryAttribute = (GeometryDescriptor) attribute;
                    CoordinateReferenceSystem crs = geometryAttribute.getCoordinateReferenceSystem();
                    final int D = isForce2D() ? 2 : -1;
                    
                    if (WKBEnabled) {
                        if(byteaEnabled) {
                            columnGeometryByteaWKB( sql, geometryAttribute, D );
                        } else {
                            columnGeometryWKB( sql, geometryAttribute, D );
                        }
                    } else {
                        columnGeometry( sql, geometryAttribute, D );
                    }
                } else {
                    columnAttribute(sql, attribute);
                }

                if (i < (attributes.length - 1)) {
                    sql.append(", ");
                }
            }
        }

