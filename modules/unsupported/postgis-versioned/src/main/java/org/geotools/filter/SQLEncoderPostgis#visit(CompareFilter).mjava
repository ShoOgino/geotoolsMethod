    /**
     * Writes the SQL for a Compare Filter.
     *
     * DJB: note, postgis overwrites this implementation because of the way
     *       null is handled.  This is for <PropertyIsNull> filters and <PropertyIsEqual> filters
     *       are handled.  They will come here with "property = null".  
     *       NOTE:
     *        SELECT * FROM <table> WHERE <column> isnull;  -- postgresql
     *        SELECT * FROM <table> WHERE isnull(<column>); -- oracle???
     * 
     * @param filter the comparison to be turned into SQL.
     *
     * @throws RuntimeException for io exception with writer
     */
    public void visit(CompareFilter filter) throws RuntimeException {
        LOGGER.finer("exporting SQL ComparisonFilter");

        DefaultExpression left = (DefaultExpression) filter.getLeftValue();
        DefaultExpression right = (DefaultExpression) filter.getRightValue();
        LOGGER.finer("Filter type id is " + filter.getFilterType());
        LOGGER.finer("Filter type text is "
            + comparisions.get(new Integer(filter.getFilterType())));

        String type = (String) comparisions.get(new Integer(
                    filter.getFilterType()));

        try {
        	// a bit hacky, but what else can we really do?
        	if ( (right == null) && (filter.getFilterType()==FilterType.COMPARE_EQUALS ) )
        	{
        		left.accept(this);
        		out.write(" isnull");
        	}
        	else
        	{
        		//check for case insentivity (TODO: perhaps move this up to jdbc)
        		if ( !filter.isMatchingCase() ) {
        			//only for == or != 
        			if ( filter.getFilterType() == Filter.COMPARE_EQUALS || 
        					filter.getFilterType() == Filter.COMPARE_NOT_EQUALS ) {
        				
        				//only for strings
            			if ( left.getType() == Expression.LITERAL_STRING  
            					|| right.getType() == Expression.LITERAL_STRING ) {
            				
            				out.write( "lower(" ); left.accept( this ); out.write( ")");
            				out.write( " " + type + " " );
            				out.write( "lower(" ); right.accept( this ); out.write( ")");
            			
            				return;
            			}
        			}
        		}
        		
    			//normal execution
    			left.accept(this);
        		out.write(" " + type + " ");
        		right.accept(this);
    		}
        } catch (java.io.IOException ioe) {
            throw new RuntimeException(IO_ERROR, ioe);
        }
    }

