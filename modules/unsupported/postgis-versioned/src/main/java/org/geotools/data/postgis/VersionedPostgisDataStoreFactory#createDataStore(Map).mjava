    /**
     * Construct a postgis data store using the params.
     * 
     * @param params
     *            The full set of information needed to construct a live data
     *            source. Should have dbtype equal to postgis, as well as host,
     *            user, passwd, database, and table.
     * 
     * @return The created DataSource, this may be null if the required resource
     *         was not found or if insufficent parameters were given. Note that
     *         canProcess() should have returned false if the problem is to do
     *         with insuficent parameters.
     * 
     * @throws IOException
     *             See DataSourceException
     * @throws DataSourceException
     *             Thrown if there were any problems creating or connecting the
     *             datasource.
     */
    public DataStore createDataStore(Map params) throws IOException {
        // lookup will throw error message for
        // miscoversion or lack of required param
        //
        String host = (String) HOST.lookUp(params);
        String user = (String) USER.lookUp(params);
        String passwd = (String) PASSWD.lookUp(params);
        Integer port = (Integer) PORT.lookUp(params);
        String schema = (String) SCHEMA.lookUp(params);
        String database = (String) DATABASE.lookUp(params);
        Boolean wkb_enabled = (Boolean) WKBENABLED.lookUp(params);
        Boolean is_loose_bbox = (Boolean) LOOSEBBOX.lookUp(params);
        String namespace = (String) NAMESPACE.lookUp(params);
        Boolean versionAll = (Boolean) VERSIONALL.lookUp(params);

        // Try processing params first so we can get real IO
        // error message back to the user
        //
        if (!canProcess(params)) {
            throw new IOException("The parameters map isn't correct!!");
        }
        
        DataSource source = (DataSource)DATASOURCE.lookUp(params);
        if(source == null) {
        	String url = "jdbc:postgresql" + "://" + host + ":" + port + "/" + database;
        	source = DataSourceUtil.buildDefaultDataSource(url, "org.postgresql.Driver", user, passwd, "select now()");
        }
        VersionedPostgisDataStore dataStore = createDataStoreInternal(source, namespace, schema);

        if (wkb_enabled != null) {
            dataStore.setWKBEnabled(wkb_enabled.booleanValue());
        }

        if (is_loose_bbox != null) {
            dataStore.setLooseBbox(is_loose_bbox.booleanValue());
        }
        
        if(versionAll != null && versionAll.booleanValue()) {
            String[] typeNames = dataStore.getTypeNames();
            for (int i = 0; i < typeNames.length; i++) {
                if(typeNames[i].equals(VersionedPostgisDataStore.TBL_CHANGESETS))
                    continue;
                try {
                    dataStore.setVersioned(typeNames[i], true, null, null);
                } catch(IOException e) {
                    LOGGER.log(Level.SEVERE, "Could not version enable: " + typeNames[i], e);
                }
            }
        }

        return dataStore;
    }

