    /**
     * Query whether this FeatureDiffReader has another FeatureDiff.
     * 
     * @return True if there are more differences to be read. In other words, true if calls to next
     *         would return a feature rather than throwing an exception.
     * 
     * @throws IOException
     *             If an error occurs determining if there are more Features.
     */
    public boolean hasNext() throws IOException {
        // we first scan created, then removed, then the two that need to be diffed (which are
        // guaranteed to be parallel, so check just one)
        if (createdReader != null) {
            if (createdReader.hasNext()) {
                return true;
            } else {
                createdReader.close();
                createdReader = null;
            }
        }
        if (deletedReader != null) {
            if (deletedReader.hasNext()) {
                return true;
            } else {
                deletedReader.close();
                deletedReader = null;
            }
        }
        // this is harder... we may have features that have changed between fromVersion and
        // toVersion, but which are equal in those two (typical case, rollback). So we really
        // need to compute the diff and move forward if there's no difference at all
        if (lastDiff != null)
            return true;
        if (fromReader != null && toReader != null) {
            while (true) {
                if (!fromReader.hasNext()) {
                    lastDiff = null;
                    fromReader.close();
                    toReader.close();
                    fromReader = null;
                    toReader = null;
                    return false;
                }
                // compute field by field difference
                SimpleFeature from = gatherNextUnversionedFeature(fromReader);
                SimpleFeature to = gatherNextUnversionedFeature(toReader);
                FeatureDiffImpl diff = new FeatureDiffImpl(from, to);
                if (diff.getChangedAttributes().size() != 0) {
                    lastDiff = diff;
                    return true;
                }
            }
        } else {
            return false; // closed;
        }
    }

