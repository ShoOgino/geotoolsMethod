    /**
     * Lock features matching Query.
     * 
     * <p>
     * FeatureStores that have provided their own locking to will need to
     * override this method.
     * </p>
     *
     * @param query
     *
     * @return Number of locked Features
     *
     * @throws IOException If we could not determine which feature to lock
     *         based on Query
     * @throws UnsupportedOperationException When DataStore does not provide a
     *         LockingManager
     * @throws DataSourceException If feature to be locked does not exist
     *
     * @see org.geotools.data.FeatureLocking#lockFeatures(org.geotools.data.Query)
     */
    public int lockFeatures(Query query) throws IOException {
        LockingManager lockingManager = getDataStore().getLockingManager();

        if (lockingManager == null) {
            throw new UnsupportedOperationException(
                "DataStore not using lockingManager, must provide alternate implementation");
        }

        String typeName = getSchema().getTypeName();

        if ((query.getTypeName() != null)
                && !typeName.equals(query.getTypeName())) {
            throw new IOException("Query typeName does not match "
                + getSchema().getTypeName() + ":" + query);
        }

        // Reduce the Query to only return the FetureID here?
        // Good idea, but it's not working right now, so we're just using the query passed in.
        Query optimizedQuery = new DefaultQuery(typeName, query.getFilter(),
                query.getMaxFeatures(), Query.NO_NAMES, query.getHandle());
        SimpleFeatureIterator reader = getFeatures(query).features();
        SimpleFeature feature;
        int count = 0;
        LOGGER.info("got reader from query " + optimizedQuery
            + ", reader has next " + reader.hasNext());

        try {
            while (reader.hasNext()) {
                try {
                    feature = (SimpleFeature) reader.next();
                    lockingManager.lockFeatureID(typeName, feature.getID(),
                        transaction, featureLock);
                    count++;
                    LOGGER.info("locked feature " + feature);
                } catch (FeatureLockException locked) {
                    LOGGER.info("feature lock exception");

                    // could not acquire - don't increment count                
                } catch (NoSuchElementException nosuch) {
                    throw new DataSourceException("Problem with "
                        + query.getHandle() + " while locking", nosuch);
                }
            }
        } finally {
            reader.close();
        }

        return count;
    }

