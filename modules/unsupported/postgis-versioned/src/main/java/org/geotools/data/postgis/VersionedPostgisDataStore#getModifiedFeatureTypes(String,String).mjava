    /**
     * Returns a list of type names modified between <code>version1</code> and
     * <code>version2</code>, with the first version excluded.
     * 
     * @param version1
     *            the first version
     * @param version2
     *            the second version, which may be null, if you need to refer the latest version
     * @return an array or type names, eventually empty, never null
     */
    public String[] getModifiedFeatureTypes(String version1, String version2) throws IOException {
        Connection conn = null;
        Statement st = null;
        ResultSet rs = null;
        RevisionInfo r1 = new RevisionInfo(version1);
        RevisionInfo r2 = new RevisionInfo(version2);

        if (r1.revision > r2.revision) {
            // swap them
            RevisionInfo tmp = r1;
            r1 = r2;
            r1 = tmp;
        }

        // no change occurr between n and n
        if (r1.revision == Long.MAX_VALUE || r1.revision == r2.revision)
            return new String[0];

        try {
            conn = wrapped.getDataSource().getConnection();
            st = conn.createStatement();

            rs = st.executeQuery("select distinct(name) from " + TBL_VERSIONEDTABLES + " where id in "
                    + "(select versionedtable from " + TBL_TABLESCHANGED + " where revision > "
                    + r1.revision + " and revision <= " + r2.revision + ")");
            List result = new ArrayList();
            while (rs.next())
                result.add(rs.getString(1));
            return (String[]) result.toArray(new String[result.size()]);
        } catch (SQLException e) {
            throw new DataSourceException("Error getting feature types modified between "
                    + r1.revision + " and " + r2.revision, e);
        } finally {
            JDBCUtils.close(rs);
            JDBCUtils.close(st);
            JDBCUtils.close(conn, Transaction.AUTO_COMMIT, null);
        }
    }

