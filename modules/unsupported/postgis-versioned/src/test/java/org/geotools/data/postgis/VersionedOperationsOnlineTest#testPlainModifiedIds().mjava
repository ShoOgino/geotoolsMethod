    public void testPlainModifiedIds() throws IOException, IllegalAttributeException {
        VersionedPostgisDataStore ds = getDataStore();
        String newId = buildRiverHistory();

        // check modified feature types are the proper ones
        // full history
        String[] modifiedTypes = ds.getModifiedFeatureTypes("1", null);
        assertEquals(1, modifiedTypes.length);
        assertEquals("river", modifiedTypes[0]);

        // get features modified in first revisions, without filters
        Transaction ac = Transaction.AUTO_COMMIT;
        // ... all history
        ModifiedFeatureIds mfids = ds.getModifiedFeatureFIDs("river", "1", "5", Filter.INCLUDE,
                null, ac);
        assertEquals(1, mfids.getCreated().size());
        assertEquals(1, mfids.getDeleted().size());
        assertEquals(1, mfids.getModified().size());
        assertTrue(mfids.getCreated().contains(newId));
        assertTrue(mfids.getDeleted().contains("river.rv2"));
        assertTrue(mfids.getModified().contains("river.rv1"));
        // ... just first modification
        mfids = ds.getModifiedFeatureFIDs("river", "1", "2", Filter.INCLUDE, null, ac);
        assertEquals(0, mfids.getCreated().size());
        assertEquals(0, mfids.getDeleted().size());
        assertEquals(2, mfids.getModified().size());
        assertTrue(mfids.getModified().contains("river.rv1"));
        assertTrue(mfids.getModified().contains("river.rv2"));
        // ... just second one
        mfids = ds.getModifiedFeatureFIDs("river", "2", "3", Filter.INCLUDE, null, ac);
        assertEquals(0, mfids.getCreated().size());
        assertEquals(0, mfids.getDeleted().size());
        assertEquals(1, mfids.getModified().size());
        assertTrue(mfids.getModified().contains("river.rv2"));
        // ... just creation and deletion
        mfids = ds.getModifiedFeatureFIDs("river", "3", "5", Filter.INCLUDE, null, ac);
        assertEquals(1, mfids.getCreated().size());
        assertEquals(1, mfids.getDeleted().size());
        assertEquals(0, mfids.getModified().size());
        assertTrue(mfids.getCreated().contains(newId));
        assertTrue(mfids.getDeleted().contains("river.rv2"));
        // ... a non existent one
        mfids = ds.getModifiedFeatureFIDs("river", "10", "11", Filter.INCLUDE, null, ac);
        assertEquals(0, mfids.getCreated().size());
        assertEquals(0, mfids.getDeleted().size());
        assertEquals(0, mfids.getModified().size());

        // now check with some filters too
        // ... a fid one
        Filter fidFilter = ff.id(Collections.singleton(ff.featureId("river.rv1")));
        mfids = ds.getModifiedFeatureFIDs("river", "1", "3", fidFilter, null, ac);
        assertEquals(0, mfids.getCreated().size());
        assertEquals(0, mfids.getDeleted().size());
        assertEquals(1, mfids.getModified().size());
        assertTrue(mfids.getModified().contains("river.rv1"));
        // ... a bbox one
        Filter bboxFilter = ff.bbox("geom", 100, 100, 300, 300, null);
        mfids = ds.getModifiedFeatureFIDs("river", "1", "3", bboxFilter, null, ac);
        assertEquals(0, mfids.getCreated().size());
        assertEquals(0, mfids.getDeleted().size());
        assertEquals(1, mfids.getModified().size());
        assertTrue(mfids.getModified().contains("river.rv2"));
        // ... a non encodable one, matching
        Filter roundedFlowFilter = ff.equals(ff.function("ceil", ff.property("flow")), ff
                .literal(10));
        mfids = ds.getModifiedFeatureFIDs("river", "1", "3", roundedFlowFilter, null, ac);
        assertEquals(0, mfids.getCreated().size());
        assertEquals(0, mfids.getDeleted().size());
        assertEquals(1, mfids.getModified().size());
        assertTrue(mfids.getModified().contains("river.rv1"));
        // ... same filter, but feature not modified in those revisions
        mfids = ds.getModifiedFeatureFIDs("river", "2", "3", roundedFlowFilter, null, ac);
        assertEquals(0, mfids.getCreated().size());
        assertEquals(0, mfids.getDeleted().size());
        assertEquals(0, mfids.getModified().size());
        // ... a non encodable one, not matching
        Filter roundedFlowFilter2 = ff.equals(ff.function("ceil", ff.property("flow")), ff
                .literal(11));
        mfids = ds.getModifiedFeatureFIDs("river", "1", "3", roundedFlowFilter2, null, ac);
        assertEquals(0, mfids.getCreated().size());
        assertEquals(0, mfids.getDeleted().size());
        assertEquals(0, mfids.getModified().size());
    }

