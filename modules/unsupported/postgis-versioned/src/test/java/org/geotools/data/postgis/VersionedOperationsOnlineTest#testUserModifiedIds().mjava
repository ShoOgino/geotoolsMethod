    public void testUserModifiedIds() throws IOException, IllegalAttributeException {
        VersionedPostgisDataStore ds = getDataStore();
        String newId = buildRiverHistory();

        // check modified feature types are the proper ones
        // full history
        String[] modifiedTypes = ds.getModifiedFeatureTypes("1", null);
        assertEquals(1, modifiedTypes.length);
        assertEquals("river", modifiedTypes[0]);

        // get features modified in first revisions, without filters
        Transaction ac = Transaction.AUTO_COMMIT;
        // ... all history, all users
        ModifiedFeatureIds mfids = ds.getModifiedFeatureFIDs("river", "1", "5", Filter.INCLUDE,
                new String[] { "lamb", "trout" }, ac);
        assertEquals(1, mfids.getCreated().size());
        assertEquals(1, mfids.getDeleted().size());
        assertEquals(1, mfids.getModified().size());
        // ... just first modification, but with the wrong user
        mfids = ds.getModifiedFeatureFIDs("river", "1", "2", Filter.INCLUDE,
                new String[] { "trout" }, ac);
        assertEquals(0, mfids.getCreated().size());
        assertEquals(0, mfids.getDeleted().size());
        assertEquals(0, mfids.getModified().size());
        // ... again the first modification, right user this time
        mfids = ds.getModifiedFeatureFIDs("river", "1", "2", Filter.INCLUDE,
                new String[] { "lamb" }, ac);
        assertEquals(0, mfids.getCreated().size());
        assertEquals(0, mfids.getDeleted().size());
        assertEquals(2, mfids.getModified().size());
        // ... let's see what trout did between 1 and 4
        mfids = ds.getModifiedFeatureFIDs("river", "1", "4", Filter.INCLUDE,
                new String[] { "trout" }, ac);
        assertEquals(0, mfids.getCreated().size());
        assertEquals(0, mfids.getDeleted().size());
        assertEquals(1, mfids.getModified().size());
        assertTrue(mfids.getModified().contains("river.rv2"));
    }

