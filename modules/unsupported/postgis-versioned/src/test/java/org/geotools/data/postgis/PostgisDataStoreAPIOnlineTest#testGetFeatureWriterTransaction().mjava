    /**
     * Test two transactions one removing feature, and one adding a feature.
     * 
     * @throws IllegalAttributeException
     * @throws Exception
     *             DOCUMENT ME!
     */
    public void testGetFeatureWriterTransaction() throws Exception {
        Transaction t1 = new DefaultTransaction();
        Transaction t2 = new DefaultTransaction();
        FeatureWriter<SimpleFeatureType, SimpleFeature> writer1 = data.getFeatureWriter("road", rd1Filter, t1);
        FeatureWriter<SimpleFeatureType, SimpleFeature> writer2 = data.getFeatureWriterAppend("road", t2);

        SimpleFeatureType road = data.getSchema("road");
         FeatureReader<SimpleFeatureType, SimpleFeature> reader;
        SimpleFeature feature;
        SimpleFeature[] ORIGINAL = roadFeatures;
        SimpleFeature[] REMOVE = new SimpleFeature[ORIGINAL.length - 1];
        SimpleFeature[] ADD = new SimpleFeature[ORIGINAL.length + 1];
        SimpleFeature[] FINAL = new SimpleFeature[ORIGINAL.length];
        int i;
        int index;
        index = 0;

        for (i = 0; i < ORIGINAL.length; i++) {
            feature = ORIGINAL[i];

            if (!feature.getID().equals(roadFeatures[0].getID())) {
                REMOVE[index++] = feature;
            }
        }

        for (i = 0; i < ORIGINAL.length; i++) {
            ADD[i] = ORIGINAL[i];
        }

        ADD[i] = newRoad; // will need to update with Fid from database

        for (i = 0; i < REMOVE.length; i++) {
            FINAL[i] = REMOVE[i];
        }

        FINAL[i] = newRoad; // will need to update with Fid from database

        // start off with ORIGINAL
        reader = data.getFeatureReader(new DefaultQuery("road", Filter.INCLUDE),
                Transaction.AUTO_COMMIT);
        assertTrue("Sanity check failed: before modification reader didn't match original content",
                covers(reader, ORIGINAL));
        reader.close();

        // writer 1 removes road.rd1 on t1
        // -------------------------------
        // - tests transaction independence from DataStore
        while (writer1.hasNext()) {
            feature = (SimpleFeature) writer1.next();
            assertEquals(roadFeatures[0].getID(), feature.getID());
            writer1.remove();
        }

        // still have ORIGINAL and t1 has REMOVE
        reader = data.getFeatureReader(new DefaultQuery("road", Filter.INCLUDE),
                Transaction.AUTO_COMMIT);
        assertTrue("Feature deletion managed to leak out of transaction?", covers(reader, ORIGINAL));
        reader.close();

        reader = data.getFeatureReader(new DefaultQuery("road", Filter.INCLUDE), t1);
        assertTrue(covers(reader, REMOVE));
        reader.close();

        // close writer1
        // --------------
        // ensure that modification is left up to transaction commmit
        writer1.close();

        // We still have ORIGIONAL and t1 has REMOVE
        reader = data.getFeatureReader(new DefaultQuery("road", Filter.INCLUDE),
                Transaction.AUTO_COMMIT);
        assertTrue(covers(reader, ORIGINAL));
        reader.close();

        reader = data.getFeatureReader(new DefaultQuery("road", Filter.INCLUDE), t1);
        assertTrue(covers(reader, REMOVE));
        reader.close();

        // writer 2 adds road.rd4 on t2
        // ----------------------------
        // - tests transaction independence from each other
        feature = (SimpleFeature) writer2.next();
        feature.setAttributes(newRoad.getAttributes());
        writer2.write();

        // HACK: ?!? update ADD and FINAL with new FID from database
        //
        reader = data.getFeatureReader(new DefaultQuery("road", Filter.INCLUDE), t2);
        newRoad = findFeature(reader, "id", new Integer(4));
        System.out.println("newRoad:" + newRoad);
        ADD[ADD.length - 1] = newRoad;
        FINAL[FINAL.length - 1] = newRoad;
        reader.close();

        // We still have ORIGINAL and t2 has ADD
        reader = data.getFeatureReader(new DefaultQuery("road", Filter.INCLUDE),
                Transaction.AUTO_COMMIT);
        assertTrue(covers(reader, ORIGINAL));
        reader.close();

        reader = data.getFeatureReader(new DefaultQuery("road", Filter.INCLUDE), t2);
        assertMatched(ADD, reader); // broken due to FID problem
        reader.close();

        writer2.close();

        // Still have ORIGIONAL and t2 has ADD
        reader = data.getFeatureReader(new DefaultQuery("road", Filter.INCLUDE),
                Transaction.AUTO_COMMIT);
        assertTrue(covers(reader, ORIGINAL));
        reader.close();
        reader = data.getFeatureReader(new DefaultQuery("road", Filter.INCLUDE), t2);
        assertTrue(coversLax(reader, ADD));
        reader.close();

        // commit t1
        // ---------
        // -ensure that delayed writing of transactions takes place
        //
        t1.commit();

        // We now have REMOVE, as does t1 (which has not additional diffs)
        // t2 will have FINAL
        reader = data.getFeatureReader(new DefaultQuery("road", Filter.INCLUDE),
                Transaction.AUTO_COMMIT);
        assertTrue(covers(reader, REMOVE));
        reader.close();
        reader = data.getFeatureReader(new DefaultQuery("road", Filter.INCLUDE), t1);
        assertTrue(covers(reader, REMOVE));
        reader.close();
        reader = data.getFeatureReader(new DefaultQuery("road", Filter.INCLUDE), t2);
        assertTrue(coversLax(reader, FINAL));
        reader.close();

        // commit t2
        // ---------
        // -ensure that everyone is FINAL at the end of the day
        t2.commit();

        // We now have Number( remove one and add one)
        reader = data.getFeatureReader(new DefaultQuery("road", Filter.INCLUDE),
                Transaction.AUTO_COMMIT);
        assertTrue(coversLax(reader, FINAL));
        reader.close();

        reader = data.getFeatureReader(new DefaultQuery("road", Filter.INCLUDE), t1);
        assertTrue(coversLax(reader, FINAL));
        reader.close();

        reader = data.getFeatureReader(new DefaultQuery("road", Filter.INCLUDE), t2);
        assertTrue(coversLax(reader, FINAL));
        reader.close();

        t1.close();
        t2.close();
    }

