    public void testGetFeatureWriter() throws IOException, NoSuchElementException, Exception {
        VersionedPostgisDataStore ds = getDataStore();
        ReferencedEnvelope originalBounds = ds.wrapped.getFeatureSource("road").getBounds();

        // version enable road
        SimpleFeatureType originalFt = ds.getSchema("road");
        ds.setVersioned("road", true, "gimbo", "version enabling stuff");

        // build a filter to extract just road 1
        Filter filter = ff.id(Collections.singleton(ff.featureId("road.rd1")));

        // now write one revision
        Transaction t = createTransaction("gimbo", "first change");
        FeatureWriter<SimpleFeatureType, SimpleFeature> fw = ds.getFeatureWriter("road", filter, t);
        assertTrue(fw.hasNext());
        SimpleFeature f = fw.next();
        f.setAttribute("name", "r1 rev 2");
        fw.write();
        fw.close();
        t.commit();
        assertEquals(new Long(2), t.getProperty(VersionedPostgisDataStore.REVISION));
        assertEquals("2", t.getProperty(VersionedPostgisDataStore.VERSION));
        t.close();

        // write another
        t = createTransaction("gimbo", "second change");
        fw = ds.getFeatureWriter("road", filter, t);
        assertTrue(fw.hasNext());
        f = fw.next();
        f.setAttribute("name", "r1 rev 3");
        fw.write();
        fw.close();
        t.commit();
        t.close();

        // check we have the rigth changesets in the database
        DefaultQuery q = new DefaultQuery(VersionedPostgisDataStore.TBL_CHANGESETS);
        t = new DefaultTransaction();
         FeatureReader<SimpleFeatureType, SimpleFeature> fr = ds.getFeatureReader(q, t);
        // ... ah, would very much like to sort on revision...
        // ... first revision, import
        assertTrue(fr.hasNext());
        f = fr.next();
        assertEquals(new Long(1), f.getAttribute("revision"));
        // TODO : get revision back among the attributes
        // assertEquals(new Long(1), f.getAttribute("revision"));
        assertEquals(originalBounds, ((Geometry) f.getDefaultGeometry()).getEnvelopeInternal());
        // ... first change
        assertTrue(fr.hasNext());
        f = fr.next();
        assertEquals(new Long(2), f.getAttribute("revision"));
        assertEquals("first change", f.getAttribute("message"));
        assertEquals(((Geometry) roadFeatures[0].getDefaultGeometry()).getEnvelope(), ((Geometry) f.getDefaultGeometry())
                .getEnvelope());
        // ... second change
        assertTrue(fr.hasNext());
        f = fr.next();
        assertEquals(new Long(3), f.getAttribute("revision"));
        assertEquals("second change", f.getAttribute("message"));
        assertEquals(((Geometry) roadFeatures[0].getDefaultGeometry()).getEnvelope(), ((Geometry) f.getDefaultGeometry())
                .getEnvelope());
        // finish
        assertFalse(fr.hasNext());
        fr.close();
        t.close();

        // no revision info, use last
        Filter idFilter = ff.equals(ff.property("id"), ff.literal(1l));
        q = new DefaultQuery("road", idFilter);
        fr = ds.getFeatureReader(q, Transaction.AUTO_COMMIT);
        // make sure the type is the same as if we were working against a non
        // versioned datastore
        assertEquals(originalFt, fr.getFeatureType());
        assertTrue(fr.hasNext());
        f = fr.next();
        assertEquals("r1 rev 3", f.getAttribute("name"));
        assertFalse(fr.hasNext());
        fr.close();

        // now extract revision 1
        q = new DefaultQuery("road", idFilter);
        q.setVersion("1");
        fr = ds.getFeatureReader(q, Transaction.AUTO_COMMIT);
        assertTrue(fr.hasNext());
        f = fr.next();
        assertEquals("r1", f.getAttribute("name"));
        assertFalse(fr.hasNext());
        fr.close();

        // and now extract revision 2
        q = new DefaultQuery("road", idFilter);
        q.setVersion("2");
        fr = ds.getFeatureReader(q, Transaction.AUTO_COMMIT);
        assertTrue(fr.hasNext());
        f = fr.next();
        assertEquals("r1 rev 2", f.getAttribute("name"));
        assertFalse(fr.hasNext());
        fr.close();
    }

