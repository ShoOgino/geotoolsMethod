    public final Map<String, Object> execute(Map<String, Object> input,
            ProgressListener monitor) {
        if ( monitor == null ) {
            monitor = new NullProgressListener();
        }
        
        //read the parameters, features and buffer amount
        FeatureCollection features = 
            (FeatureCollection) input.get( FeatureToFeatureProcessFactory.FEATURES.key );

        //start progress
        float scale = 100f / features.size();
        monitor.started();
        
        //create the result feature collection
        SimpleFeatureType targetSchema = getTargetSchema((SimpleFeatureType) features.getSchema(), input);
        FeatureCollection result = new DefaultFeatureCollection(null, targetSchema);

        SimpleFeatureBuilder fb = new SimpleFeatureBuilder((SimpleFeatureType) result.getSchema());
        FeatureIterator fi = features.features();
        try {
            int counter = 0;
            while( fi.hasNext() ) {
                //copy the feature
                fb.init((SimpleFeature) fi.next());
                SimpleFeature feature = fb.buildFeature(null);
                
                //buffer the geometry
                try {
                    processFeature( feature, input );
                }
                catch( Exception e ) {
                    monitor.exceptionOccurred( e );
                }
                
                monitor.progress( scale * counter++);
                result.add( feature );    
            }
        }
        finally {
            features.close( fi );
        }
        monitor.complete();
        
        //return the result
        Map<String,Object> output = new HashMap<String, Object>();
        output.put( FeatureToFeatureProcessFactory.RESULT.key, result );
        return output;
    }

