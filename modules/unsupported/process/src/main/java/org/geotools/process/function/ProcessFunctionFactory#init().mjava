    private synchronized void init() {
        if (functionNames == null) {
            // collect and sort the factories to have a reproducable list of function names
            List<ProcessFactory> factories = new ArrayList<>(Processors.getProcessFactories());
            Collections.sort(factories, FACTORY_COMPARATOR);

            // collect name and params of all processes resulting in a single output
            processToFunction = new HashMap<>();
            functionNames = new ArrayList<>();
            for (ProcessFactory factory : factories) {
                if (!factory.isAvailable()) {
                    continue;
                }
                for (Name processName : factory.getNames()) {
                    try {
                        Map<String, Parameter<?>> resultInfo =
                                factory.getResultInfo(processName, null);
                        Parameter<?> result = getPrimary(resultInfo);
                        // check there is a single output
                        if (result != null) {
                            Map<String, Parameter<?>> parameterInfo =
                                    factory.getParameterInfo(processName);
                            List<String> argumentNames = new ArrayList<>(parameterInfo.keySet());
                            List<org.opengis.parameter.Parameter<?>> args =
                                    new ArrayList<>(argumentNames.size());
                            for (String argumentName : argumentNames) {
                                args.add(parameterInfo.get(argumentName));
                            }
                            FunctionName functionName =
                                    new FunctionNameImpl(processName, result, args);
                            functionNames.add(functionName);
                            processToFunction.put(processName, functionName);
                        }
                    } catch (Throwable unavailable) {
                        Logger log = Logger.getLogger(factory.getClass().getName());
                        log.finer("Process " + processName + " unavailable:" + unavailable);
                        continue;
                    }
                }
            }
            // add the parameter function
            functionNames.add(ParameterFunction.NAME);
        }
    }

