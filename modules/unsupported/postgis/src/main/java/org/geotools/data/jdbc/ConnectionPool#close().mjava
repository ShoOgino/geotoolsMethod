    /** Closes all the PooledConnections in the the ConnectionPool.
     *  The current behaviour is to first close all the used connections,
     *  then close all the available connections.  This method will also set
     *  the state of the ConnectionPool to closed, caused any future calls
     *  to getConnection to throw an SQLException.
     */
    public void close() {
        if (closed)  {
            return;
        }
        synchronized (mutex) {
            int size = usedConnections.size();
            for (int i = 0; i < size; i++) {
                ManagedPooledConnection mPool = 
                    (ManagedPooledConnection) usedConnections.removeFirst();
                mPool.pooledConn.removeConnectionEventListener(listManager);
                try {
                    mPool.pooledConn.close();
                } catch (SQLException e) {
                    LOGGER.warning("Failed to close PooledConnection: " + e);
                }
            }
            
            size = availableConnections.size();
            for (int i = 0; i < size; i++) {
                ManagedPooledConnection mPool = 
                    (ManagedPooledConnection) availableConnections.removeFirst();
                mPool.pooledConn.removeConnectionEventListener(listManager);
                try {
                    mPool.pooledConn.close();
                } catch (SQLException e) {
                    LOGGER.warning("Failed to close PooledConnection: " + e);
                }
            }
            closed = true;
        }
    }

