    /**
     * Override that uses sql statements to perform the operation.
     *
     * @see org.geotools.data.jdbc.JDBCFeatureWriter#doUpdate(org.geotools.feature.Feature,
     *      org.geotools.feature.Feature)
     */
    protected void doUpdate(SimpleFeature live, SimpleFeature current)
        throws IOException, SQLException {
        
    	if (LOGGER.isLoggable(Level.FINE)) 
             LOGGER.fine("updating postgis feature " + current);

        Statement statement = null;
        Connection conn = null;

        try {
            conn = queryData.getConnection();
            statement = conn.createStatement();
            
            boolean hasLock = false;
            String sql = makeSelectForUpdateSql(current);
            if (sql == null) {
                LOGGER.fine("Lock acquisition not attempted, JDBCTextFeatureWriter may block during concurrent updates");
            } else { //we have a statement, let's use it
                ResultSet result = null;
                try {
                    result = statement.executeQuery(sql);
                    //TODO: read the result
//                    if (result != null) {
//                        System.out.println(result.toString());
//                    }
                    hasLock = true;
                } catch (SQLException e) {
                    LOGGER.severe(e.getLocalizedMessage());
                    throw new FeatureLockException("Your feature is locked!", current.getID(), e); //do not catch
                } finally {
                    if (result != null) {
                        try {
                            result.close();
                        } catch (SQLException e) {}
                        result = null;
                    }
                }
            }
            
            if (sql == null || hasLock) {
                //attempt the update if we have a lock, or we are too lazy to check
                sql = makeUpdateSql(live, current);
                if (LOGGER.isLoggable(Level.FINE)) 
                    LOGGER.fine(sql);
                statement.executeUpdate(sql);
            } else { //shouldn't be called?
                throw new IOException("Feature Lock failed; giving up");
            }
        } catch (SQLException sqle) {
            String msg = "SQL Exception writing geometry column";
            LOGGER.log(Level.SEVERE, msg, sqle);
            queryData.close(sqle);
            throw new DataSourceException(msg, sqle);
        } finally {
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    String msg = "Error closing JDBC Statement";
                    LOGGER.log(Level.WARNING, msg, e);
                }
            }
        }
    }

