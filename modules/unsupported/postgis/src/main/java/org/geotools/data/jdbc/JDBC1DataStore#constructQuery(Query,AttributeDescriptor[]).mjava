	/**
	 * Used internally to call the subclass hooks that construct the SQL query.
	 *
	 * @param query
	 * @param attrTypes
	 *
	 *
	 * @throws IOException
	 * @throws DataSourceException
	 */
	private String constructQuery(Query query, AttributeDescriptor[] attrTypes)
			throws IOException, DataSourceException {
		String typeName = query.getTypeName();
		SQLBuilder sqlBuilder = getSqlBuilder(query.getTypeName());
		sqlBuilder.setHints( query.getHints() ); // hints will control FEATURE_2D etc...
        
		org.opengis.filter.Filter preFilter = sqlBuilder.getPreQueryFilter(query.getFilter()); //dupe?
		//Filter postFilter = sqlBuilder.getPostQueryFilter(query.getFilter());

		FIDMapper mapper = getFIDMapper(typeName);

		String sqlQuery;
		//FeatureTypeInfo info = typeHandler.getFeatureTypeInfo(typeName);
		//boolean useMax = (postFilter == null); // not used yet

		try {
			LOGGER.fine("calling sql builder with filter " + preFilter);

			if (query.getFilter() == Filter.EXCLUDE) {
				StringBuffer buf = new StringBuffer("SELECT ");
				sqlBuilder.sqlColumns(buf, mapper, attrTypes);
				sqlBuilder.sqlFrom(buf, typeName);
				buf.append(" WHERE '1' = '0'"); // NO-OP it
				sqlQuery = buf.toString();
			} else {
				final Integer offset = query.getStartIndex();
                Integer limit = null;
                if(query.getMaxFeatures() != Integer.MAX_VALUE){
                    limit = new Integer(query.getMaxFeatures());
                }
                sqlQuery = sqlBuilder.buildSQLQuery(typeName, mapper,
						attrTypes, preFilter, query.getSortBy(), offset, limit);
			}

			LOGGER.fine("sql is " + sqlQuery);
		} catch (SQLEncoderException e) {
			throw new DataSourceException("Error building SQL Query", e);
		}

		return sqlQuery;
	}

