        /**
         * Attempts to determine the FID after it was inserted, using four techniques:
         * 1. SELECT currval(pg_get_serial_sequence(...))
         * 2. SELECT currval(sequence name) <-- using other methods to get name
         * 3. SELECT fid ... ORDER BY fid DESC LIMIT 1
         */
        public String retriveId( Connection conn, SimpleFeature feature, Statement statement )
            throws IOException {
            //this approach works when using prepared statements through PostgisPSFeatureWriter, 
            //commenting out until it becomes supported
//            try {
//                //may the insert statement being done with "RETURNING pk"?. In that case statement.getResultset() contains the needed information
//                ResultSet generatedKeys = statement.getResultSet();
//                if(generatedKeys != null && generatedKeys.next()){
//                    Object key = generatedKeys.getObject(1);
//                    return String.valueOf(key);
//                }
//            } catch (Exception e) {
//                e.printStackTrace();
//            }
            
            ResultSet rs = null;
            if (can_usepg_get_serial_sequence) {
                try {
                    //use pg_get_serial_sequence('"table name"','"column name"')
                    String sql = "SELECT currval(pg_get_serial_sequence('\"";
                    String schema = getTableSchemaName();
                    if (schema != null && !schema.equals("")) {
                        sql = sql + schema + "\".\""; 
                    }
                    sql = sql + getTableName() + "\"','" + getColumnName() + "'))";
                    rs = statement.executeQuery(sql); 
                    if (rs.next() && rs.getString("currval") != null){
                        return rs.getString("currval");
                    }else {
                        can_usepg_get_serial_sequence = false;
                    }
                } catch (Exception e) {
                    can_usepg_get_serial_sequence = false;
                } finally {
                    try {
                        if (rs != null)
                            rs.close();
                    } catch (Exception e) {
                        //oh well
                    }
                }
            }
            //TODO: add logging
            if (hasSerialSequence) {
                if (sequenceName == null) {
                    // try to find the sequence (this makes the assumption that
                    // the sequence name contains "tableName_columnName")
                    String sql = "SELECT relname FROM pg_catalog.pg_class WHERE relkind = 'S' AND relname LIKE '"
                        + getTableName() + "_" + getColumnName() + "_seq'";
                    try {
                        rs = statement.executeQuery(sql);
                        if (rs.next() && rs.getString(1) != null) {
                            sequenceName = rs.getString(1);
                        } else {
                            hasSerialSequence = false;
                        }
                    } catch (Exception e) {
                        hasSerialSequence = false;
                    } finally {
                        try {
                            if (rs != null)
                                rs.close();
                        } catch (Exception e) {
                            //oh well
                        }
                    }
                }
                
                if (sequenceName != null) {
                    //get the sequence value
                    String sql = "SELECT currval('\"" + sequenceName + "\"')";
                    try {
                        rs = statement.executeQuery(sql); 
                        if (rs.next() && rs.getString("currval") != null)
                            return rs.getString("currval");
                        else {
                            hasSerialSequence = false;
                        }
                    } catch (Exception e) {
                        hasSerialSequence = false;
                    } finally {
                        try {
                            if (rs != null)
                                rs.close();
                        } catch (Exception e) {
                            //oh well
                        }
                    }
                }
            }
            return findInsertedFID(conn, feature, statement);
        }

