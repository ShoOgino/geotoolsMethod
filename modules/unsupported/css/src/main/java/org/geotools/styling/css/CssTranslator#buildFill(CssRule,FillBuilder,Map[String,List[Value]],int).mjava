    /**
     * Builds the fill using a FillBuilder
     * 
     * @param cssRule
     * @param fb
     * @param values
     * @param i
     */
    private void buildFill(CssRule cssRule, final FillBuilder fb, Map<String, List<Value>> values,
            int i) {
        for (Value fillValue : getMultiValue(values, "fill", i)) {
            if (Function.isGraphicsFunction(fillValue)) {
                new SubgraphicBuilder("fill", fillValue, values, cssRule, i) {

                    @Override
                    protected GraphicBuilder getGraphicBuilder() {
                        return fb.graphicFill();
                    }
                };
            } else if (fillValue != null) {
                fb.color(getExpression(fillValue));
            }
        }
        Expression opacity = getExpression(values, "fill-opacity", i);
        if (opacity != null) {
            fb.opacity(opacity);
        }
    }

