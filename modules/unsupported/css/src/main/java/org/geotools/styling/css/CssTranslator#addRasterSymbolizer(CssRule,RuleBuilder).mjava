    /**
     * Builds a raster symbolizer into the current rule, if a <code>raster-channels</code> property
     * is found
     */
    private void addRasterSymbolizer(CssRule cssRule, RuleBuilder ruleBuilder) {
        Map<String, List<Value>> values =
                cssRule.getPropertyValues(PseudoClass.ROOT, "raster", "rce");
        if (values == null || values.isEmpty()) {
            return;
        }

        int repeatCount = getMaxRepeatCount(values);
        for (int i = 0; i < repeatCount; i++) {
            RasterSymbolizerBuilder rb = ruleBuilder.raster();
            Expression[] channelExpressions = getExpressionArray(values, "raster-channels", i);
            String[] constrastEnhancements =
                    getStringArray(values, "raster-contrast-enhancement", i);
            HashMap<String, Expression> constrastParameters = new HashMap<>();
            for (String cssKey : values.keySet()) {
                String vendorOptionKey = cssKey;
                if (vendorOptionKey.startsWith("-gt-")) {
                    vendorOptionKey = vendorOptionKey.substring(4);
                }
                String sldKey = CONTRASTENHANCMENT_VENDOR_OPTIONS.get(vendorOptionKey);
                if (sldKey != null) {
                    constrastParameters.put(sldKey, getExpression(values, cssKey, i));
                }
            }
            Expression[] gammas = getExpressionArray(values, "raster-gamma", i);
            if (!"auto".equals(channelExpressions[0].evaluate(null, String.class))) {
                ChannelSelectionBuilder cs = rb.channelSelection();
                if (channelExpressions.length == 1) {
                    applyContrastEnhancement(
                            cs.gray().channelName(channelExpressions[0]).contrastEnhancement(),
                            constrastEnhancements,
                            constrastParameters,
                            gammas,
                            0);
                } else if (channelExpressions.length == 2 || channelExpressions.length > 3) {
                    throw new IllegalArgumentException(
                            "raster-channels can accept the name of one or three bands, not "
                                    + channelExpressions.length);
                } else {
                    applyContrastEnhancement(
                            cs.red().channelName(channelExpressions[0]).contrastEnhancement(),
                            constrastEnhancements,
                            constrastParameters,
                            gammas,
                            0);
                    applyContrastEnhancement(
                            cs.green().channelName(channelExpressions[1]).contrastEnhancement(),
                            constrastEnhancements,
                            constrastParameters,
                            gammas,
                            1);
                    applyContrastEnhancement(
                            cs.blue().channelName(channelExpressions[2]).contrastEnhancement(),
                            constrastEnhancements,
                            constrastParameters,
                            gammas,
                            2);
                }
            } else {
                applyContrastEnhancement(
                        rb.contrastEnhancement(),
                        constrastEnhancements,
                        constrastParameters,
                        gammas,
                        0);
            }

            Expression opacity = getExpression(values, "raster-opacity", i);
            if (opacity != null) {
                rb.opacity(opacity);
            }
            Expression geom = getExpression(values, "raster-geometry", i);
            if (geom != null) {
                rb.geometry(geom);
            }
            Value v = getValue(values, "raster-color-map", i);
            if (v != null) {
                if (v instanceof Function) {
                    v = new MultiValue(v);
                }
                if (!(v instanceof MultiValue)) {
                    throw new IllegalArgumentException(
                            "Invalid color map, it must be comprised of one or more color-map-entry function: "
                                    + v);
                } else {
                    MultiValue cm = (MultiValue) v;
                    ColorMapBuilder cmb = rb.colorMap();
                    for (Value entry : cm.values) {
                        if (!(entry instanceof Function)) {
                            throw new IllegalArgumentException(
                                    "Invalid color map content, it must be a color-map-entry function"
                                            + entry);
                        }
                        Function f = (Function) entry;
                        if (!"color-map-entry".equals(f.name)) {
                            throw new IllegalArgumentException(
                                    "Invalid color map content, it must be a color-map-entry function"
                                            + entry);
                        } else if (f.parameters.size() < 2 || f.parameters.size() > 4) {
                            throw new IllegalArgumentException(
                                    "Invalid color map content, it must be a color-map-entry function "
                                            + "with either 2 parameters (color and value) or 3 parameters "
                                            + "(color, value and opacity) or 4 parameters (color, value, opacity and label) "
                                            + entry);
                        }
                        ColorMapEntryBuilder eb = cmb.entry();
                        eb.color(f.parameters.get(0).toExpression());
                        eb.quantity(f.parameters.get(1).toExpression());
                        if (f.parameters.size() > 2) {
                            eb.opacity(f.parameters.get(2).toExpression());
                        }
                        if (f.parameters.size() == 4) {
                            eb.label(f.parameters.get(3).toLiteral());
                        }
                    }
                    String type = getLiteral(values, "raster-color-map-type", i, null);
                    if (type != null) {
                        if ("intervals".equals(type)) {
                            cmb.type(ColorMap.TYPE_INTERVALS);
                        } else if ("ramp".equals(type)) {
                            cmb.type(ColorMap.TYPE_RAMP);
                        } else if ("values".equals(type)) {
                            cmb.type(ColorMap.TYPE_VALUES);
                        } else {
                            throw new IllegalArgumentException("Invalid color map type " + type);
                        }
                    }
                }
            }

            addVendorOptions(rb, RASTER_VENDOR_OPTIONS, values, i);
        }
    }

