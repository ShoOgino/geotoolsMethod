    /**
     * SLD rules can have two or more selectors in OR using different scale ranges, however the SLD
     * model does not allow for that. Flatten them into N different rules, with the same properties,
     * but different selectors
     */
    private List<CssRule> flattenScaleRanges(List<CssRule> rules) {
        List<CssRule> result = new ArrayList<>();
        for (CssRule rule : rules) {
            if (rule.getSelector() instanceof Or) {
                Or or = (Or) rule.getSelector();
                List<Selector> others = new ArrayList<>();
                for (Selector child : or.getChildren()) {
                    ScaleRangeExtractor extractor = new ScaleRangeExtractor();
                    Range<Double> range = extractor.getScaleRange(child);
                    if (range == null) {
                        others.add(child);
                    } else {
                        final CssRule r = deriveWithSelector(rule, child);
                        result.add(r);
                    }
                }
                if (others.size() == 1) {
                    final CssRule r = deriveWithSelector(rule, others.get(0));
                    result.add(r);
                } else if (!others.isEmpty()) {
                    final CssRule r = deriveWithSelector(rule, new Or(others));
                    result.add(r);
                }
            } else {
                result.add(rule);
            }
        }

        return result;
    }

