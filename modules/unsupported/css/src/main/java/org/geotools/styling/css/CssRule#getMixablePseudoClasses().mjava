    /**
     * Returns the list of pseudo classes that can be mixed into this rule, meaning we have root
     * properties in which these pseudo classes can be mixed in.
     * 
     * @param rootProperties
     * @return
     */
    Set<PseudoClass> getMixablePseudoClasses() {
        List<Property> rootProperties = getProperties().get(PseudoClass.ROOT);
        if (rootProperties == null) {
            return Collections.emptySet();
        }
        Set<PseudoClass> result = new HashSet<>();
        for (Property property : rootProperties) {
            String name = property.getName();
            switch (name) {
            case "fill":
            case "stroke":
                result.add(PseudoClass.newPseudoClass("symbol"));
                addPseudoClassesForConditionallyMixableProperty(result, property);
                break;
            case "mark":
                result.add(PseudoClass.newPseudoClass("symbol"));
                result.add(PseudoClass.newPseudoClass("mark"));
                addIndexedPseudoClasses(result, "mark");
                break;
            case "label":
                result.add(PseudoClass.newPseudoClass("symbol"));
                result.add(PseudoClass.newPseudoClass("shield"));
                addIndexedPseudoClasses(result, "shield");
                break;
            }
        }

        return result;
    }

