    /**
     * Builds a stroke using the stroke buidler for the i-th set of property values
     * 
     * @param cssRule
     * @param strokeBuilder
     * @param values
     * @param i
     */
    private void buildStroke(CssRule cssRule, final StrokeBuilder strokeBuilder,
            final Map<String, List<Value>> values, final int i) {

        boolean simpleStroke = false;
        for (Value strokeValue : getMultiValue(values, "stroke", i)) {
            if (Function.isGraphicsFunction(strokeValue)) {
                new SubgraphicBuilder("stroke", strokeValue, values, cssRule, i) {

                    @Override
                    protected GraphicBuilder getGraphicBuilder() {
                        String repeat = getLiteral(values, "stroke-repeat", i, "repeat");
                        if ("repeat".equals(repeat)) {
                            return strokeBuilder.graphicStroke();
                        } else {
                            return strokeBuilder.fillBuilder();
                        }
                    }
                };
            } else if (strokeValue != null) {
                simpleStroke = true;
                strokeBuilder.color(strokeValue.toExpression());
            }
        }
        if (simpleStroke) {
            Expression opacity = getExpression(values, "stroke-opacity", i);
            if (opacity != null) {
                strokeBuilder.opacity(opacity);
            }
            Expression width = getMeasureExpression(values, "stroke-width", i, "px");
            if (width != null) {
                strokeBuilder.width(width);
            }
            Expression lineCap = getExpression(values, "stroke-linecap", i);
            if (lineCap != null) {
                strokeBuilder.lineCap(lineCap);
            }
            Expression lineJoin = getExpression(values, "stroke-linejoin", i);
            if (lineJoin != null) {
                strokeBuilder.lineJoin(lineJoin);
            }
        }
        float[] dasharray = getFloatArray(values, "stroke-dasharray", i);
        if (dasharray != null) {
            strokeBuilder.dashArray(dasharray);
        }
        Expression dashOffset = getMeasureExpression(values, "stroke-dashoffset", i, "px");
        if (dashOffset != null) {
            strokeBuilder.dashOffset(dashOffset);
        }

    }

