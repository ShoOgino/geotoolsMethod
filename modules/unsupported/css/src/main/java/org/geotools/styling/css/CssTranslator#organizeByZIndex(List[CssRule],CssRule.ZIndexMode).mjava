    /**
     * Organizes them rules by ascending z-index
     *
     * @param rules
     * @return
     */
    private Map<Integer, List<CssRule>> organizeByZIndex(
            List<CssRule> rules, CssRule.ZIndexMode zIndexMode) {
        TreeSet<Integer> indexes = getZIndexesForRules(rules);
        Map<Integer, List<CssRule>> result = new TreeMap<>();
        if (indexes.size() == 1) {
            result.put(indexes.first(), rules);
        } else {
            // now for each level extract the sub-rules attached to that level,
            // considering that properties not associated to a level, bind to all levels
            int symbolizerPropertyCount = 0;
            for (Integer index : indexes) {
                List<CssRule> rulesByIndex = new ArrayList<>();
                for (CssRule rule : rules) {
                    CssRule subRule = rule.getSubRuleByZIndex(index, zIndexMode);
                    if (subRule != null) {
                        if (subRule.hasSymbolizerProperty()) {
                            symbolizerPropertyCount++;
                        }
                        rulesByIndex.add(subRule);
                    }
                }
                // do we have at least one property that will trigger the generation
                // of a symbolizer in here?
                if (symbolizerPropertyCount > 0) {
                    result.put(index, rulesByIndex);
                }
            }
        }

        return result;
    }

