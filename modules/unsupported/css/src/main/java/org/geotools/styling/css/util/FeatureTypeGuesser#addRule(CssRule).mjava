    /**
     * Parses a rule selector structure and takes it into account when building the final feature
     * type
     * 
     * @param rule
     */
    public void addRule(CssRule rule) {
        // apply duck typing on the selector
        if (rule.getSelector() != null) {
            rule.getSelector().accept(new AbstractSelectorVisitor() {
                @Override
                public Object visit(Data data) {
                    if (data.filter != null) {
                        data.filter.accept(new FilterTypeVisitor(aggregator), null);
                    }
                    return null;
                }
            });
        }

        // maybe we could apply duck typing to the
        // property values as well... but the whole reason of the exercise here
        // is to find a type for range based comparisons, so checking the
        // filters is probably good enough
    }

