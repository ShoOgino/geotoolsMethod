    /**
     * Translates a CSS stylesheet into an equivalent GeoTools {@link Style} object
     *
     * @param stylesheet
     * @return
     */
    public Style translate(Stylesheet stylesheet) {
        // get the directives influencing translation
        int maxCombinations = getMaxCombinations(stylesheet);
        final TranslationMode mode = getTranslationMode(stylesheet);
        int autoThreshold = getAutoThreshold(stylesheet);

        List<CssRule> topRules = stylesheet.getRules();

        // prepare the full SLD builder
        StyleBuilder styleBuilder = new StyleBuilder();
        styleBuilder.name("Default Styler");
        styleBuilder.title(stylesheet.getDirectiveValue(DIRECTIVE_STYLE_TITLE));
        styleBuilder.styleAbstract(stylesheet.getDirectiveValue(DIRECTIVE_STYLE_ABSTRACT));

        int translatedRuleCount = 0;
        if (mode == TranslationMode.Flat) {
            final List<CssRule> flattened =
                    topRules.stream()
                            .map(CssRule::flattenPseudoSelectors)
                            .collect(Collectors.toList());
            List<CssRule> allRules = expandNested(flattened);
            if (LOGGER.isLoggable(Level.FINE)) {
                LOGGER.fine(
                        "Starting cascaded translation with "
                                + allRules.size()
                                + "  rules in the stylesheet");
            }
            translatedRuleCount = translateFlat(allRules, styleBuilder);
        } else {
            List<CssRule> allRules = expandNested(topRules);
            if (LOGGER.isLoggable(Level.FINE)) {
                LOGGER.fine(
                        "Starting cascaded translation with "
                                + allRules.size()
                                + "  rules in the stylesheet");
            }
            translatedRuleCount =
                    translateCss(mode, allRules, styleBuilder, maxCombinations, autoThreshold);
        }

        // check that we have generated at least one rule in output
        if (translatedRuleCount == 0) {
            throw new IllegalArgumentException(
                    "Invalid CSS style, no rule seems to activate "
                            + "any symbolization. The properties activating the symbolizers are fill, "
                            + "stroke, mark, label, raster-channels, have any been used in a rule matching any feature?");
        }

        return styleBuilder.build();
    }

