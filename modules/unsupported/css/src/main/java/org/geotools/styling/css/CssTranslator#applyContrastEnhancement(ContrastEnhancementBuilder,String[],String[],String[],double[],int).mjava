    /**
     * Applies contrast enhcancement for the i-th band
     * 
     * @param ceb
     * @param constrastEnhancements
     * @param constrastAlgorithms 
     * @param constrastParameters 
     * @param gammas
     * @param i
     */
    private void applyContrastEnhancement(ContrastEnhancementBuilder ceb,
            String[] constrastEnhancements, String[] constrastAlgorithms, String[] constrastParameters, double[] gammas, int i) {
        if (constrastEnhancements != null && constrastEnhancements.length > 0) {
            String contrastEnhancementName;
            if (constrastEnhancements.length > i) {
                contrastEnhancementName = constrastEnhancements[0];
            } else {
                contrastEnhancementName = constrastEnhancements[i];
            }
            String contrastAlgorithm = "";
            if (constrastAlgorithms != null) {
                if (constrastAlgorithms.length > i) {
                    contrastAlgorithm = constrastAlgorithms[0];
                } else {
                    contrastAlgorithm = constrastAlgorithms[i];
                }
            }
            
            //TODO IAN - add parameters and algorithm names here
            if ("histogram".equals(contrastEnhancementName)) {
                ceb.histogram(contrastAlgorithm,constrastParameters);
            } else if ("normalize".equals(contrastEnhancementName)) {
                ceb.normalize(contrastAlgorithm, constrastParameters);
            } else if (!"none".equals(contrastEnhancementName)) {
                //TODO IAN add Exponential and Logarithmic here
                throw new IllegalArgumentException("Invalid contrast enhancement name "
                        + contrastEnhancementName
                        + ", valid values are 'none', 'histogram', 'normalize'");
            }
        } else {
            ceb.unset();
        }
        if (gammas != null && gammas.length > 0) {
            double gamma;
            if (gammas.length > i) {
                gamma = gammas[0];
            } else {
                gamma = gammas[i];
            }
            ceb.gamma(gamma);
        }
    }

