    Rule CssRule() {
        return Sequence(WhiteSpaceOrComment(), Selector(), OptionalWhiteSpace(),//
                '{', OptionalWhiteSpace(), //
                RuleContents(), WhiteSpaceOrIgnoredComment(), '}', new Action() {

                    @Override
                    public boolean run(Context ctx) {
                        List contents = (List) pop();
                        Selector selector = (Selector) pop();
                        String comment = null;
                        if (!ctx.getValueStack().isEmpty() && peek() instanceof String) {
                            comment = (String) pop();
                            comment = comment.trim();
                            // get rid of the extra comments between rules
                            while (!ctx.getValueStack().isEmpty() && peek() instanceof String) {
                                pop();
                            }
                        }
                        
                        final Stream stream = contents.stream();
                        Map<Boolean, List> splitContents = (Map<Boolean, List>) stream.collect(Collectors.partitioningBy(x -> x instanceof CssRule));
                        List<Property> properties = splitContents.get(Boolean.FALSE);
                        List<CssRule> subRules = splitContents.get(Boolean.TRUE);
                        
                        final CssRule rule = new CssRule(selector, properties, comment);
                        rule.nestedRules = subRules;
                        push(rule);

                        return true;
                    }

                });
    }

