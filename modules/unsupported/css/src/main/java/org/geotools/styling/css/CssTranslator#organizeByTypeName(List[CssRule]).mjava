    /**
     * Splits the rules into different sets by feature type name
     *
     * @param rules
     * @return
     */
    private Map<String, List<CssRule>> organizeByTypeName(List<CssRule> rules) {
        TypeNameExtractor extractor = new TypeNameExtractor();
        for (CssRule rule : rules) {
            rule.getSelector().accept(extractor);
        }

        // extract all typename specific rules
        Map<String, List<CssRule>> result = new LinkedHashMap<>();
        Set<TypeName> typeNames = extractor.getTypeNames();
        if (typeNames.size() == 1 && typeNames.contains(TypeName.DEFAULT)) {
            // no layer specific stuff
            result.put(TypeName.DEFAULT.name, rules);
        }

        for (TypeName tn : typeNames) {
            List<CssRule> typeNameRules = new ArrayList<>();
            for (CssRule rule : rules) {
                TypeNameSimplifier simplifier = new TypeNameSimplifier(tn);
                Selector simplified = (Selector) rule.getSelector().accept(simplifier);
                if (simplified != Selector.REJECT
                        && !simplified.equals(rule.getSelector())
                        && rule.getSelector() instanceof Or) {
                    // work bit by bit, some might refer to a typename and others not
                    Or or = (Or) rule.getSelector();
                    List<CssRule> reduced = new ArrayList<>();
                    for (Selector child : or.getChildren()) {
                        Selector cs = (Selector) child.accept(simplifier);
                        if (cs != Selector.REJECT) {
                            final CssRule r = deriveWithSelector(rule, cs);
                            reduced.add(r);
                        }
                    }
                    // change the structure of the OR only if necessary
                    if (reduced.size() > or.getChildren().size()) {
                        typeNameRules.addAll(reduced);
                    } else {
                        final CssRule r = deriveWithSelector(rule, simplified);
                        typeNameRules.add(r);
                    }
                } else {
                    if (simplified != Selector.REJECT) {
                        final CssRule r = deriveWithSelector(rule, simplified);
                        typeNameRules.add(r);
                    }
                }
            }
            result.put(tn.name, typeNameRules);
        }

        return result;
    }

