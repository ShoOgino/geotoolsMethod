    /**
     * Returns all the mixins that can be combined with the rule at hand, that is, mixins that have their pseudo-classes matched by the main rule
     * symbolizers. Two lists will be returned, an in-conditional one, where the mixins just blend into the main rule, and a conditional one, where
     * the mixin adds its own conditions, and thus require its own power set expansion
     * 
     * @param rule
     * @return
     */
    private List<CssRule> getApplicableMixins(CssRule rule) {
        Set<PseudoClass> mixablePseudoClasses = rule.getMixablePseudoClasses();

        List<CssRule> result = new ArrayList<>();
        for (CssRule mixin : mixins) {
            Set<PseudoClass> pseudoClasses = mixin.properties.keySet();
            // scroll to avoid building extra sets
            boolean found = false;
            for (PseudoClass pseudoClass : pseudoClasses) {
                if (mixablePseudoClasses.contains(pseudoClass)) {
                    found = true;
                    break;
                }
            }

            if (found && acceptMixinCssRule(rule, mixin)) {
                result.add(mixin);
            }
        }

        return result;
    }

