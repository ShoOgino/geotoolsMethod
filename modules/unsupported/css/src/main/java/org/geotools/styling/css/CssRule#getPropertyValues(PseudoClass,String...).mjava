    /**
     * Returns the property values by pseudo-class, matching those that satisfy the specified name prefixes
     * 
     * @param pseudoClass
     * @param symbolizerPrefixes
     * @return
     */
    public Map<String, List<Value>> getPropertyValues(PseudoClass pseudoClass,
            String... symbolizerPrefixes) {
        List<Property> psProperties = getProperties().get(pseudoClass);
        if (psProperties == null) {
            return Collections.emptyMap();
        }
        Map<String, List<Value>> result = new LinkedHashMap<>();
        if (symbolizerPrefixes != null && symbolizerPrefixes.length > 0) {
            for (Property property : psProperties) {
                for (String symbolizerPrefix : symbolizerPrefixes) {
                    if (symbolizerPrefix == null || property.getName().startsWith(symbolizerPrefix)
                            || property.getName().startsWith("-gt-" + symbolizerPrefix)) {
                        result.put(property.getName(), property.getValues());
                    }
                }
            }
        } else {
            for (Property property : psProperties) {
                result.put(property.getName(), property.getValues());
            }
        }

        return result;
    }

