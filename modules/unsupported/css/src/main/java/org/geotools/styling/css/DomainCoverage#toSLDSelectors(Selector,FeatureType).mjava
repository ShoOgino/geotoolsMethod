    /**
     * Turns the specified selector into a list of "standardized" SLDSelector
     * 
     * @param selector
     * @param targetFeatureType
     * @return
     */
    List<SLDSelector> toSLDSelectors(Selector selector, FeatureType targetFeatureType) {
        List<SLDSelector> result = new ArrayList<>();
        if (selector instanceof Or) {
            Or or = (Or) selector;
            for (Selector s : or.children) {
                if (s instanceof Or) {
                    throw new IllegalArgumentException(
                            "Unexpected or selector nested inside another one, "
                                    + "at this point they should have been all flattened");
                }
                toIndependentSLDSelectors(s, targetFeatureType, result);
            }
        } else {
            toIndependentSLDSelectors(selector, targetFeatureType, result);
        }

        return result;
    }

