    /**
     * Builds the {@code feature} properties vector onto the {@code target} byte buffer, throws
     * {@link BufferOverflowException} if {@code target} is too small
     *
     * @param feature the feature whose properties to encode
     * @param headerMeta feature type metadata
     * @param target the buffer where to encode the feature properties vector
     * @throws BufferOverflowException if {@code target} couldn't hold the encoded properties
     */
    private static void buildPropertiesVector(
            SimpleFeature feature, HeaderMeta headerMeta, ByteBuffer target) {

        target.order(ByteOrder.LITTLE_ENDIAN);
        for (short i = 0; i < headerMeta.columns.size(); i++) {
            ColumnMeta column = headerMeta.columns.get(i);
            byte type = column.type;
            Object value = feature.getAttribute(column.name);
            if (value == null) {
                continue;
            }
            target.putShort(i);
            if (type == ColumnType.Bool) {
                target.put((byte) ((boolean) value ? 1 : 0));
            } else if (type == ColumnType.Byte) {
                target.put((byte) value);
            } else if (type == ColumnType.Short) {
                target.putShort((short) value);
            } else if (type == ColumnType.Int) {
                target.putInt((int) value);
            } else if (type == ColumnType.Long)
                if (value instanceof Long) {
                    target.putLong((long) value);
                } else if (value instanceof BigInteger) {
                    target.putLong(((BigInteger) value).longValue());
                } else {
                    target.putLong((long) value);
                }
            else if (type == ColumnType.Double)
                if (value instanceof Double) {
                    target.putDouble((double) value);
                } else if (value instanceof BigDecimal) {
                    target.putDouble(((BigDecimal) value).doubleValue());
                } else {
                    target.putDouble((double) value);
                }
            else if (type == ColumnType.DateTime) {
                String isoDateTime = "";
                if (value instanceof LocalDateTime) {
                    isoDateTime = ((LocalDateTime) value).toString();
                } else if (value instanceof LocalDate) {
                    isoDateTime = ((LocalDate) value).toString();
                } else if (value instanceof LocalTime) {
                    isoDateTime = ((LocalTime) value).toString();
                } else if (value instanceof OffsetDateTime) {
                    isoDateTime = ((OffsetDateTime) value).toString();
                } else if (value instanceof OffsetTime) {
                    isoDateTime = ((OffsetTime) value).toString();
                } else {
                    throw new RuntimeException("Unknown date/time type " + type);
                }
                writeString(target, isoDateTime);
            } else if (type == ColumnType.String) {
                writeString(target, (String) value);
            } else {
                throw new RuntimeException("Unknown type " + type);
            }
        }
    }

