    @Test
    public void exotic1() throws IOException {
        SimpleFeatureTypeBuilder sftb = new SimpleFeatureTypeBuilder();
        sftb.setName("testName");
        sftb.add("geometryPropertyName", Geometry.class);
        sftb.add("exotic1_1", Integer.class);
        sftb.add("exotic1_2", BigInteger.class);
        sftb.add("exotic1_3", LocalDateTime.class);
        sftb.add("exotic1_4", LocalDate.class);
        sftb.add("exotic1_5", LocalTime.class);
        sftb.add("exotic1_6", BigDecimal.class);
        sftb.add("exotic1_7", Byte.class);
        sftb.add("exotic1_8", Short.class);
        SimpleFeatureType ft = sftb.buildFeatureType();
        SimpleFeatureBuilder sfb = new SimpleFeatureBuilder(ft);
        sfb.set("exotic1_1", Integer.parseInt("99"));
        sfb.set("exotic1_2", new BigInteger("1111111111111111111"));
        sfb.set("exotic1_3", LocalDateTime.now());
        sfb.set("exotic1_4", LocalDate.now());
        sfb.set("exotic1_5", LocalTime.now());
        sfb.set("exotic1_6", new BigDecimal("1.1111"));
        sfb.set("exotic1_7", Byte.parseByte("99"));
        sfb.set("exotic1_8", Short.parseShort("9999"));
        SimpleFeature sf = sfb.buildFeature("0");
        MemoryFeatureCollection expected = new MemoryFeatureCollection(ft);
        expected.add(sf);
        ByteArrayOutputStream os = new ByteArrayOutputStream();
        FeatureCollectionConversions.serialize(expected, 0, os);
        byte[] bytes = os.toByteArray();
        ByteBuffer bb = ByteBuffer.wrap(bytes);
        bb.order(ByteOrder.LITTLE_ENDIAN);
        SimpleFeatureCollection actual =
                FeatureCollectionConversions.deserialize(new ByteArrayInputStream(bytes));
        SimpleFeature expectedFeature = (SimpleFeature) expected.toArray()[0];
        SimpleFeature actualFeature = (SimpleFeature) actual.toArray()[0];
        // assertEquals(expectedFeature.getAttribute(0).toString(),
        // actualFeature.getAttribute(0).toString());
        assertEquals(
                expectedFeature.getAttribute(1).toString(),
                actualFeature.getAttribute(1).toString());
        assertEquals(
                expectedFeature.getAttribute(2).toString(),
                actualFeature.getAttribute(2).toString());
        assertEquals(
                expectedFeature.getAttribute(3).toString(),
                actualFeature.getAttribute(3).toString());
        assertEquals(
                expectedFeature.getAttribute(4).toString(),
                actualFeature.getAttribute(4).toString());
        assertEquals(
                expectedFeature.getAttribute(5).toString(),
                actualFeature.getAttribute(5).toString());
        assertEquals(
                expectedFeature.getAttribute(6).toString(),
                actualFeature.getAttribute(6).toString());
        assertEquals(
                expectedFeature.getAttribute(7).toString(),
                actualFeature.getAttribute(7).toString());
        assertEquals(
                expectedFeature.getAttribute(8).toString(),
                actualFeature.getAttribute(8).toString());
    }

