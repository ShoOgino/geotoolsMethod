    @Test
    public void testRenderReprojected() throws IOException, FactoryException {
        // get a generic style that works will all layer types
        URL styleResource = MBTilesRenderTest.class.getResource("generic.sld");
        StyleFactory styleFactory = CommonFactoryFinder.getStyleFactory();
        StyledLayerDescriptor sld = new SLDParser(styleFactory, styleResource).parseSLD();
        Style style = ((NamedLayer) sld.getStyledLayers()[0]).getStyles()[0];

        MapContent mc = new MapContent();
        File file = URLs.urlToFile(getClass().getResource("madagascar.mbtiles"));
        MBTilesDataStore store = new MBTilesDataStore(new MBTilesFile(file));
        for (String typeName : store.getTypeNames()) {
            ContentFeatureSource fs = store.getFeatureSource(typeName);
            mc.addLayer(new FeatureLayer(fs, style));
        }
        // switch it to UTM32S, far away to make the rotation visible
        CoordinateReferenceSystem utm32s = CRS.decode("EPSG:32732", true);
        mc.getViewport().setCoordinateReferenceSystem(utm32s);

        StreamingRenderer renderer = new StreamingRenderer();
        renderer.setMapContent(mc);
        renderer.setJava2DHints(new RenderingHints(KEY_ANTIALIASING, VALUE_ANTIALIAS_ON));

        int w = 300;
        int h = 500;
        final BufferedImage image = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g = (Graphics2D) image.getGraphics();
        g.setColor(Color.white);
        g.fillRect(0, 0, w, h);
        renderer.paint(
                g,
                new Rectangle(0, 0, w, h),
                new ReferencedEnvelope(4000000, 5500000, 6400000, 8400000, utm32s));
        g.dispose();

        File expected =
                new File("src/test/resources/org/geotools/mbtiles/madagascar_reprojected.png");
        ImageAssert.assertEquals(expected, image, (int) (w * h * 0.05));
    }

