    @Test
    public void testTransformWithMBTilesWithBuffer() throws Exception {
        // tests that features outside tile borders are not displayed when
        // rendering transformation is issued

        // Issues AttributeRename transformation
        Style styleTransformation = getStyle("transformation_many_points.sld");

        // Style equal to the former Fbut without AttributeRename
        // so that the two images will differ just for the presence of not removed
        // buffer pixel at tiles' borders
        Style styleNoTransformation = getStyle("many_points.sld");

        File file = URLs.urlToFile(getClass().getResource("manypoints_test.mbtiles"));
        MBTilesDataStore store = new MBTilesDataStore(new MBTilesFile(file));
        int w = 440;
        int h = 330;
        ContentFeatureSource fs = store.getFeatureSource("manypoints_test");
        ReferencedEnvelope bbox =
                new ReferencedEnvelope(
                        4254790.681588205,
                        4619242.456803064,
                        4701182.96838953,
                        4977579.240638782,
                        DEFAULT_CRS);
        BufferedImage transformationImg = getImage(w, h, bbox, fs, styleTransformation);
        BufferedImage noTransformationImg = getImage(w, h, bbox, fs, styleNoTransformation);
        File expectedT =
                new File("src/test/resources/org/geotools/mbtiles/many_points_transformed.png");
        File expected = new File("src/test/resources/org/geotools/mbtiles/many_points.png");
        ImageAssert.assertEquals(expectedT, transformationImg, (int) (w * h * 0.05));
        ImageAssert.assertEquals(expected, noTransformationImg, (int) (w * h * 0.05));

        // check pixels along a stripe where buffer's features didn't get removed
        // in image without transformation
        int i = 155;
        int j = 154;
        while (j < 166) {
            Color noTrans = getPixelColor(i, j, noTransformationImg);
            Color tansformed = getPixelColor(i, j, transformationImg);
            assertFalse(noTrans.equals(tansformed));
            j++;
        }
    }

