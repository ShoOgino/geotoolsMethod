    @Override
    public Object visit(And filter, Object data) {
        // collect the list of lists of envelopes. The inner list of envelops is or-ed, the
        // outer list is and-ed
        List<List<Envelope>> envelopes = new ArrayList<>();
        for (Filter f : filter.getChildren()) {
            Object result = f.accept(this, data);
            // when a list of envelopes is returned, they are added to the list of envelopes to
            // process
            if (result instanceof Envelope) {
                envelopes.add(Collections.singletonList((Envelope) result));
            } else if (result instanceof List) {
                @SuppressWarnings("unchecked")
                List<Envelope> list = (List) result;
                envelopes.add(list);
            }
        }

        // should not happen, but to be on the safe side, consider the case of no results
        if (envelopes.isEmpty()) {
            return new Envelope();
        }

        List<Envelope> result = null;
        for (List<Envelope> curr : envelopes) {
            if (result == null) {
                result = curr;
                continue;
            }

            // intersect with the current set
            Set<Envelope> intersections = new HashSet<>();
            for (Envelope ce : curr) {
                for (Envelope re : result) {
                    if (re.intersects(ce)) {
                        intersections.add(re.intersection(ce));
                    }
                }
            }

            if (intersections.isEmpty()) {
                return new Envelope();
            } else {
                result = new ArrayList<>(intersections);
            }
        }

        return result;
    }

