    /**
     * Converts the envelope into a tiles rectangle containing it, at the requested zoom level. X
     * tiles start from west and increase towards east, Y tiles start from north and increase
     * towards south
     */
    protected RectangleLong toTilesRectangle(Envelope envelope, long zoomLevel)
            throws SQLException {
        // From the specification:
        // ---------------------------------------------------------------------------------
        // The tiles table contains tiles and the values used to locate them. The zoom_level,
        // tile_column, and tile_row columns MUST encode the location of the tile, following the
        // Tile Map Service Specification, with the restriction that the global-mercator (aka
        // Spherical Mercator) profile MUST be used.
        // ---------------------------------------------------------------------------------
        // Hence, tile wise the Y axis starts at the bottom and grows north-ward

        long numberOfTiles =
                tilesForZoom(zoomLevel); // number of tile columns/rows for chosen zoom level
        double resX = WORLD_ENVELOPE.getSpan(0) / numberOfTiles; // points per tile
        double resY = WORLD_ENVELOPE.getSpan(1) / numberOfTiles; // points per tile
        double offsetX = WORLD_ENVELOPE.getMinimum(0);
        double offsetY = WORLD_ENVELOPE.getMinimum(1);

        long minTileX = Math.round(Math.floor((envelope.getMinX() - offsetX) / resX));
        long maxTileX = Math.round(Math.floor((envelope.getMaxX() - offsetX) / resX));
        long minTileY = Math.round(Math.floor((envelope.getMinY() - offsetY) / resY));
        long maxTileY = Math.round(Math.floor((envelope.getMaxY() - offsetY) / resY));

        return new RectangleLong(minTileX, maxTileX, minTileY, maxTileY);
    }

