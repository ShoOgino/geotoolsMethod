    // We choose to parameterize the curve as a function from the interval
    // [0, n] to R_n, where interval [i, i+1] corresponds to curve i, and
    // the in between points are mapped linearly between the constructive params
    // of curve i, i.e. C(i+d) = C_i((1-d)*scp + d*ecp), 0 <= d < 1, scp is the
    // start constructive param of curve segment i, ecp is the end constructive
    // param of curve segment i.
    public final DirectPosition forConstructiveParam(double cp) {
        int n = curveSegments.size();
        int i = (int) cp;
        if (i < 0) {
            i = 0;
        } else if (i > n) {
            i = n;
        }
        if (i == n) {
            return ((CurveSegment) curveSegments.get(n - 1)).getEndPoint();
        } else {
            CurveSegment cs = (CurveSegment) curveSegments.get(i);
            double d = cp - i; // 0 <= d < 1
            return cs.forConstructiveParam(
                    (1 - d) * cs.getStartConstructiveParam() + d * cs.getEndConstructiveParam());
        }
    }

