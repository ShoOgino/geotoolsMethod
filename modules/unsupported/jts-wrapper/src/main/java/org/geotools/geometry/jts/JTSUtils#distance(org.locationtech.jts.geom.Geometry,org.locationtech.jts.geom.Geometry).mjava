    /**
     * Computes the distance between two JTS geometries. Unfortunately, JTS's methods do not allow
     * for either parameter to be a collection. So we have to implement the logic of dealing with
     * collection geometries separately.
     */
    public static double distance(
            org.locationtech.jts.geom.Geometry g1, org.locationtech.jts.geom.Geometry g2) {
        if (g1 instanceof org.locationtech.jts.geom.GeometryCollection) {
            double minDistance = Double.POSITIVE_INFINITY;
            org.locationtech.jts.geom.GeometryCollection gc1 =
                    (org.locationtech.jts.geom.GeometryCollection) g1;
            int n = gc1.getNumGeometries();
            for (int i = 0; i < n; i++) {
                double d = distance(gc1.getGeometryN(i), g2);
                if (d < minDistance) minDistance = d;
            }
            return minDistance;
        } else if (g2 instanceof org.locationtech.jts.geom.GeometryCollection) {
            double minDistance = Double.POSITIVE_INFINITY;
            org.locationtech.jts.geom.GeometryCollection gc2 =
                    (org.locationtech.jts.geom.GeometryCollection) g2;
            int n = gc2.getNumGeometries();
            for (int i = 0; i < n; i++) {
                // This call will result in a redundant check of
                // g1 instanceof GeometryCollection.  Maybe we oughta fix that
                // somehow.
                double d = distance(g1, gc2.getGeometryN(i));
                if (d < minDistance) minDistance = d;
            }
            return minDistance;
        } else {
            return g1.distance(g2);
        }
    }

