    /**
     * This implementation returns true if the curve does not cross itself, false otherwise. It does
     * not test for closure or disconnects. To check for disconnects, call the superclass method.
     *
     * @return True if this object's coordinates are a valid Ring.
     */
    public boolean isValid() {
        // Verify that the line doesn't cross itself
        org.locationtech.jts.geom.Coordinate[] coords = computeJTSPeer().getCoordinates();
        int count = coords.length;
        // System.err.println("RingImpl.isValid -- coord count " + count);
        if (count > 2) {
            if (!coords[0].equals(coords)) {
                // System.err.println("  Adding closure coord");
                // Close the set of coordinates for the validation test
                // if it isn't already closed
                org.locationtech.jts.geom.Coordinate[] tmp =
                        new org.locationtech.jts.geom.Coordinate[count + 1];
                System.arraycopy(coords, 0, tmp, 0, count);
                tmp[count] = coords[0];
                coords = tmp;
            }
            LineString jtsLineString = JTSUtils.GEOMETRY_FACTORY.createLineString(coords);
            /*
            System.err.println("  Created JTS LineString, point count " + jtsLineString.getNumPoints()
            	+ ", length " + jtsLineString.getLength() + "\n  simple? " + jtsLineString.isSimple()
            	+ "; valid? " + jtsLineString.isValid() + "; closed? " + jtsLineString.isClosed());
            	*/
            return jtsLineString.isRing();
        }
        return false;
    }

