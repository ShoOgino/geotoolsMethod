    /**
     * This method duplicates the implementation in {@link PostgisDataStore}, except that it
     * ensures a {@link RegfuncSQLEncoderPostgis} is passed to {@link PostgisSQLBuilder}, enabling
     * support for registered functions.
     * 
     * @see org.geotools.data.postgis.PostgisDataStore#getSqlBuilder(java.lang.String)
     */
    // @Override
    public SQLBuilder getSqlBuilder(String typeName) throws IOException {
        FeatureTypeInfo info = typeHandler.getFeatureTypeInfo(typeName);
        int srid = -1;
        SQLEncoderPostgis encoder = new RegfuncSQLEncoderPostgis();
        encoder.setSupportsGEOS(useGeos);
        encoder.setFIDMapper(typeHandler.getFIDMapper(typeName));
        if (info.getSchema().getGeometryDescriptor() != null) {
            String geom = info.getSchema().getGeometryDescriptor().getLocalName();
            srid = info.getSRID(geom);
            encoder.setDefaultGeometry(geom);
        }
        encoder.setFeatureType(info.getSchema());
        encoder.setSRID(srid);
        encoder.setLooseBbox(looseBbox);
        PostgisSQLBuilder builder = new PostgisSQLBuilder(encoder, config, info.getSchema());
        initBuilder(builder);
        return builder;
    }

