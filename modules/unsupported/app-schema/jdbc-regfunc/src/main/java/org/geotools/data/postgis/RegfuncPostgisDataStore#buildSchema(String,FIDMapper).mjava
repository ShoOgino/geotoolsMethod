    /**
     * At the moment, this method does the same as the method of the superclass.
     * 
     * @see org.geotools.data.postgis.PostgisDataStore#buildSchema(java.lang.String,
     *      org.geotools.data.jdbc.fidmapper.FIDMapper)
     */
    // Should be OK to allow super to use its SQLEncoderPostgis (no Regfunc)
    // because only used for permission checks.
    // @Override
    protected SimpleFeatureType buildSchema(String typeName, FIDMapper mapper) throws IOException {
        if (false) {
            // kept this code as probing for registered_functions goes here
            Connection conn = getConnection(Transaction.AUTO_COMMIT);
            try {
                Statement st = conn.createStatement();
                try {
                    st.execute("SELECT * FROM geometry_columns LIMIT 0;");
                } catch (Throwable t) {
                    String msg = "Error querying relation: geometry_columns." + " Possible cause:"
                            + t.getLocalizedMessage();
                    throw new DataSourceException(msg, t);
                }
                try {
                    SQLEncoderPostgis encoder = new RegfuncSQLEncoderPostgis(-1);
                    encoder.setSupportsGEOS(useGeos);
                    PostgisSQLBuilder builder = new PostgisSQLBuilder(encoder, config);
                    initBuilder(builder);

                    st.execute("SELECT * FROM " + builder.encodeTableName(typeName) + " LIMIT 0;");
                } catch (Throwable t) {
                    String msg = "Error querying relation: " + typeName + "." + " Possible cause:"
                            + t.getLocalizedMessage();
                    throw new DataSourceException(msg, t);
                }
                st.close();
            } catch (SQLException e) {
                JDBCUtils.close(conn, Transaction.AUTO_COMMIT, e);
                throw new DataSourceException(e);
            } finally {
                JDBCUtils.close(conn, Transaction.AUTO_COMMIT, null);
            }
            // everything is cool, keep going
        }
        return super.buildSchema(typeName, mapper);
    }

