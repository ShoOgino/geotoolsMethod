    /**
     * Creates ORDER BY for joining query, based on all the sortby's that are specified per
     * joining table
     * 
     * @param query
     * @param sql
     * @throws IOException
     * @throws SQLException
     */
    protected void sort(JoiningQuery query, StringBuffer sql, String[] aliases) throws IOException, SQLException {
        boolean orderby = false;
        
        if (query.getJoins() != null) {
            for (int j = query.getJoins().size() -1; j >= 0 ; j-- ) {
                JoiningQuery.Join join = query.getJoins().get(j);
                SortBy[] sort = join.getSortBy();
            
                if ((sort != null) && (sort.length > 0)) {
                    if (!orderby) {
                        orderby = true;
                        sql.append(" ORDER BY ");
                    }    
                    if (aliases!=null && aliases[j] != null) {
                        sort(aliases[j] , sort, sql, true);
                    } else {
                        sort(join.getJoiningTypeName() , sort, sql, false);
                    }
                }
            }
        }
        
        SortBy[] sort = query.getSortBy();
        
        if ((sort != null) && (sort.length > 0)) {
            if (!orderby) {
                orderby = true;
                sql.append(" ORDER BY ");
            }    
            sort(query.getTypeName(), sort, sql, false);                
        }
        
        if (orderby) {
            sql.setLength(sql.length() - 1);
        }
    }

