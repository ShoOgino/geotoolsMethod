    /**
     * Test filters on the re-mapped geologic unit features, as well as the features that chain
     * them.
     * 
     * @throws IOException
     */
    @Override
    public void testFilters() throws IOException {
        // Filtering on re-mapped geologic unit features
        // Composition is a multi-valued property chained inside geologic unit.
        // We're testing that we can get a geologic unit which has a composition part with a
        // significant proportion value
        Expression property = ff
                .property("gsml:composition/gsml:CompositionPart/gsml:proportion/gsml:CGI_TermValue/gsml:value");
        Filter filter = ff.like(property, "significant");
        FeatureCollection<FeatureType, Feature> filteredResults = guFeatureSource
                .getFeatures(filter);
        // see CompositionPart.properties:
        // cp.167775491936278812=interbedded component|significant
        // cp.167775491936278844=interbedded component|significant
        // EarthResource.properties:
        // _=FORM:String,COMPOSITION:String
        // 25699=strataform|cp.167775491936278844,cp.167775491936278812,cp.167775491936278856
        // 25682=cross-cutting|cp.167775491936278812
        assertEquals(2, size(filteredResults));

        // Filtering on mapped feature features that chain the re-mapped geologic unit features
        // First we need to recreate the mapping with a mapping file where gsml:specification exists
        mfDataAccess.dispose();
        Map<String, Serializable> dsParams = new HashMap<String, Serializable>();
        URL url = getClass().getResource(schemaBase + "MappedFeaturePropertyfile.xml");
        assertNotNull(url);
        dsParams.put("dbtype", "app-schema");
        dsParams.put("url", url.toExternalForm());
        mfDataAccess = DataAccessFinder.getDataStore(dsParams);
        assertNotNull(mfDataAccess);
        FeatureSource<FeatureType, Feature> mfSource = mfDataAccess
                .getFeatureSource(MAPPED_FEATURE);
        property = ff
                .property("gsml:specification/gsml:GeologicUnit/gsml:bodyMorphology/gsml:CGI_TermValue/gsml:value");
        filter = ff.like(property, "vein");
        filteredResults = mfSource.getFeatures(filter);

        // see EarthResource.properties file:
        // _=FORM:String,COMPOSITION:String,CLASSIFICATION:String,COMMODITYDESCRIPTION:String
        // 25678=vein|cp.167775491936278856|urn:cgi:classifierScheme:GSV:GeologicalUnitType|mf2,mf3
        // There are 2 mapped features: mf2 and mf3.
        // You can verify by looking at MappedFeaturePropertiesFile.properties as well
        assertEquals(2, size(filteredResults));
    }

