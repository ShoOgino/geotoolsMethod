    /**
     * Version number negotiation occurs as follows (credit OGC):
     *
     * <ul>
     *   <li><b>1) </b> If the server implements the requested version number, the server shall send
     *       that version.
     *   <li><b>2a) </b> If a version unknown to the server is requested, the server shall send the
     *       highest version less than the requested version.
     *   <li><b>2b) </b> If the client request is for a version lower than any of those known to the
     *       server, then the server shall send the lowest version it knows.
     *   <li><b>3a) </b> If the client does not understand the new version number sent by the
     *       server, it may either cease communicating with the server or send a new request with a
     *       new version number that the client does understand but which is less than that sent by
     *       the server (if the server had responded with a lower version).
     *   <li><b>3b) </b> If the server had responded with a higher version (because the request was
     *       for a version lower than any known to the server), and the client does not understand
     *       the proposed higher version, then the client may send a new request with a version
     *       number higher than that sent by the server.
     * </ul>
     *
     * <p>The OGC tells us to repeat this process (or give up). This means we are actually going to
     * come up with a bit of setup cost in figuring out our GetCapabilities request. This means that
     * it is possible that we may make multiple requests before being satisfied with a response.
     *
     * <p>Also, if we are unable to parse a given version for some reason, for example, malformed
     * XML, we will request a lower version until we have run out of versions to request with. Thus,
     * a server that does not play nicely may take some time to parse and might not even succeed.
     *
     * @return a capabilities object that represents the Capabilities on the server
     * @throws IOException if there is an error communicating with the server, or the XML cannot be
     *     parsed
     * @throws ServiceException if the server returns a ServiceException
     */
    protected C negotiateVersion() throws IOException, ServiceException {
        List versions = new ArrayList(specs.length);
        Exception exception = null;

        for (int i = 0; i < specs.length; i++) {
            versions.add(i, specs[i].getVersion());
        }

        int minClient = 0;
        int maxClient = specs.length - 1;

        int test = maxClient;

        while ((minClient <= test) && (test <= maxClient)) {
            Specification tempSpecification = specs[test];
            String clientVersion = tempSpecification.getVersion();

            GetCapabilitiesRequest request =
                    tempSpecification.createGetCapabilitiesRequest(serverURL);

            // Grab document
            C tempCapabilities;
            try {
                tempCapabilities = (C) issueRequest(request).getCapabilities();
            } catch (ServiceException e) {
                tempCapabilities = null;
                exception = e;
            }

            int compare = -1;
            String serverVersion = clientVersion; // Ignored if caps is null

            if (tempCapabilities != null) {

                serverVersion = tempCapabilities.getVersion();

                compare = serverVersion.compareTo(clientVersion);
            }

            if (compare == 0) {
                // we have an exact match and have capabilities as well!
                this.specification = tempSpecification;

                return tempCapabilities;
            }

            if ((tempCapabilities != null) && versions.contains(serverVersion)) {
                // we can communicate with this server
                int index = versions.indexOf(serverVersion);
                this.specification = specs[index];

                return tempCapabilities;

            } else if (compare < 0) {
                // server responded lower then we asked - and we don't understand.
                maxClient = test - 1; // set current version as limit

                // lets try and go one lower?
                //
                clientVersion = before(versions, serverVersion);

                if (clientVersion == null) {
                    if (exception != null) {
                        if (exception instanceof ServiceException) {
                            throw (ServiceException) exception;
                        }

                        IOException e = new IOException(exception.getMessage());
                        throw e;
                    }

                    return null; // do not know any lower version numbers
                }

                test = versions.indexOf(clientVersion);
            } else {
                // server responsed higher than we asked - and we don't understand
                minClient = test + 1; // set current version as lower limit

                // lets try and go one higher
                clientVersion = after(versions, serverVersion);

                if (clientVersion == null) {
                    if (exception != null) {
                        if (exception instanceof ServiceException) {
                            throw (ServiceException) exception;
                        }

                        IOException e = new IOException(exception.getMessage());
                        throw e;
                    }

                    return null; // do not know any lower version numbers
                }

                test = versions.indexOf(clientVersion);
            }
        }

        // could not talk to this server
        if (exception != null) {
            IOException e = new IOException(exception.getMessage());
            throw e;
        }

        return null;
    }

