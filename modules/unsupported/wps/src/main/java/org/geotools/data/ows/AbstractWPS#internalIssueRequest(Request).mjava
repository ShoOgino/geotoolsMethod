    /**
     * Issues a request to the server and returns that server's response. It
     * asks the server to send the response gzipped to provide a faster transfer
     * time. 
     * 
     * @param request the request to be issued
     * @return a response from the server, which is created according to the specific Request
     * @throws IOException if there was a problem communicating with the server
     * @throws ServiceException if the server responds with an exception or returns bad content
     */
    protected Response internalIssueRequest( Request request ) throws IOException, ServiceException {
        URL finalURL = request.getFinalURL();

        HttpURLConnection connection = (HttpURLConnection) finalURL.openConnection();
        
        connection.addRequestProperty("Accept-Encoding", "gzip");
        
        if (request.requiresPost()) {
        	connection.setRequestMethod("POST");
        	connection.setDoOutput(true);
        	connection.setRequestProperty("Content-type", request.getPostContentType());

        	OutputStream outputStream = connection.getOutputStream();

        	if (LOGGER.isLoggable(Level.FINE)) {
        		ByteArrayOutputStream out = new ByteArrayOutputStream();
        		request.performPostOutput(out);
        		
        		InputStream in = new ByteArrayInputStream(out.toByteArray());
        		BufferedReader reader = new BufferedReader(new InputStreamReader(in));

        		PrintStream stream = new PrintStream(outputStream);
        		
        		StringBuffer postText = new StringBuffer();
        		
        		while (reader.ready()) {
        			String input = reader.readLine();
        			postText = postText.append(input);
        			stream.println(input);
        		}
        		LOGGER.fine(postText.toString());
        		//System.out.println(postText);
        		
        		stream.close();
        		out.close();
        		in.close();
        	} else {
        		request.performPostOutput(outputStream);
        	}
        	
        	outputStream.flush();
        	outputStream.close();
        } else {
        	connection.setRequestMethod("GET");
        }
        
        HTTPResponse httpResponse = new SimpleHttpClient.SimpleHTTPResponse(connection);
        return request.createResponse(httpResponse);
    }

