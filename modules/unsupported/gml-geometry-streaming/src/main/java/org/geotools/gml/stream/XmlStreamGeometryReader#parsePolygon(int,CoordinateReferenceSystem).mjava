    /**
     * Parses a polygon.
     *
     * <p>Precondition: parser positioned at a {@link GML#Polygon Polygon} start tag
     *
     * <p>Postcondition: parser positioned at the {@link GML#Polygon Polygon} end tag of the
     * starting tag
     */
    private Polygon parsePolygon(int dimension, CoordinateReferenceSystem crs)
            throws XMLStreamException, IOException, NoSuchAuthorityCodeException, FactoryException {
        LinearRing shell;
        List<LinearRing> holes = null;

        reader.nextTag();
        reader.require(START_ELEMENT, this.gmlNamespace, null);

        String name = reader.getLocalName();

        if (GML.exterior.equals(name)) {
            reader.nextTag();
            shell = parseRing(dimension, crs);
            reader.nextTag();
            reader.require(END_ELEMENT, this.gmlNamespace, GML.exterior);
        } else if (GML.outerBoundaryIs.equals(name)) {
            reader.nextTag();
            reader.require(START_ELEMENT, this.gmlNamespace, GML.LinearRing);
            shell = parseLinearRing(dimension, crs);
            reader.nextTag();
            reader.require(END_ELEMENT, this.gmlNamespace, GML.outerBoundaryIs);
        } else {
            throw new IllegalStateException("Unknown polygon boundary element: " + name);
        }

        reader.nextTag();

        name = reader.getLocalName();

        if (START_ELEMENT == reader.getEventType()) {
            if (GML.interior.equals(name) || GML.innerBoundaryIs.equals(name)) {
                // parse interior rings
                holes = new ArrayList<>(2);
                while (true) {
                    reader.require(START_ELEMENT, this.gmlNamespace, name);
                    reader.nextTag();
                    LinearRing hole = parseRing(dimension, crs);
                    holes.add(hole);

                    reader.nextTag();
                    reader.require(END_ELEMENT, this.gmlNamespace, name);
                    reader.nextTag();
                    if (END_ELEMENT == reader.getEventType()) {
                        // we're done
                        reader.require(END_ELEMENT, this.gmlNamespace, GML.Polygon);
                        break;
                    }
                }
            }
        }

        reader.require(END_ELEMENT, this.gmlNamespace, GML.Polygon);

        LinearRing[] holesArray = null;
        if (holes != null) {
            holesArray = holes.toArray(new LinearRing[0]);
        }
        Polygon geom = geomFac.createPolygon(shell, holesArray);
        geom.setUserData(crs);
        return geom;
    }

