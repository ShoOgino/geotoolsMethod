    /**
     * Precondition: parser cursor positioned on a geometry property (ej, {@code gml:Point}, etc)
     *
     * <p>Postcondition: parser gets positioned at the end tag of the element it started parsing the
     * geometry at.
     */
    public Geometry readGeometry()
            throws NoSuchAuthorityCodeException, FactoryException, XMLStreamException, IOException {

        checkUnsafeXML();

        if (GML.NAMESPACE.equals(reader.getNamespaceURI())) {
            this.gmlNamespace = GML.NAMESPACE;
        } else if (GML.NAMESPACE_3_2.equals(reader.getNamespaceURI())) {
            this.gmlNamespace = GML.NAMESPACE_3_2;
        } else {
            throw new IllegalStateException(
                    "Expected a geometry element in the GML namespace but found \""
                            + reader.getName()
                            + "\"");
        }

        final String startingGeometryTagName = reader.getLocalName();
        int dimension = crsDimension(2);
        CoordinateReferenceSystem crs = crs(DefaultGeographicCRS.WGS84);

        Geometry geom;
        if (GML.Point.equals(startingGeometryTagName)) {
            geom = parsePoint(dimension, crs);
        } else if (GML.LineString.equals(startingGeometryTagName)) {
            geom = parseLineString(dimension, crs);
        } else if (GML.Curve.equals(startingGeometryTagName)) {
            geom = parseCurve(dimension, crs);
        } else if (GML.Polygon.equals(startingGeometryTagName)) {
            geom = parsePolygon(dimension, crs);
        } else if (GML.MultiPoint.equals(startingGeometryTagName)) {
            geom = parseMultiPoint(dimension, crs);
        } else if (GML.MultiLineString.equals(startingGeometryTagName)) {
            geom = parseMultiLineString(dimension, crs);
        } else if (GML.MultiCurve.equals(startingGeometryTagName)) {
            geom = parseMultiCurve(dimension, crs);
        } else if (GML.MultiSurface.equals(startingGeometryTagName)) {
            geom = parseMultiSurface(dimension, crs);
        } else if (GML.MultiPolygon.equals(startingGeometryTagName)) {
            geom = parseMultiPolygon(dimension, crs);
        } else {
            throw new IllegalStateException(
                    "Unrecognized geometry element " + startingGeometryTagName);
        }

        reader.require(END_ELEMENT, this.gmlNamespace, startingGeometryTagName);

        return geom;
    }

