    private Coordinate[] parseLineStringInternal(int dimension, CoordinateReferenceSystem crs)
            throws XMLStreamException, IOException {

        final String lineElementName = reader.getLocalName();

        reader.nextTag();
        Coordinate[] lineCoords;

        final String coordsName = reader.getLocalName();
        String tagName = reader.getLocalName();
        if (GML.pos.equals(coordsName)) {
            Coordinate[] point;
            List<Coordinate> coords = new ArrayList<>();
            int eventType;
            do {
                point = parseCoordList(dimension, crs);
                coords.add(point[0]);
                reader.nextTag();
                tagName = reader.getLocalName();
                eventType = reader.getEventType();
            } while (eventType == START_ELEMENT && GML.pos.equals(tagName));

            lineCoords = coords.toArray(new Coordinate[0]);

        } else if (GML.posList.equals(coordsName)) {
            lineCoords = parseCoordList(dimension, crs);
            reader.nextTag();
        } else if (GML.coordinates.equals(coordsName)) {
            lineCoords = parseCoordinates(dimension, crs);
            reader.nextTag();
        } else if (GML.coord.equals(coordsName)) {
            Coordinate point;
            List<Coordinate> coords = new ArrayList<>();
            int eventType;
            do {
                point = parseCoord();
                coords.add(point);
                reader.nextTag();
                tagName = reader.getLocalName();
                eventType = reader.getEventType();
            } while (eventType == START_ELEMENT && GML.coord.equals(tagName));

            lineCoords = coords.toArray(new Coordinate[0]);
        } else {
            throw new IllegalStateException(
                    "Expected posList or pos inside LinearRing: " + tagName);
        }
        reader.require(END_ELEMENT, this.gmlNamespace, lineElementName);
        return lineCoords;
    }

