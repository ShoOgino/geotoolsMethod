    @Override
    public void addElement(int index, TIFFImageReader reader, ImageReaderSource<?> source) throws IOException {
    
        final RasterSlice slice = new RasterSlice();
        slice.source=source;
        
        // get metadata and check if this is an overview or not
        final TIFFImageMetadata metadata = (TIFFImageMetadata) reader.getImageMetadata(index);
        final TIFFIFD IFD = metadata.getRootIFD();
        
        //
        // Overviews or full resolution?
        //
        boolean fullResolution=true;
//        boolean multipage=false;
        final int newSubfileType;
        TIFFField tifField=null;
        if((tifField=IFD.getTIFFField(254))!=null)
            newSubfileType=tifField.getAsInt(0);
        else
            newSubfileType=0;// default is single independent image
        fullResolution=(newSubfileType&0x1)!=1?true:false;
//        multipage=((newSubfileType>>1)&0x2)!=1?true:false;
        slice.overview=!fullResolution;
        if(!slice.overview&& !slices.isEmpty())
            createRasterDescriptor();
//        //
//        // Page number 
//        //
//        final int pageNumber;
//        if((tifField=IFD.getTIFFField(297))!=null){
//            pageNumber=tifField.getAsInt(0);
//            slice.pageIndex=pageNumber;
//        }
//        else
//            pageNumber=-1;// default is single independent image

        //
        // Raster dimensions
        //
        final int hrWidth = reader.getWidth(index);
        final int hrHeight = reader.getHeight(index);
        final int hrTileW = reader.getTileWidth(index);
        final int hrTileH = reader.getTileHeight(index);
        final RasterLayout rasterLayout = new RasterLayout(
                0,
                0,
                hrWidth,
                hrHeight,
                reader.getTileGridXOffset(index),
                reader.getTileGridXOffset(index),
                hrTileW,
                hrTileH);
        slice.rasterDimensions=rasterLayout;
        
        //
        // get sample image
        //
        final ImageReadParam readParam = reader.getDefaultReadParam();
        readParam.setSourceRegion(new Rectangle(0, 0, 2, 2));
        final BufferedImage sampleImage = reader.read(index, readParam);
        final ImageTypeSpecifier imageType = new ImageTypeSpecifier(sampleImage);
        slice.imageType=imageType;
        
        double noDataValue;
        CoordinateReferenceSystem crs=null;
        AffineTransform raster2Model=null;
        ReferencedEnvelope bbox=null;
        if(fullResolution){
            
            ////
            //
            // THIS IS A FULL RESOLUTION PAGE
            //
            ////
            
            // 
            // Now load geotiff metadata
            //
            final GeoTiffIIOMetadataDecoder decoder = new GeoTiffIIOMetadataDecoder(metadata);
            
            //
            // NO DATA
            //  
            if (decoder.hasNoData())
                noDataValue = decoder.getNoData();
            
            // //
            //
            // CRS INFO
            //
            // //
            GeoTiffMetadata2CRSAdapter gtcs = null;
            final Object tempCRS = this.hints.get(Hints.DEFAULT_COORDINATE_REFERENCE_SYSTEM);
            if (tempCRS != null) {
                crs = (CoordinateReferenceSystem) tempCRS;
                if (LOGGER.isLoggable(Level.FINE))
                    LOGGER.log(Level.FINE, "Using forced coordinate reference system");
            } else {

                // metadata decoder
                gtcs=new GeoTiffMetadata2CRSAdapter(hints);
                // check metadata first
                if (decoder.hasGeoKey()&& gtcs != null)
                    try {
                        crs = gtcs.createCoordinateSystem(decoder);
                    } catch (FactoryException e) {
                       throw new IOException(e);
                    }

                if (crs == null)
                    crs = GeoTiffUtils.getCRS(source.getSource());
            }

            if (crs == null){
                if(LOGGER.isLoggable(Level.WARNING)){
                    LOGGER.warning("Coordinate Reference System is not available");
                }
                crs = AbstractGridFormat.getDefaultCRS();
            }
            
            if (gtcs != null&& metadata!=null&& (decoder.hasModelTrasformation()||(decoder.hasPixelScales()&&decoder.hasTiePoints()))) {
                // TODO I hate all thiese casts
                raster2Model = (AffineTransform) GeoTiffMetadata2CRSAdapter.getRasterToModel(decoder);
            } else {
                // TODO I hate all thiese casts                
                raster2Model = (AffineTransform) GeoTiffUtils.parseWorldFile(source);
            }
    
            if (raster2Model == null) {
                // TODO test this
                raster2Model=AffineTransform.getScaleInstance(0, 0);
            }
            slice.gridToWorld=raster2Model;
            
            final AffineTransform tempTransform = new AffineTransform(raster2Model);
            tempTransform.translate(-0.5, -0.5);
            try {
                GeneralEnvelope bbox_ = CRS.transform(ProjectiveTransform
                        .create(tempTransform), new GeneralEnvelope(rasterLayout.getBounds()));
                bbox_.setCoordinateReferenceSystem(crs);
                bbox= new ReferencedEnvelope(bbox_);
            } catch (TransformException e) {
                new IOException(e);
            }
            slice.envelope=bbox;
            
        } 
        slices.add(slice);
        
        
//        System.out.println(new IIOMetadataDumper(metadata,metadata.getNativeMetadataFormatName()).getMetadata());

    }

