    /**
     * Creates a new instance of GeoTiffReader
     * 
     * @param input
     *            the GeoTiff file
     * @param uHints
     *            user-supplied hints TODO currently are unused
     * @throws DataSourceException
     */
    public GeoTiffReader(Object input, Hints uHints) throws DataSourceException {
        super(input, uHints);

        //
        // Forcing longitude first since the geotiff specification seems to
        // assume that we have first longitude the latitude.
        //
        if (uHints != null) {
            // prevent the use from reordering axes
            this.hints.remove(Hints.FORCE_LONGITUDE_FIRST_AXIS_ORDER);
            this.hints.add(new Hints(Hints.FORCE_LONGITUDE_FIRST_AXIS_ORDER, Boolean.TRUE));

        }

        //
        // Set the sourceFile being careful in case it is an URL pointing to a file
        //
        try {
            // setting sourceFile
            if (input instanceof URL) {
                final URL sourceURL = (URL) input;
                source = DataUtilities.urlToFile(sourceURL);
            }

            closeMe = true;
            // /////////////////////////////////////////////////////////////////////
            //
            // Get a stream in order to read from it for getting the basic
            // information for this coverage
            //
            // /////////////////////////////////////////////////////////////////////
            if ((source instanceof InputStream) || (source instanceof ImageInputStream)) {
                closeMe = false;
            }
            if (source instanceof ImageInputStream) {
                inStream = (ImageInputStream) source;
            } else {
                inStream = ImageIO.createImageInputStream(source);
            }
            if (inStream == null) {
                throw new IllegalArgumentException("No input stream for the provided sourceFile");
            }

            this.sourceURL = Utils.checkSource(source);
            
            //
            // Coverage name
            //
            coverageName = source instanceof File ? ((File) source).getName() : "geotiff_coverage";
            final int dotIndex = coverageName.lastIndexOf('.');
            if (dotIndex != -1 && dotIndex != coverageName.length()) {
                coverageName = coverageName.substring(0, dotIndex);
            }
            
            
            //
            // Informations about multiple levels and such
            //
            checkForExternalOverviews();
            getHRInfo(this.hints);


            //
            // Freeing streams
            //
            if (closeMe) {
                inStream.close();
            }
        } catch (IOException e) {
            throw new DataSourceException(e);
        } catch (TransformException e) {
            throw new DataSourceException(e);
        } catch (FactoryException e) {
            throw new DataSourceException(e);
        }

        
        //
        // create the raster manager for this geotiff
        //
        rasterManager = new RasterManager(this);
    }

