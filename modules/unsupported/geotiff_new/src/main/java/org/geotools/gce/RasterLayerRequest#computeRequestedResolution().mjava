    /**
     * Computes the requested resolution which is going to be used for selecting levels and or
     * deciding decimation factors on the target coverage.
     * 
     * <p>
     * In case the requested envelope is in the same {@link CoordinateReferenceSystem} of the
     * coverage we compute the resolution using the requested {@link MathTransform}. Notice that it
     * must be a {@link LinearTransform} or else we fail.
     * 
     * <p>
     * In case the requested envelope is not in the same {@link CoordinateReferenceSystem} of the
     * coverage we
     * 
     * @throws DataSourceException
     *             in case something bad happens during reprojections and/or intersections.
     */
    private void computeRequestedResolution() throws DataSourceException {

        try {

            // let's try to get the resolution from the requested gridToWorld
            if (requestedGridToWorld instanceof LinearTransform) {

                //
                // the crs of the request and the one of the coverage are NOT the
                // same and the conversion is not , we can get the resolution from envelope + raster
                // directly
                //
                if (destinationToSourceTransform != null
                        && !destinationToSourceTransform.isIdentity()) {

                    //
                    // compute the approximated resolution in the request crs, notice that we are
                    // assuming a reprojection that keeps the raster area unchanged hence
                    // the effect is a degradation of quality, but we take that into account
                    // emprically
                    //
                    requestedResolution = null;

                    final GridToEnvelopeMapper geMapper= new GridToEnvelopeMapper(new GridEnvelope2D(destinationRasterArea),cropBBox);
                    final AffineTransform tempTransform = geMapper.createAffineTransform();
                    
                    requestedRasterScaleFactors = new double[2];
                    requestedResolution = new double[] {
                            XAffineTransform.getScaleX0(tempTransform),
                            XAffineTransform.getScaleY0(tempTransform) 
                    };

                } else {

                    //
                    // the crs of the request and the one of the coverage are the
                    // same, we can get the resolution from the grid to world
                    //
                    // if(requestedGridToWorld instanceof AffineTransform){
                    requestedResolution = new double[] {
                            XAffineTransform.getScaleX0(requestedGridToWorld),
                            XAffineTransform.getScaleY0(requestedGridToWorld) };
                }
            } else
                // should not happen
                throw new UnsupportedOperationException(Errors.format(ErrorKeys.UNSUPPORTED_OPERATION_$1,requestedGridToWorld.toString()));
                
            //leave
            return;
        } catch (Throwable e) {
            if (LOGGER.isLoggable(Level.INFO)) {
                LOGGER.log(Level.INFO, "Unable to compute requested resolution", e);
            }
        }

        //
        // use the coverage resolution since we cannot compute the requested one
        //
        LOGGER.log(Level.WARNING, "Unable to compute requested resolution, using highest available");
        final OverviewLevel highestResLevel = rasterManager.overviewsController.resolutionsLevels.get(0);
        requestedResolution = new double[]{
                highestResLevel.resolutionX,
                highestResLevel.resolutionY,
        };

    }

