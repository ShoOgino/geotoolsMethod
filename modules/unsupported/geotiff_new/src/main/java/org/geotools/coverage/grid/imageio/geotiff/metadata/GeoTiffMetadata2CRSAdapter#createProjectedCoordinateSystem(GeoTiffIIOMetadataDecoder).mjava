    /**
     * This code is responsible for creating a projected coordinate reference system as specified in
     * the GeoTiff specification. User defined values are supported throughout the evolution of this
     * specification with except of the coordinate transformation which must be one of the supported
     * types.
     *
     * @param metadata to use for building a {@link ProjectedCRS}.
     * @return
     * @throws IOException
     * @throws FactoryException
     */
    private ProjectedCRS createProjectedCoordinateSystem(GeoTiffIIOMetadataDecoder metadata)
            throws IOException, FactoryException {

        // //
        //
        // Get the projection reference system code in case we have one by
        // lookig for the ProjectedCSTypeGeoKey key
        //
        // //
        String tempCode = metadata.getGeoKey(GeoTiffPCSCodes.ProjectedCSTypeGeoKey);
        if (tempCode == null) tempCode = "unnamed".intern();
        final StringBuffer projCode = new StringBuffer(tempCode.trim().intern());

        // //
        //
        // getting the linear unit used by this coordinate reference system
        // since we will use it anyway.
        //
        // //
        Unit linearUnit;
        try {
            linearUnit =
                    createUnit(
                            GeoTiffPCSCodes.ProjLinearUnitsGeoKey,
                            GeoTiffPCSCodes.ProjLinearUnitSizeGeoKey,
                            SI.METER,
                            SI.METER,
                            metadata);
        } catch (GeoTiffException e) {
            linearUnit = null;
        }
        // //
        //
        // if it's user defined, there's a lot of work to do, we have to parse
        // many information.
        //
        // //
        if (tempCode.equalsIgnoreCase("unnamed")
                || tempCode.equals(GeoTiffConstants.GTUserDefinedGeoKey_String)) {
            return createUserDefinedPCS(metadata, linearUnit);
        }
        // //
        //
        // if it's not user defined, just use the EPSG factory to create the
        // coordinate system
        //
        // //
        try {
            if (!tempCode.startsWith("EPSG") && !tempCode.startsWith("epsg")) {
                projCode.insert(0, "EPSG:");
            }
            // it is an EPSG crs let's create it.
            final ProjectedCRS pcrs = (ProjectedCRS) CRS.decode(projCode.toString(), true);
            // //
            //
            // We have nothing to do with the unit of measure
            //
            // //
            if (linearUnit == null
                    || linearUnit.equals(pcrs.getCoordinateSystem().getAxis(0).getUnit()))
                return pcrs;
            // //
            //
            // Creating anew projected CRS
            //
            // //
            return new DefaultProjectedCRS(
                    java.util.Collections.singletonMap(
                            "name", DefaultEllipsoidalCS.getName(pcrs, new CitationImpl("EPSG"))),
                    pcrs.getConversionFromBase().getMethod(),
                    (GeographicCRS) pcrs.getBaseCRS(),
                    pcrs.getConversionFromBase().getMathTransform(),
                    createProjectedCS(linearUnit));
        } catch (FactoryException fe) {
            final IOException ex = new GeoTiffException(metadata, fe.getLocalizedMessage(), fe);
            throw ex;
        }
    }

