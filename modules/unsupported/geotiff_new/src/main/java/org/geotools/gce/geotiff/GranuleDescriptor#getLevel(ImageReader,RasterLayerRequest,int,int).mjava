    private Level getLevel(ImageReader reader, RasterLayerRequest request,  int imageChoice, int overviewIndex) {
        synchronized (granuleLevels) {
            if (granuleLevels.containsKey(Integer.valueOf(overviewIndex))) {
                return granuleLevels.get(Integer.valueOf(overviewIndex));
            } else {
                // load level
                // create the base grid to world transformation
                try {
                    //
                    // get info about the raster we have to read
                    //
                    // get selected level and base level dimensions
                    final Rectangle levelDimension =  new Rectangle(0, 0, reader.getWidth(imageChoice), reader.getHeight(imageChoice));

                    final Level baseLevel = granuleLevels.get(0);
                    final double scaleX = baseLevel.width / (1.0 * levelDimension.width);
                    final double scaleY = baseLevel.height / (1.0 * levelDimension.height);

                    // add the base level
                    final Level newLevel = new Level(scaleX, scaleY, levelDimension.width,levelDimension.height);
                    this.granuleLevels.put(Integer.valueOf(overviewIndex), newLevel);
                    return newLevel;

                } catch (IllegalStateException e) {
                    throw new IllegalArgumentException(e);

                } catch (IOException e) {
                    throw new IllegalArgumentException(e);
                } 
            }

        }
    }

