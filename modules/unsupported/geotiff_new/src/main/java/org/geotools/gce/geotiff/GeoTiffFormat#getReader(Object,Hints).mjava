    /**
     * If <CODE>sourceFile</CODE> is a file, this will return a reader object. This file does not
     * use hints in the construction of the geotiff reader.
     *
     * @param sourceFile must be a GeoTiff File
     * @param hints Hints to pass the hypothetic {@link GridCoverageReader} to control its
     *     behaviour.
     * @return a GeoTiffReader object initialized to the specified File.
     */
    @Override
    public GeoTiffReader getReader(Object source, Hints hints) {
        // if (sourceFile instanceof CatalogEntry) {
        // sourceFile = ((CatalogEntry) sourceFile).resource();
        // }

        if (source instanceof URL) {
            URL url = (URL) source;

            try {
                final File file = URLs.urlToFile(url);
                return new GeoTiffReader(file, hints);
            } catch (DataSourceException e) {
                if (LOGGER.isLoggable(Level.WARNING)) {
                    LOGGER.log(Level.WARNING, e.getLocalizedMessage(), e);
                }
                return null;
            }
        }
        try {
            return new GeoTiffReader(source, hints);
        } catch (DataSourceException e) {
            if (LOGGER.isLoggable(Level.WARNING)) {
                LOGGER.log(Level.WARNING, e.getLocalizedMessage(), e);
            }
            return null;
        }
    }

