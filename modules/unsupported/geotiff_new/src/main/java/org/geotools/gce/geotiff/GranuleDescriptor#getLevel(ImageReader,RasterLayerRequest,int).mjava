    Level getLevel(ImageReader reader, RasterLayerRequest request,  int imageChoice) {
        synchronized (granuleLevels) {
            if (granuleLevels.containsKey(Integer.valueOf(imageChoice))) {
                return granuleLevels.get(Integer.valueOf(imageChoice));
            } else {
                // load level
                // create the base grid to world transformation
                ImageInputStream inStream = null;
                boolean disposeReader =false;
                File file = granuleFile; 
                try {
                    //
                    // get info about the raster we have to read
                    //
                    if (request.rasterManager.parent.extOvrImgChoice >= 0 && 
                            imageChoice >= request.rasterManager.parent.extOvrImgChoice) {
                        file = request.rasterManager.parent.ovrSource;
                        inStream = request.rasterManager.parent.ovrInStreamSPI.createInputStreamInstance(
                                file, ImageIO.getUseCache(), ImageIO.getCacheDirectory());
                        imageChoice = imageChoice - request.rasterManager.parent.extOvrImgChoice;

                        // get a reader
                        reader = Utils.TIFFREADERFACTORY.createReaderInstance();
                        reader.setInput(inStream);                        
                        disposeReader=true;
                    }
                    if (reader == null) {
                        throw new IllegalArgumentException();
                    }

                    // get selected level and base level dimensions
                    final Rectangle levelDimension =  new Rectangle(0, 0, reader.getWidth(imageChoice), reader.getHeight(imageChoice));

                    final Level baseLevel = granuleLevels.get(0);
                    final double scaleX = baseLevel.width / (1.0 * levelDimension.width);
                    final double scaleY = baseLevel.height / (1.0 * levelDimension.height);

                    // add the base level
                    final Level newLevel = new Level(scaleX, scaleY, levelDimension.width,levelDimension.height);
                    this.granuleLevels.put(Integer.valueOf(imageChoice), newLevel);
                    return newLevel;

                } catch (IllegalStateException e) {
                    throw new IllegalArgumentException(e);

                } catch (IOException e) {
                    throw new IllegalArgumentException(e);
                } finally {
                    try {
                        if (inStream != null)
                            inStream.close();
                    } catch (Throwable e) {
                        throw new IllegalArgumentException(e);
                    } finally {
                        if (reader != null&& disposeReader)
                            reader.dispose();
                    }
                }
            }

        }
    }

