	/**
	 * This method creates a <code>CoordinateReferenceSystem</code> object
	 * from the metadata which has been set earlier. If it cannot create the
	 * <code>CoordinateReferenceSystem</code>, then one of three exceptions
	 * is thrown to indicate the error.
	 * 
	 * @return the <code>CoordinateReferenceSystem</code> object representing
	 *         the file data
	 * 
	 * @throws IOException
	 *             if there is unexpected data in the GeoKey tags.
	 * @throws FactoryException
	 * @throws NullPointerException
	 *             if the <code>csAuthorityFactory</code>,
	 *             <code>datumFactory</code>, <code>crsFactory</code> or
	 *             <code>metadata</code> are uninitialized
	 * @throws UnsupportedOperationException
	 *             if the coordinate system specified by the GeoTiff file is not
	 *             supported.
	 */
	public CoordinateReferenceSystem createCoordinateSystem(
			final GeoTiffIIOMetadataDecoder metadata) throws IOException,
			FactoryException {

		// the first thing to check is the Model Type.
		// is it "Projected" or is it "Geographic"?
		// "Geocentric" is not supported.
		switch (getGeoKeyAsInt(GeoTiffConstants.GTModelTypeGeoKey, metadata)) {
		case GeoTiffPCSCodes.ModelTypeProjected:
			return createProjectedCoordinateSystem(metadata);

		case GeoTiffGCSCodes.ModelTypeGeographic:
			return createGeographicCoordinateSystem(metadata);

		default:
			throw new UnsupportedOperationException(
					"GeoTiffMetadata2CRSAdapter::createCoordinateSystem:Only Geographic & Projected Systems are supported.  ");
		}

	}

