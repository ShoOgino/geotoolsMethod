    /**
     * Writes the stats file (.STX).
     *
     * @param image The GridCoverage to write
     * @param dest The destination object (can be a File or ZipOutputStream)
     * @throws IOException If the file could not be written
     */
    private void writeStats(
            final PlanarImage image, String name, Object dest, final GridCoverage2D gc)
            throws IOException {
        // /////////////////////////////////////////////////////////////////////
        //
        // we need to evaluate stats first using jai
        //
        // /////////////////////////////////////////////////////////////////////
        final double[] Max =
                new double[] {
                    Short.MAX_VALUE
                }; // we should encode more than the maximum short anyway
        final double[] Min = new double[] {Short.MIN_VALUE}; // we should avoid No Data values TODO
        final int[] bins = new int[] {(int) (Max[0] - Min[0] + 1)};
        // histogram
        ImageWorker w = new ImageWorker(image);
        w.setRenderingHint(JAI.KEY_TILE_CACHE, null);

        // /////////////////////////////////////////////////////////////////////
        //
        // Create the histogram
        //
        // /////////////////////////////////////////////////////////////////////
        final Histogram hist = w.getHistogram(bins, Min, Max);
        final PlanarImage histogramImage = w.getPlanarImage();

        // /////////////////////////////////////////////////////////////////////
        //
        // Write things
        //
        // /////////////////////////////////////////////////////////////////////
        if (dest instanceof File) {
            // files destinations
            // write statistics
            if (dest instanceof File) {
                dest = new File((File) dest, new StringBuffer(name).append(".STX").toString());
            }
            // writing world file
            final PrintWriter p = new PrintWriter(new FileOutputStream(((File) dest)));
            p.print(1);
            p.print(" ");
            p.print((int) Min[0]);
            p.print(" ");
            p.print((int) Max[0]);
            p.print(" ");
            p.print(hist.getMean()[0]);
            p.print(" ");
            p.print(hist.getStandardDeviation()[0]);
            p.close();
        } else {
            final ZipOutputStream outZ = (ZipOutputStream) dest;
            final ZipEntry e = new ZipEntry(name + ".STX");
            outZ.putNextEntry(e);

            // writing world file
            outZ.write("1".getBytes());
            outZ.write(" ".getBytes());
            outZ.write(Integer.valueOf((int) Min[0]).toString().getBytes());
            outZ.write(" ".getBytes());
            outZ.write(Integer.valueOf((int) Max[0]).toString().getBytes());
            outZ.write(" ".getBytes());
            outZ.write(String.valueOf(hist.getMean()[0]).getBytes());
            outZ.write(" ".getBytes());
            outZ.write(String.valueOf(hist.getStandardDeviation()[0]).getBytes());
            ((ZipOutputStream) dest).closeEntry();
        }
        histogramImage.dispose();
    }

