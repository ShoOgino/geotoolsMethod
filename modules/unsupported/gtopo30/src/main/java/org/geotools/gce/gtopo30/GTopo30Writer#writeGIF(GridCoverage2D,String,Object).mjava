    /**
     * Writing a gif file as an overview for this GTopo30.
     *
     * @param gc The GridCoverage to write
     * @param dest The destination object (can be a File or ZipOutputStream)
     * @throws IOException If the file could not be written
     */
    private void writeGIF(final GridCoverage2D gc, final String name, Object dest)
            throws IOException {
        // rescaling to a smaller resolution in order to save space on storage
        final GridCoverage2D gc1 = rescaleCoverage(gc);

        // get the non-geophysiscs view
        final GridCoverage2D gc2 = gc1;

        // get the underlying image
        RenderedImage image = gc2.getRenderedImage();

        ColorModel cm = image.getColorModel();
        SampleModel sm = image.getSampleModel();

        // Taking this code from previous rendering utilities on ViewsManager
        if (!(cm instanceof IndexColorModel)) {
            ImageLayout layout = ImageUtilities.getImageLayout(image);
            cm = ColorUtilities.getIndexColorModel(new int[] {0});
            int sourceType = sm.getDataType();
            sm =
                    cm.createCompatibleSampleModel(
                            layout.getTileWidth(image), layout.getTileHeight(image));
            int targetType = sm.getDataType();
            MathTransform1D transform = LinearTransform1D.create(1, 9999);
            layout.setColorModel(cm).setSampleModel(sm);
            // ParameterBlock param = new ParameterBlock().addSource(image);
            RenderingHints hints = new RenderingHints(JAI.KEY_IMAGE_LAYOUT, layout);
            hints.put(JAI.KEY_REPLACE_INDEX_COLOR_MODEL, Boolean.FALSE);
            hints.put(JAI.KEY_TRANSFORM_ON_COLORMAP, Boolean.FALSE);
            try {
                LookupTableJAI table =
                        LookupTableFactory.create(
                                sourceType, targetType, new MathTransform1D[] {transform});
                LookupTable lut = it.geosolutions.jaiext.lookup.LookupTableFactory.create(table);
                ImageWorker worker = new ImageWorker(image);
                worker.setRenderingHints(hints);
                worker.lookup(lut);
                image = worker.getRenderedImage();
            } catch (TransformException e) {
                LOGGER.severe(e.getLocalizedMessage());
            }
        }

        // get the image out stream
        try (ImageOutputStream out = getImageOutputStream(dest, image, name + ".GIF")) {
            // write it down as a gif
            final ParameterBlockJAI pbj = new ParameterBlockJAI("ImageWrite");
            pbj.addSource(image);
            pbj.setParameter("Output", out);
            pbj.setParameter("Format", "gif");
            JAI.create("ImageWrite", pbj, new RenderingHints(JAI.KEY_TILE_CACHE, null));
        } finally {
            // disposing the old unused coverages
            gc1.dispose(false);
        }

        if (dest instanceof ZipOutputStream) {
            ((ZipOutputStream) dest).closeEntry();
        }
    }

