    /**
     * Returns a {@code PlanarImage} given a set of parameter specifying the
     * type of read operation to be performed.
     * 
     * @param new
     *                FileImageInputStreamExtImplinput the input
     *                {@code ImageInputStream} to be used for reading the image.
     * @param useJAI
     *                {@code true} if we need to use a JAI ImageRead operation,
     *                {@code false} if we need a simple direct
     *                {@code ImageReader.read(...)} call.
     * @param imageReadParam
     *                an {@code ImageReadParam} specifying the read parameters
     * @param useMultithreading
     *                {@code true} if a JAI ImageRead operation is requested
     *                with support for multithreading. This parameter will be
     *                ignored if requesting a direct read operation.
     * @return the read {@code PlanarImage}
     * @throws IOException
     */
    protected PlanarImage readRaster(final File input, final boolean useJAI,
            final ImageReadParam imageReadParam, final boolean useMultithreading)
            throws IOException {
        PlanarImage raster;
        if (useJAI) {
            final ParameterBlock pbjImageRead = new ParameterBlock();
            pbjImageRead.add(new FileImageInputStreamExtImpl(input));
            pbjImageRead.add(0);
            pbjImageRead.add(Boolean.FALSE);
            pbjImageRead.add(Boolean.FALSE);
            pbjImageRead.add(Boolean.FALSE);
            pbjImageRead.add(null);
            pbjImageRead.add(null);
            pbjImageRead.add(imageReadParam);
            pbjImageRead.add(readerSpi.createReaderInstance());

            // Check if to use a simple JAI ImageRead operation or a
            // multithreaded one
            final String jaiOperation = useMultithreading ? GridCoverageUtilities.IMAGEREADMT: GridCoverageUtilities.IMAGEREAD;
            raster = JAI.create(jaiOperation, pbjImageRead, hints);
        } else {
            final ImageReader reader = readerSpi.createReaderInstance();
            try {
                reader.setInput(new FileImageInputStreamExtImpl(input), true, true);
                raster = PlanarImage.wrapRenderedImage(reader.read(0,imageReadParam));
            }
            finally {
            	if(reader!=null)
            		try {
            			reader.dispose();
            		}catch (Exception e) {
						if(LOGGER.isLoggable(Level.FINE))
							LOGGER.log(Level.FINE,e.getLocalizedMessage(),e);
					}
            }

            
        }
        return raster;
    }

