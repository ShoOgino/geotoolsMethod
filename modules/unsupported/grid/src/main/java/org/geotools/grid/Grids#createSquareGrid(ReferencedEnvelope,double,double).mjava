    /**
     * Creates a vector grid of square elements represented by 'densified' polygons.
     * Each polygon has additional vertices added to its edges.
     * This is useful if you plan to display the grid in a projection other
     * than the one that it was created in since the extra vertices will better
     * approximate curves. The density of vertices is controlled by
     * the value of {@code vertexSpacing} which specifies the maximum distance
     * between adjacent vertices. Vertices are added more or less uniformly.
     *
     * The coordinate reference system is taken from the input bounds.
     * A {@code null} coordinate reference system is permitted.
     * <p>
     * The grid's origin is the minimum X and Y point of the envelope.
     * If the width and/or height of the bounding envelope is not a simple multiple
     * of the requested side length, there will be some unfilled space.
     * <p>
     * Each square in the returned grid is represented by a {@code SimpleFeature}.
     * The feature type has two properties:
     * <ul>
     * <li>element - type Polygon
     * <li>id - type Integer
     * </ul>
     *
     * @param bounds bounds of the grid
     *
     * @param sideLen the side length of grid elements
     *
     * @param vertexSpacing maximum distance between adjacent vertices in a grid
     *        element; if {@code <= 0} or {@code >= sideLen / 2.0} it is ignored
     *        and the polygons will not be densified
     *
     * @return the vector grid
     *
     * @throws IllegalArgumentException
     *         if bounds is null or empty; or
     *         if sideLen is {@code <=} 0
     */
    public static SimpleFeatureSource createSquareGrid(
            ReferencedEnvelope bounds, double sideLen, double vertexSpacing) {
        
        if (bounds == null) {
            throw new IllegalArgumentException("bounds should not be null");
        }

        return Oblongs.createGrid(bounds, sideLen, sideLen, vertexSpacing,
                new DefaultFeatureBuilder(bounds.getCoordinateReferenceSystem()));
    }

