    /**
     * Creates a grid of ortho-lines. Lines are parallel to the bounding envelope's
     * X-axis, Y-axis or both according to the provided line definitions. 
     * Line features will be created using the supplied feature builder.
     * Densified lines (lines strings with additional vertices along their length) can be
     * created by setting the value of {@code vertexSpacing} greater than zero; if so, any
     * lines more than twice as long as this value will be densified.
     * 
     * @param bounds the bounding envelope
     * @param lineDefs one or more ortho-line definitions
     * @param vertexSpacing maximum distance between adjacent vertices along a line
     * @param lineFeatureBuilder feature build to create line features
     * @return the vector grid of lines
     */
    public static SimpleFeatureSource createOrthoLines(ReferencedEnvelope bounds, 
            Collection<OrthoLineDef> lineDefs,
            double vertexSpacing,
            GridFeatureBuilder lineFeatureBuilder) {

        if (bounds == null || bounds.isEmpty() || bounds.isNull()) {
            throw new IllegalArgumentException("The bounds should not be null or empty");
        }

        if (lineDefs == null || lineDefs.isEmpty()) {
            throw new IllegalArgumentException("One or more line controls must be provided");
        }

        CoordinateReferenceSystem boundsCRS = bounds.getCoordinateReferenceSystem();
        CoordinateReferenceSystem builderCRS = 
                lineFeatureBuilder.getType().getCoordinateReferenceSystem();
        if (boundsCRS != null && builderCRS != null &&
                !CRS.equalsIgnoreMetadata(boundsCRS, builderCRS)) {
            throw new IllegalArgumentException("Different CRS set for bounds and the feature builder");
        }

        final SimpleFeatureCollection fc = new ListFeatureCollection(lineFeatureBuilder.getType());
        OrthoLineBuilder lineBuilder = new OrthoLineBuilder(bounds);
        lineBuilder.buildGrid(lineDefs, lineFeatureBuilder, vertexSpacing, fc);
        return DataUtilities.source(fc);
    }

