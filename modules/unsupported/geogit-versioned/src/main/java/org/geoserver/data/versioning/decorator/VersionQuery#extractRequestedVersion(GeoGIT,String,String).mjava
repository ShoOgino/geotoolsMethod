    /**
     * Extracts the feature version from the given {@code rid} if supplied, or
     * finds out the current feature version from the feature id otherwise.
     * 
     * @return the version identifier of the feature given by {@code version},
     *         or at the current geogit HEAD if {@code version == null}, or
     *         {@code null} if such a feature does not exist.
     */
    private Ref extractRequestedVersion(final GeoGIT ggit,
            final String featureId, final String version) {
        final Repository repository = ggit.getRepository();
        if (version != null) {
            ObjectId versionedId = ObjectId.valueOf(version);
            // verify the object exists
            StagingDatabase stagingDatabase = repository.getIndex()
                    .getDatabase();
            boolean exists = stagingDatabase.exists(versionedId);
            // Ref rootTreeChild = repository.getRootTreeChild(path(featureId));
            if (exists) {
                return new Ref(featureId, versionedId, TYPE.BLOB);
            }
            return null;
        }
        // no version specified, find out the latest
        List<String> path = path(featureId);
        Ref currFeatureRef = repository.getRootTreeChild(path);
        if (currFeatureRef == null) {
            // feature does not exist at the current repository state
            return null;
        }
        return currFeatureRef;
    }

