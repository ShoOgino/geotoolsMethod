    /**
     * Retains only the elements in this collection that are contained in the
     * specified collection (optional operation).  In other words, removes
     * from this collection all of its elements that are not contained in the
     * specified collection.
     *
     * @param collection elements to be retained in this collection.
     *
     * @return <tt>true</tt> if this collection changed as a result of the call
     *
     * @see #remove(Object)
     * @see #contains(Object)
     */
//    public boolean retainAll(Collection collection) {
//        List removedFeatures = new ArrayList(contents.size() - collection.size());
//        boolean modified = false;
//
//        for(Iterator it = contents.values().iterator(); it.hasNext(); )  {
//            SimpleFeature f = (SimpleFeature) it.next();
//            if(!collection.contains(f)) {
//                it.remove();
//                modified = true;
//                removedFeatures.add(f);
//            }
//        }
//
//        return modified;
//    }

//    public void close( FeatureIterator<SimpleFeature>  close ) {
//        if( close instanceof FeatureIteratorImpl){
//            FeatureIteratorImpl<SimpleFeature> wrapper = (FeatureIteratorImpl<SimpleFeature>) close;
//            wrapper.close();
//        }
//    }
//

    public  FeatureReader<SimpleFeatureType, SimpleFeature> reader() throws IOException {
        final SimpleFeatureIterator iterator = features(); 
        return new FeatureReader<SimpleFeatureType, SimpleFeature>(){
            public SimpleFeatureType getFeatureType() {
                return getSchema();
            }
            public SimpleFeature next() throws NoSuchElementException {
                return iterator.next();
            }

            public boolean hasNext() throws IOException {
                return iterator.hasNext();
            }

            public void close() throws IOException {
                iterator.close();
            }            
        };
    }

