    /**
     * @see org.geotools.data.FeatureStore#addFeatures(org.geotools.feature.FeatureCollection)
     */
    @Override
    public List<FeatureId> addFeatures(FeatureCollection<T, F> collection)
            throws IOException {
        boolean versioned = isVersioned();
        
        if (versioned) {
            checkTransaction();
        }
        FilterFactory2 ff = CommonFactoryFinder.getFilterFactory2();

        final FeatureStore<T, F> unversioned = getUnversionedStore();
        
        // Optimisation: special case the first load (this is often when we have lots of feaures)
        int initialCount = -1;
        if( versioned ){
            initialCount = unversioned.getCount(Query.ALL);
        }
        // step 1: add features to unversioned 
        List<FeatureId> unversionedIds = unversioned.addFeatures(collection);
        
        // step 2: add features to versioned databse
        if (versioned) {
            try {
                final Name typeName = getSchema().getName();
                VersioningTransactionState versioningState = getVersioningState();
                
                List<Filter> block = new ArrayList<Filter>();
                
                if( initialCount == 0 ){
                    // Optimisation: grab everything for the first load
                    block.add( Filter.INCLUDE );
                }
                else {
                    // Stage inserts in blocks of 3000 to avoid limitations of SQL generation
                    final int PAGE = 1000;
                    int SIZE = unversionedIds.size();
                    for( int i=0; i < SIZE; i+=PAGE){
                        List<FeatureId> list = unversionedIds.subList(i, Math.min( SIZE, i+PAGE));
                        Id id = ff.id(new HashSet<Identifier>(list));
                        block.add( id );
                    }
                }
                List<FeatureId> versionedIds = new ArrayList<FeatureId>();
                for( Filter filter : block ){
                    FeatureCollection<T, F> inserted = unversioned.getFeatures( filter );
                    List<FeatureId> staged = versioningState.stageInsert(typeName, inserted, true);
                    versionedIds.addAll( staged );
                }
                return versionedIds;
            } catch (Exception e) {
                Throwables.propagate(e);
            }
        }
        return unversionedIds;
    }

