    /**
     * Adds all of the elements in the specified collection to this collection
     * (optional operation).  The behavior of this operation is undefined if
     * the specified collection is modified while the operation is in
     * progress. (This implies that the behavior of this call is undefined if
     * the specified collection is this collection, and this collection is
     * nonempty.)
     *
     * @param collection elements to be inserted into this collection.
     *
     * @return <tt>true</tt> if this collection changed as a result of the call
     */
    public void init(FeatureCollection<SimpleFeatureType, SimpleFeature> collection) {
        FeatureIterator<SimpleFeature> iterator = collection.features();
        try {
            while (iterator.hasNext()) {
                SimpleFeature feature = (SimpleFeature) iterator.next();
                if (feature == null) {
                    continue; // cannot add null!
                }
                final String ID = getKey(feature.getIdentifier());
                if (ID == null) {
                    continue; // ID is required!
                }
                if (contents.containsKey(ID)) {
                    continue; // feature all ready present
                }    
                if (this.schema == null) {
                    this.schema = feature.getFeatureType();
                }
                SimpleFeatureType childType = (SimpleFeatureType) getSchema();
                if (!feature.getFeatureType().equals(childType)) {
                    LOGGER.warning("Feature Collection contains a heterogeneous"
                            + " mix of features");
                }
                contents.put(ID, feature);
            }
        }
        finally {
            iterator.close();
        }
    }

