    public void testModifyFeatures() throws Exception {
        // add features circunventing FeatureStore.addFeatures to keep the test
        // independent of the
        // addFeatures functionality
        insertAndAdd(lines1, lines2, lines3, points1, points2, points3);
        new GeoGIT(repo).commit().call();

        Id filter = ff.id(Collections.singleton(ff.featureId(idP1)));
        Transaction tx = new DefaultTransaction();
        points.setTransaction(tx);
        try {
            // initial value
            assertEquals("StringProp1_1", sample( points, filter ).getAttribute("sp"));
            // modify
            points.modifyFeatures("sp", "modified", filter);
            // modified value before commit
            assertEquals("modified", sample( points, filter ).getAttribute("sp"));
            // unmodified value before commit on another store instance (tx
            // isolation)
            assertEquals(
                    "StringProp1_1",
                    sample( dataStore.getFeatureSource(pointsTypeName), filter )
                            .getAttribute("sp"));

            tx.commit();

            // modified value after commit on another store instance
            assertEquals("modified", sample( dataStore.getFeatureSource(pointsTypeName),filter)
                    .getAttribute("sp") );
        } catch (Exception e) {
            tx.rollback();
            throw e;
        } finally {
            tx.close();
        }
        SimpleFeature modified = sample( points,filter);
        assertEquals("modified", modified.getAttribute("sp"));
    }

