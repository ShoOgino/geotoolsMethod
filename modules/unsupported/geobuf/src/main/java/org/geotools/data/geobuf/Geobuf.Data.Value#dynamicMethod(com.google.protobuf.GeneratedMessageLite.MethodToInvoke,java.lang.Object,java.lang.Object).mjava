            @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
            protected final java.lang.Object dynamicMethod(
                    com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
                    java.lang.Object arg0,
                    java.lang.Object arg1) {
                switch (method) {
                    case NEW_MUTABLE_INSTANCE:
                        {
                            return new org.geotools.data.geobuf.Geobuf.Data.Value();
                        }
                    case IS_INITIALIZED:
                        {
                            return DEFAULT_INSTANCE;
                        }
                    case MAKE_IMMUTABLE:
                        {
                            return null;
                        }
                    case NEW_BUILDER:
                        {
                            return new Builder();
                        }
                    case VISIT:
                        {
                            Visitor visitor = (Visitor) arg0;
                            org.geotools.data.geobuf.Geobuf.Data.Value other =
                                    (org.geotools.data.geobuf.Geobuf.Data.Value) arg1;
                            switch (other.getValueTypeCase()) {
                                case STRING_VALUE:
                                    {
                                        valueType_ =
                                                visitor.visitOneofString(
                                                        valueTypeCase_ == 1,
                                                        valueType_,
                                                        other.valueType_);
                                        break;
                                    }
                                case DOUBLE_VALUE:
                                    {
                                        valueType_ =
                                                visitor.visitOneofDouble(
                                                        valueTypeCase_ == 2,
                                                        valueType_,
                                                        other.valueType_);
                                        break;
                                    }
                                case POS_INT_VALUE:
                                    {
                                        valueType_ =
                                                visitor.visitOneofLong(
                                                        valueTypeCase_ == 3,
                                                        valueType_,
                                                        other.valueType_);
                                        break;
                                    }
                                case NEG_INT_VALUE:
                                    {
                                        valueType_ =
                                                visitor.visitOneofLong(
                                                        valueTypeCase_ == 4,
                                                        valueType_,
                                                        other.valueType_);
                                        break;
                                    }
                                case BOOL_VALUE:
                                    {
                                        valueType_ =
                                                visitor.visitOneofBoolean(
                                                        valueTypeCase_ == 5,
                                                        valueType_,
                                                        other.valueType_);
                                        break;
                                    }
                                case JSON_VALUE:
                                    {
                                        valueType_ =
                                                visitor.visitOneofString(
                                                        valueTypeCase_ == 6,
                                                        valueType_,
                                                        other.valueType_);
                                        break;
                                    }
                                case VALUETYPE_NOT_SET:
                                    {
                                        visitor.visitOneofNotSet(valueTypeCase_ != 0);
                                        break;
                                    }
                            }
                            if (visitor
                                    == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
                                            .INSTANCE) {
                                if (other.valueTypeCase_ != 0) {
                                    valueTypeCase_ = other.valueTypeCase_;
                                }
                                bitField0_ |= other.bitField0_;
                            }
                            return this;
                        }
                    case MERGE_FROM_STREAM:
                        {
                            com.google.protobuf.CodedInputStream input =
                                    (com.google.protobuf.CodedInputStream) arg0;
                            try {
                                boolean done = false;
                                while (!done) {
                                    int tag = input.readTag();
                                    switch (tag) {
                                        case 0:
                                            done = true;
                                            break;
                                        default:
                                            {
                                                if (!parseUnknownField(tag, input)) {
                                                    done = true;
                                                }
                                                break;
                                            }
                                        case 10:
                                            {
                                                java.lang.String s = input.readString();
                                                valueTypeCase_ = 1;
                                                valueType_ = s;
                                                break;
                                            }
                                        case 17:
                                            {
                                                valueTypeCase_ = 2;
                                                valueType_ = input.readDouble();
                                                break;
                                            }
                                        case 24:
                                            {
                                                valueTypeCase_ = 3;
                                                valueType_ = input.readUInt64();
                                                break;
                                            }
                                        case 32:
                                            {
                                                valueTypeCase_ = 4;
                                                valueType_ = input.readUInt64();
                                                break;
                                            }
                                        case 40:
                                            {
                                                valueTypeCase_ = 5;
                                                valueType_ = input.readBool();
                                                break;
                                            }
                                        case 50:
                                            {
                                                java.lang.String s = input.readString();
                                                valueTypeCase_ = 6;
                                                valueType_ = s;
                                                break;
                                            }
                                    }
                                }
                            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                                throw new RuntimeException(e.setUnfinishedMessage(this));
                            } catch (java.io.IOException e) {
                                throw new RuntimeException(
                                        new com.google.protobuf.InvalidProtocolBufferException(
                                                        e.getMessage())
                                                .setUnfinishedMessage(this));
                            }
                        }
                        // fall through
                    case GET_DEFAULT_INSTANCE:
                        {
                            return DEFAULT_INSTANCE;
                        }
                    case GET_PARSER:
                        {
                            if (PARSER == null) {
                                synchronized (org.geotools.data.geobuf.Geobuf.Data.Value.class) {
                                    if (PARSER == null) {
                                        PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
                                    }
                                }
                            }
                            return PARSER;
                        }
                }
                throw new UnsupportedOperationException();
            }

