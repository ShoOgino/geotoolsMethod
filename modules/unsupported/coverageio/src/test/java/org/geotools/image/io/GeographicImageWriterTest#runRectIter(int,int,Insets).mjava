    /**
     * Creates a dummy image and tests immediately the iteration.
     */
    private static IIOImage runRectIter(final int width, final int height, final Insets m) {
        final BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_USHORT_GRAY);
        final WritableRaster raster = image.getRaster();
        int value = 0;
        for (int y=image.getHeight(); --y>=0;) {
            for (int x=image.getWidth(); --x>=0;) {
                raster.setSample(x, y, 0, value++);
            }
        }
        final int count = value;
        final IIOImage iiom = new IIOImage(image, null, null);
        assertEquals(count, GeographicImageWriter.computeSize(iiom, null).getNumSampleValues());
        /*
         * Using JAI iterator on the whole image.
         */
        RectIter iterator = GeographicImageWriter.createRectIter(iiom, null);
        assertFalse(iterator instanceof SubsampledRectIter);
        checkSampleSuite(iterator, --value, -1, 0);
        /*
         * Using JAI iterator with subregion and subsampling.
         */
        final ImageWriteParam param = new ImageWriteParam(null);
        final Rectangle bounds = new Rectangle(m.left, m.top, width-(m.left+m.right), height-(m.top+m.bottom));
        param.setSourceRegion(bounds);
        value -= (m.top*width + m.left);
        for (int sourceYSubsampling=1; sourceYSubsampling<=6; sourceYSubsampling++) {
            for (int sourceXSubsampling=1; sourceXSubsampling<=6; sourceXSubsampling++) {
                param.setSourceSubsampling(sourceXSubsampling, sourceYSubsampling, 0, 0);
                iterator = GeographicImageWriter.createRectIter(iiom, param);

                // Number of points on which to iterate in a row.
                int n = (bounds.width - 1) / sourceXSubsampling + 1;

                // The range on which the iteration will take place.
                n *= sourceXSubsampling;

                // Spaces skipped on the left and right sides.
                n = width - n;

                // Adds the range occuped by the skipped lines.
                n += width * (sourceYSubsampling - 1);
                checkSampleSuite(iterator, value, -sourceXSubsampling, -n);
            }
        }
        return iiom;
    }

