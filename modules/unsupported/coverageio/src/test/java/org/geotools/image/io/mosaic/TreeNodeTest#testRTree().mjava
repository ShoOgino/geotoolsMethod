    /**
     * Tests the {@link RTree} class.
     *
     * @throws IOException If an I/O operation was required and failed.
     */
    @Test
    public void testRTree() throws IOException {
        final RTree tree = new RTree(root);
        if (false) {
            /*
             * For some unknown reason, using directly the root as the TreeNode leads to display
             * anomalies. We have to copy in Swing default implementation. I don't know why since
             * we have done our best in "testSwingTree" for ensuring that the original and the
             * copy were identical.
             */
            show(OptionalDependencies.copy(root));
        }
        assertEquals(new Rectangle(SOURCE_SIZE*4, SOURCE_SIZE*2), tree.getBounds());
        assertEquals(new Dimension(TARGET_SIZE,   TARGET_SIZE),   tree.getTileSize());
        int[] subsamplings;
        /*
         * Subsampling 15 in the first series and subsampling 9 in the second series are repeated
         * twice because the last occurence is a "virtual tile" generated in order to separate
         * tiles that would otherwise overlap. In the schema below, the tree on the left side is
         * what we get before overlapping tiles are separated. Tiles with subsamplings 15 and 9
         * are mixed in the same level because both of them are divisors of 45 while none of them
         * are the divisor of the other (9 is not a divisor of 15). So GridNode automatically
         * generate an extra level with same subsampling in order to separate them.
         *
         *   90                          90
         *   +---45                      +---45
         *   |   +---15                  |   +---15
         *   |   +---15                  |   |   +---15
         *   |   |  ...                  |   |   +---15
         *   |   +---09                  |   |      ...
         *   |   +---09                  |   +---09
         *   |      ...                  |       +---09
         *   +---45                      |       +---09
         *       +---15                  |          ...
         *       +---15                  +---45
         *       |  ...                      +---15
         *       +---09                      |   +---15
         *       +---09                      |   +---15
         *          ...                      |      ...
         */
        subsamplings = new int[] {5,15,15,45,90};
        checkSubsampling((GridNode) root, subsamplings, subsamplings.length, 3, 0);
        subsamplings = new int[] {1,3,9,9,45,90};
        checkSubsampling((GridNode) root, subsamplings, subsamplings.length, 4, 1);
    }

