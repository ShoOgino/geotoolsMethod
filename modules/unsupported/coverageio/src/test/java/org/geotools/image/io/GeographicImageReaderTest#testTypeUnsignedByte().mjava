    /**
     * Tests {@link DataBuffer#TYPE_BYTE}.
     *
     * @throws IOException If an I/O operation was required and failed.
     */
    @Test
    public void testTypeUnsignedByte() throws IOException {
        final int minimum  =   0;
        final int maximum  = 200;
        final int padValue = 255;
        final SampleConverter[] converters = new SampleConverter[1];
        final GeographicImageReader reader = new NullImageReader(DataBuffer.TYPE_BYTE, minimum, maximum, padValue);
        final GeographicImageReadParam param = (GeographicImageReadParam) reader.getDefaultReadParam();
        param.setPaletteName("grayscale"); // Easier to test than "rainbow".
        final ImageTypeSpecifier specifier = reader.getRawImageType(0, param, converters);
        final SampleConverter    converter = converters[0];

        // Tests the converter
        assertNotNull(converter);
        assertEquals (0,        converter.getOffset(), 0.0);
        assertEquals (minimum,  converter.convert(minimum ));
        assertEquals (maximum,  converter.convert(maximum ));
        assertEquals (padValue, converter.convert(padValue));

        // Tests the sample model
        final SampleModel sm = specifier.getSampleModel();
        assertNotNull(sm);
        assertEquals(DataBuffer.TYPE_BYTE, sm.getDataType());

        // Tests the color model
        final ColorModel cm = specifier.getColorModel();
        assertTrue(cm instanceof IndexColorModel);
        final IndexColorModel indexed = (IndexColorModel) cm;
        assertEquals(256, indexed.getMapSize());
        assertEquals(0xFF000000, indexed.getRGB(minimum  & 0xFFFF)); // Opaque black
        assertEquals(0xFFFFFFFF, indexed.getRGB(maximum  & 0xFFFF)); // Opaque white
        assertEquals(0x00000000, indexed.getRGB(padValue & 0xFFFF)); // Transparent
    }

