    /**
     * Invoked on deserialization. The provider is fetch from currently registered providers
     * in the {@link IIORegistry}. The search is performed by classname.
     */
    private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {
        in.defaultReadObject();
        final Object candidate = in.readObject();
        final IIORegistry registry = IIORegistry.getDefaultInstance();
        Class<?> type = candidate.getClass(); // Initialized in case of failure on next line.
        try {
            type = (Class<?>) candidate;
            provider = (ImageReaderSpi) registry.getServiceProviderByClass(type);
        } catch (ClassCastException cause) {
            InvalidClassException e = new InvalidClassException(type.getName(),
                    Errors.format(ErrorKeys.ILLEGAL_CLASS_$2, type, ImageReaderSpi.class));
            e.initCause(cause);
            throw e;
        }
        if (provider == null) {
            throw new ClassNotFoundException(type.getName());
        }
    }

