    /**
     * Creates a destination type with the specified number of bands.
     * If no such destination type is available, returns {@code null}.
     */
    final ImageTypeSpecifier getDestinationType(final int numBands) {
        if (targetDataType == DataBuffer.TYPE_UNDEFINED) {
            return null;
        }
        final SampleModel sampleModel;
        final ColorModel   colorModel;
        final ColorSpace   colorSpace = getColorSpace(numBands);
        if (model!=null) {
            /*
             * Case 1: we know the sample model for data in the
             *         underlying stream.  We will use the same
             *         model for the memory image, just changing
             *         the data type.
             */
            if (numBands != model.getNumBands()) {
                throw new IllegalArgumentException("Number of bands mismatch");
            }
            sampleModel = getStreamSampleModel(model, model, size, targetDataType);
        } else {
            /*
             * Case 2: We have to create a sample model from scratch.  We
             *         will use a banded sample model with some arbitrary
             *         color space  (which may be changed after the image
             *         reading is completed).
             */
            final int width, height;
            if (size!=null) {
                width  = size.width;
                height = size.height;
            } else {
                width = height = 1;
            }
            final int[] bankIndices = new int[numBands];
            final int[] bandOffsets = new int[numBands];
            for (int i=numBands; --i>=0;) bankIndices[i]=i;
            if (ContinuousPalette.USE_JAI_MODEL) {
                sampleModel = new ComponentSampleModelJAI(targetDataType, width, height,
                                                          1, width, bankIndices, bandOffsets);
            } else {
                return ImageTypeSpecifier.createBanded(colorSpace, bankIndices, bandOffsets,
                                                       targetDataType, false, false);
            }
        }
        /*
         * Constructs a color model likely to matches the
         * sample model, and then finish the type specifier.
         */
        if (sampleModel instanceof ComponentSampleModel) {
            // This is the most common case.
            colorModel = new ComponentColorModelJAI(getColorSpace(numBands),
                                                    false, false, Transparency.OPAQUE,
                                                    sampleModel.getDataType());
        } else {
            // Fallback to JAI helper method if we have a less common case.
            colorModel = PlanarImage.createColorModel(sampleModel);
        }
        return new ImageTypeSpecifier(colorModel, sampleModel);
    }

