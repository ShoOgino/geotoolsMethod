    /**
     * Creates a palette with the specified name and size. The RGB colors will be distributed
     * in the range {@code lower} inclusive to {@code upper} exclusive. Remaining pixel values
     * (if any) will be left to a black or transparent color by default.
     *
     * @param factory The originating factory.
     * @param name    The palette name.
     * @param lower   Index of the first valid element (inclusive) in the
     *                {@linkplain IndexColorModel index color model} to be created.
     * @param upper   Index of the last valid element (exclusive) in the
     *                {@linkplain IndexColorModel index color model} to be created.
     * @param size    The size of the {@linkplain IndexColorModel index color model} to be created.
     *                This is the value to be returned by {@link IndexColorModel#getMapSize}.
     * @param numBands    The number of bands (usually 1).
     * @param visibleBand The band to use for color computations (usually 0).
     */
    protected IndexedPalette(final PaletteFactory factory, final String name, final int lower,
                   final int upper, int size, final int numBands, final int visibleBand)
    {
        super(factory, name, numBands, visibleBand);
        final int minAllowed, maxAllowed; // inclusives
        if (lower < 0) {
            minAllowed = Short.MIN_VALUE;
            maxAllowed = Short.MAX_VALUE;
            size       = (size <= 0x100) ? 0x100 : (MAX_UNSIGNED + 1);
            // 'size' must be FF or FFFF in order to rool negative values.
        } else {
            minAllowed = 0;
            maxAllowed = MAX_UNSIGNED;
        }
        ensureInsideBounds(lower, minAllowed, maxAllowed);
        ensureInsideBounds(upper, minAllowed, maxAllowed + 1);
        ensureInsideBounds(size,  upper,      MAX_UNSIGNED + 1);
        if (lower >= upper) {
            throw new IllegalArgumentException(factory.getErrorResources().getString(
                    ErrorKeys.BAD_RANGE_$2, lower, upper));
        }
        this.lower = lower;
        this.upper = upper;
        this.size  = size;
    }

