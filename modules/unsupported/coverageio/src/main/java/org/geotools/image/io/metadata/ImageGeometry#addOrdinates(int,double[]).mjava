    /**
     * Adds ordinate values for an envelope along a dimension. Invoking this method
     * will increase the envelope {@linkplain #getDimension dimension} by one. This method
     * may be invoked in replacement of {@link #addOffsetVector} when every cell
     * coordinates need to be specified explicitly.
     *
     * @param minIndex The minimal index value, inclusive. This is usually 0.
     * @param values The coordinate values.
     *
     * @see #addOffsetVector
     */
    public void addOrdinates(final int minIndex, final double[] values) {
        int[] lows  = getLowAccessor(). getUserObject(int[].class);
        int[] highs = getHighAccessor().getUserObject(int[].class);
        if (lows != null && highs != null) {
            final int last = Math.max(lows.length, highs.length);
            if (last != lows.length || last != highs.length) {
                warning("addOrdinates", ErrorKeys.MISMATCHED_DIMENSION_$2,
                        new int[]{lows.length, highs.length});
            }
            lows = XArray.resize(lows, last + 1);
            highs = XArray.resize(highs, last + 1);
            lows[last] = minIndex;
            highs[last] = minIndex + values.length - 1;
        } else {
            if (lows == null) {
                lows = new int[1];
                lows[0] = minIndex;
            }
            if (highs == null) {
                highs = new int[1];
                highs[0] = minIndex + values.length - 1;
            }
        }
        getLowAccessor(). setUserObject(lows);
        getHighAccessor().setUserObject(highs);
        setOrdinates(getLocalizationGridAccessor().appendChild(), values);
    }

