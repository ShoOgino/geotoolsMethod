    /**
     * Lookups for additional palette factories on the classpath. The palette factories shall
     * be declared in {@code META-INF/services/org.geotools.image.io.PaletteFactory} files.
     * <p>
     * Palette factories found are added to the chain of default factories. The next time that
     * a <code>{@linkplain #getDefault()}.getPalette(...)</code> method will be invoked, the
     * scanned factories will be tried first. If they can't create a given palette, then the
     * Geotools default factory will be tried last.
     * <p>
     * It is usually not needed to invoke this method directly since it is invoked automatically
     * by {@link #getDefault()} when first needed. This method may be useful when a specific class
     * loader need to be used, or when the classpath content changed.
     *
     * @param loader The class loader to use, or {@code null} for the default one.
     *
     * @since 2.4
     */
    public synchronized static void scanForPlugins(final ClassLoader loader) {
        final Set<Class<? extends PaletteFactory>> existings = new HashSet<Class<? extends PaletteFactory>>();
        for (PaletteFactory p=getDefault(); p!=null; p=p.fallback) {
            existings.add(p.getClass());
        }
        final Iterator<? extends PaletteFactory> it = (loader == null) ?
                ServiceRegistry.lookupProviders(PaletteFactory.class) :
                ServiceRegistry.lookupProviders(PaletteFactory.class, loader);
        while (it.hasNext()) {
            /*
             * Adds the scanned factory to the chain. There is no public method for doing that
             * because PaletteFactory is quasi-immutable except for this method which modifies
             * the fallback field. It is okay in this context since we just created the factory
             * instance.
             */
            final PaletteFactory factory = it.next();
            if (existings.add(factory.getClass())) {
                PaletteFactory tail = factory;
                while (tail.fallback != null) {
                    tail = tail.fallback;
                }
                tail.fallback = defaultFactory;
                defaultFactory = factory;
            }
        }
    }

