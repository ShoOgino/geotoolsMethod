    /**
     * Returns the grid geometry, including the "<cite>grid to real world</cite>" transform.
     * This information is typically available only when {@linkplain AffineTransform affine
     * transform} were explicitly given to {@linkplain Tile#Tile(ImageReaderSpi,Object,int,
     * Dimension,AffineTransform) tile constructor}.
     *
     * @return The grid geometry, or {@code null} if this information is not available.
     * @throws IOException If an I/O operation was required and failed.
     *
     * @see Tile#getGridToCRS
     */
    public synchronized ImageGeometry getGridGeometry() throws IOException {
        if (geometry == null) {
            /*
             * The gridToCRS transform is the same one than the one of the tile having origin at
             * (0,0) and subsampling of (1,1).  So we search for exactly this tile and currently
             * accept no other one. In a future version we could accept an other tile (but which
             * one?) and translate the affine transform...  But the result could be wrong if the
             * gridToCRS transform is not computed by RegionCalculator. Only the particular tile
             * searched by current implementation should be okay in all cases.
             */
            for (final Tile tile : getInternalTiles()) {
                final Dimension subsampling = tile.getSubsampling();
                if (subsampling.width != 1 || subsampling.height != 1) {
                    continue;
                }
                final Point origin = tile.getLocation();
                if (origin.x != 0 || origin.y != 0) {
                    continue;
                }
                final AffineTransform gridToCRS = tile.getGridToCRS();
                if (gridToCRS == null) {
                    continue;
                }
                geometry = new ImageGeometry(getRegion(), gridToCRS);
                break;
            }
        }
        return geometry;
    }

