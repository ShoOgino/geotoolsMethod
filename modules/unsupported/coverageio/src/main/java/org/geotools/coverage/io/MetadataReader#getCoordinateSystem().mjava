    /**
     * Returns the {@linkplain CoordinateSystem coordinate system}. The default implementation
     * builds a coordinate system using the {@linkplain #getAxis axes} defined in the
     * metadata.
     *
     * @throws MetadataException if there is less than 2 axes defined in the metadata, or if
     *                           the creation of the coordinate system failed.
     *
     * @see #getAxis
     * @see CoordinateSystem
     */
    public synchronized CoordinateSystem getCoordinateSystem() throws MetadataException {
        final ImageReferencing referencing = metadata.getReferencing();
        Identification cs = referencing.getCoordinateSystem();
        if (cs == null) {
            cs = new Identification("Unknown", null);
        }
        String name = cs.name;
        if (name == null) {
            name = "Unknown";
        }
        String type = cs.type;
        if (type == null) {
            type = (referencing.getProjectionName() == null) ?
                GeographicMetadataFormat.ELLIPSOIDAL :
                GeographicMetadataFormat.CARTESIAN;
        }
        final CSFactory factory = factories.getCSFactory();
        final Map<String,String> map = Collections.singletonMap("name", name);
        final int dimension = metadata.getGeometry().getDimension();
        if (dimension < 2) {
            throw new MetadataException("Number of dimension error : " + dimension);
        }
        try {
            if (type.equalsIgnoreCase(GeographicMetadataFormat.CARTESIAN)) {
                return (dimension < 3) ?
                    factory.createCartesianCS(map, getAxis(0), getAxis(1)) :
                    factory.createCartesianCS(map, getAxis(0), getAxis(1), getAxis(2));
            }
            if (type.equalsIgnoreCase(GeographicMetadataFormat.ELLIPSOIDAL)) {
                return (dimension < 3) ?
                    factory.createEllipsoidalCS(map, getAxis(0), getAxis(1)) :
                    factory.createEllipsoidalCS(map, getAxis(0), getAxis(1), getAxis(2));
            }
            /* Should not happened, since the type value should be contained in the
             * {@link GeographicMetadataFormat#CS_TYPES} list.
             */
            throw new MetadataException("Coordinate system type not known : " + type);
        } catch (FactoryException e) {
            throw new MetadataException(e.getLocalizedMessage());
        }
    }

