    /**
     * Implementation helper for {@link #equal}.
     */
    private static boolean equals(TileManager manager, Collection<Tile> c1, Collection<Tile> c2) {
        final Set<Tile> remainding = new LinkedHashSet<Tile>(c1);
        /*
         * Following loop is equivalent to remainding.removeAll(c2), but we do not want to invoke
         * the later because the default AbstractSet.removeAll(Collection) implementation invokes
         * c2.contains(Tile) repetively for every elements in c1. This is efficient when c2 is a
         * Set. But since our c2 collection is often an List, this leads to O(nÂ²) computation cost.
         */
        for (final Tile tile : c2) {
            remainding.remove(tile);
        }
        if (remainding.isEmpty()) {
            return true;
        }
        final PrintStream err = System.err;
        err.print("Additional tiles from ");
        err.print(manager.getClass().getSimpleName());
        err.println(':');
        err.println(Tile.toString(remainding, 100));
        /*
         * We limit the formatting to a small number of tiles (100) because this method is
         * expected to be invoked only with small collections. Futhermore we don't want to
         * flood stderr because the difference are printed without stopping the program.
         */
        return false;
    }

