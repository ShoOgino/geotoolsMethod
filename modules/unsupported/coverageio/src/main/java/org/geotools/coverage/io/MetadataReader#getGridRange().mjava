    /**
     * Returns the grid range. Default implementation fetchs the metadata values
     * for nodes {@link ImageGeometry#low} and {@link ImageGeometry#high}, and
     * transform the resulting strings into a {@linkplain GridEnvelope grid range}
     * object.
     *
     * @throws MissingMetadataException if a required value is missing.
     * @throws MetadataException if the operation failed for some other reason.
     *
     * @see ImageGeometry#getGridRange
     */
    public synchronized GridEnvelope getGridRange() throws MetadataException {
        final ImageGeometry geometry = metadata.getGeometry();
        final int dimension = geometry.getDimension();
        final int[]  lowers = new int[dimension];
        final int[]  uppers = new int[dimension];
        for (int i=0; i<dimension; i++) {
            final NumberRange<Integer> range = geometry.getGridRange(i);
            lowers[i] = range.getMinValue();
            uppers[i] = range.getMaxValue();
            if (!range.isMinIncluded()) lowers[i]++;
            if (!range.isMaxIncluded()) uppers[i]--;
        }
        return new GeneralGridEnvelope(lowers, uppers, true);
    }

