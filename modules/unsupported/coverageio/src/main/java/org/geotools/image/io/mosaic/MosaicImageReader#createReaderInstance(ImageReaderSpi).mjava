    /**
     * Creates a new {@link ImageReader} from the specified provider. This method do not
     * check the cache and do not store the result in the cache. It should be invoked by
     * {@link #getTileReader}Â and {@link #getTileReaders} methods only.
     * <p>
     * It is technically possible to return the same {@link ImageReader} instance from
     * different {@link ImageReaderSpi}. It would broke the usual {@code ImageReaderSpi}
     * contract for no obvious reason, but technically this class should work correctly
     * even in such case.
     *
     * @param  provider The provider. Must be a member of {@link #getTileReaderSpis}.
     * @return The image reader for the given provider.
     * @throws IOException if the image reader can not be created.
     */
    private ImageReader createReaderInstance(final ImageReaderSpi provider) throws IOException {
        final ImageReader reader = provider.createReaderInstance();
        if (locale != null) {
            try {
                reader.setLocale(locale);
            } catch (IllegalArgumentException e) {
                // Invalid locale. Ignore this exception since it will not prevent the image
                // reader to work mostly as expected (warning messages may be in a different
                // locale, which is not a big deal).
                Logging.recoverableException(MosaicImageReader.class, "getTileReader", e);
            }
        }
        return reader;
    }

