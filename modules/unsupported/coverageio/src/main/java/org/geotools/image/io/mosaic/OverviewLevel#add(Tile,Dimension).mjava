    /**
     * Adds a tile to the list of tiles in this level, provided that they are aligned on the same
     * grid.
     *
     * @param  tile The tile to add.
     * @param  subsampling The tile subsampling, provided as an explicit argument only
     *         in order to avoid creating a temporary {@link Dimension} object again.
     * @throws IOException if an I/O operation was required and failed.
     * @throws IllegalArgumentException if the tiles are not aligned on the same grid.
     */
    final void add(final Tile tile, final Dimension subsampling)
            throws IOException, IllegalArgumentException
    {
        assert subsampling.equals(tile.getSubsampling()) : subsampling;
        assert subsampling.width == xSubsampling && subsampling.height == ySubsampling : subsampling;
        final Rectangle toAdd = tile.getRegion();
        if (toAdd.width > dx || toAdd.height > dy) {
            throw new IllegalArgumentException(Errors.format(ErrorKeys.UNEXPECTED_IMAGE_SIZE));
        }
        int ox = toAdd.x % dx;
        int oy = toAdd.y % dy;
        if (ox < 0) ox += dx;
        if (oy < 0) oy += dy;
        if ((ox -= xOffset) < 0 || (ox + toAdd.width)  > dx ||
            (oy -= yOffset) < 0 || (oy + toAdd.height) > dy)
        {
            throw new IllegalArgumentException(Errors.format(ErrorKeys.NOT_A_GRID));
        }
        mosaic.add(toAdd);
        tiles.add(tile);
    }

