    /**
     * Returns {@code true} if this tree contains the given tile. This method
     * invokes itself recursively for scanning through the subtrees.
     *
     * @param  region The result of {@link Tile#getAbsoluteRegion}.
     * @param  candidate The tile to test for presence in this tree.
     * @param  remove {@code true} if the node containing the tile should be removed.
     * @return {@code true} if the given tile is presents in this tree.
     */
    private boolean contains(final Rectangle region, final Tile candidate, final boolean remove) {
        if (equals(region)) {
            if (remove) {
                tile = null;
            }
            return true;
        }
        if (super.contains(region)) {
            TreeNode child = firstChildren;
            while (child != null) {
                if (child.contains(region, candidate, remove)) {
                    if (remove && child.tile == null && child.isLeaf()) {
                        child.remove();
                    }
                    return true;
                }
                child = child.nextSibling;
            }
        }
        return false;
    }

