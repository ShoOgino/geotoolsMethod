    /**
     * Add an alias to a key. After this method has been invoked, calls to
     * <code>{@link #get get}(key)</code> will really looks for metadata named
     * {@code alias}. Alias are mandatory in order to get various {@code getXXX()}
     * methods to work for a particular file format.
     * <p>
     * For example if the file to be parsed uses the names {@code "ULX"} and
     * {@code "ULY"} for the coordinate of the upper left corner, then the
     * {@link #getEnvelope} method will not work unless the following alias are set:
     *
     * <blockquote><pre>
     * addAlias({@linkplain #X_MINIMUM}, "ULX");
     * addAlias({@linkplain #Y_MAXIMUM}, "ULY");
     * </pre></blockquote>
     *
     * An arbitrary number of alias can be set for the same key. For example,
     * <code>addAlias(Y_MAXIMUM,&nbsp;...)</code> could be invoked twice with
     * {@code "ULY"} and {@code "Limit North"} alias. The {@code getXXX()} methods will
     * try alias in the order they were added and use the first value found.
     * <p>
     * The same alias can also be set to more than one key. For example, the following
     * code is legal. It means that pixel are square with the same horizontal and
     * vertical resolution:
     *
     * <blockquote><pre>
     * addAlias({@linkplain #X_RESOLUTION}, "Resolution");
     * addAlias({@linkplain #Y_RESOLUTION}, "Resolution");
     * </pre></blockquote>
     *
     * @param  key The key to add an alias. This key is format neutral.
     * @param  alias The alias to add. This is the name actually used in the file to
     *         be parsed. Alias are case insensitive and ignore multiple whitespace,
     *         like keys. If this alias is already bound to the specified key, then
     *         this method do nothing.
     * @throws AmbiguousMetadataException if the addition of the supplied alias
     *         would introduce an ambiguity in the current set of metadata.
     *         This occurs if the key has already an alias mapping to a different value.
     *
     * @see #getAlias
     * @see #contains
     * @see #get
     */
    public synchronized void addAlias(final Key key, String alias)
            throws AmbiguousMetadataException
    {
        alias = trim(alias.trim(), " ");
        final Key aliasAsKey = new Key(alias);
        if (naming == null) {
            naming = new LinkedHashMap<String,Key>();
        }
        // Add the alias for the specified key. This is the information
        // used by 'get' methods for fetching a metadata from a key.
        Key keyFound = naming.get(aliasAsKey);
        if (keyFound == null) {
            keyFound = new Key(alias);
            naming.put(alias, keyFound);
        }
        assert isValid();
    }

