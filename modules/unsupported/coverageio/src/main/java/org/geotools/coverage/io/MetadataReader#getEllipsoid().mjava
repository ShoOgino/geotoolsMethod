    /**
     * Returns the ellipsoid. Depending on whether {@link ImageReferencing#semiMinorAxis}
     * or {@link ImageReferencing#inverseFlattening} has been defined, the default
     * implementation will construct an ellispoid using {@link DatumFactory#createEllipsoid}
     * or {@link DatumFactory#createFlattenedSphere} respectively.
     *
     * @throws MetadataException if the operation failed to create the
     *                           {@linkplain Ellipsoid ellipsoid}.
     *
     * @see #getUnit(String)
     */
    public synchronized Ellipsoid getEllipsoid() throws MetadataException {
        final ImageReferencing referencing = metadata.getReferencing();
        final String name = referencing.getEllipsoidName();
        if (name != null) {
            for (final DefaultEllipsoid ellipsoid : ELLIPSOIDS) {
                if (ellipsoid.nameMatches(name)) {
                    return ellipsoid;
                }
            }
        } else {
            throw new MetadataException("Ellipsoid name not defined.");
        }
        // It has a name defined, but it is not present in the list of known ellipsoids.
        final double semiMajorAxis = referencing.getSemiMajorAxis();
        if (Double.isNaN(semiMajorAxis)) {
            throw new MetadataException("Ellipsoid semi major axis not defined.");
        }
        final double semiMinorAxis = referencing.getSemiMinorAxis();
        final String ellipsoidUnit = referencing.getEllipsoidUnit();
        if (ellipsoidUnit == null) {
            throw new MetadataException("Ellipsoid unit not defined.");
        }
        final Unit unit = getUnit(ellipsoidUnit);
        final Map<String,String> map = Collections.singletonMap("name", name);
        try {
            final DatumFactory datumFactory = factories.getDatumFactory();
            return (!Double.isNaN(semiMinorAxis)) ?
                datumFactory.createEllipsoid(map, semiMajorAxis, semiMinorAxis, unit) :
                datumFactory.createFlattenedSphere(
                        map, semiMajorAxis, referencing.getInverseFlattening(), unit);
        } catch (FactoryException e) {
            throw new MetadataException(e.getLocalizedMessage());
        }
    }

