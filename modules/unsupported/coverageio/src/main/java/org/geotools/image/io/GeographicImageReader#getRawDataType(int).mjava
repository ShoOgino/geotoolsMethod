    /**
     * Returns the data type which most closely represents the "raw" internal data of the image.
     * It should be one of {@link DataBuffer} constants. The default {@code GeographicImageReader}
     * implementation works better with the following types:
     *
     * {@link DataBuffer#TYPE_BYTE   TYPE_BYTE},
     * {@link DataBuffer#TYPE_SHORT  TYPE_SHORT},
     * {@link DataBuffer#TYPE_USHORT TYPE_USHORT} and
     * {@link DataBuffer#TYPE_FLOAT  TYPE_FLOAT}.
     *
     * The default implementation returns {@link DataBuffer#TYPE_FLOAT TYPE_FLOAT} in every cases.
     * <p>
     * <h3>Handling of negative integer values</h3>
     * If the raw internal data contains negative values but this method still declares a unsigned
     * integer type ({@link DataBuffer#TYPE_BYTE TYPE_BYTE} or {@link DataBuffer#TYPE_USHORT TYPE_USHORT}),
     * then the values will be translated in order to fit in the range of strictly positive values.
     * For example if the raw internal data range from -23000 to +23000, then there is a choice:
     *
     * <ul>
     *   <li><p>If this method returns {@link DataBuffer#TYPE_SHORT}, then the data will be
     *       stored "as is" without transformation. However the {@linkplain IndexColorModel
     *       index color model} will have the maximal length allowed by 16 bits integers, with
     *       positive values in the [0 .. {@value java.lang.Short#MAX_VALUE}] range and negative
     *       values wrapped in the [32768 .. 65535] range in two's complement binary form. The
     *       results is a color model consuming 256 kilobytes in every cases. The space not used
     *       by the [-23000 .. +23000] range (in the above example) is lost.</p></li>
     *
     *   <li><p>If this method returns {@link DataBuffer#TYPE_USHORT}, then the data will be
     *       translated to the smallest strictly positive range that can holds the data
     *       ([1..46000] for the above example). Value 0 is reserved for missing data. The
     *       result is a smaller {@linkplain IndexColorModel index color model} than the
     *       one used by untranslated data.</p></li>
     * </ul>
     *
     * @param  imageIndex The index of the image to be queried.
     * @return The data type ({@link DataBuffer#TYPE_FLOAT} by default).
     * @throws IOException If an error occurs reading the format information from the input source.
     *
     * @see #getRawImageType(int, ImageReadParam, SampleConverter[])
     */
    protected int getRawDataType(final int imageIndex) throws IOException {
        checkImageIndex(imageIndex);
        return DataBuffer.TYPE_FLOAT;
    }

