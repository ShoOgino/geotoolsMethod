    /**
     * Returns all image reader providers used by the tiles. The set will typically contains
     * only one element, but more are allowed. In the later case, the entries in the set are
     * sorted from the most frequently used provider to the less frequently used.
     *
     * @return The image reader providers.
     * @throws IOException If an I/O operation was required and failed.
     *
     * @see MosaicImageReader#getTileReaderSpis
     */
    public synchronized Set<ImageReaderSpi> getImageReaderSpis() throws IOException {
        if (providers == null) {
            final FrequencySortedSet<ImageReaderSpi> providers =
                    new FrequencySortedSet<ImageReaderSpi>(4, true);
            final Collection<Tile> tiles = getInternalTiles();
            int[] frequencies = null;
            if (tiles instanceof FrequencySortedSet) {
                frequencies = ((FrequencySortedSet<Tile>) tiles).frequencies();
            }
            int i = 0;
            for (final Tile tile : tiles) {
                final int n = (frequencies != null) ? frequencies[i++] : 1;
                providers.add(tile.getImageReaderSpi(), n);
            }
            this.providers = Collections.unmodifiableSet(providers);
        }
        return providers;
    }

