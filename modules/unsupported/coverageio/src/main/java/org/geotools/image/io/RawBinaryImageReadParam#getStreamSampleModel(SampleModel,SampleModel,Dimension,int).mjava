    /**
     * Returns a sample model indicating the data layout in the input stream.
     * The {@link SampleModel}'s width and height should matches the image
     * size in the input stream.
     *
     * @param  defaultSampleModel A default sample model, or {@code null}
     *         if there is no default. If this {@code RawBinaryImageReadParam}
     *         contains unspecified sample model, image size or data type, values
     *         from {@code defaultSampleModel} will be used.
     * @param  model The sample model in the underlying stream, or {@code null}.
     * @param  size The image size in the underlying stream, or {@code null}.
     * @param  dataType the data type.
     * @return A sample model indicating the data layout in the input stream,
     *         or {@code null} if unknow.
     */
    private static SampleModel getStreamSampleModel(final SampleModel defaultSampleModel,
                                                    SampleModel model, Dimension size,
                                                    int dataType)
    {
        if (defaultSampleModel != null) {
            if (model == null) {
                model = defaultSampleModel;
            }
            if (size == null) {
                size = new Dimension(defaultSampleModel.getWidth(),
                                     defaultSampleModel.getHeight());
            }
            if (dataType == DataBuffer.TYPE_UNDEFINED) {
                dataType = defaultSampleModel.getDataType();
            }
        }
        if (model == null || size == null || dataType == DataBuffer.TYPE_UNDEFINED) {
            return null;
        }
        final int width  = size.width;
        final int height = size.height;
        if (dataType != model.getDataType()) {
            if (model instanceof ComponentSampleModel) {
                final ComponentSampleModel cast = (ComponentSampleModel) model;
                final int   pixelStride    = cast.getPixelStride();
                final int   scanlineStride = cast.getScanlineStride();
                final int[] bankIndices    = cast.getBankIndices();
                final int[] bandOffsets    = cast.getBandOffsets();
                if (model instanceof BandedSampleModel) {
                    model = new BandedSampleModel(dataType, width, height,
                                                  scanlineStride,
                                                  bankIndices, bandOffsets);
                } else if (model instanceof PixelInterleavedSampleModel) {
                    model = new PixelInterleavedSampleModel(dataType, width, height,
                                                            pixelStride, scanlineStride,
                                                            bandOffsets);
                } else if (model instanceof ComponentSampleModelJAI) {
                    model = new ComponentSampleModelJAI(dataType, width, height,
                                                        pixelStride, scanlineStride,
                                                        bankIndices, bandOffsets);
                } else {
                    model = new ComponentSampleModel(dataType, width, height,
                                                     pixelStride, scanlineStride,
                                                     bankIndices, bandOffsets);
                }
            } else if (model instanceof MultiPixelPackedSampleModel) {
                final MultiPixelPackedSampleModel cast = (MultiPixelPackedSampleModel) model;
                final int numberOfBits   = DataBuffer.getDataTypeSize(dataType);
                final int scanlineStride = cast.getScanlineStride();
                final int dataBitOffset  = cast.getDataBitOffset();
                model = new MultiPixelPackedSampleModel(dataType, width, height,
                                                        numberOfBits,
                                                        scanlineStride, dataBitOffset);
            } else if (model instanceof SinglePixelPackedSampleModel) {
                final SinglePixelPackedSampleModel cast = (SinglePixelPackedSampleModel) model;
                final int   scanlineStride = cast.getScanlineStride();
                final int[] bitMasks       = cast.getBitMasks();
                model = new SinglePixelPackedSampleModel(dataType, width, height,
                                                         scanlineStride, bitMasks);
            } else {
                throw new IllegalStateException(model.getClass().getName());
            }
        }
        if (model.getWidth() != width || model.getHeight() != height) {
            model = model.createCompatibleSampleModel(width, height);
        }
        return model;
    }

