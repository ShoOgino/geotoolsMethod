    /**
     * Creates a new tile which is a copy of the given one except for input and region.
     * The subsampling (and consequently the <cite>grid to CRS</cite> transform), image
     * index and image reader SPI are copied unchanged.
     * <p>
     * This method is not public because copying the field values may not be suffisient
     * if the given class is not of the same class than {@code this}. For example if it
     * is a {@link LargeTile}, then the width and height may be too small. This is okay
     * for {@link OverviewLevel} which use this constructor only with {@link Tile} instances.
     *
     * @param tile
     *          The tile to copy.
     * @param input
     *          The input to be given to the image reader, or {@code null} for the same input
     *          than the given tile.
     * @param region
     *          The region in the destination image, or {@code null} for the same region than
     *          the given tile. If non-null, then the {@linkplain Rectangle#width width} and
     *          {@linkplain Rectangle#height height} should match the image size.
     * @throws IllegalArgumentException
     *          If a required argument is {@code null} or some argument has an invalid value.
     */
    Tile(final Tile tile, final Object input, final Rectangle region)
            throws IllegalArgumentException
    {
        ensureNonNull("tile", tile);
        if (region != null) {
            if (region.isEmpty()) {
                throw new IllegalArgumentException(Errors.format(ErrorKeys.BAD_RECTANGLE_$1, region));
            }
            x = region.x;
            y = region.y;
            setSize(region.width, region.height);
        } else {
            x      = tile.x;
            y      = tile.y;
            width  = tile.width;
            height = tile.height;
        }
        this.input   = (input != null) ? input : tile.input;
        provider     = tile.provider;
        imageIndex   = tile.imageIndex;
        xSubsampling = tile.xSubsampling;
        ySubsampling = tile.ySubsampling;
        gridToCRS    = tile.gridToCRS;
    }

