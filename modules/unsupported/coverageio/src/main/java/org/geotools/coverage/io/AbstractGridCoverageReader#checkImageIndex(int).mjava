    /**
     * Ensures that the specified image index in inside the expected range. The upper limit
     * (exclusive) is given by <code>{@link #getNumImages getNumImages}(false)</code>.
     *
     * @param  imageIndex The index to check for validity.
     * @return The {@code numImages} value, as an opportunist information.
     * @throws IndexOutOfBoundsException If the index is invalid.
     * @throws IOException If an error occurs reading the information from the input source.
     */
    final int checkImageIndex(final int imageIndex) throws IOException, IndexOutOfBoundsException {
        assert Thread.holdsLock(this);
        if (reader == null) {
            throw new IllegalStateException(getString(ErrorKeys.NO_IMAGE_INPUT));
        }
        final int numImages = getNumImages(false);
        if (imageIndex<reader.getMinIndex() || (imageIndex>=numImages && numImages>=0)) {
            throw new IndexOutOfBoundsException(Errors.getResources(locale).getString(
                    ErrorKeys.ILLEGAL_ARGUMENT_$2, "imageIndex", imageIndex));
        }
        return numImages;
    }

