    /**
     * Returns the pattern used for parsing and formatting values of the specified type.
     * The type should be either {@code Number.class} or {@code Date.class}.
     * <p>
     * <ul>
     *   <li>if {@code type} is assignable to {@code Number.class}, then this method
     *       returns the number pattern as specified by {@link DecimalFormat}.</li>
     *   <li>Otherwise, if {@code type} is assignable to {@code Date.class}, then
     *       this method returns the date pattern as specified by
     *       {@link SimpleDateFormat}.</li>
     * </ul>
     * <p>
     * In any case, this method returns {@code null} if this object should use the
     * default pattern for the {@linkplain #getLocale data locale}.
     *
     * @param  type The data type ({@code Number.class} or {@code Date.class}).
     * @return The format pattern for the specified data type, or {@code null} for
     *         the default locale-dependent pattern.
     * @throws IllegalArgumentException if {@code type} is not valid.
     */
    public String getFormatPattern(final Class<?> type) {
        if (Date.class.isAssignableFrom(type)) {
            return datePattern;
        }
        if (Number.class.isAssignableFrom(type)) {
            return numberPattern;
        }
        throw new IllegalArgumentException(Errors.format(ErrorKeys.UNKNOW_TYPE_$1, type));
    }

