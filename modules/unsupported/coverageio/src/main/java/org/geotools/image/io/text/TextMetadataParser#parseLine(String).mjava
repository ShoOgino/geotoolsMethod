    /**
     * Parses a line and add the key-value pair to this metadata set. The default
     * implementation takes the substring on the left side of the first occurence
     * of the {@linkplain #getSeparator separator} (usually the '=' character) as
     * the key, and the substring on the right side of the separator as the value.
     * For example, if {@code line} has the following value:
     *
     * <blockquote><pre>
     * Ellipsoid = WGS 1984
     * </pre></blockquote>
     *
     * Then, the default implementation will translate this line in
     * the following call:
     *
     * <blockquote><pre>
     * {@link #add(String,Object) add}("Ellipsoid", "WGS 1984");
     * </pre></blockquote>
     *
     * This method returns {@code true} if it has consumed the line, or {@code false}
     * otherwise.
     * A line is "consumed" if {@code parseLine(...)} has either added the key-value
     * pair (using {@link #add}), or determined that the line must be ignored (for
     * example because {@code parseLine(...)} detected a character announcing a
     * comment line). A "consumed" line will not receive any further treatment. The
     * line is not consumed (i.e. this method returns {@code false}) if
     * {@code parseLine(...)} don't know what to do with it. Non-consumed line will
     * typically go up in a chain of {@code parseLine(...)} methods (if
     * {@code MetadataReader} has been subclassed) until someone consume it.
     *
     * @param  line The line to parse.
     * @return {@code true} if this method has consumed the line.
     * @throws IIOException if the line is badly formatted.
     * @throws AmbiguousMetadataException if a different value was already defined
     *         for the same metadata name.
     *
     * @see #load(File)
     * @see #load(URL)
     * @see #add(String,Object)
     */
    protected boolean parseLine(final String line) throws IIOException {
        final int index = line.indexOf(trimSeparator);
        if (index >= 0) {
            add(line.substring(0, index), line.substring(index+1));
            return true;
        }
        return false;
    }

