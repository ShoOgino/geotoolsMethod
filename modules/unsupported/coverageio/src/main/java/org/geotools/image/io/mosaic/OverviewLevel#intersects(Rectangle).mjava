    /**
     * Returns {@code true} if at least one tile intersects the given region.
     * This method does not search recursively into finer levels.
     *
     * @param  search The region (in absolute coordinates) where to search for tiles.
     * @return {@code true} if at least one tile intersects the given region.
     * @throws IOException if an error occured while fetching a tile size.
     */
    final boolean intersects(final Rectangle search) throws IOException {
        final Rectangle index = toTileIndex(search);
        final int xmin = index.x;
        final int ymin = index.y;
        final int xmax = index.width  + xmin;
        final int ymax = index.height + ymin;
        for (int y=ymin; y<ymax; y++) {
            for (int x=xmin; x<xmax; x++) {
                final int i = getIndex(x, y);
                if (tiles != null) {
                    final Tile tile = tiles.get(i);
                    if (tile != null) {
                        if (search.intersects(tile.getAbsoluteRegion())) {
                            return true;
                        } else {
                            continue;
                        }
                    }
                    // If there is an explicit list of tiles, we may have no pattern. In this
                    // case we don't want to return 'true' on the 'patternUsed' check below.
                    if (patterns == null) {
                        continue;
                    }
                }
                if (patternUsed == null || patternUsed.get(i) != 0) {
                    return true;
                }
            }
        }
        return false;
    }

