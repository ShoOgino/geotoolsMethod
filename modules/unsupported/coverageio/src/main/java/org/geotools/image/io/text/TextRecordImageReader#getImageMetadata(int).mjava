    /**
     * Returns metadata associated with the given image.
     * Calling this method may force loading of full image.
     *
     * @param  imageIndex The image index.
     * @return The metadata, or {@code null} if none.
     * @throws IOException If an error occurs reading the data information from the input source.
     */
    @Override
    public IIOMetadata getImageMetadata(final int imageIndex) throws IOException {
        checkImageIndex(imageIndex);
        if (ignoreMetadata) {
            return null;
        }
        final GeographicMetadata metadata = new GeographicMetadata(this);
        final ImageGeometry geometry = metadata.getGeometry();
        /*
         * Computes the smallest bounding box containing the full image in user coordinates.
         * This implementation searchs for minimum and maximum values in x and y columns as
         * returned by getColumnX() and getColumnY(). Reminder: xmax and ymax are INCLUSIVE
         * in the code below, as well as (width-1) and (height-1).
         */
        final float tolerance    = getGridTolerance();
        final RecordList records = getRecords(imageIndex);
        final int xColumn        = getCheckedColumnX(imageIndex);
        final int yColumn        = getCheckedColumnY(imageIndex);
        final int width          = records.getPointCount(xColumn, tolerance);
        final int height         = records.getPointCount(yColumn, tolerance);
        final double xmin        = records.getMinimum(xColumn);
        final double ymin        = records.getMinimum(yColumn);
        final double xmax        = records.getMaximum(xColumn);
        final double ymax        = records.getMaximum(yColumn);
        geometry.setOrdinateRange(0, xmin, xmax);
        geometry.setGridRange(0, 0, width-1);
        geometry.setOrdinateRange(1, ymin, ymax);
        geometry.setGridRange(1, 0, height-1);
        geometry.setPixelOrientation("center");
        /*
         * Now adds the valid range of sample values for each band.
         */
        final int numBands = records.getColumnCount() - (xColumn == yColumn ? 1 : 2);
        for (int band=0; band<numBands; band++) {
            final int column = getColumn(imageIndex, band);
            metadata.getBand(band).setValidRange(records.getMinimum(column), records.getMaximum(column));
        }
        return metadata;
    }

