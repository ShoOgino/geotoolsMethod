    /**
     * Invoked in assertion for checking the validity of the whole tree. Checks in this method body
     * are performed inconditionnaly though explicit {@code if ... throw new AssertionError(...)}
     * statements rather than {@code assert} statements because the whole methods is expected to be
     * invoked in an {@code assert} statement.
     *
     * @return {@code true} on success.
     */
    boolean checkValidity() {
        TreeNode child = firstChildren;
        if (child != null) {
            if (child.previousSibling != null) {
                throw new AssertionError(this);
            }
            if (isLeaf() || !getAllowsChildren()) {
                throw new AssertionError(this);
            }
            for (int index=0; ; index++) {
                if (child.parent != this) {
                    throw new AssertionError(child);
                }
                if (getIndex(child) != index) {
                    throw new AssertionError(child);
                }
                if (!child.checkValidity()) {
                    return false;
                }
                final TreeNode next = child.nextSibling;
                if (next == null) {
                    break;
                }
                if (next.previousSibling != child) {
                    throw new AssertionError(child);
                }
                if (!contains(child) && width >= 0 && height >= 0) {
                    throw new AssertionError(child);
                }
                child = next;
            }
        }
        if (child != lastChildren) {
            throw new AssertionError(this);
        }
        if (tile != null) {
            if (isEmpty()) {
                throw new AssertionError(this);
            }
            final Rectangle bounds;
            try {
                bounds = tile.getAbsoluteRegion();
            } catch (IOException e) {
                throw new AssertionError(e);
            }
            if (!bounds.contains(this)) {
                throw new AssertionError(this);
            }
        }
        return true;
    }

