    /**
     * Returns {@code true} if the no-data values should be collapsed to 0 in order to save memory.
     * This method is invoked automatically by the {@link #getRawImageType(int, ImageReadParam,
     * SampleConverter[]) getRawImageType} method when it detected some unused space between the
     * {@linkplain Band#getValidRange range of valid values} and at least one
     * {@linkplain Band#getNoDataValues no-data value}.
     * <p>
     * The default implementation returns {@code false} in all cases, thus avoiding arbitrary
     * choice. Subclasses can override this method with some arbitrary threashold, as in the
     * example below:
     *
     * <blockquote><pre>
     * return unusedSpace >= 1024;
     * </pre></blockquote>
     *
     * @param isZeroValid
     *          {@code true} if 0 is a valid value. If this method returns {@code true} while
     *          {@code isZeroValid} is {@code true}, then the {@linkplain SampleConverter sample
     *          converter} to be returned by {@link #getRawImageType(int, ImageReadParam,
     *          SampleConverter[]) getRawImageType} will offset all valid values by 1.
     * @param nodataValues
     *          The {@linkplain Arrays#sort(double[]) sorted}
     *          {@linkplain Band#getNoDataValues no-data values} (never null and never empty).
     * @param unusedSpace
     *          The largest amount of unused space outside the range of valid values.
     */
    protected boolean collapseNoDataValues(final boolean  isZeroValid,
                                           final double[] nodataValues,
                                           final int      unusedSpace)
    {
        return false;
    }

