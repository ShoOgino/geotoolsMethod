    /**
     * Returns the expected position of the fraction part for numbers to be formatted using the
     * given format. This method should be invoked after {@link #createNumberFormat}, but the
     * given format doesn't need to be the instance returned by the later.
     *
     * @param  format The format to be used for formatting numbers.
     * @return The expected position of the fraction part.
     *
     * @todo I don't really kwon what to do if the format is not an instance of
     *       {@link DecimalFormat}...
     */
    protected FieldPosition getExpectedFractionPosition(final NumberFormat format) {
        int width  = Math.max((int) Math.floor(Math.log10(maximum)) + 1,
                              format.getMinimumIntegerDigits());
        int digits = Math.min(format.getMaximumFractionDigits(), MAXIMUM_DIGITS);
        if (format instanceof DecimalFormat) {
            final DecimalFormat decimal = (DecimalFormat) format;
            if (digits>0 || decimal.isDecimalSeparatorAlwaysShown()) {
                width++;
            }
            width  += Math.max(decimal.getNegativePrefix().length(),
                               decimal.getPositivePrefix().length());
            digits += Math.max(decimal.getNegativeSuffix().length(),
                               decimal.getPositiveSuffix().length());
        }
        final FieldPosition position = new FieldPosition(NumberFormat.FRACTION_FIELD);
        position.setBeginIndex(width);
        position.setEndIndex(width += digits);
        // 'width' is now the full width. We don't do anything with it at this time,
        // but maybe in some future version...
        return position;
    }

