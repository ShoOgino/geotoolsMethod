    /**
     * Returns the buffered image to which decoded pixel data should be written. The image
     * is determined by inspecting the supplied parameters if it is non-null, as described
     * in the {@linkplain #getDestination(ImageReadParam,Iterator,int,int) super-class method}.
     * In the default implementation, the {@linkplain ImageTypeSpecifier image type specifier}
     * set is a singleton containing only the {@linkplain #getRawImageType(int,ImageReadParam,
     * SampleConverter[]) raw image type}.
     * <p>
     * Implementations of the {@link #read(int,ImageReadParam)} method should invoke this
     * method instead of {@link #getDestination(ImageReadParam,Iterator,int,int)}.
     *
     * @param  imageIndex The index of the image to be retrieved.
     * @param  parameters The parameter given to the {@code read} method.
     * @param  width      The true width of the image or tile begin decoded.
     * @param  height     The true width of the image or tile being decoded.
     * @param  converters If non-null, an array where to store the converters required
     *                    for converting decoded pixel data into stored pixel data.
     * @return The buffered image to which decoded pixel data should be written.
     *
     * @throws IOException If an error occurs reading the format information from the input source.
     *
     * @see #getRawImageType(int, ImageReadParam, SampleConverter[])
     */
    protected BufferedImage getDestination(final int imageIndex, final ImageReadParam parameters,
                            final int width, final int height, final SampleConverter[] converters)
            throws IOException
    {
        final ImageTypeSpecifier type = getRawImageType(imageIndex, parameters, converters);
        final Set<ImageTypeSpecifier> spi = Collections.singleton(type);
        return getDestination(parameters, spi.iterator(), width, height);
    }

