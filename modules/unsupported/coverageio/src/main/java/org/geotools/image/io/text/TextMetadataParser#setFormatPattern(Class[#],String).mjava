    /**
     * Set the pattern to use for parsing and formatting values of the specified type.
     * The type should be either {@code Number.class} or {@code Date.class}.
     *
     * <ul>
     *   <li>If {@code type} is assignable to <code>{@linkplain java.lang.Number}.class</code>,
     *       then {@code pattern} should be a {@link DecimalFormat} pattern (example:
     *       {@code "#0.###"}).</li>
     *   <li>If {@code type} is assignable to <code>{@linkplain Date}.class</code>,
     *       then {@code pattern} should be a {@link SimpleDateFormat} pattern
     *       (example: {@code "yyyy/MM/dd HH:mm"}).</li>
     * </ul>
     *
     * @param  type The data type ({@code Number.class} or {@code Date.class}).
     * @param  pattern The format pattern for the specified data type, or {@code null}
     *         for the default locale-dependent pattern.
     * @throws IllegalArgumentException if {@code type} is not valid.
     */
    public synchronized void setFormatPattern(final Class<?> type, final String pattern) {
        if (Date.class.isAssignableFrom(type)) {
            datePattern = pattern;
            return;
        }
        if (Number.class.isAssignableFrom(type)) {
            numberPattern = pattern;
            return;
        }
        throw new IllegalArgumentException(Errors.format(ErrorKeys.UNKNOW_TYPE_$1, type));
    }

