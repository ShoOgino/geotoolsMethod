    /**
     * Returns the policy for {@link #getImageTypes computing image types}. This is also
     * the policy used by {@linkplain #read read} method when none has been explicitly
     * {@linkplain MosaicImageReadParam#setImageTypePolicy set in read parameters}.
     * <p>
     * The default implementation makes the following choice based on the number of
     * {@linkplain #getTileReaderSpis reader providers}:
     * <ul>
     *   <li>{@link ImageTypePolicy#SUPPORTED_BY_ALL SUPPORTED_BY_ALL} if two or more</li>
     *   <li>{@link ImageTypePolicy#SUPPORTED_BY_ONE SUPPORTED_BY_ONE} if exactly one</li>
     *   <li>{@link ImageTypePolicy#ALWAYS_ARGB ALWAYS_ARGB} if none.</li>
     * </ul>
     * <p>
     * Note that {@link ImageTypePolicy#SUPPORTED_BY_ONE SUPPORTED_BY_ONE} is <strong>not</strong>
     * a really safe choice even if there is only one provider, because the image type can also
     * depends on {@linkplain Tile#getInput tile input}. However the safest choice in all cases
     * ({@link ImageTypePolicy#SUPPORTED_BY_ALL SUPPORTED_BY_ALL}) is costly and often not
     * necessary. The current implementation is a compromize between safety and performance.
     * <p>
     * If Java assertions are enabled, this reader will verify that {@code SUPPORTED_BY_ONE}
     * produces the same result than {@code SUPPORTED_BY_ALL}.
     * <p>
     * Subclasses can override this method if they want a different policy.
     *
     * @return The default image type policy.
     */
    public ImageTypePolicy getDefaultImageTypePolicy() {
        switch (providers.size()) {
            default: return ImageTypePolicy.SUPPORTED_BY_ALL;
            case 1:  return ImageTypePolicy.SUPPORTED_BY_ONE;
            case 0:  return ImageTypePolicy.ALWAYS_ARGB;
        }
    }

