    /**
     * Merges the two specified tree. If both source and target metadata are non-null, then this
     * method performs the following steps:
     * <p>
     * <ul>
     *   <li>Searchs for a format name which is common to both metadata;</li>
     *   <li>invokes {@link IIOMetadata#getAsTree} on the source metadata;</li>
     *   <li>invokes {@link IIOMetadata#mergeTree} on the target metadata.</li>
     * </ul>
     *
     * @param  source The source metadata, or {@code null}.
     * @param  target The target metadata, or {@code null}.
     * @return {@code source} if {@code target} was null, or {@code target} otherwise.
     *
     * @throws IllegalStateException if {@code target}Â is read-only.
     * @throws IIOInvalidTreeException if the {@code source} tree cannot be parsed successfully.
     */
    public static IIOMetadata merge(final IIOMetadata source, final IIOMetadata target)
            throws IllegalStateException, IIOInvalidTreeException
    {
        if (source == null) {
            return target;
        }
        if (target == null) {
            return source;
        }
        final String format = commonFormatName(source, target);
        if (format != null) {
            target.mergeTree(format, source.getAsTree(format));
        }
        return null;
    }

