    /**
     * Returns {@code true} if at least one tile having the given subsampling or a finer one
     * intersects the given region.
     *
     * @param  region The region to look for, in "absolute" coordinates.
     * @param  subsampling The maximal subsampling to look for.
     * @return {@code true} if at least one tile having the given subsampling or
     *         a finer one intersects the given region.
     */
    public boolean intersects(final Rectangle region, final Dimension subsampling) {
        if (intersects(region)) {
            if (tile != null) {
                final int xSubsampling, ySubsampling;
                if (isLeaf()) {
                    // Slight optimization: if we are a leaf, x/ySubsampling are garanteed
                    // to be equals to the value returned by Tile.getSubsampling().
                    xSubsampling = (this.xSubsampling & MASK);
                    ySubsampling = (this.ySubsampling & MASK);
                } else {
                    final Dimension candidate = tile.getSubsampling();
                    xSubsampling = candidate.width;
                    ySubsampling = candidate.height;
                }
                if (xSubsampling <= subsampling.width && ySubsampling <= subsampling.height) {
                    return true;
                }
            }
            GridNode child = (GridNode) firstChildren();
            while (child != null) {
                if (child.intersects(region, subsampling)) {
                    return true;
                }
                child = (GridNode) child.nextSibling();
            }
        }
        return false;
    }

