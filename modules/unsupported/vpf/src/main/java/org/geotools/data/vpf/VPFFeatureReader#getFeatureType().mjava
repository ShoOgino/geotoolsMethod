    /**
     * Put together a map of VPF files and their corresponding TableRows
     *
     * @param file
     * @param row
     */
    /*
    private Map<VPFFile, List<Object>> generateFileRowMap(VPFFile file, SimpleFeature row)
            throws IOException {
        String tileFileName = null;
        Map<VPFFile, List<Object>> rows = new HashMap<>();
        rows.put(file, Arrays.asList(null, row));
        Iterator joinIter = featureType.getFeatureClass().getJoinList().iterator();
        while (joinIter.hasNext()) {
            ColumnPair columnPair = (ColumnPair) joinIter.next();
            VPFFile primaryFile = getVPFFile(columnPair.column1);
            VPFFile joinFile = null;
            if (columnPair.column2 == null) {
                continue;
            }
            joinFile = getVPFFile(columnPair.column2);
            if (joinFile == null) {
                continue;
            }

            if (!rows.containsKey(joinFile) && rows.containsKey(primaryFile)) {
                List<Object> joinData = (List<Object>) rows.get(primaryFile);
                SimpleFeature joinRow = (SimpleFeature) joinData.get(1);

                try {
                    int joinID =
                            Integer.parseInt(
                                    joinRow.getAttribute(columnPair.column1.getName()).toString());
                    rows.put(
                            joinFile,
                            Arrays.asList(
                                    columnPair,
                                    getVPFFile(columnPair.column2)
                                            .getRowFromId(columnPair.column2.getName(), joinID)));
                } catch (NullPointerException exc) {
                    // Non-matching joins - just put in a NULL
                    rows.put(joinFile, null);
                } catch (IllegalAttributeException exc) {
                    // I really don't expect to see this one
                    exc.printStackTrace();
                    rows.put(joinFile, null);
                }
            }
        }
        return rows;
    }
    */

    /* (non-Javadoc)
     * @see org.geotools.data.FeatureReader#getFeatureType()
     */
    public SimpleFeatureType getFeatureType() {
        return featureType;
    }

