    /**
     * Creates a data store.
     *
     * @param params A <code>Map</code> of parameters which must be verified and
     */
    private DataStore create(Map<String, ?> params) throws IOException {
        DataStore result = null;

        File file = getLhtFile(params);
        // CH I'd like to check existence here, so that geoserver can get
        // a better error message, but I've spent way too long on this, so
        // I'm giving up for now.  Ideally canProcess just figures out if
        // the params are valid, and doesn't throw the not existing error, but
        // since we need a directory, not the actual file, it's hard to check
        // for anything.
        if (!file.exists() || !file.canRead()) {
            throw new IOException("File either doesn't exist or is unreadable : " + file);
        }
        URI namespace = (URI) NAMESPACEP.lookUp(params); // null if not exist
        // LOGGER.finer("creating new vpf datastore with params: " + params);

        boolean debug = VPFLogger.isLoggable(Level.FINEST);

        Path lhtPath = Paths.get(file.getPath());
        Path lhtRealPath = lhtPath.toRealPath();
        Path lhtParentPath = lhtRealPath.getParent();

        if (lhtParentPath == null) {
            throw new IOException(
                    "Fileparent either doesn't exist or is unreadable : " + lhtRealPath);
        }

        String rootDir = lhtParentPath.toString();
        String latTableName = new File(rootDir, LIBRARY_ATTTIBUTE_TABLE).toString();

        if (debug) {
            VPFLogger.log("open vpf datastore with params: " + params);
            VPFLogger.log("vpf datastore path: " + file.getPath());
            VPFLogger.log("LAT path: " + latTableName);
        }

        VPFFile latTable = VPFFileFactory.getInstance().getFile(latTableName);
        Iterator<SimpleFeature> iter = latTable.readAllRows().iterator();
        SimpleFeature feature = iter.hasNext() ? iter.next() : null;

        String directoryName = file.getPath();
        String folderName = directoryName.substring(directoryName.lastIndexOf(File.separator) + 1);

        SimpleFeature libraryFeature = null;

        while (feature != null) {
            String libraryName = feature.getAttribute(FIELD_LIB_NAME).toString();

            if (libraryName.equalsIgnoreCase(folderName)) {
                libraryFeature = feature;
                if (debug) {
                    VPFLogger.log("found library feature: " + folderName);
                }
                break;
            }

            if (VPFLogger.isLoggable(Level.FINEST)) {
                VPFLogger.log("----------- LAT feature: " + feature.getID());
                VPFFeatureType.debugFeature(feature);
            }

            feature = iter.hasNext() ? iter.next() : null;
        }

        try {
            result = new VPFLibrary(libraryFeature, file, namespace);
        } catch (SchemaException exc) {
            throw new IOException(
                    "There was a problem making one of " + "the feature classes as a FeatureType.");
        }

        return result;
    }

