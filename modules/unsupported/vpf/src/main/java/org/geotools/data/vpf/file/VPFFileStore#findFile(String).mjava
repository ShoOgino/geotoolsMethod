    /**
     * This does basically a case independent file search through the pathName to try to find the
     * file. This is necessary due to many problems seen with VPF data disks where the file names
     * specified in the VPF files do not match the case of the files on disk.
     */
    private VPFFile findFile(String pathName) throws IOException, SchemaException {

        if (new File(pathName).exists()) return new VPFFile(pathName);

        ArrayList<String> matches = new ArrayList<>();
        matches.add(""); // Need to start with something in the list
        StringTokenizer st = new StringTokenizer(pathName, File.separator);
        while (st.hasMoreTokens() && !matches.isEmpty()) {
            String curr = st.nextToken();
            String currUpper = curr.toUpperCase();
            String currLower = curr.toLowerCase();
            boolean useUpper = !curr.equals(currUpper);
            boolean useLower = !curr.equals(currLower);
            ArrayList<String> newMatches = new ArrayList<>();

            for (Iterator<String> it = matches.iterator(); it.hasNext(); ) {
                String match = (String) it.next();
                String tmp = match + File.separator + curr;

                if (new File(tmp).exists()) newMatches.add(tmp);
                else {
                    // For performance reasons only do the upper and lower case checks
                    // if the "as-is" check fails.
                    if (useUpper) {
                        tmp = match + File.separator + currUpper;
                        if (new File(tmp).exists()) newMatches.add(tmp);
                    }

                    if (useLower) {
                        tmp = match + File.separator + currLower;
                        if (new File(tmp).exists()) newMatches.add(tmp);
                    }
                }
            }
            matches = newMatches;
        }

        if (matches.isEmpty()) {
            throw new FileNotFoundException("Could not find file: " + pathName);
        }

        return new VPFFile((String) matches.get(0));
    }

