    /**
     * Identifies the type of geometry factory to use based on the name of the table containing the
     * geometry, then constructs the appropriate geometry factory object.
     *
     * @param table The name of the geometry table
     */
    private synchronized void setGeometryFactory(String table) {
        if (table.equalsIgnoreCase(EDGE_PRIMITIVE)) {
            geometryFactory = new LineGeometryFactory();
        } else if (table.equalsIgnoreCase(FACE_PRIMITIVE)) {
            geometryFactory = new AreaGeometryFactory();
        } else if (table.equalsIgnoreCase(CONNECTED_NODE_PRIMITIVE)) {
            geometryFactory = new ConnectedNodeGeometryFactory();
        } else if (table.equalsIgnoreCase(ENTITY_NODE_PRIMITIVE)) {
            geometryFactory = new EntityNodeGeometryFactory();
        } else if (table.equalsIgnoreCase(TEXT_PRIMITIVE)) {
            geometryFactory = new TextGeometryFactory();
            textTypeFeature = true;
        }

        // if an invalid string is returned, there will be no geometry
    }
    /**
     * Adds all of the columns from a VPF file into the table. Note: This does not handle columns
     * with the same name particularly well. Perhaps the xpath mechanism can be used to help here.
     *
     * @param vpfFile the <code>VPFFile</code> object to use
     */
    /*
    private void addFileToTable(VPFFile vpfFile) {
        //      Class columnClass;
        boolean addPrimaryKey = fileList.isEmpty();

        // Check to see if we have already grabbed this file
        if (!fileList.contains(vpfFile)) {
            fileList.add(vpfFile);

            if (this.debug) {
                System.out.println("======== add vpf file to class");
                System.out.println(vpfFile.getPathName());
            }

            // Pull the columns off of the file and add them to our schema
            // Except for the first file, ignore the first column since it is a join column
            for (int inx = addPrimaryKey ? 0 : 1; inx < vpfFile.getAttributeCount(); inx++) {
                VPFColumn col = vpfFile.getColumn(inx);
                if (this.debug) {
                    String colName = col.getName();
                    System.out.println(colName);
                }
                columns.add(col);
            }
        }
    }
    */

