    /**
     * Creates, registers, and initializes the <b>Package</b> for this model, and for any others
     * upon which it depends.
     *
     * <p>This method is used to initialize {@link EFeatureTestsPackage#eINSTANCE} when that field
     * is accessed. Clients should not invoke it directly. Instead, they should simply access that
     * field to obtain the package.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     *
     * @see #eNS_URI
     * @see #createPackageContents()
     * @see #initializePackageContents()
     * @generated
     */
    public static EFeatureTestsPackage init() {
        if (isInited)
            return (EFeatureTestsPackage)
                    EPackage.Registry.INSTANCE.getEPackage(EFeatureTestsPackage.eNS_URI);

        // Obtain or create and register package
        EFeatureTestsPackageImpl theEFeatureTestsPackage =
                (EFeatureTestsPackageImpl)
                        (EPackage.Registry.INSTANCE.get(eNS_URI) instanceof EFeatureTestsPackageImpl
                                ? EPackage.Registry.INSTANCE.get(eNS_URI)
                                : new EFeatureTestsPackageImpl());

        isInited = true;

        // Initialize simple dependencies
        EFeaturePackage.eINSTANCE.eClass();

        // Create package meta-data objects
        theEFeatureTestsPackage.createPackageContents();

        // Initialize created meta-data
        theEFeatureTestsPackage.initializePackageContents();

        // Mark meta-data to indicate it can't be changed
        theEFeatureTestsPackage.freeze();

        // Update the registry and return the package
        EPackage.Registry.INSTANCE.put(EFeatureTestsPackage.eNS_URI, theEFeatureTestsPackage);
        return theEFeatureTestsPackage;
    }

