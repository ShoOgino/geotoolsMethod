    public void testDetachedHint(boolean eSingleton) {
        EFeatureDataStore eStore;
        Map<String,Serializable> params;
        try {
            //
            // Prepare common objects
            //
            params = eParams.createParams(eResourceURI.toString(), null);
            eStore = eStoreFactory.createDataStore(params);
            Hints hints = new Hints();
            hints.put(EFeatureHints.EFEATURE_SINGLETON_FEATURES, false);
            hints.put(EFeatureHints.EFEATURE_VALUES_DETACHED, false);
            //
            // Loop over types
            //
            for(String eType : new String[]{"efeature.EFeatureData","efeature.EFeatureCompatibleData"}) {
                //
                // Prepare loop objects
                //
                Query query = new Query(eType,Filter.INCLUDE);
                query.setHints(hints);
                EFeatureReader eReader = eStore.getFeatureReader(query);
                EFeatureHints eHints = eReader.eHints();
                eHints.eSetSingletonFeatures(eSingleton);
                EAttribute eAttr = ("efeature.EFeatureData".equals(eType) ? 
                        EFeatureTestsPackage.eINSTANCE.getEFeatureData_Attribute() :
                            EFeatureTestsPackage.eINSTANCE.getEFeatureCompatibleData_Attribute());
                //
                // --------------------------------------------------------------------
                //  1) Test attached ESimpleFeature values mode (establishes base line)
                // --------------------------------------------------------------------
                //
                ESimpleFeature feature = eReader.next();
                EFeature eFeature = feature.eFeature();
                EFeatureInfo eStructure = eFeature.getStructure();
                List<Object> eValues = feature.getAttributes();
                assertTrue("Feature and EObject values not same [1,"+eType+",singleton:="+eSingleton+",detached:=false]", 
                        eValues.equals(EFeatureUtils.eGetFeatureValues(eStructure, eFeature, Transaction.AUTO_COMMIT)));
                //
                // --------------------------------------------------------------------
                //  2) Test that feature and EObject both change values
                // --------------------------------------------------------------------
                //
                Long v = 1L*(int)(Math.random()*10000);
                eFeature.eSet(eAttr, v);
                eValues = feature.getAttributes();
                assertTrue("Feature and EObject values not same [2,"+eType+",singleton:="+eSingleton+",detached:=false]", 
                        eValues.equals(EFeatureUtils.eGetFeatureValues(eStructure, eFeature, Transaction.AUTO_COMMIT)));
                //
                // ---------------------------------------------------------------------
                //  3) Test detached ESimpleFeature values mode (establishes base line)
                // ---------------------------------------------------------------------
                //
                eHints.eSetValuesDetached(true);
                feature = eReader.next();
                System.out.println(feature);
                eFeature = feature.eFeature();
                System.out.println(eFeature);
                String eID = eFeature.getID();
                System.out.println(eID);
                eStructure = eFeature.getStructure();
                eValues = feature.getAttributes();
                assertTrue("Feature and EObject values not same [3,"+eType+",singleton:="+eSingleton+",detached:=true]", 
                        eValues.equals(EFeatureUtils.eGetFeatureValues(eStructure, eFeature, Transaction.AUTO_COMMIT)));
                //
                // --------------------------------------------------------------------
                //  4) Test that ESimpleValues values does not change
                // --------------------------------------------------------------------
                //
                v = 1L*(int)(Math.random()*10000);
                eFeature.eSet(eAttr, v);
                eValues = feature.getAttributes();
                assertFalse("Feature and EObject values same [4,"+eType+",singleton:="+eSingleton+",detached:=true]", 
                        eValues.equals(EFeatureUtils.eGetFeatureValues(eStructure, eFeature, Transaction.AUTO_COMMIT)));
                //
                // Dispose data store
                //
                eStore.dispose();
            }
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, e.getMessage(), e);
            fail(e);
        }
    }    

