    @org.junit.Test
    public void testSingletonHint() {
        EFeatureDataStore eStore;
        Map<String,Serializable> params;
        try {
            //
            // Measure test duration
            //
            dTime();
            //
            // Prepare store
            //
            params = eParams.createParams(eResourceURI.toString(), null);
            eStore = eStoreFactory.createDataStore(params);
            //
            // Loop over types
            //
            for(String eType : new String[]{"efeature.EFeatureData","efeature.EFeatureCompatibleData"}) {
                //
                // Prepare EFeatureReader
                //
                Query query = new Query(eType,Filter.INCLUDE);
                EFeatureReader eReader = eStore.getFeatureReader(query);
                //
                // Test unique ESimpleFeature mode
                //
                query.getHints().put(EFeatureHints.EFEATURE_SINGLETON_FEATURES, false);
                ESimpleFeature f1 = eReader.next();
                ESimpleFeature f2 = eReader.next();
                assertNotSame("Features are same instances ["+eType+",EFEATURE_SINGLETON_FEATURES==false]", f1,f2);
                assertNotSame("EObjects are same instances ["+eType+",EFEATURE_SINGLETON_FEATURES==false]", f1.eObject(),f2.eObject());
                assertNotSame("EFeatures are same instances ["+eType+",EFEATURE_SINGLETON_FEATURES==false]", f1.eFeature(),f2.eFeature());
                //
                // Test unique ESimpleFeature mode
                //
                query.getHints().put(EFeatureHints.EFEATURE_SINGLETON_FEATURES, true);
                f1 = eReader.next();
                f2 = eReader.next();
                assertSame("Features are not same instances ["+eType+",EFEATURE_SINGLETON_FEATURES==true]", f1,f2);
                assertSame("EObjects are not same instances ["+eType+",EFEATURE_SINGLETON_FEATURES==true]", f1.eObject(),f2.eObject());
                assertSame("EFeatures are not same instances ["+eType+",EFEATURE_SINGLETON_FEATURES==true]", f1.eFeature(),f2.eFeature());
                //
                // Test unique ESimpleFeature mode again, this time ensuring hint is honored 
                //
                query.getHints().put(EFeatureHints.EFEATURE_SINGLETON_FEATURES, false);
                f1 = eReader.next();
                f2 = eReader.next();
                assertNotSame("Features are same instances [transitive,"+eType+",EFEATURE_SINGLETON_FEATURES==false]", f1,f2);
                assertNotSame("EObjects are same instances [transitive,"+eType+",EFEATURE_SINGLETON_FEATURES==false]", f1.eObject(),f2.eObject());
                assertNotSame("EFeatures are same instances [transitive,"+eType+",EFEATURE_SINGLETON_FEATURES==false]", f1.eFeature(),f2.eFeature());
                //
                // Dispose data store
                //
                eStore.dispose();
            }
        } catch (Exception e) {
            LOGGER.log(Level.SEVERE, e.getMessage(), e);
            fail(e);
        }
    }

