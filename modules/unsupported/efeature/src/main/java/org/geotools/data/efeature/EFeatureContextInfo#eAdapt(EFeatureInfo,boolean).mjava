    /**
     * Adapt given {@link EFeatureInfo structure} to this {@link EFeatureContext#eContext() context}.
     * @param eInfo - {@link EFeatureInfo} to be adapted into this context
     * @param copy - if <code>true</code>, a copy of given {@link EFeatureInfo structure} is adapted.
     * If <code>false</code>, the structure is claimed from it's context (moved into to this context). 
     * @return new {@link EFeatureInfo} instance if 'copy' is <code>true</code>, same otherwise
     * @throws IllegalArgumentException If adaption failed.
     */
    public EFeatureInfo eAdapt(EFeatureInfo eInfo, boolean copy) {
        //
        // Get contexts 
        //
        EFeatureContext eOldContext = eInfo.eContext(false);
        EFeatureContext eNewContext = eContext(false);
        //
        // Get change flag
        //
        boolean eChanged = (eOldContext!=eNewContext);
        //
        // Update references?
        //
        if(eChanged) {
            //
            // Assume adaptation is required
            //
            boolean bAdapt = true;
            //
            // Check if cached instance exists with same key, use it if it 
            // has same context as this (which is should have)
            //
            EFeatureInfo eEqual = eFeatureInfoCache.get(EFeatureInfoCache.createKey(eInfo));
            if(eEqual!=null) {
                //
                // Sanity check: Verify that, if found, it belongs to this context.
                //
                EFeatureContext eContext = eEqual.eContext(false);
                if(eContext!=eNewContext) {
                    //
                    // This is an indication that something is wrong. Should really 
                    // not happen. EFeatureInfo instances should always belong to the
                    // same context as the cache is it attached to. 
                    //
                    LOGGER.log(Level.WARNING,"Found EFeatureInfo attached to context " +
                            eContext.eContextID() + " in EFeatureInfoCache in context " + 
                            eContextID + ". Is will be adapted to the latter context.");
                }
                // -----------------------------------------------------------------
                //  Use already attached instance it instead of adapting given?
                // -----------------------------------------------------------------
                //  This is an optimization, ensuring that adaptation only occurs
                //  when absolutely required. It leverages the fact that
                // -----------------------------------------------------------------
                if(eEqual.eUID == eInfo.eUID) {
                    return eEqual;
                }
            }
            //
            //Â Try to do the adaptation?
            //
            if(bAdapt) {
                return doAdapt(eInfo, copy);
            }
        }
        //
        // Finished
        //
        return eInfo;                
    }

