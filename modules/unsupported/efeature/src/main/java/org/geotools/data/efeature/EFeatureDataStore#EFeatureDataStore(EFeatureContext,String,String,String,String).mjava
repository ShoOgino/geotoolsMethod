    /**
     * A {@link EFeature} {@link DataStore} implementation class.
     * @param eContextFactory - {@link EFeatureContextFactory} instance 
     * @param eContextID - {@link EFeatureContext} instance id
     * @param eDomainID - {@link EditingDomain} instance extension id
     * @param eNsURI - {@link EPackage} name space
     * @param eURI - {@link URI} formated string to EMF {@link Resource} containing 
     *  {@link EFeature}s
     * @param eQuery - {@link EFeature} query
     * 
     * @throws IOException 
     * @throws IllegalArgumentException if any component parsed from uri is not valid.
     * @see {@link URI#createURI(String)}
     */
    public EFeatureDataStore(EFeatureContext eContext, String eDomainID, String eNsURI, 
            String eURI, String eQuery) throws IOException, IllegalArgumentException {  
        //
        // Cache information
        //
        this.eContextID = eContext.eContextID();
        this.eDomainID = eDomainID;
        this.eQuery = eQuery;
        this.eNsURI = eNsURI;
        this.eURI = URI.createURI(eURI);
        //
        // Get EFeatureStore information
        //
        eStoreInfo = EFeatureDataStoreFactory.eDataStoreInfo(eContextID, eDomainID, eNsURI);
        if (this.eStoreInfo == null) {
            throw new IOException("EFeatureDataStore structure not " 
                    + "found in context: '" + eContextID + "/"
                    + eDomainID + "/" + eURI );
        }
    }

