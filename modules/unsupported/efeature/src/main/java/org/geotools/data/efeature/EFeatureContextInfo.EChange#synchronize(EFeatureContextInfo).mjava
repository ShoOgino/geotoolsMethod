        /**
         * Synchronize given {@link EFeatureContextInfo structure}  
         * with it's {@link EFeatureContextFactory factory} counterpart.
         * <p> 
         * This is required since {@link EPackage packages} are 
         * allowed to be added to and removed from the context.
         * </p>
         * @param eContextInfo - {@link EFeatureContextInfo structure}
         * @return a {@link Map} from {@link EFeatureContextInfo#eContextID() eContexID} to 
         * {@link EFeatureContextInfo} instances.
         */    
        public final Map<String, EFeaturePackageInfo> synchronize(EFeatureContextInfo eContextInfo)
        {
            //
            // Ensure thread safe access to package map 
            //
            synchronized(eContextInfo.ePackageMap) {
                //
                // Get information
                //
                eMap = eContextInfo.ePackageMap;
                //
                // Get factory instance and context id 
                //
                EFeatureContextFactory eFactory = eContextInfo.eFactory(false);
                //
                // Get context instance
                //
                EFeatureContext eContext = eContextInfo.eContext(false);
                //
                // Get current set of EPackage NsURIs 
                //
                List<String> eNsURIs = eContext.eNsURIs();
                
                // Initialize map of new store structures
                //
                Map<String, EFeaturePackageInfo> 
                    eNewMap = new HashMap<String, EFeaturePackageInfo>(eNsURIs.size());        
                
                // Add all packages 
                //
                for(String eNsURI : eNsURIs)
                {
                    // Get structure information
                    //
                    EFeaturePackageInfo ePackageInfo = eMap.get(eNsURI);
                    
                    // Not found or overwrite?
                    //
                    if(ePackageInfo==null)
                    {
                        // Create the package structure
                        //
                        ePackageInfo = EFeaturePackageInfo.create(
                                eFactory, eContextInfo, eNsURI);
                        
                        /// Put to map of new structures 
                        //
                        eNewMap.put(eNsURI, ePackageInfo);
                    }
                }
                
                // Remove disposed packages
                //
                eMap.keySet().retainAll(eNsURIs);
                
                // Put new to current map
                //
                eMap.putAll(eNewMap);
                
                // Finished
                // 
                return Collections.unmodifiableMap(eMap);
            }
        }

