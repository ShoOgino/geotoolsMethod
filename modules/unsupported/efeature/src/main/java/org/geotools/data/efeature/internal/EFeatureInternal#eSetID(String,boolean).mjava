    public String eSetID(String eNewID, boolean eSetUsage) {
        //
        // Verify current state
        //
        verify();
        //
        // Tell ID factory of ID usage?
        //
        if(eSetUsage) {
            //
            // Get ID factory
            //
            EFeatureIDFactory eIDFactory = getStructure().eContext().eIDFactory();
            //
            // -------------------------------------------------------
            //  Notify ID usage to factory?
            // -------------------------------------------------------
            //  This is part of the context startup problem solution.
            //  When constructing EFeatures from XMI, the context is
            //  unknown. This comes from the fact that values are 
            //  serialized before instances are added to the resource
            //  (context). Therefore, a internal context is used 
            //  instead. This internal context should not not create 
            //  IDs, since IDs only have meaning in the context that
            //  that they belong. The ID factory in the internal 
            //  context does therefore not support creation and 
            //  usage of IDs (throws OperationUnsupportedException).
            //
            if(!(eIDFactory instanceof EFeatureVoidIDFactory)) {
                //
                // Tell ID factory of ID usage, a new ID is returned if not unique
                //
                eNewID = eIDFactory.useID(eImpl(),eNewID);            
            }
        }
        //
        // Is ID held by this?
        //
        if(isIDHolder)
        {
            //
            // Cache old for later use
            //
            String eOldID = eID;
            //
            // Cache ID in this
            //
            eID = eNewID;
            //
            // Notify?
            //
            if (eImpl().eNotificationRequired())
                eImpl().eNotify(
                        new ENotificationImpl(eImpl(), Notification.SET,
                                EFeaturePackage.EFEATURE__ID, eOldID, eNewID));            
        } 
        else {
            //
            // Implementation holds the ID value. Get EFeature ID attribute.
            //
            EAttribute eAttribute = getStructure().eIDAttribute();
            //
            // Since the implementation holds the ID value, the
            // the eAttribute must be changeable. 
            //
            if(!eAttribute.isChangeable()) {
                throw new IllegalStateException("EAttribute must be " +
                                "changeable when the eImpl() is the " +
                                "ID holder.");
            }
            //
            // Update ID attribute value
            //
            eImpl().eSet(eAttribute,eNewID);            
        }
        //
        // Finished
        //
        return eNewID;
    }        

