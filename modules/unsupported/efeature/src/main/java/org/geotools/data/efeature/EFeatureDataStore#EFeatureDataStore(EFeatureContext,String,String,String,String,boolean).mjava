    /**
     * A {@link EFeature} {@link DataStore} implementation class.
     * <p>
     * @param eContext - {@link EFeatureContext} instance
     * @param eDomainID - {@link EditingDomain} instance id
     * @param eNsURI - {@link EPackage} name space
     * @param eURI - {@link URI} formated string to EMF {@link Resource} containing 
     *  {@link EFeature}s
     * @param eTypes - {@link EFeature} type query on the following format:
     * <pre>
     * eTypes:=&lt;eType1&gt;+...+&lt;eTypeN&gt;
     * 
     * where
     *  
     * eType    := &lt;eFolder&gt;.&lt;eFeature&gt;
     * eFolder  := the name of the {@link EFeatureFolderInfo folder} which contains the {@link EFeatureInfo feature}
     * eFeature := the name of the {@link EFeatureInfo feature type}
     * </pre>
     * @param eWritable - if <code>true</code> {@link EFeature}s are writable 
     * ({@link EFeatureWriter#UPDATE} | {@link EFeatureWriter#APPEND})
     * @throws IOException 
     * @throws IllegalArgumentException If any argument is invalid.
     * @see {@link URI#createURI(String)}
     */
    public EFeatureDataStore(EFeatureContext eContext, String eDomainID, String eNsURI, 
            String eURI, String eTypes, boolean eWritable) throws IOException, IllegalArgumentException {
        //
        // Forward to ContentStore constructor
        //
        super();
        //
        // Get context ID
        //
        this.eContextID = eContext.eContextID();
        //
        // Get EFeatureStore information
        //
        this.ePackageInfo = EFeatureDataStoreFactory.ePackageInfo(eContextID, eNsURI);
        if (this.ePackageInfo == null) {
            throw new IOException("EFeatureDataStore structure not " 
                    + "found in context: '" + eContextID + "/"
                    + eDomainID + "/" + eURI );
        }
        //
        // Cache other information
        //
        this.eDomainID = eDomainID;
        this.eTypeQuery = eTypes;
        this.eNsURI = eNsURI;
        this.eURI = URI.createURI(eURI);
        this.eWritable = eWritable;
        //
        // TODO Create EFeature query from 'eQuery' (must be added)
        //        
        this.eDataStoreQuery = Query.ALL;
    }

