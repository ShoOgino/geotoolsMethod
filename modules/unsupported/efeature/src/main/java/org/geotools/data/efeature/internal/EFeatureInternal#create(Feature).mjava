    /**
     * Attempts to transform new data into valid form
     * <p>
     * 
     * @param newData - new {@link Feature}
     * @return a new {@link Feature} instance compatible with the structure of this {@link EFeature}
     *         instance.
     */
    protected ETransform create(Feature newData) {
        // Get structure
        //
        EFeatureInfo eStructure = getStructure();

        // Verify that given data is valid
        //
        EFeatureStatus s;
        if (!(s = eStructure.validate(newData)).isSuccess()) {
            throw new IllegalArgumentException(s.getMessage());
        }

        // Prepare transformation
        //
        ETransform eTransform = new ETransform();

        // Get new and old feature types
        //
        eTransform.oldType = getData().getType();
        eTransform.newType = newData.getType();

        // Get old and new CRS
        //
        eTransform.oldCRS = eTransform.oldType.getCoordinateReferenceSystem();
        eTransform.newCRS = eTransform.newType.getCoordinateReferenceSystem();

        // Get transformation
        //
        try {
            eTransform.transform = CRS
                    .findMathTransform(eTransform.newCRS, eTransform.oldCRS, true);
        } catch (FactoryException e) {
            throw new IllegalArgumentException("Tranform from " + "'" + eTransform.newCRS
                    + "' to '" + eTransform.oldCRS + "' not possible");
        }

        // Is identity transform?
        //
        eTransform.isIdentity = (eTransform.transform instanceof IdentityTransform);
        if (!eTransform.isIdentity) {
            // Get new SRID
            //
            eTransform.newSRID = CRS.toSRS(eTransform.newCRS, true);
        }

        // Prepare feature values, catching
        // any transformation errors before any
        // changes are committed to the model
        //
        eTransform.eValueMap = new HashMap<EAttribute, Object>();
        for (Property it : newData.getProperties()) {
            // Get attribute, null indicates that it does not exist
            // in the structure of this EFeature instance. If so,
            // just discard it (in line with using structures as filters)
            //
            String eName = it.getName().getLocalPart();
            EAttribute eAttribute = eStructure.eGetAttribute(eName);

            // EAttribute found in this structure.
            //
            if (eAttribute != null) {
                Object value = it.getValue();
                if (value instanceof Geometry) {
                    try {
                        value = JTS.transform((Geometry) value, eTransform.transform);
                    } catch (Exception e) {
                        throw new IllegalArgumentException("Failed to " + "transform geometry: "
                                + it);
                    }
                }
                eTransform.eValueMap.put(eAttribute, value);
            }
        }

        // Finished
        //
        return eTransform;
    }

