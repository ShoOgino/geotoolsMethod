    /**
     * Gets the names of {@link FeatureType feature types} available 
     * in this {@code EFeatureDataStore store}.
     * <p>
     * Since {@link EFeatureDataStore}s only have one name space by design, 
     * this method is guaranteed to return a list of unique 
     * names since the all unqualified type names are present in the same 
     * name space.
     * </p>
     * The following naming convention is used:
     * <pre>
     * name := &lt;eFolder&gt;.&lt;eFeature&gt;
     * 
     * where
     * 
     * eFolder  := the name of the {@link EFeatureFolderInfo folder} which contains the {@link EFeatureInfo feature}
     * eFeature := the name of the {@link EFeatureInfo feature}
     * </pre>  
     *
     * @return names of EFeature types available in this {@code DataStore}
     *
     * @see EFeatureUtils#toFolderName(String) - parse type name into folder name
     * @see EFeatureUtils#toFeatureName(String) - parse type name into feature name
     */
    @Override
    protected List<Name> createTypeNames() throws IOException {
        List<Name> eNames = new ArrayList<Name>();
        for(String eName : ePackageInfo.getTypeNames(eTypeQuery)) {
            eNames.add(new NameImpl(eName));
        }
        return eNames;
    }

