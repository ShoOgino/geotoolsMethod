    /**
     * Cached {@link Adapter} which monitors changes made to the {@link EObject} instance this
     * delegates to.
     * <p>
     * On each change, this adapter determines if any data cached by this instance should be
     * invalidated. The following conditions invoke invalidation of data:
     * <ol>
     * <li>{@link #bounds} is invalidated after a {@link #getValue() geometry} change</li>
     * </ol>
     * 
     * @return a lazily cached {@link EStructuralFeature} instance.
     */
    protected EFeatureListener<?> getStructureAdapter() {
        if (eStructurelistener == null) {
            eStructurelistener = new EFeatureListener<Object>() {

                        @Override
                        public boolean onChange(Object source, 
                                int property, Object oldValue, Object newValue) {
                            //
                            // Dispatch on property type
                            //
                            if (property == EFeaturePackage.EFEATURE__SRID) {
                                //
                                // ---------------------------------------
                                //  Current bounds have wrong CRS.
                                // ---------------------------------------
                                //  This forces current bounds
                                //  to be recalculated on next call
                                //  to getData().getBounds()
                                //
                                bounds = null;
                                //
                                // Notify
                                //
                                EFeatureInternal.eNotify((InternalEObject)eObject(),EFeaturePackage.EFEATURE__SRID, oldValue, newValue);
                                
                            }
                            //
                            // Referenced EObject structure changed?
                            //
                            else if ((source == eFeature()) 
                                    && (property == EFeaturePackage.EFEATURE__STRUCTURE)) {
                                //
                                // ---------------------------------------
                                //  Current structure has been switched
                                // ---------------------------------------
                                //
                                //  1) Remove listener from structure 
                                //
                                ((EFeatureInfo)oldValue).removeListener(this);
                                //
                                // Add listener to new structure
                                //
                                ((EFeatureInfo)newValue).addListener(this);
                                //
                                //  This forces current bounds
                                //  to be recalculated on next call
                                //  to getData().getBounds()
                                //
                                bounds = null;
                            }
                            //
                            // Always allowed
                            //
                            return true;
                        }

                    };
        }
        return eStructurelistener;
    }

