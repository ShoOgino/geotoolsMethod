    /**
     * Validate {@link EFeature} structure.
     * <p>
     * If this {@link EFeature} is not {@link #isRoot() a root}, given {@link EClass} instance is
     * validated against the {@link #eReference() reference name} to ensure that such a reference
     * exist.
     * </p>
     * @param ePackage - given {@link EPackage} instance
     * @param eParent - {@link EClass} of given {@link EFeature} parent instance
     * @return <code>true</code> if valid, <code>false</code> otherwise.
     */
    public EFeatureStatus validate(EPackage ePackage, EClass eParent) {
        //
        // Initialize
        //
        EFeatureStatus s;
        //
        // Invalidate structure
        //
        doInvalidate(false);
        //
        // 1) Validate reference?
        //
        EReference eReference = null;
        if (!eIsRoot) {
            if (eParent == null) {
                return failure(this,
                        eName(), "Feature mismatch: Flagged as !eIsRoot() but parent class is null");
            }
            eReference = EFeatureUtils.eGetReference(eParent, this.eReferenceName);
            if (eReference == null) {
                return failure(this, eName(), "Feature mismatch: EReference " + this.eReferenceName
                        + " not found");
            }
        }
        //
        // 2) Validate EClass name
        //
        EClassifier eClassifier = ePackage.getEClassifier(eClassName);
        if (!(eClassifier instanceof EClass)) {
            return failure(this, eName(), "Feature mismatch: EClass " + eClassName + " not found");
        }
        EClass eClass = ((EClass) eClassifier);
        //
        // Get list of all EAttributes
        //
        Map<String, EAttribute> eAttrMap = EFeatureUtils.eGetAttributeMap(eClass);
        //
        // 3) Validate ID attribute
        //
        EAttribute eAttribute = eClass.getEIDAttribute();
        if (eAttribute != null) {
            //
            // Get attribute name
            //
            String eName = eAttribute.getName();
            //
            // Get EAttribute ID instance
            //
            EFeatureAttributeInfo eInfo = eGetAttributeInfo(eName, true);
            //
            // Validate attribute
            //
            if(!(s = eInfo.validate(true, eAttribute)).isSuccess()) {
                //
                // Given EClass specified ID attribute was not a valid
                //
                return s;
            }
        } else if (!eAttrMap.containsKey(eIDAttributeName)) {
            return failure(this, eName(), "Feature mismatch: ID EAttribute '" + eIDAttributeName + "' not found");
        }
        //
        // EClass specified ID attribute is already validated
        //
        eAttrMap.remove(eAttribute);
        //
        // 4) Validate attributes
        //
        for (EFeatureAttributeInfo it : eAttributeInfoMap.values()) {
            eAttribute = eAttrMap.get(it.eName);
            if (eAttribute == null) {
                return failure(this, eName(), "Feature mismatch: EAttribute " + it.eName
                        + " not found in EClass");
            }
            boolean isID = eAttribute.getName().equals(eIDAttributeName);
            if (!(s = it.validate(isID, eAttribute)).isSuccess()) {
                return s;
            }
        }
        //
        // 5) Validate geometries
        //
        for (EFeatureGeometryInfo it : eGeometryInfoMap.values()) {
            eAttribute = eAttrMap.get(it.eName);
            if (eAttribute == null) {
                return failure(this, eName(), "Feature mismatch: EGeometry " + it.eName
                        + " not found in EClass");
            }
            boolean isID = eAttribute.getName().equals(eIDAttributeName);
            if (!(s = it.validate(isID, eAttribute)).isSuccess()) {
                return s;
            }
        }
        //
        // Store valid state
        //
        this.isValid = true;
        //
        // Store as weak references. This prevents memory leakage
        // when doDispose() is not called explicitly.
        //
        this.eParentClass = new WeakReference<EClass>(eParent);
        this.eReference = new WeakReference<EReference>(eReference);

        // Confirm that structure is valid
        //
        return structureIsValid(eName());
    }

