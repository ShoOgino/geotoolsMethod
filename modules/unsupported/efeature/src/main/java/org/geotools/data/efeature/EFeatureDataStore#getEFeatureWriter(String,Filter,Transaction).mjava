    /**
     * Returns a {@link EFeatureWriter} for the specified type name and transaction.
     * <p>
     * This is a convenience method for <code>getFeatureWriter(typeName,filter,tx)</code>,
     * which returns a writer capable of both updating and appending {@link EFeature features}
     * </p>
     * @param eType - (required) {@link EFeature} type name on the format:
     * <pre>
     * eType := &lt;eFolder&gt;.&lt;eFeature&gt;
     * 
     * where
     * 
     * eFolder  := the name of the {@link EFeatureFolderInfo folder} which contains the {@link EFeatureInfo feature}
     * eFeature := the name of the {@link EFeatureInfo feature}
     * </pre>  
     * @param filter - (Optional) {@link Filter} selecting {@link EFeature features} to be updated. 
     * If <code>null</code>, {@link Filter#INCLUDE} is assumed.
     * @param tx - (Optional) {@link Transaction} controlling modifications. If <code>null</code>, 
     * {@link Transaction#AUTO_COMMIT} is assumed.
     * @return a {@link EFeatureWriter} instance. 
     * @see {@link #getFeatureWriter(String, Filter, Transaction)
     */
    public final FeatureWriter<SimpleFeatureType, SimpleFeature> getEFeatureWriter(String eType, Filter filter, 
            Transaction tx) throws IOException {
        tx = ensureTransaction(tx);
        filter = ensureFilter(filter);
        return getFeatureWriter( eType, filter, tx );
    }

