    /**
     * Get {@link EFeatureDataStoreInfo} instance with given {@link EFeatureDomainInfo#eDomainID() name space URL} 
     * from {@link EFeatureContext} with given {@link EFeatureContext#eContextID() ID}. 
     * </p>
     * 
     * @param eContextID - given context {@link EFeatureContext#eContextID() ID}
     * @param eDomainID - given editing domain {@link EFeatureDomainInfo#eDomainID() ID}
     * @param eNsURI - {@link EPackage} defining {@link EObject}s containing {@link EFeature}s or
     *        {@link EFeature} compatible data.
     * @return a {@link EFeatureDataStoreInfo} if found.
     * @throws IllegalArgumentException If no {@link EditingDomain} instance was found.
     */
    public static EFeatureDataStoreInfo eDataStoreInfo(String eContextID, String eDomainID, String eNsURI) {
        EFeatureContextInfo eContextInfo = eGetContextFactory().eStructure(eContextID);
        EFeatureDataStoreInfo eStoreInfo = (eContextInfo != null ? eContextInfo.eGetDataStoreInfo(eDomainID, eNsURI) : null);
        if(eStoreInfo!=null)
        {
            return eStoreInfo;
        }
        // Not found, throw exception
        //
        throw new IllegalArgumentException("No EditingDomain cached for " +
                "eContextID: " + eContextID + ", " +
                "eDomainID: " + eDomainID);
    }

