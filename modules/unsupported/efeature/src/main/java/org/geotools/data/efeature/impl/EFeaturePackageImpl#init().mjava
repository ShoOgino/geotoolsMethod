    /**
     * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
     * 
     * <p>This method is used to initialize {@link EFeaturePackage#eINSTANCE} when that field is accessed.
     * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
     * <!-- begin-user-doc --> <!-- end-user-doc -->
     * @see #eNS_URI
     * @generated
     */
    public static EFeaturePackage init() {
        if (isInited) return (EFeaturePackage)EPackage.Registry.INSTANCE.getEPackage(EFeaturePackage.eNS_URI);

        // Obtain or create and register package
        EFeaturePackageImpl theEFeaturePackage = (EFeaturePackageImpl)(EPackage.Registry.INSTANCE.get(eNS_URI) instanceof EFeaturePackageImpl ? EPackage.Registry.INSTANCE.get(eNS_URI) : new EFeaturePackageImpl());

        isInited = true;

        // Load packages
        theEFeaturePackage.loadPackage();

        // Fix loaded packages
        theEFeaturePackage.fixPackageContents();

        // Mark meta-data to indicate it can't be changed
        theEFeaturePackage.freeze();

  
        // Update the registry and return the package
        EPackage.Registry.INSTANCE.put(EFeaturePackage.eNS_URI, theEFeaturePackage);
        return theEFeaturePackage;
    }

