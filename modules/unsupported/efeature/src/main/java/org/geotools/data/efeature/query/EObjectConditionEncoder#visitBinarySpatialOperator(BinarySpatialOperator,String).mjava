    /**
     * Common implementation for {@link BinarySpatialOperator binary spatial operator} filters. This
     * way they're all handled centrally.
     * <p>
     * This method extracts property name, geometry literal and descriptor and evaluates if property
     * name and geometry literal arguments are swapped.
     * </p>
     * 
     * @param filter - binary spatial operator statement
     * @param name - operator name
     * 
     * @return a {@link Condition} instance
     * 
     * @throws RuntimeException - if one or more expressions are not supported
     * 
     */
    protected Condition visitBinarySpatialOperator(BinarySpatialOperator filter, String name) {
        // Perform some sanity checks
        //
        if (filter == null) {
            throw new NullPointerException("Filter to be encoded cannot be null");
        }

        // Extract the property name and the geometry literal
        //
        Literal geometry;
        PropertyName property;
        boolean swapped = false;
        BinaryComparisonOperator op = (BinaryComparisonOperator) filter;
        if (op.getExpression1() instanceof PropertyName && op.getExpression2() instanceof Literal) {
            property = (PropertyName) op.getExpression1();
            geometry = (Literal) op.getExpression2();
            swapped = true;
        } else if (op.getExpression2() instanceof PropertyName
                && op.getExpression1() instanceof Literal) {
            property = (PropertyName) op.getExpression2();
            geometry = (Literal) op.getExpression1();
        } else {
            throw new IllegalArgumentException("Can only encode spatial filters that do "
                    + "compare a property name and a geometry");
        }

        // Get EAttribute instance
        //
        EAttribute eAttribute = eFeatureInfo.getEAttribute(property.getPropertyName());

        // Going through evaluate ensures we get the proper result even
        // if the name has not been specified (convention -> the default geometry)
        AttributeDescriptor descriptor = (AttributeDescriptor) property.evaluate(featureType);
        if (descriptor instanceof GeometryDescriptor) {

            // Forward
            //
            return visitBinarySpatialOperator(filter, name, eAttribute,
                    (GeometryDescriptor) descriptor, geometry, swapped);

        } else {
            throw new IllegalArgumentException("AttributeDescriptor does not describe a geometry");
        }

    }

