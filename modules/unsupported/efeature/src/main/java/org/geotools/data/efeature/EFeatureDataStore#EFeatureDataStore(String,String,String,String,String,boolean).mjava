    /**
     * A {@link EFeature} {@link DataStore} implementation class.
     * @param eContextID - {@link EFeatureContext} instance id
     * @param eDomainID - {@link EditingDomain} instance extension id
     * @param eNsURI - {@link EPackage} name space
     * @param eURI - {@link URI} formated string to EMF {@link Resource} containing 
     *  {@link EFeature}s
     * @param eTypes - {@link EFeature} types on the following format:
     * <pre>
     * eTypes:=&lt;eType1&gt;+...+&lt;eTypeN&gt;
     * 
     * where
     *  
     * eType    := &lt;eFolder&gt;.&lt;eFeature&gt;
     * eFolder  := the name of the {@link EFeatureFolderInfo folder} which contains the {@link EFeatureInfo feature}
     * eFeature := the name of the {@link EFeatureInfo feature type}
     * </pre>
     * @param eWritable - if <code>true</code> {@link EFeature}s are writable 
     * ({@link EFeatureWriter#UPDATE} | {@link EFeatureWriter#APPEND})
     * @throws IOException 
     * @throws IllegalArgumentException If any argument is invalid.
     * @see {@link URI#createURI(String)}
     */
    public EFeatureDataStore(String eContextID, String eDomainID, String eNsURI, 
            String eURI, String eTypes, boolean eWritable) throws IOException, IllegalArgumentException {
        //
        // Forward using same context factory as EFeatureDataStoreFactory
        //
        this(EFeatureDataStoreFactory.eGetContextFactory().eContext(eContextID),eDomainID,eNsURI,eURI,eTypes,eWritable);
    }

