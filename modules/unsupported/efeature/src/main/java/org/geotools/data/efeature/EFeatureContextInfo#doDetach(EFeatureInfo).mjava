    /**
     * Detach {@link EFeatureInfo} from context.
     * </p>
     * @return <code>true</code> if released was allowed.
     * @throws IllegalArgumentException If release unexpectedly fails.
     */
    protected boolean doDetach(EFeatureInfo eInfo) {
        //
        // Try to release from cache.
        //
        EFeatureStatus eStatus = eFeatureInfoCache().detach(eInfo);
        //
        // Allowed?
        //
        if(eStatus.isSuccess()) {
            //
            // Get parent structure
            //
            EStructureInfo<?> eStructure = eInfo.eParentInfo(false);
            //
            // Found (not dangling)?
            //
            if(eStructure instanceof EFeatureFolderInfo) {
                //
                // Cast to EFeatureFolderInfo
                //
                EFeatureFolderInfo eFolderInfo = (EFeatureFolderInfo)eStructure;
                //
                // Remove object from folder's feature map
                //
                EFeatureInfo eRemoved = eFolderInfo.eFeatureInfoMap.remove(eInfo.eName()); 
                if(eInfo!=eRemoved) {
                    //
                    // Successfully removed structure from context 
                    //
                    return true;
                }
                //
                // Remove object does not match given, add it again?
                //
                if(eRemoved!=null) {
                    eFolderInfo.eFeatureInfoMap.put(eInfo.eName(), eInfo);
                }
                //
                // Break out, try to re-attach to cache...
                //
            } else {
                //
                // Successfully removed dangling structure from context 
                //
                return true;                
            }
        }
        //
        // Try to add again
        //
        eStatus = eFeatureInfoCache().attach(eInfo);
        //
        // Validate state
        //
        if(eStatus.isFailure()) {
            throw new IllegalStateException("Release failed. EFeatureInfoCache is inconsistent.");
        }
        //
        // Not allowed
        //
        return false;
    }    

