    /**
     * Create a {@link EFeature} status instance
     * 
     * @param source - source which status apply
     * @param type - status type
     * @param message - (optional) message
     * @param cause - (optional) {@link Throwable thowable} or 
     * {@link Throwable#getStackTrace() stack trace} cause
     * @return a new {@link EFeatureStatus} instance
     * @throws IllegalArgumentException If cause is not <code>null</code>,
     * and not a {@link Throwable} or {@link StackTraceElement} array. 
     */
    public static EFeatureStatus newStatus(final Object source, final int type,
            final String message, final Object cause) {
        
        if(!(cause instanceof Throwable || cause instanceof StackTraceElement[] || cause==null) )
        {
            throw new IllegalArgumentException(
                    "Cause can only be Throwable and StackTraceElement[]");
        }
        
        return new EFeatureStatus() {

            public int getType() {
                return type;
            }

            public Object getSource() {
                return source;
            }

            public String getMessage() {
                return message;
            }

            public Throwable getCause() {
                return (cause instanceof Throwable ? (Throwable)cause : null);
            }
            
            public StackTraceElement[] getStackTrace() {
                return (cause instanceof Throwable ? ((Throwable)cause).getStackTrace() : (StackTraceElement[])cause);
            }
            

            public boolean isType(int match) {
                return type == match;
            }

            public boolean isSuccess() {
                return isType(SUCCESS);
            }

            public boolean isWarning() {
                return isType(WARNING);
            }

            public boolean isFailure() {
                return isType(FAILURE);
            }

            public EFeatureStatus clone(String message) {
                return newStatus(source, type, message, cause);
            }
            
            public EFeatureStatus clone(String message, Object cause) {
                return newStatus(source, type, message, cause);
            }

        };
    }

