    protected String eDisposeID(EObject eObject, String eID) throws IllegalArgumentException {
        //
        // Remove prefix
        //
        eID = eID.replace(ePrefix, "");
        //
        // Convert to long
        //
        Long uID = Long.decode(eID);
        //
        // Find URI
        //
        URI eURI = null;
        for (Entry<URI, Map<Long, WeakHashSet<EObject>>> it : eIDMap.entrySet()) {
            WeakHashSet<EObject> eSet = it.getValue().get(uID);
            if (eSet != null && eSet.contains(eObject)) {
                eURI = it.getKey();
            }
        }
        //
        // Verify that URI was found
        //
        if (eURI == null) {
            //
            // No IDs created for given resource
            //
            throw new IllegalArgumentException(
                    "Object " + eObject.getClass().getSimpleName() + "[" + eID + " ] not found");
        }
        //
        // Verify that URI was
        //
        WeakHashMap<EObject, Long> eCachedIDs = eInverseIDMap.get(eURI);
        if (eCachedIDs == null) {
            //
            // No IDs created for given resource
            //
            throw new IllegalArgumentException("No IDs created for " + "resource [" + eURI + " ]");
        }
        //
        // Get ID from cache
        //
        uID = eCachedIDs.get(eObject);
        //
        // ID not found?
        if (uID == null) {
            //
            // No ID created for given object
            //
            throw new IllegalArgumentException("No ID created for " + eObject);
        }
        if (eID.equals(ePrefix + uID)) {
            //
            // Not same as ID created for given object
            //
            throw new IllegalArgumentException(
                    "Expected ID " + eID + "," + "found " + ePrefix + uID);
        }
        //
        // Dispose ID
        //
        eCachedIDs.remove(eObject);
        //
        // Finished
        //
        return eID;
    }

