    /**
     * Construct a live {@link EFeatureDataStore} instance from given parameters.
     * 
     * @param params - the full set of information needed to construct a live {@link EFeatureDataStore}
     *        instance
     * 
     * @return a new {@link EFeatureDataStore} instance, this may be <code>null</code> if the required
     *         resource was not found or if insufficient parameters were given. Note that
     *         canProcess() should have returned false if the problem is to do with insufficient
     *         parameters.
     * 
     * @throws IOException if there were any problems setting up (creating or connecting) the
     *         {@link EFeatureContext}, {@link EditingDomain} or {@link EObject} container
     *         instances.
     * @throws IllegalArgumentException if resolved {@link EObject} container and
     *         {@link EFeatureDataStoreInfo} does not match.
     */
    public EFeatureDataStore createDataStore(Map<String, Serializable> params) throws IOException,
            IllegalArgumentException {

        // lookup will throw error message for
        // lack of required parameter or wrong data type
        //
        String eContextID = (String) EFEATURE_CONTEXT_ID_PARAM.lookUp(params);
        String eDomainID = (String) EDITING_DOMAIN_ID_PARAM.lookUp(params);
        String eNsURI = (String) EPACKAGE_NS_URI_PARAM.lookUp(params);
        String eURI = (String) ERESOURCE_URI_PARAM.lookUp(params);
        String eFolders = (String) EFOLDERS_QUERY_PARAM.lookUp(params);

        // Try processing parameters first so we can get real IO
        // error message back to the user
        //
        if (!canProcess(params)) {
            throw new IOException("One or more parameters are " +
            		"missing or invalid. See log for more information.");
        }

        // Construct EFeatureStore instance from given parameters
        //
        return new EFeatureDataStore(eContextID, eDomainID, eNsURI, eURI, eFolders);
    }

