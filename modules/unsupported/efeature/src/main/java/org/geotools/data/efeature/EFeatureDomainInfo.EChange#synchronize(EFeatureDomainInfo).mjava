        /**
        * Synchronize given {@link EFeatureDomainInfo structure}  
        * with it's {@link EFeatureContextInfo context} counterpart
        * <p> 
        * This is required since {@link EPackage packages} are 
        * allowed to be added to, and removed from the context. 
        * </p>
        * @param eDomainInfo - {@link EFeatureDomainInfo structure}
        * @return a {@link Map} from {@link EFeatureDomainInfo#eDomainID() eDomainID} to 
        * {@link EFeatureDomainInfo} instances.
        * @see {@link EFeatureDomainInfo#eGetDataStoreInfo(String)}
        */    
       protected final Map<String, EFeatureDataStoreInfo> synchronize(EFeatureDomainInfo eDomainInfo)
       {
           //
           // Ensure thread safe access to domain map 
           //
           synchronized(eDomainInfo.eDataStoreMap) {
               //
               // Get information
               //
               eMap = eDomainInfo.eDataStoreMap;
               //
               // Get factory instance and context id 
               //
               EFeatureContextFactory eFactory = eDomainInfo.eFactory(false);
               //
               // Get context instance
               //
               EFeatureContext eContext = eDomainInfo.eContext(false);
               //
               // Get current set of EPackage NsURIs 
               //
               List<String> eNsURIs = eContext.eNsURIs();
               
               // Initialize map of new store structures
               //
               Map<String, EFeatureDataStoreInfo> 
                   eNewMap = new HashMap<String, EFeatureDataStoreInfo>(eNsURIs.size());        
               
               // Add all domains 
               //
               for(String eNsURI : eNsURIs)
               {
                   // Get structure information
                   //
                   EFeatureDataStoreInfo eStoreInfo = eMap.get(eNsURI);
                   
                   // Not found or overwrite?
                   //
                   if(eStoreInfo==null)
                   {
                       // Create the domain structure
                       //
                       eStoreInfo = EFeatureDataStoreInfo.create(
                               eFactory, eDomainInfo, eNsURI);
                       
                       /// Put to map of new structures 
                       //
                       eNewMap.put(eNsURI, eStoreInfo);
                   }
               }
               
               // Remove disposed packages
               //
               eMap.keySet().retainAll(eNsURIs);
               
               // Put new to current map
               //
               eMap.putAll(eNewMap);
               
               // Finished
               // 
               return Collections.unmodifiableMap(eMap);
           }
       }

