    /**
     * Default constructor.
     *
     * <p>
     *
     * @param eInternal
     * @param eStructuralFeature
     * @param dataType - {@link #getData() data} type.
     * @param valueType - {@link #getValue() value} type.
     */
    protected EFeaturePropertyDelegate(
            EFeatureInternal eInternal, String eName, Class<T> dataType, Class<V> valueType) {
        //
        // Forward
        //
        super();
        //
        // Get EFeatureAttribute structure
        //
        this.eStructure = eInternal.eStructure.eGetAttributeInfo(eName, true);
        //
        // EAttribute not found?
        //
        if (this.eStructure == null) {
            throw new IllegalArgumentException("EStructuralFeature '" + eName + "'" + " not found");
        }
        //
        // Do value type sanity check
        //
        EAttribute eAttribute = eStructure.eAttribute();
        Class<?> actualType = eAttribute.getEAttributeType().getInstanceClass();
        if (!valueType.isAssignableFrom(actualType)) {
            //
            // Not correct type
            //
            throw new IllegalArgumentException(
                    "Value type '" + valueType.getName() + "'" + " mismatch");
        }
        //
        // Construct delegate
        //
        this.eDataType = dataType;
        this.eValueType = valueType;
        this.eInternal = new WeakReference<EFeatureInternal>(eInternal);
        this.eStructuralFeature = new WeakReference<EStructuralFeature>(eAttribute);
    }

