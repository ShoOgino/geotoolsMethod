    /**
     * Creates a filter matching contents of given object.
     * <p>
     * 
     * @param eGeometryType the filter to use on contents
     * @param all - if <code>true</code>, all contents must be matched by the filter
     * @param tree - if <code>true</code>, {@link EObject#eAllContents()} is used instead of
     *        {@link EObject#eContents()}
     * 
     * @return the filter
     * 
     */
    public static EObjectFilter createContentFilter(final EObjectFilter filter, final boolean all,
            final boolean tree) {
        return new EObjectFilter() {
            @Override
            public boolean matches(Object object) {
                if (object instanceof EObject) {
                    int count = 0;
                    EObject eObj = (EObject) object;
                    if (all) {
                        TreeIterator<EObject> contents = eObj.eAllContents();
                        while (contents.hasNext()) {
                            if (filter.matches(contents.next())) {
                                count++;
                                if (!all)
                                    break;
                            } else if (all) {
                                count = 0;
                                break;
                            }
                        }
                    } else {
                        EList<EObject> contents = eObj.eContents();
                        for (EObject it : contents) {
                            if (filter.matches(it)) {
                                count++;
                                if (!all)
                                    break;
                            } else if (all) {
                                count = 0;
                                break;
                            }
                        }
                    }
                    return (all ? count > 0 : count == 1);
                }
                return false;
            }
        };
    }

