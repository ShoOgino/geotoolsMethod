    /**
     * Validate property againstÂ current {@link #getFeatureType() feature} and push it or the
     * {@link AttributeDescriptor} to the {@link Expression} stack.
     * 
     * @param expression - the expression to visit
     * @param toAttribute - if {@link Boolean#TRUE TRUE}, push and return
     *        {@link AttributeDescriptor} found in current {@link #getFeatureType() feature type},
     *        otherwise return {@link PropertyName} instance.
     * 
     * @return a {@link AttributeDescriptor} or {@link PropertyName} instance depending on
     *         'toAttribute' flag
     * 
     * @throws RuntimeException If {@link #getFeatureType()} does not define a
     *         {@link AttributeDescriptor} with given property name.
     */
    public Object visit(PropertyName expression, Object toAttribute) throws RuntimeException {

        // LOGGER.finer("exporting PropertyName");
        //
        // Get parse flag
        //
        boolean bFlag = (toAttribute instanceof Boolean ? (Boolean) toAttribute : false);
        //
        // First evaluate expression against feature type
        // get the attribute, this handles xpath
        //
        AttributeDescriptor attribute = null;
        try {
            attribute = (AttributeDescriptor) expression.evaluate(featureType);
        } catch (Exception e) {
            // Property name not supported
            //
            throw new IllegalArgumentException("Error occured mapping " + expression
                    + " to feature type", e);
        }
        // Verify
        //
        if (attribute == null) {
            throw new NullPointerException("Attribute with name " +
            		"[" + expression.getPropertyName() + "] not found");
        }

        // Push to stack
        //
        eExpressionStack.push((bFlag ? attribute : expression));

        // Finished
        //
        return eExpressionStack.peek();

    }

