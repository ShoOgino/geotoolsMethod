    /**
     * Make given {@link EFeatureInfo structure} immutable.
     * <p>
     * {@link EFeature} is highly optimized, which depends on the 
     * structure being immutable. Note that EMF meta models might 
     * change over time (dynamic EMF). Each time a {@link EClass}
     * change (attribute, containment, cross reference etc),
     * the EMF meta model and structure might get out of sync.
     * Change is tracked by the structure. If any change is detected,
     * the structure is invalidated. If {@link #validate(EPackage, EClass)} 
     * fails, the whole structure must be recreated.
     * <p/>
     * TODO Add tracking of EMF meta model changes and implement
     * synchronization mechanisms that update affected structures.
     * Note that this implies that checksums must be recalculated,
     * and that any cached values derived from the structure in live 
     * {@link EFeature} instances must be invalidated.
     */
    protected static void eImmutable(EFeatureInfo eStructure) {                
        //
        // Make copied lists and maps unmodifiable (structure is immutable)
        //
        eStructure.eMappingMap = Collections.unmodifiableMap(eStructure.eMappingMap);    
        eStructure.eGeometryMap = Collections.unmodifiableMap(eStructure.eGeometryMap);
        eStructure.eAttributeMap = Collections.unmodifiableMap(eStructure.eAttributeMap);
        eStructure.eAllAttributeMap = Collections.unmodifiableMap(eStructure.eAllAttributeMap);
        eStructure.eGeometryInfoMap = Collections.unmodifiableMap(eStructure.eGeometryInfoMap);
        eStructure.eAttributeInfoMap = Collections.unmodifiableMap(eStructure.eAttributeInfoMap);
        eStructure.eAllAttributeInfoMap = Collections.unmodifiableMap(eStructure.eAllAttributeInfoMap);
        //
        // TODO Add invalidation adapter tracking changes in the EMF meta model 
        //
    }

