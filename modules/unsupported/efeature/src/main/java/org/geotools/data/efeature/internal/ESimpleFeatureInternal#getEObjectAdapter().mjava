    /**
     * Cached {@link EFeatureListener} which monitors changes made to {@link EFeatureInfo}.
     * <p>
     * On each change, this adapter determines if any data cached by this instance should be
     * invalidated. The following conditions invoke invalidation of data:
     * <ol>
     * <li>{@link #bounds} is invalidated after {@link #setSRID(String) spatial reference ID} is
     * changed</li>
     * </ol>
     * 
     * @see {@link #setSRID(String)} - forwarded to {@link EFeatureInfo#setSRID(String)}
     * @see {@link EFeatureInfo#setSRID(String)} - invalidates the
     *      {@link FeatureType#getCoordinateReferenceSystem() CRS} of all {@link Feature} instances
     *      contained by {@link EFeature}s with the same structure as this.
     * @return a lazily cached {@link Adapter} instance.
     */
    protected Adapter getEObjectAdapter() {
        if (eObjectlistener == null) {
            eObjectlistener = new AdapterImpl() {

                @Override
                public void notifyChanged(Notification msg) {

                    Object feature = msg.getFeature();
                    if (msg.getEventType() == Notification.SET
                            && (msg.getNewValue() instanceof Geometry)
                            && (msg.getFeature() instanceof EStructuralFeature)) {
                        // Check if a geometry is changed. If it is, bounds
                        // must be re-calculated...
                        String eName = ((EStructuralFeature) feature).getName();
                        if (eStructure().isGeometry(eName)) {
                            // Reset bounds. This forces bounds of this
                            // feature to be recalculated on next call
                            // to SimpleFeatureDelegate#getBounds()
                            bounds = null;

                        }
                    }
                }
            };
        }
        return eObjectlistener;
    }        

