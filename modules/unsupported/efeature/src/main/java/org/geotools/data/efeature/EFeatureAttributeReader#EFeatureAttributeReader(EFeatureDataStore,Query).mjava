    /**
     * The {@link EFeatureAttributeReader} constructor
     * 
     * @param eDataStore - {@link EFeatureDataStore} instance
     * @param query - GeoTools {@link Query} instance
     * @throws IOException
     */
    public EFeatureAttributeReader(EFeatureDataStore eDataStore, 
            Query query) throws IOException {
        //
        // Initialize reader
        //
        String eType = query.getTypeName();
        String eFolder = EFeatureUtils.toFolderName(eType);
        String eFeature = EFeatureUtils.toFeatureName(eType);
        eFolderInfo = eDataStore.ePackageInfo.eGetFolderInfo(eFolder);
        eFeatureInfo = eFolderInfo.eGetFeatureInfo(eFeature);
        this.type = eFeatureInfo.getFeatureType();
        //
        // Get attribute names from query
        //
        String[] eNames = (query == null ? new String[0] : query.getPropertyNames()); 
        //
        // Get all attributes as defined by EFeatureInfo?
        //
        if (eNames == null || eNames.length == 0) {
            //
            // Get subset of attributes from EClass as defined by EFeatureInfo only
            //
            this.eAttributes.putAll(eFeatureInfo.eGetAttributeMap(true));
        } else {
            //
            // Get subset of attributes as defined by EFeatureInfo AND GeoTools Query
            //
            this.eAttributes.putAll(eFeatureInfo.eGetAttributeMap(eNames,true));
        }
        //
        // Get objects as tree iterator (enables lazy loading)  
        //
        TreeIterator<EObject> eObjects = eDataStore.eResource().getAllContents();
        //
        // Convert GeoTools query to EFeatureQuery statement
        //
        try {
            eQuery = EFeatureUtils.toEFeatureQuery(eFeatureInfo, eObjects, query.getFilter());
        } catch (EFeatureEncoderException ex) {
            throw (IOException) new IOException("Failed to create EFeatureQuery").initCause(ex);
        }
    }

