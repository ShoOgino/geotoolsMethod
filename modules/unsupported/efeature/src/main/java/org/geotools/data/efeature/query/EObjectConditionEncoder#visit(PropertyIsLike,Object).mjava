    /**
     * Create EMF query compatible {@link EAttributeValueIsLike LIKE condition} from given
     * {@link PropertyIsLike LIKE filter} and push it to {@link EObjectCondition} stack.
     * <p>
     * Only {@link String} literal values are supported. Any other {@link Literal} value will throw
     * a {@link RuntimeException}.
     * <p>
     * String pattern must comply with {@link Pattern} specification. An invalid pattern will throw
     * a {@link RuntimeException}.
     * </p>
     * 
     * @param filter - the LIKE Filter to be visited.
     * 
     * @return a {@link EAttributeValueIsLike} instance
     * 
     * @throws RuntimeException If one or more expressions are not supported
     * 
     */
    public EAttributeValueIsLike visit(PropertyIsLike filter, Object extraData) {
        // Get LIKE clause information
        //
        // char esc = filter.getEscape().charAt(0);
        // char multi = filter.getWildCard().charAt(0);
        // char single = filter.getSingleChar().charAt(0);
        // boolean matchCase = filter.isMatchingCase();
        // TODO: Verify pattern expression

        // Get expression and literal
        //
        String pattern = filter.getLiteral();
        Expression expr = filter.getExpression();

        // Get expression data type
        //
        Class<?> type;
        AttributeDescriptor attType = (AttributeDescriptor) expr.evaluate(featureType);
        if (attType != null) {
            type = attType.getType().getBinding();
        } else {
            // assume it's a string
            type = String.class;
        }

        // Check if type is not supported
        //
        if (!DataTypes.supports(type)) {
            throw new RuntimeException("Type " + type + " not supported.");
        }

        // Build expression recursively and put onto expression stack
        //
        expr.accept(this, extraData);

        // Cast expression to PropertyName
        //
        PropertyName name = toType(eExpressionStack.pop(), PropertyName.class,
                "PropertyIsLike expression is not a PropertyName");

        // Get EAttribute instance from definition
        //
        EAttribute eAttribute = eFeatureInfo.getEAttribute(name.getPropertyName());

        // Found attribute?
        //
        if (eAttribute == null) {
            throw new IllegalArgumentException("EAttribute " + name.getPropertyName()
                    + " not found");
        }

        try {
            // Create EObjectCondition instance and push it
            //
            EAttributeValueIsLike eCondition = new EAttributeValueIsLike(eAttribute, pattern);

            // Push to stack
            //
            eConditionStack.push(eCondition);

            // Finished
            //
            return eCondition;

        } catch (EFeatureEncoderException e) {
            throw new RuntimeException("Failed to create LIKE condition", e);
        }

    }

