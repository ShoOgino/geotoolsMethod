    protected static Map<String, EFeatureInfo> features(
            EFeatureFolderInfo eFolderInfo, EPackage ePackage) {
        //
        // Prepare lists
        //
        EList<EClassifier> eList = ePackage.getEClassifiers();
        Map<String, EFeatureInfo> eFeatureMap = new HashMap<String, EFeatureInfo>(eList.size());
        //
        // Get EFeatureInfo cache
        //
        EFeatureInfoCache eCache = eFolderInfo.eContext(false).eStructure().eFeatureInfoCache();
        //
        // Inspect EMF package, adding all EFeature and EFeature compatible classes.
        //
        for (EClassifier it : eList) {
            //
            // Check if it implements EFeature or contains EFeature compatible data
            //
            if (EFeatureUtils.isCompatible(it)) {
                EClass eClass = (EClass) it;
                EFeatureInfo eFeatureInfo = eCache.get(eClass);
                if (eFeatureInfo == null) {
                    eFeatureInfo = EFeatureInfo.create(eFolderInfo, (EClass) it);
                }
                eFeatureInfo = eCache.get(eClass);
                eFeatureMap.put(eFeatureInfo.eName(), eFeatureInfo);
            }
        }
        //
        // Finished
        //
        return Collections.unmodifiableMap(eFeatureMap);
    }

