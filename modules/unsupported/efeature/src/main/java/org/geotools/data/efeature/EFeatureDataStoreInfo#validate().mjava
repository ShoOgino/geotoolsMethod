    /**
     * Validate given {@link EPackage} instance against 
     * the {@link EFeatureDataStoreInfo structure} .
     */
    public EFeatureStatus validate() {
        //
        // 1) Verify that not disposed
        //
        if(isDisposed)
        {
            return failure(this, eNsURI, "Is disposed");
        }
        //        
        // Invalidate structure
        //
        invalidate(false);        
        // 
        // 2) Verify that registry is cached
        //
        if(!isCached(eContextID))
        {
            return failure(this, eNsURI, "EFeatureContext with ID: " + eContextID + " not found");
        }
        EFeatureContext eContext = eContext(false);
        // 
        // 3) Verify that registry is cached
        //
        if(!eContext.containsDomain(eDomainID))
        {
            return failure(this, eNsURI, "Editing domain with ID: " + eContextID + " not found");
        }
        //
        // 4) Verify name space URI
        //
        EPackage ePackage = eContext.eGetPackage(eNsURI);
        if (!this.eNsURI.equals(ePackage.getNsURI())) {
            return failure(this, eNsURI, "DataStore mismatch: namespace (" + ePackage + ")");
        }
        //
        // 5) Verify ALL folders (query == null)
        //
        EFeatureStatus s;
        for (String eName : eGetFolderNames(null)) {
            EFeatureFolderInfo eInfo = eFolderInfoMap.get(eName);
            if (eInfo != null) {
                if (!(s = eInfo.validate(ePackage)).isSuccess()){
                    return s;
                }
            } else {
                return failure(this, eNsURI, "DataStore mismatch: Folder " + eName + " not found");
            }
        }
        //
        // Confirm that structure is valid
        //
        return structureIsValid(eNsURI());

    }

