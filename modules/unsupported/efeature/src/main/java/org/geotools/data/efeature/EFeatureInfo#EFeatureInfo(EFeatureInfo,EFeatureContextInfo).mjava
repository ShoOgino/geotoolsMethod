    /**
     * Structure copy constructor.
     * <p>
     * This method copies the structure into given context. 
     * The copied instance is {@link #isDangling() dangling} if the 
     * no parent structure was found in the new context.
     * </p>
     * <b>NOTE</b>: This method only adds a one-way reference from 
     * copied instance to given {@link EFeatureContext context}. 
     * No reference is added from the context to this feature. It does not
     * attach the {@link EFeatureInfo} instance with given 
     * {@link EFeatureContext context} {@link EFeatureContextInfo structure}, 
     * nor adds the {@link EClass#getEIDAttribute()} to the 
     * {@link EFeatureContext#eIDFactory()}. This must be done manually.
     * </p>  
     * @param eFeatureInfo - copy from this {@link EFeatureInfo} instance
     * @param eContextInfo - copy into this context
     * @see {@link EFeatureContextInfo#doAdapt(EFeatureInfo, boolean)}
     */
    protected EFeatureInfo(EFeatureInfo eFeatureInfo, EFeatureContextInfo eContextInfo) {
        //
        // Forward (copies context, state and hints)
        //
        super(eFeatureInfo, eContextInfo);        
        //
        // Mark as being structural equal to given structure
        //
        this.eUID = eFeatureInfo.eUID;
        //
        // Copy context path
        //
        this.eNsURI = eFeatureInfo.eNsURI;
        this.eDomainID = eFeatureInfo.eDomainID;
        this.eFolderName = eFeatureInfo.eFolderName;
        //
        // Copy EClass information
        //        
        this.eClassName = eFeatureInfo.eClassName;
        this.eClass = new WeakReference<EClass>(eFeatureInfo.eClass());
        //
        // Copy parent EClass information (folder is an EClass)
        //                
        this.eParentClass = new WeakReference<EClass>(eFeatureInfo.eParentClass());        
        this.eReferenceName = eFeatureInfo.eReferenceName;
        this.eReference = new WeakReference<EReference>(eFeatureInfo.eReference());
        //
        // Copy ID attribute information
        //                
        this.eIDAttributeName = eFeatureInfo.eIDAttributeName;
        //
        // Copy SRID attribute information
        //                
        this.eSRIDAttributeName = eFeatureInfo.eSRIDAttributeName;
        //
        // Copy default geometry attribute information
        //                
        this.eDefaultAttributeName = eFeatureInfo.eDefaultAttributeName;
        //
        // Copy other attributes 
        //
        this.isAvailable = eFeatureInfo.isAvailable;        
        //
        // Prepare to add attributes
        //
        this.eAttributeInfoMap = 
            new HashMap<String, EFeatureAttributeInfo>(eFeatureInfo.eAttributeInfoMap.size());
        this.eGeometryInfoMap = 
            new HashMap<String, EFeatureGeometryInfo>(eFeatureInfo.eGeometryInfoMap.size());
        //
        // Loop over all attributes and copy them
        //
        for(EFeatureAttributeInfo it : eFeatureInfo.eAttributeInfoMap.values()) {
            eAttributeInfoMap.put(it.eName,new EFeatureAttributeInfo(it,this));
        }
        for(EFeatureGeometryInfo it : eFeatureInfo.eGeometryInfoMap.values()) {
            eGeometryInfoMap.put(it.eName,new EFeatureGeometryInfo(it,this));
        }
    }

