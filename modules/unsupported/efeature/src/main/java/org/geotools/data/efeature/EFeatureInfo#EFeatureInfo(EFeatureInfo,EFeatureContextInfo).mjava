    /**
     * {@link EFeatureInfo} copy constructor.
     *
     * <p>This method copies the structure into given context.
     *
     * <p>If the parent structure is not found in the new context, the new instance become a {@link
     * EStructureInfo#isPrototype() prototype}. <b>NOTE</b>: This method only adds a one-way
     * reference from copied instance to given {@link EFeatureContext context}. No reference is
     * added from the context to this feature. It does not attach the {@link EFeatureInfo} instance
     * with given {@link EFeatureContext context} {@link EFeatureContextInfo structure}, nor adds
     * the {@link EClass#getEIDAttribute()} to the {@link EFeatureContext#eIDFactory()}. This must
     * be done manually.
     *
     * @param eInfo - copy from this {@link EFeatureInfo} instance
     * @param eContextInfo - copy into this context
     * @see {@link EFeatureContextInfo#doAdapt(EFeatureInfo, boolean)}
     */
    protected EFeatureInfo(EFeatureInfo eInfo, EFeatureContextInfo eContextInfo) {
        //
        // Forward (copies context, state and hints)
        //
        super(eInfo, eContextInfo);
        //
        // Mark as being structural equal to given structure
        //
        this.eUID = eInfo.eUID;
        //
        // Copy context path
        //
        this.eNsURI = eInfo.eNsURI;
        this.eFolderName = eInfo.eFolderName;
        //
        // Copy EClass information
        //
        this.eClassName = eInfo.eClassName;
        this.eClass = new WeakReference<EClass>(eInfo.eClass());
        //
        // Copy parent EClass information (folder is an EClass)
        //
        this.eReferenceName = eInfo.eReferenceName;
        this.eReference = new WeakReference<EReference>(eInfo.eReference());
        this.eParentClass = new WeakReference<EClass>(eInfo.eParentClass());
        //
        // Copy ID attribute information
        //
        this.eIDAttributeName = eInfo.eIDAttributeName;
        //
        // Copy SRID attribute information
        //
        this.eSRIDAttributeName = eInfo.eSRIDAttributeName;
        //
        // Copy default geometry attribute information
        //
        this.eDefaultAttributeName = eInfo.eDefaultAttributeName;
        //
        // Copy other attributes
        //
        this.isAvailable = eInfo.isAvailable;
        //
        // Prepare new hash maps
        //
        this.eGeometryInfoMap = EFeatureUtils.newMap(eInfo.eGeometryInfoMap);
        this.eAttributeInfoMap = EFeatureUtils.newMap(eInfo.eAttributeInfoMap);
        //
        // Loop over all attribute structures, copy them and add to maps
        //
        for (EFeatureAttributeInfo it : eInfo.eAttributeInfoMap.values()) {
            it = new EFeatureAttributeInfo(it, this);
            eAttributeInfoMap.put(it.eName, it);
        }
        for (EFeatureGeometryInfo it : eInfo.eGeometryInfoMap.values()) {
            it = new EFeatureGeometryInfo(it, this);
            eGeometryInfoMap.put(it.eName, it);
        }
        //
        // Pass mappings directly (is copied when made immutable below)
        //
        eMappingMap = eInfo.eMappingMap;
        //
        // Optimize structure lookup methods
        //
        eOptimize(this);
        //
        // Make structure immutable (it is allowed to not be modified)
        //
        eImmutable(this);
    }

