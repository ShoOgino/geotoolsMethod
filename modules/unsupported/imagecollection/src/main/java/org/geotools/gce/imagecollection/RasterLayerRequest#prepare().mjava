    /**
     * Compute this specific request settings all the parameters needed by a
     * visiting {@link RasterLayerResponse} object.
     * 
     * @throws DataSourceException
     */
    private void prepare() throws DataSourceException {
        String path = null; 
        if (filter != null) {
            path = parsePath(filter);
        } else {
            if (LOGGER.isLoggable(Level.INFO)){
                LOGGER.info("No PATH have been specified through a Filter. Proceeding with default Image");
            }
            if (rasterManager.parent.defaultValues.path == null){
                imageManager = rasterManager.getDatasetManager(Utils.FAKE_IMAGE_PATH);
                return;
            } else {
                path = rasterManager.parent.defaultValues.path;
            }
        }
        final String storePath = rasterManager.parent.rootPath;
        
        //First normalization
        path = FilenameUtils.normalize(path);
        if (path.startsWith(storePath)){
            // Removing the store path prefix from the specified path
            // allow to deal with the case of parentPath = /home/user1/folder1/ and path = /home/user1/folder1/folder3 
            // which comes back to path = folder3
            path = path.substring(storePath.length());
        }
        final String filePath = FilenameUtils.normalize(FilenameUtils.concat(storePath, path));
        if (!filePath.startsWith(storePath)){
            throw new DataSourceException("Possible attempt to access data outside the coverate store path:\n" 
                    + "Store Path: " + storePath + "\nSpecified File Path: " + filePath);
        }
        imageManager = rasterManager.getDatasetManager(filePath);
        
        //
        // DO WE HAVE A REQUESTED AREA?
        //
        // Check if we have something to load by intersecting the
        // requested envelope with the bounds of this data set.
        //
        if (requestedBBox == null) {

            //
            // In case we have nothing to look at we should get the whole
            // coverage
            //
            requestedBBox = imageManager.coverageBBox;
            cropBBox = imageManager.coverageBBox;
            requestedRasterArea = (Rectangle) imageManager.coverageRasterArea.clone();
            destinationRasterArea = (Rectangle) imageManager.coverageRasterArea.clone();
            requestedResolution = imageManager.coverageFullResolution.clone();
            // TODO harmonize the various types of transformations
            requestedGridToWorld = (AffineTransform) imageManager.coverageGridToWorld2D;
            return;
        }

        //
        // Adjust requested bounding box and source region in order to fall
        // within the source coverage
        //
        computeRequestSpatialElements();
    }

