    /**
     * Return a crop region from a specified envelope, leveraging on the grid to world
     * transformation.
     *
     * @param refinedRequestedBBox the crop envelope
     * @return a {@code Rectangle} representing the crop region.
     * @throws TransformException in case a problem occurs when going back to raster space.
     * @throws DataSourceException
     */
    private void computeCropRasterArea() throws DataSourceException {

        // we have nothing to crop
        if (cropBBox == null) {
            destinationRasterArea = null;
            return;
        }

        //
        // We need to invert the requested gridToWorld and then adjust the
        // requested raster area are accordingly
        //

        // invert the requested grid to world keeping into account the fact that
        // it is related to cell center
        // while the raster is related to cell corner
        MathTransform2D requestedWorldToGrid;
        try {
            requestedWorldToGrid =
                    (MathTransform2D)
                            PixelTranslation.translate(
                                            ProjectiveTransform.create(requestedGridToWorld),
                                            PixelInCell.CELL_CENTER,
                                            PixelInCell.CELL_CORNER)
                                    .inverse();
        } catch (NoninvertibleTransformException e) {
            throw new DataSourceException(e);
        }

        // now get the requested bbox which have been already adjusted and
        // project it back to raster space
        try {
            destinationRasterArea =
                    new GeneralGridEnvelope(
                                    CRS.transform(
                                            requestedWorldToGrid, new GeneralEnvelope(cropBBox)),
                                    PixelInCell.CELL_CORNER,
                                    false)
                            .toRectangle();
        } catch (IllegalStateException e) {
            throw new DataSourceException(e);
        } catch (TransformException e) {
            throw new DataSourceException(e);
        }
        // is it empty??
        if (destinationRasterArea.isEmpty()) {
            if (LOGGER.isLoggable(Level.FINE))
                LOGGER.log(
                        Level.FINE,
                        "Requested envelope too small resulting in empty cropped raster region");
            // TODO: Future versions may define a 1x1 rectangle starting
            // from the lower coordinate
            empty = true;
            return;
        }
    }

