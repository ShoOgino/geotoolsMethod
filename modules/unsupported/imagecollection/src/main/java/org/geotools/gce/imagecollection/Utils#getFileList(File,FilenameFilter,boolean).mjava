    /**
     * Recursively get a fileList from the specified startingDir, using the provided {@link FilenameFilter},
     * optionally stop at the first occurrence if the {@code stopAtFirst} flag is {@code true}.
     * @param startingDir
     * @param filter
     * @param stopAtFirst
     * @return
     * @throws FileNotFoundException
     */
    static List<File> getFileList(final File startingDir, final FilenameFilter fileFilter, final boolean stopAtFirst)
            throws FileNotFoundException {
        List<File> result = new ArrayList<File>();
        File[] filesAndDirs = startingDir.listFiles(fileFilter);
        List<File> filesDirs = Arrays.asList(filesAndDirs);
        for (File file : filesDirs) {
            if (!file.isFile()) {
                // must be a directory
                // recursive call!
                List<File> deeperList = getFileList(file, fileFilter, stopAtFirst);
                result.addAll(deeperList);
                if (stopAtFirst && !result.isEmpty()) {
                    return result;
                }
            } else {
                result.add(file); 
                if (stopAtFirst) {
                    return result;
                }
            }
        }
        return result;
    }

