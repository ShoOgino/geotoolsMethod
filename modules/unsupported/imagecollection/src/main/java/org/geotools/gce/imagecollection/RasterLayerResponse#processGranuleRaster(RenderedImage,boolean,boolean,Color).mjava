    private RenderedImage processGranuleRaster(RenderedImage granule, final boolean alphaIn,
            final boolean doTransparentColor, final Color transparentColor) {

        //
        // INDEX COLOR MODEL EXPANSION
        //
        // Take into account the need for an expansions of the original color
        // model.
        //
        // If the original color model is an index color model an expansion
        // might be requested in case the different palettes are not all the
        // same. In this case the mosaic operator from JAI would provide wrong
        // results since it would take the first palette and use that one for
        // all the other images.
        //
        // There is a special case to take into account here. In case the input
        // images use an IndexColorModel it might happen that the transparent
        // color is present in some of them while it is not present in some
        // others. This case is the case where for sure a color expansion is
        // needed. However we have to take into account that during the masking
        // phase the images where the requested transparent color was present
        // will have 4 bands, the other 3. If we want the mosaic to work we
        // have to add an extra band to the latter type of images for providing
        // alpha information to them.
        //
        //
        if (rasterManager.expandMe && granule.getColorModel() instanceof IndexColorModel) {
            granule = new ImageWorker(granule).forceComponentColorModel()
                    .getRenderedImage();
        }

        //
        // TRANSPARENT COLOR MANAGEMENT
        //
        //
        if (doTransparentColor) {
            if (LOGGER.isLoggable(Level.FINE))
                LOGGER.fine("Support for alpha on input image");
            granule = ImageUtilities.maskColor(transparentColor, granule);
        }
        return granule;

    }

