  @Test
  public void testFeatures() throws Exception {

    this.clientMock = PowerMockito.mock(HttpClient.class);
    PowerMockito.whenNew(HttpClient.class).withNoArguments()
        .thenReturn(clientMock).thenReturn(clientMock);
    this.getMock = PowerMockito.mock(GetMethod.class);
    PowerMockito.whenNew(GetMethod.class).withNoArguments().thenReturn(getMock)
        .thenReturn(getMock);
    when(clientMock.executeMethod(getMock)).thenReturn(HttpStatus.SC_OK)
        .thenReturn(HttpStatus.SC_OK).thenReturn(HttpStatus.SC_OK);
    when(getMock.getResponseBodyAsStream())
        .thenReturn(
            EpaVicDataStoreFactoryTest.readJSONAsStream("test-data/sites.json"))
        .thenReturn(EpaVicDataStoreFactoryTest
            .readJSONAsStream("test-data/monitors.json"))
        .thenReturn(EpaVicDataStoreFactoryTest
            .readJSONAsStream("test-data/9measurements.json"))
        .thenReturn(EpaVicDataStoreFactoryTest
            .readJSONAsStream("test-data/9measurements.json"));

    this.dataStore = (EpaVicDatastore) EpaVicDataStoreFactoryTest
        .createDefaultOpenDataTestDataStore();
    this.dataStore.createTypeNames();

    FeatureSource<SimpleFeatureType, SimpleFeature> src = this.dataStore
        .createFeatureSource(this.dataStore.getEntry(
            new NameImpl(EpaVicDataStoreFactoryTest.NAMESPACE, TYPENAME1)));
    src.getSchema();

    // Test feature iteration
    FeatureCollection<SimpleFeatureType, SimpleFeature> fc = src.getFeatures(q);
    FeatureIterator iter = fc.features();

    assertEquals(CRS.decode("EPSG:4283"),
        fc.getSchema().getCoordinateReferenceSystem());
    assertTrue(iter.hasNext());
    SimpleFeature sf = (SimpleFeature) iter.next();
    Point p = (Point) sf.getDefaultGeometry();
    assertEquals(145.0306, p.getX(), 0.001);
    assertEquals(-37.77832, p.getY(), 0.001);
    assertEquals(true, iter.hasNext());

    while (iter.hasNext()) {
      iter.next();
    }
  }

