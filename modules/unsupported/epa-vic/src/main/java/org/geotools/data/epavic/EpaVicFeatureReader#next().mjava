  /**
   * @throws IOException
   * @see FeatureReader#next()
   */
  @Override
  public SimpleFeature next() throws NoSuchElementException, IOException {
    if (jParser.hasCurrentToken()
        && jParser.getCurrentToken() != JsonToken.END_ARRAY
        && jParser.getCurrentToken() != JsonToken.END_OBJECT) {
      Measurement val = jParser.readValueAs(Measurement.class);

      Site site = sites.get(val.getSiteId());

      if (site == null) {
        throw new IllegalStateException(
            "Site " + val.getSiteId() + " is unavailable");
      }

      Monitor monitor = monitors.get(val.getMonitorId());

      if (monitor == null) {
        throw new IllegalStateException(
            "Monitor " + val.getMonitorId() + " is unavailable");
      }

      SimpleFeatureBuilder b = new SimpleFeatureBuilder(getFeatureType());

      b.set(Measurement.VALUE, val.getValue());
      b.set(Measurement.TIME_BASE_ID, val.getTimeBaseId());
      b.set(Site.SITE_ID, val.getSiteId());
      b.set(Measurement.QUALITY_STATUS, val.getQualityStatus());
      b.set(Measurement.MONITOR_TIME_BASIS, val.getMonitorTimeBasis());
      b.set(Measurement.MONITOR_SHORT_NAME, val.getMonitorShortName());
      b.set(Measurement.MONITOR_NAME, val.getMonitorName());
      b.set(Measurement.MONITOR_ID, val.getMonitorId());
      b.set(Site.LONG, val.getLongitude());
      b.set(Site.LAT, val.getLatitude());
      b.set(Measurement.IS_STATION_OFFLINE, val.getIsStationOffline());
      b.set(Measurement.DATE_TIME_START, val.getValue());
      b.set(Measurement.DATE_TIME_RECORDED, val.getValue());
      b.set(Measurement.AQI_INDEX, val.getValue());
      b.set(Measurement.EQUIPMENT_TYPE, val.getEquipmentType() == null ? null
          : val.getEquipmentType().getDescription());
      b.set(AQICategoryThreshold.AQI_BACKGROUND_COLOUR,
          val.getaQICategoryThreshold().getaQIBackgroundColour());
      b.set(AQICategoryThreshold.AQI_CATEGORY_ABBREVIATION,
          val.getaQICategoryThreshold().getaQICategoryAbbreviation());
      b.set(AQICategoryThreshold.AQI_CATEGORY_DESCRIPTION,
          val.getaQICategoryThreshold().getaQICategoryDescription());
      b.set(AQICategoryThreshold.AQI_FOREGROUND_COLOUR,
          val.getaQICategoryThreshold().getaQIForegroundColour());
      b.set(HealthCategoryThreshold.HEALTH_CATEGORY_BACKGROUND_COLOUR,
          val.getHealthCategoryThreshold().getHealthCategoryBackgroundColour());
      b.set(HealthCategoryThreshold.HEALTH_CATEGORY_DESCRIPTION,
          val.getHealthCategoryThreshold().getHealthCategoryDescription());
      b.set(HealthCategoryThreshold.HEALTH_CATEGORY_FOREGROUND_COLOUR,
          val.getHealthCategoryThreshold().getHealthCategoryForegroundColour());
      b.set(HealthCategoryThreshold.HEALTH_CATEGORY_LEVEL,
          val.getHealthCategoryThreshold().getHealthCategoryLevel());
      b.set(HealthCategoryThreshold.HEALTH_CATEGORY_MESSAGE,
          val.getHealthCategoryThreshold().getHealthCategoryMessage());
      b.set(HealthCategoryThreshold.HEALTH_CATEGORY_VALUE_RANGE_TEXT,
          val.getHealthCategoryThreshold().getHealthCategoryValueRangeText());
      b.set(HealthCategoryThreshold.HEALTH_CATEGORY_VISIBILITY_TEXT,
          val.getHealthCategoryThreshold().getHealthCategoryVisibilityText());

      b.set(Measurement.SITE_LIST_NAME, site.getSiteList().getName());
      b.set(Site.FIRE_HAZARD_CATEGORY, site.getFireHazardCategory());

      b.set(Measurement.MONITOR_COMMON_NAME, monitor.getCommonName());
      b.set(Measurement.MONITOR_EPA_URL, monitor.getEPADescriptionURL());
      b.set(Measurement.MONITOR_PRESENTATION_PRECISION,
          monitor.getPresentationPrecision());
      b.set(Measurement.MONITOR_UNIT_OF_MEASURE, monitor.getUnitOfMeasure());

      GeometryBuilder builder = new GeometryBuilder();
      Point point = builder.point(val.getLongitude(), val.getLatitude());
      b.set(EpaVicDatastore.GEOMETRY_ATTR, point);

      return b.buildFeature(UUID.randomUUID().toString());
    }
    throw new NoSuchElementException();
  }

