  /**
   * Helper method returning a JSON String out of a resource belongining to a
   * ArcGIS ReST API instance (via a GET). If present, it sends authorixzation.
   * 
   * @param params
   *          Request parameters
   * @param url
   *          web service URL
   * @return A stream representing the JSON, null
   * @throws IOException
   */
  public InputStream retrieveJSON(Map<String, Object> params, String url)
      throws IOException {

    HttpClient client = new HttpClient();

    // Sets the URI, request parameters and request body (depending on method
    // type)
    GetMethod method = new GetMethod();
    URI uri = new URI(url, false);

    if (params != null && !params.isEmpty()) {
      NameValuePair[] kvps = new NameValuePair[params.size()];
      int i = 0;
      for (Entry<String, Object> entry : params.entrySet()) {
        kvps[i++] = new NameValuePair(entry.getKey(),
            entry.getValue().toString());
      }
      method.setQueryString(kvps);
      uri.setQuery(method.getQueryString());
    }

    this.LOGGER.log(Level.FINER,
        "About to query GET " + url.toString() + "?" + method.getQueryString());
    method.setURI(uri);

    // Re-tries the request if necessary
    while (true) {

      int status = client.executeMethod(method);

      // If HTTP error, throws an exception
      if (status != HttpStatus.SC_OK) {
        throw new IOException("HTTP Status: " + status + " for URL: " + uri
            + " response: " + method.getResponseBodyAsString());
      }

      // Retrieve the wait period is returned by the server
      int wait = 0;
      Header header = method.getResponseHeader("Retry-After");
      if (header != null) {
        wait = Integer.valueOf(header.getValue());
      }

      // Exists if no retry is necessary
      if (wait == 0) {
        break;
      }

      try {
        Thread.sleep(wait * 1000);
      } catch (InterruptedException e) {
        LOGGER.log(Level.SEVERE, "InterruptedException: " + e.getMessage());
        throw new IOException(e);
      }
    }

    // Extracts an returns the response
    return method.getResponseBodyAsStream();
  }

