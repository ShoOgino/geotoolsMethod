    /**
     * Displays the given image in an {@linkplain ImageFrame} and counts down the returned latch
     * when the frame is closed. This allows test methods to display an image and then wait until
     * the user dismisses the frame.
     *
     * <pre><code>
     * // In test method
     * RenderedImage img = ...
     * CountDownLatch latch = TestImageFrame.showImage(img, "Look at this image");
     *
     * // Wait for the user to close the frame
     * latch.await();
     * </code></pre>
     *
     * This method can be safely called from any thread.
     *
     * @param image image to display
     * @param title frame title (may be {@code null}
     * @return the latch which will be set to zero when the frame is closed
     * @throws InterruptedException if the thread is interrupted while the image frame is being
     *     created and shown
     * @throws InvocationTargetException on internal error
     */
    public static CountDownLatch showImage(final RenderedImage image, final String title)
            throws InterruptedException, InvocationTargetException {

        if (image == null) {
            throw new IllegalArgumentException("image must not be null");
        }

        final String frameTitle;
        if (title == null || title.trim().length() == 0) {
            frameTitle = "Image";
        } else {
            frameTitle = title;
        }

        final CountDownLatch latch = new CountDownLatch(1);

        if (SwingUtilities.isEventDispatchThread()) {
            doShowImage(image, frameTitle, latch);
        } else {
            SwingUtilities.invokeAndWait(
                    new Runnable() {
                        @Override
                        public void run() {
                            doShowImage(image, frameTitle, latch);
                        }
                    });
        }

        return latch;
    }

