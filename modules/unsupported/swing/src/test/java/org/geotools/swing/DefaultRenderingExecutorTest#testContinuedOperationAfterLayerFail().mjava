    /**
     * GEOT-5563
     *
     * <p>Tests that the renderer continue to work on subsequent submits after a single submit has
     * failed due to a layer failure.
     */
    @Test
    public void testContinuedOperationAfterLayerFail() {
        createSubmitObjects();
        // Test requires that a map is _actually_ drawn, so cannot use the MockRenderer - replace it
        // here
        class FailableMockRenderer extends MockRenderer {
            boolean mockFail;

            public FailableMockRenderer(MapContent map) {
                super(map);
            }

            public void setFail(boolean fail) {
                this.mockFail = fail;
            }
            // Just fill the graphics with red ... our test will be looking for this
            @Override
            protected void pretendToPaint() {
                graphics.setColor(Color.red);
                graphics.fill(PANE);
                // Do the locking/waiting bit
                super.pretendToPaint();
                // And now fail if we're told to.  Note that this fail is _after_ the render
                // which simulate the actual behaviour if the map has multiple layers, only
                // one of which fails.
                if (mockFail) {
                    listeners.forEach(
                            listener ->
                                    listener.errorOccurred(
                                            new RuntimeException(
                                                    "Simulated layer rendering failure")));
                }
            }
        };

        FailableMockRenderer failableRenderer = new FailableMockRenderer(mapContent);
        this.renderer = failableRenderer;
        renderer.setPaintTime(10);

        // Execute with no problems
        clearGraphics();
        listener.setExpected(WaitingRenderingExecutorListener.Type.STARTED);
        listener.setExpected(WaitingRenderingExecutorListener.Type.COMPLETED);
        executor.submit(mapContent, renderer, graphics, listener);
        int timeoutMillis = 5000;
        listener.await(WaitingRenderingExecutorListener.Type.STARTED, timeoutMillis);
        listener.await(WaitingRenderingExecutorListener.Type.COMPLETED, timeoutMillis);
        assertTrue(listener.eventReceived(WaitingRenderingExecutorListener.Type.STARTED));
        assertTrue(listener.eventReceived(WaitingRenderingExecutorListener.Type.COMPLETED));
        checkGraphicsWasPainted();

        // Now deliberately fail the render
        clearGraphics();
        listener.setExpected(WaitingRenderingExecutorListener.Type.STARTED);
        listener.setExpected(WaitingRenderingExecutorListener.Type.FAILED);
        failableRenderer.setFail(true);
        executor.submit(mapContent, renderer, graphics, listener);
        listener.await(WaitingRenderingExecutorListener.Type.STARTED, timeoutMillis);
        listener.await(WaitingRenderingExecutorListener.Type.FAILED, timeoutMillis);
        assertTrue(listener.eventReceived(WaitingRenderingExecutorListener.Type.STARTED));
        assertTrue(listener.eventReceived(WaitingRenderingExecutorListener.Type.FAILED));
        // Actual failed submission still paints as expected
        checkGraphicsWasPainted();

        // Now remove the failure and submit again
        clearGraphics();
        listener.setExpected(WaitingRenderingExecutorListener.Type.STARTED);
        listener.setExpected(WaitingRenderingExecutorListener.Type.COMPLETED);
        failableRenderer.setFail(false);
        executor.submit(mapContent, renderer, graphics, listener);
        listener.await(WaitingRenderingExecutorListener.Type.STARTED, timeoutMillis);
        listener.await(WaitingRenderingExecutorListener.Type.COMPLETED, timeoutMillis);
        assertTrue(listener.eventReceived(WaitingRenderingExecutorListener.Type.STARTED));
        assertTrue(listener.eventReceived(WaitingRenderingExecutorListener.Type.COMPLETED));
        checkGraphicsWasPainted(); // Prior to fix, nothing is drawn
    }

