    /**
     * Searches for properties files in the specified resource directory and returns information
     * about each file and the {@code Locales} that it supports.
     *
     * @param resourceDir
     * @return
     * @throws IOException
     */
    public List<PropertiesFileInfo> scan(String resourceDir) throws IOException {
        List<SingleFileInfo> infoList = new ArrayList<SingleFileInfo>();

        String path = getSelfPath();
        if (isJarPath(path)) {
            try (JarInputStream jarFile = getAsJarInputStream(path)) {
                JarEntry entry;
                while ((entry = jarFile.getNextJarEntry()) != null) {
                    String name = entry.getName();
                    if (name.startsWith(resourceDir) && name.endsWith("properties")) {
                        infoList.add(parseEntry(resourceDir.length(), name));
                    }
                }
            }

        } else if (isBundle(path)) {
            // try to load the eclipse classes which enable to solve bundle:/ urls
            // we use reflection in order to avoid adding a dependency between geotools to eclipse
            Class<?> classFileLocator = null;
            Method toFileURLMethod = null;
            try {
                classFileLocator = Class.forName("org.eclipse.core.runtime.FileLocator");
                toFileURLMethod = classFileLocator.getMethod("toFileURL", URL.class);
            } catch (LinkageError | ClassNotFoundException ex) {
                ex.printStackTrace();
                throw new IllegalArgumentException(
                        "trying to load a bundle resource "
                                + resourceDir
                                + " whilst the org.eclipse.core.runtime.FileLocator is not available",
                        ex);
            } catch (NoSuchMethodException | SecurityException ex) {
                ex.printStackTrace();
                throw new IllegalArgumentException(
                        "did not found method toFileUTL in class the org.eclipse.core.runtime.FileLocator",
                        ex);
            }
            // convert to a directory we can list
            URL url = new URL(path);
            URL urlFile;
            File mydirectory;
            try {
                urlFile = (URL) toFileURLMethod.invoke(null, url);
                // try to load
                if (urlFile == null)
                    throw new RuntimeException(
                            "error while converting the url " + url + " to a file");
                mydirectory = new File(urlFile.getFile());
            } catch (IllegalAccessException
                    | IllegalArgumentException
                    | InvocationTargetException e) {
                e.printStackTrace();
                throw new RuntimeException(
                        "error while converting the url " + url + " to a file", e);
            }

            // list files
            if (mydirectory != null) {
                File[] children = mydirectory.listFiles();
                if (children != null) {
                    for (File child : children) {
                        if (child == null) continue;
                        String name = child.getName();
                        if (name.endsWith(".properties")) {
                            infoList.add(parseEntry(0, name));
                        }
                    }
                }
            }
        } else { // must be running locally
            File localDir = getAsLocalDir(path);
            File[] children = localDir.listFiles();
            if (children != null) {
                for (File child : children) {
                    if (child != null && child.isFile()) {
                        String name = child.getName();
                        if (name.endsWith(".properties")) {
                            infoList.add(parseEntry(0, name));
                        }
                    }
                }
            }
        }

        return createReturnList(infoList);
    }

