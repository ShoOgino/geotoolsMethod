    /**
     * Respond to a mouse click by querying each of the {@code Layers}. The
     * details of features lying within the threshold distance of the mouse
     * position are reported on screen using a {@code JTextReporter} dialog.
     * <p>
     * <b>Implementation note:</b> An instance of {@code InfoToolHelper} is created
     * and cached for each of the {@code Layers}. The helpers are created using
     * reflection to avoid direct references to grid coverage classes here that would
     * required JAI (Java Advanced Imaging) to be on the classpath even when only
     * vector layers are being used.
     *
     * @param ev mouse event
     *
     * @see JTextReporter
     * @see InfoToolHelper
     */
    @Override
    public void onMouseClicked(MapMouseEvent ev) {
        DirectPosition2D pos = ev.getWorldPos();
        createReporter();
        report(pos);

        MapContent content = getMapPane().getMapContent();
        final int nlayers = content.layers().size();
        int n = 0;
        for (Layer layer : content.layers()) {
            if (layer.isSelected()) {
                InfoToolHelper helper = null;

                String layerName = layer.getTitle();
                if (layerName == null || layerName.length() == 0) {
                    layerName = layer.getFeatureSource().getName().getLocalPart();
                }
                if (layerName == null || layerName.length() == 0) {
                    layerName = layer.getFeatureSource().getSchema().getName().getLocalPart();
                }

                helper = helperTable.get(layer);
                if (helper == null) {
                    helper = InfoToolHelperLookup.getHelper(layer);

                    if (helper == null) {
                        LOGGER.log(Level.WARNING,
                                "InfoTool cannot query {0}", layer.getClass().getName());
                        return;
                    }

                    helper.setMapContent(content);
                    helper.setLayer(layer);
                }

                try {
                    InfoToolResult result = helper.getInfo(pos);
                    textReporterConnection.append(layerName + "\n");
                    textReporterConnection.append(result.toString(), 4);
                    
                    if (++n < nlayers) {
                        textReporterConnection.append("\n");
                    }
                    
                } catch (Exception ex) {
                    LOGGER.log(Level.WARNING, "Unable to query layer {0}", layerName);
                }
            }
        }
        
        textReporterConnection.appendSeparatorLine(10, '-');
        textReporterConnection.appendNewline();
    }

