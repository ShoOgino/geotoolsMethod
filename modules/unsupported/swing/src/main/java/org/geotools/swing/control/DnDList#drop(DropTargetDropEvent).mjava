    /**
     * Handles the moving (for drag and drop actions within this list) or transfer
     * (for actions between lists) of list items.
     * Description copied from interface:<br>
     * Called when the drag operation has terminated with a drop on the operable part
     * of the drop site for the DropTarget  registered with this listener.
     * <p>
     * This method is responsible for undertaking the transfer of the data associated
     * with the gesture. The DropTargetDropEvent provides a means to obtain a Transferable
     * object that represents the data object(s) to be transfered.
     * <p>
     * From this method, the DropTargetListener shall accept or reject the drop via
     * the acceptDrop(int dropAction) or rejectDrop() methods of the DropTargetDropEvent
     * parameter.
     * <p>
     * Subsequent to acceptDrop(), but not before, DropTargetDropEvent's getTransferable()
     * method may be invoked, and data transfer may be performed via the returned
     * Transferable's getTransferData() method.
     * <p>
     * At the completion of a drop, an implementation of this method is required to
     * signal the success/failure of the drop by passing an appropriate boolean to the
     * DropTargetDropEvent's dropComplete(boolean success) method.
     * <p>
     * Note: The data transfer should be completed before the call to the
     * DropTargetDropEvent's dropComplete(boolean success) method. After that, a call
     * to the getTransferData() method of the Transferable returned by
     * DropTargetDropEvent.getTransferable() is guaranteed to succeed only if the data
     * transfer is local; that is, only if DropTargetDropEvent.isLocalTransfer()
     * returns true. Otherwise, the behavior of the call is implementation-dependent.
     */
    @Override
    public void drop(DropTargetDropEvent dtde) {
        //Transferable stuff = dtde.getTransferable();
        
        /*
         * @todo check DataFlavor of stuff
         */
        dtde.acceptDrop(DnDConstants.ACTION_MOVE);

        if (movingItems) {
            /*
             * This is a local drag and drop to reorder items
             */
            DnDListModel<T> model = getModel();
            model.moveItems(overIndex, dragIndices);

        } else {

            // @todo stuff dragged from other list

        }

        overIndex = -1;
        movingItems = false;
        dtde.getDropTargetContext().dropComplete(true);
    }

