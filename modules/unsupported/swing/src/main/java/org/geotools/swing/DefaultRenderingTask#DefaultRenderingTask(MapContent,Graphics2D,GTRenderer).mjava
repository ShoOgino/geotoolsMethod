    /**
     * Creates a new rendering task to paint the layers contained within
     * {@code mapContent} into a single graphics destination using the
     * given renderer.
     * <p>
     * If {@code mapContent} has not already been linked to {@code renderer}
     * via a call to {@linkplain GTRenderer#setMapContent(MapContent)}, it will
     * be set here. If the renderer has a different, non-null {@code MapContent}
     * set, it will be replaced and a warning message logged.
     * 
     * @param mapContent map content containing the layers to be rendered
     * @param graphics the common graphics destination for the rendered layers
     * @param renderer the renderer used to paint the layers
     * 
     * @throws IllegalArgumentException if any argument is {@code null}
     *     
     */
    public DefaultRenderingTask(MapContent mapContent, 
            Graphics2D destinationGraphics,
            GTRenderer renderer) {
        
        if (mapContent == null) {
            throw new IllegalArgumentException("mapContent must not be null");
        }
        if (destinationGraphics == null) {
            throw new IllegalArgumentException("graphics must not be null");
        }
        if (renderer == null) {
            throw new IllegalArgumentException("renderer must not be null");
        }
        
        if (renderer.getMapContent() != mapContent) {
            if (!(renderer.getMapContent() == null)) {
                LOGGER.warning(
                        "Forcing map content for renderer passed to DefaultRenderingTask");
            }
            renderer.setMapContent(mapContent);
        }
        
        this.destinationGraphics = destinationGraphics;
        this.deviceArea = mapContent.getViewport().getScreenArea();
        this.worldArea = mapContent.getViewport().getBounds();
        this.worldToScreenTransform = mapContent.getViewport().getWorldToScreen();
        this.renderer = renderer;
        
        running = new AtomicBoolean(false);
        failed = new AtomicBoolean(false);
        cancelled = new AtomicBoolean(false);
    }

