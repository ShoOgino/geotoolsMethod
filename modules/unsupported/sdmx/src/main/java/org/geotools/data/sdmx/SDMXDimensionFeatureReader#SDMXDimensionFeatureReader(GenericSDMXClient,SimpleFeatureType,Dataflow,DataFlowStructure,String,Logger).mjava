    public SDMXDimensionFeatureReader(
            GenericSDMXClient clientIn,
            SimpleFeatureType featureTypeIn,
            Dataflow dataflowIn,
            DataFlowStructure dfStructureIn,
            String expression,
            Logger logger)
            throws IOException, SdmxException {

        super(clientIn, featureTypeIn, dataflowIn, dfStructureIn, logger);

        try {
            /**
             * TODO https://github.com/amattioc/SDMX/issues/184 if
             * (dfStructureIn.getDimension(expression.toUpperCase()).toString().equalsIgnoreCase(dfStructureIn.getTimeDimension()))
             * { List<PortableTimeSeries<Double>> ts= this.client.getTimeSeries(dataflowIn,
             * dfStructureIn, null, null, null, true,null, false); ts.get(0). }
             */

            // If the list of dimensions has to be returned, returns only those
            if (SDMXDataStore.DIMENSIONS_EXPR_ALL.equals(expression.toUpperCase())) {
                Map<String, String> dimensions = new HashMap<String, String>();
                dfStructureIn
                        .getDimensions()
                        .iterator()
                        .forEachRemaining(
                                dim -> {
                                    dimensions.put(dim.getId(), dim.getName());
                                });

                this.dimIter = dimensions.entrySet().iterator();
                // If all the codes of the given dimension has to be returned, returns the codes
            } else {
                if (dfStructureIn.getDimension(expression.toUpperCase()) == null) {
                    ArrayList dimNames = new ArrayList();
                    dfStructureIn
                            .getDimensions()
                            .forEach(
                                    (dim) -> {
                                        dimNames.add(dim.getId());
                                    });
                    throw (new Exception(
                            String.format(
                                    "Dimension %s is not present in the cube (dimemsions are: %s)",
                                    expression.toUpperCase(), String.join(", ", dimNames))));
                }

                if (dfStructureIn.getDimension(expression.toUpperCase()).getCodeList() == null) {
                    this.dimIter =
                            new Iterator<Entry<String, String>>() {
                                @Override
                                public boolean hasNext() {
                                    return false;
                                }

                                @Override
                                public Entry<String, String> next() {
                                    return null;
                                }
                            };
                } else {
                    this.dimIter =
                            dfStructureIn
                                    .getDimension(expression.toUpperCase())
                                    .getCodeList()
                                    .entrySet()
                                    .iterator();
                }
            }
        } catch (Exception e) {
            logger.log(Level.SEVERE, e.getMessage(), e);
            throw new IOException(e);
        }
    }

