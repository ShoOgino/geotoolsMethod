    @Test
    public void noFeatures() throws Exception {

        this.urlMock = PowerMockito.mock(URL.class);
        this.clientMock = PowerMockito.mock(HttpURLConnection.class);

        PowerMockito.whenNew(URL.class).withAnyArguments().thenReturn(this.urlMock);
        PowerMockito.when(this.urlMock.toURI()).thenReturn(new URI(Helper.URL));
        PowerMockito.when(this.urlMock.openConnection(anyObject())).thenReturn(this.clientMock);
        when(clientMock.getResponseCode())
                .thenReturn(HttpStatus.SC_OK)
                .thenReturn(HttpStatus.SC_OK)
                .thenReturn(HttpStatus.SC_OK)
                .thenReturn(HttpStatus.SC_OK)
                .thenReturn(HttpStatus.SC_OK)
                .thenReturn(HttpStatus.SC_NOT_FOUND);
        when(clientMock.getInputStream())
                .thenReturn(Helper.readXMLAsStream("test-data/abs.xml"))
                .thenReturn(Helper.readXMLAsStream("test-data/abs-census2011-t04-abs.xml"))
                .thenReturn(Helper.readXMLAsStream("test-data/abs-seifa-lga.xml"))
                .thenReturn(Helper.readXMLAsStream("test-data/abs-census2011-t04-abs.xml"))
                .thenReturn(Helper.readXMLAsStream("test-data/abs-seifa-lga.xml"))
                .thenReturn(new ByteArrayInputStream("".getBytes()));

        this.dataStore = (SDMXDataStore) Helper.createSDMXTestDataStore();
        this.dataStore.setNThreads(1);
        this.fType = this.dataStore.getFeatureSource(Helper.T04).getSchema();
        this.dfSource = (SDMXDataflowFeatureSource) this.dataStore.getFeatureSource(Helper.T04);

        this.dfSource.buildFeatureType();
        this.reader = (SDMXFeatureReader) this.dfSource.getReader(Query.ALL);

        assertFalse(this.reader.hasNext());
        assertNull(this.reader.next());
    }

