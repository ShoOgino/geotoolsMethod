    @Test
    public void readFeaturesMeasure2() throws Exception {

        this.urlMock = PowerMockito.mock(URL.class);
        this.clientMock = PowerMockito.mock(HttpURLConnection.class);

        PowerMockito.whenNew(URL.class).withAnyArguments().thenReturn(this.urlMock);
        PowerMockito.when(this.urlMock.toURI()).thenReturn(new URI(Helper.URL));
        PowerMockito.when(this.urlMock.openConnection(anyObject())).thenReturn(this.clientMock);
        when(clientMock.getResponseCode())
                .thenReturn(HttpStatus.SC_OK)
                .thenReturn(HttpStatus.SC_OK)
                .thenReturn(HttpStatus.SC_OK)
                .thenReturn(HttpStatus.SC_OK);
        when(clientMock.getInputStream())
                .thenReturn(Helper.readXMLAsStream("test-data/abs.xml"))
                .thenReturn(Helper.readXMLAsStream("test-data/abs-census2011-t04-abs.xml"))
                .thenReturn(Helper.readXMLAsStream("test-data/abs-seifa-lga.xml"))
                .thenReturn(Helper.readXMLAsStream("test-data/query-t04-2.xml"));

        this.dataStore = (SDMXDataStore) Helper.createSDMXTestDataStore();
        this.dataStore.setNThreads(1);
        this.fType = this.dataStore.getFeatureSource(Helper.T04).getSchema();
        this.dfSource = (SDMXDataflowFeatureSource) this.dataStore.getFeatureSource(Helper.T04);

        this.dfSource.buildFeatureType();
        Query query = new Query();
        query.setFilter(
                ECQL.toFilter(
                        "MEASURE = 2 and MSTP='TOT' and "
                                + "AGE='TOT' and "
                                + "STATE='1' and "
                                + "REGIONTYPE='STE' and "
                                + "REGION in ('1','2','3','4') and "
                                + "FREQUENCY='A'"));
        this.reader = (SDMXFeatureReader) this.dfSource.getReader(query);

        assertTrue(this.reader.hasNext());
        SimpleFeature feat;
        int nObs = 0;
        while (this.reader.hasNext()) {
            feat = this.reader.next();
            assertNotNull(feat);
            if (nObs == 0) {
                assertEquals("2001", feat.getAttribute(1));
            }
            String s =
                    feat.getID()
                            + "|"
                            + feat.getType().getGeometryDescriptor().getLocalName()
                            + ":"
                            + feat.getDefaultGeometry();
            for (int i = 1; i < feat.getAttributeCount(); i++) {
                s +=
                        "|"
                                + feat.getType().getDescriptor(i).getLocalName()
                                + ":"
                                + feat.getAttribute(i);
            }
            System.out.println(s);
            nObs++;
        }

        assertEquals(3, nObs);
    }

