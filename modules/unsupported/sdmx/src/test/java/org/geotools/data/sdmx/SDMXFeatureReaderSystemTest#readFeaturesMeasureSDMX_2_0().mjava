    // NOTE: There is a persisten XML error, although the XML returned by the request seems OK
    /*
        May 29, 2020 9:06:18 AM it.bancaditalia.oss.sdmx.client.RestSdmxClient runQuery
    INFO: Contacting web service with query: http://stat.data.abs.gov.au/restsdmx/sdmx.ashx/GetDataStructure/ABS_CENSUS2011_B40_SA1_SA/ABS
    May 29, 2020 9:06:18 AM it.bancaditalia.oss.sdmx.client.RestSdmxClient runQuery
    SEVERE: Exception caught parsing results from call to provider ABS
    May 29, 2020 9:06:18 AM org.geotools.data.sdmx.SDMXDataStore lambda$null$0
    SEVERE: Error getting SDMX DSD
    it.bancaditalia.oss.sdmx.exceptions.SdmxXmlParsingException: Error detected while parsing SDMX response: ParseError at [row,col]:[29,38]
    Message: The entity "nbsp" was referenced, but not declared.
            at it.bancaditalia.oss.sdmx.exceptions.SdmxExceptionFactory.wrap(SdmxExceptionFactory.java:125)
            at it.bancaditalia.oss.sdmx.client.RestSdmxClient.runQuery(RestSdmxClient.java:411)
            at it.bancad
         */
    @Test
    public void readFeaturesMeasureSDMX_2_0() throws Exception {

        this.dataStore = (SDMXDataStore) Helper.createSDMXTestDataStore();
        this.dataStore.createTypeNames();

        assertEquals(this.dataStore.dataflowStructures.size(), this.dataStore.dataflows.size());

        Query query = new Query();
        this.fType = this.dataStore.getFeatureSource(Helper.ERP_LGA_DIMENSIONS).getSchema();
        this.dimSource =
                (SDMXDimensionFeatureSource)
                        this.dataStore.getFeatureSource(Helper.ERP_LGA_DIMENSIONS);
        this.dimSource.buildFeatureType();
        query.setFilter(ECQL.toFilter("CODE='AGE'"));
        this.reader = (SDMXFeatureReader) this.dimSource.getReader(query);
        assertTrue(this.reader.hasNext());

        query.setFilter(ECQL.toFilter("CODE='LGA_2016'"));
        this.reader = (SDMXFeatureReader) this.dimSource.getReader(query);
        assertTrue(this.reader.hasNext());

        this.fType = this.dataStore.getFeatureSource(Helper.T04_LGA).getSchema();
        this.dfSource = (SDMXDataflowFeatureSource) this.dataStore.getFeatureSource(Helper.T04_LGA);
        this.dfSource.buildFeatureType();
        query.setFilter(
                ECQL.toFilter(
                        "MEASURE = 1 and MSTP='TOT' and "
                                + "AGE='TOT' and "
                                + "STATE='1' and "
                                + "REGIONTYPE='STE' and "
                                + "REGION in ('1','2','3','4') and "
                                + "FREQUENCY='A'"));
        this.reader = (SDMXFeatureReader) this.dfSource.getReader(query);

        assertTrue(this.reader.hasNext());
        SimpleFeature feat;
        int nObs = 0;
        while (this.reader.hasNext()) {
            feat = this.reader.next();
            assertNotNull(feat);

            String s =
                    feat.getID()
                            + "|"
                            + feat.getType().getGeometryDescriptor().getLocalName()
                            + ":"
                            + feat.getDefaultGeometry();
            for (int i = 1; i < feat.getAttributeCount(); i++) {
                s +=
                        "|"
                                + feat.getType().getDescriptor(i).getLocalName()
                                + ":"
                                + feat.getAttribute(i);
            }
            System.out.println(s);

            // Check only the first result row
            if (nObs == 0) {
                assertNotNull(feat.getID());
                assertNull(feat.getDefaultGeometry());
                assertEquals("2001", feat.getAttribute(1));
                assertEquals(2468518.0, feat.getAttribute(2));
                assertEquals("TOT", feat.getAttribute(3));
                assertEquals("TOT", feat.getAttribute(4));
                assertEquals("1", feat.getAttribute(5));
                assertEquals("STE", feat.getAttribute(6));
                assertEquals("1", feat.getAttribute(7));
                assertEquals("A", feat.getAttribute(8));
            }

            nObs++;
        }

        assertEquals(3, nObs);
    }

