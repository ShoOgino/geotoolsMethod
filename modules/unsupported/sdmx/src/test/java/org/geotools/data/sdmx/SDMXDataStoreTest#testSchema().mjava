    @Test
    public void testSchema() throws Exception {
        this.urlMock = PowerMockito.mock(URL.class);
        this.clientMock = PowerMockito.mock(HttpURLConnection.class);

        PowerMockito.whenNew(URL.class).withAnyArguments().thenReturn(this.urlMock);
        PowerMockito.when(this.urlMock.toURI()).thenReturn(new URI(Helper.URL));
        PowerMockito.when(this.urlMock.openConnection(anyObject())).thenReturn(this.clientMock);
        when(clientMock.getResponseCode())
                .thenReturn(HttpStatus.SC_OK)
                .thenReturn(HttpStatus.SC_OK)
                .thenReturn(HttpStatus.SC_OK)
                .thenReturn(HttpStatus.SC_OK)
                .thenReturn(HttpStatus.SC_OK);
        when(clientMock.getInputStream())
                .thenReturn(Helper.readXMLAsStream("test-data/abs.xml"))
                .thenReturn(Helper.readXMLAsStream("test-data/abs-census2011-t04-abs.xml"))
                .thenReturn(Helper.readXMLAsStream("test-data/abs-seifa-lga.xml"))
                .thenReturn(Helper.readXMLAsStream("test-data/abs-census2011-t04-abs.xml"))
                .thenReturn(Helper.readXMLAsStream("test-data/abs-seifa-lga.xml"));

        this.dataStore = (SDMXDataStore) Helper.createSDMXTestDataStore();
        this.dataStore.setNThreads(1);
        assertEquals(4, this.dataStore.createTypeNames().size());

        assertNotNull(this.dataStore.getFeatureSource(Helper.T04).getSchema());
        assertEquals(
                9, this.dataStore.getFeatureSource(Helper.T04).getSchema().getAttributeCount());
        assertNotNull(this.dataStore.getFeatureSource(Helper.SEIFA_LGA).getSchema());
        assertEquals(
                5,
                this.dataStore.getFeatureSource(Helper.SEIFA_LGA).getSchema().getAttributeCount());
    }

