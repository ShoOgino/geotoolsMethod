    @Test
    public void queryExpression() throws Exception {

        this.urlMock = PowerMockito.mock(URL.class);
        this.clientMock = PowerMockito.mock(HttpURLConnection.class);

        PowerMockito.whenNew(URL.class).withAnyArguments().thenReturn(this.urlMock);
        PowerMockito.when(this.urlMock.toURI()).thenReturn(new URI(Helper.URL));
        PowerMockito.when(this.urlMock.openConnection(anyObject())).thenReturn(this.clientMock);
        when(clientMock.getResponseCode())
                .thenReturn(HttpStatus.SC_OK)
                .thenReturn(HttpStatus.SC_OK)
                .thenReturn(HttpStatus.SC_OK)
                .thenReturn(HttpStatus.SC_OK);
        when(clientMock.getInputStream())
                .thenReturn(Helper.readXMLAsStream("test-data/abs.xml"))
                .thenReturn(Helper.readXMLAsStream("test-data/abs-census2011-t04-abs.xml"))
                .thenReturn(Helper.readXMLAsStream("test-data/abs-seifa-lga.xml"))
                .thenReturn(Helper.readXMLAsStream("test-data/query-t04.xml"));

        this.dataStore = (SDMXDataStore) Helper.createSDMXTestDataStore();
        this.dataStore.setNThreads(1);
        this.fType = this.dataStore.getFeatureSource(Helper.T04).getSchema();
        this.dfSource = (SDMXDataflowFeatureSource) this.dataStore.getFeatureSource(Helper.T04);

        assertEquals("......", this.dfSource.buildConstraints(Query.ALL));

        Filter filter =
                ECQL.toFilter(
                        "MEASURE='3' and "
                                + "MSTP='TOT' and "
                                + "AGE='TOT' and "
                                + "STATE='0' and "
                                + "REGIONTYPE='AUS' and "
                                + "REGION='0' and "
                                + "FREQUENCY='A'");
        assertEquals("3.TOT.TOT.0.AUS.0.A", this.dfSource.buildConstraints(new Query("", filter)));

        filter =
                ECQL.toFilter(
                        "MEASURE in ('1', '2', '3') and MSTP='TOT' and "
                                + "AGE='TOT' and "
                                + "STATE='1' and "
                                + "REGIONTYPE='STE' and "
                                + "REGION in ('1','2','3','4') and "
                                + "FREQUENCY='A'");
        assertEquals(
                "1+2+3.TOT.TOT.1.STE.1+2+3+4.A",
                this.dfSource.buildConstraints(new Query("", filter)));

        filter =
                ECQL.toFilter(
                        "MEASURE in ('1', '2', '3') and MSTP='TOT' and "
                                + "AGE='TOT' and "
                                + "STATE='1'");
        assertEquals("1+2+3.TOT.TOT.1...", this.dfSource.buildConstraints(new Query("", filter)));

        filter = ECQL.toFilter("MEASURE='3' and " + "MSTP='TOT' and " + "TIME in ('2001', '2002')");
        assertEquals("2001", this.dfSource.getTimeInterval(new Query("", filter)).get(0));
        assertEquals("2002", this.dfSource.getTimeInterval(new Query("", filter)).get(1));
        filter =
                ECQL.toFilter(
                        "MEASURE='3' and "
                                + "MSTP='TOT' and "
                                + "TIME in ('2003', '2001', '2002')");
        assertEquals("2001", this.dfSource.getTimeInterval(new Query("", filter)).get(0));
        assertEquals("2003", this.dfSource.getTimeInterval(new Query("", filter)).get(1));
        filter = ECQL.toFilter("MEASURE='3' and " + "MSTP='TOT' and " + "TIME in ('2003')");
        assertEquals("2003", this.dfSource.getTimeInterval(new Query("", filter)).get(0));
        assertEquals("2003", this.dfSource.getTimeInterval(new Query("", filter)).get(1));
        filter = ECQL.toFilter("MEASURE='3' and " + "MSTP='TOT'");
        assertEquals(0, this.dfSource.getTimeInterval(new Query("", filter)).size());
    }

