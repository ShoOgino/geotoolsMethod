    @Test(expected = IOException.class)
    public void readFeaturesNotExistingDimension() throws Exception {

        this.urlMock = PowerMockito.mock(URL.class);
        this.clientMock = PowerMockito.mock(HttpURLConnection.class);

        PowerMockito.whenNew(URL.class).withAnyArguments().thenReturn(this.urlMock);
        PowerMockito.when(this.urlMock.toURI()).thenReturn(new URI(Helper.URL));
        PowerMockito.when(this.urlMock.openConnection(anyObject())).thenReturn(this.clientMock);
        when(clientMock.getResponseCode())
                .thenReturn(HttpStatus.SC_OK)
                .thenReturn(HttpStatus.SC_OK)
                .thenReturn(HttpStatus.SC_OK)
                .thenReturn(HttpStatus.SC_OK);
        when(clientMock.getInputStream())
                .thenReturn(Helper.readXMLAsStream("test-data/abs.xml"))
                .thenReturn(Helper.readXMLAsStream("test-data/abs-census2011-t04-abs.xml"))
                .thenReturn(Helper.readXMLAsStream("test-data/abs-seifa-lga.xml"));

        this.dataStore = (SDMXDataStore) Helper.createSDMXTestDataStore();
        this.fType = this.dataStore.getFeatureSource(Helper.T04_DIMENSIONS).getSchema();
        this.dimSource =
                (SDMXDimensionFeatureSource) this.dataStore.getFeatureSource(Helper.T04_DIMENSIONS);

        this.dimSource.buildFeatureType();
        Query query = new Query();
        query.setFilter(ECQL.toFilter("CODE = 'XXX'"));
        this.reader = (SDMXFeatureReader) this.dimSource.getReader(query);
    }

