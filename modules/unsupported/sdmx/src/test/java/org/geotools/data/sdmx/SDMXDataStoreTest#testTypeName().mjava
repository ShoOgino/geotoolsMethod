    @Test
    public void testTypeName() throws Exception {
        this.urlMock = PowerMockito.mock(URL.class);
        this.clientMock = PowerMockito.mock(HttpURLConnection.class);

        PowerMockito.whenNew(URL.class).withAnyArguments().thenReturn(this.urlMock);
        PowerMockito.when(this.urlMock.toURI()).thenReturn(new URI(Helper.URL));
        PowerMockito.when(this.urlMock.openConnection(anyObject())).thenReturn(this.clientMock);
        when(clientMock.getResponseCode())
                .thenReturn(HttpStatus.SC_OK)
                .thenReturn(HttpStatus.SC_OK)
                .thenReturn(HttpStatus.SC_OK);
        when(clientMock.getInputStream())
                .thenReturn(Helper.readXMLAsStream("test-data/abs.xml"))
                .thenReturn(Helper.readXMLAsStream("test-data/abs-census2011-t04-abs.xml"))
                .thenReturn(Helper.readXMLAsStream("test-data/abs-seifa-lga.xml"));

        this.dataStore = (SDMXDataStore) Helper.createSDMXTestDataStore();
        List<Name> names = this.dataStore.createTypeNames();

        assertEquals(4, names.size());
        assertTrue(names.contains(new NameImpl(Helper.NAMESPACE, Helper.T04)));
        assertTrue(names.contains(new NameImpl(Helper.NAMESPACE, Helper.T04_DIMENSIONS)));
        assertNotNull(this.dataStore.getEntry(new NameImpl(Helper.NAMESPACE, Helper.T04)));
        assertTrue(names.contains(new NameImpl(Helper.NAMESPACE, Helper.SEIFA_LGA)));
        assertTrue(names.contains(new NameImpl(Helper.NAMESPACE, Helper.SEIFA_LGA_DIMENSIONS)));
        assertNotNull(this.dataStore.getEntry(new NameImpl(Helper.NAMESPACE, Helper.SEIFA_LGA)));
    }

