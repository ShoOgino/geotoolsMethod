    @Override
    @org.junit.Test
    public void testCreate() {
        String createStmt =
                "CREATE TABLE OEK ( level INT NOT NULL,"
                        + " RESX DOUBLE  ,  RESY DOUBLE,  ULX DOUBLE ,  ULY DOUBLE,"
                        + " Data BLOB,CONSTRAINT OEK_PK PRIMARY KEY(level))";

        try (InputStream worldIn = new URL("file:target/resources/baseimage/map.tfw").openStream();
                BufferedReader reader = new BufferedReader(new InputStreamReader(worldIn))) {

            // read world file

            double xRes = Double.valueOf(reader.readLine());
            reader.readLine();
            reader.readLine();
            double yRes = Double.valueOf(reader.readLine());
            double ulx = Double.valueOf(reader.readLine());
            double uly = Double.valueOf(reader.readLine());

            try (java.sql.Connection con = dialect.getConnection()) {
                con.prepareStatement(createStmt).execute();
                ByteArrayOutputStream baseOut = new ByteArrayOutputStream();
                int in;
                URL baseImageUrl = new URL("file:target/resources/baseimage/map.tif");
                try (InputStream imageIn = baseImageUrl.openStream()) {
                    while ((in = imageIn.read()) != -1) {
                        baseOut.write(in);
                    }
                }

                try (PreparedStatement ps =
                        con.prepareStatement("INSERT INTO oek values(?,?,?,?,?,?)")) {
                    ps.setInt(1, 0);
                    ps.setDouble(2, xRes);
                    ps.setDouble(3, yRes);
                    ps.setDouble(4, ulx);
                    ps.setDouble(5, uly);
                    ps.setBytes(6, baseOut.toByteArray());
                    ps.execute();

                    BufferedImage baseImage = ImageIO.read(baseImageUrl);

                    BufferedImage pyramid1 = getNextPyramid(baseImage);
                    ByteArrayOutputStream p1Out = new ByteArrayOutputStream();
                    ImageIO.write(pyramid1, "TIF", p1Out);

                    ps.setInt(1, 1);
                    ps.setDouble(2, xRes * 2);
                    ps.setDouble(3, yRes * 2);
                    ps.setDouble(4, ulx);
                    ps.setDouble(5, uly);
                    ps.setBytes(6, p1Out.toByteArray());
                    ps.execute();

                    BufferedImage pyramid2 = getNextPyramid(pyramid1);
                    ByteArrayOutputStream p2Out = new ByteArrayOutputStream();
                    ImageIO.write(pyramid2, "TIF", p2Out);

                    ps.setInt(1, 2);
                    ps.setDouble(2, xRes * 4);
                    ps.setDouble(3, yRes * 4);
                    ps.setDouble(4, ulx);
                    ps.setDouble(5, uly);
                    ps.setBytes(6, p2Out.toByteArray());
                    ps.execute();
                }
                con.commit();
            }

        } catch (Exception e) {
            java.util.logging.Logger.getGlobal().log(java.util.logging.Level.INFO, "", e);
            Assert.fail(e.getMessage());
        }
    }

