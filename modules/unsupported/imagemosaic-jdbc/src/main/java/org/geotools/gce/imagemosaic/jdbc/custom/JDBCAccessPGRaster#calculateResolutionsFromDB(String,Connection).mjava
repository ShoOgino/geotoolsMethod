    /**
     * Step 3 of the bootstrapping process.
     *
     * <p>Calculating the the resolution for each image level (original + pyramids). This
     * calculation is only done if the resoltion info in the master table is SQL NULL. After
     * calculation the meta table is updated with the result to avoid this operation in the future.
     *
     * @param coverageName The coverage name in the sql meta table
     * @param con JDBC Connection
     */
    void calculateResolutionsFromDB(String coverageName, Connection con)
            throws SQLException, IOException {

        // isOutDBMap = new HashMap<ImageLevelInfo, Boolean>();
        try (PreparedStatement stmt =
                con.prepareStatement(getConfig().getSqlUpdateResStatement())) {

            List<ImageLevelInfo> toBeRemoved = new ArrayList<>();

            for (ImageLevelInfo li : getLevelInfos()) {
                if (li.getCoverageName().equals(coverageName) == false) {
                    continue;
                }

                if (li.calculateResolutionNeeded() == false) {
                    continue;
                }
                Date start = new Date();
                if (LOGGER.isLoggable(Level.INFO))
                    LOGGER.info("Calculate resolutions for " + li.toString());

                String select =
                        "select "
                                + "st_scalex("
                                + getConfig().getBlobAttributeNameInTileTable()
                                + "),"
                                + "st_scaley("
                                + getConfig().getBlobAttributeNameInTileTable()
                                + "),"
                                + "st_srid("
                                + getConfig().getBlobAttributeNameInTileTable()
                                + ") "
                                + " from "
                                + li.getTileTableName()
                                + " LIMIT 1";

                double[] resolutions = null;
                try (PreparedStatement ps = con.prepareStatement(select);
                        ResultSet rs = ps.executeQuery()) {
                    if (rs.next()) {
                        resolutions = new double[] {rs.getDouble(1), rs.getDouble(2)};
                        li.setSrsId(rs.getInt(3));
                    }
                }

                if (resolutions == null) {
                    if (LOGGER.isLoggable(Level.WARNING))
                        LOGGER.log(Level.WARNING, "No image found, removing " + li.toString());
                    toBeRemoved.add(li);
                    continue;
                }

                if (resolutions[0] < 0) resolutions[0] *= -1;
                if (resolutions[1] < 0) resolutions[1] *= -1;
                li.setResX(resolutions[0]);
                li.setResY(resolutions[1]);
                if (LOGGER.isLoggable(Level.INFO))
                    LOGGER.info("ResX: " + li.getResX() + " ResY: " + li.getResY());

                /*
                moved code from here into method 'populateStatementsMap' below
                which is called at initialisation. Otherwise this code was skipped in line #496
                */
                stmt.setDouble(1, li.getResX().doubleValue());
                stmt.setDouble(2, li.getResY().doubleValue());
                stmt.setString(3, li.getCoverageName());
                stmt.setString(4, li.getTileTableName());
                stmt.execute();

                long msecs = (new Date()).getTime() - start.getTime();

                if (LOGGER.isLoggable(Level.INFO))
                    LOGGER.info(
                            "Calculate resolutions for "
                                    + li.toString()
                                    + " finished in "
                                    + msecs
                                    + " ms ");
            }

            getLevelInfos().removeAll(toBeRemoved);
        }
    }

