    /**
     * Populate the DB with rasters produced in advance by the user with gdal_retile
     *
     * @param filesToBeDeleted a List which will contains files to be deleted
     */
    private void importTilesIntoDB(final Connection connection, final List<File> filesToBeDeleted)
            throws SQLException, IOException {
        final File configDirectory = URLs.urlToFile(configDir);

        // Preliminary check on configuration directory validity
        if (!configDirectory.exists()) {
            throw new IllegalArgumentException("Specified URL doesn't exist: " + configDir);
        }

        if (!configDirectory.isDirectory()) {
            throw new IllegalArgumentException(
                    "Specified URL doesn't refer to a directory: " + configDir);
        }

        // Preparing main configuration parameters
        final String tablePrefix = configBean.getTileTablePrefix();
        final String importOptions = configBean.getImportOptions();
        final String fileExtension = configBean.getFileExtension();
        final String schema = configBean.getSchema();

        // Database properties
        final Properties datastoreProperties = configBean.getDatastoreProperties();
        final String database = (String) datastoreProperties.get(DATABASE_KEY.substring(1));
        final String pguser = (String) datastoreProperties.get(PGUSER_KEY.substring(1));
        final String password = (String) datastoreProperties.get(PASSWORD_KEY.substring(1));
        final String port = (String) datastoreProperties.get(PORT_KEY.substring(1));
        final String host = (String) datastoreProperties.get(HOST_KEY.substring(1));

        final List<String> tileTables = new ArrayList<String>();

        // scan tiles folder created by gdal_retile
        // Note that GDAL put tiles for level 0 straight on the folder.
        // additional levels are stored on folder 1, 2, 3 and so on

        final File dataDir = URLs.urlToFile(configDir);

        // Preparing a single script containing all the raster2pgsql commands to be invoked
        String script =
                createScript(
                        dataDir,
                        database,
                        schema,
                        host,
                        port,
                        pguser,
                        tablePrefix,
                        fileExtension,
                        tileTables,
                        importOptions,
                        filesToBeDeleted);

        if (LOGGER.isLoggable(Level.FINE)) {
            LOGGER.fine("Executing the script");
        }
        executeScript(dataDir, script, password, filesToBeDeleted);

        // Step 2: create mosaic table for metadata and insert tile tables into metadata table
        final String tableName = configBean.getTableName();
        final String coverageName = configBean.getCoverageName();

        // TODO: We should check previous table exists before creating metadata table
        createMetadataTable(connection, tableName, coverageName, tileTables);
    }

