    @BeforeClass
    public static void setup() throws FileNotFoundException, IOException {
        // Selection of the File to use
        File tiff = TestData.file(ScaleProcessTest.class, "sample.tif");
        // Reading of the file with the GeoTiff reader
        AbstractGridFormat format = GridFormatFinder.findFormat(tiff);
        // Get a reader for the selected format
        GridCoverageReader reader = format.getReader(tiff);
        // Read the input Coverage
        coverage = (GridCoverage2D) reader.read(null);
        // Coverage properties
        Map properties = coverage.getProperties();
        if(properties == null){
            properties = new HashMap<>();
        }
        GridCoverageFactory gcf = new GridCoverageFactory(GeoTools.getDefaultHints());
        
        // Same coverage with NoData Property
        Map properties1 = new HashMap(properties);
        CoverageUtilities.setNoDataProperty(properties1, RangeFactory.create((short)-1, (short)1));
        coverageNoData = gcf.create("nodata", coverage.getRenderedImage(), coverage.getEnvelope(), coverage.getSampleDimensions(), null, properties1);
        // Same Coverage with ROI Property
        Map properties2 = new HashMap(properties);
        roi = new ROIShape(new Rectangle(8, 8, 2, 2));
        CoverageUtilities.setROIProperty(properties2, roi);
        coverageROI = gcf.create("roi", coverage.getRenderedImage(), coverage.getEnvelope(), coverage.getSampleDimensions(), null, properties2);

        // Same Coverage with ROI and NoData Property
        Map properties3 = new HashMap(properties);
        CoverageUtilities.setNoDataProperty(properties3, RangeFactory.create((short)-1, (short)-1));
        CoverageUtilities.setROIProperty(properties3, roi);
        coverageNoDataROI = gcf.create("roiNoData", coverage.getRenderedImage(), coverage.getEnvelope(), coverage.getSampleDimensions(), null, properties3);

        // Reader disposal
        reader.dispose();

        // Definition of the interpolation type
        nearest = new InterpolationNearest();
        bilinear = new InterpolationBilinear();
        bicubic = new InterpolationBicubic(8);

        // Definition of the transformation. (The final image should be doubled and translated)
        scaleX = 2d;
        scaleY = 2d;
    }

