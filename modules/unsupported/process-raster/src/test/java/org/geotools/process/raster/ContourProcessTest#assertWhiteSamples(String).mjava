    private void assertWhiteSamples(String styleName) throws Exception {
        StyleFactory factory = CommonFactoryFinder.getStyleFactory(null);
        URL url = TestData.getResource(this, styleName);
        Style style = new SLDParser(factory, url).readXML()[0];

        // load the sample coverage with a Mercator projection
        GeoTiffReader reader = new GeoTiffReader(TestData.file(this, "mer.tiff"));
        MapContent mc = new MapContent();
        mc.addLayer(new GridReaderLayer(reader, style));

        StreamingRenderer renderer = new StreamingRenderer();
        Map<Object, Object> rendererParams = new HashMap<>();
        rendererParams.put(StreamingRenderer.ADVANCED_PROJECTION_HANDLING_KEY, true);
        rendererParams.put(StreamingRenderer.CONTINUOUS_MAP_WRAPPING, true);
        renderer.setRendererHints(rendererParams);
        renderer.setMapContent(mc);

        // render the image with the EPSG:4326 projection
        int width = 256;
        int height = 256;
        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
        Graphics2D graphics = image.createGraphics();
        renderer.paint(
                graphics,
                new Rectangle(image.getWidth(), image.getHeight()),
                new ReferencedEnvelope(-71, -68, 6, 9, CRS.decode("EPSG:4326", true)));
        graphics.dispose();
        Raster raster = image.getData();

        // count the number of white samples in the rendered image
        int whiteSamples = 0;
        for (int i = 0; i < 256; i++) {
            for (int j = 0; j < 256; j++) {
                whiteSamples += raster.getSample(i, j, 0) == 255 ? 1 : 0;
            }
        }

        // The white contour lines with the sample data and styles should cover about
        // 0.25% of the rendered image regardless of whether the screenmap is used.
        // The bug that this is testing would cause a large number of diagonal lines
        // to be drawn across the image so the percentage of white pixels with the
        // bug would be significantly higher.
        double area = width * height;
        assertEquals(0.0025, whiteSamples / area, 0.0005);
    }

