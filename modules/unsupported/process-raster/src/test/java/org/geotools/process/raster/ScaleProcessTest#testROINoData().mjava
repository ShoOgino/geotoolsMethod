    @Test
    public void testROINoData() throws IOException {
        // Selection of the Affine process
        ScaleCoverage process = new ScaleCoverage();
        // Definition of the Transformation object to use (The final image should be doubled and
        // translated)

        // Execution of the operation
        GridCoverage2D result = process.execute(coverageNoDataROI, scaleX, scaleY, 0, 0, nearest);

        // Check if the final image is correct
        ensureCorrectTransformation(result, scaleX, scaleY);

        // Check if the NoData property is present
        NoDataContainer container = CoverageUtilities.getNoDataProperty(result);
        assertNotNull(container);

        // Check if the ROI property is present
        ROI roiNew = CoverageUtilities.getROIProperty(result);
        assertNotNull(roiNew);
        // Check if ROI has been scaled
        Rectangle bounds = roiNew.getBounds();
        Rectangle inBounds = roi.getBounds();

        assertEquals(bounds.x, inBounds.x * scaleX, 0.0001);
        assertEquals(bounds.y, inBounds.y * scaleY, 0.0001);
        assertEquals(bounds.width, inBounds.width * scaleX, 0.0001);
        assertEquals(bounds.height, inBounds.height * scaleY, 0.0001);

        RenderedImage img = result.getRenderedImage();
        RandomIter it = RandomIterFactory.create(img, null, true, true);

        int minX = img.getMinX();
        int minY = img.getMinY();
        int maxX = img.getWidth() + minX;
        int maxY = img.getHeight() + minY;

        for (int x = minX; x < maxX; x++) {
            for (int y = minY; y < maxY; y++) {
                int sample = it.getSample(x, y, 0);
                if (!roiNew.contains(x, y)) {
                    assertEquals(sample, -1);
                }
            }
        }
    }

