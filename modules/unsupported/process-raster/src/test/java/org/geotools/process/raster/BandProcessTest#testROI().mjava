    // Ensure that the merging and selecting two equal images with ROI returns the same images
    // with nodata outside the ROI
    @Test
    public void testROI() throws IOException, MismatchedDimensionException, TransformException {
        // Creation of a GridCoverage List
        List<GridCoverage2D> coverages = new ArrayList<>();
        coverages.add(coverage1);
        coverages.add(coverage2);

        // Creation of a Geometry to use as ROI
        Geometry geo = createGeometry(coverage1);

        // ///////////////
        //
        // BANDMERGE STEP
        //
        // ///////////////

        // Call of the bandmerge process
        BandMergeProcess bandmerge = new BandMergeProcess();
        // Execution of the process
        GridCoverage2D merged = bandmerge.execute(coverages, geo, null, null);

        // Checks on the new Coverage
        Assert.assertEquals(2, merged.getNumSampleDimensions());

        // Input Coverage BBOX
        Envelope2D sourceEnv = coverage1.getEnvelope2D();

        // Merged Coverage BBOX
        Envelope2D mergedEnv = merged.getEnvelope2D();

        // Ensure same BBOX
        assertEqualBBOX(sourceEnv, mergedEnv);

        // Selection of the Images associated to each coverage
        RenderedImage mergedImg = merged.getRenderedImage();
        RenderedImage srcImg1 = coverage1.getRenderedImage();
        RenderedImage srcImg2 = coverage2.getRenderedImage();

        // Ensure they have the same dimensions
        assertEqualImageDim(mergedImg, srcImg1);
        assertEqualImageDim(mergedImg, srcImg2);

        // ///////////////
        //
        // BANDSELECT STEP
        //
        // ///////////////

        // Call of the bandselect process
        BandSelectProcess bandselect = new BandSelectProcess();

        // Selection of the first coverage
        GridCoverage2D selected1 = bandselect.execute(merged, new int[] {0}, null);

        // Selection of the second coverage
        GridCoverage2D selected2 = bandselect.execute(merged, new int[] {1}, null);

        // Check the sample dimensions number
        assertEquals(1, selected1.getNumSampleDimensions());
        assertEquals(1, selected2.getNumSampleDimensions());

        // Check the BBOX
        assertEqualBBOX(mergedEnv, selected1.getEnvelope2D());
        assertEqualBBOX(mergedEnv, selected2.getEnvelope2D());

        // Ensure they have the same dimensions
        assertEqualImageDim(mergedImg, selected1.getRenderedImage());
        assertEqualImageDim(mergedImg, selected2.getRenderedImage());

        // Coverage Crop for the final coverages
        CropCoverage crop = new CropCoverage();

        RenderedImage cropSel1 = crop.execute(selected1, geo, null).getRenderedImage();

        RenderedImage cropSel2 = crop.execute(selected2, geo, null).getRenderedImage();

        // Ensure that the images are equals on the cropped selection (The new images contains no
        // data outside of the selection)
        ensureEqualImages(selected1.getRenderedImage(), cropSel1);
        ensureEqualImages(selected2.getRenderedImage(), cropSel2);

        // Ensure that the images contain No Data outside of the ROI bounds
        ensureNoDataOutside(selected1, geo);
        ensureNoDataOutside(selected2, geo);
    }

