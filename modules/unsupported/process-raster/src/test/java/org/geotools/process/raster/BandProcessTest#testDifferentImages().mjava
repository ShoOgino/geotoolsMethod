    // Ensure that the merging and selecting two images where one of them is translated, returns the two images, each of the placed
    // by taking into account their position inside the global image envelope
    @Test
    public void testDifferentImages() {
        // Creation of a GridCoverage List
        List<GridCoverage2D> coverages = new ArrayList<GridCoverage2D>();
        coverages.add(coverage1);
        coverages.add(coverage3);

        // ///////////////
        //
        // BANDMERGE STEP
        //
        // ///////////////

        // Call of the bandmerge process
        BandMergeProcess bandmerge = new BandMergeProcess();
        // Execution of the process
        GridCoverage2D merged = bandmerge.execute(coverages, null, null, null);

        // Checks on the new Coverage
        Assert.assertEquals(2, merged.getNumSampleDimensions());
        // Ensure that the final Envelope is expanded
        Envelope2D cov1Env = coverage1.getEnvelope2D();
        Envelope2D cov3Env = coverage3.getEnvelope2D();
        // Global coverage creation
        Envelope2D globalEnv = new Envelope2D(cov1Env);
        globalEnv.include(cov3Env);

        assertEqualBBOX(globalEnv, merged.getEnvelope2D());

        // ///////////////
        //
        // BANDSELECT STEP
        //
        // ///////////////

        // Call of the bandselect process
        BandSelectProcess bandselect = new BandSelectProcess();

        // Selection of the first coverage
        GridCoverage2D selected1 = bandselect.execute(merged, new int[] { 0 }, null);

        // Selection of the second coverage
        GridCoverage2D selected2 = bandselect.execute(merged, new int[] { 1 }, null);

        // Check the sample dimensions number
        assertEquals(1, selected1.getNumSampleDimensions());
        assertEquals(1, selected2.getNumSampleDimensions());

        // Check the BBOX
        assertEqualBBOX(globalEnv, selected1.getEnvelope2D());
        assertEqualBBOX(globalEnv, selected2.getEnvelope2D());

        // Initial image
        RenderedImage srcImg = coverage1.getRenderedImage();
        // Final images
        RenderedImage sel1 = selected1.getRenderedImage();
        RenderedImage sel2 = selected2.getRenderedImage();

        // Since we know that the first image is on the left side of the envelope and the
        // second on the right side, we crop and translate the images in order to
        // compare the initial image with them.

        // First image requires only cropping since it is on the right position
        ImageWorker w1 = new ImageWorker(sel1);
        RenderedOp crop1 = w1.crop(0f, 0f, (float) srcImg.getWidth(), (float) srcImg.getHeight())
                .getRenderedOperation();
        // Minimum
        float minX = sel1.getWidth() - srcImg.getWidth();
        float minY = sel2.getHeight() - srcImg.getHeight();
        // Cropping + Translation of the second image
        ImageWorker w2 = new ImageWorker(sel2);
        RenderedOp crop2 = w2
                .crop(minX, minY, (float) srcImg.getWidth(), (float) srcImg.getHeight())
                .translate(-minX, -minY, null).getRenderedOperation();

        // Final check on the images
        ensureEqualImages(srcImg, crop1);
        ensureEqualImages(srcImg, crop2);
    }

