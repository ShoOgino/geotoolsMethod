    public RenderedImage create(ParameterBlock pb, RenderingHints hints) {
        RenderedImage src = pb.getRenderedSource(0);

        int xStart = src.getMinX(); // default values
        int yStart = src.getMinY();

        Integer numBins = pb.getIntParameter(NUM_CLASSES_ARG);
        ClassificationMethod method = (ClassificationMethod) pb.getObjectParameter(METHOD_ARG);
        Double[][] extrema = (Double[][]) pb.getObjectParameter(EXTREMA_ARG);
        ROI roi = (ROI) pb.getObjectParameter(ROI_ARG);
        Integer[] bands = (Integer[]) pb.getObjectParameter(BAND_ARG);
        Integer xPeriod = pb.getIntParameter(X_PERIOD_ARG);
        Integer yPeriod = pb.getIntParameter(Y_PERIOD_ARG);
        Double noData = (Double) pb.getObjectParameter(NODATA_ARG);
        Boolean histogram = false;
        if (pb.getNumParameters() >= 9) {
            histogram = (Boolean) pb.getObjectParameter(HISTOGRAM_ARG);
        }
        Integer histogramBins = 256;
        if (pb.getNumParameters() >= 10)
            histogramBins = (Integer) pb.getObjectParameter(HISTOGRAM_BINS);

        switch (method) {
            case EQUAL_INTERVAL:
                return new EqualIntervalBreaksOpImage(
                        src, numBins, extrema, roi, bands, xStart, yStart, xPeriod, yPeriod,
                        noData);
            case QUANTILE:
                if (histogram) {
                    return new QuantileBreaksHistogramOpImage(
                            src,
                            numBins,
                            extrema,
                            roi,
                            bands,
                            xStart,
                            yStart,
                            xPeriod,
                            yPeriod,
                            noData,
                            histogramBins);
                } else {
                    return new QuantileBreaksOpImage(
                            src, numBins, extrema, roi, bands, xStart, yStart, xPeriod, yPeriod,
                            noData);
                }
            case NATURAL_BREAKS:
                if (histogram) {
                    return new NaturalBreaksHistogramOpImage(
                            src,
                            numBins,
                            extrema,
                            roi,
                            bands,
                            xStart,
                            yStart,
                            xPeriod,
                            yPeriod,
                            noData,
                            histogramBins);
                } else {
                    return new NaturalBreaksOpImage(
                            src, numBins, extrema, roi, bands, xStart, yStart, xPeriod, yPeriod,
                            noData);
                }
            default:
                throw new IllegalArgumentException(method.name());
        }
    }

