    @Override
    protected void postCalculate(Classification c, int band) {
        QuantileClassification qc = (QuantileClassification) c;

        //get the total number of values
        int nvalues = qc.getCount(band);

        //calculate the number of values per class
        int size = (int) Math.ceil(nvalues / (double) numClasses);

        //grab the key iterator
        Iterator<Map.Entry<Double, Integer>> it = qc.getTable(band).entrySet().iterator();

        TreeSet<Double> set = new TreeSet<Double>();
        Map.Entry<Double, Integer> e = it.next();
        
        while(nvalues > 0) {
            //add the next break
            set.add(e.getKey());

            for (int i = 0; i < size && nvalues > 0; i++) {
                //consume the next value
                int count = e.getValue();
                e.setValue(--count);
                nvalues--;
                
                if (count == 0) {
                    //number of occurences of this entry exhausted, move to next
                    if (!it.hasNext()) {
                        break;
                    }
                    e = it.next();
                }
            }

            if (nvalues == 0) {
                //add the last value
                set.add(e.getKey());
            }
        }
        qc.setBreaks(band, set.toArray(new Double[set.size()]));
        

    }

