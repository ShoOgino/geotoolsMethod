        /**
         * @param gc2d
         * @param emisphere
         * @param targetCRS
         */
        public RasterAsPointFeatureCollection(
                GridCoverage2D gc2d, boolean emisphere, CoordinateReferenceSystem targetCRS)
                throws IOException {
            super(
                    modify(
                            CoverageUtilities.createFeatureType(gc2d, Point.class),
                            emisphere,
                            targetCRS));
            this.gc2d = gc2d;
            this.emisphere = emisphere;
            this.targetCRS = targetCRS;

            //
            // get various elements from this coverage
            //
            // SIZE
            final RenderedImage raster = gc2d.getRenderedImage();
            size = raster.getWidth() * raster.getHeight();

            // GRID TO WORLD for transforming raster points into model points
            mt2D = gc2d.getGridGeometry().getGridToCRS2D(PixelOrientation.UPPER_LEFT);

            // BOUNDS take into account that we want to map center coordinates
            rasterBounds = PlanarImage.wrapRenderedImage(raster).getBounds();
            final XRectangle2D rasterBounds_ =
                    new XRectangle2D(
                            raster.getMinX() + 0.5,
                            raster.getMinY() + 0.5,
                            raster.getWidth() - 1,
                            raster.getHeight() - 1);
            try {
                bounds =
                        new ReferencedEnvelope(
                                CRS.transform(mt2D, rasterBounds_, null),
                                gc2d.getCoordinateReferenceSystem2D());
            } catch (Exception e) {
                final IOException ioe = new IOException();
                ioe.initCause(e);
                throw ioe;
            }

            // BANDS
            numBands = gc2d.getNumSampleDimensions();

            final CoordinateReferenceSystem coverageCRS = gc2d.getCoordinateReferenceSystem2D();
            //
            // Emisphere management
            //
            emisphereManagement(coverageCRS);

            //
            // Grid Convergence Angle correction
            //
            gridConvergenceAngle(coverageCRS);
        }

