	/**
	 * Creates a {@link SimpleFeatureType} that exposes a coverage as a collections
	 * of feature points, mapping the centre of each pixel as a point plus all the bands as attributes.
	 * 
	 * <p>
	 * The FID is the long that combines x+y*width.
	 * 
	 * @param gc2d the {@link GridCoverage2D} to wrap.
	 * @param geometryClass the class for the geometry.
	 * @return a {@link SimpleFeatureType} or <code>null</code> in case we are unable to wrap the coverage
	 */
	public static SimpleFeatureType createFeatureType(final GridCoverage2D gc2d, final Class<? extends Geometry> geometryClass) {
		
		// checks
		Utilities.ensureNonNull("gc2d", gc2d);
		
		// building a feature type for this coverage
		final SimpleFeatureTypeBuilder ftBuilder= new SimpleFeatureTypeBuilder();
		ftBuilder.setName(gc2d.getName().toString());
		ftBuilder.setNamespaceURI("http://www.geotools.org/");
		
		// CRS
		ftBuilder.setCRS(gc2d.getCoordinateReferenceSystem2D());
//		ftBuilder.setCRS(DefaultEngineeringCRS.GENERIC_2D);
		
		// TYPE is as follows the_geom | band
		ftBuilder.setDefaultGeometry("the_geom");
		ftBuilder.add("the_geom", geometryClass);
		if(!geometryClass.equals(Point.class)){
			ftBuilder.add("value",Double.class);
		}else{

			// get sample type on bands
			final GridSampleDimension[] sampleDimensions = gc2d.getSampleDimensions();
			for(GridSampleDimension sd:sampleDimensions){
				final SampleDimensionType sdType=sd.getSampleDimensionType();
				final int dataBuffType =TypeMap.getDataBufferType(sdType);
				
				// TODO I think this should be a public utility inside the FeatureUtilities class
				@SuppressWarnings("rawtypes")
				final Class bandClass;
				switch(dataBuffType){
				case DataBuffer.TYPE_BYTE:
					bandClass=Byte.class;
					break;
				case DataBuffer.TYPE_DOUBLE:
					bandClass=Double.class;
					break;
				case DataBuffer.TYPE_FLOAT:
					bandClass=Float.class;
					break;
				case DataBuffer.TYPE_INT:
					bandClass=Integer.class;
					break;
				case DataBuffer.TYPE_SHORT:case DataBuffer.TYPE_USHORT:
					bandClass=Short.class;
					break;	
				case DataBuffer.TYPE_UNDEFINED: default:
					return null;
				}
				ftBuilder.add(sd.getDescription().toString(),bandClass);
				
			}
			
		}
		return ftBuilder.buildFeatureType();
	}

