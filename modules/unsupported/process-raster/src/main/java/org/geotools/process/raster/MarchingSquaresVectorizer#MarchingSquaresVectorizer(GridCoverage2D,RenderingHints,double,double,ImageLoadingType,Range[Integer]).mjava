    /**
     * Main Constructor using {@link GridCoverage2D} as input.
     * 
     * @param inGeodata the input {@link GridCoverage2D}
     * @param hints hints to be used by inner processing, it usually contains tile caches, schedulers
     * @param thresholdArea the minimum area required by a polygon to be included in the result
     * @param simplifierFactor the simplifier factor to be applied to compute the simplified version of the biggest polygon.
     * @param imageLoadingType the type of imageLoading (DEFERRED vs IMMEDIATE).
     * @param exclusionLuminanceRange the range of luminance values to be excluded by the computation.
     */
    public MarchingSquaresVectorizer(GridCoverage2D inGeodata, RenderingHints hints,
            double thresholdArea, double simplifierFactor, ImageLoadingType imageLoadingType,
            Range<Integer> exclusionLuminanceRange) {
        this.inGeodata = inGeodata;
        this.thresholdArea = thresholdArea;
        this.simplifierFactor = simplifierFactor;
        this.exclusionLuminanceRange = exclusionLuminanceRange;

        RenderingHints localHints = (hints != null) ? (RenderingHints) hints.clone() : null;
        if ((localHints != null) && localHints.containsKey(JAI.KEY_IMAGE_LAYOUT)) {
            Object l = localHints.get(JAI.KEY_IMAGE_LAYOUT);
            if ((l != null) && (l instanceof ImageLayout)) {
                final ImageLayout layout = (ImageLayout) ((ImageLayout) l).clone();
                localHints.put(JAI.KEY_IMAGE_LAYOUT, layout);
            }
        }
        this.hints = localHints;
        this.imageLoadingType = imageLoadingType;
    }

