    /**
     * Creates a TransparencyFillOpImage given a ParameterBlock containing the image source. The
     * image dimensions are derived from the source image. The tile grid layout, SampleModel, and
     * ColorModel may optionally be specified by an ImageLayout object.
     *
     * @param source a RenderedImage.
     * @param extender a BorderExtender, or null.
     * @param type a {@link FillType} type to be used for transparency filling
     * @param layout an ImageLayout optionally containing the tile grid layout, SampleModel, and
     *     ColorModel, or null.
     */
    public TransparencyFillOpImage(
            RenderedImage source,
            BorderExtender extender,
            FillType type,
            Map config,
            ImageLayout layout,
            Number noData,
            Integer width) {
        super(source, layout, config, true, extender, 1, 1, 1, 1);
        if (type == null) {
            // Setting up default
            type = TransparencyFillDescriptor.FILL_AVERAGE;
        }
        this.type = type;
        switch (this.type.getValue()) {
            case 0:
                fillAlgorithm = TransparencyFillAlgorithm.FILL_AVERAGE;
                break;
            case 1:
                fillAlgorithm = TransparencyFillAlgorithm.FILL_CLONE_FIRST;
                break;
            case 2:
                fillAlgorithm = TransparencyFillAlgorithm.FILL_CLONE_SECOND;
                break;
        }
        if (noData != null) this.noData = noData;
        if (width != null) this.width = width;
    }

