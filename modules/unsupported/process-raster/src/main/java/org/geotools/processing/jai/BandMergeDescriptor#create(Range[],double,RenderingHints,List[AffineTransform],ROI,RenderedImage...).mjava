    /**
     * Merge (possibly multi-banded)images into a multibanded image.
     * 
     * <p>
     * Creates a <code>ParameterBlockJAI</code> from all supplied arguments except <code>hints</code> and invokes
     * {@link JAI#create(String,ParameterBlock,RenderingHints)}.
     * 
     * @see JAI
     * @see ParameterBlockJAI
     * @see RenderedOp
     * 
     * @param noData Array of input No Data Ranges.
     * @param destinationNoData value used by the RenderedOp for setting the output no data value.
     * @param hints The <code>RenderingHints</code> to use. May be <code>null</code>.
     * @param transform A List of AffineTransformation to use for backward mapping each source image. May be <code>null</code>.
     * @param roi Input ROI object to use in the bandmerge operation.
     * @param sources Array of source <code>RenderedImage</code>.
     * @return The <code>RenderedOp</code> destination.
     * @throws IllegalArgumentException if <code>sources</code> is <code>null</code>.
     * @throws IllegalArgumentException if a <code>source</code> is <code>null</code>.
     */
    public static RenderedOp create(Range[] noData, double destinationNoData, RenderingHints hints, 
            List<AffineTransform> transform, ROI roi, RenderedImage... sources) {
        ParameterBlockJAI pb = new ParameterBlockJAI("BandMergeOp", RenderedRegistryMode.MODE_NAME);
        // Source number
        int numSources = sources.length;
        // Check on the source number
        if (numSources <= 0) {
            throw new IllegalArgumentException("No resources are present");
        }

        // Setting of all the sources
        for (int index = 0; index < numSources; index++) {

            RenderedImage source = sources[index];

            if (source == null) {
                throw new IllegalArgumentException("This resource is null");
            }

            pb.setSource(source, index);
        }

        // Check if the transform object can be used
        if(transform != null && !transform.isEmpty() && transform.get(0) instanceof AffineTransform){
            pb.setParameter("transformations", transform);
        }
        
        // Setting of the parameters
        pb.setParameter("noData", noData);
        pb.setParameter("destinationNoData", destinationNoData);
        pb.setParameter("roi", roi);

        // Creation of the RenderedOp
        return JAI.create("BandMergeOp", pb, hints);
    }

