    /**
     * Perform the contouring on the input {@linkplain GridCoverage2D} and returns
     * the results as a feature collection. You can control which contours are generated
     * either by providing a list of values via the {@code levels} argument, or by specifying
     * the interval between contour values via the {@code interval} argument. In the interval 
     * case, the resulting contour values will be integer multiples of the specified interval. 
     * If both {@code levels} and {@code interval} are supplied the {@code interval} argument
     * is ignored.
     * 
     * @param data the input grid coverage
     * 
     * @param band the coverage band to process; defaults to 0 if {@code null}
     * 
     * @param levels the values for which contours should be generated
     * 
     * @param interval the interval between contour values (if {@code levels} is not provided)
     * 
     * @param simplify whether to simplify contour lines by removing co-linear vertices;
     *     default is to simplify
     * 
     * @param smooth whether to apply Bezier smooth to the contours; default is no smoothing
     * 
     * @param roi an optional polygonal {@code Geometry} to define the region of interest
     *     within which contours will be generated
     * 
     * @return the contours a feature collection where each feature contains a contour
     *     as a {@linkplain  LineString} and the contour value as a {@code Double}
     * 
     * @throws ProcessException
     */
    public static SimpleFeatureCollection process(GridCoverage2D gc2d, Integer band,
            double[] levels, Double interval, Boolean simplify, Boolean smooth, Geometry roi,
            ProgressListener progressListener) throws ProcessException {
        ContourProcess process = new ContourProcess();
        return process.execute(gc2d, band, levels, interval, simplify, smooth, roi,
                progressListener);
    }

