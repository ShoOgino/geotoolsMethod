    @Override
    protected void accumulateStatistics(String name, Raster raster, Object obj) {
        if (!ClassBreaksDescriptor.CLASSIFICATION_PROPERTY.equals(name)) {
            return;
        }

        Classification c = (Classification) obj;

        //ClassifiedStats2 stats = (ClassifiedStats2) obj;
        SampleModel sampleModel = raster.getSampleModel();

        Rectangle bounds = raster.getBounds();

        LinkedList rectList;
        if (roi == null) {      // ROI is the whole Raster
            rectList = new LinkedList();
            rectList.addLast(bounds);
        } else {
            rectList = roi.getAsRectangleList(bounds.x, bounds.y,
                                              bounds.width, bounds.height);
            if (rectList == null) {
                return; // ROI does not intersect with Raster boundary.
            }
        }

        PixelAccessor accessor = new PixelAccessor(sampleModel, null);

        ListIterator iterator = rectList.listIterator(0);

        while (iterator.hasNext()) {
            Rectangle r = (Rectangle)iterator.next();
            int tx = r.x;
            int ty = r.y;

            // Find the actual ROI based on start and period.
            r.x = startPosition(tx, xStart, xPeriod);
            r.y = startPosition(ty, yStart, yPeriod);
            r.width = tx + r.width - r.x;
            r.height = ty + r.height - r.y;

            if (r.width <= 0 || r.height <= 0) {
                continue;       // no pixel to count in this rectangle
            }

            switch (accessor.sampleType) {
                case PixelAccessor.TYPE_BIT:
                case DataBuffer.TYPE_BYTE:
                case DataBuffer.TYPE_USHORT:
                case DataBuffer.TYPE_SHORT:
                case DataBuffer.TYPE_INT:
                    //countPixelsInt(accessor, raster, r, xPeriod, yPeriod, breaks);
                    //break;
                case DataBuffer.TYPE_FLOAT:
                case DataBuffer.TYPE_DOUBLE:
                default:
                    calculate(accessor, raster, r, xPeriod, yPeriod, c);
                    break;
            }
        }
    }

