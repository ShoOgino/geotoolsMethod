    @Override
    protected void postCalculate(Classification c, int band) {
        HistogramClassification hc = (HistogramClassification) c;
        List<Bucket> buckets = hc.getBuckets(band);

        // calculate the number of values per class
        int nvalues = buckets.stream().mapToInt(b -> b.getCount()).sum();
        int size = (int) Math.ceil(nvalues / (double) numClasses);

        // grab the key iterator
        Iterator<Bucket> it = buckets.iterator();

        TreeSet<Double> set = new TreeSet<Double>();
        Bucket e = it.next();

        int classIdx = 1;
        int count = 0;
        set.add(e.getMin());
        while (classIdx < numClasses && it.hasNext()) {
            count += e.getCount();
            e = it.next();

            if (count >= (size * classIdx)) {
                classIdx++;
                set.add(e.getMin());
            }
        }
        set.add(buckets.get(buckets.size() - 1).getMax());
        hc.setBreaks(band, set.toArray(new Double[set.size()]));
    }

