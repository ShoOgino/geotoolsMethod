    /**
     * Called by the constructor. This method lays out the components that
     * make up the MapLayerTable and registers a mouse listener.
     */
    private void init() {
        setLayout(new GridLayout(1, false));

        Group mapLayersGroup = new Group(this, SWT.NONE);
        mapLayersGroup.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
        mapLayersGroup.setLayout(new GridLayout(1, false));
        mapLayersGroup.setText(Messages.getString("layers_list_title"));

        mapLayerTableViewer = new MaplayerTableViewer(mapLayersGroup, SWT.BORDER | SWT.FULL_SELECTION);
        GridData listGD = new GridData(SWT.FILL, SWT.FILL, true, true);
        mapLayerTableViewer.getTable().setLayoutData(listGD);

        // list.setCellEditors(new CellEditor[]{new MapCellEditor(), new MapCellEditor(), new
        // MapCellEditor()});
        // {
        // /*
        // * We override setToolTipText to provide tool tips
        // * for the control labels displayed for each list item
        // */
        // @Override
        // public String getToolTipText( MouseEvent e ) {
        // int item = list.locationToIndex(e.getPoint());
        //
        // if (item >= 0) {
        // Rectangle r = list.getCellBounds(item, item);
        // if (r.contains(e.getPoint())) {
        // Point p = new Point(e.getPoint().x, e.getPoint().y - r.y);
        //
        // if (MapLayerTableCellRenderer.hitSelectionLabel(p)) {
        // return Messages.getString("select_layer");
        //
        // } else if (MapLayerTableCellRenderer.hitVisibilityLabel(p)) {
        // return Messages.getString("show_layer");
        //
        // } else if (MapLayerTableCellRenderer.hitStyleLabel(p)) {
        // return Messages.getString("style_layer");
        //
        // } else if (MapLayerTableCellRenderer.hitRemoveLabel(p)) {
        // return Messages.getString("remove_layer");
        //
        // } else if (MapLayerTableCellRenderer.hitNameLabel(p)) {
        // return Messages.getString("rename_layer");
        // }
        // }
        // }
        //
        // return null;
        // }
        // };

        // Listen for drag-reordering of the list contents which
        // will be received via the contentsChanged method
        // listModel.addListDataListener(new ListDataListener(){
        //
        // public void intervalAdded( ListDataEvent e ) {
        // }
        //
        // public void intervalRemoved( ListDataEvent e ) {
        // }
        //
        // public void contentsChanged( ListDataEvent e ) {
        // onReorderLayers(e);
        // }
        // });

        // list.addMouseListener(new MouseAdapter(){
        // @Override
        // public void mouseClicked( MouseEvent e ) {
        // long clickTime = System.currentTimeMillis();
        // boolean doubleClick = clickTime - lastClickTime < DOUBLE_CLICK_TIME;
        // lastClickTime = clickTime;
        // onLayerItemClicked(e, doubleClick);
        // }
        //
        // });

        Composite buttonComposite = new Composite(mapLayersGroup, SWT.NONE);
        buttonComposite.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));
        buttonComposite.setLayout(new GridLayout(5, true));

        Button removeLayerButton = new Button(buttonComposite, SWT.PUSH);
        removeLayerButton.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
        removeLayerButton.setToolTipText(Messages.getString("remove_layer"));
        removeLayerButton.setImage(ImageCache.getInstance().getImage(ImageCache.REMOVE_LAYER));
        removeLayerButton.addSelectionListener(new SelectionAdapter(){
            public void widgetSelected( SelectionEvent e ) {
                MapLayer selectedMapLayer = mapLayerTableViewer.getSelectedMapLayer();
                if (selectedMapLayer == null) {
                    return;
                }
                MapContext mapContext = pane.getMapContext();
                mapContext.removeLayer(selectedMapLayer);
                mapLayerTableViewer.selectionChanged(null);
            }
        });

        Button showLayersButton = new Button(buttonComposite, SWT.PUSH);
        showLayersButton.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
        showLayersButton.setToolTipText(Messages.getString("show_all_layers"));
        showLayersButton.setImage(ImageCache.getInstance().getImage(ImageCache.CHECKED));
        showLayersButton.addSelectionListener(new SelectionAdapter(){
            public void widgetSelected( SelectionEvent e ) {
                onShowAllLayers();
            }
        });

        Button hideLayersButton = new Button(buttonComposite, SWT.PUSH);
        hideLayersButton.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
        hideLayersButton.setToolTipText(Messages.getString("hide_all_layers"));
        hideLayersButton.setImage(ImageCache.getInstance().getImage(ImageCache.UNCHECKED));
        hideLayersButton.addSelectionListener(new SelectionAdapter(){
            public void widgetSelected( SelectionEvent e ) {
                onHideAllLayers();
            }
        });

        Button layerUpButton = new Button(buttonComposite, SWT.PUSH);
        layerUpButton.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
        layerUpButton.setToolTipText(Messages.getString("layer_up"));
        layerUpButton.setImage(ImageCache.getInstance().getImage(ImageCache.UP));
        layerUpButton.addSelectionListener(new SelectionAdapter(){
            public void widgetSelected( SelectionEvent e ) {
                moveLayer(-1);
            }
        });

        Button layerDownButton = new Button(buttonComposite, SWT.PUSH);
        layerDownButton.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));
        layerDownButton.setToolTipText(Messages.getString("layer_down"));
        layerDownButton.setImage(ImageCache.getInstance().getImage(ImageCache.DOWN));
        layerDownButton.addSelectionListener(new SelectionAdapter(){
            public void widgetSelected( SelectionEvent e ) {
                moveLayer(1);
            }
        });
    }

