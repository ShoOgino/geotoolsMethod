    /** Tests filters that contain exclude filters */
    public void testExcludeFilter() {
        BBoxFilterSplitter splitter = new BBoxFilterSplitter();
        List<Filter> filters = new ArrayList<Filter>();
        Filter excludeFilter = Filter.EXCLUDE;

        excludeFilter.accept(splitter, null);
        assertEquals(Filter.EXCLUDE, splitter.getFilterPre());
        assertEquals(Filter.INCLUDE, splitter.getFilterPost());

        // test include with another geometry filter using or
        splitter = new BBoxFilterSplitter();
        filters.add(excludeFilter);
        filters.add(bb2);
        filters.add(bb);
        Filter or = ff.or(filters);
        or.accept(splitter, null);

        Envelope testenv = new Envelope(bb2env);
        testenv.expandToInclude(bbenv);
        Filter testfilter =
                ff.bbox(
                        "geom",
                        testenv.getMinX(),
                        testenv.getMinY(),
                        testenv.getMaxX(),
                        testenv.getMaxY(),
                        "srs");
        assertEquals(testfilter, splitter.getFilterPre());
        assertEquals(Filter.INCLUDE, splitter.getFilterPost());

        // add exclude filter last
        splitter = new BBoxFilterSplitter();
        filters = new ArrayList<Filter>();
        filters.add(bb);
        filters.add(bb2);
        filters.add(excludeFilter);
        or = ff.or(filters);
        or.accept(splitter, null);
        assertEquals(testfilter, splitter.getFilterPre());
        assertEquals(Filter.INCLUDE, splitter.getFilterPost());

        // test include with another geometry filter and attribute filter using or
        splitter = new BBoxFilterSplitter();
        filters = new ArrayList<Filter>();
        filters.add(bb2);
        filters.add(excludeFilter);
        filters.add(bb);
        filters.add(att);
        or = ff.or(filters);
        or.accept(splitter, null);
        assertEquals(testfilter, splitter.getFilterPre());
        assertEquals(or, splitter.getFilterPost());

        // test include with another geometry filter using and
        splitter = new BBoxFilterSplitter();
        filters = new ArrayList<Filter>();
        filters.add(excludeFilter);
        filters.add(bb);
        Filter and = ff.and(filters);
        and.accept(splitter, null);
        assertEquals(Filter.EXCLUDE, splitter.getFilterPre());
        assertEquals(
                Filter.INCLUDE,
                splitter.getFilterPost()); // if pre incorporates all geometries then we need
        // nothing post

        // test include with another geometry filter using and with attribute
        splitter = new BBoxFilterSplitter();
        filters = new ArrayList<Filter>();
        filters.add(excludeFilter);
        filters.add(bb);
        filters.add(att);
        and = ff.and(filters);
        and.accept(splitter, null);
        assertEquals(Filter.EXCLUDE, splitter.getFilterPre());
        assertEquals(Filter.INCLUDE, splitter.getFilterPost());
    }

