    /**
     * Constructor. Creates a new Grid covering space given by <code>mbr</code> and with at least
     * <code>capacity</code> nodes.
     *
     * @param mbr
     * @param capacity - the number of tiles in the index
     * @param store - the backend index storage
     */
    public GridSpatialIndex(Region mbr, int gridsize, Storage store, int capacity) {
        this.gridsize = gridsize;
        this.mbr = mbr;
        this.store = store;
        this.stats = new GridSpatialIndexStatistics();
        this.policy = new LRUEvictionPolicy(this);
        this.featureCapacity = capacity;

        this.root = null;

        try {
            initializeFromStorage(this.store);
        } catch (Exception ex) {
            // ignore any errors and move on
        }

        if (this.root == null) {
            this.dimension = mbr.getDimension();
            // nothing read from storage so we need to create new ones
            this.store.clear();
            this.root = findUniqueInstance(new RegionNodeIdentifier(mbr));
            GridRootNode root = new GridRootNode(gridsize, (RegionNodeIdentifier) this.root);
            root.split(this);
            writeNode(root);
            this.stats.addToNodesCounter(
                    root.getCapacity() + 1); // root has root.capacity nodes, +1 for root itself :)
        }
    }

