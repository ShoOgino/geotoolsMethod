    /**
     * Creates a feature collection that will first read itmes from the cache and then read missing
     * items from the feature source.
     *
     * @param preFilter the bounding filter of the request
     * @param query the query
     * @param g
     * @param fs
     * @param cacheFeatures
     * @throws IOException
     */
    public GridCachingFeatureCollection(
            BBOX preFilter,
            Query query,
            GridFeatureCache g,
            SimpleFeatureSource fs,
            boolean cacheFeatures)
            throws IOException {
        this(preFilter, query.getFilter(), g, fs, cacheFeatures);

        this.query = query;

        // setup crs transformation
        CoordinateReferenceSystem source = g.getSchema().getCoordinateReferenceSystem();
        CoordinateReferenceSystem dest = null;
        if (query.getCoordinateSystemReproject() != null) {
            dest = query.getCoordinateSystemReproject();
        } else if (query.getCoordinateSystem() != null) {
            dest = query.getCoordinateSystem();
        }
        if (query.getCoordinateSystem() != null) {
            source = query.getCoordinateSystem();
        }
        if (dest != null && !dest.equals(source)) {
            try {
                reproject = CRS.findMathTransform(source, dest);
            } catch (FactoryException ex) {
                IOException newex = new IOException("Could not reproject data to " + dest);
                newex.initCause(ex);
                throw newex;
            }
        }

        // determine new feature type (with new geometry and filtered attributes)
        this.newFeatureType = createSchema((SimpleFeatureType) featureType, query, dest);

        // for now we can't sort queries
        if (query.getSortBy() != null && query.getSortBy().length > 0) {
            throw new IOException("Sorting not supported by this feature collection.");
        }
        // and we also don't support starting at some given index
        if (query.getStartIndex() != null && query.getStartIndex() > 0) {
            throw new IOException("Start index not supported by this feature collection.");
        }
    }

