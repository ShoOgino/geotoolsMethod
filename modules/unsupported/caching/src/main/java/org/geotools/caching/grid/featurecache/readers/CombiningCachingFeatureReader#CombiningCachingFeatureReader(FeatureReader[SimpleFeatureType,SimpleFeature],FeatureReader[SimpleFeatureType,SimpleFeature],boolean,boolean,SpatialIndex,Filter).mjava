	/**
	 * Creates a new feature reader that combines the results from two feature
	 * reads and optionally caches the results.
	 * 
	 * 
	 * All features are read from the feature readers and cached (if requested)
	 * however only those features which pass the postFilter filter are
	 * returned. </p>
	 * 
	 * @param reader1	feature reader 1
	 * @param reader2	feature reader 2
	 * @param cache1	if results from feature reader 1 should be cached
	 * @param cache2	if results from feature reader 2 should be cached
	 * @param cache		cache				
	 * @param postFilter	the filter to be applied as feature read 
	 */
	public CombiningCachingFeatureReader(FeatureReader<SimpleFeatureType, SimpleFeature> reader1, FeatureReader<SimpleFeatureType, SimpleFeature> reader2, boolean cache1, boolean cache2, SpatialIndex cache, Filter postFilter) throws IOException{
		this.r1 = reader1;
		this.r2 = reader2;
		
		this.cache1 = cache1;
		this.cache2 = cache2;
		this.index = cache;
		this.postFilter = postFilter;
		
		this.collectedFeatureIds = new HashSet<String>();
		init();
	}

