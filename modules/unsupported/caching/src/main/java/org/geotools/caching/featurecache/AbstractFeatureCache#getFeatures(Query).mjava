    /**
     * Gets all features which satisfy the given query.
     *
     * <p>This version gets all the features from the cache and datastore and combines them in a
     * memory feature collection.
     *
     * <p>This should probably be overwritten for any implementations.
     */
    public SimpleFeatureCollection getFeatures(Query query) throws IOException {
        String typename = query.getTypeName();
        String schemaname = this.getSchema().getTypeName();
        if ((query.getTypeName() != null) && (typename != schemaname)) {
            return new EmptyFeatureCollection(this.getSchema());
        } else {
            SimpleFeatureCollection fc = getFeatures(query.getFilter());
            if (fc.size() == 0) {
                return new EmptyFeatureCollection(this.getSchema());
            }

            // filter already applied so we really don't need to re-apply it
            // just include all
            query =
                    new DefaultQuery(
                            query.getTypeName(),
                            query.getNamespace(),
                            Filter.INCLUDE,
                            query.getMaxFeatures(),
                            query.getPropertyNames(),
                            query.getHandle());

            // below is probably not the best way to apply a query
            // to a feature collection; but I don't know a better way.

            // now that we have a feature collection we need to wrap it
            // in a datastore so we can apply the query to it.
            // in this case we'll use a memory data store
            MemoryDataStore md = new MemoryDataStore();

            // add the features
            // we are using an array because
            // making a memory data store from a feature collection results
            // in a null pointer exception
            ArrayList<SimpleFeature> features = new ArrayList<SimpleFeature>();
            SimpleFeatureIterator it = fc.features();
            try {
                for (; it.hasNext(); ) {
                    SimpleFeature type = (SimpleFeature) it.next();
                    features.add(type);
                }
            } finally {
                it.close();
            }
            md.addFeatures(features.toArray(new SimpleFeature[features.size()]));

            // convert back to a feature collection with the query applied
            FeatureReader<SimpleFeatureType, SimpleFeature> fr =
                    md.getFeatureReader(query, Transaction.AUTO_COMMIT);
            SimpleFeatureCollection fc1 =
                    new DefaultFeatureCollection(
                            "cachedfeaturecollection", (SimpleFeatureType) fr.getFeatureType());
            while (fr.hasNext()) {
                fc1.add(fr.next());
            }
            fr.close();

            return fc1;
        }
    }

