    /**
     * Return a (copy of) the currently displayed map area.
     *
     * <p>Note, this will not always be the same as the envelope returned by {@code
     * MapContext.getAreaOfInterest()}. For example, when the map is displayed at the full extent of
     * all layers {@code MapContext.getAreaOfInterest()} will return the union of the layer bounds
     * while this method will return an evnelope that can included extra space beyond the bounds of
     * the layers.
     *
     * @return the display area in world coordinates as a new {@code ReferencedEnvelope}
     */
    public ReferencedEnvelope getDisplayArea() {
        ReferencedEnvelope aoi = null;

        if (curPaintArea != null && screenToWorld != null) {
            Rectangle2D awtRectangle = Utils.toAwtRectangle(curPaintArea);
            Point2D p0 = new Point2D.Double(awtRectangle.getMinX(), awtRectangle.getMinY());
            Point2D p1 = new Point2D.Double(awtRectangle.getMaxX(), awtRectangle.getMaxY());
            screenToWorld.transform(p0, p0);
            screenToWorld.transform(p1, p1);

            aoi =
                    new ReferencedEnvelope(
                            Math.min(p0.getX(), p1.getX()),
                            Math.max(p0.getX(), p1.getX()),
                            Math.min(p0.getY(), p1.getY()),
                            Math.max(p0.getY(), p1.getY()),
                            content.getCoordinateReferenceSystem());
        }

        return aoi;
    }

