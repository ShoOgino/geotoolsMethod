    /**
     * Calculate the affine transforms used to convert between
     * world and pixel coordinates. The calculations here are very
     * basic and assume a cartesian reference system.
     * <p>
     * Tne transform is calculated such that {@code envelope} will
     * be centred in the display
     *
     * @param envelope the current map extent (world coordinates)
     * @param paintArea the current map pane extent (screen units)
     */
    private void setTransforms( final Envelope envelope, final Rectangle paintArea ) {
        ReferencedEnvelope refEnv = null;
        if (envelope != null) {
            refEnv = new ReferencedEnvelope(envelope);
        } else {
            refEnv = worldEnvelope();
            context.setCoordinateReferenceSystem(DefaultGeographicCRS.WGS84);
        }

        java.awt.Rectangle awtPaintArea = Utils.toAwtRectangle(paintArea);
        double xscale = awtPaintArea.getWidth() / refEnv.getWidth();
        double yscale = awtPaintArea.getHeight() / refEnv.getHeight();

        double scale = Math.min(xscale, yscale);

        double xoff = refEnv.getMedian(0) * scale - awtPaintArea.getCenterX();
        double yoff = refEnv.getMedian(1) * scale + awtPaintArea.getCenterY();

        worldToScreen = new AffineTransform(scale, 0, 0, -scale, -xoff, yoff);
        try {
            screenToWorld = worldToScreen.createInverse();

        } catch (NoninvertibleTransformException ex) {
            ex.printStackTrace();
        }
    }

