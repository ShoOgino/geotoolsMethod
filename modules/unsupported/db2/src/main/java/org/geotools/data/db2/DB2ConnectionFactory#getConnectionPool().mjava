    /**
     * Returns a ConnectionPool.  Assumes that the required connection
     * information: database name, user name and password have already been
     * set.
     *
     * @return a ConnectionPool object
     *
     * @throws SQLException if we fail to get a database connection
     */
    public ConnectionPool getConnectionPool() throws SQLException {
        String key = this.dbURL + this.user + this.pw;
        DB2ConnectionPoolDataSource poolDataSource = (DB2ConnectionPoolDataSource) DATA_SOURCES
            .get(key);

        // Create a new pool data source if one doesn't already exist.
        if (poolDataSource == null) {
            poolDataSource = new DB2ConnectionPoolDataSource();
        	int portValue = Integer.valueOf(portnum).intValue();
        	int driverType = 4;
            poolDataSource = new DB2ConnectionPoolDataSource();
            if (portValue == 0 ) {	// If there is no port number, use type 2 driver
            	driverType = 2;
            }
            poolDataSource.setDriverType(driverType);
            poolDataSource.setPortNumber(portValue);
            poolDataSource.setServerName(host);
            poolDataSource.setDatabaseName(this.dbname);
            poolDataSource.setUser(this.user);
            poolDataSource.setPassword(this.pw);
            DATA_SOURCES.put(key, poolDataSource);
            LOGGER.info("Created new DB2ConnectionPoolDataSource for dbUrl "
                + this.dbURL);
        }

        ConnectionPoolManager manager = ConnectionPoolManager.getInstance();
        ConnectionPool connectionPool = manager.getConnectionPool((ConnectionPoolDataSource) poolDataSource);

        LOGGER.info("Successfully obtained DB2 ConnectionPool");

        return connectionPool;
    }

