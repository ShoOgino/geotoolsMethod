    /**
     * Overrides the method in JDBCDataStore because it includes
     * PostGIS-specific handling to setAutoCommit(false) which causes problems
     * for DB2 because the transaction is still uncommitted when the
     * connection is closed.
     *
     * @param featureTypeInfo
     * @param tableName
     * @param sqlQuery The SQL query to execute.
     * @param transaction The Transaction is included here for handling
     *        transaction connections at a later stage.  It is not currently
     *        used.
     * @param forWrite
     *
     * @return The QueryData object that contains the resources for the query.
     *
     * @throws IOException
     * @throws DataSourceException If an error occurs performing the query.
     */
    protected QueryData executeQuery(FeatureTypeInfo featureTypeInfo,
        String tableName, String sqlQuery, Transaction transaction,
        boolean forWrite) throws IOException {
        LOGGER.fine("About to execute query: " + sqlQuery);

        Connection conn = null;
        Statement statement = null;
        ResultSet rs = null;

        try {
            conn = getConnection(transaction);
            statement = conn.createStatement(getResultSetType(forWrite),
                    getConcurrency(forWrite));

            statement.setFetchSize(200);

            int rsc1 = statement.getResultSetConcurrency();
            rs = statement.executeQuery(sqlQuery);

            int rsc2 = statement.getResultSetConcurrency();
            int c = rs.getConcurrency();
            int update = ResultSet.CONCUR_UPDATABLE;
            int read = ResultSet.CONCUR_READ_ONLY;

            return new QueryData(featureTypeInfo, this, conn, statement, rs,
                transaction);
        } catch (SQLException e) {
            // if an error occurred we close the resources
            String msg = "Error Performing SQL query: " + sqlQuery;
            LOGGER.log(Level.SEVERE, msg, e);
            JDBCUtils.close(rs);
            JDBCUtils.close(statement);
            JDBCUtils.close(conn, transaction, e);
            throw new DataSourceException(msg, e);
        }
    }

