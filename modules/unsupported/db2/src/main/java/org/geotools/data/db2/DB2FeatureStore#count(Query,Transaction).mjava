    /**
     * Direct SQL query number of rows in query.
     * 
     * <p>
     * Note this is a low level SQL statement and if it fails the provided
     * Transaction will be rolled back.
     * </p>
     * <p>
     * SQL: SELECT COUNT(*) as cnt FROM table WHERE filter
     * </p>
     * @param query
     * @param transaction
     *
     * @return Number of rows in query, or -1 if not optimizable.
     *
     * @throws IOException Usual on the basis of a filter error
     */
    public int count(Query query, Transaction transaction) throws IOException {
		int count = 0; // we may return this as default if some tests fail
		String typeName = "null";
		Filter filter = query.getFilter();

		if (getSchema() != null) {
			typeName = getSchema().getTypeName();
			GeometryDescriptor geomType = (GeometryDescriptor)getSchema().getGeometryDescriptor();

			if (filter != Filter.EXCLUDE) {
				DB2SQLBuilder builder = (DB2SQLBuilder) ((DB2DataStore) 
						getDataStore()).getSqlBuilder(typeName);

				Connection conn = null;
				Statement statement = null;
				ResultSet results = null;

				try {
					conn = getConnection();
					StringBuffer sql = new StringBuffer();
					//chorner: we should hit an indexed column, * will likely tablescan
					sql.append("SELECT COUNT(*) as cnt");
					builder.sqlFrom(sql, typeName);
					builder.sqlWhere(sql, filter); //safe to assume filter = prefilter
					statement = conn.createStatement();
					results = statement.executeQuery(sql.toString());

					if (results.next()) {
						count = results.getInt("cnt");
					}
				} catch (SQLException e) {
					closeAll(results, statement, conn, transaction, e);
					System.out.println(e);
					throw new DataSourceException("Could not get count "
							+ query.getHandle(), e);
				} catch (SQLEncoderException e) {
					closeAll(results, statement, conn, transaction, null);
					System.out.println(e);
					throw new DataSourceException("Could not get count "
							+ query.getHandle(), e);
				}
				closeAll(results, statement, conn, transaction, null);
			}
		}
		LOGGER.finer(typeName + " count: " + count);
		return count;
	}        

