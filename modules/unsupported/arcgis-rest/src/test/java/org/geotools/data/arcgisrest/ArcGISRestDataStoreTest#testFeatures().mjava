    @Test
    public void testFeatures() throws Exception {

        PowerMockito.whenNew(HttpClient.class)
                .withNoArguments()
                .thenReturn(clientMock)
                .thenReturn(clientMock);
        PowerMockito.whenNew(GetMethod.class)
                .withNoArguments()
                .thenReturn(getMock)
                .thenReturn(getMock);
        when(clientMock.executeMethod(getMock))
                .thenReturn(HttpStatus.SC_OK)
                .thenReturn(HttpStatus.SC_OK)
                .thenReturn(HttpStatus.SC_OK);
        when(getMock.getResponseBodyAsStream())
                .thenReturn(
                        ArcGISRestDataStoreFactoryTest.readJSONAsStream("test-data/catalog.json"))
                .thenReturn(
                        ArcGISRestDataStoreFactoryTest.readJSONAsStream(
                                "test-data/lgaDataset.json"))
                .thenReturn(
                        ArcGISRestDataStoreFactoryTest.readJSONAsStream(
                                "test-data/lgaDataset.json"));

        this.dataStore =
                (ArcGISRestDataStore)
                        ArcGISRestDataStoreFactoryTest.createDefaultOpenDataTestDataStore();
        this.dataStore.createTypeNames();

        FeatureSource<SimpleFeatureType, SimpleFeature> src =
                this.dataStore.createFeatureSource(
                        this.dataStore.getEntry(
                                new NameImpl(ArcGISRestDataStoreFactoryTest.NAMESPACE, TYPENAME1)));
        src.getSchema();

        // Test feature iteration
        this.clientMock = PowerMockito.mock(HttpClient.class);
        PowerMockito.whenNew(HttpClient.class).withNoArguments().thenReturn(this.clientMock);

        PowerMockito.whenNew(PostMethod.class).withNoArguments().thenReturn(this.postMock);
        when(this.clientMock.executeMethod(postMock)).thenReturn(HttpStatus.SC_OK);
        when(this.postMock.getResponseBodyAsStream())
                .thenReturn(
                        ArcGISRestDataStoreFactoryTest.readJSONAsStream(
                                "test-data/lgaFeatures.geo.json"));

        FeatureCollection<SimpleFeatureType, SimpleFeature> fc = src.getFeatures(new Query());
        FeatureIterator iter = fc.features();

        assertEquals(CRS.decode("EPSG:3857"), fc.getSchema().getCoordinateReferenceSystem());
        assertEquals(true, iter.hasNext());
        SimpleFeature sf = (SimpleFeature) iter.next();
        assertEquals(true, iter.hasNext());
        sf = (SimpleFeature) iter.next();
        assertEquals(
                "POINT (16421261.466298774 -4592239.022226746)",
                ((Geometry) (sf.getAttribute("geometry"))).getCentroid().toString());
        assertEquals("Wellington (S)", sf.getAttribute("LGA"));
        assertEquals(false, iter.hasNext());
        assertEquals(false, iter.hasNext());
    }

