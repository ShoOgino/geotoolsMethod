    @Test
    public void testFeaturesWithDate() throws Exception {

        PowerMockito.mockStatic(HttpClients.class);
        PowerMockito.when(HttpClients.createDefault()).thenReturn(clientMock);
        PowerMockito.whenNew(HttpGet.class)
                .withNoArguments()
                .thenReturn(getMock)
                .thenReturn(getMock);
        when(clientMock.execute(getMock)).thenReturn(responseMock);
        when(responseMock.getStatusLine()).thenReturn(responseMockStatusLine);
        when(responseMockStatusLine.getStatusCode()).thenReturn(HttpStatus.SC_OK);
        when(responseMock.getEntity()).thenReturn(responseMockEntity);
        when(responseMockEntity.getContent())
                .thenReturn(
                        ArcGISRestDataStoreFactoryTest.readJSONAsStream("test-data/catalog.json"))
                .thenReturn(
                        ArcGISRestDataStoreFactoryTest.readJSONAsStream(
                                "test-data/bicycleDataset.json"))
                .thenReturn(
                        ArcGISRestDataStoreFactoryTest.readJSONAsStream(
                                "test-data/bicycleDataset.json"));

        this.dataStore =
                (ArcGISRestDataStore)
                        ArcGISRestDataStoreFactoryTest.createDefaultOpenDataTestDataStore();
        this.dataStore.createTypeNames();

        FeatureSource<SimpleFeatureType, SimpleFeature> src =
                this.dataStore.createFeatureSource(
                        this.dataStore.getEntry(
                                new NameImpl(ArcGISRestDataStoreFactoryTest.NAMESPACE, TYPENAME4)));
        src.getSchema();

        PowerMockito.whenNew(HttpPost.class).withNoArguments().thenReturn(this.postMock);
        when(this.clientMock.execute(postMock)).thenReturn(responseMock);
        when(responseMock.getStatusLine()).thenReturn(responseMockStatusLine);
        when(responseMockStatusLine.getStatusCode()).thenReturn(HttpStatus.SC_OK);
        when(responseMock.getEntity()).thenReturn(responseMockEntity);
        when(responseMockEntity.getContent())
                .thenReturn(
                        ArcGISRestDataStoreFactoryTest.readJSONAsStream(
                                "test-data/bicycleFeatures.geo.json"));

        FeatureCollection<SimpleFeatureType, SimpleFeature> fc = src.getFeatures(new Query());
        FeatureIterator iter = fc.features();

        assertEquals(true, iter.hasNext());
        SimpleFeature sf = (SimpleFeature) iter.next();
        assertEquals("ROAD", sf.getAttribute("LOCAL_TYPE"));
        assertEquals(5532, sf.getAttribute("RD_NUM"));
        assertNull(sf.getAttribute("VERI_DATE"));
        assertEquals(true, iter.hasNext());
        sf = (SimpleFeature) iter.next();
        assertEquals("ROAD", sf.getAttribute("LOCAL_TYPE"));
        assertEquals(5068, sf.getAttribute("RD_NUM"));
        assertEquals(
                (new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSX"))
                        .parse("2011-08-02T00:00:00.000Z"),
                sf.getAttribute("VERI_DATE"));
    }

