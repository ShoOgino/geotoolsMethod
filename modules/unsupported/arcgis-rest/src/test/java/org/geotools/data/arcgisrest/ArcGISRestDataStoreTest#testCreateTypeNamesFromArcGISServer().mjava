    @Test
    public void testCreateTypeNamesFromArcGISServer() throws Exception {

        this.clientMock = PowerMockito.mock(HttpClient.class);
        PowerMockito.whenNew(HttpClient.class)
                .withNoArguments()
                .thenReturn(clientMock)
                .thenReturn(clientMock);
        this.getMock = PowerMockito.mock(GetMethod.class);
        PowerMockito.whenNew(GetMethod.class)
                .withNoArguments()
                .thenReturn(getMock)
                .thenReturn(getMock);
        when(clientMock.executeMethod(getMock))
                .thenReturn(HttpStatus.SC_OK)
                .thenReturn(HttpStatus.SC_OK)
                .thenReturn(HttpStatus.SC_OK);
        when(getMock.getResponseBodyAsStream())
                .thenReturn(
                        ArcGISRestDataStoreFactoryTest.readJSONAsStream(
                                "test-data/FeatureServerAirport.json"))
                .thenReturn(
                        ArcGISRestDataStoreFactoryTest.readJSONAsStream(
                                "test-data/airport2Dataset.json"))
                .thenReturn(
                        ArcGISRestDataStoreFactoryTest.readJSONAsStream(
                                "test-data/airport3Dataset.json"));

        this.dataStore =
                (ArcGISRestDataStore)
                        ArcGISRestDataStoreFactoryTest.createDefaultArcGISServerTestDataStore();
        List<Name> names = this.dataStore.createTypeNames();

        assertEquals(2, names.size());
        assertEquals(TYPENAME2, names.get(0).getLocalPart());
        assertEquals(TYPENAME3, names.get(1).getLocalPart());
        assertEquals(ArcGISRestDataStoreFactoryTest.NAMESPACE, names.get(0).getNamespaceURI());

        assertNotNull(
                this.dataStore.getEntry(
                        new NameImpl(ArcGISRestDataStoreFactoryTest.NAMESPACE, TYPENAME2)));
    }

