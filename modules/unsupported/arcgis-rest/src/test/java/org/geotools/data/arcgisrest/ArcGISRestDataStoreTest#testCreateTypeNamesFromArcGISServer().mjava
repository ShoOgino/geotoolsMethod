    @Test
    public void testCreateTypeNamesFromArcGISServer() throws Exception {

        PowerMockito.mockStatic(HttpClients.class);
        PowerMockito.when(HttpClients.createDefault()).thenReturn(clientMock);
        PowerMockito.whenNew(HttpGet.class)
                .withNoArguments()
                .thenReturn(getMock)
                .thenReturn(getMock);
        when(clientMock.execute(getMock)).thenReturn(responseMock);
        when(responseMock.getStatusLine()).thenReturn(responseMockStatusLine);
        when(responseMockStatusLine.getStatusCode()).thenReturn(HttpStatus.SC_OK);
        when(responseMock.getEntity()).thenReturn(responseMockEntity);
        when(responseMockEntity.getContent())
                .thenReturn(
                        ArcGISRestDataStoreFactoryTest.readJSONAsStream(
                                "test-data/FeatureServerAirport.json"))
                .thenReturn(
                        ArcGISRestDataStoreFactoryTest.readJSONAsStream(
                                "test-data/airport2Dataset.json"))
                .thenReturn(
                        ArcGISRestDataStoreFactoryTest.readJSONAsStream(
                                "test-data/airport3Dataset.json"));

        this.dataStore =
                (ArcGISRestDataStore)
                        ArcGISRestDataStoreFactoryTest.createDefaultArcGISServerTestDataStore();
        List<Name> names = this.dataStore.createTypeNames();

        assertEquals(2, names.size());
        assertEquals(TYPENAME2, names.get(0).getLocalPart());
        assertEquals(TYPENAME3, names.get(1).getLocalPart());
        assertEquals(ArcGISRestDataStoreFactoryTest.NAMESPACE, names.get(0).getNamespaceURI());

        assertNotNull(
                this.dataStore.getEntry(
                        new NameImpl(ArcGISRestDataStoreFactoryTest.NAMESPACE, TYPENAME2)));
    }

