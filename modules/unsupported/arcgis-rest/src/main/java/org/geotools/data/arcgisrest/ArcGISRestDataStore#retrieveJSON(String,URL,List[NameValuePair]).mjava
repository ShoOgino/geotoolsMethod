    /**
     * Helper method returning a JSON String out of a resource belonging to a ArcGIS ReST API
     * instance (via a GET).If present, it sends authorisation.
     *
     * @param methType the method (GET or POST) to use
     * @param url The endpoint of the resource
     * @param params Request parameters
     * @return A string representing the JSON, null
     * @throws IOException
     */
    public InputStream retrieveJSON(String methType, URL url, List<NameValuePair> params)
            throws IOException {

        CloseableHttpClient client = HttpClients.createDefault();

        // Instantiates the method based on the methType parameter
        HttpRequestBase meth;
        if (methType.equals("GET")) {
            meth = new HttpGet();
        } else {
            meth = new HttpPost();
        }

        URI uri;
        try {
            uri = new URIBuilder(url.toString()).setParameters(params).build();
        } catch (URISyntaxException ex) {
            throw new IOException(ex.getMessage());
        }
        meth.setURI(uri);

        // Adds authorization if login/password is set
        if (this.user != null && this.password != null) {
            meth.addHeader(
                    "Authentication", (new UsernamePasswordCredentials(user, password)).toString());
        }

        CloseableHttpResponse response;

        // Re-tries the request if necessary
        while (true) {

            // Executes the request (a POST, since the URL may get too long)
            response = client.execute(meth);

            // If HTTP error, throws an exception
            if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
                throw new IOException(
                        "HTTP Status: "
                                + response.getStatusLine().getStatusCode()
                                + " for URL: "
                                + uri
                                + " response: "
                                + response.toString());
            }

            // Retrieve the wait period is returned by the server
            int wait = 0;
            Header header = meth.getFirstHeader("Retry-After");
            if (header != null) {
                wait = Integer.valueOf(header.getValue());
            }

            // Exits if no retry is necessary
            if (wait == 0) {
                break;
            }

            try {
                Thread.sleep(wait * 1000);
            } catch (InterruptedException e) {
                LOGGER.log(Level.SEVERE, "InterruptedException: " + e.getMessage());
                throw new IOException(e);
            }
        }

        // Extracts and returns the response
        return response.getEntity().getContent();
    }

