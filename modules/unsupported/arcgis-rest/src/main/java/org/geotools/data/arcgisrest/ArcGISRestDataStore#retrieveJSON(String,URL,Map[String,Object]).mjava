    /**
     * Helper method returning a JSON String out of a resource belongining to a ArcGIS ReST API
     * instance (via a GET). If present, it sends authorixzation.
     *
     * @param url The endpoint of the resource
     * @param params Request parameters
     * @return A string representing the JSON, null
     * @throws IOException
     * @throws InterruptedException
     */
    public InputStream retrieveJSON(String methType, URL url, Map<String, Object> params)
            throws IOException {

        HttpClient client = new HttpClient();

        // Instanties the method based on the methType parameter
        HttpMethodBase meth;
        if (methType.equals("GET")) {
            meth = new GetMethod();
        } else {
            meth = new PostMethod();
        }

        // Sets the URI, request parameters and request body (depending on method
        // type)
        URI uri = new URI(url.toString(), false);
        NameValuePair[] kvps = new NameValuePair[params.size()];
        int i = 0;
        for (Object entry : params.entrySet().toArray()) {
            kvps[i++] =
                    new NameValuePair(
                            ((Map.Entry) entry).getKey().toString(),
                            ((Map.Entry) entry).getValue().toString());
        }

        if (methType.equals("GET")) {
            meth.setQueryString(kvps);
            uri.setQuery(meth.getQueryString());
            this.LOGGER.log(
                    Level.FINER,
                    "About to query GET " + url.toString() + "?" + meth.getQueryString());
        } else {
            ((PostMethod) (meth)).setContentChunked(true);
            ((PostMethod) (meth)).setRequestBody(kvps);
            this.LOGGER.log(
                    Level.FINER,
                    "About to query POST " + url.toString() + " with body: " + params.toString());
        }

        meth.setURI(uri);

        // Adds authorization if login/password is set
        if (this.user != null && this.password != null) {
            meth.addRequestHeader(
                    "Authentication", (new UsernamePasswordCredentials(user, password)).toString());
        }

        // Re-tries the request if necessary
        while (true) {

            // Executes the request (a POST, since the URL may get too long)
            int status = client.executeMethod(meth);

            // If HTTP error, throws an exception
            if (status != HttpStatus.SC_OK) {
                throw new IOException(
                        "HTTP Status: "
                                + status
                                + " for URL: "
                                + uri
                                + " response: "
                                + meth.getResponseBodyAsString());
            }

            // Retrieve the wait period is returned by the server
            int wait = 0;
            Header header = meth.getResponseHeader("Retry-After");
            if (header != null) {
                wait = Integer.valueOf(header.getValue());
            }

            // Exists if no retry is necessary
            if (wait == 0) {
                break;
            }

            try {
                Thread.sleep(wait * 1000);
            } catch (InterruptedException e) {
                LOGGER.log(Level.SEVERE, "InterruptedException: " + e.getMessage());
                throw new IOException(e);
            }
        }

        // Extracts an returns the response
        return meth.getResponseBodyAsStream();
    }

