    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(Webservice.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');
        sb.append("currentVersion");
        sb.append('=');
        sb.append(((this.currentVersion == null)?"<null>":this.currentVersion));
        sb.append(',');
        sb.append("id");
        sb.append('=');
        sb.append(((this.id == null)?"<null>":this.id));
        sb.append(',');
        sb.append("name");
        sb.append('=');
        sb.append(((this.name == null)?"<null>":this.name));
        sb.append(',');
        sb.append("type");
        sb.append('=');
        sb.append(((this.type == null)?"<null>":this.type));
        sb.append(',');
        sb.append("serviceItemId");
        sb.append('=');
        sb.append(((this.serviceItemId == null)?"<null>":this.serviceItemId));
        sb.append(',');
        sb.append("displayField");
        sb.append('=');
        sb.append(((this.displayField == null)?"<null>":this.displayField));
        sb.append(',');
        sb.append("description");
        sb.append('=');
        sb.append(((this.description == null)?"<null>":this.description));
        sb.append(',');
        sb.append("copyrightText");
        sb.append('=');
        sb.append(((this.copyrightText == null)?"<null>":this.copyrightText));
        sb.append(',');
        sb.append("defaultVisibility");
        sb.append('=');
        sb.append(((this.defaultVisibility == null)?"<null>":this.defaultVisibility));
        sb.append(',');
        sb.append("editingInfo");
        sb.append('=');
        sb.append(((this.editingInfo == null)?"<null>":this.editingInfo));
        sb.append(',');
        sb.append("multiScaleGeometryInfo");
        sb.append('=');
        sb.append(((this.multiScaleGeometryInfo == null)?"<null>":this.multiScaleGeometryInfo));
        sb.append(',');
        sb.append("relationships");
        sb.append('=');
        sb.append(((this.relationships == null)?"<null>":this.relationships));
        sb.append(',');
        sb.append("isDataVersioned");
        sb.append('=');
        sb.append(((this.isDataVersioned == null)?"<null>":this.isDataVersioned));
        sb.append(',');
        sb.append("supportsCalculate");
        sb.append('=');
        sb.append(((this.supportsCalculate == null)?"<null>":this.supportsCalculate));
        sb.append(',');
        sb.append("supportsTruncate");
        sb.append('=');
        sb.append(((this.supportsTruncate == null)?"<null>":this.supportsTruncate));
        sb.append(',');
        sb.append("supportsAttachmentsByUploadId");
        sb.append('=');
        sb.append(((this.supportsAttachmentsByUploadId == null)?"<null>":this.supportsAttachmentsByUploadId));
        sb.append(',');
        sb.append("supportsRollbackOnFailureParameter");
        sb.append('=');
        sb.append(((this.supportsRollbackOnFailureParameter == null)?"<null>":this.supportsRollbackOnFailureParameter));
        sb.append(',');
        sb.append("supportsStatistics");
        sb.append('=');
        sb.append(((this.supportsStatistics == null)?"<null>":this.supportsStatistics));
        sb.append(',');
        sb.append("supportsAdvancedQueries");
        sb.append('=');
        sb.append(((this.supportsAdvancedQueries == null)?"<null>":this.supportsAdvancedQueries));
        sb.append(',');
        sb.append("supportsValidateSql");
        sb.append('=');
        sb.append(((this.supportsValidateSql == null)?"<null>":this.supportsValidateSql));
        sb.append(',');
        sb.append("supportsCoordinatesQuantization");
        sb.append('=');
        sb.append(((this.supportsCoordinatesQuantization == null)?"<null>":this.supportsCoordinatesQuantization));
        sb.append(',');
        sb.append("supportsApplyEditsWithGlobalIds");
        sb.append('=');
        sb.append(((this.supportsApplyEditsWithGlobalIds == null)?"<null>":this.supportsApplyEditsWithGlobalIds));
        sb.append(',');
        sb.append("supportsMultiScaleGeometry");
        sb.append('=');
        sb.append(((this.supportsMultiScaleGeometry == null)?"<null>":this.supportsMultiScaleGeometry));
        sb.append(',');
        sb.append("advancedQueryCapabilities");
        sb.append('=');
        sb.append(((this.advancedQueryCapabilities == null)?"<null>":this.advancedQueryCapabilities));
        sb.append(',');
        sb.append("useStandardizedQueries");
        sb.append('=');
        sb.append(((this.useStandardizedQueries == null)?"<null>":this.useStandardizedQueries));
        sb.append(',');
        sb.append("geometryType");
        sb.append('=');
        sb.append(((this.geometryType == null)?"<null>":this.geometryType));
        sb.append(',');
        sb.append("minScale");
        sb.append('=');
        sb.append(((this.minScale == null)?"<null>":this.minScale));
        sb.append(',');
        sb.append("maxScale");
        sb.append('=');
        sb.append(((this.maxScale == null)?"<null>":this.maxScale));
        sb.append(',');
        sb.append("extent");
        sb.append('=');
        sb.append(((this.extent == null)?"<null>":this.extent));
        sb.append(',');
        sb.append("drawingInfo");
        sb.append('=');
        sb.append(((this.drawingInfo == null)?"<null>":this.drawingInfo));
        sb.append(',');
        sb.append("allowGeometryUpdates");
        sb.append('=');
        sb.append(((this.allowGeometryUpdates == null)?"<null>":this.allowGeometryUpdates));
        sb.append(',');
        sb.append("hasAttachments");
        sb.append('=');
        sb.append(((this.hasAttachments == null)?"<null>":this.hasAttachments));
        sb.append(',');
        sb.append("htmlPopupType");
        sb.append('=');
        sb.append(((this.htmlPopupType == null)?"<null>":this.htmlPopupType));
        sb.append(',');
        sb.append("hasM");
        sb.append('=');
        sb.append(((this.hasM == null)?"<null>":this.hasM));
        sb.append(',');
        sb.append("hasZ");
        sb.append('=');
        sb.append(((this.hasZ == null)?"<null>":this.hasZ));
        sb.append(',');
        sb.append("objectIdField");
        sb.append('=');
        sb.append(((this.objectIdField == null)?"<null>":this.objectIdField));
        sb.append(',');
        sb.append("globalIdField");
        sb.append('=');
        sb.append(((this.globalIdField == null)?"<null>":this.globalIdField));
        sb.append(',');
        sb.append("typeIdField");
        sb.append('=');
        sb.append(((this.typeIdField == null)?"<null>":this.typeIdField));
        sb.append(',');
        sb.append("fields");
        sb.append('=');
        sb.append(((this.fields == null)?"<null>":this.fields));
        sb.append(',');
        sb.append("indexes");
        sb.append('=');
        sb.append(((this.indexes == null)?"<null>":this.indexes));
        sb.append(',');
        sb.append("types");
        sb.append('=');
        sb.append(((this.types == null)?"<null>":this.types));
        sb.append(',');
        sb.append("templates");
        sb.append('=');
        sb.append(((this.templates == null)?"<null>":this.templates));
        sb.append(',');
        sb.append("supportedQueryFormats");
        sb.append('=');
        sb.append(((this.supportedQueryFormats == null)?"<null>":this.supportedQueryFormats));
        sb.append(',');
        sb.append("hasStaticData");
        sb.append('=');
        sb.append(((this.hasStaticData == null)?"<null>":this.hasStaticData));
        sb.append(',');
        sb.append("maxRecordCount");
        sb.append('=');
        sb.append(((this.maxRecordCount == null)?"<null>":this.maxRecordCount));
        sb.append(',');
        sb.append("standardMaxRecordCount");
        sb.append('=');
        sb.append(((this.standardMaxRecordCount == null)?"<null>":this.standardMaxRecordCount));
        sb.append(',');
        sb.append("tileMaxRecordCount");
        sb.append('=');
        sb.append(((this.tileMaxRecordCount == null)?"<null>":this.tileMaxRecordCount));
        sb.append(',');
        sb.append("maxRecordCountFactor");
        sb.append('=');
        sb.append(((this.maxRecordCountFactor == null)?"<null>":this.maxRecordCountFactor));
        sb.append(',');
        sb.append("capabilities");
        sb.append('=');
        sb.append(((this.capabilities == null)?"<null>":this.capabilities));
        sb.append(',');
        if (sb.charAt((sb.length()- 1)) == ',') {
            sb.setCharAt((sb.length()- 1), ']');
        } else {
            sb.append(']');
        }
        return sb.toString();
    }

