    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(Dataset.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');
        sb.append("type");
        sb.append('=');
        sb.append(((this.type == null)?"<null>":this.type));
        sb.append(',');
        sb.append("accessLevel");
        sb.append('=');
        sb.append(((this.accessLevel == null)?"<null>":this.accessLevel));
        sb.append(',');
        sb.append("rights");
        sb.append('=');
        sb.append(((this.rights == null)?"<null>":this.rights));
        sb.append(',');
        sb.append("accrualPeriodicity");
        sb.append('=');
        sb.append(((this.accrualPeriodicity == null)?"<null>":this.accrualPeriodicity));
        sb.append(',');
        sb.append("bureauCode");
        sb.append('=');
        sb.append(((this.bureauCode == null)?"<null>":this.bureauCode));
        sb.append(',');
        sb.append("contactPoint");
        sb.append('=');
        sb.append(((this.contactPoint == null)?"<null>":this.contactPoint));
        sb.append(',');
        sb.append("describedBy");
        sb.append('=');
        sb.append(((this.describedBy == null)?"<null>":this.describedBy));
        sb.append(',');
        sb.append("describedByType");
        sb.append('=');
        sb.append(((this.describedByType == null)?"<null>":this.describedByType));
        sb.append(',');
        sb.append("conformsTo");
        sb.append('=');
        sb.append(((this.conformsTo == null)?"<null>":this.conformsTo));
        sb.append(',');
        sb.append("dataQuality");
        sb.append('=');
        sb.append(((this.dataQuality == null)?"<null>":this.dataQuality));
        sb.append(',');
        sb.append("description");
        sb.append('=');
        sb.append(((this.description == null)?"<null>":this.description));
        sb.append(',');
        sb.append("distribution");
        sb.append('=');
        sb.append(((this.distribution == null)?"<null>":this.distribution));
        sb.append(',');
        sb.append("identifier");
        sb.append('=');
        sb.append(((this.identifier == null)?"<null>":this.identifier));
        sb.append(',');
        sb.append("issued");
        sb.append('=');
        sb.append(((this.issued == null)?"<null>":this.issued));
        sb.append(',');
        sb.append("keyword");
        sb.append('=');
        sb.append(((this.keyword == null)?"<null>":this.keyword));
        sb.append(',');
        sb.append("landingPage");
        sb.append('=');
        sb.append(((this.landingPage == null)?"<null>":this.landingPage));
        sb.append(',');
        sb.append("webService");
        sb.append('=');
        sb.append(((this.webService == null)?"<null>":this.webService));
        sb.append(',');
        sb.append("language");
        sb.append('=');
        sb.append(((this.language == null)?"<null>":this.language));
        sb.append(',');
        sb.append("license");
        sb.append('=');
        sb.append(((this.license == null)?"<null>":this.license));
        sb.append(',');
        sb.append("modified");
        sb.append('=');
        sb.append(((this.modified == null)?"<null>":this.modified));
        sb.append(',');
        sb.append("primaryITInvestmentUII");
        sb.append('=');
        sb.append(((this.primaryITInvestmentUII == null)?"<null>":this.primaryITInvestmentUII));
        sb.append(',');
        sb.append("programCode");
        sb.append('=');
        sb.append(((this.programCode == null)?"<null>":this.programCode));
        sb.append(',');
        sb.append("publisher");
        sb.append('=');
        sb.append(((this.publisher == null)?"<null>":this.publisher));
        sb.append(',');
        sb.append("references");
        sb.append('=');
        sb.append(((this.references == null)?"<null>":this.references));
        sb.append(',');
        sb.append("spatial");
        sb.append('=');
        sb.append(((this.spatial == null)?"<null>":this.spatial));
        sb.append(',');
        sb.append("systemOfRecords");
        sb.append('=');
        sb.append(((this.systemOfRecords == null)?"<null>":this.systemOfRecords));
        sb.append(',');
        sb.append("temporal");
        sb.append('=');
        sb.append(((this.temporal == null)?"<null>":this.temporal));
        sb.append(',');
        sb.append("isPartOf");
        sb.append('=');
        sb.append(((this.isPartOf == null)?"<null>":this.isPartOf));
        sb.append(',');
        sb.append("theme");
        sb.append('=');
        sb.append(((this.theme == null)?"<null>":this.theme));
        sb.append(',');
        sb.append("title");
        sb.append('=');
        sb.append(((this.title == null)?"<null>":this.title));
        sb.append(',');
        if (sb.charAt((sb.length()- 1)) == ',') {
            sb.setCharAt((sb.length()- 1), ']');
        } else {
            sb.append(']');
        }
        return sb.toString();
    }

