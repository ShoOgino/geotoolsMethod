    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(Featureserver.class.getName()).append('@').append(Integer.toHexString(System.identityHashCode(this))).append('[');
        sb.append("currentVersion");
        sb.append('=');
        sb.append(((this.currentVersion == null)?"<null>":this.currentVersion));
        sb.append(',');
        sb.append("serviceItemId");
        sb.append('=');
        sb.append(((this.serviceItemId == null)?"<null>":this.serviceItemId));
        sb.append(',');
        sb.append("serviceDescription");
        sb.append('=');
        sb.append(((this.serviceDescription == null)?"<null>":this.serviceDescription));
        sb.append(',');
        sb.append("hasVersionedData");
        sb.append('=');
        sb.append(((this.hasVersionedData == null)?"<null>":this.hasVersionedData));
        sb.append(',');
        sb.append("supportsDisconnectedEditing");
        sb.append('=');
        sb.append(((this.supportsDisconnectedEditing == null)?"<null>":this.supportsDisconnectedEditing));
        sb.append(',');
        sb.append("hasStaticData");
        sb.append('=');
        sb.append(((this.hasStaticData == null)?"<null>":this.hasStaticData));
        sb.append(',');
        sb.append("maxRecordCount");
        sb.append('=');
        sb.append(((this.maxRecordCount == null)?"<null>":this.maxRecordCount));
        sb.append(',');
        sb.append("supportedQueryFormats");
        sb.append('=');
        sb.append(((this.supportedQueryFormats == null)?"<null>":this.supportedQueryFormats));
        sb.append(',');
        sb.append("capabilities");
        sb.append('=');
        sb.append(((this.capabilities == null)?"<null>":this.capabilities));
        sb.append(',');
        sb.append("description");
        sb.append('=');
        sb.append(((this.description == null)?"<null>":this.description));
        sb.append(',');
        sb.append("copyrightText");
        sb.append('=');
        sb.append(((this.copyrightText == null)?"<null>":this.copyrightText));
        sb.append(',');
        sb.append("spatialReference");
        sb.append('=');
        sb.append(((this.spatialReference == null)?"<null>":this.spatialReference));
        sb.append(',');
        sb.append("initialExtent");
        sb.append('=');
        sb.append(((this.initialExtent == null)?"<null>":this.initialExtent));
        sb.append(',');
        sb.append("fullExtent");
        sb.append('=');
        sb.append(((this.fullExtent == null)?"<null>":this.fullExtent));
        sb.append(',');
        sb.append("allowGeometryUpdates");
        sb.append('=');
        sb.append(((this.allowGeometryUpdates == null)?"<null>":this.allowGeometryUpdates));
        sb.append(',');
        sb.append("units");
        sb.append('=');
        sb.append(((this.units == null)?"<null>":this.units));
        sb.append(',');
        sb.append("size");
        sb.append('=');
        sb.append(((this.size == null)?"<null>":this.size));
        sb.append(',');
        sb.append("syncEnabled");
        sb.append('=');
        sb.append(((this.syncEnabled == null)?"<null>":this.syncEnabled));
        sb.append(',');
        sb.append("syncCapabilities");
        sb.append('=');
        sb.append(((this.syncCapabilities == null)?"<null>":this.syncCapabilities));
        sb.append(',');
        sb.append("supportsApplyEditsWithGlobalIds");
        sb.append('=');
        sb.append(((this.supportsApplyEditsWithGlobalIds == null)?"<null>":this.supportsApplyEditsWithGlobalIds));
        sb.append(',');
        sb.append("editorTrackingInfo");
        sb.append('=');
        sb.append(((this.editorTrackingInfo == null)?"<null>":this.editorTrackingInfo));
        sb.append(',');
        sb.append("xssPreventionInfo");
        sb.append('=');
        sb.append(((this.xssPreventionInfo == null)?"<null>":this.xssPreventionInfo));
        sb.append(',');
        sb.append("layers");
        sb.append('=');
        sb.append(((this.layers == null)?"<null>":this.layers));
        sb.append(',');
        sb.append("tables");
        sb.append('=');
        sb.append(((this.tables == null)?"<null>":this.tables));
        sb.append(',');
        if (sb.charAt((sb.length()- 1)) == ',') {
            sb.setCharAt((sb.length()- 1), ']');
        } else {
            sb.append(']');
        }
        return sb.toString();
    }

