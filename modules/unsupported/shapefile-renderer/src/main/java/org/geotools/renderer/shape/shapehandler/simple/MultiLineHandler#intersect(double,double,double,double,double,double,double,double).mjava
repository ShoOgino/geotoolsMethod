    /**
     * Uses Cohen Sutherland line clipping algorithm to determine intersection.
     * See  Computer Graphics: Principles and Practice Foley, van Dam,
     * Feiner, Hughes
     *
     * @param x0 DOCUMENT ME!
     * @param y0 DOCUMENT ME!
     * @param x1 DOCUMENT ME!
     * @param y1 DOCUMENT ME!
     * @param xmin DOCUMENT ME!
     * @param ymin DOCUMENT ME!
     * @param xmax DOCUMENT ME!
     * @param ymax DOCUMENT ME!
     *
     * @return DOCUMENT ME!
     */
    public static boolean intersect(double x0, double y0, double x1, double y1,
        double xmin, double ymin, double xmax, double ymax) {
        boolean accept = false;
        boolean done = false;
        int outcode0 = compOutCode(x0, y0, xmin, xmax, ymin, ymax);
        int outcode1 = compOutCode(x1, y1, xmin, xmax, ymin, ymax);

        do {
            if ((outcode0 == 0) || (outcode1 == 0)) { // trivial accept and exit
                accept = done = true;
            } else if ((outcode0 & outcode1) != 0) { // logical and is true so trivial reject and exit
                done = true;
            } else {
                // failed both tests so calculate the line segment to clip:
                //from an otside poin to the intersectin with clip edge.
                double x;

                // failed both tests so calculate the line segment to clip:
                //from an otside poin to the intersectin with clip edge.
                double y;

                //at least one endpoint is outside the clip rectangle so pick it.
                int outcodeOut = (outcode0 > 0) ? outcode0 : outcode1;

                //Now find intersection point 
                if ((outcodeOut & TOP) > 0) {
                    x = x0 + (((x1 - x0) * (ymax - y0)) / (y1 - y0));
                    y = ymax;
                } else if ((outcodeOut & BOTTOM) > 0) {
                    x = x0 + (((x1 - x0) * (ymin - y0)) / (y1 - y0));
                    y = ymin;
                } else if ((outcodeOut & RIGHT) > 0) {
                    y = y0 + (((y1 - y0) * (xmax - x0)) / (x1 - x0));
                    x = xmax;
                } else {
                    y = y0 + (((y1 - y0) * (xmin - x0)) / (x1 - x0));
                    x = xmin;
                }

                if (outcodeOut == outcode0) {
                    x0 = x;
                    y0 = y;
                    outcode0 = compOutCode(x0, y0, xmin, xmax, ymin, ymax);
                } else {
                    x1 = x;
                    y1 = y;
                    outcode1 = compOutCode(x1, y1, xmin, xmax, ymin, ymax);
                }
            }
        } while (done == false);

        return accept;
    }

