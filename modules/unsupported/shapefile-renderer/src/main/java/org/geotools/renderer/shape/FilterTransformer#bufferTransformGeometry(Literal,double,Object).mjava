    /**
     * Given a geometry literal, it buffers it with the provided distance, and then
     * transforms it with the given reprojection/affine transform we're applying.
     * Used to transform distance filters
     * @param geom
     * @param distance
     * @return
     */
    private Literal bufferTransformGeometry(Literal geomLiteral, double distance, Object extraData) {
        try {
            Geometry geometry = geomLiteral.evaluate(null, Geometry.class);
            Geometry buffered = geometry.buffer(distance);
            Geometry transformed = JTS.transform(buffered, mt);
            return getFactory(extraData).literal(transformed);
        } catch(Exception e) {
            throw new RuntimeException(e);
        }
    }

