    /**
     * DOCUMENT ME!
     * 
     * @param mathTransform DOCUMENT ME!
     * @return
     * @throws org.opengis.referencing.operation.NoninvertibleTransformException
     */
    private Decimator getDecimator( MathTransform mathTransform  )
            throws org.opengis.referencing.operation.NoninvertibleTransformException {
        Decimator decimator=null;
        
        if( mathTransform!=null )
            decimator = (Decimator) decimators.get(mathTransform);

        if (decimator == null) {
            decimator = new Decimator(mathTransform.inverse());

            decimators.put(mathTransform, decimator);
        }

        return decimator;
    }
//
//    /**
//     * Creates a JTS shape that is an approximation of the SImpleGeometry. This is ONLY use for
//     * labelling and is only created if a text symbolizer is part of the current style.
//     * 
//     * @param geom the geometry to wrap
//     * @return
//     * @throws TransformException
//     * @throws FactoryException
//     * @throws RuntimeException DOCUMENT ME!
//     */
//    LiteShape2 getLiteShape2( SimpleGeometry geom ) throws TransformException, FactoryException {
//        Geometry jtsGeom;
//        if ((geom.type == ShapeType.POLYGON) || (geom.type == ShapeType.POLYGONM)
//                || (geom.type == ShapeType.POLYGONZ)) {
//            double[] points = getPointSample(geom, true);
//            CoordinateSequence seq = new LiteCoordinateSequence(points);
//            Polygon poly;
//
//            try {
//                poly = geomFactory.createPolygon(geomFactory.createLinearRing(seq),
//                        new LinearRing[]{});
//            } catch (Exception e) {
//                throw new RuntimeException(e);
//            }
//
//            jtsGeom = geomFactory.createMultiPolygon(new Polygon[]{poly});
//        } else if ((geom.type == ShapeType.ARC) || (geom.type == ShapeType.ARCM)
//                || (geom.type == ShapeType.ARCZ)) {
//            double[] points = getPointSample(geom, false);
//            CoordinateSequence seq = new LiteCoordinateSequence(points);
//            jtsGeom = geomFactory.createMultiLineString(new LineString[]{geomFactory
//                    .createLineString(seq)});
//        } else if ((geom.type == ShapeType.MULTIPOINT) || (geom.type == ShapeType.MULTIPOINTM)
//                || (geom.type == ShapeType.MULTIPOINTZ)) {
//            double[] points = getPointSample(geom, false);
//            CoordinateSequence seq = new LiteCoordinateSequence(points);
//            jtsGeom = geomFactory.createMultiPoint(seq);
//        } else {
//            jtsGeom = geomFactory.createPoint(new Coordinate(geom.coords[0][0], geom.coords[0][1]));
//        }
//
//        LiteShape2 shape = new LiteShape2(jtsGeom, null, null, false);
//
//        return shape;
//    }

