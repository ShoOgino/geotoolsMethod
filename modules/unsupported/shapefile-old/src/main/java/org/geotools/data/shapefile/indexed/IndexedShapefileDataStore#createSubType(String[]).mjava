    /**
     * Much like {@link DataUtilities#createSubType(SimpleFeatureType, String[])}, but makes
     * sure to preserve the original attribute order
     * @param properties
     * @return
     * @throws SchemaException
     */
    public SimpleFeatureType createSubType(String[] properties) throws SchemaException {
        if (properties == null || properties.length == 0) {
            return schema;
        }

        boolean same = schema.getAttributeCount() == properties.length;

        for (int i = 0; (i < schema.getAttributeCount()) && same; i++) {
            same = schema.getDescriptor(i).getLocalName().equals(properties[i]);
        }

        if (same) {
            return schema;
        }

        SimpleFeatureTypeBuilder tb = new SimpleFeatureTypeBuilder();
        tb.setName( schema.getName() );
        
        Set<String> propIndex = new HashSet<String>(Arrays.asList(properties));
        for(AttributeDescriptor ad : schema.getAttributeDescriptors()) {
            if(propIndex.contains(ad.getLocalName()))
                tb.add(ad);
        }
        return tb.buildFeatureType();
    }

