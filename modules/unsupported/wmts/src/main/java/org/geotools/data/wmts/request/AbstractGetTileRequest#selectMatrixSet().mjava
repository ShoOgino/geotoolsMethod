    /**
     * From the Web Map Service Implementation Specification: "The required BBOX parameter allows a Client to request a particular Bounding Box. The
     * value of the BBOX parameter in a GetMap request is a list of comma-separated numbers of the form "minx,miny,maxx,maxy". If the WMS server has
     * declared that a Layer is not subsettable, then the Client shall specify exactly the declared Bounding Box values in the GetMap request and the
     * Server may issue a Service Exception otherwise."
     * <p>
     * You must also call setSRS to provide the spatial reference system information (or CRS:84 will be assumed)
     * 
     * @param bbox A string representing a bounding box in the format "minx,miny,maxx,maxy"
     */
//    public void setBBox(String bbox) {
//        String[] c = bbox.split(",");
//        double x1 = Double.parseDouble(c[0]);
//        double x2 = Double.parseDouble(c[2]);
//        double y1 = Double.parseDouble(c[1]);
//        double y2 = Double.parseDouble(c[3]);
//
//        CoordinateReferenceSystem crs = toServerCRS(srs, false);
//        if (isGeotoolsLongitudeFirstAxisOrderForced()
//                || crs.getCoordinateSystem().getAxis(0).getDirection().equals(AxisDirection.EAST)) {
//            this.requestedBBox = new ReferencedEnvelope(x1, x2, y1, y2, crs);
//        } else {
//            this.requestedBBox = new ReferencedEnvelope(y1, y2, x1, x2, crs);
//        }
//
//    }

    private TileMatrixSet selectMatrixSet() throws ServiceException, RuntimeException {
        TileMatrixSet retMatrixSet = null;

        Map<String, TileMatrixSetLink> links = layer.getTileMatrixLinks();
        CoordinateReferenceSystem requestCRS = getCrs();
        LOGGER.fine("request CRS " + requestCRS.getName());
        if (requestCRS == null) {
            try {
                LOGGER.fine("request CRS decoding" + srs);
                requestCRS = CRS.decode(srs);

            } catch (FactoryException e) {
                LOGGER.log(Level.FINER, e.getMessage(), e);
                throw new RuntimeException(e);
            }
        }
        /* System.out.println(requestCRS); */
        for (TileMatrixSet matrixSet : capabilities.getMatrixSets()) {

            CoordinateReferenceSystem matrixCRS = null;
            try {
                matrixCRS = matrixSet.getCoordinateReferenceSystem();
            } catch (FactoryException e) {
                LOGGER.log(Level.FINER, e.getMessage(), e);
            }
            /* System.out.println("comparing "+coordinateReferenceSystem); */
            // TODO: possible issues here if axis order is not the same
            if (CRS.equalsIgnoreMetadata(requestCRS, matrixCRS)) {// matching SRS
                if (links.containsKey((matrixSet.getIdentifier()))) { // and available for this layer
                    LOGGER.fine("selected matrix set:" + matrixSet.getIdentifier());
                    setProperty(TILEMATRIXSET, matrixSet.getIdentifier());
                    retMatrixSet = matrixSet;

                    break;
                }
            }
        }
        if (retMatrixSet == null) {
            // Just pick one!
            LOGGER.warning("Failed to match the requested CRS (" + requestCRS.getName()
                    + ") with any of the tile matrices!");
            for (TileMatrixSet matrix : capabilities.getMatrixSets()) {
                if (links.containsKey((matrix.getIdentifier()))) { // available for this layer
                    LOGGER.fine("defaulting matrix set:" + matrix.getIdentifier());
                    setProperty(TILEMATRIXSET, matrix.getIdentifier());
                    retMatrixSet = matrix;

                    break;
                }
            }
            if (retMatrixSet == null) {
                throw new ServiceException("Unable to find a matching TileMatrixSet for layer "
                        + layer.getName() + " and SRS: " + requestCRS.getName());
            }
        }
        return retMatrixSet;
    }

