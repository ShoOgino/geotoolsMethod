    /**
     * This method parses the query and creates a string which can be appended to
     * the baseURL and then execute it to get response
     * Pulled from GeoRest DataStore
     * @param fnQuery
     * @return String
     */
    public static String encodeQuery(Query fnQuery, SimpleFeatureType targetType) throws UnsupportedEncodingException {

        boolean firstChar = false;

        // Transform query into URL parameters:
        StringBuilder urlBuilder = new StringBuilder();

        // Feature number limitation:
        if (!fnQuery.isMaxFeaturesUnlimited()) {
            urlBuilder.append(getGlueChar(firstChar));
            firstChar = false;
            urlBuilder.append("limit=");
            urlBuilder.append(fnQuery.getMaxFeatures());
        }

        boolean no_geom = true;
        // Should we retrieve all properties? and also check for no_geom
        if (!fnQuery.retrieveAllProperties() && fnQuery.getPropertyNames().length > 0) {
            urlBuilder.append(getGlueChar(firstChar));
            firstChar = false;
            urlBuilder.append("attrs=");
            for (int i = 0; i < fnQuery.getPropertyNames().length; i++) {
                if (targetType.getDescriptor(fnQuery.getPropertyNames()[i]) instanceof GeometryDescriptor) {
                    no_geom = false;
                }

                urlBuilder.append(URLEncoder.encode(fnQuery.getPropertyNames()[i], DEFAULT_ENCODING));

                if (i < fnQuery.getPropertyNames().length - 1) {
                    urlBuilder.append(",");
                }
            }
            /*This is to add no_geom*/
            if(no_geom) {
                urlBuilder.append(getGlueChar(firstChar));
                urlBuilder.append("no_geom=");
                urlBuilder.append(no_geom);
            }
        }

        // Perhaps use an offset to start counting from:
        if (fnQuery.getStartIndex() != null) {
            urlBuilder.append(getGlueChar(firstChar));
            firstChar = false;

            urlBuilder.append("offset=");
            urlBuilder.append(fnQuery.getStartIndex());
        }

        // Is there a certain order required?
        if (fnQuery.getSortBy() != null && fnQuery.getSortBy().length > 0) {

            urlBuilder.append(getGlueChar(firstChar));
            firstChar = false;
            
            urlBuilder.append("order_by=");
            urlBuilder.append(URLEncoder.encode(fnQuery.getSortBy()[0].getPropertyName().getPropertyName(), DEFAULT_ENCODING));

            urlBuilder.append(getGlueChar(firstChar));
            urlBuilder.append("dir=");
            SortOrder order = fnQuery.getSortBy()[0].getSortOrder();
            urlBuilder.append(URLEncoder.encode(order.name(), DEFAULT_ENCODING));
        }

        // Is there a filter present?
        if (fnQuery.getFilter() != null) {
            SFSFilterVisitor visitor = new SFSFilterVisitor(false);
            fnQuery.getFilter().accept(visitor, null);
            visitor.finish(urlBuilder, !firstChar);
            firstChar = false;
        }
        
        // handle the query hints
        if (fnQuery.getHints() != null
                && fnQuery.getHints().get(Hints.VIRTUAL_TABLE_PARAMETERS) != null) {
            Map<String, String> params = (Map<String, String>) fnQuery.getHints().get(
                    Hints.VIRTUAL_TABLE_PARAMETERS);

            urlBuilder.append(getGlueChar(firstChar));
            firstChar = false;
            urlBuilder.append("hints=");

            for (Iterator it = params.entrySet().iterator(); it.hasNext();) {
                Map.Entry<String, String> pair = (Map.Entry<String, String>) it.next();

                urlBuilder.append(URLEncoder.encode(pair.getKey().toString(), DEFAULT_ENCODING));
                urlBuilder.append(":");
                urlBuilder.append(URLEncoder.encode(pair.getValue().toString(), DEFAULT_ENCODING));
                if (it.hasNext()) {
                    urlBuilder.append(";");
                }
            }
        }

        if(urlBuilder.length() > 1) {
            return urlBuilder.substring(1).toString();
        } else {
            return "";
        }
    }

