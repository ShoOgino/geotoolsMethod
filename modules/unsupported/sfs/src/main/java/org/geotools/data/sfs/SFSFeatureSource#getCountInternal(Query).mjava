    /**
     * This method get the counts of the feature-set which satisfy the fnQuery
     * portions of this code has been borrowed from
     * https://svn.osgeo.org/geotools/trunk/modules/library/jdbc/src/main/java/org/geotools/jdbc/JDBCFeatureSource.java
     * @param fnQuery
     * @return count
     * @throws IOException
     */
    @Override
    protected int getCountInternal(Query fnQuery) throws IOException {

        int count = 0;
        /* Spilt the filter into two parts pre and post */
        Filter[] split = splitFilter(fnQuery.getFilter());

        Filter preFilter = split[0];
        Filter postFilter = split[1];

        if ((postFilter != null) && (postFilter != Filter.INCLUDE)) {

            return -1;

        } else {

            Query tmpPreQ = new Query(fnQuery);
            tmpPreQ.setFilter(preFilter);
            /**/
            String strQuery = SFSDataStoreUtil.encodeQuery(tmpPreQ, getSchema());

            /* Create the URL */
            String strCount = ods.resourceToString("data/" + layer.getTypeName().getLocalPart(), "mode=count&" + strQuery);

            try {
                count = Integer.parseInt(strCount);
            } catch (NumberFormatException nfe) {

                LOGGER.log(Level.SEVERE, "Number format Exception in getCountInternal : FeatureSource -- getCount --" + nfe.getMessage(), nfe);
                return 0;
            }
        }
        // Check if we need to handle a startIndex
        if (fnQuery.getStartIndex() != null && fnQuery.getStartIndex() > 0) {
            count = Math.max(0, count - fnQuery.getStartIndex());
        }
        /* Check if the count greater than maxFeature Limit*/
        if (fnQuery.getMaxFeatures() > 0 && count > fnQuery.getMaxFeatures()) {
            count = fnQuery.getMaxFeatures();
        }
        return count;
    }

