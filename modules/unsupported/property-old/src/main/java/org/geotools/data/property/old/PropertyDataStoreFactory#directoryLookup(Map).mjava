    /**
     * Lookups the directory containing property files in the params argument, and
     * returns the corresponding <code>java.io.File</code>.
     * <p>
     * The file is first checked for existence as an absolute path in the filesystem. If
     * such a directory is not found, then it is treated as a relative path, taking Java
     * system property <code>"user.dir"</code> as the base.
     * </p>
     * @param params
     * @throws IllegalArgumentException if directory is not a directory.
     * @throws FileNotFoundException if directory does not exists
     * @throws IOException if {@linkplain #DIRECTORY} doesn't find parameter in <code>params</code>
     * file does not exists.
     */
    private File directoryLookup(Map params) throws IOException, FileNotFoundException,
            IllegalArgumentException {
        File directory = (File) DIRECTORY.lookUp(params);
        if (!directory.exists()) {
            File currentDir = new File(System.getProperty("user.dir"));
            directory = new File(currentDir, (String) params.get(DIRECTORY.key));
            if (!directory.exists()) {
                throw new FileNotFoundException(directory.getAbsolutePath());
            }
            if (!directory.isDirectory()) {
                throw new IllegalArgumentException(directory.getAbsolutePath()
                        + " is not a directory");
            }
        } else if (!directory.isDirectory()) {
            // check if they pointed to a properties file; and use the parent directory
            if( directory.getPath().endsWith(".properties")){
                return directory.getParentFile();
            }
            else {
                throw new IllegalArgumentException(directory.getAbsolutePath() + " is not a directory");
            }
        }
        return directory;
    }

