    @Test
    public void testExecuteLineString() throws Exception {
        SimpleFeatureTypeBuilder tb = new SimpleFeatureTypeBuilder();
        tb.setName("featureType");
        tb.add("geometry", Geometry.class);
        tb.add("integer", Integer.class);

        GeometryFactory gf = new GeometryFactory();
        SimpleFeatureBuilder b = new SimpleFeatureBuilder(tb.buildFeatureType());

        DefaultFeatureCollection features = new DefaultFeatureCollection(null, b.getFeatureType());
        for (int numFeatures = 0; numFeatures < 5; numFeatures++) {
            Coordinate array[] = new Coordinate[4];
            int j = 0;
            for (int i = 0 + numFeatures; i < 4 + numFeatures; i++) {
                array[j] = new Coordinate(i, i);
                j++;
            }
            b.add(gf.createLineString(array));
            b.add(0);
            features.add(b.buildFeature(numFeatures + ""));
        }
        Double distance = Double.valueOf(500);
        BufferFeatureCollection process = new BufferFeatureCollection();
        SimpleFeatureCollection output = process.execute(features, distance, null);
        Assert.assertEquals(5, output.size());
        try (SimpleFeatureIterator iterator = output.features()) {
            for (int numFeatures = 0; numFeatures < 5; numFeatures++) {
                Coordinate[] array = new Coordinate[4];
                int j = 0;
                for (int i = 0 + numFeatures; i < 4 + numFeatures; i++) {
                    array[j] = new Coordinate(i, i);
                    j++;
                }
                Geometry expected = gf.createLineString(array).buffer(distance);
                SimpleFeature sf = iterator.next();
                Assert.assertTrue(expected.equals((Geometry) sf.getDefaultGeometry()));
            }

            Assert.assertEquals(
                    new ReferencedEnvelope(-500, 507, -500, 507, null), output.getBounds());
            Assert.assertEquals(5, output.size());
        }
    }

