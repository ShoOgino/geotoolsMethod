    @Test
    public void testFeatureCollectionFilteringByMax() throws Exception {
        SimpleFeatureSource source = store.getFeatureSource("featuresToGroup");
        Query query = new Query();
        query.setFilter(Filter.INCLUDE);
        SortBy[] sorts =
                new SortBy[] {
                    ff.sort("group", SortOrder.ASCENDING), ff.sort("group", SortOrder.ASCENDING)
                };
        query.setSortBy(sorts);
        FeatureCollection<SimpleFeatureType, SimpleFeature> collection = source.getFeatures(query);
        int size = collection.size();
        assertEquals(12, size);
        List<String> props = Arrays.asList("group", "group2");
        PropertyName pn = ff.property("numericVal");
        FeatureCollection<SimpleFeatureType, SimpleFeature> features =
                new GroupCandidateSelectionProcess<SimpleFeatureType, SimpleFeature>()
                        .execute(collection, "MAX", "numericVal", props);
        FeatureIterator it = features.features();
        List<Integer> numericResults = new ArrayList<>(6);
        while (it.hasNext()) {
            numericResults.add((Integer) pn.evaluate(it.next()));
        }
        it.close();
        assertEquals(40, numericResults.get(0).intValue());
        assertEquals(50, numericResults.get(1).intValue());
        assertEquals(22, numericResults.get(2).intValue());
        assertEquals(80, numericResults.get(3).intValue());
        assertEquals(57, numericResults.get(4).intValue());
        assertEquals(91, numericResults.get(5).intValue());
    }

