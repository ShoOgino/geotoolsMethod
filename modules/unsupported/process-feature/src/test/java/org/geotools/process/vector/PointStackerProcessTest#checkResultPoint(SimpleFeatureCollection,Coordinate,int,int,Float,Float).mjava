    /**
     * Check that a result set contains a stacked point in the right cell with expected attribute
     * values. Because it's not known in advance what the actual location of a stacked point will
     * be, a nearest-point strategy is used.
     * 
     * @param result
     * @param coordinate
     * @param i
     * @param j
     */
    private void checkResultPoint(SimpleFeatureCollection result, Coordinate testPt,
            int expectedCount, int expectedCountUnique, Float expectedProportion, Float expectedProportionUnique) {
        /**
         * Find closest point to loc pt, then check that the attributes match
         */
        double minDist = Double.MAX_VALUE;
        int count = -1;
        int countunique = -1;
        float proportion = Float.NaN;
        float proportionUnique = Float.NaN;

        // find nearest result to testPt
        for (SimpleFeatureIterator it = result.features(); it.hasNext();) {
            SimpleFeature f = it.next();
            Coordinate outPt = ((Point) f.getDefaultGeometry()).getCoordinate();
            double dist = outPt.distance(testPt);
            if (dist < minDist) {
                minDist = dist;
                count = (Integer) f.getAttribute(PointStackerProcess.ATTR_COUNT);
                countunique = (Integer) f.getAttribute(PointStackerProcess.ATTR_COUNT_UNIQUE);
                if(expectedProportion!=null){
                    proportion = (Float) f.getAttribute(PointStackerProcess.ATTR_PROPORTION);
                    proportionUnique = (Float) f.getAttribute(PointStackerProcess.ATTR_PROPORTION_UNIQUE);
                }
            }
        }
        assertEquals(expectedCount, count);
        assertEquals(expectedCountUnique, countunique);
        if(expectedProportion!=null) assertEquals(expectedProportion, proportion, 0.0001);
        if(expectedProportionUnique!=null) assertEquals(expectedProportionUnique, proportionUnique, 0.0001);
    }

