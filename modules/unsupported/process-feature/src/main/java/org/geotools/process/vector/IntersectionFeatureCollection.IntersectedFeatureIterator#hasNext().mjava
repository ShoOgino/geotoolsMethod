        @Override
        public boolean hasNext() {
            //   logger.info("qui");
            logger.finer("HAS NEXT");
            while ((next == null && delegate.hasNext()) || (next == null && added)) {
                //     logger.info("qui nel while");
                if (complete) {
                    first = delegate.next();
                    intersectedGeometries = null;
                }
                //               logger.info("qui dopo check if (complete)");
                // logger.finer("control HAS NEXT");
                for (Object attribute : first.getAttributes()) {
                    if (attribute instanceof Geometry
                            && attribute.equals(first.getDefaultGeometry())) {
                        Geometry currentGeom = (Geometry) attribute;

                        if (intersectedGeometries == null && !added) {
                            intersectedGeometries =
                                    filteredCollection(currentGeom, subFeatureCollection);
                            iterator = intersectedGeometries.features();
                        }
                        try {
                            while (iterator.hasNext()) {
                                added = false;
                                SimpleFeature second = iterator.next();
                                if (currentGeom
                                        .getEnvelope()
                                        .intersects(((Geometry) second.getDefaultGeometry()))) {
                                    // compute geometry
                                    if (intersectionMode == IntersectionMode.INTERSECTION) {
                                        attribute =
                                                currentGeom.intersection(
                                                        (Geometry) second.getDefaultGeometry());

                                        GeometryFilterImpl filter =
                                                new GeometryFilterImpl(
                                                        geomType.getType().getBinding());
                                        ((Geometry) attribute).apply(filter);
                                        attribute = filter.getGeometry();
                                    } else if (intersectionMode == IntersectionMode.FIRST) {
                                        attribute = currentGeom;
                                    } else if (intersectionMode == IntersectionMode.SECOND) {
                                        attribute = second.getDefaultGeometry();
                                    }
                                    if (((Geometry) attribute).getNumGeometries() > 0) {
                                        fb.add(attribute);
                                        fb.set("INTERSECTION_ID", id++);
                                        // add the non geometric attributes
                                        addAttributeValues(first, retainAttributesFst, fb);
                                        addAttributeValues(second, retainAttributesSnd, fb);
                                        // add the dynamic attributes
                                        if (percentagesEnabled) {
                                            addPercentages(currentGeom, second);
                                        }
                                        if (areasEnabled) {
                                            addAreas(currentGeom, second);
                                        }

                                        // build the feature
                                        next = fb.buildFeature(iterationIndex.toString());

                                        // update iterator status
                                        if (iterator.hasNext()) {
                                            complete = false;
                                            added = true;
                                            iterationIndex++;
                                            return next != null;
                                        }
                                        iterationIndex++;
                                    }
                                }
                                complete = false;
                            }
                            complete = true;
                        } finally {
                            if (!added) {
                                iterator.close();
                            }
                        }
                    }
                }
            }
            return next != null;
        }

