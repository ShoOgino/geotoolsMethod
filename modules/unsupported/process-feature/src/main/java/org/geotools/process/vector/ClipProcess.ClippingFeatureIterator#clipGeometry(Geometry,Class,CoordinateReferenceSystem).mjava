        private Object clipGeometry(Geometry geom, Class target, CoordinateReferenceSystem crs) {
            // first off, clip
            Geometry clipped = null;
            if(clipper != null) {
                clipped = clipper.clip(geom, true);
            } else {
                if(geom.getEnvelopeInternal().intersects(clip.getEnvelopeInternal())) {
                    clipped = clip.intersection(geom);
                }
            }
            
            // empty intersection?
            if(clipped == null || clipped.getNumGeometries() == 0) {
                return null;
            }
            
            // map the result to the target output type, removing the spurious lower dimensional
            // elements that might result out of the intersection
            Geometry result;
            if(Point.class.isAssignableFrom(target) || MultiPoint.class.isAssignableFrom(target) 
                    || GeometryCollection.class.equals(target)) {
                result = clipped;
            } else if(MultiLineString.class.isAssignableFrom(target) || LineString.class.isAssignableFrom(target)) {
                final List<LineString> geoms = new ArrayList<LineString>();
                clipped.apply(new GeometryComponentFilter() {
                    
                    @Override
                    public void filter(Geometry geom) {
                        if(geom instanceof LineString) {
                            geoms.add((LineString) geom);
                        }
                    }
                });
                if(geoms.size() == 0) {
                    result = null;
                } else {
                    LineString[] lsArray = (LineString[]) geoms.toArray(new LineString[geoms.size()]);
                    result = geom.getFactory().createMultiLineString(lsArray);
                }
            } else if(MultiPolygon.class.isAssignableFrom(target) || Polygon.class.isAssignableFrom(target)) {
                final List<Polygon> geoms = new ArrayList<Polygon>();
                clipped.apply(new GeometryComponentFilter() {
                    
                    @Override
                    public void filter(Geometry geom) {
                        if(geom instanceof Polygon) {
                            geoms.add((Polygon) geom);
                        }
                    }
                });
                if(geoms.size() == 0) {
                    result = null;
                } else {
                    Polygon[] lsArray = (Polygon[]) geoms.toArray(new Polygon[geoms.size()]);
                    result = geom.getFactory().createMultiPolygon(lsArray);
                }
            } else {
                throw new RuntimeException("Unrecognized target type " + target.getCanonicalName());
            }
            
            // manage Z preservation
            if(preserveZ && !geom.equalsExact(clipped)) {
                // for polygons we need to go idw, for points and multipoints idw will do and will not
                // add much overhead (it has optimizations for points that were already in the input)
                if(result instanceof MultiPolygon || result instanceof MultiPoint || result instanceof Point) {
                    result.apply(new IDWElevationInterpolator(geom, crs));
                } else if(result instanceof MultiLineString) {
                    result.apply(new LinearElevationInterpolator(geom, crs));
                }
            }
            
            return result;

        }

