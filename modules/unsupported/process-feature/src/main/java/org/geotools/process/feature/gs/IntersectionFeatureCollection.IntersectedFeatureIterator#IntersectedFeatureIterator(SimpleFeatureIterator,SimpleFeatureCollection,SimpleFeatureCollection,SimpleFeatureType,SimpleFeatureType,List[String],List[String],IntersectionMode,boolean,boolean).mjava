        public IntersectedFeatureIterator(SimpleFeatureIterator delegate,
                SimpleFeatureCollection firstFeatures, SimpleFeatureCollection secondFeatures,
                SimpleFeatureType firstFeatureCollectionSchema,
                SimpleFeatureType secondFeatureCollectionSchema,
                List<String> retainAttributesFstPar, List<String> retainAttributesSndPar,
                IntersectionMode intersectionMode, boolean percentagesEnabled, boolean areasEnabled) {
            this.retainAttributesFst = retainAttributesFstPar;
            this.retainAttributesSnd = retainAttributesSndPar;
            this.delegate = delegate;
            this.firstFeatures = firstFeatures;
            this.secondFeatures = secondFeatures;
            this.percentagesEnabled = percentagesEnabled;
            this.areasEnabled = areasEnabled;
            this.intersectionMode = intersectionMode;

            logger2.info("INFO----> Creating schema");
            // create the geometry attribute descriptor for the result
            SimpleFeatureTypeBuilder tb = new SimpleFeatureTypeBuilder();
            if (intersectionMode == IntersectionMode.FIRST) {
                geomType = firstFeatureCollectionSchema.getGeometryDescriptor();
            }
            if (intersectionMode == IntersectionMode.SECOND) {
                geomType = secondFeatureCollectionSchema.getGeometryDescriptor();
            }
            if (intersectionMode == IntersectionMode.INTERSECTION) {
                geomType = getIntersectionType(firstFeatures, secondFeatures);
            }
            tb.add(geomType);

            // gather the attributes from the first feature collection and skip
            collectAttributes(firstFeatureCollectionSchema, retainAttributesFstPar, tb);
            // gather the attributes from the second feature collection
            collectAttributes(secondFeatureCollectionSchema, retainAttributesSndPar, tb);
            // add the dyamic attributes as needed
            if (percentagesEnabled) {
                tb.add("percentageA", Double.class);
                tb.add("percentageB", Double.class);
            }
            if (areasEnabled) {
                tb.add("areaA", Double.class);
                tb.add("areaB", Double.class);
            }

            tb.setDescription(firstFeatureCollectionSchema.getDescription());
            tb.setCRS(firstFeatureCollectionSchema.getCoordinateReferenceSystem());
            tb.setAbstract(firstFeatureCollectionSchema.isAbstract());
            tb.setSuperType((SimpleFeatureType) firstFeatureCollectionSchema.getSuper());
            tb.setName(firstFeatureCollectionSchema.getName());

            this.fb = new SimpleFeatureBuilder(tb.buildFeatureType());

            subFeatureCollection = this.secondFeatures;

            this.dataGeomName = this.firstFeatures.getSchema().getGeometryDescriptor()
                    .getLocalName();
            logger2.info("INFO----> Schema created");
        }

