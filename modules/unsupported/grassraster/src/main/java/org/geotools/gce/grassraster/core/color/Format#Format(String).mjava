    /**
     * Formats a number in a printf format, like C
     *
     * @param s      the format string following printf format string
     *               The string has a prefix, a format code and a suffix. The prefix and suffix
     *               become part of the formatted output. The format code directs the
     *               formatting of the (single) parameter to be formatted. The code has the
     *               following structure
     *               <ul>
     *               <li> a % (required)
     *               <li> a modifier (optional)
     *               <dl>
     *               <dt> + <dd> forces display of + for positive numbers
     *               <dt> ~ <dd> do not count leading + or - in length
     *               <dt> 0 <dd> show leading zeroes
     *               <dt> - <dd> align left in the field
     *               <dt> space <dd> prepend a space in front of positive numbers
     *               <dt> # <dd> use "alternate" format. Add 0 or 0x for octal or hexadecimal numbers.
     *               Don't suppress trailing zeroes in general floating point format.
     *               </dl>
     *               <li> an integer denoting field width (optional)
     *               <li> a period followed by an integer denoting precision (optional)
     *               <li> a format descriptor (required)
     *               <dl>
     *               <dt>f <dd> floating point number in fixed format
     *               <dt>e, E <dd> floating point number in exponential notation (scientific format).
     *               The E format results in an uppercase E for the exponent (1.14130E+003), the e
     *               format in a lowercase e.
     *               <dt>g, G <dd> floating point number in general format (fixed format for small
     *               numbers, exponential format for large numbers). Trailing zeroes are suppressed.
     *               The G format results in an uppercase E for the exponent (if any), the g format
     *               in a lowercase e.
     *               <dt>d, i <dd> signed long integer and integer in decimal
     *               <dt>u <dd> unsigned integer in decimal
     *               <dt>x <dd> unsigned integer in hexadecimal
     *               <dt>o <dd> unsigned integer in octal
     *               <dt>s <dd> string
     *               <dt>c <dd> character
     *               </dl>
     *               </ul>
     */
    public Format( String s ) {
        width = 0;
        precision = -1;
        pre = "";
        post = "";
        leadingZeroes = false;
        showPlus = false;
        alternate = false;
        showSpace = false;
        leftAlign = false;
        countSignInLen = true;
        fmt = ' ';

        // int state = 0;
        int length = s.length();
        int parseState = 0;

        // 0 = prefix, 1 = flags, 2 = width, 3 = precision,
        // 4 = format, 5 = end
        int i = 0;

        while( parseState == 0 ) {
            if (i >= length) {
                parseState = 5;
            } else if (s.charAt(i) == '%') {
                if (i < length - 1) {
                    if (s.charAt(i + 1) == '%') {
                        pre = pre + '%';
                        i++;
                    } else {
                        parseState = 1;
                    }
                } else {
                    throw new java.lang.IllegalArgumentException();
                }
            } else {
                pre = pre + s.charAt(i);
            }
            i++;
        }

        while( parseState == 1 ) {
            if (i >= length) {
                parseState = 5;
            } else if (s.charAt(i) == ' ') {
                showSpace = true;
            } else if (s.charAt(i) == '-') {
                leftAlign = true;
            } else if (s.charAt(i) == '+') {
                showPlus = true;
            } else if (s.charAt(i) == '0') {
                leadingZeroes = true;
            } else if (s.charAt(i) == '#') {
                alternate = true;
            } else if (s.charAt(i) == '~') {
                countSignInLen = false;
            } else {
                parseState = 2;
                i--;
            }
            i++;
        }

        while( parseState == 2 ) {
            if (i >= length) {
                parseState = 5;
            } else if ('0' <= s.charAt(i) && s.charAt(i) <= '9') {
                width = width * 10 + s.charAt(i) - '0';
                i++;
            } else if (s.charAt(i) == '.') {
                parseState = 3;
                precision = 0;
                i++;
            } else {
                parseState = 4;
            }
        }

        while( parseState == 3 ) {
            if (i >= length) {
                parseState = 5;
            } else if ('0' <= s.charAt(i) && s.charAt(i) <= '9') {
                precision = precision * 10 + s.charAt(i) - '0';
                i++;
            } else {
                parseState = 4;
            }
        }

        if (parseState == 4) {
            if (i >= length) {
                parseState = 5;
            } else {
                fmt = s.charAt(i);
            }

            i++;
        }
        if (i < length) {
            post = s.substring(i, length);
        }
    }

