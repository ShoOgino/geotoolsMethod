    @Test
    public void testLineWithAttribute() throws Exception {
        //    <UserStyle>
        //      <Title>SLD Cook Book: Attribute-based line</Title>
        //      <FeatureTypeStyle>
        //        <Rule>
        //          <Name>local-road</Name>
        //          <ogc:Filter>
        //            <ogc:PropertyIsEqualTo>
        //              <ogc:PropertyName>type</ogc:PropertyName>
        //              <ogc:Literal>local-road</ogc:Literal>
        //            </ogc:PropertyIsEqualTo>
        //          </ogc:Filter>
        //          <LineSymbolizer>
        //            <Stroke>
        //              <CssParameter name="stroke">#009933</CssParameter>
        //              <CssParameter name="stroke-width">2</CssParameter>
        //            </Stroke>
        //          </LineSymbolizer>
        //        </Rule>
        //      </FeatureTypeStyle>
        //      <FeatureTypeStyle>
        //        <Rule>
        //          <Name>secondary</Name>
        //          <ogc:Filter>
        //            <ogc:PropertyIsEqualTo>
        //              <ogc:PropertyName>type</ogc:PropertyName>
        //              <ogc:Literal>secondary</ogc:Literal>
        //            </ogc:PropertyIsEqualTo>
        //          </ogc:Filter>
        //          <LineSymbolizer>
        //            <Stroke>
        //              <CssParameter name="stroke">#0055CC</CssParameter>
        //              <CssParameter name="stroke-width">3</CssParameter>
        //            </Stroke>
        //          </LineSymbolizer>
        //        </Rule>
        //      </FeatureTypeStyle>
        //      <FeatureTypeStyle>
        //        <Rule>
        //        <Name>highway</Name>
        //          <ogc:Filter>
        //            <ogc:PropertyIsEqualTo>
        //              <ogc:PropertyName>type</ogc:PropertyName>
        //              <ogc:Literal>highway</ogc:Literal>
        //            </ogc:PropertyIsEqualTo>
        //          </ogc:Filter>
        //          <LineSymbolizer>
        //            <Stroke>
        //              <CssParameter name="stroke">#FF0000</CssParameter>
        //              <CssParameter name="stroke-width">6</CssParameter>
        //            </Stroke>
        //          </LineSymbolizer>
        //        </Rule>
        //      </FeatureTypeStyle>
        //    </UserStyle>

        Style style = parse("line", "attribute.sld");

        FeatureTypeStyle featureStyle = style.featureTypeStyles().get(0);
        Rule rule = featureStyle.rules().get(0);
        assertEquals("local-road", rule.getName());
        assertEquals("type = 'local-road'", ECQL.toCQL(rule.getFilter()));

        LineSymbolizer line = (LineSymbolizer) rule.symbolizers().get(0);
        assertEquals(color("009933"), SLD.color(line));
        assertEquals(2, SLD.width(line));

        featureStyle = style.featureTypeStyles().get(1);
        rule = featureStyle.rules().get(0);
        assertEquals("secondary", rule.getName());
        assertEquals("type = 'secondary'", ECQL.toCQL(rule.getFilter()));

        line = (LineSymbolizer) rule.symbolizers().get(0);
        assertEquals(color("0055CC"), SLD.color(line));
        assertEquals(3, SLD.width(line));

        featureStyle = style.featureTypeStyles().get(2);
        rule = featureStyle.rules().get(0);
        assertEquals("highway", rule.getName());
        assertEquals("type = 'highway'", ECQL.toCQL(rule.getFilter()));

        line = (LineSymbolizer) rule.symbolizers().get(0);
        assertEquals(color("FF0000"), SLD.color(line));
        assertEquals(6, SLD.width(line));
    }

