    @Test
    public void testLineWithAttribute() throws Exception {
        //    <UserStyle>
        //      <Title>SLD Cook Book: Attribute-based line</Title>
        //      <FeatureTypeStyle>
        //        <Rule>
        //          <Name>local-road</Name>
        //          <ogc:Filter>
        //            <ogc:PropertyIsEqualTo>
        //              <ogc:PropertyName>type</ogc:PropertyName>
        //              <ogc:Literal>local-road</ogc:Literal>
        //            </ogc:PropertyIsEqualTo>
        //          </ogc:Filter>
        //          <LineSymbolizer>
        //            <Stroke>
        //              <CssParameter name="stroke">#009933</CssParameter>
        //              <CssParameter name="stroke-width">2</CssParameter>
        //            </Stroke>
        //          </LineSymbolizer>
        //        </Rule>
        //      </FeatureTypeStyle>
        //      <FeatureTypeStyle>
        //        <Rule>
        //          <Name>secondary</Name>
        //          <ogc:Filter>
        //            <ogc:PropertyIsEqualTo>
        //              <ogc:PropertyName>type</ogc:PropertyName>
        //              <ogc:Literal>secondary</ogc:Literal>
        //            </ogc:PropertyIsEqualTo>
        //          </ogc:Filter>
        //          <LineSymbolizer>
        //            <Stroke>
        //              <CssParameter name="stroke">#0055CC</CssParameter>
        //              <CssParameter name="stroke-width">3</CssParameter>
        //            </Stroke>
        //          </LineSymbolizer>
        //        </Rule>
        //      </FeatureTypeStyle>
        //      <FeatureTypeStyle>
        //        <Rule>
        //        <Name>highway</Name>
        //          <ogc:Filter>
        //            <ogc:PropertyIsEqualTo>
        //              <ogc:PropertyName>type</ogc:PropertyName>
        //              <ogc:Literal>highway</ogc:Literal>
        //            </ogc:PropertyIsEqualTo>
        //          </ogc:Filter>
        //          <LineSymbolizer>
        //            <Stroke>
        //              <CssParameter name="stroke">#FF0000</CssParameter>
        //              <CssParameter name="stroke-width">6</CssParameter>
        //            </Stroke>
        //          </LineSymbolizer>
        //        </Rule>
        //      </FeatureTypeStyle>
        //    </UserStyle>

        YamlMap style = encode("line", "attribute.sld");


        YamlMap rule = style.seq("feature-styles").map(0).seq("rules").map(0);
        assertEquals("local-road", rule.str("name"));
        assertEquals("${type = 'local-road'}", rule.str("filter"));

        YamlMap line = rule.seq("symbolizers").map(0).map("line");
        assertThat(line.get("stroke-color"), isColor("009933"));
        assertEquals(2, line.integer("stroke-width").intValue());

        rule = style.seq("feature-styles").map(1).seq("rules").map(0);
        assertEquals("secondary", rule.str("name"));
        assertEquals("${type = 'secondary'}", rule.str("filter"));

        line = rule.seq("symbolizers").map(0).map("line");
        assertThat(line.get("stroke-color"), isColor("0055CC"));
        assertEquals(3, line.integer("stroke-width").intValue());

        rule = style.seq("feature-styles").map(2).seq("rules").map(0);
        assertEquals("highway", rule.str("name"));
        assertEquals("${type = 'highway'}", rule.str("filter"));

        line = rule.seq("symbolizers").map(0).map("line");
        assertThat(line.get("stroke-color"), isColor("FF0000"));
        assertEquals(6, line.integer("stroke-width").intValue());
    }

