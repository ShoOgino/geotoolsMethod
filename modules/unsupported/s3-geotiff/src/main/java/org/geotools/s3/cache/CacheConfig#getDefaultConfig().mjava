    public static CacheConfig getDefaultConfig() {
        CacheConfig config = new CacheConfig();

        if (System.getProperty(S3_CHUNK_SIZE_BYTES) != null) {
            config.setChunkSizeBytes(Integer.getInteger(S3_CHUNK_SIZE_BYTES));
        }

        if (Boolean.getBoolean(S3_CACHING_DISABLE_DISK)) {
            config.setUseDiskCache(false);
        }

        if (Boolean.getBoolean(S3_CACHING_USE_OFF_HEAP)) {
            config.setUseOffHeapCache(true);
        }

        if (System.getProperty(S3_CACHING_CHUNK_SIZE_BYTES) != null) {
            try {
                Integer chunkSize =
                        Integer.parseInt(System.getProperty(S3_CACHING_CHUNK_SIZE_BYTES));
                config.setChunkSizeBytes(chunkSize);
            } catch (NumberFormatException e) {
                LOGGER.log(Level.FINER, "Can't parse chunk size", e);
            }
        }

        if (System.getProperty(S3_CACHING_HEAP_SIZE) != null) {
            try {
                Integer heapSize = Integer.parseInt(System.getProperty(S3_CACHING_HEAP_SIZE));
                config.setHeapSize(heapSize);
            } catch (NumberFormatException e) {
                LOGGER.log(Level.FINER, "Can't parse heap", e);
            }
        }

        if (System.getProperty(S3_CACHING_DISK_CACHE_SIZE) != null) {
            try {
                Integer diskCacheSize =
                        Integer.parseInt(System.getProperty(S3_CACHING_DISK_CACHE_SIZE));
                config.setDiskCacheSize(diskCacheSize);
            } catch (NumberFormatException e) {
                LOGGER.log(Level.FINER, "Can't parse disk cache size", e);
            }
        }

        if (System.getProperty(S3_CACHING_DISK_PATH) != null) {
            try {
                String diskPath = System.getProperty(S3_CACHING_DISK_PATH);
                Path cachePath = Paths.get(diskPath);
                config.setCacheDirectory(cachePath);
            } catch (InvalidPathException e) {
                LOGGER.log(Level.FINER, "Can't parse disk cache path", e);
            }
        } else {
            if (config.isUseDiskCache()) {
                try {
                    config.setCacheDirectory(Files.createTempDirectory("s3Cachine"));
                } catch (IOException e) {
                    throw new RuntimeException(
                            "CAN'T CREATE TEMP CACHING DIRECTORY AND NO DIRECTORY SPECIFIED", e);
                }
            }
        }

        if (System.getProperty(S3_CACHING_EH_CACHE_CONFIG) != null) {
            String ehCachePath = System.getProperty(S3_CACHING_EH_CACHE_CONFIG);
            config.setConfigurationPath(ehCachePath);
        }

        if (System.getProperty(S3_CACHING_TIME_TO_IDLE) != null) {
            try {
                long timeToIdle = Long.parseLong(System.getProperty(S3_CACHING_TIME_TO_IDLE));
                config.setTimeToIdle(timeToIdle);
            } catch (NumberFormatException e) {
                LOGGER.log(Level.FINER, "Can't parse time to idle", e);
            }
        }

        if (System.getProperty(S3_CACHING_TIME_TO_LIVE) != null) {
            try {
                long timeToLive = Long.parseLong(System.getProperty(S3_CACHING_TIME_TO_LIVE));
                config.setTimeToLive(timeToLive);
            } catch (NumberFormatException e) {
                LOGGER.log(Level.FINER, "Can't parse time to live", e);
            }
        }

        return config;
    }

