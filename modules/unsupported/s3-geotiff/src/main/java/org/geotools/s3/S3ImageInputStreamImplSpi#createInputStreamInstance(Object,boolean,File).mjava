    /**
     * Returns an instance of the ImageInputStream implementation associated with this service
     * provider.
     *
     * @param input an object of the class type returned by getInputClass.
     * @param useCache a boolean indicating whether a cache eraf should be used, in cases where it
     *     is optional.
     * @param cacheDir a File indicating where the cache eraf should be created, or null to use the
     *     system directory.
     * @return an ImageInputStream instance.
     * @throws IllegalArgumentException if input is not an instance of the correct class or is null.
     */
    @Override
    public ImageInputStream createInputStreamInstance(
            Object input, boolean useCache, File cacheDir) {
        if (LOGGER.isLoggable(Level.FINE)) {
            LOGGER.fine(
                    "S3ImageInputStreamImplSpi.createInputStreamInstance("
                            + input.getClass()
                            + ")");
        }
        if (input instanceof S3ImageInputStreamImpl) {
            try {
                return new S3ImageInputStreamImpl(((S3ImageInputStreamImpl) input).getUrl());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }

        try {
            String path = (String) input;
            return new S3ImageInputStreamImpl(path);
        } catch (IOException e) {
            if (LOGGER.isLoggable(Level.FINE)) LOGGER.log(Level.FINE, e.getLocalizedMessage(), e);
            return null;
        }
    }

