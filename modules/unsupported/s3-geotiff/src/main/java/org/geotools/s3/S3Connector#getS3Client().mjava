    public AmazonS3 getS3Client() {
        Regions region;
        if (this.regionString != null) {
            try {
                region = Regions.valueOf(regionString);
            } catch (IllegalArgumentException e) {
                // probably not great to have a default, but we can't just blow up if this
                // property isn't set
                LOGGER.warning(
                        "AWS_REGION property is set, but not set correctly. "
                                + "Check that the AWS_REGION property matches the Regions enum");
                region = Regions.US_EAST_1;
            }
        } else {
            LOGGER.warning("No AWS_REGION property set, defaulting to US_EAST_1");
            region = Regions.US_EAST_1;
        }

        AmazonS3 s3;
        // custom endpoint
        if (url != null && !url.startsWith("s3://")) {
            if (!url.contains("://")) {
                throw new IllegalArgumentException(
                        "Following this style: s3Alias://bucket/filename");
            }
            String s3Alias = url.split("://")[0];
            String pahtToFile = url.split("://")[1];

            Properties prop = readProperties(s3Alias);

            s3 =
                    new AmazonS3Client(
                            new BasicAWSCredentials(
                                    prop.getProperty(s3Alias + ".s3.user"),
                                    prop.getProperty(s3Alias + ".s3.password")));

            final S3ClientOptions clientOptions =
                    S3ClientOptions.builder().setPathStyleAccess(true).build();
            s3.setS3ClientOptions(clientOptions);
            String endpoint = prop.getProperty(s3Alias + ".s3.endpoint");
            if (!endpoint.endsWith("/")) {
                endpoint = endpoint + "/";
            }
            s3.setEndpoint(endpoint);

            // aws cli client
        } else if (useAnon) {
            s3 = new AmazonS3Client(new AnonymousAWSCredentials());
            s3.setRegion(Region.getRegion(region));
        } else {
            s3 = new AmazonS3Client();
            s3.setRegion(Region.getRegion(region));
        }

        return s3;
    }

