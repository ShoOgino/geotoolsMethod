    private Expression getSourceExpression(FeatureTypeMapping mappings, XPathUtil.StepList xpath,
                                           NestedAttributeMapping nestedMapping) {
        if (!nestedMapping.getTargetXPath().equalsIgnoreIndex(xpath.subList(0, nestedMapping.getTargetXPath().size()))) {
            return Expression.NIL;
        }
        int steps = xpath.size();
        XPathUtil.StepList finalXpath = xpath.subList(nestedMapping.getTargetXPath().size(), steps);
        AttributeMapping attributeMapping = nestedMapping;
        int end = finalXpath.size();
        int start = 0;
        while (end > start) {
            try {
                SearchResult result = search(finalXpath.subList(start, end), attributeMapping);
                if (!result.found) {
                    break;
                }
                attributeMapping = result.attributeMapping;
                start += result.index;
            } catch (Exception exception) {
                throw new RuntimeException("Error getting feature type mapping.");
            }
        }
        if (attributeMapping == null) {
            return Expression.NIL;
        }
        Expression sourceExpression = attributeMapping.getSourceExpression();
        if (sourceExpression instanceof JsonSelectFunction) {
            List<Expression> parameters = new ArrayList<>();
            JsonSelectAllFunction jsonSelect = new JsonSelectAllFunction();
            jsonSelect.setParameters(((JsonSelectFunction) sourceExpression).getParameters());
            return jsonSelect;
        }
        return sourceExpression;
    }

