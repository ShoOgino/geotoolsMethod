    /**
     * Build features for given layer; convert mongo collection records to equivalent geoTools
     * SimpleFeatureBuilder
     * 
     * @param query mongoDB query (empty to find all)
     */
    private void buildFeatures (BasicDBObject query)
    {
        if (layer == null)
        {
            log.warning( "buildFeatures called, but layer is null" );
            return;
        }
        Mongo mongo = null;
        try
        {
            if (layer.getGeometryType() == null)
            {
                return;
            }
            mongo = new Mongo( layer.getConfig().getHost(), layer.getConfig().getPort() );
            DB db = mongo.getDB( layer.getConfig().getDB() );
            DBCollection coll = db.getCollection( layer.getName() );
            DBCursor cur = coll.find( query );
            minX = 180;
            maxX = -180;
            minY = 90;
            maxY = -90;
            SimpleFeatureBuilder fb = new SimpleFeatureBuilder( layer.getSchema() );
            // use SimpleFeatureBuilder.set(name, value) rather than add(value) since
            // attributes not in guaranteed order
            log.finer( "cur.count()=" + cur.count() );

            while (cur.hasNext())
            {
                DBObject dbo = cur.next();
                if (dbo == null)
                {
                    continue;
                }

                // get mongo id and ensure valid
                if (dbo.get( "_id" ) instanceof ObjectId)
                {
                    ObjectId oid = (ObjectId) dbo.get( "_id" );
                    fb.set( "_id", oid.toString() );
                }
                else if (dbo.get( "_id" ) instanceof String)
                {
                    fb.set( "_id", dbo.get( "_id" ) );
                }
                else
                {
                    throw new MongoPluginException( "_id is invalid type: "
                            + dbo.get( "_id" ).getClass() );
                }

                // ensure geometry defined
                DBObject geo = (DBObject) dbo.get( "geometry" );
                if (geo == null || geo.get( "type" ) == null
                        || (geo.get( "coordinates" ) == null && geo.get( "geometries" ) == null))
                {
                    continue;
                }

                // GeometryType of current record
                GeometryType recordGeoType = GeometryType.valueOf( (String) geo.get( "type" ) );
                // skip record if its geo type does not match layer geo type
                if (!layer.getGeometryType().equals( recordGeoType ))
                {
                    continue;
                }

                // create Geometry for given type
                Geometry recordGeometry = createGeometry( recordGeoType, geo );
                if (recordGeometry != null)
                {
                    fb.set( "geometry", recordGeometry );
                    // set non-geometry properties for feature (GeoJSON.properties)
                    DBObject props = (DBObject) dbo.get( "properties" );
                    setProperties( fb, "properties", props );
                    features.add( fb.buildFeature( null ) );
                    bounds = new ReferencedEnvelope( minX, maxX, minY, maxY, layer.getCRS() );
                }
                else
                {
                    fb.reset();
                }
            }
        }
        catch (Throwable t)
        {
            log.severe( "Error building layer " + layer.getName() + "; " + t.getLocalizedMessage() );
        }
        if (mongo != null)
        {
            mongo.close();
        }
    }

