    @Override
    public void createSchema(SimpleFeatureType incoming) throws IOException {

        final String geometryMapping = "geometry";
        
        CoordinateReferenceSystem incomingCRS = incoming.getCoordinateReferenceSystem();
        if (incomingCRS == null) {
            incoming.getGeometryDescriptor().getCoordinateReferenceSystem();
        }
        if (!CRS.equalsIgnoreMetadata(incomingCRS, DefaultGeographicCRS.WGS84)) {
            throw new IllegalArgumentException("Unsupported coordinate reference system, only WGS84 supported");
        }
        // Need to generate FeatureType instance with proper namespace URI
        SimpleFeatureTypeBuilder builder = new SimpleFeatureTypeBuilder();
        builder.init(incoming);
        builder.setName(name(incoming.getTypeName()));
        incoming = builder.buildFeatureType();
        
        String gdName = incoming.getGeometryDescriptor().getLocalName();
        for (AttributeDescriptor ad : incoming.getAttributeDescriptors()) {
            String adName = ad.getLocalName();
            if (gdName.equals(adName)) {
                ad.getUserData().put(KEY_mapping, geometryMapping);
                ad.getUserData().put(KEY_encoding, "GeoJSON");
            } else {
                ad.getUserData().put(KEY_mapping, "properties." + adName );
            }
        }
        // pre-populating this makes view creation easier...
        incoming.getUserData().put(KEY_collection, incoming.getTypeName());
        
        // Collection needs to exist (with index) so that it's returned with createTypeNames()
        dataStoreDB.createCollection(incoming.getTypeName(), new BasicDBObject()).ensureIndex(new BasicDBObject(geometryMapping, "2dsphere"));
       
        // Store FeatureType instance since it can't be inferred (no documents)
        ContentEntry entry = entry (incoming.getName());
        ContentState state = entry.getState(null);
        state.setFeatureType(incoming);
        
        schemaStore.storeSchema(incoming);
    }

