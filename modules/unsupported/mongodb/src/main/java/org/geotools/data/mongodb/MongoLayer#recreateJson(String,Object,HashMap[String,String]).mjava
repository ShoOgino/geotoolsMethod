    /**
     * Build JSON object from map of property names and types
     * 
     * @param baseName base name, e.g. "properties"
     * @param base base object to store results, either BasicDBObject or BasicBSONList
     * @param fieldMap map of Java Class names indexed by field name
     * @return BSONObject object, either JSON or Array
     */
    private BSONObject recreateJson (String baseName, Object base, HashMap<String, String> fieldMap)
    {
        // strip relevant field names corresponding to required property
        HashMap<String, String> propMap = new HashMap<String, String>();
        for (String key : fieldMap.keySet())
        {
            if (key.startsWith( baseName + "." ))
            {
                String propKey = key.substring( baseName.length() + 1 );
                propMap.put( propKey, fieldMap.get( key ) );
            }
        }

        // convert propMap to appropriate object; either BasicDBObject (JSON) or BasicBSONList
        // (Array)
        BSONObject json = null;
        if (base instanceof BasicDBObject)
        {
            json = new BasicDBObject();
        }
        else if (base instanceof BasicBSONList)
        {
            json = new BasicBSONList();
        }
        else
        {
            log.warning( "Error, can only process BasicDBObject (JSON) or BasicBSONList (Array), base is a "
                    + base.getClass() );
            return new BasicBSONObject();
        }

        for (String propKey : propMap.keySet())
        {
            if (!propKey.contains( "." ))
            {
                // ignore nulls
                if (propMap.get( propKey ) != null)
                {
                    // check for nested JSON or Array (BasicDBObject or BasicBSONList)
                    if (propMap.get( propKey ).equals( "com.mongodb.BasicDBObject" ))
                    {
                        BasicDBObject subJSON = new BasicDBObject();
                        json.put( propKey, recreateJson( propKey, subJSON, propMap ) );
                    }
                    else if (propMap.get( propKey ).equals( "com.mongodb.BasicDBList" ))
                    {
                        BasicBSONList subArray = new BasicBSONList();
                        json.put( propKey, recreateJson( propKey, subArray, propMap ) );
                    }
                    else
                    {
                        try
                        {
                            json.put( propKey, Class.forName( propMap.get( propKey ) )
                                    .newInstance() );
                        }
                        catch (InstantiationException ie)
                        {
                            // Number subclasses no nullary cons; use constructor that takes String
                            // arg.
                            try
                            {
                                json.put( propKey, (Class.forName( propMap.get( propKey ) )
                                        .getConstructor( String.class )).newInstance( "0" ) );
                            }
                            catch (Exception e)
                            {
                            }
                        }
                        catch (Exception e)
                        {
                        }
                    }
                }
            }
        }

        return json;
    }

