    /**
     * Generate model of collection records' data fields and types
     * 
     * @param coll mongo collection
     * @param buildRule which rule to apply if same named fields with different types exist
     * @return JSON object describing collection record
     */
    private DBObject getCollectionModel (DBCollection coll, RecordBuilder buildRule)
    {
        // call map-reduce job to generate metadata
        // mongo java driver calls mapReduce with the functions rather than the name of the
        // functions
        // function prototypes from scripts/mrscripts/MetaDataCompute.js
        // (do not include comments in quoted javascript functions below-gives mongo error)
        coll.mapReduce( metaMapFunc, metaReduceFunc, metaResultsColl, new BasicDBObject() );

        // get mapping of field names and types, and counts for different types
        DBCollection metaColl = coll.getDB().getCollection( metaResultsColl );
        HashMap<String, ClassCount> fieldMap = getFieldMap( metaColl );
        log.finest( "fieldMap=" + fieldMap );

        // resulting collection may have dupes for fields of different types
        // use build rule to determine final type
        HashMap<String, String> finalMap = finalizeMajorityRule( fieldMap, buildRule );
        log.finest( "finalMap=" + finalMap );

        // convert map of field names with types and associated counts to a JSON DBObject
        DBObject metaData = convertMapToJson( finalMap );
        log.finest( "metaData=" + metaData );

        return metaData;
    }

