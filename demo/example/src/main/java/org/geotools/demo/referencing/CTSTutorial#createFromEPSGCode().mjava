	/**
	 * Creates a CRS from an EPSG code. There are a few different EPSG authority
	 * factories in geotools that do roughly the same thing:
	 * 
	 * <ul>
	 * <li>gt2-epsg-access.jar is backed by the official EPSG MS Access
	 * database (only works on MS Windows, therefore I have not shown how to
	 * configure it here).</li>
	 * <li>gt2-epsg-hsql.jar provides an embeded hsql database created from the
	 * EPSG SQL scripts. This contains the same information as the MS Arcess
	 * database.</li>
	 * <li>other factories allow the EPSG information to be in an external
	 * database (postgresql, mysql, oracle)</li>
	 * <li>gt2-epsg-wkt.jar is a simple properties file with WKT descriptions
	 * for EPSG defined CRS codes. This file does not derive directly from the
	 * official EPSG database, so its should be used with caution. It provides a
	 * very simple method of creating a new authority factory and named objects.</li>
	 * </ul>
	 * 
	 * The specific authority factory returned by getCRSAuthorityFactory is
	 * dependent on the different factories on your classpath (ie WKT or Access
	 * or HSQL) and the hints you provide. By default the "better" authority
	 * factory should be used if more than one is available.
	 * 
	 * TODO check on the use of hints 
	 * TODO expand on how to use EPSG data in a
	 * postgres db (this may be a 2.2 feature, but FactoryUsingANSISQL may work)
	 * 
	 */
	void createFromEPSGCode() throws Exception {
		System.out.println("------------------------------------------");
		System.out.println("Creating a CRS from an authority factory:");
		// START SNIPPET: crsFromCode
		String code = "26910";
		CoordinateReferenceSystem crs = ReferencingFactoryFinder.getCRSAuthorityFactory(
				"EPSG", null).createCoordinateReferenceSystem(code);
		// END SNIPPET: crsFromCode
		System.out.println("  CRS: " + crs.toWKT());
		System.out.println("Identified CRS object:");
		printIdentifierStuff(crs);
		System.out.println("------------------------------------------");
	}

