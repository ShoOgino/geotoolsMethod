    /**
     * Prompt the user to select the two feature attributes to use for
     * labelling and create a new Style instance.
     */
    private Style createLabelStyle(FeatureSource featureSource) {
        FeatureType schema = featureSource.getSchema();
        List<String> fieldNames = new ArrayList<String>();

        for (PropertyDescriptor desc : schema.getDescriptors()) {
            if (String.class.isAssignableFrom( desc.getType().getBinding() )) {
                fieldNames.add(desc.getName().getLocalPart());
            }
        }

        if (fieldNames.size() < 2) {
            JOptionPane.showMessageDialog(null,
                    "This example needs a feature type with at least two String fields",
                    "Bummer", JOptionPane.WARNING_MESSAGE);

            return null;
        }

        Style style = null;
        FieldWizard wizard = new FieldWizard(fieldNames);

        if (wizard.showModalDialog() == JWizard.FINISH) {
            String[] fields = wizard.getSelections();

            style = SLD.createSimpleStyle((SimpleFeatureType) schema, Color.CYAN);

            StyleFactory sf = CommonFactoryFinder.getStyleFactory(null);
            FilterFactory ff = CommonFactoryFinder.getFilterFactory2(null);

            TextSymbolizer sym = sf.createTextSymbolizer();
            
            /*
             * Instead of setting the label to a feature property directly,
             * we set it to a filter function ("concatenate") to form a
             * compound label from two properties and a delimiter
             */
            sym.setLabel(ff.function("Concatenate",
                    ff.property(fields[0]),
                    ff.literal(":"),
                    ff.property(fields[1])));

            SLD.rules(style)[0].symbolizers().add(sym);

            return style;
        }

        return style;
    }

