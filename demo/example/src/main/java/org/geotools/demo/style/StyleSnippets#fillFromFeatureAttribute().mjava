    /**
     * This snippet illustrates creating a feature type style with different
     * color fills based on the feature's data. 
     */
    public void fillFromFeatureAttribute() {
        StyleBuilder styleBuilder = new StyleBuilder();
        Style style = styleBuilder.createStyle();

        /*
         * Assume that we are working with a feature type that has
         * an attribute PERCENT with integer values between 0 and 100
         */
        final String typeName = "pretend"; // feature type name
        final String attrName = "PERCENT"; // data attribute name

        // breaks for PERCENT value ranges
        final int[] breaks = {10, 25, 50, 75, 100};

        // corresponding fill colors
        final Color[] colors = {
            Color.BLUE,
            Color.GREEN,
            Color.YELLOW,
            Color.ORANGE,
            Color.RED
        };

        FilterFactory ff = CommonFactoryFinder.getFilterFactory(GeoTools.getDefaultHints());
        Rule[] rules = new Rule[breaks.length];

        for (int i = 0; i < breaks.length; i++) {
            // create a fill for this value range
            Fill fill = styleBuilder.createFill(colors[i], 0.5d);  // partially transparent

            // create the polygon outline stroke
            Stroke stroke = styleBuilder.createStroke(colors[i], 1.0d); // line width 1.0

            // create the symbolizer
            PolygonSymbolizer symbolizer = styleBuilder.createPolygonSymbolizer(stroke, fill);

            // create a rule and set the condition (value range) for which features
            // it will apply to
            Rule rule = styleBuilder.createRule(symbolizer);
            Filter filter = ff.lessOrEqual(ff.property(attrName), ff.literal(breaks[i]));
            rule.setFilter(filter);

            // if this is not the first rule it is an 'else' rule
            rule.setIsElseFilter(i > 0);

            rules[i] = rule;
        }

        // package our rules as a feature type style
        FeatureTypeStyle fts = styleBuilder.createFeatureTypeStyle(typeName, rules);

        // package that in our Style and we're ready to render !
        style.featureTypeStyles().add(fts);
    }

