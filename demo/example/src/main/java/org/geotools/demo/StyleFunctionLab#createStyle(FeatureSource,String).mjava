    // docs start create style
    /**
     * Create a rendering style to display features from the given feature source
     * by matching unique values of the specified feature attribute to colours
     *
     * @param featureSource the feature source
     * @return a new Style instance
     */
    private Style createStyle(FeatureSource featureSource, String attributeName) 
            throws Exception {

        FilterFactory2 filterFactory = CommonFactoryFinder.getFilterFactory2(null);
        StyleFactory styleFactory = CommonFactoryFinder.getStyleFactory(null);

        ColorLookupFunction colourFn = new ColorLookupFunction(
                featureSource.getFeatures(), filterFactory.property(attributeName));

        Stroke stroke = styleFactory.createStroke(
                colourFn,                      // function to choose feature colour
                filterFactory.literal(1.0f),   // line width
                filterFactory.literal(1.0f));  // opacity

        Fill fill = styleFactory.createFill(
                colourFn,                      // function to choose feature colour
                filterFactory.literal(1.0f));  // opacity

        Class<?> geomClass = featureSource.getSchema().getGeometryDescriptor().getType().getBinding();
        Symbolizer sym = null;
        if (Polygon.class.isAssignableFrom(geomClass) ||
            MultiPolygon.class.isAssignableFrom(geomClass)) {

            sym = styleFactory.createPolygonSymbolizer(stroke, fill, null);

        } else if (LineString.class.isAssignableFrom(geomClass) ||
                   MultiLineString.class.isAssignableFrom(geomClass)) {
            sym = styleFactory.createLineSymbolizer(stroke, null);

        } else {
            Graphic gr = styleFactory.createDefaultGraphic();
            gr.graphicalSymbols().clear();
            Mark mark = styleFactory.getCircleMark();
            mark.setFill(fill);
            mark.setStroke(stroke);
            gr.graphicalSymbols().add(mark);
            gr.setSize(filterFactory.literal(10.0f));
            sym = styleFactory.createPointSymbolizer(gr, null);
        }

        Style style = SLD.wrapSymbolizers(sym);
        return style;
    }

